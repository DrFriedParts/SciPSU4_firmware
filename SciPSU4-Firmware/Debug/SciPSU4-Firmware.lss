
SciPSU4-Firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004ac4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000011c  00802000  00004ac4  00004b58  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00001b95  0080211c  0080211c  00004c74  2**0
                  ALLOC
  3 .stab         00000714  00000000  00000000  00004c74  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00005388  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000200  00000000  00000000  00005410  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006655  00000000  00000000  00005610  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000010fd  00000000  00000000  0000bc65  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000212e  00000000  00000000  0000cd62  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000d90  00000000  00000000  0000ee90  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001075  00000000  00000000  0000fc20  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000039d5  00000000  00000000  00010c95  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000760  00000000  00000000  0001466a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__ctors_end>
       4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
       8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
       c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      10:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      14:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      18:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      1c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      20:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      24:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      28:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      2c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      30:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      34:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      38:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      3c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      40:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      44:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      48:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      4c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      50:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      54:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      58:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      5c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      60:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      64:	0c 94 23 0d 	jmp	0x1a46	; 0x1a46 <__vector_25>
      68:	0c 94 b6 0e 	jmp	0x1d6c	; 0x1d6c <__vector_26>
      6c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      70:	0c 94 91 0d 	jmp	0x1b22	; 0x1b22 <__vector_28>
      74:	0c 94 13 0e 	jmp	0x1c26	; 0x1c26 <__vector_29>
      78:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      7c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      80:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      84:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      88:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      8c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      90:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      94:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      98:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      9c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      a0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      a4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      a8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      ac:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      b0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      b4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      b8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      bc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      c0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      c4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      c8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      cc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      d0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      d4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      d8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      dc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      e0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      e4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      e8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      ec:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      f0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      f4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      f8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      fc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     100:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     104:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     108:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     10c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     110:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     114:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     118:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     11c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     120:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     124:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     128:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     12c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     130:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     134:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     138:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     13c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     140:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     144:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     148:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     14c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     150:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     154:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     158:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     15c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     160:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     164:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     168:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     16c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     170:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     174:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     178:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     17c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     180:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     184:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     188:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     18c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     190:	0c 94 bd 07 	jmp	0xf7a	; 0xf7a <__vector_100>
     194:	0c 94 25 08 	jmp	0x104a	; 0x104a <__vector_101>
     198:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     19c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1a0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1a4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1a8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1ac:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1b0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1b4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1b8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1bc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1c0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1c4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1c8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1cc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1d0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1d4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1d8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1dc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1e0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1e4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1e8:	0c 94 8f 18 	jmp	0x311e	; 0x311e <__vector_122>
     1ec:	0c 94 cb 12 	jmp	0x2596	; 0x2596 <__vector_123>
     1f0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>

000001f4 <__ctors_end>:
     1f4:	11 24       	eor	r1, r1
     1f6:	1f be       	out	0x3f, r1	; 63
     1f8:	cf ef       	ldi	r28, 0xFF	; 255
     1fa:	df e3       	ldi	r29, 0x3F	; 63
     1fc:	de bf       	out	0x3e, r29	; 62
     1fe:	cd bf       	out	0x3d, r28	; 61
     200:	00 e0       	ldi	r16, 0x00	; 0
     202:	0c bf       	out	0x3c, r16	; 60
     204:	18 be       	out	0x38, r1	; 56
     206:	19 be       	out	0x39, r1	; 57
     208:	1a be       	out	0x3a, r1	; 58
     20a:	1b be       	out	0x3b, r1	; 59

0000020c <__do_copy_data>:
     20c:	11 e2       	ldi	r17, 0x21	; 33
     20e:	a0 e0       	ldi	r26, 0x00	; 0
     210:	b0 e2       	ldi	r27, 0x20	; 32
     212:	e4 ec       	ldi	r30, 0xC4	; 196
     214:	fa e4       	ldi	r31, 0x4A	; 74
     216:	00 e0       	ldi	r16, 0x00	; 0
     218:	0b bf       	out	0x3b, r16	; 59
     21a:	02 c0       	rjmp	.+4      	; 0x220 <__do_copy_data+0x14>
     21c:	07 90       	elpm	r0, Z+
     21e:	0d 92       	st	X+, r0
     220:	ac 31       	cpi	r26, 0x1C	; 28
     222:	b1 07       	cpc	r27, r17
     224:	d9 f7       	brne	.-10     	; 0x21c <__do_copy_data+0x10>

00000226 <__do_clear_bss>:
     226:	1c e3       	ldi	r17, 0x3C	; 60
     228:	ac e1       	ldi	r26, 0x1C	; 28
     22a:	b1 e2       	ldi	r27, 0x21	; 33
     22c:	01 c0       	rjmp	.+2      	; 0x230 <.do_clear_bss_start>

0000022e <.do_clear_bss_loop>:
     22e:	1d 92       	st	X+, r1

00000230 <.do_clear_bss_start>:
     230:	a1 3b       	cpi	r26, 0xB1	; 177
     232:	b1 07       	cpc	r27, r17
     234:	e1 f7       	brne	.-8      	; 0x22e <.do_clear_bss_loop>
     236:	0e 94 1e 07 	call	0xe3c	; 0xe3c <main>
     23a:	0c 94 60 25 	jmp	0x4ac0	; 0x4ac0 <_exit>

0000023e <__bad_interrupt>:
     23e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000242 <init_adc>:
#include "adc.h"

//Handles the ADC

void init_adc(){
	ADCA.REFCTRL = B8(00010000); //Use AVCC/1.6 = 2.063V as reference (highest allowed)
     242:	e0 e0       	ldi	r30, 0x00	; 0
     244:	f2 e0       	ldi	r31, 0x02	; 2
     246:	80 e1       	ldi	r24, 0x10	; 16
     248:	82 83       	std	Z+2, r24	; 0x02
	ADCA.CTRLB = B8(00000000); //12bit-right adjusted; One-shot conversion
     24a:	11 82       	std	Z+1, r1	; 0x01
	ADCA.CTRLA = B8(00000001); //Enable ADC;
     24c:	91 e0       	ldi	r25, 0x01	; 1
     24e:	90 83       	st	Z, r25
	ADCA.CH0.MUXCTRL = B8(00010000); //CH0 converts from PA2
     250:	81 a3       	lds	r24, 0x51
	ADCA.CH1.MUXCTRL = B8(00011000); //CH1 converts from PA3
     252:	88 e1       	ldi	r24, 0x18	; 24
     254:	81 a7       	lds	r24, 0x71
}
     256:	08 95       	ret

00000258 <adc_ch0>:
//#############################################################

//Performs a single 12-bit conversion on ADC CH0
//BLOCKS UNTIL CONVERSION COMPLETE!
uint16_t adc_ch0(){
	ADCA.CH0.CTRL = B8(10000001); //Single ended input mode; No gain
     258:	81 e8       	ldi	r24, 0x81	; 129
     25a:	e0 e0       	ldi	r30, 0x00	; 0
     25c:	f2 e0       	ldi	r31, 0x02	; 2
     25e:	80 a3       	lds	r24, 0x50
	while(ADCA.CH0.INTFLAGS == 0x00); //wait for conversion to complete
     260:	83 a1       	lds	r24, 0x43
     262:	88 23       	and	r24, r24
     264:	e9 f3       	breq	.-6      	; 0x260 <adc_ch0+0x8>
	ADCA.CH0.INTFLAGS = 0x01; //clear the conversion complete flag
     266:	e0 e0       	ldi	r30, 0x00	; 0
     268:	f2 e0       	ldi	r31, 0x02	; 2
     26a:	81 e0       	ldi	r24, 0x01	; 1
     26c:	83 a3       	lds	r24, 0x53
	return ADCA.CH0.RES;
     26e:	84 a1       	lds	r24, 0x44
     270:	95 a1       	lds	r25, 0x45
}
     272:	08 95       	ret

00000274 <adc_ch1>:

//Performs a single 12-bit conversion on ADC CH1
//BLOCKS UNTIL CONVERSION COMPLETE!
uint16_t adc_ch1(){
	ADCA.CH1.CTRL = B8(10000001); //Single ended input mode; No gain
     274:	81 e8       	ldi	r24, 0x81	; 129
     276:	e0 e0       	ldi	r30, 0x00	; 0
     278:	f2 e0       	ldi	r31, 0x02	; 2
     27a:	80 a7       	lds	r24, 0x70
	while(ADCA.CH1.INTFLAGS == 0x00); //wait for conversion to complete
     27c:	83 a5       	lds	r24, 0x63
     27e:	88 23       	and	r24, r24
     280:	e9 f3       	breq	.-6      	; 0x27c <adc_ch1+0x8>
	ADCA.CH1.INTFLAGS = 0x01; //clear the conversion complete flag
     282:	e0 e0       	ldi	r30, 0x00	; 0
     284:	f2 e0       	ldi	r31, 0x02	; 2
     286:	81 e0       	ldi	r24, 0x01	; 1
     288:	83 a7       	lds	r24, 0x73
	return ADCA.CH1.RES;
     28a:	84 a5       	lds	r24, 0x64
     28c:	95 a5       	lds	r25, 0x65
}
     28e:	08 95       	ret

00000290 <adc_ch0_stats>:

//Average num_to_avg samples and return the result
//Pass in only power-of-2 integers; Max is 2^20;
//BLOCKS UNTIL ALL CONVERSIONS COMPLETE! USE WITH CAUTION!
//Updates the global adc_stats variables (adc_avg, adc_max, etc)
void adc_ch0_stats(uint16_t num_to_avg){
     290:	cf 92       	push	r12
     292:	df 92       	push	r13
     294:	ef 92       	push	r14
     296:	ff 92       	push	r15
     298:	0f 93       	push	r16
     29a:	1f 93       	push	r17
     29c:	cf 93       	push	r28
     29e:	df 93       	push	r29
     2a0:	8c 01       	movw	r16, r24
	uint16_t intermediate;
	uint32_t sum = 0;
	uint16_t i = 0;
	adc_max = 0;
     2a2:	10 92 23 21 	sts	0x2123, r1
     2a6:	10 92 24 21 	sts	0x2124, r1
	adc_min = 0xFFFF;
     2aa:	8f ef       	ldi	r24, 0xFF	; 255
     2ac:	9f ef       	ldi	r25, 0xFF	; 255
     2ae:	80 93 25 21 	sts	0x2125, r24
     2b2:	90 93 26 21 	sts	0x2126, r25
	while(i < num_to_avg){
     2b6:	01 15       	cp	r16, r1
     2b8:	11 05       	cpc	r17, r1
     2ba:	49 f1       	breq	.+82     	; 0x30e <adc_ch0_stats+0x7e>
//BLOCKS UNTIL ALL CONVERSIONS COMPLETE! USE WITH CAUTION!
//Updates the global adc_stats variables (adc_avg, adc_max, etc)
void adc_ch0_stats(uint16_t num_to_avg){
	uint16_t intermediate;
	uint32_t sum = 0;
	uint16_t i = 0;
     2bc:	c0 e0       	ldi	r28, 0x00	; 0
     2be:	d0 e0       	ldi	r29, 0x00	; 0
//Pass in only power-of-2 integers; Max is 2^20;
//BLOCKS UNTIL ALL CONVERSIONS COMPLETE! USE WITH CAUTION!
//Updates the global adc_stats variables (adc_avg, adc_max, etc)
void adc_ch0_stats(uint16_t num_to_avg){
	uint16_t intermediate;
	uint32_t sum = 0;
     2c0:	cc 24       	eor	r12, r12
     2c2:	dd 24       	eor	r13, r13
     2c4:	76 01       	movw	r14, r12
	uint16_t i = 0;
	adc_max = 0;
	adc_min = 0xFFFF;
	while(i < num_to_avg){
		intermediate = adc_ch0();
     2c6:	0e 94 2c 01 	call	0x258	; 0x258 <adc_ch0>
		sum += intermediate; //for averaging
     2ca:	ac 01       	movw	r20, r24
     2cc:	60 e0       	ldi	r22, 0x00	; 0
     2ce:	70 e0       	ldi	r23, 0x00	; 0
     2d0:	c4 0e       	add	r12, r20
     2d2:	d5 1e       	adc	r13, r21
     2d4:	e6 1e       	adc	r14, r22
     2d6:	f7 1e       	adc	r15, r23
		if (intermediate < adc_min) adc_min = intermediate; //check min
     2d8:	20 91 25 21 	lds	r18, 0x2125
     2dc:	30 91 26 21 	lds	r19, 0x2126
     2e0:	82 17       	cp	r24, r18
     2e2:	93 07       	cpc	r25, r19
     2e4:	20 f4       	brcc	.+8      	; 0x2ee <adc_ch0_stats+0x5e>
     2e6:	80 93 25 21 	sts	0x2125, r24
     2ea:	90 93 26 21 	sts	0x2126, r25
		if (intermediate > adc_max) adc_max = intermediate; //check max
     2ee:	20 91 23 21 	lds	r18, 0x2123
     2f2:	30 91 24 21 	lds	r19, 0x2124
     2f6:	28 17       	cp	r18, r24
     2f8:	39 07       	cpc	r19, r25
     2fa:	20 f4       	brcc	.+8      	; 0x304 <adc_ch0_stats+0x74>
     2fc:	80 93 23 21 	sts	0x2123, r24
     300:	90 93 24 21 	sts	0x2124, r25
		i++;
     304:	21 96       	adiw	r28, 0x01	; 1
	uint16_t intermediate;
	uint32_t sum = 0;
	uint16_t i = 0;
	adc_max = 0;
	adc_min = 0xFFFF;
	while(i < num_to_avg){
     306:	c0 17       	cp	r28, r16
     308:	d1 07       	cpc	r29, r17
     30a:	e9 f6       	brne	.-70     	; 0x2c6 <adc_ch0_stats+0x36>
     30c:	03 c0       	rjmp	.+6      	; 0x314 <adc_ch0_stats+0x84>
//Pass in only power-of-2 integers; Max is 2^20;
//BLOCKS UNTIL ALL CONVERSIONS COMPLETE! USE WITH CAUTION!
//Updates the global adc_stats variables (adc_avg, adc_max, etc)
void adc_ch0_stats(uint16_t num_to_avg){
	uint16_t intermediate;
	uint32_t sum = 0;
     30e:	cc 24       	eor	r12, r12
     310:	dd 24       	eor	r13, r13
     312:	76 01       	movw	r14, r12
		sum += intermediate; //for averaging
		if (intermediate < adc_min) adc_min = intermediate; //check min
		if (intermediate > adc_max) adc_max = intermediate; //check max
		i++;
	}
	adc_count = num_to_avg;
     314:	00 93 20 21 	sts	0x2120, r16
	adc_avg = sum / num_to_avg;
     318:	98 01       	movw	r18, r16
     31a:	40 e0       	ldi	r20, 0x00	; 0
     31c:	50 e0       	ldi	r21, 0x00	; 0
     31e:	c7 01       	movw	r24, r14
     320:	b6 01       	movw	r22, r12
     322:	0e 94 3e 25 	call	0x4a7c	; 0x4a7c <__udivmodsi4>
     326:	20 93 21 21 	sts	0x2121, r18
     32a:	30 93 22 21 	sts	0x2122, r19
}
     32e:	df 91       	pop	r29
     330:	cf 91       	pop	r28
     332:	1f 91       	pop	r17
     334:	0f 91       	pop	r16
     336:	ff 90       	pop	r15
     338:	ef 90       	pop	r14
     33a:	df 90       	pop	r13
     33c:	cf 90       	pop	r12
     33e:	08 95       	ret

00000340 <adc_ch1_stats>:

//Average num_to_avg samples and return the result
//Pass in only power-of-2 integers; Max is 2^20?;
//BLOCKS UNTIL ALL CONVERSIONS COMPLETE! USE WITH CAUTION!
//Updates the global adc_stats variables (adc_avg, adc_max, etc)
void adc_ch1_stats(uint16_t num_to_avg){
     340:	cf 92       	push	r12
     342:	df 92       	push	r13
     344:	ef 92       	push	r14
     346:	ff 92       	push	r15
     348:	0f 93       	push	r16
     34a:	1f 93       	push	r17
     34c:	cf 93       	push	r28
     34e:	df 93       	push	r29
     350:	8c 01       	movw	r16, r24
	uint16_t intermediate;
	uint32_t sum = 0;
	uint16_t i = 0;
	adc_max = 0;
     352:	10 92 23 21 	sts	0x2123, r1
     356:	10 92 24 21 	sts	0x2124, r1
	adc_min = 0xFFFF;
     35a:	8f ef       	ldi	r24, 0xFF	; 255
     35c:	9f ef       	ldi	r25, 0xFF	; 255
     35e:	80 93 25 21 	sts	0x2125, r24
     362:	90 93 26 21 	sts	0x2126, r25
	while(i < num_to_avg){
     366:	01 15       	cp	r16, r1
     368:	11 05       	cpc	r17, r1
     36a:	49 f1       	breq	.+82     	; 0x3be <adc_ch1_stats+0x7e>
//BLOCKS UNTIL ALL CONVERSIONS COMPLETE! USE WITH CAUTION!
//Updates the global adc_stats variables (adc_avg, adc_max, etc)
void adc_ch1_stats(uint16_t num_to_avg){
	uint16_t intermediate;
	uint32_t sum = 0;
	uint16_t i = 0;
     36c:	c0 e0       	ldi	r28, 0x00	; 0
     36e:	d0 e0       	ldi	r29, 0x00	; 0
//Pass in only power-of-2 integers; Max is 2^20?;
//BLOCKS UNTIL ALL CONVERSIONS COMPLETE! USE WITH CAUTION!
//Updates the global adc_stats variables (adc_avg, adc_max, etc)
void adc_ch1_stats(uint16_t num_to_avg){
	uint16_t intermediate;
	uint32_t sum = 0;
     370:	cc 24       	eor	r12, r12
     372:	dd 24       	eor	r13, r13
     374:	76 01       	movw	r14, r12
	uint16_t i = 0;
	adc_max = 0;
	adc_min = 0xFFFF;
	while(i < num_to_avg){
		intermediate = adc_ch1();
     376:	0e 94 3a 01 	call	0x274	; 0x274 <adc_ch1>
		sum += intermediate; //for averaging
     37a:	ac 01       	movw	r20, r24
     37c:	60 e0       	ldi	r22, 0x00	; 0
     37e:	70 e0       	ldi	r23, 0x00	; 0
     380:	c4 0e       	add	r12, r20
     382:	d5 1e       	adc	r13, r21
     384:	e6 1e       	adc	r14, r22
     386:	f7 1e       	adc	r15, r23
		if (intermediate < adc_min) adc_min = intermediate; //check min
     388:	20 91 25 21 	lds	r18, 0x2125
     38c:	30 91 26 21 	lds	r19, 0x2126
     390:	82 17       	cp	r24, r18
     392:	93 07       	cpc	r25, r19
     394:	20 f4       	brcc	.+8      	; 0x39e <adc_ch1_stats+0x5e>
     396:	80 93 25 21 	sts	0x2125, r24
     39a:	90 93 26 21 	sts	0x2126, r25
		if (intermediate > adc_max) adc_max = intermediate; //check max
     39e:	20 91 23 21 	lds	r18, 0x2123
     3a2:	30 91 24 21 	lds	r19, 0x2124
     3a6:	28 17       	cp	r18, r24
     3a8:	39 07       	cpc	r19, r25
     3aa:	20 f4       	brcc	.+8      	; 0x3b4 <adc_ch1_stats+0x74>
     3ac:	80 93 23 21 	sts	0x2123, r24
     3b0:	90 93 24 21 	sts	0x2124, r25
		i++;
     3b4:	21 96       	adiw	r28, 0x01	; 1
	uint16_t intermediate;
	uint32_t sum = 0;
	uint16_t i = 0;
	adc_max = 0;
	adc_min = 0xFFFF;
	while(i < num_to_avg){
     3b6:	c0 17       	cp	r28, r16
     3b8:	d1 07       	cpc	r29, r17
     3ba:	e9 f6       	brne	.-70     	; 0x376 <adc_ch1_stats+0x36>
     3bc:	03 c0       	rjmp	.+6      	; 0x3c4 <adc_ch1_stats+0x84>
//Pass in only power-of-2 integers; Max is 2^20?;
//BLOCKS UNTIL ALL CONVERSIONS COMPLETE! USE WITH CAUTION!
//Updates the global adc_stats variables (adc_avg, adc_max, etc)
void adc_ch1_stats(uint16_t num_to_avg){
	uint16_t intermediate;
	uint32_t sum = 0;
     3be:	cc 24       	eor	r12, r12
     3c0:	dd 24       	eor	r13, r13
     3c2:	76 01       	movw	r14, r12
		sum += intermediate; //for averaging
		if (intermediate < adc_min) adc_min = intermediate; //check min
		if (intermediate > adc_max) adc_max = intermediate; //check max
		i++;
	}
	adc_count = num_to_avg;
     3c4:	00 93 20 21 	sts	0x2120, r16
	adc_avg = sum / num_to_avg;
     3c8:	98 01       	movw	r18, r16
     3ca:	40 e0       	ldi	r20, 0x00	; 0
     3cc:	50 e0       	ldi	r21, 0x00	; 0
     3ce:	c7 01       	movw	r24, r14
     3d0:	b6 01       	movw	r22, r12
     3d2:	0e 94 3e 25 	call	0x4a7c	; 0x4a7c <__udivmodsi4>
     3d6:	20 93 21 21 	sts	0x2121, r18
     3da:	30 93 22 21 	sts	0x2122, r19
}
     3de:	df 91       	pop	r29
     3e0:	cf 91       	pop	r28
     3e2:	1f 91       	pop	r17
     3e4:	0f 91       	pop	r16
     3e6:	ff 90       	pop	r15
     3e8:	ef 90       	pop	r14
     3ea:	df 90       	pop	r13
     3ec:	cf 90       	pop	r12
     3ee:	08 95       	ret

000003f0 <service_adc>:

void service_adc(){	
}
     3f0:	08 95       	ret

000003f2 <brain_debug>:
void brain_debug(){
	static uint8_t c = 0;
	//uart_enqueue_string(&uctrl, "0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789----100---012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789---<200---012345678901234567890123456789---250>---ABCDEFGHIJ");

	//Channel values (from ADC)
	if (STATE_menu == MENU_CONSOLE){
     3f2:	80 91 83 24 	lds	r24, 0x2483
     3f6:	82 32       	cpi	r24, 0x22	; 34
     3f8:	89 f4       	brne	.+34     	; 0x41c <brain_debug+0x2a>
		c++;
     3fa:	80 91 1c 21 	lds	r24, 0x211C
     3fe:	8f 5f       	subi	r24, 0xFF	; 255
     400:	80 93 1c 21 	sts	0x211C, r24
		if(c%2){lcd_console_write("Hello World...");}
     404:	80 ff       	sbrs	r24, 0
     406:	05 c0       	rjmp	.+10     	; 0x412 <brain_debug+0x20>
     408:	80 e0       	ldi	r24, 0x00	; 0
     40a:	90 e2       	ldi	r25, 0x20	; 32
     40c:	0e 94 de 05 	call	0xbbc	; 0xbbc <lcd_console_write>
     410:	08 95       	ret
		else{lcd_console_write("No! I refuse!");}
     412:	8f e0       	ldi	r24, 0x0F	; 15
     414:	90 e2       	ldi	r25, 0x20	; 32
     416:	0e 94 de 05 	call	0xbbc	; 0xbbc <lcd_console_write>
     41a:	08 95       	ret
	}
	else {		
		lcd_command("75 1 1234");
     41c:	8d e1       	ldi	r24, 0x1D	; 29
     41e:	90 e2       	ldi	r25, 0x20	; 32
     420:	0e 94 b5 04 	call	0x96a	; 0x96a <lcd_command>
		lcd_command("75 11 5678");
     424:	87 e2       	ldi	r24, 0x27	; 39
     426:	90 e2       	ldi	r25, 0x20	; 32
     428:	0e 94 b5 04 	call	0x96a	; 0x96a <lcd_command>
		lcd_command("75 2 8765");
     42c:	82 e3       	ldi	r24, 0x32	; 50
     42e:	90 e2       	ldi	r25, 0x20	; 32
     430:	0e 94 b5 04 	call	0x96a	; 0x96a <lcd_command>
		lcd_command("75 21 4321");
     434:	8c e3       	ldi	r24, 0x3C	; 60
     436:	90 e2       	ldi	r25, 0x20	; 32
     438:	0e 94 b5 04 	call	0x96a	; 0x96a <lcd_command>
     43c:	08 95       	ret

0000043e <brain_power_reset>:
}


//Safe and reset all channels (all disabled, master off)
void brain_power_reset(){
	STATE_power_channels = 0;
     43e:	10 92 80 24 	sts	0x2480, r1
	STATE_power_output = DISABLE;
     442:	89 e2       	ldi	r24, 0x29	; 41
     444:	80 93 84 24 	sts	0x2484, r24
	pwr_main_off(CHANNEL_ALL); //Actually shutoff power
     448:	8a e3       	ldi	r24, 0x3A	; 58
     44a:	0e 94 b7 06 	call	0xd6e	; 0xd6e <pwr_main_off>
	fp_led_disable(CHANNEL_M); //Update LED display to indicate this
     44e:	85 e0       	ldi	r24, 0x05	; 5
     450:	0e 94 69 03 	call	0x6d2	; 0x6d2 <fp_led_disable>
}
     454:	08 95       	ret

00000456 <init_brain>:
//#############################################################
//## INITIALIZATION ROUTINE
//#############################################################

void init_brain(){
	brain_power_reset();
     456:	0e 94 1f 02 	call	0x43e	; 0x43e <brain_power_reset>
	STATE_menu = MENU_OUTPUT;
     45a:	80 e2       	ldi	r24, 0x20	; 32
     45c:	80 93 83 24 	sts	0x2483, r24
}
     460:	08 95       	ret

00000462 <brain_menu_output>:
	}
	brain_menu_update(); //Update channel indicators
}

void brain_menu_output(){
	STATE_menu = MENU_OUTPUT;
     462:	80 e2       	ldi	r24, 0x20	; 32
     464:	80 93 83 24 	sts	0x2483, r24
	lcd_macro("RUN M_OUT");
     468:	87 e4       	ldi	r24, 0x47	; 71
     46a:	90 e2       	ldi	r25, 0x20	; 32
     46c:	0e 94 42 05 	call	0xa84	; 0xa84 <lcd_macro>
}
     470:	08 95       	ret

00000472 <brain_menu_control>:

void brain_menu_control(){
	STATE_menu = MENU_CONTROL;
     472:	81 e2       	ldi	r24, 0x21	; 33
     474:	80 93 83 24 	sts	0x2483, r24
	lcd_macro("RUN M_CTRL");
     478:	81 e5       	ldi	r24, 0x51	; 81
     47a:	90 e2       	ldi	r25, 0x20	; 32
     47c:	0e 94 42 05 	call	0xa84	; 0xa84 <lcd_macro>
}
     480:	08 95       	ret

00000482 <brain_menu_console>:

void brain_menu_console(){
	STATE_menu = MENU_CONSOLE;
     482:	82 e2       	ldi	r24, 0x22	; 34
     484:	80 93 83 24 	sts	0x2483, r24
	lcd_macro("RUN M_CON");
     488:	8c e5       	ldi	r24, 0x5C	; 92
     48a:	90 e2       	ldi	r25, 0x20	; 32
     48c:	0e 94 42 05 	call	0xa84	; 0xa84 <lcd_macro>
}
     490:	08 95       	ret

00000492 <brain_menu_update>:

//Update channel enabled indicators
void brain_menu_update(){
	if ((STATE_menu == MENU_OUTPUT) || (STATE_menu == MENU_CONTROL)) {
     492:	80 91 83 24 	lds	r24, 0x2483
     496:	80 52       	subi	r24, 0x20	; 32
     498:	82 30       	cpi	r24, 0x02	; 2
     49a:	08 f0       	brcs	.+2      	; 0x49e <brain_menu_update+0xc>
     49c:	54 c0       	rjmp	.+168    	; 0x546 <brain_menu_update+0xb4>
		if ((STATE_power_channels & _BV(0)) == 0){lcd_a(LCD_DISABLED);}
     49e:	80 91 80 24 	lds	r24, 0x2480
     4a2:	80 fd       	sbrc	r24, 0
     4a4:	04 c0       	rjmp	.+8      	; 0x4ae <brain_menu_update+0x1c>
     4a6:	81 e2       	ldi	r24, 0x21	; 33
     4a8:	0e 94 2e 05 	call	0xa5c	; 0xa5c <lcd_a>
     4ac:	0d c0       	rjmp	.+26     	; 0x4c8 <brain_menu_update+0x36>
		else {
			if (STATE_power_output == DISABLE){lcd_a(LCD_STANDBY);}
     4ae:	80 91 84 24 	lds	r24, 0x2484
     4b2:	89 32       	cpi	r24, 0x29	; 41
     4b4:	21 f4       	brne	.+8      	; 0x4be <brain_menu_update+0x2c>
     4b6:	80 e2       	ldi	r24, 0x20	; 32
     4b8:	0e 94 2e 05 	call	0xa5c	; 0xa5c <lcd_a>
     4bc:	05 c0       	rjmp	.+10     	; 0x4c8 <brain_menu_update+0x36>
			else if (STATE_power_output == ENABLE){lcd_a(LCD_ENABLED);}
     4be:	8a 32       	cpi	r24, 0x2A	; 42
     4c0:	19 f4       	brne	.+6      	; 0x4c8 <brain_menu_update+0x36>
     4c2:	8f e1       	ldi	r24, 0x1F	; 31
     4c4:	0e 94 2e 05 	call	0xa5c	; 0xa5c <lcd_a>
		}	
				
		if ((STATE_power_channels & _BV(1)) == 0){lcd_b(LCD_DISABLED);}
     4c8:	80 91 80 24 	lds	r24, 0x2480
     4cc:	81 fd       	sbrc	r24, 1
     4ce:	04 c0       	rjmp	.+8      	; 0x4d8 <brain_menu_update+0x46>
     4d0:	81 e2       	ldi	r24, 0x21	; 33
     4d2:	0e 94 1a 05 	call	0xa34	; 0xa34 <lcd_b>
     4d6:	0d c0       	rjmp	.+26     	; 0x4f2 <brain_menu_update+0x60>
		else {
			if (STATE_power_output == DISABLE){lcd_b(LCD_STANDBY);}
     4d8:	80 91 84 24 	lds	r24, 0x2484
     4dc:	89 32       	cpi	r24, 0x29	; 41
     4de:	21 f4       	brne	.+8      	; 0x4e8 <brain_menu_update+0x56>
     4e0:	80 e2       	ldi	r24, 0x20	; 32
     4e2:	0e 94 1a 05 	call	0xa34	; 0xa34 <lcd_b>
     4e6:	05 c0       	rjmp	.+10     	; 0x4f2 <brain_menu_update+0x60>
			else if (STATE_power_output == ENABLE){lcd_b(LCD_ENABLED);}
     4e8:	8a 32       	cpi	r24, 0x2A	; 42
     4ea:	19 f4       	brne	.+6      	; 0x4f2 <brain_menu_update+0x60>
     4ec:	8f e1       	ldi	r24, 0x1F	; 31
     4ee:	0e 94 1a 05 	call	0xa34	; 0xa34 <lcd_b>
		}	

		if ((STATE_power_channels & _BV(2)) == 0){lcd_c(LCD_DISABLED);}
     4f2:	80 91 80 24 	lds	r24, 0x2480
     4f6:	82 fd       	sbrc	r24, 2
     4f8:	04 c0       	rjmp	.+8      	; 0x502 <brain_menu_update+0x70>
     4fa:	81 e2       	ldi	r24, 0x21	; 33
     4fc:	0e 94 06 05 	call	0xa0c	; 0xa0c <lcd_c>
     500:	0d c0       	rjmp	.+26     	; 0x51c <brain_menu_update+0x8a>
		else {
			if (STATE_power_output == DISABLE){lcd_c(LCD_STANDBY);}
     502:	80 91 84 24 	lds	r24, 0x2484
     506:	89 32       	cpi	r24, 0x29	; 41
     508:	21 f4       	brne	.+8      	; 0x512 <brain_menu_update+0x80>
     50a:	80 e2       	ldi	r24, 0x20	; 32
     50c:	0e 94 06 05 	call	0xa0c	; 0xa0c <lcd_c>
     510:	05 c0       	rjmp	.+10     	; 0x51c <brain_menu_update+0x8a>
			else if (STATE_power_output == ENABLE){lcd_c(LCD_ENABLED);}
     512:	8a 32       	cpi	r24, 0x2A	; 42
     514:	19 f4       	brne	.+6      	; 0x51c <brain_menu_update+0x8a>
     516:	8f e1       	ldi	r24, 0x1F	; 31
     518:	0e 94 06 05 	call	0xa0c	; 0xa0c <lcd_c>
		}

		if ((STATE_power_channels & _BV(3)) == 0){lcd_d(LCD_DISABLED);}
     51c:	80 91 80 24 	lds	r24, 0x2480
     520:	83 fd       	sbrc	r24, 3
     522:	04 c0       	rjmp	.+8      	; 0x52c <brain_menu_update+0x9a>
     524:	81 e2       	ldi	r24, 0x21	; 33
     526:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <lcd_d>
     52a:	08 95       	ret
		else {
			if (STATE_power_output == DISABLE){lcd_d(LCD_STANDBY);}
     52c:	80 91 84 24 	lds	r24, 0x2484
     530:	89 32       	cpi	r24, 0x29	; 41
     532:	21 f4       	brne	.+8      	; 0x53c <brain_menu_update+0xaa>
     534:	80 e2       	ldi	r24, 0x20	; 32
     536:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <lcd_d>
     53a:	08 95       	ret
			else if (STATE_power_output == ENABLE){lcd_d(LCD_ENABLED);}
     53c:	8a 32       	cpi	r24, 0x2A	; 42
     53e:	19 f4       	brne	.+6      	; 0x546 <brain_menu_update+0xb4>
     540:	8f e1       	ldi	r24, 0x1F	; 31
     542:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <lcd_d>
     546:	08 95       	ret

00000548 <brain_menu_change>:
	
	//Update LCD
	brain_menu_update();
}	

void brain_menu_change(uint8_t which_way){
     548:	cf 93       	push	r28
     54a:	c8 2f       	mov	r28, r24
	//Announce!
	audio_beep(1, 100);
     54c:	81 e0       	ldi	r24, 0x01	; 1
     54e:	64 e6       	ldi	r22, 0x64	; 100
     550:	70 e0       	ldi	r23, 0x00	; 0
     552:	0e 94 05 25 	call	0x4a0a	; 0x4a0a <audio_beep>
	
	//Reset LCD state for menu change (no need to update screen with old stuff)
	init_uart_buffer(&ulcd); //flush outgoing buffer
     556:	80 eb       	ldi	r24, 0xB0	; 176
     558:	9b e0       	ldi	r25, 0x0B	; 11
     55a:	0e 94 3a 21 	call	0x4274	; 0x4274 <init_uart_buffer>
	lcd_flow_control = LCD_READY; //clear any current transmissions
     55e:	82 e5       	ldi	r24, 0x52	; 82
     560:	80 93 94 24 	sts	0x2494, r24
	lcd_last_touch_command = LCD_TOUCH_NONE; //clear out any latent touch actions
     564:	85 e1       	ldi	r24, 0x15	; 21
     566:	80 93 85 24 	sts	0x2485, r24
	lcd_command(""); //send \r to flush any existing partially transmitted commands
     56a:	86 e6       	ldi	r24, 0x66	; 102
     56c:	90 e2       	ldi	r25, 0x20	; 32
     56e:	0e 94 b5 04 	call	0x96a	; 0x96a <lcd_command>
	
	//Change menu
	switch (STATE_menu){
     572:	80 91 83 24 	lds	r24, 0x2483
     576:	81 32       	cpi	r24, 0x21	; 33
     578:	71 f0       	breq	.+28     	; 0x596 <brain_menu_change+0x4e>
     57a:	82 32       	cpi	r24, 0x22	; 34
     57c:	b1 f0       	breq	.+44     	; 0x5aa <brain_menu_change+0x62>
     57e:	80 32       	cpi	r24, 0x20	; 32
     580:	e9 f4       	brne	.+58     	; 0x5bc <brain_menu_change+0x74>
		case MENU_OUTPUT:
			if (which_way == QUAD_DOWN){brain_menu_control();}
     582:	ce 32       	cpi	r28, 0x2E	; 46
     584:	19 f4       	brne	.+6      	; 0x58c <brain_menu_change+0x44>
     586:	0e 94 39 02 	call	0x472	; 0x472 <brain_menu_control>
     58a:	18 c0       	rjmp	.+48     	; 0x5bc <brain_menu_change+0x74>
			if (which_way == QUAD_UP){brain_menu_console();}
     58c:	cd 32       	cpi	r28, 0x2D	; 45
     58e:	b1 f4       	brne	.+44     	; 0x5bc <brain_menu_change+0x74>
     590:	0e 94 41 02 	call	0x482	; 0x482 <brain_menu_console>
     594:	13 c0       	rjmp	.+38     	; 0x5bc <brain_menu_change+0x74>
			break;
		case MENU_CONTROL:
			if (which_way == QUAD_DOWN){brain_menu_console();}
     596:	ce 32       	cpi	r28, 0x2E	; 46
     598:	19 f4       	brne	.+6      	; 0x5a0 <brain_menu_change+0x58>
     59a:	0e 94 41 02 	call	0x482	; 0x482 <brain_menu_console>
     59e:	0e c0       	rjmp	.+28     	; 0x5bc <brain_menu_change+0x74>
			if (which_way == QUAD_UP){brain_menu_output();}
     5a0:	cd 32       	cpi	r28, 0x2D	; 45
     5a2:	61 f4       	brne	.+24     	; 0x5bc <brain_menu_change+0x74>
     5a4:	0e 94 31 02 	call	0x462	; 0x462 <brain_menu_output>
     5a8:	09 c0       	rjmp	.+18     	; 0x5bc <brain_menu_change+0x74>
			break;
		case MENU_CONSOLE:
			if (which_way == QUAD_DOWN){brain_menu_output();}
     5aa:	ce 32       	cpi	r28, 0x2E	; 46
     5ac:	19 f4       	brne	.+6      	; 0x5b4 <brain_menu_change+0x6c>
     5ae:	0e 94 31 02 	call	0x462	; 0x462 <brain_menu_output>
     5b2:	04 c0       	rjmp	.+8      	; 0x5bc <brain_menu_change+0x74>
			if (which_way == QUAD_UP){brain_menu_control();}
     5b4:	cd 32       	cpi	r28, 0x2D	; 45
     5b6:	11 f4       	brne	.+4      	; 0x5bc <brain_menu_change+0x74>
     5b8:	0e 94 39 02 	call	0x472	; 0x472 <brain_menu_control>
			break;
	}
	brain_menu_update(); //Update channel indicators
     5bc:	0e 94 49 02 	call	0x492	; 0x492 <brain_menu_update>
}
     5c0:	cf 91       	pop	r28
     5c2:	08 95       	ret

000005c4 <brain_power_master>:
		brain_menu_update();
}

void brain_power_master(){
	//Go to STANDBY (DISABLE)
	if (STATE_power_output == ENABLE){
     5c4:	80 91 84 24 	lds	r24, 0x2484
     5c8:	8a 32       	cpi	r24, 0x2A	; 42
     5ca:	51 f4       	brne	.+20     	; 0x5e0 <brain_power_master+0x1c>
			STATE_power_output = DISABLE;
     5cc:	89 e2       	ldi	r24, 0x29	; 41
     5ce:	80 93 84 24 	sts	0x2484, r24
			pwr_main_off(CHANNEL_ALL);
     5d2:	8a e3       	ldi	r24, 0x3A	; 58
     5d4:	0e 94 b7 06 	call	0xd6e	; 0xd6e <pwr_main_off>
			fp_led_disable(CHANNEL_M);			
     5d8:	85 e0       	ldi	r24, 0x05	; 5
     5da:	0e 94 69 03 	call	0x6d2	; 0x6d2 <fp_led_disable>
     5de:	0b c0       	rjmp	.+22     	; 0x5f6 <brain_power_master+0x32>
	}
	
	//Enable OUTPUT! (ENABLE)
	else {	
		if (STATE_power_output == DISABLE){
     5e0:	89 32       	cpi	r24, 0x29	; 41
     5e2:	49 f4       	brne	.+18     	; 0x5f6 <brain_power_master+0x32>
			STATE_power_output = ENABLE;
     5e4:	8a e2       	ldi	r24, 0x2A	; 42
     5e6:	80 93 84 24 	sts	0x2484, r24
			pwr_main_on(CHANNEL_RESTORE);
     5ea:	8c e3       	ldi	r24, 0x3C	; 60
     5ec:	0e 94 81 06 	call	0xd02	; 0xd02 <pwr_main_on>
			fp_led_enable(CHANNEL_M);
     5f0:	85 e0       	ldi	r24, 0x05	; 5
     5f2:	0e 94 3d 03 	call	0x67a	; 0x67a <fp_led_enable>
		}			
	}
	
	//Update LCD
	brain_menu_update();
     5f6:	0e 94 49 02 	call	0x492	; 0x492 <brain_menu_update>
}	
     5fa:	08 95       	ret

000005fc <brain_power>:
	pwr_main_off(CHANNEL_ALL); //Actually shutoff power
	fp_led_disable(CHANNEL_M); //Update LED display to indicate this
}

//Toggle power state and effect the new behavior
void brain_power(uint8_t which){
     5fc:	cf 93       	push	r28
     5fe:	c8 2f       	mov	r28, r24
	//Toggle channel state
		STATE_power_channels ^= _BV(which); 
     600:	81 e0       	ldi	r24, 0x01	; 1
     602:	90 e0       	ldi	r25, 0x00	; 0
     604:	0c 2e       	mov	r0, r28
     606:	02 c0       	rjmp	.+4      	; 0x60c <brain_power+0x10>
     608:	88 0f       	add	r24, r24
     60a:	99 1f       	adc	r25, r25
     60c:	0a 94       	dec	r0
     60e:	e2 f7       	brpl	.-8      	; 0x608 <brain_power+0xc>
     610:	90 91 80 24 	lds	r25, 0x2480
     614:	89 27       	eor	r24, r25
     616:	80 93 80 24 	sts	0x2480, r24
	//Channel disabled
		if ((STATE_power_channels & _BV(which))==0){		
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	0c 2e       	mov	r0, r28
     61e:	02 c0       	rjmp	.+4      	; 0x624 <brain_power+0x28>
     620:	95 95       	asr	r25
     622:	87 95       	ror	r24
     624:	0a 94       	dec	r0
     626:	e2 f7       	brpl	.-8      	; 0x620 <brain_power+0x24>
     628:	80 fd       	sbrc	r24, 0
     62a:	07 c0       	rjmp	.+14     	; 0x63a <brain_power+0x3e>
			pwr_main_off(which);
     62c:	8c 2f       	mov	r24, r28
     62e:	0e 94 b7 06 	call	0xd6e	; 0xd6e <pwr_main_off>
			fp_led_disable(which);
     632:	8c 2f       	mov	r24, r28
     634:	0e 94 69 03 	call	0x6d2	; 0x6d2 <fp_led_disable>
     638:	0a c0       	rjmp	.+20     	; 0x64e <brain_power+0x52>
		}	
	//Channel enabled
		else {
			fp_led_enable(which);
     63a:	8c 2f       	mov	r24, r28
     63c:	0e 94 3d 03 	call	0x67a	; 0x67a <fp_led_enable>
			if (STATE_power_output == ENABLE) {pwr_main_on(which);}
     640:	80 91 84 24 	lds	r24, 0x2484
     644:	8a 32       	cpi	r24, 0x2A	; 42
     646:	19 f4       	brne	.+6      	; 0x64e <brain_power+0x52>
     648:	8c 2f       	mov	r24, r28
     64a:	0e 94 81 06 	call	0xd02	; 0xd02 <pwr_main_on>
			if (STATE_power_output == DISABLE) {}		
		}	
	//Update LCD
		brain_menu_update();
     64e:	0e 94 49 02 	call	0x492	; 0x492 <brain_menu_update>
}
     652:	cf 91       	pop	r28
     654:	08 95       	ret

00000656 <service_brain>:
//## SERVICE ROUTINE
//#############################################################

void service_brain(){

}
     656:	08 95       	ret

00000658 <init_fp>:
		PK6: Rotary Channel A
		PK7: Rotary Channel B
				
	*/
	//LED's
	PORTJ.PIN1CTRL = B8(01000000); //invert pin logic
     658:	e0 e0       	ldi	r30, 0x00	; 0
     65a:	f7 e0       	ldi	r31, 0x07	; 7
     65c:	80 e4       	ldi	r24, 0x40	; 64
     65e:	81 8b       	std	Z+17, r24	; 0x11
	PORTJ.PIN2CTRL = B8(01000000); //invert pin logic
     660:	82 8b       	std	Z+18, r24	; 0x12
	PORTJ.PIN3CTRL = B8(01000000); //invert pin logic
     662:	83 8b       	std	Z+19, r24	; 0x13
	PORTJ.PIN4CTRL = B8(01000000); //invert pin logic
     664:	84 8b       	std	Z+20, r24	; 0x14
	PORTJ.OUTCLR = B8(00011110); //pins to low (LED's off, remember: inverted!)	
     666:	8e e1       	ldi	r24, 0x1E	; 30
     668:	86 83       	std	Z+6, r24	; 0x06
	PORTJ.DIRSET = B8(00011110); //pins to output	
     66a:	81 83       	std	Z+1, r24	; 0x01
	
	fp_channel_mask = 0x00;
     66c:	10 92 86 24 	sts	0x2486, r1
	
	//Switches
	//	SciPSU FP switches have hardware pull-up and hardware debounce
	PORTK.DIRCLR = B8(00111111); //This is the default condition, but just to be safe
     670:	8f e3       	ldi	r24, 0x3F	; 63
     672:	e0 e2       	ldi	r30, 0x20	; 32
     674:	f7 e0       	ldi	r31, 0x07	; 7
     676:	82 83       	std	Z+2, r24	; 0x02
}
     678:	08 95       	ret

0000067a <fp_led_enable>:
//## LEDs
//#############################################################

// Uses generic defines for channel (see main.h)
void fp_led_enable(uint8_t which){
	switch(which){
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	b1 f0       	breq	.+44     	; 0x6aa <fp_led_enable+0x30>
     67e:	83 30       	cpi	r24, 0x03	; 3
     680:	28 f4       	brcc	.+10     	; 0x68c <fp_led_enable+0x12>
     682:	88 23       	and	r24, r24
     684:	41 f0       	breq	.+16     	; 0x696 <fp_led_enable+0x1c>
     686:	81 30       	cpi	r24, 0x01	; 1
     688:	19 f5       	brne	.+70     	; 0x6d0 <fp_led_enable+0x56>
     68a:	0a c0       	rjmp	.+20     	; 0x6a0 <fp_led_enable+0x26>
     68c:	83 30       	cpi	r24, 0x03	; 3
     68e:	91 f0       	breq	.+36     	; 0x6b4 <fp_led_enable+0x3a>
     690:	85 30       	cpi	r24, 0x05	; 5
     692:	f1 f4       	brne	.+60     	; 0x6d0 <fp_led_enable+0x56>
     694:	14 c0       	rjmp	.+40     	; 0x6be <fp_led_enable+0x44>
		case CHANNEL_A:
			PORTJ.OUTSET = B8(00000010); //PJ1
     696:	82 e0       	ldi	r24, 0x02	; 2
     698:	e0 e0       	ldi	r30, 0x00	; 0
     69a:	f7 e0       	ldi	r31, 0x07	; 7
     69c:	85 83       	std	Z+5, r24	; 0x05
			break;
     69e:	08 95       	ret
		case CHANNEL_B:
			PORTJ.OUTSET = B8(00000100); //PJ2
     6a0:	84 e0       	ldi	r24, 0x04	; 4
     6a2:	e0 e0       	ldi	r30, 0x00	; 0
     6a4:	f7 e0       	ldi	r31, 0x07	; 7
     6a6:	85 83       	std	Z+5, r24	; 0x05
			break;
     6a8:	08 95       	ret
		case CHANNEL_C:
			PORTJ.OUTSET = B8(00001000); //PJ3
     6aa:	88 e0       	ldi	r24, 0x08	; 8
     6ac:	e0 e0       	ldi	r30, 0x00	; 0
     6ae:	f7 e0       	ldi	r31, 0x07	; 7
     6b0:	85 83       	std	Z+5, r24	; 0x05
			break;
     6b2:	08 95       	ret
		case CHANNEL_D:
			PORTJ.OUTSET = B8(00010000); //PJ4
     6b4:	80 e1       	ldi	r24, 0x10	; 16
     6b6:	e0 e0       	ldi	r30, 0x00	; 0
     6b8:	f7 e0       	ldi	r31, 0x07	; 7
     6ba:	85 83       	std	Z+5, r24	; 0x05
			break;			
     6bc:	08 95       	ret
		case CHANNEL_M:
			PORTJ.OUTSET = STATE_power_channels << 1; //left shift 1 to move [0-3] state to [1-4] pin locations
     6be:	80 91 80 24 	lds	r24, 0x2480
     6c2:	88 0f       	add	r24, r24
     6c4:	e0 e0       	ldi	r30, 0x00	; 0
     6c6:	f7 e0       	ldi	r31, 0x07	; 7
     6c8:	85 83       	std	Z+5, r24	; 0x05
			led_on(LED_3); //Master LED is dimmable so its over in the ui.h module
     6ca:	82 e0       	ldi	r24, 0x02	; 2
     6cc:	0e 94 69 24 	call	0x48d2	; 0x48d2 <led_on>
     6d0:	08 95       	ret

000006d2 <fp_led_disable>:
			break;
	}
}

void fp_led_disable(uint8_t which){
	switch(which){
     6d2:	82 30       	cpi	r24, 0x02	; 2
     6d4:	b1 f0       	breq	.+44     	; 0x702 <fp_led_disable+0x30>
     6d6:	83 30       	cpi	r24, 0x03	; 3
     6d8:	28 f4       	brcc	.+10     	; 0x6e4 <fp_led_disable+0x12>
     6da:	88 23       	and	r24, r24
     6dc:	41 f0       	breq	.+16     	; 0x6ee <fp_led_disable+0x1c>
     6de:	81 30       	cpi	r24, 0x01	; 1
     6e0:	09 f5       	brne	.+66     	; 0x724 <fp_led_disable+0x52>
     6e2:	0a c0       	rjmp	.+20     	; 0x6f8 <fp_led_disable+0x26>
     6e4:	83 30       	cpi	r24, 0x03	; 3
     6e6:	91 f0       	breq	.+36     	; 0x70c <fp_led_disable+0x3a>
     6e8:	85 30       	cpi	r24, 0x05	; 5
     6ea:	e1 f4       	brne	.+56     	; 0x724 <fp_led_disable+0x52>
     6ec:	14 c0       	rjmp	.+40     	; 0x716 <fp_led_disable+0x44>
		case CHANNEL_A:
			PORTJ.OUTCLR = B8(00000010); //PJ1
     6ee:	82 e0       	ldi	r24, 0x02	; 2
     6f0:	e0 e0       	ldi	r30, 0x00	; 0
     6f2:	f7 e0       	ldi	r31, 0x07	; 7
     6f4:	86 83       	std	Z+6, r24	; 0x06
			break;
     6f6:	08 95       	ret
		case CHANNEL_B:
			PORTJ.OUTCLR = B8(00000100); //PJ2
     6f8:	84 e0       	ldi	r24, 0x04	; 4
     6fa:	e0 e0       	ldi	r30, 0x00	; 0
     6fc:	f7 e0       	ldi	r31, 0x07	; 7
     6fe:	86 83       	std	Z+6, r24	; 0x06
			break;
     700:	08 95       	ret
		case CHANNEL_C:
			PORTJ.OUTCLR = B8(00001000); //PJ3
     702:	88 e0       	ldi	r24, 0x08	; 8
     704:	e0 e0       	ldi	r30, 0x00	; 0
     706:	f7 e0       	ldi	r31, 0x07	; 7
     708:	86 83       	std	Z+6, r24	; 0x06
			break;
     70a:	08 95       	ret
		case CHANNEL_D:
			PORTJ.OUTCLR = B8(00010000); //PJ4
     70c:	80 e1       	ldi	r24, 0x10	; 16
     70e:	e0 e0       	ldi	r30, 0x00	; 0
     710:	f7 e0       	ldi	r31, 0x07	; 7
     712:	86 83       	std	Z+6, r24	; 0x06
			break;
     714:	08 95       	ret
		case CHANNEL_M:
			fp_counter = 0; fp_counter2 = 0; fp_updown = 1;
     716:	10 92 81 24 	sts	0x2481, r1
     71a:	10 92 88 24 	sts	0x2488, r1
     71e:	81 e0       	ldi	r24, 0x01	; 1
     720:	80 93 89 24 	sts	0x2489, r24
     724:	08 95       	ret

00000726 <_fp_read_switches>:
//#############################################################

//t0 = most recent --> t2 = oldest values
void _fp_read_switches(){
	//rotate
	fp_button_time2 = fp_button_time1;
     726:	80 91 82 24 	lds	r24, 0x2482
     72a:	80 93 27 21 	sts	0x2127, r24
	fp_button_time1 = fp_button_time0;
     72e:	80 91 92 24 	lds	r24, 0x2492
     732:	80 93 82 24 	sts	0x2482, r24
	fp_button_time0 = PORTK.IN;
     736:	e0 e2       	ldi	r30, 0x20	; 32
     738:	f7 e0       	ldi	r31, 0x07	; 7
     73a:	80 85       	ldd	r24, Z+8	; 0x08
     73c:	80 93 92 24 	sts	0x2492, r24
}
     740:	08 95       	ret

00000742 <_fp_switch_pressed>:

//Button was pressed
void _fp_switch_pressed(uint8_t which){
     742:	cf 93       	push	r28
     744:	c8 2f       	mov	r28, r24
	audio_beep(1, 10);
     746:	81 e0       	ldi	r24, 0x01	; 1
     748:	6a e0       	ldi	r22, 0x0A	; 10
     74a:	70 e0       	ldi	r23, 0x00	; 0
     74c:	0e 94 05 25 	call	0x4a0a	; 0x4a0a <audio_beep>
	switch(which){
     750:	c2 30       	cpi	r28, 0x02	; 2
     752:	b1 f0       	breq	.+44     	; 0x780 <_fp_switch_pressed+0x3e>
     754:	c3 30       	cpi	r28, 0x03	; 3
     756:	28 f4       	brcc	.+10     	; 0x762 <_fp_switch_pressed+0x20>
     758:	cc 23       	and	r28, r28
     75a:	51 f0       	breq	.+20     	; 0x770 <_fp_switch_pressed+0x2e>
     75c:	c1 30       	cpi	r28, 0x01	; 1
     75e:	e9 f4       	brne	.+58     	; 0x79a <_fp_switch_pressed+0x58>
     760:	0b c0       	rjmp	.+22     	; 0x778 <_fp_switch_pressed+0x36>
     762:	c4 30       	cpi	r28, 0x04	; 4
     764:	a9 f0       	breq	.+42     	; 0x790 <_fp_switch_pressed+0x4e>
     766:	c4 30       	cpi	r28, 0x04	; 4
     768:	78 f0       	brcs	.+30     	; 0x788 <_fp_switch_pressed+0x46>
     76a:	c5 30       	cpi	r28, 0x05	; 5
     76c:	b1 f4       	brne	.+44     	; 0x79a <_fp_switch_pressed+0x58>
     76e:	13 c0       	rjmp	.+38     	; 0x796 <_fp_switch_pressed+0x54>
		case FP_SWITCH_A:
			brain_power(CHANNEL_A);			
     770:	80 e0       	ldi	r24, 0x00	; 0
     772:	0e 94 fe 02 	call	0x5fc	; 0x5fc <brain_power>
			break;
     776:	11 c0       	rjmp	.+34     	; 0x79a <_fp_switch_pressed+0x58>
		case FP_SWITCH_B:
			brain_power(CHANNEL_B);
     778:	81 e0       	ldi	r24, 0x01	; 1
     77a:	0e 94 fe 02 	call	0x5fc	; 0x5fc <brain_power>
			break;
     77e:	0d c0       	rjmp	.+26     	; 0x79a <_fp_switch_pressed+0x58>
		case FP_SWITCH_C:
			brain_power(CHANNEL_C);
     780:	82 e0       	ldi	r24, 0x02	; 2
     782:	0e 94 fe 02 	call	0x5fc	; 0x5fc <brain_power>
			break;
     786:	09 c0       	rjmp	.+18     	; 0x79a <_fp_switch_pressed+0x58>
		case FP_SWITCH_D:
			brain_power(CHANNEL_D);
     788:	83 e0       	ldi	r24, 0x03	; 3
     78a:	0e 94 fe 02 	call	0x5fc	; 0x5fc <brain_power>
			break;
     78e:	05 c0       	rjmp	.+10     	; 0x79a <_fp_switch_pressed+0x58>
		case FP_SWITCH_M:
			brain_power_master();
     790:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <brain_power_master>
			break;
     794:	02 c0       	rjmp	.+4      	; 0x79a <_fp_switch_pressed+0x58>
		case FP_SWITCH_R:
			brain_debug(); //xxx
     796:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <brain_debug>
			break;		
	}
}
     79a:	cf 91       	pop	r28
     79c:	08 95       	ret

0000079e <_fp_switch_released>:
		case FP_SWITCH_M:
			break;
		case FP_SWITCH_R:
			break;
	}
}
     79e:	08 95       	ret

000007a0 <_process_switch>:

void _process_switch(uint8_t current, uint8_t change, uint8_t which){
	if (current != 0) {return;} //unstable -- wait for things to settle
     7a0:	88 23       	and	r24, r24
     7a2:	b9 f4       	brne	.+46     	; 0x7d2 <_process_switch+0x32>
	if ((change & _BV(which)) == 0){return;} //no change
     7a4:	70 e0       	ldi	r23, 0x00	; 0
     7a6:	04 2e       	mov	r0, r20
     7a8:	02 c0       	rjmp	.+4      	; 0x7ae <_process_switch+0xe>
     7aa:	75 95       	asr	r23
     7ac:	67 95       	ror	r22
     7ae:	0a 94       	dec	r0
     7b0:	e2 f7       	brpl	.-8      	; 0x7aa <_process_switch+0xa>
     7b2:	60 ff       	sbrs	r22, 0
     7b4:	0e c0       	rjmp	.+28     	; 0x7d2 <_process_switch+0x32>
	//Pin has been changed!
	if ((fp_button_time0 & _BV(which)) == 0){_fp_switch_pressed(which);}
     7b6:	20 91 92 24 	lds	r18, 0x2492
     7ba:	30 e0       	ldi	r19, 0x00	; 0
     7bc:	04 2e       	mov	r0, r20
     7be:	02 c0       	rjmp	.+4      	; 0x7c4 <_process_switch+0x24>
     7c0:	35 95       	asr	r19
     7c2:	27 95       	ror	r18
     7c4:	0a 94       	dec	r0
     7c6:	e2 f7       	brpl	.-8      	; 0x7c0 <_process_switch+0x20>
     7c8:	20 fd       	sbrc	r18, 0
     7ca:	03 c0       	rjmp	.+6      	; 0x7d2 <_process_switch+0x32>
     7cc:	84 2f       	mov	r24, r20
     7ce:	0e 94 a1 03 	call	0x742	; 0x742 <_fp_switch_pressed>
     7d2:	08 95       	ret

000007d4 <_fp_process_switches>:
	else {_fp_switch_released(which);}
}

void _fp_process_switches(){
     7d4:	cf 93       	push	r28
     7d6:	df 93       	push	r29
	uint8_t current = fp_button_time0 ^ fp_button_time1;
     7d8:	c0 91 82 24 	lds	r28, 0x2482
     7dc:	80 91 92 24 	lds	r24, 0x2492
     7e0:	c8 27       	eor	r28, r24
	uint8_t change = current ^ fp_button_time2;
     7e2:	d0 91 27 21 	lds	r29, 0x2127
     7e6:	dc 27       	eor	r29, r28
	_process_switch(current, change, FP_SWITCH_A);
     7e8:	8c 2f       	mov	r24, r28
     7ea:	6d 2f       	mov	r22, r29
     7ec:	40 e0       	ldi	r20, 0x00	; 0
     7ee:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <_process_switch>
	_process_switch(current, change, FP_SWITCH_B);
     7f2:	8c 2f       	mov	r24, r28
     7f4:	6d 2f       	mov	r22, r29
     7f6:	41 e0       	ldi	r20, 0x01	; 1
     7f8:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <_process_switch>
	_process_switch(current, change, FP_SWITCH_C);
     7fc:	8c 2f       	mov	r24, r28
     7fe:	6d 2f       	mov	r22, r29
     800:	42 e0       	ldi	r20, 0x02	; 2
     802:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <_process_switch>
	_process_switch(current, change, FP_SWITCH_D);
     806:	8c 2f       	mov	r24, r28
     808:	6d 2f       	mov	r22, r29
     80a:	43 e0       	ldi	r20, 0x03	; 3
     80c:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <_process_switch>
	_process_switch(current, change, FP_SWITCH_M);
     810:	8c 2f       	mov	r24, r28
     812:	6d 2f       	mov	r22, r29
     814:	44 e0       	ldi	r20, 0x04	; 4
     816:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <_process_switch>
	_process_switch(current, change, FP_SWITCH_R);
     81a:	8c 2f       	mov	r24, r28
     81c:	6d 2f       	mov	r22, r29
     81e:	45 e0       	ldi	r20, 0x05	; 5
     820:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <_process_switch>
}
     824:	df 91       	pop	r29
     826:	cf 91       	pop	r28
     828:	08 95       	ret

0000082a <service_fp>:
//#############################################################
//## SERVICE ROUTINE
//#############################################################

void service_fp(){	
	uint8_t fp_channel_mask = STATE_power_channels << 1;
     82a:	90 91 80 24 	lds	r25, 0x2480
	//LEDs
	if (STATE_power_output == DISABLE){
     82e:	80 91 84 24 	lds	r24, 0x2484
     832:	89 32       	cpi	r24, 0x29	; 41
     834:	09 f0       	breq	.+2      	; 0x838 <service_fp+0xe>
     836:	43 c0       	rjmp	.+134    	; 0x8be <service_fp+0x94>
//#############################################################
//## SERVICE ROUTINE
//#############################################################

void service_fp(){	
	uint8_t fp_channel_mask = STATE_power_channels << 1;
     838:	99 0f       	add	r25, r25
	//LEDs
	if (STATE_power_output == DISABLE){
				
		//Channel LED's			
		if (fp_counter == 0) {PORTJ.OUTSET = fp_channel_mask;} 
     83a:	80 91 81 24 	lds	r24, 0x2481
     83e:	88 23       	and	r24, r24
     840:	39 f4       	brne	.+14     	; 0x850 <service_fp+0x26>
     842:	e0 e0       	ldi	r30, 0x00	; 0
     844:	f7 e0       	ldi	r31, 0x07	; 7
     846:	95 83       	std	Z+5, r25	; 0x05
		if (fp_counter == FP_ON_LENGTH) {PORTJ.OUTCLR = fp_channel_mask;}
		fp_counter++;
     848:	8f 5f       	subi	r24, 0xFF	; 255
     84a:	80 93 81 24 	sts	0x2481, r24
     84e:	10 c0       	rjmp	.+32     	; 0x870 <service_fp+0x46>
	//LEDs
	if (STATE_power_output == DISABLE){
				
		//Channel LED's			
		if (fp_counter == 0) {PORTJ.OUTSET = fp_channel_mask;} 
		if (fp_counter == FP_ON_LENGTH) {PORTJ.OUTCLR = fp_channel_mask;}
     850:	81 30       	cpi	r24, 0x01	; 1
     852:	39 f4       	brne	.+14     	; 0x862 <service_fp+0x38>
     854:	e0 e0       	ldi	r30, 0x00	; 0
     856:	f7 e0       	ldi	r31, 0x07	; 7
     858:	96 83       	std	Z+6, r25	; 0x06
		fp_counter++;
     85a:	82 e0       	ldi	r24, 0x02	; 2
     85c:	80 93 81 24 	sts	0x2481, r24
     860:	07 c0       	rjmp	.+14     	; 0x870 <service_fp+0x46>
     862:	8f 5f       	subi	r24, 0xFF	; 255
     864:	80 93 81 24 	sts	0x2481, r24
		if (fp_counter >= FP_ON_LENGTH + FP_OFF_LENGTH) {fp_counter = 0;}
     868:	8b 30       	cpi	r24, 0x0B	; 11
     86a:	10 f0       	brcs	.+4      	; 0x870 <service_fp+0x46>
     86c:	10 92 81 24 	sts	0x2481, r1
			
		//Master LED
		fp_counter2 += fp_updown;
     870:	80 91 89 24 	lds	r24, 0x2489
     874:	60 91 88 24 	lds	r22, 0x2488
     878:	68 0f       	add	r22, r24
     87a:	60 93 88 24 	sts	0x2488, r22
		if (fp_counter2 < 128) {
     87e:	66 23       	and	r22, r22
     880:	34 f0       	brlt	.+12     	; 0x88e <service_fp+0x64>
			if (fp_counter2 % 2 == 0){
     882:	60 fd       	sbrc	r22, 0
     884:	12 c0       	rjmp	.+36     	; 0x8aa <service_fp+0x80>
				led_dim(LED_3, fp_counter2);
     886:	82 e0       	ldi	r24, 0x02	; 2
     888:	0e 94 9b 24 	call	0x4936	; 0x4936 <led_dim>
     88c:	0e c0       	rjmp	.+28     	; 0x8aa <service_fp+0x80>
			}
		}
		else {
			if (fp_updown > 0) {fp_counter2 += 2;}
     88e:	88 23       	and	r24, r24
     890:	21 f0       	breq	.+8      	; 0x89a <service_fp+0x70>
     892:	6e 5f       	subi	r22, 0xFE	; 254
     894:	60 93 88 24 	sts	0x2488, r22
     898:	03 c0       	rjmp	.+6      	; 0x8a0 <service_fp+0x76>
			else {fp_counter2 += 2;}
     89a:	6e 5f       	subi	r22, 0xFE	; 254
     89c:	60 93 88 24 	sts	0x2488, r22
			led_dim(LED_3, fp_counter2);
     8a0:	82 e0       	ldi	r24, 0x02	; 2
     8a2:	60 91 88 24 	lds	r22, 0x2488
     8a6:	0e 94 9b 24 	call	0x4936	; 0x4936 <led_dim>
		}			
		if ((fp_counter2 >= 255) || (fp_counter2 <= 0)) {
     8aa:	80 91 88 24 	lds	r24, 0x2488
     8ae:	81 50       	subi	r24, 0x01	; 1
     8b0:	8e 3f       	cpi	r24, 0xFE	; 254
     8b2:	28 f0       	brcs	.+10     	; 0x8be <service_fp+0x94>
			fp_updown = -1 * fp_updown;
     8b4:	80 91 89 24 	lds	r24, 0x2489
     8b8:	81 95       	neg	r24
     8ba:	80 93 89 24 	sts	0x2489, r24
		}
	}
	
	//SWITCHes
	_fp_read_switches();
     8be:	0e 94 93 03 	call	0x726	; 0x726 <_fp_read_switches>
	_fp_process_switches();
     8c2:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <_fp_process_switches>

inline void _fp_process_rotary(){
	static int16_t blanking_counter = -1;
	
	//Software blank rotary dial in menu navigation mode
	if (STATE_menu != MENU_DIAL){
     8c6:	80 91 83 24 	lds	r24, 0x2483
     8ca:	83 32       	cpi	r24, 0x23	; 35
     8cc:	a9 f1       	breq	.+106    	; 0x938 <service_fp+0x10e>
		if (blanking_counter >= 0){
     8ce:	80 91 67 20 	lds	r24, 0x2067
     8d2:	90 91 68 20 	lds	r25, 0x2068
     8d6:	99 23       	and	r25, r25
     8d8:	c4 f0       	brlt	.+48     	; 0x90a <service_fp+0xe0>
			blanking_counter++;
     8da:	01 96       	adiw	r24, 0x01	; 1
     8dc:	80 93 67 20 	sts	0x2067, r24
     8e0:	90 93 68 20 	sts	0x2068, r25
			quad_up(); quad_down(); //clear state changes during blanking period
     8e4:	0e 94 a7 07 	call	0xf4e	; 0xf4e <quad_up>
     8e8:	0e 94 b2 07 	call	0xf64	; 0xf64 <quad_down>
			if (blanking_counter > 500){blanking_counter = -1;}
     8ec:	80 91 67 20 	lds	r24, 0x2067
     8f0:	90 91 68 20 	lds	r25, 0x2068
     8f4:	21 e0       	ldi	r18, 0x01	; 1
     8f6:	85 3f       	cpi	r24, 0xF5	; 245
     8f8:	92 07       	cpc	r25, r18
     8fa:	64 f1       	brlt	.+88     	; 0x954 <service_fp+0x12a>
     8fc:	8f ef       	ldi	r24, 0xFF	; 255
     8fe:	9f ef       	ldi	r25, 0xFF	; 255
     900:	80 93 67 20 	sts	0x2067, r24
     904:	90 93 68 20 	sts	0x2068, r25
     908:	08 95       	ret
		}
		else {
			if (quad_up()) {blanking_counter = 0; brain_menu_change(QUAD_UP);}
     90a:	0e 94 a7 07 	call	0xf4e	; 0xf4e <quad_up>
     90e:	88 23       	and	r24, r24
     910:	39 f0       	breq	.+14     	; 0x920 <service_fp+0xf6>
     912:	10 92 67 20 	sts	0x2067, r1
     916:	10 92 68 20 	sts	0x2068, r1
     91a:	8d e2       	ldi	r24, 0x2D	; 45
     91c:	0e 94 a4 02 	call	0x548	; 0x548 <brain_menu_change>
			if (quad_down()) {blanking_counter = 0; brain_menu_change(QUAD_DOWN);}
     920:	0e 94 b2 07 	call	0xf64	; 0xf64 <quad_down>
     924:	88 23       	and	r24, r24
     926:	b1 f0       	breq	.+44     	; 0x954 <service_fp+0x12a>
     928:	10 92 67 20 	sts	0x2067, r1
     92c:	10 92 68 20 	sts	0x2068, r1
     930:	8e e2       	ldi	r24, 0x2E	; 46
     932:	0e 94 a4 02 	call	0x548	; 0x548 <brain_menu_change>
     936:	08 95       	ret
		}		
	}
	//Use full dial resolution in adjustment mode
	else {
		if (quad_up()) {brain_menu_change(QUAD_UP);}
     938:	0e 94 a7 07 	call	0xf4e	; 0xf4e <quad_up>
     93c:	88 23       	and	r24, r24
     93e:	19 f0       	breq	.+6      	; 0x946 <service_fp+0x11c>
     940:	8d e2       	ldi	r24, 0x2D	; 45
     942:	0e 94 a4 02 	call	0x548	; 0x548 <brain_menu_change>
		if (quad_down()) {brain_menu_change(QUAD_DOWN);}
     946:	0e 94 b2 07 	call	0xf64	; 0xf64 <quad_down>
     94a:	88 23       	and	r24, r24
     94c:	19 f0       	breq	.+6      	; 0x954 <service_fp+0x12a>
     94e:	8e e2       	ldi	r24, 0x2E	; 46
     950:	0e 94 a4 02 	call	0x548	; 0x548 <brain_menu_change>
     954:	08 95       	ret

00000956 <init_lcd>:
//#############################################################
//## INITIALIZATION ROUTINE
//#############################################################

void init_lcd(){
	lcd_flow_control = LCD_BUSY; //Wait for LCD to bootup -- queue all commands prior to start
     956:	8e e4       	ldi	r24, 0x4E	; 78
     958:	80 93 94 24 	sts	0x2494, r24
	lcd_flow_type = LCD_COMMAND;
     95c:	8a ef       	ldi	r24, 0xFA	; 250
     95e:	80 93 93 24 	sts	0x2493, r24
	lcd_last_touch_command = LCD_TOUCH_NONE;
     962:	85 e1       	ldi	r24, 0x15	; 21
     964:	80 93 85 24 	sts	0x2485, r24
}
     968:	08 95       	ret

0000096a <lcd_command>:
//#############################################################
//## API
//#############################################################

//Only supports RUN (capital) and 31 (PLAY command as number) for detecting macros
void lcd_command(char* theCommand){
     96a:	cf 93       	push	r28
     96c:	df 93       	push	r29
     96e:	ec 01       	movw	r28, r24
	uart_enqueue(&ulcd, LCD_COMMAND);
     970:	80 eb       	ldi	r24, 0xB0	; 176
     972:	9b e0       	ldi	r25, 0x0B	; 11
     974:	6a ef       	ldi	r22, 0xFA	; 250
     976:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <uart_enqueue>
	uart_enqueue_string(&ulcd, theCommand);
     97a:	80 eb       	ldi	r24, 0xB0	; 176
     97c:	9b e0       	ldi	r25, 0x0B	; 11
     97e:	be 01       	movw	r22, r28
     980:	0e 94 29 19 	call	0x3252	; 0x3252 <uart_enqueue_string>
	uart_enqueue(&ulcd, 0x0D); //command terminator
     984:	80 eb       	ldi	r24, 0xB0	; 176
     986:	9b e0       	ldi	r25, 0x0B	; 11
     988:	6d e0       	ldi	r22, 0x0D	; 13
     98a:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <uart_enqueue>
}
     98e:	df 91       	pop	r29
     990:	cf 91       	pop	r28
     992:	08 95       	ret

00000994 <_lcd_bubble>:
	lcd_command("COLOR BLUE");
	lcd_command("BOX 30 30 F");
}

void _lcd_bubble(uint8_t mode){
	switch(mode){
     994:	8f 31       	cpi	r24, 0x1F	; 31
     996:	19 f0       	breq	.+6      	; 0x99e <_lcd_bubble+0xa>
     998:	80 32       	cpi	r24, 0x20	; 32
     99a:	51 f4       	brne	.+20     	; 0x9b0 <_lcd_bubble+0x1c>
     99c:	05 c0       	rjmp	.+10     	; 0x9a8 <_lcd_bubble+0x14>
		case LCD_ENABLED:
		lcd_command("COLOR 69");
     99e:	89 e6       	ldi	r24, 0x69	; 105
     9a0:	90 e2       	ldi	r25, 0x20	; 32
     9a2:	0e 94 b5 04 	call	0x96a	; 0x96a <lcd_command>
		break;
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <_lcd_bubble+0x1c>
		case LCD_STANDBY:
		lcd_command("COLOR 16");
     9a8:	82 e7       	ldi	r24, 0x72	; 114
     9aa:	90 e2       	ldi	r25, 0x20	; 32
     9ac:	0e 94 b5 04 	call	0x96a	; 0x96a <lcd_command>
		break;
	}
	lcd_command("CIRCLE 10 F");
     9b0:	8b e7       	ldi	r24, 0x7B	; 123
     9b2:	90 e2       	ldi	r25, 0x20	; 32
     9b4:	0e 94 b5 04 	call	0x96a	; 0x96a <lcd_command>
	lcd_command("COLOR WHITE");
     9b8:	87 e8       	ldi	r24, 0x87	; 135
     9ba:	90 e2       	ldi	r25, 0x20	; 32
     9bc:	0e 94 b5 04 	call	0x96a	; 0x96a <lcd_command>
	lcd_command("CIRCLE 10");
     9c0:	83 e9       	ldi	r24, 0x93	; 147
     9c2:	90 e2       	ldi	r25, 0x20	; 32
     9c4:	0e 94 b5 04 	call	0x96a	; 0x96a <lcd_command>
	lcd_command("ARC 8 125 145");
     9c8:	8d e9       	ldi	r24, 0x9D	; 157
     9ca:	90 e2       	ldi	r25, 0x20	; 32
     9cc:	0e 94 b5 04 	call	0x96a	; 0x96a <lcd_command>
}
     9d0:	08 95       	ret

000009d2 <_lcd_no_bubble>:
//#############################################################
//## SCREENS: OUTPUT STATUS
//#############################################################

void _lcd_no_bubble(){
	lcd_command("COLOR BLUE");
     9d2:	8b ea       	ldi	r24, 0xAB	; 171
     9d4:	90 e2       	ldi	r25, 0x20	; 32
     9d6:	0e 94 b5 04 	call	0x96a	; 0x96a <lcd_command>
	lcd_command("BOX 30 30 F");
     9da:	86 eb       	ldi	r24, 0xB6	; 182
     9dc:	90 e2       	ldi	r25, 0x20	; 32
     9de:	0e 94 b5 04 	call	0x96a	; 0x96a <lcd_command>
}
     9e2:	08 95       	ret

000009e4 <lcd_d>:
		lcd_command("XY 380 161");
		_lcd_bubble(mode);
	}
}

void lcd_d(uint8_t mode){
     9e4:	cf 93       	push	r28
     9e6:	c8 2f       	mov	r28, r24
	if (mode == LCD_DISABLED){
     9e8:	81 32       	cpi	r24, 0x21	; 33
     9ea:	39 f4       	brne	.+14     	; 0x9fa <lcd_d+0x16>
		lcd_command("XY 365 199");
     9ec:	82 ec       	ldi	r24, 0xC2	; 194
     9ee:	90 e2       	ldi	r25, 0x20	; 32
     9f0:	0e 94 b5 04 	call	0x96a	; 0x96a <lcd_command>
		_lcd_no_bubble();
     9f4:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <_lcd_no_bubble>
     9f8:	07 c0       	rjmp	.+14     	; 0xa08 <lcd_d+0x24>
	}
	else {
		lcd_command("XY 380 209");
     9fa:	8d ec       	ldi	r24, 0xCD	; 205
     9fc:	90 e2       	ldi	r25, 0x20	; 32
     9fe:	0e 94 b5 04 	call	0x96a	; 0x96a <lcd_command>
		_lcd_bubble(mode);
     a02:	8c 2f       	mov	r24, r28
     a04:	0e 94 ca 04 	call	0x994	; 0x994 <_lcd_bubble>
	}
}
     a08:	cf 91       	pop	r28
     a0a:	08 95       	ret

00000a0c <lcd_c>:
		lcd_command("XY 380 113");
		_lcd_bubble(mode);
	}
}

void lcd_c(uint8_t mode){
     a0c:	cf 93       	push	r28
     a0e:	c8 2f       	mov	r28, r24
	if (mode == LCD_DISABLED){
     a10:	81 32       	cpi	r24, 0x21	; 33
     a12:	39 f4       	brne	.+14     	; 0xa22 <lcd_c+0x16>
		lcd_command("XY 365 151");
     a14:	88 ed       	ldi	r24, 0xD8	; 216
     a16:	90 e2       	ldi	r25, 0x20	; 32
     a18:	0e 94 b5 04 	call	0x96a	; 0x96a <lcd_command>
		_lcd_no_bubble();
     a1c:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <_lcd_no_bubble>
     a20:	07 c0       	rjmp	.+14     	; 0xa30 <lcd_c+0x24>
	}
	else {
		lcd_command("XY 380 161");
     a22:	83 ee       	ldi	r24, 0xE3	; 227
     a24:	90 e2       	ldi	r25, 0x20	; 32
     a26:	0e 94 b5 04 	call	0x96a	; 0x96a <lcd_command>
		_lcd_bubble(mode);
     a2a:	8c 2f       	mov	r24, r28
     a2c:	0e 94 ca 04 	call	0x994	; 0x994 <_lcd_bubble>
	}
}
     a30:	cf 91       	pop	r28
     a32:	08 95       	ret

00000a34 <lcd_b>:
		lcd_command("XY 380 65");
		_lcd_bubble(mode);
	}		
}

void lcd_b(uint8_t mode){
     a34:	cf 93       	push	r28
     a36:	c8 2f       	mov	r28, r24
	if (mode == LCD_DISABLED){
     a38:	81 32       	cpi	r24, 0x21	; 33
     a3a:	39 f4       	brne	.+14     	; 0xa4a <lcd_b+0x16>
		lcd_command("XY 365 103");
     a3c:	8e ee       	ldi	r24, 0xEE	; 238
     a3e:	90 e2       	ldi	r25, 0x20	; 32
     a40:	0e 94 b5 04 	call	0x96a	; 0x96a <lcd_command>
		_lcd_no_bubble();
     a44:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <_lcd_no_bubble>
     a48:	07 c0       	rjmp	.+14     	; 0xa58 <lcd_b+0x24>
	}
	else {
		lcd_command("XY 380 113");
     a4a:	89 ef       	ldi	r24, 0xF9	; 249
     a4c:	90 e2       	ldi	r25, 0x20	; 32
     a4e:	0e 94 b5 04 	call	0x96a	; 0x96a <lcd_command>
		_lcd_bubble(mode);
     a52:	8c 2f       	mov	r24, r28
     a54:	0e 94 ca 04 	call	0x994	; 0x994 <_lcd_bubble>
	}
}
     a58:	cf 91       	pop	r28
     a5a:	08 95       	ret

00000a5c <lcd_a>:
	lcd_command("COLOR WHITE");
	lcd_command("CIRCLE 10");
	lcd_command("ARC 8 125 145");
}

void lcd_a(uint8_t mode){
     a5c:	cf 93       	push	r28
     a5e:	c8 2f       	mov	r28, r24
	if (mode == LCD_DISABLED){
     a60:	81 32       	cpi	r24, 0x21	; 33
     a62:	39 f4       	brne	.+14     	; 0xa72 <lcd_a+0x16>
		lcd_command("XY 365 55");
     a64:	84 e0       	ldi	r24, 0x04	; 4
     a66:	91 e2       	ldi	r25, 0x21	; 33
     a68:	0e 94 b5 04 	call	0x96a	; 0x96a <lcd_command>
		_lcd_no_bubble();		
     a6c:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <_lcd_no_bubble>
     a70:	07 c0       	rjmp	.+14     	; 0xa80 <lcd_a+0x24>
	}
	else {
		lcd_command("XY 380 65");
     a72:	8e e0       	ldi	r24, 0x0E	; 14
     a74:	91 e2       	ldi	r25, 0x21	; 33
     a76:	0e 94 b5 04 	call	0x96a	; 0x96a <lcd_command>
		_lcd_bubble(mode);
     a7a:	8c 2f       	mov	r24, r28
     a7c:	0e 94 ca 04 	call	0x994	; 0x994 <_lcd_bubble>
	}		
}
     a80:	cf 91       	pop	r28
     a82:	08 95       	ret

00000a84 <lcd_macro>:
	uart_enqueue(&ulcd, LCD_COMMAND);
	uart_enqueue_string(&ulcd, theCommand);
	uart_enqueue(&ulcd, 0x0D); //command terminator
}

void lcd_macro(char* theCommand){
     a84:	cf 93       	push	r28
     a86:	df 93       	push	r29
     a88:	ec 01       	movw	r28, r24
	//Command Header
	uart_enqueue(&ulcd, LCD_MACRO);
     a8a:	80 eb       	ldi	r24, 0xB0	; 176
     a8c:	9b e0       	ldi	r25, 0x0B	; 11
     a8e:	6e ef       	ldi	r22, 0xFE	; 254
     a90:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <uart_enqueue>
	//Command String
	uart_enqueue_string(&ulcd, theCommand);
     a94:	80 eb       	ldi	r24, 0xB0	; 176
     a96:	9b e0       	ldi	r25, 0x0B	; 11
     a98:	be 01       	movw	r22, r28
     a9a:	0e 94 29 19 	call	0x3252	; 0x3252 <uart_enqueue_string>
	//Command Footer (terminator)
	uart_enqueue(&ulcd, 0x0D);
     a9e:	80 eb       	ldi	r24, 0xB0	; 176
     aa0:	9b e0       	ldi	r25, 0x0B	; 11
     aa2:	6d e0       	ldi	r22, 0x0D	; 13
     aa4:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <uart_enqueue>
}	
     aa8:	df 91       	pop	r29
     aaa:	cf 91       	pop	r28
     aac:	08 95       	ret

00000aae <lcd_end_macro>:
//#############################################################
//## TOUCHSCREEN COMMAND BUFFER
//#############################################################

boolean lcd_end_macro(){
	if ((lcd_touch_buffer[0]==0x7E)&&(lcd_touch_buffer[1]==0x27)){return true;}
     aae:	80 91 8c 24 	lds	r24, 0x248C
     ab2:	8e 37       	cpi	r24, 0x7E	; 126
     ab4:	39 f4       	brne	.+14     	; 0xac4 <lcd_end_macro+0x16>
     ab6:	90 91 8d 24 	lds	r25, 0x248D

//#############################################################
//## TOUCHSCREEN COMMAND BUFFER
//#############################################################

boolean lcd_end_macro(){
     aba:	81 e0       	ldi	r24, 0x01	; 1
     abc:	97 32       	cpi	r25, 0x27	; 39
     abe:	19 f0       	breq	.+6      	; 0xac6 <lcd_end_macro+0x18>
     ac0:	80 e0       	ldi	r24, 0x00	; 0
     ac2:	08 95       	ret
	if ((lcd_touch_buffer[0]==0x7E)&&(lcd_touch_buffer[1]==0x27)){return true;}
	else {return false;}
     ac4:	80 e0       	ldi	r24, 0x00	; 0
}
     ac6:	08 95       	ret

00000ac8 <lcd_get_touch>:

/// Returns the code for the last thing touched by user
/** Clears the touch history on read*/
uint8_t lcd_get_touch(){
	uint8_t last = lcd_last_touch_command;
     ac8:	80 91 85 24 	lds	r24, 0x2485
	lcd_last_touch_command = LCD_TOUCH_NONE;
     acc:	95 e1       	ldi	r25, 0x15	; 21
     ace:	90 93 85 24 	sts	0x2485, r25
	return last;
}
     ad2:	08 95       	ret

00000ad4 <lcd_set_touch>:
	
void lcd_set_touch(uint8_t latest){
	//Rotate buffer
	for (uint8_t i=0;i<LCD_TOUCH_BUFFER_LEN-1;i++){lcd_touch_buffer[i+1] = lcd_touch_buffer[i];}
     ad4:	90 91 8c 24 	lds	r25, 0x248C
     ad8:	90 93 8d 24 	sts	0x248D, r25
     adc:	90 91 8d 24 	lds	r25, 0x248D
     ae0:	90 93 8e 24 	sts	0x248E, r25
     ae4:	90 91 8e 24 	lds	r25, 0x248E
     ae8:	90 93 8f 24 	sts	0x248F, r25
     aec:	90 91 8f 24 	lds	r25, 0x248F
     af0:	90 93 90 24 	sts	0x2490, r25
     af4:	90 91 90 24 	lds	r25, 0x2490
     af8:	90 93 91 24 	sts	0x2491, r25
	//Add to front (0-index)
	lcd_touch_buffer[0] = latest;
     afc:	80 93 8c 24 	sts	0x248C, r24
	//Analyze (remember reverse order)
	if ((lcd_touch_buffer[0]==' ')&&(lcd_touch_buffer[1]==' ')&&(lcd_touch_buffer[2]==' ')&&(lcd_touch_buffer[3]==' ')){lcd_last_touch_command=LCD_TOUCH_NONE;return;}
     b00:	80 91 8c 24 	lds	r24, 0x248C
     b04:	80 32       	cpi	r24, 0x20	; 32
     b06:	79 f4       	brne	.+30     	; 0xb26 <lcd_set_touch+0x52>
     b08:	80 91 8d 24 	lds	r24, 0x248D
     b0c:	80 32       	cpi	r24, 0x20	; 32
     b0e:	59 f4       	brne	.+22     	; 0xb26 <lcd_set_touch+0x52>
     b10:	80 91 8e 24 	lds	r24, 0x248E
     b14:	80 32       	cpi	r24, 0x20	; 32
     b16:	39 f4       	brne	.+14     	; 0xb26 <lcd_set_touch+0x52>
     b18:	80 91 8f 24 	lds	r24, 0x248F
     b1c:	80 32       	cpi	r24, 0x20	; 32
     b1e:	19 f4       	brne	.+6      	; 0xb26 <lcd_set_touch+0x52>
     b20:	85 e1       	ldi	r24, 0x15	; 21
     b22:	80 93 85 24 	sts	0x2485, r24
     b26:	08 95       	ret

00000b28 <service_lcd>:

void service_lcd(){	
	static uint16_t decimator = 0;

	//Flow control indicator
	if (lcd_flow_control != LCD_READY){led_on(LED_1);}
     b28:	80 91 94 24 	lds	r24, 0x2494
     b2c:	82 35       	cpi	r24, 0x52	; 82
     b2e:	21 f0       	breq	.+8      	; 0xb38 <service_lcd+0x10>
     b30:	81 e0       	ldi	r24, 0x01	; 1
     b32:	0e 94 69 24 	call	0x48d2	; 0x48d2 <led_on>
     b36:	03 c0       	rjmp	.+6      	; 0xb3e <service_lcd+0x16>
	else {led_off(LED_1);}
     b38:	81 e0       	ldi	r24, 0x01	; 1
     b3a:	0e 94 85 24 	call	0x490a	; 0x490a <led_off>
	
	switch(lcd_flow_control){
     b3e:	80 91 94 24 	lds	r24, 0x2494
     b42:	8f 34       	cpi	r24, 0x4F	; 79
     b44:	19 f0       	breq	.+6      	; 0xb4c <service_lcd+0x24>
     b46:	80 35       	cpi	r24, 0x50	; 80
     b48:	61 f4       	brne	.+24     	; 0xb62 <service_lcd+0x3a>
     b4a:	08 c0       	rjmp	.+16     	; 0xb5c <service_lcd+0x34>
		case LCD_DONE_COMMAND:
			if (lcd_flow_type == LCD_COMMAND){lcd_flow_control = LCD_READY;}
     b4c:	80 91 93 24 	lds	r24, 0x2493
     b50:	8a 3f       	cpi	r24, 0xFA	; 250
     b52:	39 f4       	brne	.+14     	; 0xb62 <service_lcd+0x3a>
     b54:	82 e5       	ldi	r24, 0x52	; 82
     b56:	80 93 94 24 	sts	0x2494, r24
     b5a:	03 c0       	rjmp	.+6      	; 0xb62 <service_lcd+0x3a>
			break;
		case LCD_DONE_MACRO:
			lcd_flow_control = LCD_READY;
     b5c:	82 e5       	ldi	r24, 0x52	; 82
     b5e:	80 93 94 24 	sts	0x2494, r24
			break;
	}
	
	//Boot up logic (show start screen and let LCD bootup so commands are understood)
	if (decimator < 5000) {decimator++;}
     b62:	80 91 1d 21 	lds	r24, 0x211D
     b66:	90 91 1e 21 	lds	r25, 0x211E
     b6a:	23 e1       	ldi	r18, 0x13	; 19
     b6c:	88 38       	cpi	r24, 0x88	; 136
     b6e:	92 07       	cpc	r25, r18
     b70:	30 f4       	brcc	.+12     	; 0xb7e <service_lcd+0x56>
     b72:	01 96       	adiw	r24, 0x01	; 1
     b74:	80 93 1d 21 	sts	0x211D, r24
     b78:	90 93 1e 21 	sts	0x211E, r25
     b7c:	08 95       	ret
	else if (decimator == 5000) {lcd_flow_control = LCD_READY; decimator = 9000;}
     b7e:	23 e1       	ldi	r18, 0x13	; 19
     b80:	88 38       	cpi	r24, 0x88	; 136
     b82:	92 07       	cpc	r25, r18
     b84:	49 f4       	brne	.+18     	; 0xb98 <service_lcd+0x70>
     b86:	82 e5       	ldi	r24, 0x52	; 82
     b88:	80 93 94 24 	sts	0x2494, r24
     b8c:	88 e2       	ldi	r24, 0x28	; 40
     b8e:	93 e2       	ldi	r25, 0x23	; 35
     b90:	80 93 1d 21 	sts	0x211D, r24
     b94:	90 93 1e 21 	sts	0x211E, r25
     b98:	08 95       	ret

00000b9a <init_lcd_console>:
//## INITIALIZATION ROUTINE
//#############################################################

void init_lcd_console(){
	//ensure that string termination is present in the beginning for blank lines
	for(uint8_t i=0;i<LCD_CONSOLE_NUM_ROWS;i++){lcd_console[i][0] = 0;}
     b9a:	10 92 28 21 	sts	0x2128, r1
     b9e:	10 92 93 21 	sts	0x2193, r1
     ba2:	10 92 fe 21 	sts	0x21FE, r1
     ba6:	10 92 69 22 	sts	0x2269, r1
     baa:	10 92 d4 22 	sts	0x22D4, r1
     bae:	10 92 3f 23 	sts	0x233F, r1
     bb2:	10 92 aa 23 	sts	0x23AA, r1
     bb6:	10 92 15 24 	sts	0x2415, r1
}
     bba:	08 95       	ret

00000bbc <lcd_console_write>:

//#############################################################
//## SCREENS: CONSOLE
//#############################################################

void lcd_console_write(char* theString){
     bbc:	ef 92       	push	r14
     bbe:	ff 92       	push	r15
     bc0:	1f 93       	push	r17
     bc2:	cf 93       	push	r28
     bc4:	df 93       	push	r29
     bc6:	7c 01       	movw	r14, r24
	uint8_t head = lcd_console_head;
     bc8:	10 91 95 24 	lds	r17, 0x2495
	char* line_buffer = lcd_console[lcd_console_head];
     bcc:	21 2f       	mov	r18, r17
     bce:	30 e0       	ldi	r19, 0x00	; 0
     bd0:	8b e6       	ldi	r24, 0x6B	; 107
     bd2:	90 e0       	ldi	r25, 0x00	; 0
     bd4:	28 9f       	mul	r18, r24
     bd6:	a0 01       	movw	r20, r0
     bd8:	29 9f       	mul	r18, r25
     bda:	50 0d       	add	r21, r0
     bdc:	38 9f       	mul	r19, r24
     bde:	50 0d       	add	r21, r0
     be0:	11 24       	eor	r1, r1
     be2:	ea 01       	movw	r28, r20
     be4:	c8 5d       	subi	r28, 0xD8	; 216
     be6:	de 4d       	sbci	r29, 0xDE	; 222
	//Command
	line_buffer[0] = '8'; line_buffer[1]='8'; line_buffer[2]=' '; line_buffer[4]=' '; line_buffer[5]='"';
     be8:	88 e3       	ldi	r24, 0x38	; 56
     bea:	88 83       	st	Y, r24
     bec:	89 83       	std	Y+1, r24	; 0x01
     bee:	80 e2       	ldi	r24, 0x20	; 32
     bf0:	8a 83       	std	Y+2, r24	; 0x02
     bf2:	8c 83       	std	Y+4, r24	; 0x04
     bf4:	82 e2       	ldi	r24, 0x22	; 34
     bf6:	8d 83       	std	Y+5, r24	; 0x05
//#############################################################
//## SCREENS: CONSOLE
//#############################################################

void lcd_console_write(char* theString){
	uint8_t head = lcd_console_head;
     bf8:	e1 2f       	mov	r30, r17
	char* line_buffer = lcd_console[lcd_console_head];
	//Command
	line_buffer[0] = '8'; line_buffer[1]='8'; line_buffer[2]=' '; line_buffer[4]=' '; line_buffer[5]='"';
     bfa:	f1 e3       	ldi	r31, 0x31	; 49
	//Destination
	for(uint8_t i=0;i<LCD_CONSOLE_NUM_ROWS;i++){
		lcd_console[head][3] = 0x31 + i; //id of static control (Row) to write to 
     bfc:	48 e2       	ldi	r20, 0x28	; 40
     bfe:	51 e2       	ldi	r21, 0x21	; 33
     c00:	6b e6       	ldi	r22, 0x6B	; 107
     c02:	70 e0       	ldi	r23, 0x00	; 0
     c04:	8e 2f       	mov	r24, r30
     c06:	90 e0       	ldi	r25, 0x00	; 0
     c08:	86 9f       	mul	r24, r22
     c0a:	90 01       	movw	r18, r0
     c0c:	87 9f       	mul	r24, r23
     c0e:	30 0d       	add	r19, r0
     c10:	96 9f       	mul	r25, r22
     c12:	30 0d       	add	r19, r0
     c14:	11 24       	eor	r1, r1
     c16:	24 0f       	add	r18, r20
     c18:	35 1f       	adc	r19, r21
     c1a:	d9 01       	movw	r26, r18
     c1c:	13 96       	adiw	r26, 0x03	; 3
     c1e:	fc 93       	st	X, r31
     c20:	13 97       	sbiw	r26, 0x03	; 3
		head++;
     c22:	ef 5f       	subi	r30, 0xFF	; 255
		if(head >= LCD_CONSOLE_NUM_ROWS){head = 0;}
     c24:	e8 30       	cpi	r30, 0x08	; 8
     c26:	08 f0       	brcs	.+2      	; 0xc2a <lcd_console_write+0x6e>
     c28:	e0 e0       	ldi	r30, 0x00	; 0
     c2a:	ff 5f       	subi	r31, 0xFF	; 255
	uint8_t head = lcd_console_head;
	char* line_buffer = lcd_console[lcd_console_head];
	//Command
	line_buffer[0] = '8'; line_buffer[1]='8'; line_buffer[2]=' '; line_buffer[4]=' '; line_buffer[5]='"';
	//Destination
	for(uint8_t i=0;i<LCD_CONSOLE_NUM_ROWS;i++){
     c2c:	f9 33       	cpi	r31, 0x39	; 57
     c2e:	51 f7       	brne	.-44     	; 0xc04 <lcd_console_write+0x48>
		head++;
		if(head >= LCD_CONSOLE_NUM_ROWS){head = 0;}
	}	
	//Content
	for (uint8_t i=0; i<LCD_CONSOLE_NUM_COLS; i++){
		if (theString[i] == 0){
     c30:	f7 01       	movw	r30, r14
     c32:	80 81       	ld	r24, Z
     c34:	88 23       	and	r24, r24
     c36:	01 f5       	brne	.+64     	; 0xc78 <lcd_console_write+0xbc>
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <lcd_console_write+0x88>
     c3a:	94 2f       	mov	r25, r20
     c3c:	81 91       	ld	r24, Z+
     c3e:	88 23       	and	r24, r24
     c40:	69 f4       	brne	.+26     	; 0xc5c <lcd_console_write+0xa0>
     c42:	03 c0       	rjmp	.+6      	; 0xc4a <lcd_console_write+0x8e>
     c44:	40 e0       	ldi	r20, 0x00	; 0
     c46:	50 e0       	ldi	r21, 0x00	; 0
     c48:	90 e0       	ldi	r25, 0x00	; 0
			line_buffer[6+i] = '"';
     c4a:	fe 01       	movw	r30, r28
     c4c:	e9 0f       	add	r30, r25
     c4e:	f1 1d       	adc	r31, r1
     c50:	82 e2       	ldi	r24, 0x22	; 34
     c52:	86 83       	std	Z+6, r24	; 0x06
			line_buffer[6+i+1] = 0;
     c54:	c4 0f       	add	r28, r20
     c56:	d5 1f       	adc	r29, r21
     c58:	1f 82       	std	Y+7, r1	; 0x07
			break;
     c5a:	06 c0       	rjmp	.+12     	; 0xc68 <lcd_console_write+0xac>
		}
		line_buffer[6+i] = theString[i];
     c5c:	8d 93       	st	X+, r24
     c5e:	4f 5f       	subi	r20, 0xFF	; 255
     c60:	5f 4f       	sbci	r21, 0xFF	; 255
		lcd_console[head][3] = 0x31 + i; //id of static control (Row) to write to 
		head++;
		if(head >= LCD_CONSOLE_NUM_ROWS){head = 0;}
	}	
	//Content
	for (uint8_t i=0; i<LCD_CONSOLE_NUM_COLS; i++){
     c62:	44 36       	cpi	r20, 0x64	; 100
     c64:	51 05       	cpc	r21, r1
     c66:	49 f7       	brne	.-46     	; 0xc3a <lcd_console_write+0x7e>
			break;
		}
		line_buffer[6+i] = theString[i];
	}
	//Move row pointer
	lcd_console_head++;
     c68:	1f 5f       	subi	r17, 0xFF	; 255
     c6a:	10 93 95 24 	sts	0x2495, r17
	if (lcd_console_head >= LCD_CONSOLE_NUM_ROWS){lcd_console_head = 0;}
     c6e:	18 30       	cpi	r17, 0x08	; 8
     c70:	58 f0       	brcs	.+22     	; 0xc88 <lcd_console_write+0xcc>
     c72:	10 92 95 24 	sts	0x2495, r1
     c76:	08 c0       	rjmp	.+16     	; 0xc88 <lcd_console_write+0xcc>
		if (theString[i] == 0){
			line_buffer[6+i] = '"';
			line_buffer[6+i+1] = 0;
			break;
		}
		line_buffer[6+i] = theString[i];
     c78:	8e 83       	std	Y+6, r24	; 0x06

//#############################################################
//## SCREENS: CONSOLE
//#############################################################

void lcd_console_write(char* theString){
     c7a:	f7 01       	movw	r30, r14
     c7c:	31 96       	adiw	r30, 0x01	; 1
     c7e:	de 01       	movw	r26, r28
     c80:	17 96       	adiw	r26, 0x07	; 7
     c82:	41 e0       	ldi	r20, 0x01	; 1
     c84:	50 e0       	ldi	r21, 0x00	; 0
     c86:	d9 cf       	rjmp	.-78     	; 0xc3a <lcd_console_write+0x7e>
		line_buffer[6+i] = theString[i];
	}
	//Move row pointer
	lcd_console_head++;
	if (lcd_console_head >= LCD_CONSOLE_NUM_ROWS){lcd_console_head = 0;}
}
     c88:	df 91       	pop	r29
     c8a:	cf 91       	pop	r28
     c8c:	1f 91       	pop	r17
     c8e:	ff 90       	pop	r15
     c90:	ef 90       	pop	r14
     c92:	08 95       	ret

00000c94 <service_lcd_console>:
//#############################################################
//## SERVICE ROUTINE
//#############################################################

//Used to refresh the console
void service_lcd_console(){
     c94:	0f 93       	push	r16
     c96:	1f 93       	push	r17
     c98:	cf 93       	push	r28
	static uint8_t next_row_to_output = 0;
	uint8_t num_rows_output = 0;
	if (STATE_menu != MENU_CONSOLE){return;}
     c9a:	80 91 83 24 	lds	r24, 0x2483
     c9e:	82 32       	cpi	r24, 0x22	; 34
     ca0:	29 f5       	brne	.+74     	; 0xcec <service_lcd_console+0x58>
     ca2:	c9 e0       	ldi	r28, 0x09	; 9
	while((uart_count(&ulcd) < 512)&&(num_rows_output<LCD_CONSOLE_NUM_ROWS)){
		lcd_command(lcd_console[next_row_to_output]);
     ca4:	0b e6       	ldi	r16, 0x6B	; 107
     ca6:	10 e0       	ldi	r17, 0x00	; 0
     ca8:	17 c0       	rjmp	.+46     	; 0xcd8 <service_lcd_console+0x44>
     caa:	20 91 1f 21 	lds	r18, 0x211F
     cae:	30 e0       	ldi	r19, 0x00	; 0
     cb0:	20 9f       	mul	r18, r16
     cb2:	c0 01       	movw	r24, r0
     cb4:	21 9f       	mul	r18, r17
     cb6:	90 0d       	add	r25, r0
     cb8:	30 9f       	mul	r19, r16
     cba:	90 0d       	add	r25, r0
     cbc:	11 24       	eor	r1, r1
     cbe:	88 5d       	subi	r24, 0xD8	; 216
     cc0:	9e 4d       	sbci	r25, 0xDE	; 222
     cc2:	0e 94 b5 04 	call	0x96a	; 0x96a <lcd_command>
		next_row_to_output++; num_rows_output++;
     cc6:	80 91 1f 21 	lds	r24, 0x211F
     cca:	8f 5f       	subi	r24, 0xFF	; 255
     ccc:	80 93 1f 21 	sts	0x211F, r24
		if(next_row_to_output>=LCD_CONSOLE_NUM_ROWS){next_row_to_output=0;}
     cd0:	88 30       	cpi	r24, 0x08	; 8
     cd2:	10 f0       	brcs	.+4      	; 0xcd8 <service_lcd_console+0x44>
     cd4:	10 92 1f 21 	sts	0x211F, r1
//Used to refresh the console
void service_lcd_console(){
	static uint8_t next_row_to_output = 0;
	uint8_t num_rows_output = 0;
	if (STATE_menu != MENU_CONSOLE){return;}
	while((uart_count(&ulcd) < 512)&&(num_rows_output<LCD_CONSOLE_NUM_ROWS)){
     cd8:	80 eb       	ldi	r24, 0xB0	; 176
     cda:	9b e0       	ldi	r25, 0x0B	; 11
     cdc:	0e 94 e2 18 	call	0x31c4	; 0x31c4 <uart_count>
     ce0:	22 e0       	ldi	r18, 0x02	; 2
     ce2:	80 30       	cpi	r24, 0x00	; 0
     ce4:	92 07       	cpc	r25, r18
     ce6:	10 f4       	brcc	.+4      	; 0xcec <service_lcd_console+0x58>
     ce8:	c1 50       	subi	r28, 0x01	; 1
     cea:	f9 f6       	brne	.-66     	; 0xcaa <service_lcd_console+0x16>
		lcd_command(lcd_console[next_row_to_output]);
		next_row_to_output++; num_rows_output++;
		if(next_row_to_output>=LCD_CONSOLE_NUM_ROWS){next_row_to_output=0;}
	}
     cec:	cf 91       	pop	r28
     cee:	1f 91       	pop	r17
     cf0:	0f 91       	pop	r16
     cf2:	08 95       	ret

00000cf4 <init_pwr_main>:

//Handles control of the main power channels

void init_pwr_main(){
	//LED's are located at PF0 (Lower) and PF1 (Upper)
	PORTC.DIRSET = B8(00110011); //pins 0,1,4,5 to output
     cf4:	e0 e4       	ldi	r30, 0x40	; 64
     cf6:	f6 e0       	ldi	r31, 0x06	; 6
     cf8:	83 e3       	ldi	r24, 0x33	; 51
     cfa:	81 83       	std	Z+1, r24	; 0x01
	PORTC.OUTCLR = B8(00110011); //pins 0,1,4,5 to low output value (off)
     cfc:	86 83       	std	Z+6, r24	; 0x06
		break;
		case CHANNEL_D:
		PORTC.OUTCLR = B8(00100000);
		break;
		case CHANNEL_ALL:
		PORTC.OUTCLR = B8(00110011);
     cfe:	86 83       	std	Z+6, r24	; 0x06
void init_pwr_main(){
	//LED's are located at PF0 (Lower) and PF1 (Upper)
	PORTC.DIRSET = B8(00110011); //pins 0,1,4,5 to output
	PORTC.OUTCLR = B8(00110011); //pins 0,1,4,5 to low output value (off)
	pwr_main_off(CHANNEL_ALL);				
}
     d00:	08 95       	ret

00000d02 <pwr_main_on>:
//## OUTPUT MUTE
//#############################################################

void inline pwr_main_on(uint8_t which){
	uint8_t mask;
	switch(which){
     d02:	82 30       	cpi	r24, 0x02	; 2
     d04:	c1 f0       	breq	.+48     	; 0xd36 <pwr_main_on+0x34>
     d06:	83 30       	cpi	r24, 0x03	; 3
     d08:	28 f4       	brcc	.+10     	; 0xd14 <pwr_main_on+0x12>
     d0a:	88 23       	and	r24, r24
     d0c:	51 f0       	breq	.+20     	; 0xd22 <pwr_main_on+0x20>
     d0e:	81 30       	cpi	r24, 0x01	; 1
     d10:	69 f5       	brne	.+90     	; 0xd6c <pwr_main_on+0x6a>
     d12:	0c c0       	rjmp	.+24     	; 0xd2c <pwr_main_on+0x2a>
     d14:	8a 33       	cpi	r24, 0x3A	; 58
     d16:	c9 f0       	breq	.+50     	; 0xd4a <pwr_main_on+0x48>
     d18:	8c 33       	cpi	r24, 0x3C	; 60
     d1a:	e1 f0       	breq	.+56     	; 0xd54 <pwr_main_on+0x52>
     d1c:	83 30       	cpi	r24, 0x03	; 3
     d1e:	31 f5       	brne	.+76     	; 0xd6c <pwr_main_on+0x6a>
     d20:	0f c0       	rjmp	.+30     	; 0xd40 <pwr_main_on+0x3e>
		case CHANNEL_A:
			PORTC.OUTSET = B8(00000001);
     d22:	81 e0       	ldi	r24, 0x01	; 1
     d24:	e0 e4       	ldi	r30, 0x40	; 64
     d26:	f6 e0       	ldi	r31, 0x06	; 6
     d28:	85 83       	std	Z+5, r24	; 0x05
			break;
     d2a:	08 95       	ret
		case CHANNEL_B:
			PORTC.OUTSET = B8(00000010);
     d2c:	82 e0       	ldi	r24, 0x02	; 2
     d2e:	e0 e4       	ldi	r30, 0x40	; 64
     d30:	f6 e0       	ldi	r31, 0x06	; 6
     d32:	85 83       	std	Z+5, r24	; 0x05
			break;
     d34:	08 95       	ret
		case CHANNEL_C:
			PORTC.OUTSET = B8(00010000);
     d36:	80 e1       	ldi	r24, 0x10	; 16
     d38:	e0 e4       	ldi	r30, 0x40	; 64
     d3a:	f6 e0       	ldi	r31, 0x06	; 6
     d3c:	85 83       	std	Z+5, r24	; 0x05
			break;
     d3e:	08 95       	ret
		case CHANNEL_D:
			PORTC.OUTSET = B8(00100000);
     d40:	80 e2       	ldi	r24, 0x20	; 32
     d42:	e0 e4       	ldi	r30, 0x40	; 64
     d44:	f6 e0       	ldi	r31, 0x06	; 6
     d46:	85 83       	std	Z+5, r24	; 0x05
			break;
     d48:	08 95       	ret
		case CHANNEL_ALL:
			PORTC.OUTSET = B8(00110011);
     d4a:	83 e3       	ldi	r24, 0x33	; 51
     d4c:	e0 e4       	ldi	r30, 0x40	; 64
     d4e:	f6 e0       	ldi	r31, 0x06	; 6
     d50:	85 83       	std	Z+5, r24	; 0x05
			break;
     d52:	08 95       	ret
		case CHANNEL_RESTORE:
			mask = STATE_power_channels >> 2; //[000000DC] remove lower channels
     d54:	80 91 80 24 	lds	r24, 0x2480
     d58:	98 2f       	mov	r25, r24
     d5a:	96 95       	lsr	r25
     d5c:	96 95       	lsr	r25
			mask = mask << 4; //[00DC0000] position upper channels
     d5e:	92 95       	swap	r25
     d60:	90 7f       	andi	r25, 0xF0	; 240
			mask |= (STATE_power_channels & B8(00000011)); //[00DC00BA] merge in lower channels
     d62:	83 70       	andi	r24, 0x03	; 3
     d64:	89 2b       	or	r24, r25
			PORTC.OUTSET = mask;
     d66:	e0 e4       	ldi	r30, 0x40	; 64
     d68:	f6 e0       	ldi	r31, 0x06	; 6
     d6a:	85 83       	std	Z+5, r24	; 0x05
     d6c:	08 95       	ret

00000d6e <pwr_main_off>:
			break;
	}
}

void inline pwr_main_off(uint8_t which){
	switch(which){
     d6e:	82 30       	cpi	r24, 0x02	; 2
     d70:	b1 f0       	breq	.+44     	; 0xd9e <pwr_main_off+0x30>
     d72:	83 30       	cpi	r24, 0x03	; 3
     d74:	28 f4       	brcc	.+10     	; 0xd80 <pwr_main_off+0x12>
     d76:	88 23       	and	r24, r24
     d78:	41 f0       	breq	.+16     	; 0xd8a <pwr_main_off+0x1c>
     d7a:	81 30       	cpi	r24, 0x01	; 1
     d7c:	f1 f4       	brne	.+60     	; 0xdba <pwr_main_off+0x4c>
     d7e:	0a c0       	rjmp	.+20     	; 0xd94 <pwr_main_off+0x26>
     d80:	83 30       	cpi	r24, 0x03	; 3
     d82:	91 f0       	breq	.+36     	; 0xda8 <pwr_main_off+0x3a>
     d84:	8a 33       	cpi	r24, 0x3A	; 58
     d86:	c9 f4       	brne	.+50     	; 0xdba <pwr_main_off+0x4c>
     d88:	14 c0       	rjmp	.+40     	; 0xdb2 <pwr_main_off+0x44>
		case CHANNEL_A:
		PORTC.OUTCLR = B8(00000001);
     d8a:	81 e0       	ldi	r24, 0x01	; 1
     d8c:	e0 e4       	ldi	r30, 0x40	; 64
     d8e:	f6 e0       	ldi	r31, 0x06	; 6
     d90:	86 83       	std	Z+6, r24	; 0x06
		break;
     d92:	08 95       	ret
		case CHANNEL_B:
		PORTC.OUTCLR = B8(00000010);
     d94:	82 e0       	ldi	r24, 0x02	; 2
     d96:	e0 e4       	ldi	r30, 0x40	; 64
     d98:	f6 e0       	ldi	r31, 0x06	; 6
     d9a:	86 83       	std	Z+6, r24	; 0x06
		break;
     d9c:	08 95       	ret
		case CHANNEL_C:
		PORTC.OUTCLR = B8(00010000);
     d9e:	80 e1       	ldi	r24, 0x10	; 16
     da0:	e0 e4       	ldi	r30, 0x40	; 64
     da2:	f6 e0       	ldi	r31, 0x06	; 6
     da4:	86 83       	std	Z+6, r24	; 0x06
		break;
     da6:	08 95       	ret
		case CHANNEL_D:
		PORTC.OUTCLR = B8(00100000);
     da8:	80 e2       	ldi	r24, 0x20	; 32
     daa:	e0 e4       	ldi	r30, 0x40	; 64
     dac:	f6 e0       	ldi	r31, 0x06	; 6
     dae:	86 83       	std	Z+6, r24	; 0x06
		break;
     db0:	08 95       	ret
		case CHANNEL_ALL:
		PORTC.OUTCLR = B8(00110011);
     db2:	83 e3       	ldi	r24, 0x33	; 51
     db4:	e0 e4       	ldi	r30, 0x40	; 64
     db6:	f6 e0       	ldi	r31, 0x06	; 6
     db8:	86 83       	std	Z+6, r24	; 0x06
     dba:	08 95       	ret

00000dbc <service_pwr_main>:
		break;
	}
}

void service_pwr_main(){
}
     dbc:	08 95       	ret

00000dbe <init_rtos_clock_external>:
#include "lcd.h"
#include "quadrature.h"

int init_rtos_clock_external(void){
	//Boot up and configure oscillator
	OSC.XOSCCTRL = B8(00100010); //enable external 32kHz Xtal using low-power (e.g. low-swing) mode
     dbe:	e0 e5       	ldi	r30, 0x50	; 80
     dc0:	f0 e0       	ldi	r31, 0x00	; 0
     dc2:	82 e2       	ldi	r24, 0x22	; 34
     dc4:	82 83       	std	Z+2, r24	; 0x02
	OSC.CTRL = B8(00001011); //enable 32M-RC & External Xtal -- also "enable" 2M-RC since its already running b/c we booted from it and can't actually disable it until we switch sources
     dc6:	8b e0       	ldi	r24, 0x0B	; 11
     dc8:	80 83       	st	Z, r24
	//Wait for stability
	led_on(LED_0);
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	0e 94 69 24 	call	0x48d2	; 0x48d2 <led_on>
	//This is actually tricky sequencing because we boot from the 2MHz internal RC so previous write to OSC.CTRL was ineffective at shutting down the 2M-RC so OSC.STATUS will still reflect that it is running
	while(OSC.STATUS != B8(00001011)); //stall for external xtal and 32M-RC stability
     dd0:	e0 e5       	ldi	r30, 0x50	; 80
     dd2:	f0 e0       	ldi	r31, 0x00	; 0
     dd4:	81 81       	ldd	r24, Z+1	; 0x01
     dd6:	8b 30       	cpi	r24, 0x0B	; 11
     dd8:	e9 f7       	brne	.-6      	; 0xdd4 <init_rtos_clock_external+0x16>
	led_off(LED_0);
     dda:	80 e0       	ldi	r24, 0x00	; 0
     ddc:	0e 94 85 24 	call	0x490a	; 0x490a <led_off>
	//Configure
	OSC.DFLLCTRL = B8(00000010); //use external xtal for 32M-RC calibration
     de0:	e0 e5       	ldi	r30, 0x50	; 80
     de2:	f0 e0       	ldi	r31, 0x00	; 0
     de4:	82 e0       	ldi	r24, 0x02	; 2
     de6:	86 83       	std	Z+6, r24	; 0x06
	DFLLRC32M.CTRL = B8(00000001); //enable Xtal calibration of internal 32MHz RC oscillator
     de8:	81 e0       	ldi	r24, 0x01	; 1
     dea:	80 93 60 00 	sts	0x0060, r24
	//Switch system clock over to stable RC oscillator
	//Switch to 32M-RC as system clock source and disable the 2M-RC that we booted from.
	//----REQUIRES CONFIGURATION PROTECTION REGISTER
	CCP = CCP_IOREG_gc; //disable change protection for IO register
     dee:	98 ed       	ldi	r25, 0xD8	; 216
     df0:	94 bf       	out	0x34, r25	; 52
	CLK.CTRL = CLK_SCLKSEL_RC32M_gc;
     df2:	80 93 40 00 	sts	0x0040, r24
	OSC.CTRL = B8(00001010); //re-execute this write -- this will shutdown the 2M-RC since we are no longer running from it.
     df6:	8a e0       	ldi	r24, 0x0A	; 10
     df8:	80 83       	st	Z, r24
	//Now running live at 32MHz
	return 0;
}
     dfa:	80 e0       	ldi	r24, 0x00	; 0
     dfc:	90 e0       	ldi	r25, 0x00	; 0
     dfe:	08 95       	ret

00000e00 <init_rtos_clock_internal>:

int init_rtos_clock_internal(void){
	//Boot up and configure oscillator
	OSC.CTRL = B8(00000111); //enable 32M-RC & INTERNAL 32kHz -- also "enable" 2M-RC since its already running b/c we booted from it and can't actually disable it until we switch sources
     e00:	87 e0       	ldi	r24, 0x07	; 7
     e02:	80 93 50 00 	sts	0x0050, r24
	//Wait for stability
	led_on(LED_0);
     e06:	80 e0       	ldi	r24, 0x00	; 0
     e08:	0e 94 69 24 	call	0x48d2	; 0x48d2 <led_on>
	//This is actually tricky sequencing because we boot from the 2MHz internal RC so previous write to OSC.CTRL was ineffective at shutting down the 2M-RC so OSC.STATUS will still reflect that it is running
	while(OSC.STATUS != B8(00000111)); //stall for INTERNAL 32k-RC and 32MHz-RC stability
     e0c:	e0 e5       	ldi	r30, 0x50	; 80
     e0e:	f0 e0       	ldi	r31, 0x00	; 0
     e10:	81 81       	ldd	r24, Z+1	; 0x01
     e12:	87 30       	cpi	r24, 0x07	; 7
     e14:	e9 f7       	brne	.-6      	; 0xe10 <init_rtos_clock_internal+0x10>
	led_off(LED_0);
     e16:	80 e0       	ldi	r24, 0x00	; 0
     e18:	0e 94 85 24 	call	0x490a	; 0x490a <led_off>
	//Configure
	OSC.DFLLCTRL = B8(00000010); //use external xtal for 32M-RC calibration
     e1c:	e0 e5       	ldi	r30, 0x50	; 80
     e1e:	f0 e0       	ldi	r31, 0x00	; 0
     e20:	82 e0       	ldi	r24, 0x02	; 2
     e22:	86 83       	std	Z+6, r24	; 0x06
	DFLLRC32M.CTRL = B8(00000001); //enable Xtal calibration of internal 32MHz RC oscillator
     e24:	81 e0       	ldi	r24, 0x01	; 1
     e26:	80 93 60 00 	sts	0x0060, r24
	//Switch system clock over to stable RC oscillator
	//Switch to 32M-RC as system clock source and disable the 2M-RC that we booted from.
	//----REQUIRES CONFIGURATION PROTECTION REGISTER
	CCP = CCP_IOREG_gc; //disable change protection for IO register
     e2a:	98 ed       	ldi	r25, 0xD8	; 216
     e2c:	94 bf       	out	0x34, r25	; 52
	CLK.CTRL = CLK_SCLKSEL_RC32M_gc;
     e2e:	80 93 40 00 	sts	0x0040, r24
	OSC.CTRL = B8(00001010); //re-execute this write -- this will shutdown the 2M-RC since we are no longer running from it.
     e32:	8a e0       	ldi	r24, 0x0A	; 10
     e34:	80 83       	st	Z, r24
	//Now running live at 32MHz
	return 0;
}
     e36:	80 e0       	ldi	r24, 0x00	; 0
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	08 95       	ret

00000e3c <main>:
	//[BLINK ALIVE]
	uint8_t blah;
	int8_t updown;

	//[LED's, Button, & Switches]
	init_ui(); //init LED's first so that they are available for debugging
     e3c:	0e 94 d3 24 	call	0x49a6	; 0x49a6 <init_ui>
	init_fp(); //init Front Panel LED's and Switches so that they are available for debugging
     e40:	0e 94 2c 03 	call	0x658	; 0x658 <init_fp>
	init_quadrature(); //init quadrature decoder for front panel rotary encoder
     e44:	0e 94 7f 07 	call	0xefe	; 0xefe <init_quadrature>
	
	//[CPU CLOCK]
	init_rtos_clock_internal();
     e48:	0e 94 00 07 	call	0xe00	; 0xe00 <init_rtos_clock_internal>

	//[LCD]
	init_lcd();
     e4c:	0e 94 ab 04 	call	0x956	; 0x956 <init_lcd>
	init_lcd_console();
     e50:	0e 94 cd 05 	call	0xb9a	; 0xb9a <init_lcd_console>

	//[UARTs]
	init_uart(&uctrl, BAUD_115200);
     e54:	80 ea       	ldi	r24, 0xA0	; 160
     e56:	98 e0       	ldi	r25, 0x08	; 8
     e58:	60 e0       	ldi	r22, 0x00	; 0
     e5a:	0e 94 a4 08 	call	0x1148	; 0x1148 <init_uart>
	init_uart(&udata, BAUD_115200);
     e5e:	80 eb       	ldi	r24, 0xB0	; 176
     e60:	98 e0       	ldi	r25, 0x08	; 8
     e62:	60 e0       	ldi	r22, 0x00	; 0
     e64:	0e 94 a4 08 	call	0x1148	; 0x1148 <init_uart>
	init_uart(&ulcd, BAUD_115200);
     e68:	80 eb       	ldi	r24, 0xB0	; 176
     e6a:	9b e0       	ldi	r25, 0x0B	; 11
     e6c:	60 e0       	ldi	r22, 0x00	; 0
     e6e:	0e 94 a4 08 	call	0x1148	; 0x1148 <init_uart>
	init_uart_buffers();
     e72:	0e 94 4b 21 	call	0x4296	; 0x4296 <init_uart_buffers>
	
	//[ADC]
	init_adc();		
     e76:	0e 94 21 01 	call	0x242	; 0x242 <init_adc>

	//[POWER PATH]
	init_pwr_main();
     e7a:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <init_pwr_main>
	//init_pwr_adj();

	//[BRAIN]
	init_brain();
     e7e:	0e 94 2b 02 	call	0x456	; 0x456 <init_brain>
	
	//[Realtime Loop Timer]
	//Use PortC's T/C0
	TCC0.CTRLA = 0x07; //Start the timer; Div1024 operation = 32M/1024 = 31250
     e82:	e0 e0       	ldi	r30, 0x00	; 0
     e84:	f8 e0       	ldi	r31, 0x08	; 8
     e86:	87 e0       	ldi	r24, 0x07	; 7
     e88:	80 83       	st	Z, r24
	TCC0.PER = 62; //2ms Loop Time
     e8a:	8e e3       	ldi	r24, 0x3E	; 62
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	86 a3       	lds	r24, 0x56
     e90:	97 a3       	lds	r25, 0x57

	//[PMIC (Interrupt Controller)]
	PMIC.CTRL = B8(10000111); //enable all three interrupt levels (lowest one with round-robin)
     e92:	87 e8       	ldi	r24, 0x87	; 135
     e94:	e0 ea       	ldi	r30, 0xA0	; 160
     e96:	f0 e0       	ldi	r31, 0x00	; 0
     e98:	82 83       	std	Z+2, r24	; 0x02
	sei(); //ENABLE INTERRUPTS AND GO LIVE!
     e9a:	78 94       	sei

	//[RTOS START!]
	blah = 1;
	updown = 1;
	led_off(LED_0);
     e9c:	80 e0       	ldi	r24, 0x00	; 0
     e9e:	0e 94 85 24 	call	0x490a	; 0x490a <led_off>
	led_off(LED_1);
     ea2:	81 e0       	ldi	r24, 0x01	; 1
     ea4:	0e 94 85 24 	call	0x490a	; 0x490a <led_off>
	audio_beep(2, 100);
     ea8:	82 e0       	ldi	r24, 0x02	; 2
     eaa:	64 e6       	ldi	r22, 0x64	; 100
     eac:	70 e0       	ldi	r23, 0x00	; 0
     eae:	0e 94 05 25 	call	0x4a0a	; 0x4a0a <audio_beep>

	while(1){
		//Blink alive
		led_dim(LED_0, blah);	
     eb2:	80 e0       	ldi	r24, 0x00	; 0
     eb4:	61 e0       	ldi	r22, 0x01	; 1
     eb6:	0e 94 9b 24 	call	0x4936	; 0x4936 <led_dim>
		blah += updown;
     eba:	12 e0       	ldi	r17, 0x02	; 2
	PMIC.CTRL = B8(10000111); //enable all three interrupt levels (lowest one with round-robin)
	sei(); //ENABLE INTERRUPTS AND GO LIVE!

	//[RTOS START!]
	blah = 1;
	updown = 1;
     ebc:	01 e0       	ldi	r16, 0x01	; 1
		service_uart_buffer();
		service_lcd();
		service_lcd_console();
		
		//Wait out RTOS loop
		while((TCC0.INTFLAGS & _BV(0)) != 0x01); //Wait for the loop time to expire
     ebe:	c0 e0       	ldi	r28, 0x00	; 0
     ec0:	d8 e0       	ldi	r29, 0x08	; 8
		TCC0.INTFLAGS = 0x01; //Clear the interrupt flag
     ec2:	ff 24       	eor	r15, r15
     ec4:	f3 94       	inc	r15
     ec6:	01 c0       	rjmp	.+2      	; 0xeca <main+0x8e>
	while(1){
		//Blink alive
		led_dim(LED_0, blah);	
		blah += updown;
		if ((blah == 255) || (blah == 0)) {
			updown = -1 * updown;
     ec8:	01 95       	neg	r16
		
		//TESTING
		
		
		//Call services
		service_audio();
     eca:	0e 94 11 25 	call	0x4a22	; 0x4a22 <service_audio>
		service_fp();
     ece:	0e 94 15 04 	call	0x82a	; 0x82a <service_fp>
		service_brain();	
     ed2:	0e 94 2b 03 	call	0x656	; 0x656 <service_brain>
		service_uart_buffer();
     ed6:	0e 94 11 22 	call	0x4422	; 0x4422 <service_uart_buffer>
		service_lcd();
     eda:	0e 94 94 05 	call	0xb28	; 0xb28 <service_lcd>
		service_lcd_console();
     ede:	0e 94 4a 06 	call	0xc94	; 0xc94 <service_lcd_console>
		
		//Wait out RTOS loop
		while((TCC0.INTFLAGS & _BV(0)) != 0x01); //Wait for the loop time to expire
     ee2:	8c 85       	ldd	r24, Y+12	; 0x0c
     ee4:	80 ff       	sbrs	r24, 0
     ee6:	fd cf       	rjmp	.-6      	; 0xee2 <main+0xa6>
		TCC0.INTFLAGS = 0x01; //Clear the interrupt flag
     ee8:	fc 86       	std	Y+12, r15	; 0x0c
	led_off(LED_1);
	audio_beep(2, 100);

	while(1){
		//Blink alive
		led_dim(LED_0, blah);	
     eea:	80 e0       	ldi	r24, 0x00	; 0
     eec:	61 2f       	mov	r22, r17
     eee:	0e 94 9b 24 	call	0x4936	; 0x4936 <led_dim>
		blah += updown;
     ef2:	10 0f       	add	r17, r16
		if ((blah == 255) || (blah == 0)) {
     ef4:	81 2f       	mov	r24, r17
     ef6:	81 50       	subi	r24, 0x01	; 1
     ef8:	8e 3f       	cpi	r24, 0xFE	; 254
     efa:	30 f7       	brcc	.-52     	; 0xec8 <main+0x8c>
     efc:	e6 cf       	rjmp	.-52     	; 0xeca <main+0x8e>

00000efe <init_quadrature>:
		============		
		PK6: Rotary Channel A
		PK7: Rotary Channel B
	*/
	//	SciPSU FP switches have hardware pull-up and hardware debounce
	PORTK.DIRCLR = B8(11000000); //This is the default condition, but just to be safe
     efe:	e0 e2       	ldi	r30, 0x20	; 32
     f00:	f7 e0       	ldi	r31, 0x07	; 7
     f02:	80 ec       	ldi	r24, 0xC0	; 192
     f04:	82 83       	std	Z+2, r24	; 0x02
	PORTK.INT0MASK = B8(01000000); //Enable PORTK.Interrupt0 channel for PK6 
     f06:	80 e4       	ldi	r24, 0x40	; 64
     f08:	82 87       	std	Z+10, r24	; 0x0a
	PORTK.INT1MASK = B8(10000000); //Enable PORTK.Interrupt1 channel for PK7 
     f0a:	80 e8       	ldi	r24, 0x80	; 128
     f0c:	83 87       	std	Z+11, r24	; 0x0b
	PORTK.INTCTRL = B8(00001111); //interrupt 0 & 1 channels set to highest priority
     f0e:	8f e0       	ldi	r24, 0x0F	; 15
     f10:	81 87       	std	Z+9, r24	; 0x09
	//Setup initial edge look directions -- need to enable global interrupts shortly after doing this (so init the quadrature module last in main.c)
	if ((PORTK.IN & _BV(6)) == 0){PORTK.PIN6CTRL = RISING_EDGE;} 
     f12:	80 85       	ldd	r24, Z+8	; 0x08
     f14:	86 fd       	sbrc	r24, 6
     f16:	03 c0       	rjmp	.+6      	; 0xf1e <init_quadrature+0x20>
     f18:	89 e9       	ldi	r24, 0x99	; 153
     f1a:	86 8b       	std	Z+22, r24	; 0x16
     f1c:	04 c0       	rjmp	.+8      	; 0xf26 <init_quadrature+0x28>
	else {PORTK.PIN6CTRL = FALLING_EDGE;}
     f1e:	8a e9       	ldi	r24, 0x9A	; 154
     f20:	e0 e2       	ldi	r30, 0x20	; 32
     f22:	f7 e0       	ldi	r31, 0x07	; 7
     f24:	86 8b       	std	Z+22, r24	; 0x16
	if ((PORTK.IN & _BV(7)) == 0){PORTK.PIN7CTRL = RISING_EDGE;}
     f26:	e0 e2       	ldi	r30, 0x20	; 32
     f28:	f7 e0       	ldi	r31, 0x07	; 7
     f2a:	80 85       	ldd	r24, Z+8	; 0x08
     f2c:	88 23       	and	r24, r24
     f2e:	1c f0       	brlt	.+6      	; 0xf36 <init_quadrature+0x38>
     f30:	89 e9       	ldi	r24, 0x99	; 153
     f32:	87 8b       	std	Z+23, r24	; 0x17
     f34:	04 c0       	rjmp	.+8      	; 0xf3e <init_quadrature+0x40>
	else {PORTK.PIN7CTRL = FALLING_EDGE;}
     f36:	8a e9       	ldi	r24, 0x9A	; 154
     f38:	e0 e2       	ldi	r30, 0x20	; 32
     f3a:	f7 e0       	ldi	r31, 0x07	; 7
     f3c:	87 8b       	std	Z+23, r24	; 0x17
		
	quad_count = 0;
     f3e:	10 92 8a 24 	sts	0x248A, r1
     f42:	10 92 8b 24 	sts	0x248B, r1
	quad_state = QUAD_IDLE;
     f46:	8c e2       	ldi	r24, 0x2C	; 44
     f48:	80 93 87 24 	sts	0x2487, r24
	
}
     f4c:	08 95       	ret

00000f4e <quad_up>:

/// Reports if the quadrature encoded control has moved up since the last time this function was called.
/* SIDE EFFECT: modifies internal state. If you call this twice, only the first call will report true.*/
boolean quad_up(){
	if (quad_state == QUAD_UP){quad_state = QUAD_IDLE; return true;}
     f4e:	80 91 87 24 	lds	r24, 0x2487
     f52:	8d 32       	cpi	r24, 0x2D	; 45
     f54:	29 f4       	brne	.+10     	; 0xf60 <quad_up+0x12>
     f56:	8c e2       	ldi	r24, 0x2C	; 44
     f58:	80 93 87 24 	sts	0x2487, r24
     f5c:	81 e0       	ldi	r24, 0x01	; 1
     f5e:	08 95       	ret
	return false;
     f60:	80 e0       	ldi	r24, 0x00	; 0
}
     f62:	08 95       	ret

00000f64 <quad_down>:

/// Reports if the quadrature encoded control has moved down since the last time this function was called.
/* SIDE EFFECT: modifies internal state. If you call this twice, only the first call will report true.*/
boolean quad_down(){
if (quad_state == QUAD_DOWN){quad_state = QUAD_IDLE; return true;}
     f64:	80 91 87 24 	lds	r24, 0x2487
     f68:	8e 32       	cpi	r24, 0x2E	; 46
     f6a:	29 f4       	brne	.+10     	; 0xf76 <quad_down+0x12>
     f6c:	8c e2       	ldi	r24, 0x2C	; 44
     f6e:	80 93 87 24 	sts	0x2487, r24
     f72:	81 e0       	ldi	r24, 0x01	; 1
     f74:	08 95       	ret
return false;
     f76:	80 e0       	ldi	r24, 0x00	; 0
}
     f78:	08 95       	ret

00000f7a <__vector_100>:
//#############################################################
//## ROTARY CONTROL
//#############################################################

///Interrupt Service Routine (ISR) for quadrature encoder Channel A (PORTK Int0; PK6)
SIGNAL(PORTK_INT0_vect){
     f7a:	1f 92       	push	r1
     f7c:	0f 92       	push	r0
     f7e:	0f b6       	in	r0, 0x3f	; 63
     f80:	0f 92       	push	r0
     f82:	08 b6       	in	r0, 0x38	; 56
     f84:	0f 92       	push	r0
     f86:	0b b6       	in	r0, 0x3b	; 59
     f88:	0f 92       	push	r0
     f8a:	11 24       	eor	r1, r1
     f8c:	8f 93       	push	r24
     f8e:	9f 93       	push	r25
     f90:	ef 93       	push	r30
     f92:	ff 93       	push	r31
	if (PORTK.PIN6CTRL == FALLING_EDGE){
     f94:	e0 e2       	ldi	r30, 0x20	; 32
     f96:	f7 e0       	ldi	r31, 0x07	; 7
     f98:	86 89       	ldd	r24, Z+22	; 0x16
     f9a:	8a 39       	cpi	r24, 0x9A	; 154
     f9c:	01 f5       	brne	.+64     	; 0xfde <__vector_100+0x64>
		//Detected FALLING edge on channel A
		if ((PORTK.IN & _BV(7)) == 0){
     f9e:	80 85       	ldd	r24, Z+8	; 0x08
     fa0:	88 23       	and	r24, r24
     fa2:	6c f0       	brlt	.+26     	; 0xfbe <__vector_100+0x44>
			//if channel A is falling and channel B is low, direction = DOWN
			quad_count--;
     fa4:	80 91 8a 24 	lds	r24, 0x248A
     fa8:	90 91 8b 24 	lds	r25, 0x248B
     fac:	01 97       	sbiw	r24, 0x01	; 1
     fae:	80 93 8a 24 	sts	0x248A, r24
     fb2:	90 93 8b 24 	sts	0x248B, r25
			quad_state = QUAD_DOWN;
     fb6:	8e e2       	ldi	r24, 0x2E	; 46
     fb8:	80 93 87 24 	sts	0x2487, r24
     fbc:	0c c0       	rjmp	.+24     	; 0xfd6 <__vector_100+0x5c>
		}
		else{
			//if channel A is falling and channel B is high, direction = UP
			quad_count++;
     fbe:	80 91 8a 24 	lds	r24, 0x248A
     fc2:	90 91 8b 24 	lds	r25, 0x248B
     fc6:	01 96       	adiw	r24, 0x01	; 1
     fc8:	80 93 8a 24 	sts	0x248A, r24
     fcc:	90 93 8b 24 	sts	0x248B, r25
			quad_state = QUAD_UP;
     fd0:	8d e2       	ldi	r24, 0x2D	; 45
     fd2:	80 93 87 24 	sts	0x2487, r24
		}
		//Now, look for rising edge
		PORTK.PIN6CTRL = RISING_EDGE;
     fd6:	89 e9       	ldi	r24, 0x99	; 153
     fd8:	e0 e2       	ldi	r30, 0x20	; 32
     fda:	f7 e0       	ldi	r31, 0x07	; 7
     fdc:	86 8b       	std	Z+22, r24	; 0x16
	}
	if (PORTK.PIN6CTRL == RISING_EDGE){
     fde:	e0 e2       	ldi	r30, 0x20	; 32
     fe0:	f7 e0       	ldi	r31, 0x07	; 7
     fe2:	86 89       	ldd	r24, Z+22	; 0x16
     fe4:	89 39       	cpi	r24, 0x99	; 153
     fe6:	01 f5       	brne	.+64     	; 0x1028 <__vector_100+0xae>
		//Detected RISING edge on channel A
		if ((PORTK.IN & _BV(7)) == 0){
     fe8:	80 85       	ldd	r24, Z+8	; 0x08
     fea:	88 23       	and	r24, r24
     fec:	6c f0       	brlt	.+26     	; 0x1008 <__vector_100+0x8e>
			//if channel A is rising and channel B is low, direction = UP
			quad_count++;
     fee:	80 91 8a 24 	lds	r24, 0x248A
     ff2:	90 91 8b 24 	lds	r25, 0x248B
     ff6:	01 96       	adiw	r24, 0x01	; 1
     ff8:	80 93 8a 24 	sts	0x248A, r24
     ffc:	90 93 8b 24 	sts	0x248B, r25
			quad_state = QUAD_UP;
    1000:	8d e2       	ldi	r24, 0x2D	; 45
    1002:	80 93 87 24 	sts	0x2487, r24
    1006:	0c c0       	rjmp	.+24     	; 0x1020 <__vector_100+0xa6>
		}
		else{
			//if channel A is rising and channel B is high, direction = DOWN
			quad_count--;
    1008:	80 91 8a 24 	lds	r24, 0x248A
    100c:	90 91 8b 24 	lds	r25, 0x248B
    1010:	01 97       	sbiw	r24, 0x01	; 1
    1012:	80 93 8a 24 	sts	0x248A, r24
    1016:	90 93 8b 24 	sts	0x248B, r25
			quad_state = QUAD_DOWN;
    101a:	8e e2       	ldi	r24, 0x2E	; 46
    101c:	80 93 87 24 	sts	0x2487, r24
		}
		//Now, look for falling edge
		PORTK.PIN6CTRL = FALLING_EDGE;
    1020:	8a e9       	ldi	r24, 0x9A	; 154
    1022:	e0 e2       	ldi	r30, 0x20	; 32
    1024:	f7 e0       	ldi	r31, 0x07	; 7
    1026:	86 8b       	std	Z+22, r24	; 0x16
	}
	PORTK.INTFLAGS = B8(00000001); //clear interrupt flag just in case
    1028:	81 e0       	ldi	r24, 0x01	; 1
    102a:	e0 e2       	ldi	r30, 0x20	; 32
    102c:	f7 e0       	ldi	r31, 0x07	; 7
    102e:	84 87       	std	Z+12, r24	; 0x0c
}
    1030:	ff 91       	pop	r31
    1032:	ef 91       	pop	r30
    1034:	9f 91       	pop	r25
    1036:	8f 91       	pop	r24
    1038:	0f 90       	pop	r0
    103a:	0b be       	out	0x3b, r0	; 59
    103c:	0f 90       	pop	r0
    103e:	08 be       	out	0x38, r0	; 56
    1040:	0f 90       	pop	r0
    1042:	0f be       	out	0x3f, r0	; 63
    1044:	0f 90       	pop	r0
    1046:	1f 90       	pop	r1
    1048:	18 95       	reti

0000104a <__vector_101>:

///Interrupt Service Routine (ISR) for quadrature encoder Channel B (PORTK Int1; PK7)
SIGNAL(PORTK_INT1_vect){
    104a:	1f 92       	push	r1
    104c:	0f 92       	push	r0
    104e:	0f b6       	in	r0, 0x3f	; 63
    1050:	0f 92       	push	r0
    1052:	08 b6       	in	r0, 0x38	; 56
    1054:	0f 92       	push	r0
    1056:	0b b6       	in	r0, 0x3b	; 59
    1058:	0f 92       	push	r0
    105a:	11 24       	eor	r1, r1
    105c:	8f 93       	push	r24
    105e:	9f 93       	push	r25
    1060:	ef 93       	push	r30
    1062:	ff 93       	push	r31
	if (PORTK.PIN7CTRL == FALLING_EDGE){
    1064:	e0 e2       	ldi	r30, 0x20	; 32
    1066:	f7 e0       	ldi	r31, 0x07	; 7
    1068:	87 89       	ldd	r24, Z+23	; 0x17
    106a:	8a 39       	cpi	r24, 0x9A	; 154
    106c:	01 f5       	brne	.+64     	; 0x10ae <__vector_101+0x64>
		//Detected FALLING edge on channel A
		if ((PORTK.IN & _BV(6)) == 0){
    106e:	80 85       	ldd	r24, Z+8	; 0x08
    1070:	86 fd       	sbrc	r24, 6
    1072:	0d c0       	rjmp	.+26     	; 0x108e <__vector_101+0x44>
			//if channel B is falling and channel A is low, direction = UP
			quad_count++;
    1074:	80 91 8a 24 	lds	r24, 0x248A
    1078:	90 91 8b 24 	lds	r25, 0x248B
    107c:	01 96       	adiw	r24, 0x01	; 1
    107e:	80 93 8a 24 	sts	0x248A, r24
    1082:	90 93 8b 24 	sts	0x248B, r25
			quad_state = QUAD_UP;
    1086:	8d e2       	ldi	r24, 0x2D	; 45
    1088:	80 93 87 24 	sts	0x2487, r24
    108c:	0c c0       	rjmp	.+24     	; 0x10a6 <__vector_101+0x5c>
		}
		else{
			//if channel B is falling and channel A is high, direction = DOWN
			quad_count--;
    108e:	80 91 8a 24 	lds	r24, 0x248A
    1092:	90 91 8b 24 	lds	r25, 0x248B
    1096:	01 97       	sbiw	r24, 0x01	; 1
    1098:	80 93 8a 24 	sts	0x248A, r24
    109c:	90 93 8b 24 	sts	0x248B, r25
			quad_state = QUAD_DOWN;
    10a0:	8e e2       	ldi	r24, 0x2E	; 46
    10a2:	80 93 87 24 	sts	0x2487, r24
		}
		//Now, look for rising edge
		PORTK.PIN7CTRL = RISING_EDGE;
    10a6:	89 e9       	ldi	r24, 0x99	; 153
    10a8:	e0 e2       	ldi	r30, 0x20	; 32
    10aa:	f7 e0       	ldi	r31, 0x07	; 7
    10ac:	87 8b       	std	Z+23, r24	; 0x17
	}
	if (PORTK.PIN7CTRL == RISING_EDGE){
    10ae:	e0 e2       	ldi	r30, 0x20	; 32
    10b0:	f7 e0       	ldi	r31, 0x07	; 7
    10b2:	87 89       	ldd	r24, Z+23	; 0x17
    10b4:	89 39       	cpi	r24, 0x99	; 153
    10b6:	01 f5       	brne	.+64     	; 0x10f8 <__vector_101+0xae>
		//Detected RISING edge on channel B
		if ((PORTK.IN & _BV(6)) == 0){
    10b8:	80 85       	ldd	r24, Z+8	; 0x08
    10ba:	86 fd       	sbrc	r24, 6
    10bc:	0d c0       	rjmp	.+26     	; 0x10d8 <__vector_101+0x8e>
			//if channel B is rising and channel A is low, direction = DOWN
			quad_count--;
    10be:	80 91 8a 24 	lds	r24, 0x248A
    10c2:	90 91 8b 24 	lds	r25, 0x248B
    10c6:	01 97       	sbiw	r24, 0x01	; 1
    10c8:	80 93 8a 24 	sts	0x248A, r24
    10cc:	90 93 8b 24 	sts	0x248B, r25
			quad_state = QUAD_DOWN;
    10d0:	8e e2       	ldi	r24, 0x2E	; 46
    10d2:	80 93 87 24 	sts	0x2487, r24
    10d6:	0c c0       	rjmp	.+24     	; 0x10f0 <__vector_101+0xa6>
		}
		else{
			//if channel B is rising and channel A is high, direction = UP
			quad_count++;
    10d8:	80 91 8a 24 	lds	r24, 0x248A
    10dc:	90 91 8b 24 	lds	r25, 0x248B
    10e0:	01 96       	adiw	r24, 0x01	; 1
    10e2:	80 93 8a 24 	sts	0x248A, r24
    10e6:	90 93 8b 24 	sts	0x248B, r25
			quad_state = QUAD_UP;
    10ea:	8d e2       	ldi	r24, 0x2D	; 45
    10ec:	80 93 87 24 	sts	0x2487, r24
		}
		//Now, look for falling edge
		PORTK.PIN7CTRL = FALLING_EDGE;
    10f0:	8a e9       	ldi	r24, 0x9A	; 154
    10f2:	e0 e2       	ldi	r30, 0x20	; 32
    10f4:	f7 e0       	ldi	r31, 0x07	; 7
    10f6:	87 8b       	std	Z+23, r24	; 0x17
	}
	PORTK.INTFLAGS = B8(00000010); //clear interrupt flag just in case
    10f8:	82 e0       	ldi	r24, 0x02	; 2
    10fa:	e0 e2       	ldi	r30, 0x20	; 32
    10fc:	f7 e0       	ldi	r31, 0x07	; 7
    10fe:	84 87       	std	Z+12, r24	; 0x0c
}
    1100:	ff 91       	pop	r31
    1102:	ef 91       	pop	r30
    1104:	9f 91       	pop	r25
    1106:	8f 91       	pop	r24
    1108:	0f 90       	pop	r0
    110a:	0b be       	out	0x3b, r0	; 59
    110c:	0f 90       	pop	r0
    110e:	08 be       	out	0x38, r0	; 56
    1110:	0f 90       	pop	r0
    1112:	0f be       	out	0x3f, r0	; 63
    1114:	0f 90       	pop	r0
    1116:	1f 90       	pop	r1
    1118:	18 95       	reti

0000111a <service_quadrature>:
//## SERVICE ROUTINE
//#############################################################

void service_quadrature(){	
	
}
    111a:	08 95       	ret

0000111c <init_thermal>:
 */ 


void init_thermal(){
	//FANS are located at PF4 (Fan0) and PF5 (Fan1)
	PORTF.DIRSET = 0x30; //pins 4 and 5 to output
    111c:	e0 ea       	ldi	r30, 0xA0	; 160
    111e:	f6 e0       	ldi	r31, 0x06	; 6
    1120:	80 e3       	ldi	r24, 0x30	; 48
    1122:	81 83       	std	Z+1, r24	; 0x01
	PORTF.OUTSET &= B8(11001111); //pins 4 and 5 to low (off)
    1124:	85 81       	ldd	r24, Z+5	; 0x05
    1126:	8f 7c       	andi	r24, 0xCF	; 207
    1128:	85 83       	std	Z+5, r24	; 0x05
		
	TCF1.CTRLA = 0x07; //enable; div1024
    112a:	e0 e4       	ldi	r30, 0x40	; 64
    112c:	fb e0       	ldi	r31, 0x0B	; 11
    112e:	87 e0       	ldi	r24, 0x07	; 7
    1130:	80 83       	st	Z, r24
	TCF1.CTRLB = 0x13; //Output Channel A enable; Single-slope PWM
    1132:	83 e1       	ldi	r24, 0x13	; 19
    1134:	81 83       	std	Z+1, r24	; 0x01
	TCF1.PER = 0x00FF; //Set the top of the counter to basically force 8 bit operation; we do this for speed when calling dimming functions in the future
    1136:	8f ef       	ldi	r24, 0xFF	; 255
    1138:	90 e0       	ldi	r25, 0x00	; 0
    113a:	86 a3       	lds	r24, 0x56
    113c:	97 a3       	lds	r25, 0x57
	TCF1.CCA = 0x0010; //Default to off-level brightness
    113e:	80 e1       	ldi	r24, 0x10	; 16
    1140:	90 e0       	ldi	r25, 0x00	; 0
    1142:	80 a7       	lds	r24, 0x70
    1144:	91 a7       	lds	r25, 0x71
}
    1146:	08 95       	ret

00001148 <init_uart>:
//= INITIALIZATION ROUTINES
//==================================

//Select which uart to initialize from the list of defined constants in the io.h
//Pass in Baud rate from a list of defined constants
void init_uart(USART_t* which, uint8_t baud_rate){
    1148:	fc 01       	movw	r30, r24
	//Config the PORT
		if (&(*which) == &USARTC0){
    114a:	88 e0       	ldi	r24, 0x08	; 8
    114c:	e0 3a       	cpi	r30, 0xA0	; 160
    114e:	f8 07       	cpc	r31, r24
    1150:	51 f4       	brne	.+20     	; 0x1166 <init_uart+0x1e>
			PORTC.DIRSET = B8(00001000); //TX pin as output
    1152:	a0 e4       	ldi	r26, 0x40	; 64
    1154:	b6 e0       	ldi	r27, 0x06	; 6
    1156:	88 e0       	ldi	r24, 0x08	; 8
    1158:	11 96       	adiw	r26, 0x01	; 1
    115a:	8c 93       	st	X, r24
    115c:	11 97       	sbiw	r26, 0x01	; 1
			PORTC.OUTSET = B8(00001000); //TX initial output value is high
    115e:	15 96       	adiw	r26, 0x05	; 5
    1160:	8c 93       	st	X, r24
    1162:	15 97       	sbiw	r26, 0x05	; 5
    1164:	61 c0       	rjmp	.+194    	; 0x1228 <init_uart+0xe0>
		}
		else if (&(*which) == &USARTC1) {
    1166:	88 e0       	ldi	r24, 0x08	; 8
    1168:	e0 3b       	cpi	r30, 0xB0	; 176
    116a:	f8 07       	cpc	r31, r24
    116c:	51 f4       	brne	.+20     	; 0x1182 <init_uart+0x3a>
			PORTC.DIRSET = B8(10000000); //TX pin as output
    116e:	a0 e4       	ldi	r26, 0x40	; 64
    1170:	b6 e0       	ldi	r27, 0x06	; 6
    1172:	80 e8       	ldi	r24, 0x80	; 128
    1174:	11 96       	adiw	r26, 0x01	; 1
    1176:	8c 93       	st	X, r24
    1178:	11 97       	sbiw	r26, 0x01	; 1
			PORTC.OUTSET = B8(10000000); //TX initial output value is high
    117a:	15 96       	adiw	r26, 0x05	; 5
    117c:	8c 93       	st	X, r24
    117e:	15 97       	sbiw	r26, 0x05	; 5
    1180:	53 c0       	rjmp	.+166    	; 0x1228 <init_uart+0xe0>
		}
		else if (&(*which) == &USARTD0) {
    1182:	89 e0       	ldi	r24, 0x09	; 9
    1184:	e0 3a       	cpi	r30, 0xA0	; 160
    1186:	f8 07       	cpc	r31, r24
    1188:	51 f4       	brne	.+20     	; 0x119e <init_uart+0x56>
			PORTD.DIRSET = B8(00001000); //TX pin as output
    118a:	a0 e6       	ldi	r26, 0x60	; 96
    118c:	b6 e0       	ldi	r27, 0x06	; 6
    118e:	88 e0       	ldi	r24, 0x08	; 8
    1190:	11 96       	adiw	r26, 0x01	; 1
    1192:	8c 93       	st	X, r24
    1194:	11 97       	sbiw	r26, 0x01	; 1
			PORTD.OUTSET = B8(00001000); //TX initial output value is high
    1196:	15 96       	adiw	r26, 0x05	; 5
    1198:	8c 93       	st	X, r24
    119a:	15 97       	sbiw	r26, 0x05	; 5
    119c:	45 c0       	rjmp	.+138    	; 0x1228 <init_uart+0xe0>
		}	
		else if (&(*which) == &USARTD1) {
    119e:	89 e0       	ldi	r24, 0x09	; 9
    11a0:	e0 3b       	cpi	r30, 0xB0	; 176
    11a2:	f8 07       	cpc	r31, r24
    11a4:	51 f4       	brne	.+20     	; 0x11ba <init_uart+0x72>
			PORTD.DIRSET = B8(10000000); //TX pin as output
    11a6:	a0 e6       	ldi	r26, 0x60	; 96
    11a8:	b6 e0       	ldi	r27, 0x06	; 6
    11aa:	80 e8       	ldi	r24, 0x80	; 128
    11ac:	11 96       	adiw	r26, 0x01	; 1
    11ae:	8c 93       	st	X, r24
    11b0:	11 97       	sbiw	r26, 0x01	; 1
			PORTD.OUTSET = B8(10000000); //TX initial output value is high
    11b2:	15 96       	adiw	r26, 0x05	; 5
    11b4:	8c 93       	st	X, r24
    11b6:	15 97       	sbiw	r26, 0x05	; 5
    11b8:	37 c0       	rjmp	.+110    	; 0x1228 <init_uart+0xe0>
		}
		else if (&(*which) == &USARTE0) {
    11ba:	8a e0       	ldi	r24, 0x0A	; 10
    11bc:	e0 3a       	cpi	r30, 0xA0	; 160
    11be:	f8 07       	cpc	r31, r24
    11c0:	51 f4       	brne	.+20     	; 0x11d6 <init_uart+0x8e>
			PORTE.DIRSET = B8(00001000); //TX pin as output
    11c2:	a0 e8       	ldi	r26, 0x80	; 128
    11c4:	b6 e0       	ldi	r27, 0x06	; 6
    11c6:	88 e0       	ldi	r24, 0x08	; 8
    11c8:	11 96       	adiw	r26, 0x01	; 1
    11ca:	8c 93       	st	X, r24
    11cc:	11 97       	sbiw	r26, 0x01	; 1
			PORTE.OUTSET = B8(00001000); //TX initial output value is high
    11ce:	15 96       	adiw	r26, 0x05	; 5
    11d0:	8c 93       	st	X, r24
    11d2:	15 97       	sbiw	r26, 0x05	; 5
    11d4:	29 c0       	rjmp	.+82     	; 0x1228 <init_uart+0xe0>
		}
		else if (&(*which) == &USARTE1) {
    11d6:	8a e0       	ldi	r24, 0x0A	; 10
    11d8:	e0 3b       	cpi	r30, 0xB0	; 176
    11da:	f8 07       	cpc	r31, r24
    11dc:	51 f4       	brne	.+20     	; 0x11f2 <init_uart+0xaa>
			PORTE.DIRSET = B8(10000000); //TX pin as output
    11de:	a0 e8       	ldi	r26, 0x80	; 128
    11e0:	b6 e0       	ldi	r27, 0x06	; 6
    11e2:	80 e8       	ldi	r24, 0x80	; 128
    11e4:	11 96       	adiw	r26, 0x01	; 1
    11e6:	8c 93       	st	X, r24
    11e8:	11 97       	sbiw	r26, 0x01	; 1
			PORTE.OUTSET = B8(10000000); //TX initial output value is high
    11ea:	15 96       	adiw	r26, 0x05	; 5
    11ec:	8c 93       	st	X, r24
    11ee:	15 97       	sbiw	r26, 0x05	; 5
    11f0:	1b c0       	rjmp	.+54     	; 0x1228 <init_uart+0xe0>
		}
		else if (&(*which) == &USARTF0) {
    11f2:	8b e0       	ldi	r24, 0x0B	; 11
    11f4:	e0 3a       	cpi	r30, 0xA0	; 160
    11f6:	f8 07       	cpc	r31, r24
    11f8:	51 f4       	brne	.+20     	; 0x120e <init_uart+0xc6>
			PORTF.DIRSET = B8(00001000); //TX pin as output
    11fa:	a0 ea       	ldi	r26, 0xA0	; 160
    11fc:	b6 e0       	ldi	r27, 0x06	; 6
    11fe:	88 e0       	ldi	r24, 0x08	; 8
    1200:	11 96       	adiw	r26, 0x01	; 1
    1202:	8c 93       	st	X, r24
    1204:	11 97       	sbiw	r26, 0x01	; 1
			PORTF.OUTSET = B8(00001000); //TX initial output value is high
    1206:	15 96       	adiw	r26, 0x05	; 5
    1208:	8c 93       	st	X, r24
    120a:	15 97       	sbiw	r26, 0x05	; 5
    120c:	0d c0       	rjmp	.+26     	; 0x1228 <init_uart+0xe0>
		}
		else if (&(*which) == &USARTF1) {
    120e:	8b e0       	ldi	r24, 0x0B	; 11
    1210:	e0 3b       	cpi	r30, 0xB0	; 176
    1212:	f8 07       	cpc	r31, r24
    1214:	49 f4       	brne	.+18     	; 0x1228 <init_uart+0xe0>
			PORTF.DIRSET = B8(10000000); //TX pin as output
    1216:	a0 ea       	ldi	r26, 0xA0	; 160
    1218:	b6 e0       	ldi	r27, 0x06	; 6
    121a:	80 e8       	ldi	r24, 0x80	; 128
    121c:	11 96       	adiw	r26, 0x01	; 1
    121e:	8c 93       	st	X, r24
    1220:	11 97       	sbiw	r26, 0x01	; 1
			PORTF.OUTSET = B8(10000000); //TX initial output value is high
    1222:	15 96       	adiw	r26, 0x05	; 5
    1224:	8c 93       	st	X, r24
    1226:	15 97       	sbiw	r26, 0x05	; 5
		}
		else {
		}
	//Set baud rate
		switch(baud_rate){
    1228:	61 30       	cpi	r22, 0x01	; 1
    122a:	39 f0       	breq	.+14     	; 0x123a <init_uart+0xf2>
    122c:	62 30       	cpi	r22, 0x02	; 2
    122e:	51 f4       	brne	.+20     	; 0x1244 <init_uart+0xfc>
		case BAUD_38400:
			//BSEL = 0xCC5; BSCALE = -6; error = 0.01%
			which->BAUDCTRLB = 0xAC;
    1230:	8c ea       	ldi	r24, 0xAC	; 172
    1232:	87 83       	std	Z+7, r24	; 0x07
			which->BAUDCTRLA = 0xC5;
    1234:	85 ec       	ldi	r24, 0xC5	; 197
    1236:	86 83       	std	Z+6, r24	; 0x06
			break;
    1238:	09 c0       	rjmp	.+18     	; 0x124c <init_uart+0x104>
		case BAUD_57600:
			//BSEL = 0x86E; BSCALE = -6; error = 0.01%
			which->BAUDCTRLB = 0xA8;
    123a:	88 ea       	ldi	r24, 0xA8	; 168
    123c:	87 83       	std	Z+7, r24	; 0x07
			which->BAUDCTRLA = 0x6E;
    123e:	8e e6       	ldi	r24, 0x6E	; 110
    1240:	86 83       	std	Z+6, r24	; 0x06
			break;
    1242:	04 c0       	rjmp	.+8      	; 0x124c <init_uart+0x104>
		case BAUD_115200:
		default:
			//BSEL = 0x417; BSCALE = -6; error = 0.01%
			//BSEL = 0x453; BSCALE = -6; fbaud = 115.212k @ 32MHz
			which->BAUDCTRLB = 0xA4; //write to BAUDCTRLB first, updated on write to A
    1244:	84 ea       	ldi	r24, 0xA4	; 164
    1246:	87 83       	std	Z+7, r24	; 0x07
			which->BAUDCTRLA = 0x2E; //0x17; = 8.44uS = 118kHz		
    1248:	8e e2       	ldi	r24, 0x2E	; 46
    124a:	86 83       	std	Z+6, r24	; 0x06
		}
	//Config USART Module
		which->CTRLA = 0x00; //Current driver does not enable any interrupts
    124c:	13 82       	std	Z+3, r1	; 0x03
		which->CTRLB = B8(00011000); //Enable Rx and TX; Do not use double speed mode
    124e:	88 e1       	ldi	r24, 0x18	; 24
    1250:	84 83       	std	Z+4, r24	; 0x04
		which->CTRLC = B8(00000011); //uart Mode; Use N-8-1 frame configuration
    1252:	83 e0       	ldi	r24, 0x03	; 3
    1254:	85 83       	std	Z+5, r24	; 0x05
	//
}
    1256:	08 95       	ret

00001258 <uart_send_byte>:
//= DISPLAY (BLOCKING) FUNCTIONS
//==================================


//Sends one byte; Spin-lock until UART is ready to transmit (BE CAREFUL!)
void uart_send_byte( USART_t* which, unsigned char dataB){
    1258:	fc 01       	movw	r30, r24
	while((which->STATUS & USART_DREIF_bm) == 0x00); //wait until the transmit buffer is ready to receive new data (DREIF flag is 1 when empty)
    125a:	81 81       	ldd	r24, Z+1	; 0x01
    125c:	85 ff       	sbrs	r24, 5
    125e:	fd cf       	rjmp	.-6      	; 0x125a <uart_send_byte+0x2>
	which->DATA = dataB;	
    1260:	60 83       	st	Z, r22
}
    1262:	08 95       	ret

00001264 <uart_send_string>:

//Sends an entire string (blocking)
void uart_send_string(USART_t* which, char* theString){
    1264:	cf 92       	push	r12
    1266:	df 92       	push	r13
    1268:	ef 92       	push	r14
    126a:	ff 92       	push	r15
    126c:	0f 93       	push	r16
    126e:	1f 93       	push	r17
    1270:	cf 93       	push	r28
    1272:	df 93       	push	r29
    1274:	6c 01       	movw	r12, r24
	uint16_t length = (uint16_t)strlen(theString);
    1276:	e6 2f       	mov	r30, r22
    1278:	f7 2f       	mov	r31, r23
    127a:	ef 01       	movw	r28, r30
    127c:	09 90       	ld	r0, Y+
    127e:	00 20       	and	r0, r0
    1280:	e9 f7       	brne	.-6      	; 0x127c <uart_send_string+0x18>
    1282:	21 97       	sbiw	r28, 0x01	; 1
    1284:	ce 1b       	sub	r28, r30
    1286:	df 0b       	sbc	r29, r31
	for (uint16_t i=0; i<length; i++){uart_send_byte(which, theString[i]);}	
    1288:	79 f0       	breq	.+30     	; 0x12a8 <uart_send_string+0x44>
    128a:	e6 2e       	mov	r14, r22
    128c:	f7 2e       	mov	r15, r23
    128e:	00 e0       	ldi	r16, 0x00	; 0
    1290:	10 e0       	ldi	r17, 0x00	; 0
    1292:	f7 01       	movw	r30, r14
    1294:	61 91       	ld	r22, Z+
    1296:	7f 01       	movw	r14, r30
    1298:	c6 01       	movw	r24, r12
    129a:	0e 94 2c 09 	call	0x1258	; 0x1258 <uart_send_byte>
    129e:	0f 5f       	subi	r16, 0xFF	; 255
    12a0:	1f 4f       	sbci	r17, 0xFF	; 255
    12a2:	0c 17       	cp	r16, r28
    12a4:	1d 07       	cpc	r17, r29
    12a6:	a9 f7       	brne	.-22     	; 0x1292 <uart_send_string+0x2e>
}
    12a8:	df 91       	pop	r29
    12aa:	cf 91       	pop	r28
    12ac:	1f 91       	pop	r17
    12ae:	0f 91       	pop	r16
    12b0:	ff 90       	pop	r15
    12b2:	ef 90       	pop	r14
    12b4:	df 90       	pop	r13
    12b6:	cf 90       	pop	r12
    12b8:	08 95       	ret

000012ba <uart_send_BIN4>:
	
//Most Significant Bit first
void uart_send_BIN4(USART_t* which, uint8_t lowb){
    12ba:	cf 93       	push	r28
    12bc:	df 93       	push	r29
    12be:	ec 01       	movw	r28, r24
	switch(lowb){
    12c0:	67 30       	cpi	r22, 0x07	; 7
    12c2:	09 f4       	brne	.+2      	; 0x12c6 <uart_send_BIN4+0xc>
    12c4:	9d c0       	rjmp	.+314    	; 0x1400 <uart_send_BIN4+0x146>
    12c6:	68 30       	cpi	r22, 0x08	; 8
    12c8:	90 f4       	brcc	.+36     	; 0x12ee <uart_send_BIN4+0x34>
    12ca:	63 30       	cpi	r22, 0x03	; 3
    12cc:	09 f4       	brne	.+2      	; 0x12d0 <uart_send_BIN4+0x16>
    12ce:	58 c0       	rjmp	.+176    	; 0x1380 <uart_send_BIN4+0xc6>
    12d0:	64 30       	cpi	r22, 0x04	; 4
    12d2:	30 f4       	brcc	.+12     	; 0x12e0 <uart_send_BIN4+0x26>
    12d4:	61 30       	cpi	r22, 0x01	; 1
    12d6:	a1 f1       	breq	.+104    	; 0x1340 <uart_send_BIN4+0x86>
    12d8:	62 30       	cpi	r22, 0x02	; 2
    12da:	08 f0       	brcs	.+2      	; 0x12de <uart_send_BIN4+0x24>
    12dc:	41 c0       	rjmp	.+130    	; 0x1360 <uart_send_BIN4+0xa6>
    12de:	20 c0       	rjmp	.+64     	; 0x1320 <uart_send_BIN4+0x66>
    12e0:	65 30       	cpi	r22, 0x05	; 5
    12e2:	09 f4       	brne	.+2      	; 0x12e6 <uart_send_BIN4+0x2c>
    12e4:	6d c0       	rjmp	.+218    	; 0x13c0 <uart_send_BIN4+0x106>
    12e6:	66 30       	cpi	r22, 0x06	; 6
    12e8:	08 f0       	brcs	.+2      	; 0x12ec <uart_send_BIN4+0x32>
    12ea:	7a c0       	rjmp	.+244    	; 0x13e0 <uart_send_BIN4+0x126>
    12ec:	59 c0       	rjmp	.+178    	; 0x13a0 <uart_send_BIN4+0xe6>
    12ee:	6b 30       	cpi	r22, 0x0B	; 11
    12f0:	09 f4       	brne	.+2      	; 0x12f4 <uart_send_BIN4+0x3a>
    12f2:	c6 c0       	rjmp	.+396    	; 0x1480 <uart_send_BIN4+0x1c6>
    12f4:	6c 30       	cpi	r22, 0x0C	; 12
    12f6:	38 f4       	brcc	.+14     	; 0x1306 <uart_send_BIN4+0x4c>
    12f8:	69 30       	cpi	r22, 0x09	; 9
    12fa:	09 f4       	brne	.+2      	; 0x12fe <uart_send_BIN4+0x44>
    12fc:	a1 c0       	rjmp	.+322    	; 0x1440 <uart_send_BIN4+0x186>
    12fe:	6a 30       	cpi	r22, 0x0A	; 10
    1300:	08 f0       	brcs	.+2      	; 0x1304 <uart_send_BIN4+0x4a>
    1302:	ae c0       	rjmp	.+348    	; 0x1460 <uart_send_BIN4+0x1a6>
    1304:	8d c0       	rjmp	.+282    	; 0x1420 <uart_send_BIN4+0x166>
    1306:	6d 30       	cpi	r22, 0x0D	; 13
    1308:	09 f4       	brne	.+2      	; 0x130c <uart_send_BIN4+0x52>
    130a:	da c0       	rjmp	.+436    	; 0x14c0 <uart_send_BIN4+0x206>
    130c:	6d 30       	cpi	r22, 0x0D	; 13
    130e:	08 f4       	brcc	.+2      	; 0x1312 <uart_send_BIN4+0x58>
    1310:	c7 c0       	rjmp	.+398    	; 0x14a0 <uart_send_BIN4+0x1e6>
    1312:	6e 30       	cpi	r22, 0x0E	; 14
    1314:	09 f4       	brne	.+2      	; 0x1318 <uart_send_BIN4+0x5e>
    1316:	e4 c0       	rjmp	.+456    	; 0x14e0 <uart_send_BIN4+0x226>
    1318:	6f 30       	cpi	r22, 0x0F	; 15
    131a:	09 f0       	breq	.+2      	; 0x131e <uart_send_BIN4+0x64>
    131c:	00 c1       	rjmp	.+512    	; 0x151e <uart_send_BIN4+0x264>
    131e:	f0 c0       	rjmp	.+480    	; 0x1500 <uart_send_BIN4+0x246>
	case(0):
		uart_send_byte(which,'0');
    1320:	60 e3       	ldi	r22, 0x30	; 48
    1322:	0e 94 2c 09 	call	0x1258	; 0x1258 <uart_send_byte>
		uart_send_byte(which,'0');
    1326:	ce 01       	movw	r24, r28
    1328:	60 e3       	ldi	r22, 0x30	; 48
    132a:	0e 94 2c 09 	call	0x1258	; 0x1258 <uart_send_byte>
		uart_send_byte(which,'0');
    132e:	ce 01       	movw	r24, r28
    1330:	60 e3       	ldi	r22, 0x30	; 48
    1332:	0e 94 2c 09 	call	0x1258	; 0x1258 <uart_send_byte>
		uart_send_byte(which,'0');
    1336:	ce 01       	movw	r24, r28
    1338:	60 e3       	ldi	r22, 0x30	; 48
    133a:	0e 94 2c 09 	call	0x1258	; 0x1258 <uart_send_byte>
		break;
    133e:	ef c0       	rjmp	.+478    	; 0x151e <uart_send_BIN4+0x264>
	case(1):
		uart_send_byte(which,'0');
    1340:	60 e3       	ldi	r22, 0x30	; 48
    1342:	0e 94 2c 09 	call	0x1258	; 0x1258 <uart_send_byte>
		uart_send_byte(which,'0');
    1346:	ce 01       	movw	r24, r28
    1348:	60 e3       	ldi	r22, 0x30	; 48
    134a:	0e 94 2c 09 	call	0x1258	; 0x1258 <uart_send_byte>
		uart_send_byte(which,'0');
    134e:	ce 01       	movw	r24, r28
    1350:	60 e3       	ldi	r22, 0x30	; 48
    1352:	0e 94 2c 09 	call	0x1258	; 0x1258 <uart_send_byte>
		uart_send_byte(which,'1');
    1356:	ce 01       	movw	r24, r28
    1358:	61 e3       	ldi	r22, 0x31	; 49
    135a:	0e 94 2c 09 	call	0x1258	; 0x1258 <uart_send_byte>
		break;
    135e:	df c0       	rjmp	.+446    	; 0x151e <uart_send_BIN4+0x264>
	case(2):
		uart_send_byte(which,'0');
    1360:	60 e3       	ldi	r22, 0x30	; 48
    1362:	0e 94 2c 09 	call	0x1258	; 0x1258 <uart_send_byte>
		uart_send_byte(which,'0');
    1366:	ce 01       	movw	r24, r28
    1368:	60 e3       	ldi	r22, 0x30	; 48
    136a:	0e 94 2c 09 	call	0x1258	; 0x1258 <uart_send_byte>
		uart_send_byte(which,'1');
    136e:	ce 01       	movw	r24, r28
    1370:	61 e3       	ldi	r22, 0x31	; 49
    1372:	0e 94 2c 09 	call	0x1258	; 0x1258 <uart_send_byte>
		uart_send_byte(which,'0');
    1376:	ce 01       	movw	r24, r28
    1378:	60 e3       	ldi	r22, 0x30	; 48
    137a:	0e 94 2c 09 	call	0x1258	; 0x1258 <uart_send_byte>
		break;
    137e:	cf c0       	rjmp	.+414    	; 0x151e <uart_send_BIN4+0x264>
	case(3):
		uart_send_byte(which,'0');
    1380:	60 e3       	ldi	r22, 0x30	; 48
    1382:	0e 94 2c 09 	call	0x1258	; 0x1258 <uart_send_byte>
		uart_send_byte(which,'0');
    1386:	ce 01       	movw	r24, r28
    1388:	60 e3       	ldi	r22, 0x30	; 48
    138a:	0e 94 2c 09 	call	0x1258	; 0x1258 <uart_send_byte>
		uart_send_byte(which,'1');
    138e:	ce 01       	movw	r24, r28
    1390:	61 e3       	ldi	r22, 0x31	; 49
    1392:	0e 94 2c 09 	call	0x1258	; 0x1258 <uart_send_byte>
		uart_send_byte(which,'1');
    1396:	ce 01       	movw	r24, r28
    1398:	61 e3       	ldi	r22, 0x31	; 49
    139a:	0e 94 2c 09 	call	0x1258	; 0x1258 <uart_send_byte>
		break;
    139e:	bf c0       	rjmp	.+382    	; 0x151e <uart_send_BIN4+0x264>
	case(4):
		uart_send_byte(which,'0');
    13a0:	60 e3       	ldi	r22, 0x30	; 48
    13a2:	0e 94 2c 09 	call	0x1258	; 0x1258 <uart_send_byte>
		uart_send_byte(which,'1');
    13a6:	ce 01       	movw	r24, r28
    13a8:	61 e3       	ldi	r22, 0x31	; 49
    13aa:	0e 94 2c 09 	call	0x1258	; 0x1258 <uart_send_byte>
		uart_send_byte(which,'0');
    13ae:	ce 01       	movw	r24, r28
    13b0:	60 e3       	ldi	r22, 0x30	; 48
    13b2:	0e 94 2c 09 	call	0x1258	; 0x1258 <uart_send_byte>
		uart_send_byte(which,'0');
    13b6:	ce 01       	movw	r24, r28
    13b8:	60 e3       	ldi	r22, 0x30	; 48
    13ba:	0e 94 2c 09 	call	0x1258	; 0x1258 <uart_send_byte>
		break;
    13be:	af c0       	rjmp	.+350    	; 0x151e <uart_send_BIN4+0x264>
	case(5):
		uart_send_byte(which,'0');
    13c0:	60 e3       	ldi	r22, 0x30	; 48
    13c2:	0e 94 2c 09 	call	0x1258	; 0x1258 <uart_send_byte>
		uart_send_byte(which,'1');
    13c6:	ce 01       	movw	r24, r28
    13c8:	61 e3       	ldi	r22, 0x31	; 49
    13ca:	0e 94 2c 09 	call	0x1258	; 0x1258 <uart_send_byte>
		uart_send_byte(which,'0');
    13ce:	ce 01       	movw	r24, r28
    13d0:	60 e3       	ldi	r22, 0x30	; 48
    13d2:	0e 94 2c 09 	call	0x1258	; 0x1258 <uart_send_byte>
		uart_send_byte(which,'1');
    13d6:	ce 01       	movw	r24, r28
    13d8:	61 e3       	ldi	r22, 0x31	; 49
    13da:	0e 94 2c 09 	call	0x1258	; 0x1258 <uart_send_byte>
		break;
    13de:	9f c0       	rjmp	.+318    	; 0x151e <uart_send_BIN4+0x264>
	case(6):
		uart_send_byte(which,'0');
    13e0:	60 e3       	ldi	r22, 0x30	; 48
    13e2:	0e 94 2c 09 	call	0x1258	; 0x1258 <uart_send_byte>
		uart_send_byte(which,'1');
    13e6:	ce 01       	movw	r24, r28
    13e8:	61 e3       	ldi	r22, 0x31	; 49
    13ea:	0e 94 2c 09 	call	0x1258	; 0x1258 <uart_send_byte>
		uart_send_byte(which,'1');
    13ee:	ce 01       	movw	r24, r28
    13f0:	61 e3       	ldi	r22, 0x31	; 49
    13f2:	0e 94 2c 09 	call	0x1258	; 0x1258 <uart_send_byte>
		uart_send_byte(which,'0');
    13f6:	ce 01       	movw	r24, r28
    13f8:	60 e3       	ldi	r22, 0x30	; 48
    13fa:	0e 94 2c 09 	call	0x1258	; 0x1258 <uart_send_byte>
		break;
    13fe:	8f c0       	rjmp	.+286    	; 0x151e <uart_send_BIN4+0x264>
	case(7):
		uart_send_byte(which,'0');
    1400:	60 e3       	ldi	r22, 0x30	; 48
    1402:	0e 94 2c 09 	call	0x1258	; 0x1258 <uart_send_byte>
		uart_send_byte(which,'1');
    1406:	ce 01       	movw	r24, r28
    1408:	61 e3       	ldi	r22, 0x31	; 49
    140a:	0e 94 2c 09 	call	0x1258	; 0x1258 <uart_send_byte>
		uart_send_byte(which,'1');
    140e:	ce 01       	movw	r24, r28
    1410:	61 e3       	ldi	r22, 0x31	; 49
    1412:	0e 94 2c 09 	call	0x1258	; 0x1258 <uart_send_byte>
		uart_send_byte(which,'1');
    1416:	ce 01       	movw	r24, r28
    1418:	61 e3       	ldi	r22, 0x31	; 49
    141a:	0e 94 2c 09 	call	0x1258	; 0x1258 <uart_send_byte>
		break;
    141e:	7f c0       	rjmp	.+254    	; 0x151e <uart_send_BIN4+0x264>
	case(8):
		uart_send_byte(which,'1');
    1420:	61 e3       	ldi	r22, 0x31	; 49
    1422:	0e 94 2c 09 	call	0x1258	; 0x1258 <uart_send_byte>
		uart_send_byte(which,'0');
    1426:	ce 01       	movw	r24, r28
    1428:	60 e3       	ldi	r22, 0x30	; 48
    142a:	0e 94 2c 09 	call	0x1258	; 0x1258 <uart_send_byte>
		uart_send_byte(which,'0');
    142e:	ce 01       	movw	r24, r28
    1430:	60 e3       	ldi	r22, 0x30	; 48
    1432:	0e 94 2c 09 	call	0x1258	; 0x1258 <uart_send_byte>
		uart_send_byte(which,'0');
    1436:	ce 01       	movw	r24, r28
    1438:	60 e3       	ldi	r22, 0x30	; 48
    143a:	0e 94 2c 09 	call	0x1258	; 0x1258 <uart_send_byte>
		break;
    143e:	6f c0       	rjmp	.+222    	; 0x151e <uart_send_BIN4+0x264>
	case(9):
		uart_send_byte(which,'1');
    1440:	61 e3       	ldi	r22, 0x31	; 49
    1442:	0e 94 2c 09 	call	0x1258	; 0x1258 <uart_send_byte>
		uart_send_byte(which,'0');
    1446:	ce 01       	movw	r24, r28
    1448:	60 e3       	ldi	r22, 0x30	; 48
    144a:	0e 94 2c 09 	call	0x1258	; 0x1258 <uart_send_byte>
		uart_send_byte(which,'0');
    144e:	ce 01       	movw	r24, r28
    1450:	60 e3       	ldi	r22, 0x30	; 48
    1452:	0e 94 2c 09 	call	0x1258	; 0x1258 <uart_send_byte>
		uart_send_byte(which,'1');
    1456:	ce 01       	movw	r24, r28
    1458:	61 e3       	ldi	r22, 0x31	; 49
    145a:	0e 94 2c 09 	call	0x1258	; 0x1258 <uart_send_byte>
		break;
    145e:	5f c0       	rjmp	.+190    	; 0x151e <uart_send_BIN4+0x264>
	case(10):
		uart_send_byte(which,'1');
    1460:	61 e3       	ldi	r22, 0x31	; 49
    1462:	0e 94 2c 09 	call	0x1258	; 0x1258 <uart_send_byte>
		uart_send_byte(which,'0');
    1466:	ce 01       	movw	r24, r28
    1468:	60 e3       	ldi	r22, 0x30	; 48
    146a:	0e 94 2c 09 	call	0x1258	; 0x1258 <uart_send_byte>
		uart_send_byte(which,'1');
    146e:	ce 01       	movw	r24, r28
    1470:	61 e3       	ldi	r22, 0x31	; 49
    1472:	0e 94 2c 09 	call	0x1258	; 0x1258 <uart_send_byte>
		uart_send_byte(which,'0');
    1476:	ce 01       	movw	r24, r28
    1478:	60 e3       	ldi	r22, 0x30	; 48
    147a:	0e 94 2c 09 	call	0x1258	; 0x1258 <uart_send_byte>
		break;
    147e:	4f c0       	rjmp	.+158    	; 0x151e <uart_send_BIN4+0x264>
	case(11):
		uart_send_byte(which,'1');
    1480:	61 e3       	ldi	r22, 0x31	; 49
    1482:	0e 94 2c 09 	call	0x1258	; 0x1258 <uart_send_byte>
		uart_send_byte(which,'0');
    1486:	ce 01       	movw	r24, r28
    1488:	60 e3       	ldi	r22, 0x30	; 48
    148a:	0e 94 2c 09 	call	0x1258	; 0x1258 <uart_send_byte>
		uart_send_byte(which,'1');
    148e:	ce 01       	movw	r24, r28
    1490:	61 e3       	ldi	r22, 0x31	; 49
    1492:	0e 94 2c 09 	call	0x1258	; 0x1258 <uart_send_byte>
		uart_send_byte(which,'1');
    1496:	ce 01       	movw	r24, r28
    1498:	61 e3       	ldi	r22, 0x31	; 49
    149a:	0e 94 2c 09 	call	0x1258	; 0x1258 <uart_send_byte>
		break;
    149e:	3f c0       	rjmp	.+126    	; 0x151e <uart_send_BIN4+0x264>
	case(12):
		uart_send_byte(which,'1');
    14a0:	61 e3       	ldi	r22, 0x31	; 49
    14a2:	0e 94 2c 09 	call	0x1258	; 0x1258 <uart_send_byte>
		uart_send_byte(which,'1');
    14a6:	ce 01       	movw	r24, r28
    14a8:	61 e3       	ldi	r22, 0x31	; 49
    14aa:	0e 94 2c 09 	call	0x1258	; 0x1258 <uart_send_byte>
		uart_send_byte(which,'0');
    14ae:	ce 01       	movw	r24, r28
    14b0:	60 e3       	ldi	r22, 0x30	; 48
    14b2:	0e 94 2c 09 	call	0x1258	; 0x1258 <uart_send_byte>
		uart_send_byte(which,'0');
    14b6:	ce 01       	movw	r24, r28
    14b8:	60 e3       	ldi	r22, 0x30	; 48
    14ba:	0e 94 2c 09 	call	0x1258	; 0x1258 <uart_send_byte>
		break;
    14be:	2f c0       	rjmp	.+94     	; 0x151e <uart_send_BIN4+0x264>
	case(13):
		uart_send_byte(which,'1');
    14c0:	61 e3       	ldi	r22, 0x31	; 49
    14c2:	0e 94 2c 09 	call	0x1258	; 0x1258 <uart_send_byte>
		uart_send_byte(which,'1');
    14c6:	ce 01       	movw	r24, r28
    14c8:	61 e3       	ldi	r22, 0x31	; 49
    14ca:	0e 94 2c 09 	call	0x1258	; 0x1258 <uart_send_byte>
		uart_send_byte(which,'0');
    14ce:	ce 01       	movw	r24, r28
    14d0:	60 e3       	ldi	r22, 0x30	; 48
    14d2:	0e 94 2c 09 	call	0x1258	; 0x1258 <uart_send_byte>
		uart_send_byte(which,'1');
    14d6:	ce 01       	movw	r24, r28
    14d8:	61 e3       	ldi	r22, 0x31	; 49
    14da:	0e 94 2c 09 	call	0x1258	; 0x1258 <uart_send_byte>
		break;
    14de:	1f c0       	rjmp	.+62     	; 0x151e <uart_send_BIN4+0x264>
	case(14):
		uart_send_byte(which,'1');
    14e0:	61 e3       	ldi	r22, 0x31	; 49
    14e2:	0e 94 2c 09 	call	0x1258	; 0x1258 <uart_send_byte>
		uart_send_byte(which,'1');
    14e6:	ce 01       	movw	r24, r28
    14e8:	61 e3       	ldi	r22, 0x31	; 49
    14ea:	0e 94 2c 09 	call	0x1258	; 0x1258 <uart_send_byte>
		uart_send_byte(which,'1');
    14ee:	ce 01       	movw	r24, r28
    14f0:	61 e3       	ldi	r22, 0x31	; 49
    14f2:	0e 94 2c 09 	call	0x1258	; 0x1258 <uart_send_byte>
		uart_send_byte(which,'0');
    14f6:	ce 01       	movw	r24, r28
    14f8:	60 e3       	ldi	r22, 0x30	; 48
    14fa:	0e 94 2c 09 	call	0x1258	; 0x1258 <uart_send_byte>
		break;
    14fe:	0f c0       	rjmp	.+30     	; 0x151e <uart_send_BIN4+0x264>
	case(15):
		uart_send_byte(which,'1');
    1500:	61 e3       	ldi	r22, 0x31	; 49
    1502:	0e 94 2c 09 	call	0x1258	; 0x1258 <uart_send_byte>
		uart_send_byte(which,'1');
    1506:	ce 01       	movw	r24, r28
    1508:	61 e3       	ldi	r22, 0x31	; 49
    150a:	0e 94 2c 09 	call	0x1258	; 0x1258 <uart_send_byte>
		uart_send_byte(which,'1');
    150e:	ce 01       	movw	r24, r28
    1510:	61 e3       	ldi	r22, 0x31	; 49
    1512:	0e 94 2c 09 	call	0x1258	; 0x1258 <uart_send_byte>
		uart_send_byte(which,'1');
    1516:	ce 01       	movw	r24, r28
    1518:	61 e3       	ldi	r22, 0x31	; 49
    151a:	0e 94 2c 09 	call	0x1258	; 0x1258 <uart_send_byte>
		break;
	}	
}
    151e:	df 91       	pop	r29
    1520:	cf 91       	pop	r28
    1522:	08 95       	ret

00001524 <uart_send_BIN8>:

//Sends out tosend as ASCII text in 'b01101010' format
void uart_send_BIN8(USART_t* which, uint8_t lowb){
    1524:	1f 93       	push	r17
    1526:	cf 93       	push	r28
    1528:	df 93       	push	r29
    152a:	ec 01       	movw	r28, r24
    152c:	16 2f       	mov	r17, r22
	uart_send_byte(which,'b');
    152e:	62 e6       	ldi	r22, 0x62	; 98
    1530:	0e 94 2c 09 	call	0x1258	; 0x1258 <uart_send_byte>
	uart_send_BIN4(which, lowb>>4);
    1534:	61 2f       	mov	r22, r17
    1536:	62 95       	swap	r22
    1538:	6f 70       	andi	r22, 0x0F	; 15
    153a:	ce 01       	movw	r24, r28
    153c:	0e 94 5d 09 	call	0x12ba	; 0x12ba <uart_send_BIN4>
	uart_send_BIN4(which, lowb & 0x0F);
    1540:	61 2f       	mov	r22, r17
    1542:	6f 70       	andi	r22, 0x0F	; 15
    1544:	ce 01       	movw	r24, r28
    1546:	0e 94 5d 09 	call	0x12ba	; 0x12ba <uart_send_BIN4>
}
    154a:	df 91       	pop	r29
    154c:	cf 91       	pop	r28
    154e:	1f 91       	pop	r17
    1550:	08 95       	ret

00001552 <uart_send_HEX4>:
	
void uart_send_HEX4(USART_t* which, uint8_t lowb){
	switch(lowb){
    1552:	67 30       	cpi	r22, 0x07	; 7
    1554:	09 f4       	brne	.+2      	; 0x1558 <uart_send_HEX4+0x6>
    1556:	3f c0       	rjmp	.+126    	; 0x15d6 <uart_send_HEX4+0x84>
    1558:	68 30       	cpi	r22, 0x08	; 8
    155a:	70 f4       	brcc	.+28     	; 0x1578 <uart_send_HEX4+0x26>
    155c:	63 30       	cpi	r22, 0x03	; 3
    155e:	59 f1       	breq	.+86     	; 0x15b6 <uart_send_HEX4+0x64>
    1560:	64 30       	cpi	r22, 0x04	; 4
    1562:	28 f4       	brcc	.+10     	; 0x156e <uart_send_HEX4+0x1c>
    1564:	61 30       	cpi	r22, 0x01	; 1
    1566:	f9 f0       	breq	.+62     	; 0x15a6 <uart_send_HEX4+0x54>
    1568:	62 30       	cpi	r22, 0x02	; 2
    156a:	08 f5       	brcc	.+66     	; 0x15ae <uart_send_HEX4+0x5c>
    156c:	18 c0       	rjmp	.+48     	; 0x159e <uart_send_HEX4+0x4c>
    156e:	65 30       	cpi	r22, 0x05	; 5
    1570:	51 f1       	breq	.+84     	; 0x15c6 <uart_send_HEX4+0x74>
    1572:	66 30       	cpi	r22, 0x06	; 6
    1574:	60 f5       	brcc	.+88     	; 0x15ce <uart_send_HEX4+0x7c>
    1576:	23 c0       	rjmp	.+70     	; 0x15be <uart_send_HEX4+0x6c>
    1578:	6b 30       	cpi	r22, 0x0B	; 11
    157a:	e9 f1       	breq	.+122    	; 0x15f6 <uart_send_HEX4+0xa4>
    157c:	6c 30       	cpi	r22, 0x0C	; 12
    157e:	28 f4       	brcc	.+10     	; 0x158a <uart_send_HEX4+0x38>
    1580:	69 30       	cpi	r22, 0x09	; 9
    1582:	89 f1       	breq	.+98     	; 0x15e6 <uart_send_HEX4+0x94>
    1584:	6a 30       	cpi	r22, 0x0A	; 10
    1586:	98 f5       	brcc	.+102    	; 0x15ee <uart_send_HEX4+0x9c>
    1588:	2a c0       	rjmp	.+84     	; 0x15de <uart_send_HEX4+0x8c>
    158a:	6d 30       	cpi	r22, 0x0D	; 13
    158c:	e1 f1       	breq	.+120    	; 0x1606 <uart_send_HEX4+0xb4>
    158e:	6d 30       	cpi	r22, 0x0D	; 13
    1590:	b0 f1       	brcs	.+108    	; 0x15fe <uart_send_HEX4+0xac>
    1592:	6e 30       	cpi	r22, 0x0E	; 14
    1594:	e1 f1       	breq	.+120    	; 0x160e <uart_send_HEX4+0xbc>
    1596:	6f 30       	cpi	r22, 0x0F	; 15
    1598:	09 f0       	breq	.+2      	; 0x159c <uart_send_HEX4+0x4a>
    159a:	40 c0       	rjmp	.+128    	; 0x161c <uart_send_HEX4+0xca>
    159c:	3c c0       	rjmp	.+120    	; 0x1616 <uart_send_HEX4+0xc4>
	case(0):
		uart_send_byte( which, '0');
    159e:	60 e3       	ldi	r22, 0x30	; 48
    15a0:	0e 94 2c 09 	call	0x1258	; 0x1258 <uart_send_byte>
		break;
    15a4:	08 95       	ret
	case(1):
		uart_send_byte( which, '1');
    15a6:	61 e3       	ldi	r22, 0x31	; 49
    15a8:	0e 94 2c 09 	call	0x1258	; 0x1258 <uart_send_byte>
		break;
    15ac:	08 95       	ret
	case(2):
		uart_send_byte( which, '2');
    15ae:	62 e3       	ldi	r22, 0x32	; 50
    15b0:	0e 94 2c 09 	call	0x1258	; 0x1258 <uart_send_byte>
		break;
    15b4:	08 95       	ret
	case(3):
		uart_send_byte( which, '3');
    15b6:	63 e3       	ldi	r22, 0x33	; 51
    15b8:	0e 94 2c 09 	call	0x1258	; 0x1258 <uart_send_byte>
		break;
    15bc:	08 95       	ret
	case(4):
		uart_send_byte( which, '4');
    15be:	64 e3       	ldi	r22, 0x34	; 52
    15c0:	0e 94 2c 09 	call	0x1258	; 0x1258 <uart_send_byte>
		break;
    15c4:	08 95       	ret
	case(5):
		uart_send_byte( which, '5');
    15c6:	65 e3       	ldi	r22, 0x35	; 53
    15c8:	0e 94 2c 09 	call	0x1258	; 0x1258 <uart_send_byte>
		break;
    15cc:	08 95       	ret
	case(6):
		uart_send_byte( which, '6');
    15ce:	66 e3       	ldi	r22, 0x36	; 54
    15d0:	0e 94 2c 09 	call	0x1258	; 0x1258 <uart_send_byte>
		break;
    15d4:	08 95       	ret
	case(7):
		uart_send_byte( which, '7');
    15d6:	67 e3       	ldi	r22, 0x37	; 55
    15d8:	0e 94 2c 09 	call	0x1258	; 0x1258 <uart_send_byte>
		break;
    15dc:	08 95       	ret
	case(8):
		uart_send_byte( which, '8');
    15de:	68 e3       	ldi	r22, 0x38	; 56
    15e0:	0e 94 2c 09 	call	0x1258	; 0x1258 <uart_send_byte>
		break;
    15e4:	08 95       	ret
	case(9):
		uart_send_byte( which, '9');
    15e6:	69 e3       	ldi	r22, 0x39	; 57
    15e8:	0e 94 2c 09 	call	0x1258	; 0x1258 <uart_send_byte>
		break;
    15ec:	08 95       	ret
	case(10):
		uart_send_byte( which, 'A');
    15ee:	61 e4       	ldi	r22, 0x41	; 65
    15f0:	0e 94 2c 09 	call	0x1258	; 0x1258 <uart_send_byte>
		break;
    15f4:	08 95       	ret
	case(11):
		uart_send_byte( which, 'B');
    15f6:	62 e4       	ldi	r22, 0x42	; 66
    15f8:	0e 94 2c 09 	call	0x1258	; 0x1258 <uart_send_byte>
		break;
    15fc:	08 95       	ret
	case(12):
		uart_send_byte( which, 'C');
    15fe:	63 e4       	ldi	r22, 0x43	; 67
    1600:	0e 94 2c 09 	call	0x1258	; 0x1258 <uart_send_byte>
		break;
    1604:	08 95       	ret
	case(13):
		uart_send_byte( which, 'D');
    1606:	64 e4       	ldi	r22, 0x44	; 68
    1608:	0e 94 2c 09 	call	0x1258	; 0x1258 <uart_send_byte>
		break;
    160c:	08 95       	ret
	case(14):
		uart_send_byte( which, 'E');
    160e:	65 e4       	ldi	r22, 0x45	; 69
    1610:	0e 94 2c 09 	call	0x1258	; 0x1258 <uart_send_byte>
		break;
    1614:	08 95       	ret
	case(15):
		uart_send_byte( which, 'F');
    1616:	66 e4       	ldi	r22, 0x46	; 70
    1618:	0e 94 2c 09 	call	0x1258	; 0x1258 <uart_send_byte>
    161c:	08 95       	ret

0000161e <uart_send_HEX8>:
		break;
	}	
}

void uart_send_HEX8(USART_t* which, uint8_t lowb){
    161e:	1f 93       	push	r17
    1620:	cf 93       	push	r28
    1622:	df 93       	push	r29
    1624:	ec 01       	movw	r28, r24
    1626:	16 2f       	mov	r17, r22
	uart_send_HEX4(which, lowb>>4);
    1628:	62 95       	swap	r22
    162a:	6f 70       	andi	r22, 0x0F	; 15
    162c:	0e 94 a9 0a 	call	0x1552	; 0x1552 <uart_send_HEX4>
	uart_send_HEX4(which, lowb & 0x0F);
    1630:	61 2f       	mov	r22, r17
    1632:	6f 70       	andi	r22, 0x0F	; 15
    1634:	ce 01       	movw	r24, r28
    1636:	0e 94 a9 0a 	call	0x1552	; 0x1552 <uart_send_HEX4>
}
    163a:	df 91       	pop	r29
    163c:	cf 91       	pop	r28
    163e:	1f 91       	pop	r17
    1640:	08 95       	ret

00001642 <uart_send_HEX16b>:

void uart_send_HEX16b(USART_t* which, uint8_t highb, uint8_t lowb){
    1642:	1f 93       	push	r17
    1644:	cf 93       	push	r28
    1646:	df 93       	push	r29
    1648:	ec 01       	movw	r28, r24
    164a:	14 2f       	mov	r17, r20
	uart_send_HEX8(which, highb);
    164c:	0e 94 0f 0b 	call	0x161e	; 0x161e <uart_send_HEX8>
	uart_send_HEX8(which, lowb);
    1650:	ce 01       	movw	r24, r28
    1652:	61 2f       	mov	r22, r17
    1654:	0e 94 0f 0b 	call	0x161e	; 0x161e <uart_send_HEX8>
}
    1658:	df 91       	pop	r29
    165a:	cf 91       	pop	r28
    165c:	1f 91       	pop	r17
    165e:	08 95       	ret

00001660 <uart_send_HEX16>:

void uart_send_HEX16(USART_t* which, uint16_t highb){
    1660:	1f 93       	push	r17
    1662:	cf 93       	push	r28
    1664:	df 93       	push	r29
    1666:	ec 01       	movw	r28, r24
    1668:	16 2f       	mov	r17, r22
    166a:	67 2f       	mov	r22, r23
	uint8_t blah;
	blah = (uint8_t)(highb>>8);
	uart_send_HEX8(which, blah);
    166c:	0e 94 0f 0b 	call	0x161e	; 0x161e <uart_send_HEX8>
	blah = (uint8_t)(highb & 0x00FF);
	uart_send_HEX8(which, blah);
    1670:	ce 01       	movw	r24, r28
    1672:	61 2f       	mov	r22, r17
    1674:	0e 94 0f 0b 	call	0x161e	; 0x161e <uart_send_HEX8>
}
    1678:	df 91       	pop	r29
    167a:	cf 91       	pop	r28
    167c:	1f 91       	pop	r17
    167e:	08 95       	ret

00001680 <uart_enq_BIN4>:
//== The Queue-based versions (NON-BLOCKING) of the display functions ==
//======================================================================


//Most Significant Bit first
void uart_enq_BIN4(USART_t* which, uint8_t lowb){
    1680:	cf 93       	push	r28
    1682:	df 93       	push	r29
    1684:	ec 01       	movw	r28, r24
	switch(lowb){
    1686:	67 30       	cpi	r22, 0x07	; 7
    1688:	09 f4       	brne	.+2      	; 0x168c <uart_enq_BIN4+0xc>
    168a:	9d c0       	rjmp	.+314    	; 0x17c6 <uart_enq_BIN4+0x146>
    168c:	68 30       	cpi	r22, 0x08	; 8
    168e:	90 f4       	brcc	.+36     	; 0x16b4 <uart_enq_BIN4+0x34>
    1690:	63 30       	cpi	r22, 0x03	; 3
    1692:	09 f4       	brne	.+2      	; 0x1696 <uart_enq_BIN4+0x16>
    1694:	58 c0       	rjmp	.+176    	; 0x1746 <uart_enq_BIN4+0xc6>
    1696:	64 30       	cpi	r22, 0x04	; 4
    1698:	30 f4       	brcc	.+12     	; 0x16a6 <uart_enq_BIN4+0x26>
    169a:	61 30       	cpi	r22, 0x01	; 1
    169c:	a1 f1       	breq	.+104    	; 0x1706 <uart_enq_BIN4+0x86>
    169e:	62 30       	cpi	r22, 0x02	; 2
    16a0:	08 f0       	brcs	.+2      	; 0x16a4 <uart_enq_BIN4+0x24>
    16a2:	41 c0       	rjmp	.+130    	; 0x1726 <uart_enq_BIN4+0xa6>
    16a4:	20 c0       	rjmp	.+64     	; 0x16e6 <uart_enq_BIN4+0x66>
    16a6:	65 30       	cpi	r22, 0x05	; 5
    16a8:	09 f4       	brne	.+2      	; 0x16ac <uart_enq_BIN4+0x2c>
    16aa:	6d c0       	rjmp	.+218    	; 0x1786 <uart_enq_BIN4+0x106>
    16ac:	66 30       	cpi	r22, 0x06	; 6
    16ae:	08 f0       	brcs	.+2      	; 0x16b2 <uart_enq_BIN4+0x32>
    16b0:	7a c0       	rjmp	.+244    	; 0x17a6 <uart_enq_BIN4+0x126>
    16b2:	59 c0       	rjmp	.+178    	; 0x1766 <uart_enq_BIN4+0xe6>
    16b4:	6b 30       	cpi	r22, 0x0B	; 11
    16b6:	09 f4       	brne	.+2      	; 0x16ba <uart_enq_BIN4+0x3a>
    16b8:	c6 c0       	rjmp	.+396    	; 0x1846 <uart_enq_BIN4+0x1c6>
    16ba:	6c 30       	cpi	r22, 0x0C	; 12
    16bc:	38 f4       	brcc	.+14     	; 0x16cc <uart_enq_BIN4+0x4c>
    16be:	69 30       	cpi	r22, 0x09	; 9
    16c0:	09 f4       	brne	.+2      	; 0x16c4 <uart_enq_BIN4+0x44>
    16c2:	a1 c0       	rjmp	.+322    	; 0x1806 <uart_enq_BIN4+0x186>
    16c4:	6a 30       	cpi	r22, 0x0A	; 10
    16c6:	08 f0       	brcs	.+2      	; 0x16ca <uart_enq_BIN4+0x4a>
    16c8:	ae c0       	rjmp	.+348    	; 0x1826 <uart_enq_BIN4+0x1a6>
    16ca:	8d c0       	rjmp	.+282    	; 0x17e6 <uart_enq_BIN4+0x166>
    16cc:	6d 30       	cpi	r22, 0x0D	; 13
    16ce:	09 f4       	brne	.+2      	; 0x16d2 <uart_enq_BIN4+0x52>
    16d0:	da c0       	rjmp	.+436    	; 0x1886 <uart_enq_BIN4+0x206>
    16d2:	6d 30       	cpi	r22, 0x0D	; 13
    16d4:	08 f4       	brcc	.+2      	; 0x16d8 <uart_enq_BIN4+0x58>
    16d6:	c7 c0       	rjmp	.+398    	; 0x1866 <uart_enq_BIN4+0x1e6>
    16d8:	6e 30       	cpi	r22, 0x0E	; 14
    16da:	09 f4       	brne	.+2      	; 0x16de <uart_enq_BIN4+0x5e>
    16dc:	e4 c0       	rjmp	.+456    	; 0x18a6 <uart_enq_BIN4+0x226>
    16de:	6f 30       	cpi	r22, 0x0F	; 15
    16e0:	09 f0       	breq	.+2      	; 0x16e4 <uart_enq_BIN4+0x64>
    16e2:	00 c1       	rjmp	.+512    	; 0x18e4 <uart_enq_BIN4+0x264>
    16e4:	f0 c0       	rjmp	.+480    	; 0x18c6 <uart_enq_BIN4+0x246>
	case(0):
		uart_enqueue(which, '0');
    16e6:	60 e3       	ldi	r22, 0x30	; 48
    16e8:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <uart_enqueue>
		uart_enqueue(which, '0');
    16ec:	ce 01       	movw	r24, r28
    16ee:	60 e3       	ldi	r22, 0x30	; 48
    16f0:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <uart_enqueue>
		uart_enqueue(which, '0');
    16f4:	ce 01       	movw	r24, r28
    16f6:	60 e3       	ldi	r22, 0x30	; 48
    16f8:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <uart_enqueue>
		uart_enqueue(which, '0');
    16fc:	ce 01       	movw	r24, r28
    16fe:	60 e3       	ldi	r22, 0x30	; 48
    1700:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <uart_enqueue>
		break;
    1704:	ef c0       	rjmp	.+478    	; 0x18e4 <uart_enq_BIN4+0x264>
	case(1):
		uart_enqueue(which, '0');
    1706:	60 e3       	ldi	r22, 0x30	; 48
    1708:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <uart_enqueue>
		uart_enqueue(which, '0');
    170c:	ce 01       	movw	r24, r28
    170e:	60 e3       	ldi	r22, 0x30	; 48
    1710:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <uart_enqueue>
		uart_enqueue(which, '0');
    1714:	ce 01       	movw	r24, r28
    1716:	60 e3       	ldi	r22, 0x30	; 48
    1718:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <uart_enqueue>
		uart_enqueue(which, '1');
    171c:	ce 01       	movw	r24, r28
    171e:	61 e3       	ldi	r22, 0x31	; 49
    1720:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <uart_enqueue>
		break;
    1724:	df c0       	rjmp	.+446    	; 0x18e4 <uart_enq_BIN4+0x264>
	case(2):
		uart_enqueue(which, '0');
    1726:	60 e3       	ldi	r22, 0x30	; 48
    1728:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <uart_enqueue>
		uart_enqueue(which, '0');
    172c:	ce 01       	movw	r24, r28
    172e:	60 e3       	ldi	r22, 0x30	; 48
    1730:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <uart_enqueue>
		uart_enqueue(which, '1');
    1734:	ce 01       	movw	r24, r28
    1736:	61 e3       	ldi	r22, 0x31	; 49
    1738:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <uart_enqueue>
		uart_enqueue(which, '0');
    173c:	ce 01       	movw	r24, r28
    173e:	60 e3       	ldi	r22, 0x30	; 48
    1740:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <uart_enqueue>
		break;
    1744:	cf c0       	rjmp	.+414    	; 0x18e4 <uart_enq_BIN4+0x264>
	case(3):
		uart_enqueue(which, '0');
    1746:	60 e3       	ldi	r22, 0x30	; 48
    1748:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <uart_enqueue>
		uart_enqueue(which, '0');
    174c:	ce 01       	movw	r24, r28
    174e:	60 e3       	ldi	r22, 0x30	; 48
    1750:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <uart_enqueue>
		uart_enqueue(which, '1');
    1754:	ce 01       	movw	r24, r28
    1756:	61 e3       	ldi	r22, 0x31	; 49
    1758:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <uart_enqueue>
		uart_enqueue(which, '1');
    175c:	ce 01       	movw	r24, r28
    175e:	61 e3       	ldi	r22, 0x31	; 49
    1760:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <uart_enqueue>
		break;
    1764:	bf c0       	rjmp	.+382    	; 0x18e4 <uart_enq_BIN4+0x264>
	case(4):
		uart_enqueue(which, '0');
    1766:	60 e3       	ldi	r22, 0x30	; 48
    1768:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <uart_enqueue>
		uart_enqueue(which, '1');
    176c:	ce 01       	movw	r24, r28
    176e:	61 e3       	ldi	r22, 0x31	; 49
    1770:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <uart_enqueue>
		uart_enqueue(which, '0');
    1774:	ce 01       	movw	r24, r28
    1776:	60 e3       	ldi	r22, 0x30	; 48
    1778:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <uart_enqueue>
		uart_enqueue(which, '0');
    177c:	ce 01       	movw	r24, r28
    177e:	60 e3       	ldi	r22, 0x30	; 48
    1780:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <uart_enqueue>
		break;
    1784:	af c0       	rjmp	.+350    	; 0x18e4 <uart_enq_BIN4+0x264>
	case(5):
		uart_enqueue(which, '0');
    1786:	60 e3       	ldi	r22, 0x30	; 48
    1788:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <uart_enqueue>
		uart_enqueue(which, '1');
    178c:	ce 01       	movw	r24, r28
    178e:	61 e3       	ldi	r22, 0x31	; 49
    1790:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <uart_enqueue>
		uart_enqueue(which, '0');
    1794:	ce 01       	movw	r24, r28
    1796:	60 e3       	ldi	r22, 0x30	; 48
    1798:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <uart_enqueue>
		uart_enqueue(which, '1');
    179c:	ce 01       	movw	r24, r28
    179e:	61 e3       	ldi	r22, 0x31	; 49
    17a0:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <uart_enqueue>
		break;
    17a4:	9f c0       	rjmp	.+318    	; 0x18e4 <uart_enq_BIN4+0x264>
	case(6):
		uart_enqueue(which, '0');
    17a6:	60 e3       	ldi	r22, 0x30	; 48
    17a8:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <uart_enqueue>
		uart_enqueue(which, '1');
    17ac:	ce 01       	movw	r24, r28
    17ae:	61 e3       	ldi	r22, 0x31	; 49
    17b0:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <uart_enqueue>
		uart_enqueue(which, '1');
    17b4:	ce 01       	movw	r24, r28
    17b6:	61 e3       	ldi	r22, 0x31	; 49
    17b8:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <uart_enqueue>
		uart_enqueue(which, '0');
    17bc:	ce 01       	movw	r24, r28
    17be:	60 e3       	ldi	r22, 0x30	; 48
    17c0:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <uart_enqueue>
		break;
    17c4:	8f c0       	rjmp	.+286    	; 0x18e4 <uart_enq_BIN4+0x264>
	case(7):
		uart_enqueue(which, '0');
    17c6:	60 e3       	ldi	r22, 0x30	; 48
    17c8:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <uart_enqueue>
		uart_enqueue(which, '1');
    17cc:	ce 01       	movw	r24, r28
    17ce:	61 e3       	ldi	r22, 0x31	; 49
    17d0:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <uart_enqueue>
		uart_enqueue(which, '1');
    17d4:	ce 01       	movw	r24, r28
    17d6:	61 e3       	ldi	r22, 0x31	; 49
    17d8:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <uart_enqueue>
		uart_enqueue(which, '1');
    17dc:	ce 01       	movw	r24, r28
    17de:	61 e3       	ldi	r22, 0x31	; 49
    17e0:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <uart_enqueue>
		break;
    17e4:	7f c0       	rjmp	.+254    	; 0x18e4 <uart_enq_BIN4+0x264>
	case(8):
		uart_enqueue(which, '1');
    17e6:	61 e3       	ldi	r22, 0x31	; 49
    17e8:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <uart_enqueue>
		uart_enqueue(which, '0');
    17ec:	ce 01       	movw	r24, r28
    17ee:	60 e3       	ldi	r22, 0x30	; 48
    17f0:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <uart_enqueue>
		uart_enqueue(which, '0');
    17f4:	ce 01       	movw	r24, r28
    17f6:	60 e3       	ldi	r22, 0x30	; 48
    17f8:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <uart_enqueue>
		uart_enqueue(which, '0');
    17fc:	ce 01       	movw	r24, r28
    17fe:	60 e3       	ldi	r22, 0x30	; 48
    1800:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <uart_enqueue>
		break;
    1804:	6f c0       	rjmp	.+222    	; 0x18e4 <uart_enq_BIN4+0x264>
	case(9):
		uart_enqueue(which, '1');
    1806:	61 e3       	ldi	r22, 0x31	; 49
    1808:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <uart_enqueue>
		uart_enqueue(which, '0');
    180c:	ce 01       	movw	r24, r28
    180e:	60 e3       	ldi	r22, 0x30	; 48
    1810:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <uart_enqueue>
		uart_enqueue(which, '0');
    1814:	ce 01       	movw	r24, r28
    1816:	60 e3       	ldi	r22, 0x30	; 48
    1818:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <uart_enqueue>
		uart_enqueue(which, '1');
    181c:	ce 01       	movw	r24, r28
    181e:	61 e3       	ldi	r22, 0x31	; 49
    1820:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <uart_enqueue>
		break;
    1824:	5f c0       	rjmp	.+190    	; 0x18e4 <uart_enq_BIN4+0x264>
	case(10):
		uart_enqueue(which, '1');
    1826:	61 e3       	ldi	r22, 0x31	; 49
    1828:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <uart_enqueue>
		uart_enqueue(which, '0');
    182c:	ce 01       	movw	r24, r28
    182e:	60 e3       	ldi	r22, 0x30	; 48
    1830:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <uart_enqueue>
		uart_enqueue(which, '1');
    1834:	ce 01       	movw	r24, r28
    1836:	61 e3       	ldi	r22, 0x31	; 49
    1838:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <uart_enqueue>
		uart_enqueue(which, '0');
    183c:	ce 01       	movw	r24, r28
    183e:	60 e3       	ldi	r22, 0x30	; 48
    1840:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <uart_enqueue>
		break;
    1844:	4f c0       	rjmp	.+158    	; 0x18e4 <uart_enq_BIN4+0x264>
	case(11):
		uart_enqueue(which, '1');
    1846:	61 e3       	ldi	r22, 0x31	; 49
    1848:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <uart_enqueue>
		uart_enqueue(which, '0');
    184c:	ce 01       	movw	r24, r28
    184e:	60 e3       	ldi	r22, 0x30	; 48
    1850:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <uart_enqueue>
		uart_enqueue(which, '1');
    1854:	ce 01       	movw	r24, r28
    1856:	61 e3       	ldi	r22, 0x31	; 49
    1858:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <uart_enqueue>
		uart_enqueue(which, '1');
    185c:	ce 01       	movw	r24, r28
    185e:	61 e3       	ldi	r22, 0x31	; 49
    1860:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <uart_enqueue>
		break;
    1864:	3f c0       	rjmp	.+126    	; 0x18e4 <uart_enq_BIN4+0x264>
	case(12):
		uart_enqueue(which, '1');
    1866:	61 e3       	ldi	r22, 0x31	; 49
    1868:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <uart_enqueue>
		uart_enqueue(which, '1');
    186c:	ce 01       	movw	r24, r28
    186e:	61 e3       	ldi	r22, 0x31	; 49
    1870:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <uart_enqueue>
		uart_enqueue(which, '0');
    1874:	ce 01       	movw	r24, r28
    1876:	60 e3       	ldi	r22, 0x30	; 48
    1878:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <uart_enqueue>
		uart_enqueue(which, '0');
    187c:	ce 01       	movw	r24, r28
    187e:	60 e3       	ldi	r22, 0x30	; 48
    1880:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <uart_enqueue>
		break;
    1884:	2f c0       	rjmp	.+94     	; 0x18e4 <uart_enq_BIN4+0x264>
	case(13):
		uart_enqueue(which, '1');
    1886:	61 e3       	ldi	r22, 0x31	; 49
    1888:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <uart_enqueue>
		uart_enqueue(which, '1');
    188c:	ce 01       	movw	r24, r28
    188e:	61 e3       	ldi	r22, 0x31	; 49
    1890:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <uart_enqueue>
		uart_enqueue(which, '0');
    1894:	ce 01       	movw	r24, r28
    1896:	60 e3       	ldi	r22, 0x30	; 48
    1898:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <uart_enqueue>
		uart_enqueue(which, '1');
    189c:	ce 01       	movw	r24, r28
    189e:	61 e3       	ldi	r22, 0x31	; 49
    18a0:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <uart_enqueue>
		break;
    18a4:	1f c0       	rjmp	.+62     	; 0x18e4 <uart_enq_BIN4+0x264>
	case(14):
		uart_enqueue(which, '1');
    18a6:	61 e3       	ldi	r22, 0x31	; 49
    18a8:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <uart_enqueue>
		uart_enqueue(which, '1');
    18ac:	ce 01       	movw	r24, r28
    18ae:	61 e3       	ldi	r22, 0x31	; 49
    18b0:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <uart_enqueue>
		uart_enqueue(which, '1');
    18b4:	ce 01       	movw	r24, r28
    18b6:	61 e3       	ldi	r22, 0x31	; 49
    18b8:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <uart_enqueue>
		uart_enqueue(which, '0');
    18bc:	ce 01       	movw	r24, r28
    18be:	60 e3       	ldi	r22, 0x30	; 48
    18c0:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <uart_enqueue>
		break;
    18c4:	0f c0       	rjmp	.+30     	; 0x18e4 <uart_enq_BIN4+0x264>
	case(15):
		uart_enqueue(which, '1');
    18c6:	61 e3       	ldi	r22, 0x31	; 49
    18c8:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <uart_enqueue>
		uart_enqueue(which, '1');
    18cc:	ce 01       	movw	r24, r28
    18ce:	61 e3       	ldi	r22, 0x31	; 49
    18d0:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <uart_enqueue>
		uart_enqueue(which, '1');
    18d4:	ce 01       	movw	r24, r28
    18d6:	61 e3       	ldi	r22, 0x31	; 49
    18d8:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <uart_enqueue>
		uart_enqueue(which, '1');
    18dc:	ce 01       	movw	r24, r28
    18de:	61 e3       	ldi	r22, 0x31	; 49
    18e0:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <uart_enqueue>
		break;
	}	
}
    18e4:	df 91       	pop	r29
    18e6:	cf 91       	pop	r28
    18e8:	08 95       	ret

000018ea <uart_enq_BIN8>:

//enqs out toenq as ASCII text in 'b01101010' format
void uart_enq_BIN8(USART_t* which, uint8_t lowb){
    18ea:	1f 93       	push	r17
    18ec:	cf 93       	push	r28
    18ee:	df 93       	push	r29
    18f0:	ec 01       	movw	r28, r24
    18f2:	16 2f       	mov	r17, r22
	uart_enqueue(which, 'b');
    18f4:	62 e6       	ldi	r22, 0x62	; 98
    18f6:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <uart_enqueue>
	uart_enq_BIN4(which, lowb>>4);
    18fa:	61 2f       	mov	r22, r17
    18fc:	62 95       	swap	r22
    18fe:	6f 70       	andi	r22, 0x0F	; 15
    1900:	ce 01       	movw	r24, r28
    1902:	0e 94 40 0b 	call	0x1680	; 0x1680 <uart_enq_BIN4>
	uart_enq_BIN4(which, lowb & 0x0F);
    1906:	61 2f       	mov	r22, r17
    1908:	6f 70       	andi	r22, 0x0F	; 15
    190a:	ce 01       	movw	r24, r28
    190c:	0e 94 40 0b 	call	0x1680	; 0x1680 <uart_enq_BIN4>
}
    1910:	df 91       	pop	r29
    1912:	cf 91       	pop	r28
    1914:	1f 91       	pop	r17
    1916:	08 95       	ret

00001918 <uart_enq_HEX4>:
	

void uart_enq_HEX4(USART_t* which, uint8_t lowb){
	switch(lowb){
    1918:	67 30       	cpi	r22, 0x07	; 7
    191a:	09 f4       	brne	.+2      	; 0x191e <uart_enq_HEX4+0x6>
    191c:	3f c0       	rjmp	.+126    	; 0x199c <uart_enq_HEX4+0x84>
    191e:	68 30       	cpi	r22, 0x08	; 8
    1920:	70 f4       	brcc	.+28     	; 0x193e <uart_enq_HEX4+0x26>
    1922:	63 30       	cpi	r22, 0x03	; 3
    1924:	59 f1       	breq	.+86     	; 0x197c <uart_enq_HEX4+0x64>
    1926:	64 30       	cpi	r22, 0x04	; 4
    1928:	28 f4       	brcc	.+10     	; 0x1934 <uart_enq_HEX4+0x1c>
    192a:	61 30       	cpi	r22, 0x01	; 1
    192c:	f9 f0       	breq	.+62     	; 0x196c <uart_enq_HEX4+0x54>
    192e:	62 30       	cpi	r22, 0x02	; 2
    1930:	08 f5       	brcc	.+66     	; 0x1974 <uart_enq_HEX4+0x5c>
    1932:	18 c0       	rjmp	.+48     	; 0x1964 <uart_enq_HEX4+0x4c>
    1934:	65 30       	cpi	r22, 0x05	; 5
    1936:	51 f1       	breq	.+84     	; 0x198c <uart_enq_HEX4+0x74>
    1938:	66 30       	cpi	r22, 0x06	; 6
    193a:	60 f5       	brcc	.+88     	; 0x1994 <uart_enq_HEX4+0x7c>
    193c:	23 c0       	rjmp	.+70     	; 0x1984 <uart_enq_HEX4+0x6c>
    193e:	6b 30       	cpi	r22, 0x0B	; 11
    1940:	e9 f1       	breq	.+122    	; 0x19bc <uart_enq_HEX4+0xa4>
    1942:	6c 30       	cpi	r22, 0x0C	; 12
    1944:	28 f4       	brcc	.+10     	; 0x1950 <uart_enq_HEX4+0x38>
    1946:	69 30       	cpi	r22, 0x09	; 9
    1948:	89 f1       	breq	.+98     	; 0x19ac <uart_enq_HEX4+0x94>
    194a:	6a 30       	cpi	r22, 0x0A	; 10
    194c:	98 f5       	brcc	.+102    	; 0x19b4 <uart_enq_HEX4+0x9c>
    194e:	2a c0       	rjmp	.+84     	; 0x19a4 <uart_enq_HEX4+0x8c>
    1950:	6d 30       	cpi	r22, 0x0D	; 13
    1952:	e1 f1       	breq	.+120    	; 0x19cc <uart_enq_HEX4+0xb4>
    1954:	6d 30       	cpi	r22, 0x0D	; 13
    1956:	b0 f1       	brcs	.+108    	; 0x19c4 <uart_enq_HEX4+0xac>
    1958:	6e 30       	cpi	r22, 0x0E	; 14
    195a:	e1 f1       	breq	.+120    	; 0x19d4 <uart_enq_HEX4+0xbc>
    195c:	6f 30       	cpi	r22, 0x0F	; 15
    195e:	09 f0       	breq	.+2      	; 0x1962 <uart_enq_HEX4+0x4a>
    1960:	40 c0       	rjmp	.+128    	; 0x19e2 <uart_enq_HEX4+0xca>
    1962:	3c c0       	rjmp	.+120    	; 0x19dc <uart_enq_HEX4+0xc4>
	case(0):
		uart_enqueue(which,  '0');
    1964:	60 e3       	ldi	r22, 0x30	; 48
    1966:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <uart_enqueue>
		break;
    196a:	08 95       	ret
	case(1):
		uart_enqueue(which,  '1');
    196c:	61 e3       	ldi	r22, 0x31	; 49
    196e:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <uart_enqueue>
		break;
    1972:	08 95       	ret
	case(2):
		uart_enqueue(which,  '2');
    1974:	62 e3       	ldi	r22, 0x32	; 50
    1976:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <uart_enqueue>
		break;
    197a:	08 95       	ret
	case(3):
		uart_enqueue(which,  '3');
    197c:	63 e3       	ldi	r22, 0x33	; 51
    197e:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <uart_enqueue>
		break;
    1982:	08 95       	ret
	case(4):
		uart_enqueue(which,  '4');
    1984:	64 e3       	ldi	r22, 0x34	; 52
    1986:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <uart_enqueue>
		break;
    198a:	08 95       	ret
	case(5):
		uart_enqueue(which,  '5');
    198c:	65 e3       	ldi	r22, 0x35	; 53
    198e:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <uart_enqueue>
		break;
    1992:	08 95       	ret
	case(6):
		uart_enqueue(which,  '6');
    1994:	66 e3       	ldi	r22, 0x36	; 54
    1996:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <uart_enqueue>
		break;
    199a:	08 95       	ret
	case(7):
		uart_enqueue(which,  '7');
    199c:	67 e3       	ldi	r22, 0x37	; 55
    199e:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <uart_enqueue>
		break;
    19a2:	08 95       	ret
	case(8):
		uart_enqueue(which,  '8');
    19a4:	68 e3       	ldi	r22, 0x38	; 56
    19a6:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <uart_enqueue>
		break;
    19aa:	08 95       	ret
	case(9):
		uart_enqueue(which,  '9');
    19ac:	69 e3       	ldi	r22, 0x39	; 57
    19ae:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <uart_enqueue>
		break;
    19b2:	08 95       	ret
	case(10):
		uart_enqueue(which,  'A');
    19b4:	61 e4       	ldi	r22, 0x41	; 65
    19b6:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <uart_enqueue>
		break;
    19ba:	08 95       	ret
	case(11):
		uart_enqueue(which,  'B');
    19bc:	62 e4       	ldi	r22, 0x42	; 66
    19be:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <uart_enqueue>
		break;
    19c2:	08 95       	ret
	case(12):
		uart_enqueue(which,  'C');
    19c4:	63 e4       	ldi	r22, 0x43	; 67
    19c6:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <uart_enqueue>
		break;
    19ca:	08 95       	ret
	case(13):
		uart_enqueue(which,  'D');
    19cc:	64 e4       	ldi	r22, 0x44	; 68
    19ce:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <uart_enqueue>
		break;
    19d2:	08 95       	ret
	case(14):
		uart_enqueue(which,  'E');
    19d4:	65 e4       	ldi	r22, 0x45	; 69
    19d6:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <uart_enqueue>
		break;
    19da:	08 95       	ret
	case(15):
		uart_enqueue(which,  'F');
    19dc:	66 e4       	ldi	r22, 0x46	; 70
    19de:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <uart_enqueue>
    19e2:	08 95       	ret

000019e4 <uart_enq_HEX8>:
		break;
	}	
}

void uart_enq_HEX8(USART_t* which, uint8_t lowb){
    19e4:	1f 93       	push	r17
    19e6:	cf 93       	push	r28
    19e8:	df 93       	push	r29
    19ea:	ec 01       	movw	r28, r24
    19ec:	16 2f       	mov	r17, r22
	uart_enq_HEX4(which, lowb>>4);
    19ee:	62 95       	swap	r22
    19f0:	6f 70       	andi	r22, 0x0F	; 15
    19f2:	0e 94 8c 0c 	call	0x1918	; 0x1918 <uart_enq_HEX4>
	uart_enq_HEX4(which, lowb & 0x0F);
    19f6:	61 2f       	mov	r22, r17
    19f8:	6f 70       	andi	r22, 0x0F	; 15
    19fa:	ce 01       	movw	r24, r28
    19fc:	0e 94 8c 0c 	call	0x1918	; 0x1918 <uart_enq_HEX4>
}
    1a00:	df 91       	pop	r29
    1a02:	cf 91       	pop	r28
    1a04:	1f 91       	pop	r17
    1a06:	08 95       	ret

00001a08 <uart_enq_HEX16b>:

void uart_enq_HEX16b(USART_t* which, uint8_t highb, uint8_t lowb){
    1a08:	1f 93       	push	r17
    1a0a:	cf 93       	push	r28
    1a0c:	df 93       	push	r29
    1a0e:	ec 01       	movw	r28, r24
    1a10:	14 2f       	mov	r17, r20
	uart_enq_HEX8(which, highb);
    1a12:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <uart_enq_HEX8>
	uart_enq_HEX8(which, lowb);
    1a16:	ce 01       	movw	r24, r28
    1a18:	61 2f       	mov	r22, r17
    1a1a:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <uart_enq_HEX8>
}
    1a1e:	df 91       	pop	r29
    1a20:	cf 91       	pop	r28
    1a22:	1f 91       	pop	r17
    1a24:	08 95       	ret

00001a26 <uart_enq_HEX16>:

void uart_enq_HEX16(USART_t* which, uint16_t highb){
    1a26:	1f 93       	push	r17
    1a28:	cf 93       	push	r28
    1a2a:	df 93       	push	r29
    1a2c:	ec 01       	movw	r28, r24
    1a2e:	16 2f       	mov	r17, r22
    1a30:	67 2f       	mov	r22, r23
	uint8_t blah;
	blah = (uint8_t)(highb>>8);
	uart_enq_HEX8(which, blah);
    1a32:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <uart_enq_HEX8>
	blah = (uint8_t)(highb & 0x00FF);
	uart_enq_HEX8(which, blah);
    1a36:	ce 01       	movw	r24, r28
    1a38:	61 2f       	mov	r22, r17
    1a3a:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <uart_enq_HEX8>
}
    1a3e:	df 91       	pop	r29
    1a40:	cf 91       	pop	r28
    1a42:	1f 91       	pop	r17
    1a44:	08 95       	ret

00001a46 <__vector_25>:
//************************************************************************
//************************************************************************

//Must correspond to definitions in uart.h
SIGNAL(USARTC0_DRE_vect) {uart_transmit(&uctrl);}//TX Interrupt
SIGNAL(USARTC0_RXC_vect) {uart_receive(&uctrl);} //RX Interrupt
    1a46:	1f 92       	push	r1
    1a48:	0f 92       	push	r0
    1a4a:	0f b6       	in	r0, 0x3f	; 63
    1a4c:	0f 92       	push	r0
    1a4e:	08 b6       	in	r0, 0x38	; 56
    1a50:	0f 92       	push	r0
    1a52:	09 b6       	in	r0, 0x39	; 57
    1a54:	0f 92       	push	r0
    1a56:	0a b6       	in	r0, 0x3a	; 58
    1a58:	0f 92       	push	r0
    1a5a:	0b b6       	in	r0, 0x3b	; 59
    1a5c:	0f 92       	push	r0
    1a5e:	11 24       	eor	r1, r1
    1a60:	2f 93       	push	r18
    1a62:	3f 93       	push	r19
    1a64:	4f 93       	push	r20
    1a66:	5f 93       	push	r21
    1a68:	8f 93       	push	r24
    1a6a:	9f 93       	push	r25
    1a6c:	af 93       	push	r26
    1a6e:	bf 93       	push	r27
    1a70:	cf 93       	push	r28
    1a72:	df 93       	push	r29
    1a74:	ef 93       	push	r30
    1a76:	ff 93       	push	r31
//= RECEPTION ENGINE (ISR BASED)
//==================================

void inline uart_receive(USART_t* port){
	//keep receiving until data register is empty or incoming queue is full
	while (((port->STATUS & _BV(7)) == B8(10000000)) && (uart_icount(port) < MAX_IBUFFER_LEN)){		
    1a78:	c0 ea       	ldi	r28, 0xA0	; 160
    1a7a:	d8 e0       	ldi	r29, 0x08	; 8
	uart_itail[idx] = 0;
}

inline uint16_t uart_icount(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_ihead[idx] >= uart_itail[idx]){	
    1a7c:	e4 ea       	ldi	r30, 0xA4	; 164
    1a7e:	fc e3       	ldi	r31, 0x3C	; 60
    1a80:	48 e9       	ldi	r20, 0x98	; 152
    1a82:	54 e2       	ldi	r21, 0x24	; 36
    1a84:	13 c0       	rjmp	.+38     	; 0x1aac <__vector_25+0x66>
//==================================

void inline uart_receive(USART_t* port){
	//keep receiving until data register is empty or incoming queue is full
	while (((port->STATUS & _BV(7)) == B8(10000000)) && (uart_icount(port) < MAX_IBUFFER_LEN)){		
		uart_ienqueue(port, port->DATA);
    1a86:	88 81       	ld	r24, Y
	}
}

inline void uart_ienqueue(USART_t* port, uint8_t datain){
	uint8_t idx = port_map(port);
	uart_ibuffer[idx][uart_ihead[idx]] = datain;
    1a88:	a0 81       	ld	r26, Z
    1a8a:	b1 81       	ldd	r27, Z+1	; 0x01
    1a8c:	a4 56       	subi	r26, 0x64	; 100
    1a8e:	b7 4d       	sbci	r27, 0xD7	; 215
    1a90:	8c 93       	st	X, r24
	uart_ihead[idx]++;
    1a92:	80 81       	ld	r24, Z
    1a94:	91 81       	ldd	r25, Z+1	; 0x01
    1a96:	01 96       	adiw	r24, 0x01	; 1
    1a98:	80 83       	st	Z, r24
    1a9a:	91 83       	std	Z+1, r25	; 0x01
	if (uart_ihead[idx] >= MAX_IBUFFER_LEN){
    1a9c:	80 81       	ld	r24, Z
    1a9e:	91 81       	ldd	r25, Z+1	; 0x01
    1aa0:	24 e0       	ldi	r18, 0x04	; 4
    1aa2:	80 30       	cpi	r24, 0x00	; 0
    1aa4:	92 07       	cpc	r25, r18
    1aa6:	10 f0       	brcs	.+4      	; 0x1aac <__vector_25+0x66>
		uart_ihead[idx] = 0;
    1aa8:	10 82       	st	Z, r1
    1aaa:	11 82       	std	Z+1, r1	; 0x01
//= RECEPTION ENGINE (ISR BASED)
//==================================

void inline uart_receive(USART_t* port){
	//keep receiving until data register is empty or incoming queue is full
	while (((port->STATUS & _BV(7)) == B8(10000000)) && (uart_icount(port) < MAX_IBUFFER_LEN)){		
    1aac:	89 81       	ldd	r24, Y+1	; 0x01
    1aae:	88 23       	and	r24, r24
    1ab0:	fc f4       	brge	.+62     	; 0x1af0 <__vector_25+0xaa>
	uart_itail[idx] = 0;
}

inline uint16_t uart_icount(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_ihead[idx] >= uart_itail[idx]){	
    1ab2:	80 81       	ld	r24, Z
    1ab4:	91 81       	ldd	r25, Z+1	; 0x01
    1ab6:	da 01       	movw	r26, r20
    1ab8:	2d 91       	ld	r18, X+
    1aba:	3c 91       	ld	r19, X
    1abc:	11 97       	sbiw	r26, 0x01	; 1
    1abe:	82 17       	cp	r24, r18
    1ac0:	93 07       	cpc	r25, r19
    1ac2:	40 f0       	brcs	.+16     	; 0x1ad4 <__vector_25+0x8e>
		return (uart_ihead[idx] - uart_itail[idx]);
    1ac4:	80 81       	ld	r24, Z
    1ac6:	91 81       	ldd	r25, Z+1	; 0x01
    1ac8:	2d 91       	ld	r18, X+
    1aca:	3c 91       	ld	r19, X
    1acc:	11 97       	sbiw	r26, 0x01	; 1
    1ace:	82 1b       	sub	r24, r18
    1ad0:	93 0b       	sbc	r25, r19
    1ad2:	0a c0       	rjmp	.+20     	; 0x1ae8 <__vector_25+0xa2>
	}
	else {
		return ((MAX_IBUFFER_LEN-uart_itail[idx])+uart_ihead[idx]);
    1ad4:	80 81       	ld	r24, Z
    1ad6:	91 81       	ldd	r25, Z+1	; 0x01
    1ad8:	da 01       	movw	r26, r20
    1ada:	2d 91       	ld	r18, X+
    1adc:	3c 91       	ld	r19, X
    1ade:	11 97       	sbiw	r26, 0x01	; 1
    1ae0:	80 50       	subi	r24, 0x00	; 0
    1ae2:	9c 4f       	sbci	r25, 0xFC	; 252
    1ae4:	82 1b       	sub	r24, r18
    1ae6:	93 0b       	sbc	r25, r19
//= RECEPTION ENGINE (ISR BASED)
//==================================

void inline uart_receive(USART_t* port){
	//keep receiving until data register is empty or incoming queue is full
	while (((port->STATUS & _BV(7)) == B8(10000000)) && (uart_icount(port) < MAX_IBUFFER_LEN)){		
    1ae8:	b4 e0       	ldi	r27, 0x04	; 4
    1aea:	80 30       	cpi	r24, 0x00	; 0
    1aec:	9b 07       	cpc	r25, r27
    1aee:	58 f2       	brcs	.-106    	; 0x1a86 <__vector_25+0x40>
//************************************************************************
//************************************************************************

//Must correspond to definitions in uart.h
SIGNAL(USARTC0_DRE_vect) {uart_transmit(&uctrl);}//TX Interrupt
SIGNAL(USARTC0_RXC_vect) {uart_receive(&uctrl);} //RX Interrupt
    1af0:	ff 91       	pop	r31
    1af2:	ef 91       	pop	r30
    1af4:	df 91       	pop	r29
    1af6:	cf 91       	pop	r28
    1af8:	bf 91       	pop	r27
    1afa:	af 91       	pop	r26
    1afc:	9f 91       	pop	r25
    1afe:	8f 91       	pop	r24
    1b00:	5f 91       	pop	r21
    1b02:	4f 91       	pop	r20
    1b04:	3f 91       	pop	r19
    1b06:	2f 91       	pop	r18
    1b08:	0f 90       	pop	r0
    1b0a:	0b be       	out	0x3b, r0	; 59
    1b0c:	0f 90       	pop	r0
    1b0e:	0a be       	out	0x3a, r0	; 58
    1b10:	0f 90       	pop	r0
    1b12:	09 be       	out	0x39, r0	; 57
    1b14:	0f 90       	pop	r0
    1b16:	08 be       	out	0x38, r0	; 56
    1b18:	0f 90       	pop	r0
    1b1a:	0f be       	out	0x3f, r0	; 63
    1b1c:	0f 90       	pop	r0
    1b1e:	1f 90       	pop	r1
    1b20:	18 95       	reti

00001b22 <__vector_28>:
SIGNAL(USARTC1_DRE_vect) {uart_transmit(&udata);}//TX Interrupt
SIGNAL(USARTC1_RXC_vect) {uart_receive(&udata);} //RX Interrupt
    1b22:	1f 92       	push	r1
    1b24:	0f 92       	push	r0
    1b26:	0f b6       	in	r0, 0x3f	; 63
    1b28:	0f 92       	push	r0
    1b2a:	08 b6       	in	r0, 0x38	; 56
    1b2c:	0f 92       	push	r0
    1b2e:	09 b6       	in	r0, 0x39	; 57
    1b30:	0f 92       	push	r0
    1b32:	0a b6       	in	r0, 0x3a	; 58
    1b34:	0f 92       	push	r0
    1b36:	0b b6       	in	r0, 0x3b	; 59
    1b38:	0f 92       	push	r0
    1b3a:	11 24       	eor	r1, r1
    1b3c:	2f 93       	push	r18
    1b3e:	3f 93       	push	r19
    1b40:	4f 93       	push	r20
    1b42:	5f 93       	push	r21
    1b44:	8f 93       	push	r24
    1b46:	9f 93       	push	r25
    1b48:	af 93       	push	r26
    1b4a:	bf 93       	push	r27
    1b4c:	cf 93       	push	r28
    1b4e:	df 93       	push	r29
    1b50:	ef 93       	push	r30
    1b52:	ff 93       	push	r31
//= RECEPTION ENGINE (ISR BASED)
//==================================

void inline uart_receive(USART_t* port){
	//keep receiving until data register is empty or incoming queue is full
	while (((port->STATUS & _BV(7)) == B8(10000000)) && (uart_icount(port) < MAX_IBUFFER_LEN)){		
    1b54:	c0 eb       	ldi	r28, 0xB0	; 176
    1b56:	d8 e0       	ldi	r29, 0x08	; 8
	uart_itail[idx] = 0;
}

inline uint16_t uart_icount(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_ihead[idx] >= uart_itail[idx]){	
    1b58:	e6 ea       	ldi	r30, 0xA6	; 166
    1b5a:	fc e3       	ldi	r31, 0x3C	; 60
    1b5c:	4a e9       	ldi	r20, 0x9A	; 154
    1b5e:	54 e2       	ldi	r21, 0x24	; 36
    1b60:	13 c0       	rjmp	.+38     	; 0x1b88 <__vector_28+0x66>
//==================================

void inline uart_receive(USART_t* port){
	//keep receiving until data register is empty or incoming queue is full
	while (((port->STATUS & _BV(7)) == B8(10000000)) && (uart_icount(port) < MAX_IBUFFER_LEN)){		
		uart_ienqueue(port, port->DATA);
    1b62:	88 81       	ld	r24, Y
	}
}

inline void uart_ienqueue(USART_t* port, uint8_t datain){
	uint8_t idx = port_map(port);
	uart_ibuffer[idx][uart_ihead[idx]] = datain;
    1b64:	a0 81       	ld	r26, Z
    1b66:	b1 81       	ldd	r27, Z+1	; 0x01
    1b68:	a4 56       	subi	r26, 0x64	; 100
    1b6a:	b3 4d       	sbci	r27, 0xD3	; 211
    1b6c:	8c 93       	st	X, r24
	uart_ihead[idx]++;
    1b6e:	80 81       	ld	r24, Z
    1b70:	91 81       	ldd	r25, Z+1	; 0x01
    1b72:	01 96       	adiw	r24, 0x01	; 1
    1b74:	80 83       	st	Z, r24
    1b76:	91 83       	std	Z+1, r25	; 0x01
	if (uart_ihead[idx] >= MAX_IBUFFER_LEN){
    1b78:	80 81       	ld	r24, Z
    1b7a:	91 81       	ldd	r25, Z+1	; 0x01
    1b7c:	24 e0       	ldi	r18, 0x04	; 4
    1b7e:	80 30       	cpi	r24, 0x00	; 0
    1b80:	92 07       	cpc	r25, r18
    1b82:	10 f0       	brcs	.+4      	; 0x1b88 <__vector_28+0x66>
		uart_ihead[idx] = 0;
    1b84:	10 82       	st	Z, r1
    1b86:	11 82       	std	Z+1, r1	; 0x01
//= RECEPTION ENGINE (ISR BASED)
//==================================

void inline uart_receive(USART_t* port){
	//keep receiving until data register is empty or incoming queue is full
	while (((port->STATUS & _BV(7)) == B8(10000000)) && (uart_icount(port) < MAX_IBUFFER_LEN)){		
    1b88:	89 81       	ldd	r24, Y+1	; 0x01
    1b8a:	88 23       	and	r24, r24
    1b8c:	fc f4       	brge	.+62     	; 0x1bcc <__vector_28+0xaa>
	uart_itail[idx] = 0;
}

inline uint16_t uart_icount(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_ihead[idx] >= uart_itail[idx]){	
    1b8e:	80 81       	ld	r24, Z
    1b90:	91 81       	ldd	r25, Z+1	; 0x01
    1b92:	da 01       	movw	r26, r20
    1b94:	2d 91       	ld	r18, X+
    1b96:	3c 91       	ld	r19, X
    1b98:	11 97       	sbiw	r26, 0x01	; 1
    1b9a:	82 17       	cp	r24, r18
    1b9c:	93 07       	cpc	r25, r19
    1b9e:	40 f0       	brcs	.+16     	; 0x1bb0 <__vector_28+0x8e>
		return (uart_ihead[idx] - uart_itail[idx]);
    1ba0:	80 81       	ld	r24, Z
    1ba2:	91 81       	ldd	r25, Z+1	; 0x01
    1ba4:	2d 91       	ld	r18, X+
    1ba6:	3c 91       	ld	r19, X
    1ba8:	11 97       	sbiw	r26, 0x01	; 1
    1baa:	82 1b       	sub	r24, r18
    1bac:	93 0b       	sbc	r25, r19
    1bae:	0a c0       	rjmp	.+20     	; 0x1bc4 <__vector_28+0xa2>
	}
	else {
		return ((MAX_IBUFFER_LEN-uart_itail[idx])+uart_ihead[idx]);
    1bb0:	80 81       	ld	r24, Z
    1bb2:	91 81       	ldd	r25, Z+1	; 0x01
    1bb4:	da 01       	movw	r26, r20
    1bb6:	2d 91       	ld	r18, X+
    1bb8:	3c 91       	ld	r19, X
    1bba:	11 97       	sbiw	r26, 0x01	; 1
    1bbc:	80 50       	subi	r24, 0x00	; 0
    1bbe:	9c 4f       	sbci	r25, 0xFC	; 252
    1bc0:	82 1b       	sub	r24, r18
    1bc2:	93 0b       	sbc	r25, r19
//= RECEPTION ENGINE (ISR BASED)
//==================================

void inline uart_receive(USART_t* port){
	//keep receiving until data register is empty or incoming queue is full
	while (((port->STATUS & _BV(7)) == B8(10000000)) && (uart_icount(port) < MAX_IBUFFER_LEN)){		
    1bc4:	b4 e0       	ldi	r27, 0x04	; 4
    1bc6:	80 30       	cpi	r24, 0x00	; 0
    1bc8:	9b 07       	cpc	r25, r27
    1bca:	58 f2       	brcs	.-106    	; 0x1b62 <__vector_28+0x40>

//Must correspond to definitions in uart.h
SIGNAL(USARTC0_DRE_vect) {uart_transmit(&uctrl);}//TX Interrupt
SIGNAL(USARTC0_RXC_vect) {uart_receive(&uctrl);} //RX Interrupt
SIGNAL(USARTC1_DRE_vect) {uart_transmit(&udata);}//TX Interrupt
SIGNAL(USARTC1_RXC_vect) {uart_receive(&udata);} //RX Interrupt
    1bcc:	ff 91       	pop	r31
    1bce:	ef 91       	pop	r30
    1bd0:	df 91       	pop	r29
    1bd2:	cf 91       	pop	r28
    1bd4:	bf 91       	pop	r27
    1bd6:	af 91       	pop	r26
    1bd8:	9f 91       	pop	r25
    1bda:	8f 91       	pop	r24
    1bdc:	5f 91       	pop	r21
    1bde:	4f 91       	pop	r20
    1be0:	3f 91       	pop	r19
    1be2:	2f 91       	pop	r18
    1be4:	0f 90       	pop	r0
    1be6:	0b be       	out	0x3b, r0	; 59
    1be8:	0f 90       	pop	r0
    1bea:	0a be       	out	0x3a, r0	; 58
    1bec:	0f 90       	pop	r0
    1bee:	09 be       	out	0x39, r0	; 57
    1bf0:	0f 90       	pop	r0
    1bf2:	08 be       	out	0x38, r0	; 56
    1bf4:	0f 90       	pop	r0
    1bf6:	0f be       	out	0x3f, r0	; 63
    1bf8:	0f 90       	pop	r0
    1bfa:	1f 90       	pop	r1
    1bfc:	18 95       	reti

00001bfe <uart_rxbuffer_enable>:
		uart_rxbuffer_enable(port);
		uart_txbuffer_enable(port);
}

//Enable Receive Complete (high priority) -- so incoming is always handled first
void uart_rxbuffer_enable(USART_t* port){
    1bfe:	fc 01       	movw	r30, r24
	port->CTRLA = (port->CTRLA | B8(00110000));	//Set the Data Register Empty Interrupt to Medium Priority (timer needs to be higher!)
    1c00:	83 81       	ldd	r24, Z+3	; 0x03
    1c02:	80 63       	ori	r24, 0x30	; 48
    1c04:	83 83       	std	Z+3, r24	; 0x03
}
    1c06:	08 95       	ret

00001c08 <uart_rxbuffer_disable>:

void uart_rxbuffer_disable(USART_t* port){
    1c08:	fc 01       	movw	r30, r24
	port->CTRLA = (port->CTRLA & B8(11001111));	//Disable the Data Register Empty Interrupt
    1c0a:	83 81       	ldd	r24, Z+3	; 0x03
    1c0c:	8f 7c       	andi	r24, 0xCF	; 207
    1c0e:	83 83       	std	Z+3, r24	; 0x03
}
    1c10:	08 95       	ret

00001c12 <uart_txbuffer_enable>:

//Enable Transmit Ready (med priority) 
void uart_txbuffer_enable(USART_t* port){
    1c12:	fc 01       	movw	r30, r24
	port->CTRLA = (port->CTRLA | B8(00000010));	//Set the Data Register Empty Interrupt to Medium Priority (timer needs to be higher!)
    1c14:	83 81       	ldd	r24, Z+3	; 0x03
    1c16:	82 60       	ori	r24, 0x02	; 2
    1c18:	83 83       	std	Z+3, r24	; 0x03
}
    1c1a:	08 95       	ret

00001c1c <uart_txbuffer_disable>:

void uart_txbuffer_disable(USART_t* port){
    1c1c:	fc 01       	movw	r30, r24
	port->CTRLA = (port->CTRLA & B8(11111100));	//Disable the Data Register Empty Interrupt
    1c1e:	83 81       	ldd	r24, Z+3	; 0x03
    1c20:	8c 7f       	andi	r24, 0xFC	; 252
    1c22:	83 83       	std	Z+3, r24	; 0x03
}
    1c24:	08 95       	ret

00001c26 <__vector_29>:
//************************************************************************

//Must correspond to definitions in uart.h
SIGNAL(USARTC0_DRE_vect) {uart_transmit(&uctrl);}//TX Interrupt
SIGNAL(USARTC0_RXC_vect) {uart_receive(&uctrl);} //RX Interrupt
SIGNAL(USARTC1_DRE_vect) {uart_transmit(&udata);}//TX Interrupt
    1c26:	1f 92       	push	r1
    1c28:	0f 92       	push	r0
    1c2a:	0f b6       	in	r0, 0x3f	; 63
    1c2c:	0f 92       	push	r0
    1c2e:	08 b6       	in	r0, 0x38	; 56
    1c30:	0f 92       	push	r0
    1c32:	09 b6       	in	r0, 0x39	; 57
    1c34:	0f 92       	push	r0
    1c36:	0a b6       	in	r0, 0x3a	; 58
    1c38:	0f 92       	push	r0
    1c3a:	0b b6       	in	r0, 0x3b	; 59
    1c3c:	0f 92       	push	r0
    1c3e:	11 24       	eor	r1, r1
    1c40:	2f 93       	push	r18
    1c42:	3f 93       	push	r19
    1c44:	4f 93       	push	r20
    1c46:	5f 93       	push	r21
    1c48:	6f 93       	push	r22
    1c4a:	7f 93       	push	r23
    1c4c:	8f 93       	push	r24
    1c4e:	9f 93       	push	r25
    1c50:	af 93       	push	r26
    1c52:	bf 93       	push	r27
    1c54:	cf 93       	push	r28
    1c56:	df 93       	push	r29
    1c58:	ef 93       	push	r30
    1c5a:	ff 93       	push	r31
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    1c5c:	e0 eb       	ldi	r30, 0xB0	; 176
    1c5e:	f8 e0       	ldi	r31, 0x08	; 8
    1c60:	81 81       	ldd	r24, Z+1	; 0x01
    1c62:	85 fd       	sbrc	r24, 5
    1c64:	1a c0       	rjmp	.+52     	; 0x1c9a <__vector_29+0x74>
    1c66:	3a c0       	rjmp	.+116    	; 0x1cdc <__vector_29+0xb6>
}

inline uint8_t uart_dequeue(USART_t* port){
	uint8_t idx = port_map(port);
	uint16_t oldtail;
	oldtail = uart_tail[idx];
    1c68:	20 81       	ld	r18, Z
    1c6a:	31 81       	ldd	r19, Z+1	; 0x01
	uart_tail[idx]++;
    1c6c:	80 81       	ld	r24, Z
    1c6e:	91 81       	ldd	r25, Z+1	; 0x01
    1c70:	01 96       	adiw	r24, 0x01	; 1
    1c72:	80 83       	st	Z, r24
    1c74:	91 83       	std	Z+1, r25	; 0x01
	if (uart_tail[idx] >= MAX_BUFFER_LEN){
    1c76:	80 81       	ld	r24, Z
    1c78:	91 81       	ldd	r25, Z+1	; 0x01
    1c7a:	44 e0       	ldi	r20, 0x04	; 4
    1c7c:	80 30       	cpi	r24, 0x00	; 0
    1c7e:	94 07       	cpc	r25, r20
    1c80:	10 f0       	brcs	.+4      	; 0x1c86 <__vector_29+0x60>
		uart_tail[idx] = 0;
    1c82:	10 82       	st	Z, r1
    1c84:	11 82       	std	Z+1, r1	; 0x01
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    1c86:	2e 55       	subi	r18, 0x5E	; 94
    1c88:	37 4c       	sbci	r19, 0xC7	; 199
    1c8a:	e9 01       	movw	r28, r18
    1c8c:	88 81       	ld	r24, Y
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
    1c8e:	eb 01       	movw	r28, r22
    1c90:	88 83       	st	Y, r24
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    1c92:	89 81       	ldd	r24, Y+1	; 0x01
    1c94:	85 fd       	sbrc	r24, 5
    1c96:	07 c0       	rjmp	.+14     	; 0x1ca6 <__vector_29+0x80>
    1c98:	21 c0       	rjmp	.+66     	; 0x1cdc <__vector_29+0xb6>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    1c9a:	a0 ea       	ldi	r26, 0xA0	; 160
    1c9c:	b0 e3       	ldi	r27, 0x30	; 48
    1c9e:	ec ea       	ldi	r30, 0xAC	; 172
    1ca0:	fc e3       	ldi	r31, 0x3C	; 60
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
    1ca2:	60 eb       	ldi	r22, 0xB0	; 176
    1ca4:	78 e0       	ldi	r23, 0x08	; 8
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    1ca6:	8d 91       	ld	r24, X+
    1ca8:	9c 91       	ld	r25, X
    1caa:	11 97       	sbiw	r26, 0x01	; 1
    1cac:	20 81       	ld	r18, Z
    1cae:	31 81       	ldd	r19, Z+1	; 0x01
    1cb0:	82 17       	cp	r24, r18
    1cb2:	93 07       	cpc	r25, r19
    1cb4:	40 f0       	brcs	.+16     	; 0x1cc6 <__vector_29+0xa0>
		return (uart_head[idx] - uart_tail[idx]);
    1cb6:	8d 91       	ld	r24, X+
    1cb8:	9c 91       	ld	r25, X
    1cba:	11 97       	sbiw	r26, 0x01	; 1
    1cbc:	20 81       	ld	r18, Z
    1cbe:	31 81       	ldd	r19, Z+1	; 0x01
    1cc0:	82 1b       	sub	r24, r18
    1cc2:	93 0b       	sbc	r25, r19
    1cc4:	09 c0       	rjmp	.+18     	; 0x1cd8 <__vector_29+0xb2>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    1cc6:	8d 91       	ld	r24, X+
    1cc8:	9c 91       	ld	r25, X
    1cca:	11 97       	sbiw	r26, 0x01	; 1
    1ccc:	20 81       	ld	r18, Z
    1cce:	31 81       	ldd	r19, Z+1	; 0x01
    1cd0:	80 50       	subi	r24, 0x00	; 0
    1cd2:	9c 4f       	sbci	r25, 0xFC	; 252
    1cd4:	82 1b       	sub	r24, r18
    1cd6:	93 0b       	sbc	r25, r19
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    1cd8:	00 97       	sbiw	r24, 0x00	; 0
    1cda:	31 f6       	brne	.-116    	; 0x1c68 <__vector_29+0x42>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    1cdc:	20 91 a0 30 	lds	r18, 0x30A0
    1ce0:	30 91 a1 30 	lds	r19, 0x30A1
    1ce4:	80 91 ac 3c 	lds	r24, 0x3CAC
    1ce8:	90 91 ad 3c 	lds	r25, 0x3CAD
    1cec:	28 17       	cp	r18, r24
    1cee:	39 07       	cpc	r19, r25
    1cf0:	58 f0       	brcs	.+22     	; 0x1d08 <__vector_29+0xe2>
		return (uart_head[idx] - uart_tail[idx]);
    1cf2:	80 91 a0 30 	lds	r24, 0x30A0
    1cf6:	90 91 a1 30 	lds	r25, 0x30A1
    1cfa:	20 91 ac 3c 	lds	r18, 0x3CAC
    1cfe:	30 91 ad 3c 	lds	r19, 0x3CAD
    1d02:	82 1b       	sub	r24, r18
    1d04:	93 0b       	sbc	r25, r19
    1d06:	0c c0       	rjmp	.+24     	; 0x1d20 <__vector_29+0xfa>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    1d08:	80 91 a0 30 	lds	r24, 0x30A0
    1d0c:	90 91 a1 30 	lds	r25, 0x30A1
    1d10:	20 91 ac 3c 	lds	r18, 0x3CAC
    1d14:	30 91 ad 3c 	lds	r19, 0x3CAD
    1d18:	80 50       	subi	r24, 0x00	; 0
    1d1a:	9c 4f       	sbci	r25, 0xFC	; 252
    1d1c:	82 1b       	sub	r24, r18
    1d1e:	93 0b       	sbc	r25, r19
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
	}
	//disable the tx outgoing hardware buffer ready interrupt if we have nothing more to put in it.
	if(uart_count(port)>0) uart_txbuffer_enable(port);
    1d20:	00 97       	sbiw	r24, 0x00	; 0
    1d22:	29 f0       	breq	.+10     	; 0x1d2e <__vector_29+0x108>
    1d24:	80 eb       	ldi	r24, 0xB0	; 176
    1d26:	98 e0       	ldi	r25, 0x08	; 8
    1d28:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <uart_txbuffer_enable>
    1d2c:	04 c0       	rjmp	.+8      	; 0x1d36 <__vector_29+0x110>
	else uart_txbuffer_disable(port);
    1d2e:	80 eb       	ldi	r24, 0xB0	; 176
    1d30:	98 e0       	ldi	r25, 0x08	; 8
    1d32:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <uart_txbuffer_disable>
//************************************************************************

//Must correspond to definitions in uart.h
SIGNAL(USARTC0_DRE_vect) {uart_transmit(&uctrl);}//TX Interrupt
SIGNAL(USARTC0_RXC_vect) {uart_receive(&uctrl);} //RX Interrupt
SIGNAL(USARTC1_DRE_vect) {uart_transmit(&udata);}//TX Interrupt
    1d36:	ff 91       	pop	r31
    1d38:	ef 91       	pop	r30
    1d3a:	df 91       	pop	r29
    1d3c:	cf 91       	pop	r28
    1d3e:	bf 91       	pop	r27
    1d40:	af 91       	pop	r26
    1d42:	9f 91       	pop	r25
    1d44:	8f 91       	pop	r24
    1d46:	7f 91       	pop	r23
    1d48:	6f 91       	pop	r22
    1d4a:	5f 91       	pop	r21
    1d4c:	4f 91       	pop	r20
    1d4e:	3f 91       	pop	r19
    1d50:	2f 91       	pop	r18
    1d52:	0f 90       	pop	r0
    1d54:	0b be       	out	0x3b, r0	; 59
    1d56:	0f 90       	pop	r0
    1d58:	0a be       	out	0x3a, r0	; 58
    1d5a:	0f 90       	pop	r0
    1d5c:	09 be       	out	0x39, r0	; 57
    1d5e:	0f 90       	pop	r0
    1d60:	08 be       	out	0x38, r0	; 56
    1d62:	0f 90       	pop	r0
    1d64:	0f be       	out	0x3f, r0	; 63
    1d66:	0f 90       	pop	r0
    1d68:	1f 90       	pop	r1
    1d6a:	18 95       	reti

00001d6c <__vector_26>:
//** [PORT SPECIFIC CODE]
//************************************************************************
//************************************************************************

//Must correspond to definitions in uart.h
SIGNAL(USARTC0_DRE_vect) {uart_transmit(&uctrl);}//TX Interrupt
    1d6c:	1f 92       	push	r1
    1d6e:	0f 92       	push	r0
    1d70:	0f b6       	in	r0, 0x3f	; 63
    1d72:	0f 92       	push	r0
    1d74:	08 b6       	in	r0, 0x38	; 56
    1d76:	0f 92       	push	r0
    1d78:	09 b6       	in	r0, 0x39	; 57
    1d7a:	0f 92       	push	r0
    1d7c:	0a b6       	in	r0, 0x3a	; 58
    1d7e:	0f 92       	push	r0
    1d80:	0b b6       	in	r0, 0x3b	; 59
    1d82:	0f 92       	push	r0
    1d84:	11 24       	eor	r1, r1
    1d86:	2f 93       	push	r18
    1d88:	3f 93       	push	r19
    1d8a:	4f 93       	push	r20
    1d8c:	5f 93       	push	r21
    1d8e:	6f 93       	push	r22
    1d90:	7f 93       	push	r23
    1d92:	8f 93       	push	r24
    1d94:	9f 93       	push	r25
    1d96:	af 93       	push	r26
    1d98:	bf 93       	push	r27
    1d9a:	cf 93       	push	r28
    1d9c:	df 93       	push	r29
    1d9e:	ef 93       	push	r30
    1da0:	ff 93       	push	r31
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    1da2:	e0 ea       	ldi	r30, 0xA0	; 160
    1da4:	f8 e0       	ldi	r31, 0x08	; 8
    1da6:	81 81       	ldd	r24, Z+1	; 0x01
    1da8:	85 fd       	sbrc	r24, 5
    1daa:	1a c0       	rjmp	.+52     	; 0x1de0 <__vector_26+0x74>
    1dac:	3a c0       	rjmp	.+116    	; 0x1e22 <__vector_26+0xb6>
}

inline uint8_t uart_dequeue(USART_t* port){
	uint8_t idx = port_map(port);
	uint16_t oldtail;
	oldtail = uart_tail[idx];
    1dae:	20 81       	ld	r18, Z
    1db0:	31 81       	ldd	r19, Z+1	; 0x01
	uart_tail[idx]++;
    1db2:	80 81       	ld	r24, Z
    1db4:	91 81       	ldd	r25, Z+1	; 0x01
    1db6:	01 96       	adiw	r24, 0x01	; 1
    1db8:	80 83       	st	Z, r24
    1dba:	91 83       	std	Z+1, r25	; 0x01
	if (uart_tail[idx] >= MAX_BUFFER_LEN){
    1dbc:	80 81       	ld	r24, Z
    1dbe:	91 81       	ldd	r25, Z+1	; 0x01
    1dc0:	44 e0       	ldi	r20, 0x04	; 4
    1dc2:	80 30       	cpi	r24, 0x00	; 0
    1dc4:	94 07       	cpc	r25, r20
    1dc6:	10 f0       	brcs	.+4      	; 0x1dcc <__vector_26+0x60>
		uart_tail[idx] = 0;
    1dc8:	10 82       	st	Z, r1
    1dca:	11 82       	std	Z+1, r1	; 0x01
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    1dcc:	2e 55       	subi	r18, 0x5E	; 94
    1dce:	3b 4c       	sbci	r19, 0xCB	; 203
    1dd0:	e9 01       	movw	r28, r18
    1dd2:	88 81       	ld	r24, Y
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
    1dd4:	eb 01       	movw	r28, r22
    1dd6:	88 83       	st	Y, r24
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    1dd8:	89 81       	ldd	r24, Y+1	; 0x01
    1dda:	85 fd       	sbrc	r24, 5
    1ddc:	07 c0       	rjmp	.+14     	; 0x1dec <__vector_26+0x80>
    1dde:	21 c0       	rjmp	.+66     	; 0x1e22 <__vector_26+0xb6>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    1de0:	ae e9       	ldi	r26, 0x9E	; 158
    1de2:	b0 e3       	ldi	r27, 0x30	; 48
    1de4:	ea ea       	ldi	r30, 0xAA	; 170
    1de6:	fc e3       	ldi	r31, 0x3C	; 60
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
    1de8:	60 ea       	ldi	r22, 0xA0	; 160
    1dea:	78 e0       	ldi	r23, 0x08	; 8
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    1dec:	8d 91       	ld	r24, X+
    1dee:	9c 91       	ld	r25, X
    1df0:	11 97       	sbiw	r26, 0x01	; 1
    1df2:	20 81       	ld	r18, Z
    1df4:	31 81       	ldd	r19, Z+1	; 0x01
    1df6:	82 17       	cp	r24, r18
    1df8:	93 07       	cpc	r25, r19
    1dfa:	40 f0       	brcs	.+16     	; 0x1e0c <__vector_26+0xa0>
		return (uart_head[idx] - uart_tail[idx]);
    1dfc:	8d 91       	ld	r24, X+
    1dfe:	9c 91       	ld	r25, X
    1e00:	11 97       	sbiw	r26, 0x01	; 1
    1e02:	20 81       	ld	r18, Z
    1e04:	31 81       	ldd	r19, Z+1	; 0x01
    1e06:	82 1b       	sub	r24, r18
    1e08:	93 0b       	sbc	r25, r19
    1e0a:	09 c0       	rjmp	.+18     	; 0x1e1e <__vector_26+0xb2>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    1e0c:	8d 91       	ld	r24, X+
    1e0e:	9c 91       	ld	r25, X
    1e10:	11 97       	sbiw	r26, 0x01	; 1
    1e12:	20 81       	ld	r18, Z
    1e14:	31 81       	ldd	r19, Z+1	; 0x01
    1e16:	80 50       	subi	r24, 0x00	; 0
    1e18:	9c 4f       	sbci	r25, 0xFC	; 252
    1e1a:	82 1b       	sub	r24, r18
    1e1c:	93 0b       	sbc	r25, r19
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    1e1e:	00 97       	sbiw	r24, 0x00	; 0
    1e20:	31 f6       	brne	.-116    	; 0x1dae <__vector_26+0x42>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    1e22:	20 91 9e 30 	lds	r18, 0x309E
    1e26:	30 91 9f 30 	lds	r19, 0x309F
    1e2a:	80 91 aa 3c 	lds	r24, 0x3CAA
    1e2e:	90 91 ab 3c 	lds	r25, 0x3CAB
    1e32:	28 17       	cp	r18, r24
    1e34:	39 07       	cpc	r19, r25
    1e36:	58 f0       	brcs	.+22     	; 0x1e4e <__vector_26+0xe2>
		return (uart_head[idx] - uart_tail[idx]);
    1e38:	80 91 9e 30 	lds	r24, 0x309E
    1e3c:	90 91 9f 30 	lds	r25, 0x309F
    1e40:	20 91 aa 3c 	lds	r18, 0x3CAA
    1e44:	30 91 ab 3c 	lds	r19, 0x3CAB
    1e48:	82 1b       	sub	r24, r18
    1e4a:	93 0b       	sbc	r25, r19
    1e4c:	0c c0       	rjmp	.+24     	; 0x1e66 <__vector_26+0xfa>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    1e4e:	80 91 9e 30 	lds	r24, 0x309E
    1e52:	90 91 9f 30 	lds	r25, 0x309F
    1e56:	20 91 aa 3c 	lds	r18, 0x3CAA
    1e5a:	30 91 ab 3c 	lds	r19, 0x3CAB
    1e5e:	80 50       	subi	r24, 0x00	; 0
    1e60:	9c 4f       	sbci	r25, 0xFC	; 252
    1e62:	82 1b       	sub	r24, r18
    1e64:	93 0b       	sbc	r25, r19
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
	}
	//disable the tx outgoing hardware buffer ready interrupt if we have nothing more to put in it.
	if(uart_count(port)>0) uart_txbuffer_enable(port);
    1e66:	00 97       	sbiw	r24, 0x00	; 0
    1e68:	29 f0       	breq	.+10     	; 0x1e74 <__vector_26+0x108>
    1e6a:	80 ea       	ldi	r24, 0xA0	; 160
    1e6c:	98 e0       	ldi	r25, 0x08	; 8
    1e6e:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <uart_txbuffer_enable>
    1e72:	04 c0       	rjmp	.+8      	; 0x1e7c <__vector_26+0x110>
	else uart_txbuffer_disable(port);
    1e74:	80 ea       	ldi	r24, 0xA0	; 160
    1e76:	98 e0       	ldi	r25, 0x08	; 8
    1e78:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <uart_txbuffer_disable>
//** [PORT SPECIFIC CODE]
//************************************************************************
//************************************************************************

//Must correspond to definitions in uart.h
SIGNAL(USARTC0_DRE_vect) {uart_transmit(&uctrl);}//TX Interrupt
    1e7c:	ff 91       	pop	r31
    1e7e:	ef 91       	pop	r30
    1e80:	df 91       	pop	r29
    1e82:	cf 91       	pop	r28
    1e84:	bf 91       	pop	r27
    1e86:	af 91       	pop	r26
    1e88:	9f 91       	pop	r25
    1e8a:	8f 91       	pop	r24
    1e8c:	7f 91       	pop	r23
    1e8e:	6f 91       	pop	r22
    1e90:	5f 91       	pop	r21
    1e92:	4f 91       	pop	r20
    1e94:	3f 91       	pop	r19
    1e96:	2f 91       	pop	r18
    1e98:	0f 90       	pop	r0
    1e9a:	0b be       	out	0x3b, r0	; 59
    1e9c:	0f 90       	pop	r0
    1e9e:	0a be       	out	0x3a, r0	; 58
    1ea0:	0f 90       	pop	r0
    1ea2:	09 be       	out	0x39, r0	; 57
    1ea4:	0f 90       	pop	r0
    1ea6:	08 be       	out	0x38, r0	; 56
    1ea8:	0f 90       	pop	r0
    1eaa:	0f be       	out	0x3f, r0	; 63
    1eac:	0f 90       	pop	r0
    1eae:	1f 90       	pop	r1
    1eb0:	18 95       	reti

00001eb2 <uart_transmit>:
//==================================

//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
    1eb2:	0f 93       	push	r16
    1eb4:	1f 93       	push	r17
    1eb6:	cf 93       	push	r28
    1eb8:	df 93       	push	r29
    1eba:	dc 01       	movw	r26, r24
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    1ebc:	11 96       	adiw	r26, 0x01	; 1
    1ebe:	8c 91       	ld	r24, X
    1ec0:	11 97       	sbiw	r26, 0x01	; 1
    1ec2:	85 fd       	sbrc	r24, 5
    1ec4:	42 c0       	rjmp	.+132    	; 0x1f4a <uart_transmit+0x98>
    1ec6:	91 c0       	rjmp	.+290    	; 0x1fea <uart_transmit+0x138>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    1ec8:	2b e0       	ldi	r18, 0x0B	; 11
    1eca:	a0 3b       	cpi	r26, 0xB0	; 176
    1ecc:	b2 07       	cpc	r27, r18
    1ece:	51 f0       	breq	.+20     	; 0x1ee4 <uart_transmit+0x32>
	if (port == &uctrl) {return 1;}
    1ed0:	38 e0       	ldi	r19, 0x08	; 8
    1ed2:	a0 3a       	cpi	r26, 0xA0	; 160
    1ed4:	b3 07       	cpc	r27, r19
    1ed6:	41 f0       	breq	.+16     	; 0x1ee8 <uart_transmit+0x36>
	if (port == &udata) {return 2;}
    1ed8:	88 e0       	ldi	r24, 0x08	; 8
    1eda:	a0 3b       	cpi	r26, 0xB0	; 176
    1edc:	b8 07       	cpc	r27, r24
    1ede:	31 f4       	brne	.+12     	; 0x1eec <uart_transmit+0x3a>
    1ee0:	22 e0       	ldi	r18, 0x02	; 2
    1ee2:	05 c0       	rjmp	.+10     	; 0x1eee <uart_transmit+0x3c>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    1ee4:	20 e0       	ldi	r18, 0x00	; 0
    1ee6:	03 c0       	rjmp	.+6      	; 0x1eee <uart_transmit+0x3c>
	if (port == &uctrl) {return 1;}
    1ee8:	21 e0       	ldi	r18, 0x01	; 1
    1eea:	01 c0       	rjmp	.+2      	; 0x1eee <uart_transmit+0x3c>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    1eec:	20 e0       	ldi	r18, 0x00	; 0
}

inline uint8_t uart_dequeue(USART_t* port){
	uint8_t idx = port_map(port);
	uint16_t oldtail;
	oldtail = uart_tail[idx];
    1eee:	30 e0       	ldi	r19, 0x00	; 0
    1ef0:	c9 01       	movw	r24, r18
    1ef2:	88 0f       	add	r24, r24
    1ef4:	99 1f       	adc	r25, r25
    1ef6:	fb 01       	movw	r30, r22
    1ef8:	e8 0f       	add	r30, r24
    1efa:	f9 1f       	adc	r31, r25
    1efc:	40 81       	ld	r20, Z
    1efe:	51 81       	ldd	r21, Z+1	; 0x01
	uart_tail[idx]++;
    1f00:	80 81       	ld	r24, Z
    1f02:	91 81       	ldd	r25, Z+1	; 0x01
    1f04:	01 96       	adiw	r24, 0x01	; 1
    1f06:	80 83       	st	Z, r24
    1f08:	91 83       	std	Z+1, r25	; 0x01
	if (uart_tail[idx] >= MAX_BUFFER_LEN){
    1f0a:	80 81       	ld	r24, Z
    1f0c:	91 81       	ldd	r25, Z+1	; 0x01
    1f0e:	e4 e0       	ldi	r30, 0x04	; 4
    1f10:	80 30       	cpi	r24, 0x00	; 0
    1f12:	9e 07       	cpc	r25, r30
    1f14:	40 f0       	brcs	.+16     	; 0x1f26 <uart_transmit+0x74>
		uart_tail[idx] = 0;
    1f16:	c9 01       	movw	r24, r18
    1f18:	88 0f       	add	r24, r24
    1f1a:	99 1f       	adc	r25, r25
    1f1c:	86 0f       	add	r24, r22
    1f1e:	97 1f       	adc	r25, r23
    1f20:	fc 01       	movw	r30, r24
    1f22:	10 82       	st	Z, r1
    1f24:	11 82       	std	Z+1, r1	; 0x01
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    1f26:	c9 01       	movw	r24, r18
    1f28:	98 2f       	mov	r25, r24
    1f2a:	88 27       	eor	r24, r24
    1f2c:	99 0f       	add	r25, r25
    1f2e:	99 0f       	add	r25, r25
    1f30:	84 0f       	add	r24, r20
    1f32:	95 1f       	adc	r25, r21
    1f34:	f8 01       	movw	r30, r16
    1f36:	e8 0f       	add	r30, r24
    1f38:	f9 1f       	adc	r31, r25
    1f3a:	80 81       	ld	r24, Z
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
    1f3c:	8c 93       	st	X, r24
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    1f3e:	11 96       	adiw	r26, 0x01	; 1
    1f40:	8c 91       	ld	r24, X
    1f42:	11 97       	sbiw	r26, 0x01	; 1
    1f44:	85 fd       	sbrc	r24, 5
    1f46:	07 c0       	rjmp	.+14     	; 0x1f56 <uart_transmit+0xa4>
    1f48:	50 c0       	rjmp	.+160    	; 0x1fea <uart_transmit+0x138>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    1f4a:	cc e9       	ldi	r28, 0x9C	; 156
    1f4c:	d0 e3       	ldi	r29, 0x30	; 48
    1f4e:	68 ea       	ldi	r22, 0xA8	; 168
    1f50:	7c e3       	ldi	r23, 0x3C	; 60
		uart_tail[idx] = 0;
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    1f52:	02 ea       	ldi	r16, 0xA2	; 162
    1f54:	10 e3       	ldi	r17, 0x30	; 48
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    1f56:	fb e0       	ldi	r31, 0x0B	; 11
    1f58:	a0 3b       	cpi	r26, 0xB0	; 176
    1f5a:	bf 07       	cpc	r27, r31
    1f5c:	51 f0       	breq	.+20     	; 0x1f72 <uart_transmit+0xc0>
	if (port == &uctrl) {return 1;}
    1f5e:	28 e0       	ldi	r18, 0x08	; 8
    1f60:	a0 3a       	cpi	r26, 0xA0	; 160
    1f62:	b2 07       	cpc	r27, r18
    1f64:	41 f0       	breq	.+16     	; 0x1f76 <uart_transmit+0xc4>
	if (port == &udata) {return 2;}
    1f66:	38 e0       	ldi	r19, 0x08	; 8
    1f68:	a0 3b       	cpi	r26, 0xB0	; 176
    1f6a:	b3 07       	cpc	r27, r19
    1f6c:	31 f4       	brne	.+12     	; 0x1f7a <uart_transmit+0xc8>
    1f6e:	22 e0       	ldi	r18, 0x02	; 2
    1f70:	05 c0       	rjmp	.+10     	; 0x1f7c <uart_transmit+0xca>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    1f72:	20 e0       	ldi	r18, 0x00	; 0
    1f74:	03 c0       	rjmp	.+6      	; 0x1f7c <uart_transmit+0xca>
	if (port == &uctrl) {return 1;}
    1f76:	21 e0       	ldi	r18, 0x01	; 1
    1f78:	01 c0       	rjmp	.+2      	; 0x1f7c <uart_transmit+0xca>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    1f7a:	20 e0       	ldi	r18, 0x00	; 0
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    1f7c:	30 e0       	ldi	r19, 0x00	; 0
    1f7e:	c9 01       	movw	r24, r18
    1f80:	88 0f       	add	r24, r24
    1f82:	99 1f       	adc	r25, r25
    1f84:	fe 01       	movw	r30, r28
    1f86:	e8 0f       	add	r30, r24
    1f88:	f9 1f       	adc	r31, r25
    1f8a:	40 81       	ld	r20, Z
    1f8c:	51 81       	ldd	r21, Z+1	; 0x01
    1f8e:	fb 01       	movw	r30, r22
    1f90:	e8 0f       	add	r30, r24
    1f92:	f9 1f       	adc	r31, r25
    1f94:	80 81       	ld	r24, Z
    1f96:	91 81       	ldd	r25, Z+1	; 0x01
    1f98:	48 17       	cp	r20, r24
    1f9a:	59 07       	cpc	r21, r25
    1f9c:	88 f0       	brcs	.+34     	; 0x1fc0 <uart_transmit+0x10e>
		return (uart_head[idx] - uart_tail[idx]);
    1f9e:	22 0f       	add	r18, r18
    1fa0:	33 1f       	adc	r19, r19
    1fa2:	fe 01       	movw	r30, r28
    1fa4:	e2 0f       	add	r30, r18
    1fa6:	f3 1f       	adc	r31, r19
    1fa8:	40 81       	ld	r20, Z
    1faa:	51 81       	ldd	r21, Z+1	; 0x01
    1fac:	fb 01       	movw	r30, r22
    1fae:	e2 0f       	add	r30, r18
    1fb0:	f3 1f       	adc	r31, r19
    1fb2:	80 81       	ld	r24, Z
    1fb4:	91 81       	ldd	r25, Z+1	; 0x01
    1fb6:	fa 01       	movw	r30, r20
    1fb8:	e8 1b       	sub	r30, r24
    1fba:	f9 0b       	sbc	r31, r25
    1fbc:	cf 01       	movw	r24, r30
    1fbe:	12 c0       	rjmp	.+36     	; 0x1fe4 <uart_transmit+0x132>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    1fc0:	c9 01       	movw	r24, r18
    1fc2:	88 0f       	add	r24, r24
    1fc4:	99 1f       	adc	r25, r25
    1fc6:	fe 01       	movw	r30, r28
    1fc8:	e8 0f       	add	r30, r24
    1fca:	f9 1f       	adc	r31, r25
    1fcc:	40 81       	ld	r20, Z
    1fce:	51 81       	ldd	r21, Z+1	; 0x01
    1fd0:	fb 01       	movw	r30, r22
    1fd2:	e8 0f       	add	r30, r24
    1fd4:	f9 1f       	adc	r31, r25
    1fd6:	20 81       	ld	r18, Z
    1fd8:	31 81       	ldd	r19, Z+1	; 0x01
    1fda:	ca 01       	movw	r24, r20
    1fdc:	80 50       	subi	r24, 0x00	; 0
    1fde:	9c 4f       	sbci	r25, 0xFC	; 252
    1fe0:	82 1b       	sub	r24, r18
    1fe2:	93 0b       	sbc	r25, r19
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    1fe4:	00 97       	sbiw	r24, 0x00	; 0
    1fe6:	09 f0       	breq	.+2      	; 0x1fea <uart_transmit+0x138>
    1fe8:	6f cf       	rjmp	.-290    	; 0x1ec8 <uart_transmit+0x16>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    1fea:	fb e0       	ldi	r31, 0x0B	; 11
    1fec:	a0 3b       	cpi	r26, 0xB0	; 176
    1fee:	bf 07       	cpc	r27, r31
    1ff0:	51 f0       	breq	.+20     	; 0x2006 <uart_transmit+0x154>
	if (port == &uctrl) {return 1;}
    1ff2:	28 e0       	ldi	r18, 0x08	; 8
    1ff4:	a0 3a       	cpi	r26, 0xA0	; 160
    1ff6:	b2 07       	cpc	r27, r18
    1ff8:	41 f0       	breq	.+16     	; 0x200a <uart_transmit+0x158>
	if (port == &udata) {return 2;}
    1ffa:	38 e0       	ldi	r19, 0x08	; 8
    1ffc:	a0 3b       	cpi	r26, 0xB0	; 176
    1ffe:	b3 07       	cpc	r27, r19
    2000:	31 f4       	brne	.+12     	; 0x200e <uart_transmit+0x15c>
    2002:	22 e0       	ldi	r18, 0x02	; 2
    2004:	05 c0       	rjmp	.+10     	; 0x2010 <uart_transmit+0x15e>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    2006:	20 e0       	ldi	r18, 0x00	; 0
    2008:	03 c0       	rjmp	.+6      	; 0x2010 <uart_transmit+0x15e>
	if (port == &uctrl) {return 1;}
    200a:	21 e0       	ldi	r18, 0x01	; 1
    200c:	01 c0       	rjmp	.+2      	; 0x2010 <uart_transmit+0x15e>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    200e:	20 e0       	ldi	r18, 0x00	; 0
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    2010:	30 e0       	ldi	r19, 0x00	; 0
    2012:	c9 01       	movw	r24, r18
    2014:	88 0f       	add	r24, r24
    2016:	99 1f       	adc	r25, r25
    2018:	fc 01       	movw	r30, r24
    201a:	e4 56       	subi	r30, 0x64	; 100
    201c:	ff 4c       	sbci	r31, 0xCF	; 207
    201e:	40 81       	ld	r20, Z
    2020:	51 81       	ldd	r21, Z+1	; 0x01
    2022:	88 55       	subi	r24, 0x58	; 88
    2024:	93 4c       	sbci	r25, 0xC3	; 195
    2026:	fc 01       	movw	r30, r24
    2028:	80 81       	ld	r24, Z
    202a:	91 81       	ldd	r25, Z+1	; 0x01
    202c:	48 17       	cp	r20, r24
    202e:	59 07       	cpc	r21, r25
    2030:	78 f0       	brcs	.+30     	; 0x2050 <uart_transmit+0x19e>
		return (uart_head[idx] - uart_tail[idx]);
    2032:	22 0f       	add	r18, r18
    2034:	33 1f       	adc	r19, r19
    2036:	f9 01       	movw	r30, r18
    2038:	e4 56       	subi	r30, 0x64	; 100
    203a:	ff 4c       	sbci	r31, 0xCF	; 207
    203c:	40 81       	ld	r20, Z
    203e:	51 81       	ldd	r21, Z+1	; 0x01
    2040:	28 55       	subi	r18, 0x58	; 88
    2042:	33 4c       	sbci	r19, 0xC3	; 195
    2044:	f9 01       	movw	r30, r18
    2046:	80 81       	ld	r24, Z
    2048:	91 81       	ldd	r25, Z+1	; 0x01
    204a:	48 1b       	sub	r20, r24
    204c:	59 0b       	sbc	r21, r25
    204e:	10 c0       	rjmp	.+32     	; 0x2070 <uart_transmit+0x1be>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    2050:	22 0f       	add	r18, r18
    2052:	33 1f       	adc	r19, r19
    2054:	f9 01       	movw	r30, r18
    2056:	e4 56       	subi	r30, 0x64	; 100
    2058:	ff 4c       	sbci	r31, 0xCF	; 207
    205a:	40 81       	ld	r20, Z
    205c:	51 81       	ldd	r21, Z+1	; 0x01
    205e:	28 55       	subi	r18, 0x58	; 88
    2060:	33 4c       	sbci	r19, 0xC3	; 195
    2062:	f9 01       	movw	r30, r18
    2064:	80 81       	ld	r24, Z
    2066:	91 81       	ldd	r25, Z+1	; 0x01
    2068:	40 50       	subi	r20, 0x00	; 0
    206a:	5c 4f       	sbci	r21, 0xFC	; 252
    206c:	48 1b       	sub	r20, r24
    206e:	59 0b       	sbc	r21, r25
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
	}
	//disable the tx outgoing hardware buffer ready interrupt if we have nothing more to put in it.
	if(uart_count(port)>0) uart_txbuffer_enable(port);
    2070:	41 15       	cp	r20, r1
    2072:	51 05       	cpc	r21, r1
    2074:	21 f0       	breq	.+8      	; 0x207e <uart_transmit+0x1cc>
    2076:	cd 01       	movw	r24, r26
    2078:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <uart_txbuffer_enable>
    207c:	03 c0       	rjmp	.+6      	; 0x2084 <uart_transmit+0x1d2>
	else uart_txbuffer_disable(port);
    207e:	cd 01       	movw	r24, r26
    2080:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <uart_txbuffer_disable>
}
    2084:	df 91       	pop	r29
    2086:	cf 91       	pop	r28
    2088:	1f 91       	pop	r17
    208a:	0f 91       	pop	r16
    208c:	08 95       	ret

0000208e <uart_transmit_lcd>:

void inline uart_transmit_lcd(USART_t* port){
    208e:	3f 92       	push	r3
    2090:	4f 92       	push	r4
    2092:	5f 92       	push	r5
    2094:	6f 92       	push	r6
    2096:	7f 92       	push	r7
    2098:	8f 92       	push	r8
    209a:	9f 92       	push	r9
    209c:	af 92       	push	r10
    209e:	bf 92       	push	r11
    20a0:	cf 92       	push	r12
    20a2:	df 92       	push	r13
    20a4:	ef 92       	push	r14
    20a6:	ff 92       	push	r15
    20a8:	0f 93       	push	r16
    20aa:	1f 93       	push	r17
    20ac:	cf 93       	push	r28
    20ae:	df 93       	push	r29
    20b0:	5c 01       	movw	r10, r24
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    20b2:	0f 2e       	mov	r0, r31
    20b4:	fc e9       	ldi	r31, 0x9C	; 156
    20b6:	6f 2e       	mov	r6, r31
    20b8:	f0 e3       	ldi	r31, 0x30	; 48
    20ba:	7f 2e       	mov	r7, r31
    20bc:	f0 2d       	mov	r31, r0
    20be:	0f 2e       	mov	r0, r31
    20c0:	f8 ea       	ldi	r31, 0xA8	; 168
    20c2:	8f 2e       	mov	r8, r31
    20c4:	fc e3       	ldi	r31, 0x3C	; 60
    20c6:	9f 2e       	mov	r9, r31
    20c8:	f0 2d       	mov	r31, r0
		uart_tail[idx] = 0;
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    20ca:	0f 2e       	mov	r0, r31
    20cc:	f2 ea       	ldi	r31, 0xA2	; 162
    20ce:	4f 2e       	mov	r4, r31
    20d0:	f0 e3       	ldi	r31, 0x30	; 48
    20d2:	5f 2e       	mov	r5, r31
    20d4:	f0 2d       	mov	r31, r0
#ifndef UART_DEBUG
	uint8_t idx = port_map(port);
	
	//if (idx==0){uart_enqueue(&uctrl, datain);} //xxx
	
	uart_buffer[idx][uart_head[idx]] = datain;
    20d6:	0e e9       	ldi	r16, 0x9E	; 158
    20d8:	10 e3       	ldi	r17, 0x30	; 48
    20da:	0f 2e       	mov	r0, r31
    20dc:	fb e2       	ldi	r31, 0x2B	; 43
    20de:	cf 2e       	mov	r12, r31
    20e0:	f0 2d       	mov	r31, r0
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    20e2:	0f 2e       	mov	r0, r31
    20e4:	f0 ea       	ldi	r31, 0xA0	; 160
    20e6:	ef 2e       	mov	r14, r31
    20e8:	f8 e0       	ldi	r31, 0x08	; 8
    20ea:	ff 2e       	mov	r15, r31
    20ec:	f0 2d       	mov	r31, r0
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    20ee:	ca ea       	ldi	r28, 0xAA	; 170
    20f0:	dc e3       	ldi	r29, 0x3C	; 60
				lcd_flow_type = toSend;
				break;
			default:
				//Payload bytes -- send to LCD
				uart_enqueue(&uctrl, toSend); //echo to data port -- xxx
				if (toSend == 0x0D) {lcd_flow_control = LCD_BUSY;}
    20f2:	0f 2e       	mov	r0, r31
    20f4:	fe e4       	ldi	r31, 0x4E	; 78
    20f6:	3f 2e       	mov	r3, r31
    20f8:	f0 2d       	mov	r31, r0
}

void inline uart_transmit_lcd(USART_t* port){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0) && (lcd_flow_control == LCD_READY)){
    20fa:	95 c1       	rjmp	.+810    	; 0x2426 <uart_transmit_lcd+0x398>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    20fc:	20 eb       	ldi	r18, 0xB0	; 176
    20fe:	a2 16       	cp	r10, r18
    2100:	2b e0       	ldi	r18, 0x0B	; 11
    2102:	b2 06       	cpc	r11, r18
    2104:	61 f0       	breq	.+24     	; 0x211e <uart_transmit_lcd+0x90>
	if (port == &uctrl) {return 1;}
    2106:	30 ea       	ldi	r19, 0xA0	; 160
    2108:	a3 16       	cp	r10, r19
    210a:	38 e0       	ldi	r19, 0x08	; 8
    210c:	b3 06       	cpc	r11, r19
    210e:	49 f0       	breq	.+18     	; 0x2122 <uart_transmit_lcd+0x94>
	if (port == &udata) {return 2;}
    2110:	60 eb       	ldi	r22, 0xB0	; 176
    2112:	a6 16       	cp	r10, r22
    2114:	68 e0       	ldi	r22, 0x08	; 8
    2116:	b6 06       	cpc	r11, r22
    2118:	31 f4       	brne	.+12     	; 0x2126 <uart_transmit_lcd+0x98>
    211a:	22 e0       	ldi	r18, 0x02	; 2
    211c:	05 c0       	rjmp	.+10     	; 0x2128 <uart_transmit_lcd+0x9a>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    211e:	20 e0       	ldi	r18, 0x00	; 0
    2120:	03 c0       	rjmp	.+6      	; 0x2128 <uart_transmit_lcd+0x9a>
	if (port == &uctrl) {return 1;}
    2122:	21 e0       	ldi	r18, 0x01	; 1
    2124:	01 c0       	rjmp	.+2      	; 0x2128 <uart_transmit_lcd+0x9a>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    2126:	20 e0       	ldi	r18, 0x00	; 0
}

inline uint8_t uart_dequeue(USART_t* port){
	uint8_t idx = port_map(port);
	uint16_t oldtail;
	oldtail = uart_tail[idx];
    2128:	30 e0       	ldi	r19, 0x00	; 0
    212a:	c9 01       	movw	r24, r18
    212c:	88 0f       	add	r24, r24
    212e:	99 1f       	adc	r25, r25
    2130:	f4 01       	movw	r30, r8
    2132:	e8 0f       	add	r30, r24
    2134:	f9 1f       	adc	r31, r25
    2136:	40 81       	ld	r20, Z
    2138:	51 81       	ldd	r21, Z+1	; 0x01
	uart_tail[idx]++;
    213a:	80 81       	ld	r24, Z
    213c:	91 81       	ldd	r25, Z+1	; 0x01
    213e:	01 96       	adiw	r24, 0x01	; 1
    2140:	80 83       	st	Z, r24
    2142:	91 83       	std	Z+1, r25	; 0x01
	if (uart_tail[idx] >= MAX_BUFFER_LEN){
    2144:	80 81       	ld	r24, Z
    2146:	91 81       	ldd	r25, Z+1	; 0x01
    2148:	e4 e0       	ldi	r30, 0x04	; 4
    214a:	80 30       	cpi	r24, 0x00	; 0
    214c:	9e 07       	cpc	r25, r30
    214e:	40 f0       	brcs	.+16     	; 0x2160 <uart_transmit_lcd+0xd2>
		uart_tail[idx] = 0;
    2150:	c9 01       	movw	r24, r18
    2152:	88 0f       	add	r24, r24
    2154:	99 1f       	adc	r25, r25
    2156:	88 0d       	add	r24, r8
    2158:	99 1d       	adc	r25, r9
    215a:	fc 01       	movw	r30, r24
    215c:	10 82       	st	Z, r1
    215e:	11 82       	std	Z+1, r1	; 0x01
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    2160:	c9 01       	movw	r24, r18
    2162:	98 2f       	mov	r25, r24
    2164:	88 27       	eor	r24, r24
    2166:	99 0f       	add	r25, r25
    2168:	99 0f       	add	r25, r25
    216a:	84 0f       	add	r24, r20
    216c:	95 1f       	adc	r25, r21
    216e:	84 0d       	add	r24, r4
    2170:	95 1d       	adc	r25, r5
    2172:	fc 01       	movw	r30, r24
    2174:	d0 80       	ld	r13, Z
void inline uart_transmit_lcd(USART_t* port){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0) && (lcd_flow_control == LCD_READY)){
		toSend = uart_dequeue(port);
		switch(toSend){
    2176:	fa ef       	ldi	r31, 0xFA	; 250
    2178:	df 16       	cp	r13, r31
    217a:	21 f0       	breq	.+8      	; 0x2184 <uart_transmit_lcd+0xf6>
    217c:	2e ef       	ldi	r18, 0xFE	; 254
    217e:	d2 16       	cp	r13, r18
    2180:	09 f0       	breq	.+2      	; 0x2184 <uart_transmit_lcd+0xf6>
    2182:	dd c0       	rjmp	.+442    	; 0x233e <uart_transmit_lcd+0x2b0>
#ifndef UART_DEBUG
	uint8_t idx = port_map(port);
	
	//if (idx==0){uart_enqueue(&uctrl, datain);} //xxx
	
	uart_buffer[idx][uart_head[idx]] = datain;
    2184:	f8 01       	movw	r30, r16
    2186:	80 81       	ld	r24, Z
    2188:	91 81       	ldd	r25, Z+1	; 0x01
    218a:	8e 55       	subi	r24, 0x5E	; 94
    218c:	9b 4c       	sbci	r25, 0xCB	; 203
    218e:	fc 01       	movw	r30, r24
    2190:	c0 82       	st	Z, r12
	uart_head[idx]++;
    2192:	f8 01       	movw	r30, r16
    2194:	80 81       	ld	r24, Z
    2196:	91 81       	ldd	r25, Z+1	; 0x01
    2198:	01 96       	adiw	r24, 0x01	; 1
    219a:	80 83       	st	Z, r24
    219c:	91 83       	std	Z+1, r25	; 0x01
	if (uart_head[idx] >= MAX_BUFFER_LEN){
    219e:	80 81       	ld	r24, Z
    21a0:	91 81       	ldd	r25, Z+1	; 0x01
    21a2:	f4 e0       	ldi	r31, 0x04	; 4
    21a4:	80 30       	cpi	r24, 0x00	; 0
    21a6:	9f 07       	cpc	r25, r31
    21a8:	18 f0       	brcs	.+6      	; 0x21b0 <uart_transmit_lcd+0x122>
		uart_head[idx] = 0;
    21aa:	f8 01       	movw	r30, r16
    21ac:	10 82       	st	Z, r1
    21ae:	11 82       	std	Z+1, r1	; 0x01
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    21b0:	f7 01       	movw	r30, r14
    21b2:	81 81       	ldd	r24, Z+1	; 0x01
    21b4:	85 fd       	sbrc	r24, 5
    21b6:	18 c0       	rjmp	.+48     	; 0x21e8 <uart_transmit_lcd+0x15a>
    21b8:	31 c0       	rjmp	.+98     	; 0x221c <uart_transmit_lcd+0x18e>
}

inline uint8_t uart_dequeue(USART_t* port){
	uint8_t idx = port_map(port);
	uint16_t oldtail;
	oldtail = uart_tail[idx];
    21ba:	e8 81       	ld	r30, Y
    21bc:	f9 81       	ldd	r31, Y+1	; 0x01
	uart_tail[idx]++;
    21be:	88 81       	ld	r24, Y
    21c0:	99 81       	ldd	r25, Y+1	; 0x01
    21c2:	01 96       	adiw	r24, 0x01	; 1
    21c4:	88 83       	st	Y, r24
    21c6:	99 83       	std	Y+1, r25	; 0x01
	if (uart_tail[idx] >= MAX_BUFFER_LEN){
    21c8:	88 81       	ld	r24, Y
    21ca:	99 81       	ldd	r25, Y+1	; 0x01
    21cc:	24 e0       	ldi	r18, 0x04	; 4
    21ce:	80 30       	cpi	r24, 0x00	; 0
    21d0:	92 07       	cpc	r25, r18
    21d2:	10 f0       	brcs	.+4      	; 0x21d8 <uart_transmit_lcd+0x14a>
		uart_tail[idx] = 0;
    21d4:	18 82       	st	Y, r1
    21d6:	19 82       	std	Y+1, r1	; 0x01
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    21d8:	ee 55       	subi	r30, 0x5E	; 94
    21da:	fb 4c       	sbci	r31, 0xCB	; 203
    21dc:	80 81       	ld	r24, Z
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
    21de:	f7 01       	movw	r30, r14
    21e0:	80 83       	st	Z, r24
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    21e2:	81 81       	ldd	r24, Z+1	; 0x01
    21e4:	85 ff       	sbrs	r24, 5
    21e6:	1a c0       	rjmp	.+52     	; 0x221c <uart_transmit_lcd+0x18e>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    21e8:	f8 01       	movw	r30, r16
    21ea:	80 81       	ld	r24, Z
    21ec:	91 81       	ldd	r25, Z+1	; 0x01
    21ee:	28 81       	ld	r18, Y
    21f0:	39 81       	ldd	r19, Y+1	; 0x01
    21f2:	82 17       	cp	r24, r18
    21f4:	93 07       	cpc	r25, r19
    21f6:	38 f0       	brcs	.+14     	; 0x2206 <uart_transmit_lcd+0x178>
		return (uart_head[idx] - uart_tail[idx]);
    21f8:	80 81       	ld	r24, Z
    21fa:	91 81       	ldd	r25, Z+1	; 0x01
    21fc:	28 81       	ld	r18, Y
    21fe:	39 81       	ldd	r19, Y+1	; 0x01
    2200:	82 1b       	sub	r24, r18
    2202:	93 0b       	sbc	r25, r19
    2204:	09 c0       	rjmp	.+18     	; 0x2218 <uart_transmit_lcd+0x18a>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    2206:	f8 01       	movw	r30, r16
    2208:	80 81       	ld	r24, Z
    220a:	91 81       	ldd	r25, Z+1	; 0x01
    220c:	28 81       	ld	r18, Y
    220e:	39 81       	ldd	r19, Y+1	; 0x01
    2210:	80 50       	subi	r24, 0x00	; 0
    2212:	9c 4f       	sbci	r25, 0xFC	; 252
    2214:	82 1b       	sub	r24, r18
    2216:	93 0b       	sbc	r25, r19
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    2218:	00 97       	sbiw	r24, 0x00	; 0
    221a:	79 f6       	brne	.-98     	; 0x21ba <uart_transmit_lcd+0x12c>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    221c:	f8 01       	movw	r30, r16
    221e:	80 81       	ld	r24, Z
    2220:	91 81       	ldd	r25, Z+1	; 0x01
    2222:	28 81       	ld	r18, Y
    2224:	39 81       	ldd	r19, Y+1	; 0x01
    2226:	82 17       	cp	r24, r18
    2228:	93 07       	cpc	r25, r19
    222a:	38 f0       	brcs	.+14     	; 0x223a <uart_transmit_lcd+0x1ac>
		return (uart_head[idx] - uart_tail[idx]);
    222c:	80 81       	ld	r24, Z
    222e:	91 81       	ldd	r25, Z+1	; 0x01
    2230:	28 81       	ld	r18, Y
    2232:	39 81       	ldd	r19, Y+1	; 0x01
    2234:	82 1b       	sub	r24, r18
    2236:	93 0b       	sbc	r25, r19
    2238:	09 c0       	rjmp	.+18     	; 0x224c <uart_transmit_lcd+0x1be>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    223a:	f8 01       	movw	r30, r16
    223c:	80 81       	ld	r24, Z
    223e:	91 81       	ldd	r25, Z+1	; 0x01
    2240:	28 81       	ld	r18, Y
    2242:	39 81       	ldd	r19, Y+1	; 0x01
    2244:	80 50       	subi	r24, 0x00	; 0
    2246:	9c 4f       	sbci	r25, 0xFC	; 252
    2248:	82 1b       	sub	r24, r18
    224a:	93 0b       	sbc	r25, r19
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
	}
	//disable the tx outgoing hardware buffer ready interrupt if we have nothing more to put in it.
	if(uart_count(port)>0) uart_txbuffer_enable(port);
    224c:	00 97       	sbiw	r24, 0x00	; 0
    224e:	21 f0       	breq	.+8      	; 0x2258 <uart_transmit_lcd+0x1ca>
    2250:	c7 01       	movw	r24, r14
    2252:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <uart_txbuffer_enable>
    2256:	03 c0       	rjmp	.+6      	; 0x225e <uart_transmit_lcd+0x1d0>
	else uart_txbuffer_disable(port);
    2258:	c7 01       	movw	r24, r14
    225a:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <uart_txbuffer_disable>
#ifndef UART_DEBUG
	uint8_t idx = port_map(port);
	
	//if (idx==0){uart_enqueue(&uctrl, datain);} //xxx
	
	uart_buffer[idx][uart_head[idx]] = datain;
    225e:	f8 01       	movw	r30, r16
    2260:	80 81       	ld	r24, Z
    2262:	91 81       	ldd	r25, Z+1	; 0x01
    2264:	8e 55       	subi	r24, 0x5E	; 94
    2266:	9b 4c       	sbci	r25, 0xCB	; 203
    2268:	fc 01       	movw	r30, r24
    226a:	d0 82       	st	Z, r13
	uart_head[idx]++;
    226c:	f8 01       	movw	r30, r16
    226e:	80 81       	ld	r24, Z
    2270:	91 81       	ldd	r25, Z+1	; 0x01
    2272:	01 96       	adiw	r24, 0x01	; 1
    2274:	80 83       	st	Z, r24
    2276:	91 83       	std	Z+1, r25	; 0x01
	if (uart_head[idx] >= MAX_BUFFER_LEN){
    2278:	80 81       	ld	r24, Z
    227a:	91 81       	ldd	r25, Z+1	; 0x01
    227c:	f4 e0       	ldi	r31, 0x04	; 4
    227e:	80 30       	cpi	r24, 0x00	; 0
    2280:	9f 07       	cpc	r25, r31
    2282:	18 f0       	brcs	.+6      	; 0x228a <uart_transmit_lcd+0x1fc>
		uart_head[idx] = 0;
    2284:	f8 01       	movw	r30, r16
    2286:	10 82       	st	Z, r1
    2288:	11 82       	std	Z+1, r1	; 0x01
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    228a:	f7 01       	movw	r30, r14
    228c:	81 81       	ldd	r24, Z+1	; 0x01
    228e:	85 fd       	sbrc	r24, 5
    2290:	18 c0       	rjmp	.+48     	; 0x22c2 <uart_transmit_lcd+0x234>
    2292:	31 c0       	rjmp	.+98     	; 0x22f6 <uart_transmit_lcd+0x268>
}

inline uint8_t uart_dequeue(USART_t* port){
	uint8_t idx = port_map(port);
	uint16_t oldtail;
	oldtail = uart_tail[idx];
    2294:	e8 81       	ld	r30, Y
    2296:	f9 81       	ldd	r31, Y+1	; 0x01
	uart_tail[idx]++;
    2298:	88 81       	ld	r24, Y
    229a:	99 81       	ldd	r25, Y+1	; 0x01
    229c:	01 96       	adiw	r24, 0x01	; 1
    229e:	88 83       	st	Y, r24
    22a0:	99 83       	std	Y+1, r25	; 0x01
	if (uart_tail[idx] >= MAX_BUFFER_LEN){
    22a2:	88 81       	ld	r24, Y
    22a4:	99 81       	ldd	r25, Y+1	; 0x01
    22a6:	24 e0       	ldi	r18, 0x04	; 4
    22a8:	80 30       	cpi	r24, 0x00	; 0
    22aa:	92 07       	cpc	r25, r18
    22ac:	10 f0       	brcs	.+4      	; 0x22b2 <uart_transmit_lcd+0x224>
		uart_tail[idx] = 0;
    22ae:	18 82       	st	Y, r1
    22b0:	19 82       	std	Y+1, r1	; 0x01
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    22b2:	ee 55       	subi	r30, 0x5E	; 94
    22b4:	fb 4c       	sbci	r31, 0xCB	; 203
    22b6:	80 81       	ld	r24, Z
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
    22b8:	f7 01       	movw	r30, r14
    22ba:	80 83       	st	Z, r24
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    22bc:	81 81       	ldd	r24, Z+1	; 0x01
    22be:	85 ff       	sbrs	r24, 5
    22c0:	1a c0       	rjmp	.+52     	; 0x22f6 <uart_transmit_lcd+0x268>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    22c2:	f8 01       	movw	r30, r16
    22c4:	80 81       	ld	r24, Z
    22c6:	91 81       	ldd	r25, Z+1	; 0x01
    22c8:	28 81       	ld	r18, Y
    22ca:	39 81       	ldd	r19, Y+1	; 0x01
    22cc:	82 17       	cp	r24, r18
    22ce:	93 07       	cpc	r25, r19
    22d0:	38 f0       	brcs	.+14     	; 0x22e0 <uart_transmit_lcd+0x252>
		return (uart_head[idx] - uart_tail[idx]);
    22d2:	80 81       	ld	r24, Z
    22d4:	91 81       	ldd	r25, Z+1	; 0x01
    22d6:	28 81       	ld	r18, Y
    22d8:	39 81       	ldd	r19, Y+1	; 0x01
    22da:	82 1b       	sub	r24, r18
    22dc:	93 0b       	sbc	r25, r19
    22de:	09 c0       	rjmp	.+18     	; 0x22f2 <uart_transmit_lcd+0x264>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    22e0:	f8 01       	movw	r30, r16
    22e2:	80 81       	ld	r24, Z
    22e4:	91 81       	ldd	r25, Z+1	; 0x01
    22e6:	28 81       	ld	r18, Y
    22e8:	39 81       	ldd	r19, Y+1	; 0x01
    22ea:	80 50       	subi	r24, 0x00	; 0
    22ec:	9c 4f       	sbci	r25, 0xFC	; 252
    22ee:	82 1b       	sub	r24, r18
    22f0:	93 0b       	sbc	r25, r19
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    22f2:	00 97       	sbiw	r24, 0x00	; 0
    22f4:	79 f6       	brne	.-98     	; 0x2294 <uart_transmit_lcd+0x206>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    22f6:	f8 01       	movw	r30, r16
    22f8:	80 81       	ld	r24, Z
    22fa:	91 81       	ldd	r25, Z+1	; 0x01
    22fc:	28 81       	ld	r18, Y
    22fe:	39 81       	ldd	r19, Y+1	; 0x01
    2300:	82 17       	cp	r24, r18
    2302:	93 07       	cpc	r25, r19
    2304:	38 f0       	brcs	.+14     	; 0x2314 <uart_transmit_lcd+0x286>
		return (uart_head[idx] - uart_tail[idx]);
    2306:	80 81       	ld	r24, Z
    2308:	91 81       	ldd	r25, Z+1	; 0x01
    230a:	28 81       	ld	r18, Y
    230c:	39 81       	ldd	r19, Y+1	; 0x01
    230e:	82 1b       	sub	r24, r18
    2310:	93 0b       	sbc	r25, r19
    2312:	09 c0       	rjmp	.+18     	; 0x2326 <uart_transmit_lcd+0x298>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    2314:	f8 01       	movw	r30, r16
    2316:	80 81       	ld	r24, Z
    2318:	91 81       	ldd	r25, Z+1	; 0x01
    231a:	28 81       	ld	r18, Y
    231c:	39 81       	ldd	r19, Y+1	; 0x01
    231e:	80 50       	subi	r24, 0x00	; 0
    2320:	9c 4f       	sbci	r25, 0xFC	; 252
    2322:	82 1b       	sub	r24, r18
    2324:	93 0b       	sbc	r25, r19
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
	}
	//disable the tx outgoing hardware buffer ready interrupt if we have nothing more to put in it.
	if(uart_count(port)>0) uart_txbuffer_enable(port);
    2326:	00 97       	sbiw	r24, 0x00	; 0
    2328:	21 f0       	breq	.+8      	; 0x2332 <uart_transmit_lcd+0x2a4>
    232a:	c7 01       	movw	r24, r14
    232c:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <uart_txbuffer_enable>
    2330:	03 c0       	rjmp	.+6      	; 0x2338 <uart_transmit_lcd+0x2aa>
	else uart_txbuffer_disable(port);
    2332:	c7 01       	movw	r24, r14
    2334:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <uart_txbuffer_disable>
			case LCD_COMMAND:
			case LCD_MACRO:
				//Header byte just describes payload -- do not send to LCD
				uart_enqueue(&uctrl, '+'); //echo to data port -- xxx
				uart_enqueue(&uctrl, toSend); //echo to data port -- xxx
				lcd_flow_type = toSend;
    2338:	d0 92 93 24 	sts	0x2493, r13
				break;
    233c:	74 c0       	rjmp	.+232    	; 0x2426 <uart_transmit_lcd+0x398>
#ifndef UART_DEBUG
	uint8_t idx = port_map(port);
	
	//if (idx==0){uart_enqueue(&uctrl, datain);} //xxx
	
	uart_buffer[idx][uart_head[idx]] = datain;
    233e:	f8 01       	movw	r30, r16
    2340:	80 81       	ld	r24, Z
    2342:	91 81       	ldd	r25, Z+1	; 0x01
    2344:	8e 55       	subi	r24, 0x5E	; 94
    2346:	9b 4c       	sbci	r25, 0xCB	; 203
    2348:	fc 01       	movw	r30, r24
    234a:	d0 82       	st	Z, r13
	uart_head[idx]++;
    234c:	f8 01       	movw	r30, r16
    234e:	80 81       	ld	r24, Z
    2350:	91 81       	ldd	r25, Z+1	; 0x01
    2352:	01 96       	adiw	r24, 0x01	; 1
    2354:	80 83       	st	Z, r24
    2356:	91 83       	std	Z+1, r25	; 0x01
	if (uart_head[idx] >= MAX_BUFFER_LEN){
    2358:	80 81       	ld	r24, Z
    235a:	91 81       	ldd	r25, Z+1	; 0x01
    235c:	f4 e0       	ldi	r31, 0x04	; 4
    235e:	80 30       	cpi	r24, 0x00	; 0
    2360:	9f 07       	cpc	r25, r31
    2362:	18 f0       	brcs	.+6      	; 0x236a <uart_transmit_lcd+0x2dc>
		uart_head[idx] = 0;
    2364:	f8 01       	movw	r30, r16
    2366:	10 82       	st	Z, r1
    2368:	11 82       	std	Z+1, r1	; 0x01
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    236a:	f7 01       	movw	r30, r14
    236c:	81 81       	ldd	r24, Z+1	; 0x01
    236e:	85 fd       	sbrc	r24, 5
    2370:	18 c0       	rjmp	.+48     	; 0x23a2 <uart_transmit_lcd+0x314>
    2372:	31 c0       	rjmp	.+98     	; 0x23d6 <uart_transmit_lcd+0x348>
}

inline uint8_t uart_dequeue(USART_t* port){
	uint8_t idx = port_map(port);
	uint16_t oldtail;
	oldtail = uart_tail[idx];
    2374:	e8 81       	ld	r30, Y
    2376:	f9 81       	ldd	r31, Y+1	; 0x01
	uart_tail[idx]++;
    2378:	88 81       	ld	r24, Y
    237a:	99 81       	ldd	r25, Y+1	; 0x01
    237c:	01 96       	adiw	r24, 0x01	; 1
    237e:	88 83       	st	Y, r24
    2380:	99 83       	std	Y+1, r25	; 0x01
	if (uart_tail[idx] >= MAX_BUFFER_LEN){
    2382:	88 81       	ld	r24, Y
    2384:	99 81       	ldd	r25, Y+1	; 0x01
    2386:	24 e0       	ldi	r18, 0x04	; 4
    2388:	80 30       	cpi	r24, 0x00	; 0
    238a:	92 07       	cpc	r25, r18
    238c:	10 f0       	brcs	.+4      	; 0x2392 <uart_transmit_lcd+0x304>
		uart_tail[idx] = 0;
    238e:	18 82       	st	Y, r1
    2390:	19 82       	std	Y+1, r1	; 0x01
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    2392:	ee 55       	subi	r30, 0x5E	; 94
    2394:	fb 4c       	sbci	r31, 0xCB	; 203
    2396:	80 81       	ld	r24, Z
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
    2398:	f7 01       	movw	r30, r14
    239a:	80 83       	st	Z, r24
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    239c:	81 81       	ldd	r24, Z+1	; 0x01
    239e:	85 ff       	sbrs	r24, 5
    23a0:	1a c0       	rjmp	.+52     	; 0x23d6 <uart_transmit_lcd+0x348>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    23a2:	f8 01       	movw	r30, r16
    23a4:	80 81       	ld	r24, Z
    23a6:	91 81       	ldd	r25, Z+1	; 0x01
    23a8:	28 81       	ld	r18, Y
    23aa:	39 81       	ldd	r19, Y+1	; 0x01
    23ac:	82 17       	cp	r24, r18
    23ae:	93 07       	cpc	r25, r19
    23b0:	38 f0       	brcs	.+14     	; 0x23c0 <uart_transmit_lcd+0x332>
		return (uart_head[idx] - uart_tail[idx]);
    23b2:	80 81       	ld	r24, Z
    23b4:	91 81       	ldd	r25, Z+1	; 0x01
    23b6:	28 81       	ld	r18, Y
    23b8:	39 81       	ldd	r19, Y+1	; 0x01
    23ba:	82 1b       	sub	r24, r18
    23bc:	93 0b       	sbc	r25, r19
    23be:	09 c0       	rjmp	.+18     	; 0x23d2 <uart_transmit_lcd+0x344>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    23c0:	f8 01       	movw	r30, r16
    23c2:	80 81       	ld	r24, Z
    23c4:	91 81       	ldd	r25, Z+1	; 0x01
    23c6:	28 81       	ld	r18, Y
    23c8:	39 81       	ldd	r19, Y+1	; 0x01
    23ca:	80 50       	subi	r24, 0x00	; 0
    23cc:	9c 4f       	sbci	r25, 0xFC	; 252
    23ce:	82 1b       	sub	r24, r18
    23d0:	93 0b       	sbc	r25, r19
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    23d2:	00 97       	sbiw	r24, 0x00	; 0
    23d4:	79 f6       	brne	.-98     	; 0x2374 <uart_transmit_lcd+0x2e6>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    23d6:	f8 01       	movw	r30, r16
    23d8:	80 81       	ld	r24, Z
    23da:	91 81       	ldd	r25, Z+1	; 0x01
    23dc:	28 81       	ld	r18, Y
    23de:	39 81       	ldd	r19, Y+1	; 0x01
    23e0:	82 17       	cp	r24, r18
    23e2:	93 07       	cpc	r25, r19
    23e4:	38 f0       	brcs	.+14     	; 0x23f4 <uart_transmit_lcd+0x366>
		return (uart_head[idx] - uart_tail[idx]);
    23e6:	80 81       	ld	r24, Z
    23e8:	91 81       	ldd	r25, Z+1	; 0x01
    23ea:	28 81       	ld	r18, Y
    23ec:	39 81       	ldd	r19, Y+1	; 0x01
    23ee:	82 1b       	sub	r24, r18
    23f0:	93 0b       	sbc	r25, r19
    23f2:	09 c0       	rjmp	.+18     	; 0x2406 <uart_transmit_lcd+0x378>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    23f4:	f8 01       	movw	r30, r16
    23f6:	80 81       	ld	r24, Z
    23f8:	91 81       	ldd	r25, Z+1	; 0x01
    23fa:	28 81       	ld	r18, Y
    23fc:	39 81       	ldd	r19, Y+1	; 0x01
    23fe:	80 50       	subi	r24, 0x00	; 0
    2400:	9c 4f       	sbci	r25, 0xFC	; 252
    2402:	82 1b       	sub	r24, r18
    2404:	93 0b       	sbc	r25, r19
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
	}
	//disable the tx outgoing hardware buffer ready interrupt if we have nothing more to put in it.
	if(uart_count(port)>0) uart_txbuffer_enable(port);
    2406:	00 97       	sbiw	r24, 0x00	; 0
    2408:	21 f0       	breq	.+8      	; 0x2412 <uart_transmit_lcd+0x384>
    240a:	c7 01       	movw	r24, r14
    240c:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <uart_txbuffer_enable>
    2410:	03 c0       	rjmp	.+6      	; 0x2418 <uart_transmit_lcd+0x38a>
	else uart_txbuffer_disable(port);
    2412:	c7 01       	movw	r24, r14
    2414:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <uart_txbuffer_disable>
				lcd_flow_type = toSend;
				break;
			default:
				//Payload bytes -- send to LCD
				uart_enqueue(&uctrl, toSend); //echo to data port -- xxx
				if (toSend == 0x0D) {lcd_flow_control = LCD_BUSY;}
    2418:	fd e0       	ldi	r31, 0x0D	; 13
    241a:	df 16       	cp	r13, r31
    241c:	11 f4       	brne	.+4      	; 0x2422 <uart_transmit_lcd+0x394>
    241e:	30 92 94 24 	sts	0x2494, r3
				port->DATA = toSend;
    2422:	f5 01       	movw	r30, r10
    2424:	d0 82       	st	Z, r13
}

void inline uart_transmit_lcd(USART_t* port){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0) && (lcd_flow_control == LCD_READY)){
    2426:	f5 01       	movw	r30, r10
    2428:	81 81       	ldd	r24, Z+1	; 0x01
    242a:	85 ff       	sbrs	r24, 5
    242c:	4f c0       	rjmp	.+158    	; 0x24cc <uart_transmit_lcd+0x43e>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    242e:	f0 eb       	ldi	r31, 0xB0	; 176
    2430:	af 16       	cp	r10, r31
    2432:	fb e0       	ldi	r31, 0x0B	; 11
    2434:	bf 06       	cpc	r11, r31
    2436:	61 f0       	breq	.+24     	; 0x2450 <uart_transmit_lcd+0x3c2>
	if (port == &uctrl) {return 1;}
    2438:	20 ea       	ldi	r18, 0xA0	; 160
    243a:	a2 16       	cp	r10, r18
    243c:	28 e0       	ldi	r18, 0x08	; 8
    243e:	b2 06       	cpc	r11, r18
    2440:	49 f0       	breq	.+18     	; 0x2454 <uart_transmit_lcd+0x3c6>
	if (port == &udata) {return 2;}
    2442:	30 eb       	ldi	r19, 0xB0	; 176
    2444:	a3 16       	cp	r10, r19
    2446:	38 e0       	ldi	r19, 0x08	; 8
    2448:	b3 06       	cpc	r11, r19
    244a:	31 f4       	brne	.+12     	; 0x2458 <uart_transmit_lcd+0x3ca>
    244c:	22 e0       	ldi	r18, 0x02	; 2
    244e:	05 c0       	rjmp	.+10     	; 0x245a <uart_transmit_lcd+0x3cc>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    2450:	20 e0       	ldi	r18, 0x00	; 0
    2452:	03 c0       	rjmp	.+6      	; 0x245a <uart_transmit_lcd+0x3cc>
	if (port == &uctrl) {return 1;}
    2454:	21 e0       	ldi	r18, 0x01	; 1
    2456:	01 c0       	rjmp	.+2      	; 0x245a <uart_transmit_lcd+0x3cc>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    2458:	20 e0       	ldi	r18, 0x00	; 0
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    245a:	30 e0       	ldi	r19, 0x00	; 0
    245c:	c9 01       	movw	r24, r18
    245e:	88 0f       	add	r24, r24
    2460:	99 1f       	adc	r25, r25
    2462:	f3 01       	movw	r30, r6
    2464:	e8 0f       	add	r30, r24
    2466:	f9 1f       	adc	r31, r25
    2468:	40 81       	ld	r20, Z
    246a:	51 81       	ldd	r21, Z+1	; 0x01
    246c:	f4 01       	movw	r30, r8
    246e:	e8 0f       	add	r30, r24
    2470:	f9 1f       	adc	r31, r25
    2472:	80 81       	ld	r24, Z
    2474:	91 81       	ldd	r25, Z+1	; 0x01
    2476:	48 17       	cp	r20, r24
    2478:	59 07       	cpc	r21, r25
    247a:	88 f0       	brcs	.+34     	; 0x249e <uart_transmit_lcd+0x410>
		return (uart_head[idx] - uart_tail[idx]);
    247c:	22 0f       	add	r18, r18
    247e:	33 1f       	adc	r19, r19
    2480:	f3 01       	movw	r30, r6
    2482:	e2 0f       	add	r30, r18
    2484:	f3 1f       	adc	r31, r19
    2486:	40 81       	ld	r20, Z
    2488:	51 81       	ldd	r21, Z+1	; 0x01
    248a:	f4 01       	movw	r30, r8
    248c:	e2 0f       	add	r30, r18
    248e:	f3 1f       	adc	r31, r19
    2490:	80 81       	ld	r24, Z
    2492:	91 81       	ldd	r25, Z+1	; 0x01
    2494:	fa 01       	movw	r30, r20
    2496:	e8 1b       	sub	r30, r24
    2498:	f9 0b       	sbc	r31, r25
    249a:	cf 01       	movw	r24, r30
    249c:	10 c0       	rjmp	.+32     	; 0x24be <uart_transmit_lcd+0x430>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    249e:	22 0f       	add	r18, r18
    24a0:	33 1f       	adc	r19, r19
    24a2:	f3 01       	movw	r30, r6
    24a4:	e2 0f       	add	r30, r18
    24a6:	f3 1f       	adc	r31, r19
    24a8:	80 81       	ld	r24, Z
    24aa:	91 81       	ldd	r25, Z+1	; 0x01
    24ac:	f4 01       	movw	r30, r8
    24ae:	e2 0f       	add	r30, r18
    24b0:	f3 1f       	adc	r31, r19
    24b2:	20 81       	ld	r18, Z
    24b4:	31 81       	ldd	r19, Z+1	; 0x01
    24b6:	80 50       	subi	r24, 0x00	; 0
    24b8:	9c 4f       	sbci	r25, 0xFC	; 252
    24ba:	82 1b       	sub	r24, r18
    24bc:	93 0b       	sbc	r25, r19
}

void inline uart_transmit_lcd(USART_t* port){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0) && (lcd_flow_control == LCD_READY)){
    24be:	00 97       	sbiw	r24, 0x00	; 0
    24c0:	29 f0       	breq	.+10     	; 0x24cc <uart_transmit_lcd+0x43e>
    24c2:	80 91 94 24 	lds	r24, 0x2494
    24c6:	82 35       	cpi	r24, 0x52	; 82
    24c8:	09 f4       	brne	.+2      	; 0x24cc <uart_transmit_lcd+0x43e>
    24ca:	18 ce       	rjmp	.-976    	; 0x20fc <uart_transmit_lcd+0x6e>
				if (toSend == 0x0D) {lcd_flow_control = LCD_BUSY;}
				port->DATA = toSend;
				break;
		}				
	}
	uart_txbuffer_disable(port); //implemented this way to prevent periodic stalls that happen when uart_txbuffer isn't disabled quickly enough
    24cc:	c5 01       	movw	r24, r10
    24ce:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <uart_txbuffer_disable>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    24d2:	f0 eb       	ldi	r31, 0xB0	; 176
    24d4:	af 16       	cp	r10, r31
    24d6:	fb e0       	ldi	r31, 0x0B	; 11
    24d8:	bf 06       	cpc	r11, r31
    24da:	61 f0       	breq	.+24     	; 0x24f4 <uart_transmit_lcd+0x466>
	if (port == &uctrl) {return 1;}
    24dc:	20 ea       	ldi	r18, 0xA0	; 160
    24de:	a2 16       	cp	r10, r18
    24e0:	28 e0       	ldi	r18, 0x08	; 8
    24e2:	b2 06       	cpc	r11, r18
    24e4:	49 f0       	breq	.+18     	; 0x24f8 <uart_transmit_lcd+0x46a>
	if (port == &udata) {return 2;}
    24e6:	30 eb       	ldi	r19, 0xB0	; 176
    24e8:	a3 16       	cp	r10, r19
    24ea:	38 e0       	ldi	r19, 0x08	; 8
    24ec:	b3 06       	cpc	r11, r19
    24ee:	31 f4       	brne	.+12     	; 0x24fc <uart_transmit_lcd+0x46e>
    24f0:	22 e0       	ldi	r18, 0x02	; 2
    24f2:	05 c0       	rjmp	.+10     	; 0x24fe <uart_transmit_lcd+0x470>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    24f4:	20 e0       	ldi	r18, 0x00	; 0
    24f6:	03 c0       	rjmp	.+6      	; 0x24fe <uart_transmit_lcd+0x470>
	if (port == &uctrl) {return 1;}
    24f8:	21 e0       	ldi	r18, 0x01	; 1
    24fa:	01 c0       	rjmp	.+2      	; 0x24fe <uart_transmit_lcd+0x470>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    24fc:	20 e0       	ldi	r18, 0x00	; 0
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    24fe:	30 e0       	ldi	r19, 0x00	; 0
    2500:	c9 01       	movw	r24, r18
    2502:	88 0f       	add	r24, r24
    2504:	99 1f       	adc	r25, r25
    2506:	fc 01       	movw	r30, r24
    2508:	e4 56       	subi	r30, 0x64	; 100
    250a:	ff 4c       	sbci	r31, 0xCF	; 207
    250c:	40 81       	ld	r20, Z
    250e:	51 81       	ldd	r21, Z+1	; 0x01
    2510:	88 55       	subi	r24, 0x58	; 88
    2512:	93 4c       	sbci	r25, 0xC3	; 195
    2514:	fc 01       	movw	r30, r24
    2516:	80 81       	ld	r24, Z
    2518:	91 81       	ldd	r25, Z+1	; 0x01
    251a:	48 17       	cp	r20, r24
    251c:	59 07       	cpc	r21, r25
    251e:	78 f0       	brcs	.+30     	; 0x253e <uart_transmit_lcd+0x4b0>
		return (uart_head[idx] - uart_tail[idx]);
    2520:	22 0f       	add	r18, r18
    2522:	33 1f       	adc	r19, r19
    2524:	f9 01       	movw	r30, r18
    2526:	e4 56       	subi	r30, 0x64	; 100
    2528:	ff 4c       	sbci	r31, 0xCF	; 207
    252a:	40 81       	ld	r20, Z
    252c:	51 81       	ldd	r21, Z+1	; 0x01
    252e:	28 55       	subi	r18, 0x58	; 88
    2530:	33 4c       	sbci	r19, 0xC3	; 195
    2532:	f9 01       	movw	r30, r18
    2534:	80 81       	ld	r24, Z
    2536:	91 81       	ldd	r25, Z+1	; 0x01
    2538:	48 1b       	sub	r20, r24
    253a:	59 0b       	sbc	r21, r25
    253c:	10 c0       	rjmp	.+32     	; 0x255e <uart_transmit_lcd+0x4d0>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    253e:	22 0f       	add	r18, r18
    2540:	33 1f       	adc	r19, r19
    2542:	f9 01       	movw	r30, r18
    2544:	e4 56       	subi	r30, 0x64	; 100
    2546:	ff 4c       	sbci	r31, 0xCF	; 207
    2548:	40 81       	ld	r20, Z
    254a:	51 81       	ldd	r21, Z+1	; 0x01
    254c:	28 55       	subi	r18, 0x58	; 88
    254e:	33 4c       	sbci	r19, 0xC3	; 195
    2550:	f9 01       	movw	r30, r18
    2552:	80 81       	ld	r24, Z
    2554:	91 81       	ldd	r25, Z+1	; 0x01
    2556:	40 50       	subi	r20, 0x00	; 0
    2558:	5c 4f       	sbci	r21, 0xFC	; 252
    255a:	48 1b       	sub	r20, r24
    255c:	59 0b       	sbc	r21, r25
				port->DATA = toSend;
				break;
		}				
	}
	uart_txbuffer_disable(port); //implemented this way to prevent periodic stalls that happen when uart_txbuffer isn't disabled quickly enough
	if ((uart_count(port)>0) && (lcd_flow_control == LCD_READY)){ //...something is waiting to go out
    255e:	41 15       	cp	r20, r1
    2560:	51 05       	cpc	r21, r1
    2562:	39 f0       	breq	.+14     	; 0x2572 <uart_transmit_lcd+0x4e4>
    2564:	80 91 94 24 	lds	r24, 0x2494
    2568:	82 35       	cpi	r24, 0x52	; 82
    256a:	19 f4       	brne	.+6      	; 0x2572 <uart_transmit_lcd+0x4e4>
		uart_txbuffer_enable(port);	
    256c:	c5 01       	movw	r24, r10
    256e:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <uart_txbuffer_enable>
	}	
}
    2572:	df 91       	pop	r29
    2574:	cf 91       	pop	r28
    2576:	1f 91       	pop	r17
    2578:	0f 91       	pop	r16
    257a:	ff 90       	pop	r15
    257c:	ef 90       	pop	r14
    257e:	df 90       	pop	r13
    2580:	cf 90       	pop	r12
    2582:	bf 90       	pop	r11
    2584:	af 90       	pop	r10
    2586:	9f 90       	pop	r9
    2588:	8f 90       	pop	r8
    258a:	7f 90       	pop	r7
    258c:	6f 90       	pop	r6
    258e:	5f 90       	pop	r5
    2590:	4f 90       	pop	r4
    2592:	3f 90       	pop	r3
    2594:	08 95       	ret

00002596 <__vector_123>:
//Must correspond to definitions in uart.h
SIGNAL(USARTC0_DRE_vect) {uart_transmit(&uctrl);}//TX Interrupt
SIGNAL(USARTC0_RXC_vect) {uart_receive(&uctrl);} //RX Interrupt
SIGNAL(USARTC1_DRE_vect) {uart_transmit(&udata);}//TX Interrupt
SIGNAL(USARTC1_RXC_vect) {uart_receive(&udata);} //RX Interrupt
SIGNAL(USARTF1_DRE_vect) {uart_transmit_lcd(&ulcd);}//TX Interrupt
    2596:	1f 92       	push	r1
    2598:	0f 92       	push	r0
    259a:	0f b6       	in	r0, 0x3f	; 63
    259c:	0f 92       	push	r0
    259e:	08 b6       	in	r0, 0x38	; 56
    25a0:	0f 92       	push	r0
    25a2:	09 b6       	in	r0, 0x39	; 57
    25a4:	0f 92       	push	r0
    25a6:	0a b6       	in	r0, 0x3a	; 58
    25a8:	0f 92       	push	r0
    25aa:	0b b6       	in	r0, 0x3b	; 59
    25ac:	0f 92       	push	r0
    25ae:	11 24       	eor	r1, r1
    25b0:	3f 92       	push	r3
    25b2:	4f 92       	push	r4
    25b4:	5f 92       	push	r5
    25b6:	6f 92       	push	r6
    25b8:	7f 92       	push	r7
    25ba:	8f 92       	push	r8
    25bc:	9f 92       	push	r9
    25be:	af 92       	push	r10
    25c0:	bf 92       	push	r11
    25c2:	cf 92       	push	r12
    25c4:	df 92       	push	r13
    25c6:	ef 92       	push	r14
    25c8:	ff 92       	push	r15
    25ca:	0f 93       	push	r16
    25cc:	1f 93       	push	r17
    25ce:	2f 93       	push	r18
    25d0:	3f 93       	push	r19
    25d2:	4f 93       	push	r20
    25d4:	5f 93       	push	r21
    25d6:	6f 93       	push	r22
    25d8:	7f 93       	push	r23
    25da:	8f 93       	push	r24
    25dc:	9f 93       	push	r25
    25de:	af 93       	push	r26
    25e0:	bf 93       	push	r27
    25e2:	cf 93       	push	r28
    25e4:	df 93       	push	r29
    25e6:	ef 93       	push	r30
    25e8:	ff 93       	push	r31
}

void inline uart_transmit_lcd(USART_t* port){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0) && (lcd_flow_control == LCD_READY)){
    25ea:	0f 2e       	mov	r0, r31
    25ec:	f0 eb       	ldi	r31, 0xB0	; 176
    25ee:	6f 2e       	mov	r6, r31
    25f0:	fb e0       	ldi	r31, 0x0B	; 11
    25f2:	7f 2e       	mov	r7, r31
    25f4:	f0 2d       	mov	r31, r0
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    25f6:	0f 2e       	mov	r0, r31
    25f8:	fc e9       	ldi	r31, 0x9C	; 156
    25fa:	8f 2e       	mov	r8, r31
    25fc:	f0 e3       	ldi	r31, 0x30	; 48
    25fe:	9f 2e       	mov	r9, r31
    2600:	f0 2d       	mov	r31, r0
    2602:	0f 2e       	mov	r0, r31
    2604:	f8 ea       	ldi	r31, 0xA8	; 168
    2606:	af 2e       	mov	r10, r31
    2608:	fc e3       	ldi	r31, 0x3C	; 60
    260a:	bf 2e       	mov	r11, r31
    260c:	f0 2d       	mov	r31, r0
		uart_tail[idx] = 0;
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    260e:	0f 2e       	mov	r0, r31
    2610:	f2 ea       	ldi	r31, 0xA2	; 162
    2612:	4f 2e       	mov	r4, r31
    2614:	f0 e3       	ldi	r31, 0x30	; 48
    2616:	5f 2e       	mov	r5, r31
    2618:	f0 2d       	mov	r31, r0
#ifndef UART_DEBUG
	uint8_t idx = port_map(port);
	
	//if (idx==0){uart_enqueue(&uctrl, datain);} //xxx
	
	uart_buffer[idx][uart_head[idx]] = datain;
    261a:	0e e9       	ldi	r16, 0x9E	; 158
    261c:	10 e3       	ldi	r17, 0x30	; 48
    261e:	0f 2e       	mov	r0, r31
    2620:	fb e2       	ldi	r31, 0x2B	; 43
    2622:	cf 2e       	mov	r12, r31
    2624:	f0 2d       	mov	r31, r0
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    2626:	0f 2e       	mov	r0, r31
    2628:	f0 ea       	ldi	r31, 0xA0	; 160
    262a:	ef 2e       	mov	r14, r31
    262c:	f8 e0       	ldi	r31, 0x08	; 8
    262e:	ff 2e       	mov	r15, r31
    2630:	f0 2d       	mov	r31, r0
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    2632:	ca ea       	ldi	r28, 0xAA	; 170
    2634:	dc e3       	ldi	r29, 0x3C	; 60
				lcd_flow_type = toSend;
				break;
			default:
				//Payload bytes -- send to LCD
				uart_enqueue(&uctrl, toSend); //echo to data port -- xxx
				if (toSend == 0x0D) {lcd_flow_control = LCD_BUSY;}
    2636:	0f 2e       	mov	r0, r31
    2638:	fe e4       	ldi	r31, 0x4E	; 78
    263a:	3f 2e       	mov	r3, r31
    263c:	f0 2d       	mov	r31, r0
    263e:	8c c1       	rjmp	.+792    	; 0x2958 <__vector_123+0x3c2>
}

inline uint8_t uart_dequeue(USART_t* port){
	uint8_t idx = port_map(port);
	uint16_t oldtail;
	oldtail = uart_tail[idx];
    2640:	d5 01       	movw	r26, r10
    2642:	ed 91       	ld	r30, X+
    2644:	fc 91       	ld	r31, X
    2646:	11 97       	sbiw	r26, 0x01	; 1
	uart_tail[idx]++;
    2648:	8d 91       	ld	r24, X+
    264a:	9c 91       	ld	r25, X
    264c:	11 97       	sbiw	r26, 0x01	; 1
    264e:	01 96       	adiw	r24, 0x01	; 1
    2650:	8d 93       	st	X+, r24
    2652:	9c 93       	st	X, r25
    2654:	11 97       	sbiw	r26, 0x01	; 1
	if (uart_tail[idx] >= MAX_BUFFER_LEN){
    2656:	8d 91       	ld	r24, X+
    2658:	9c 91       	ld	r25, X
    265a:	11 97       	sbiw	r26, 0x01	; 1
    265c:	b4 e0       	ldi	r27, 0x04	; 4
    265e:	80 30       	cpi	r24, 0x00	; 0
    2660:	9b 07       	cpc	r25, r27
    2662:	20 f0       	brcs	.+8      	; 0x266c <__vector_123+0xd6>
		uart_tail[idx] = 0;
    2664:	d5 01       	movw	r26, r10
    2666:	1d 92       	st	X+, r1
    2668:	1c 92       	st	X, r1
    266a:	11 97       	sbiw	r26, 0x01	; 1
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    266c:	e4 0d       	add	r30, r4
    266e:	f5 1d       	adc	r31, r5
    2670:	d0 80       	ld	r13, Z
void inline uart_transmit_lcd(USART_t* port){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0) && (lcd_flow_control == LCD_READY)){
		toSend = uart_dequeue(port);
		switch(toSend){
    2672:	ba ef       	ldi	r27, 0xFA	; 250
    2674:	db 16       	cp	r13, r27
    2676:	21 f0       	breq	.+8      	; 0x2680 <__vector_123+0xea>
    2678:	ee ef       	ldi	r30, 0xFE	; 254
    267a:	de 16       	cp	r13, r30
    267c:	09 f0       	breq	.+2      	; 0x2680 <__vector_123+0xea>
    267e:	ef c0       	rjmp	.+478    	; 0x285e <__vector_123+0x2c8>
#ifndef UART_DEBUG
	uint8_t idx = port_map(port);
	
	//if (idx==0){uart_enqueue(&uctrl, datain);} //xxx
	
	uart_buffer[idx][uart_head[idx]] = datain;
    2680:	d8 01       	movw	r26, r16
    2682:	8d 91       	ld	r24, X+
    2684:	9c 91       	ld	r25, X
    2686:	11 97       	sbiw	r26, 0x01	; 1
    2688:	8e 55       	subi	r24, 0x5E	; 94
    268a:	9b 4c       	sbci	r25, 0xCB	; 203
    268c:	fc 01       	movw	r30, r24
    268e:	c0 82       	st	Z, r12
	uart_head[idx]++;
    2690:	8d 91       	ld	r24, X+
    2692:	9c 91       	ld	r25, X
    2694:	11 97       	sbiw	r26, 0x01	; 1
    2696:	01 96       	adiw	r24, 0x01	; 1
    2698:	8d 93       	st	X+, r24
    269a:	9c 93       	st	X, r25
    269c:	11 97       	sbiw	r26, 0x01	; 1
	if (uart_head[idx] >= MAX_BUFFER_LEN){
    269e:	8d 91       	ld	r24, X+
    26a0:	9c 91       	ld	r25, X
    26a2:	11 97       	sbiw	r26, 0x01	; 1
    26a4:	f4 e0       	ldi	r31, 0x04	; 4
    26a6:	80 30       	cpi	r24, 0x00	; 0
    26a8:	9f 07       	cpc	r25, r31
    26aa:	18 f0       	brcs	.+6      	; 0x26b2 <__vector_123+0x11c>
		uart_head[idx] = 0;
    26ac:	1d 92       	st	X+, r1
    26ae:	1c 92       	st	X, r1
    26b0:	11 97       	sbiw	r26, 0x01	; 1
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    26b2:	d7 01       	movw	r26, r14
    26b4:	11 96       	adiw	r26, 0x01	; 1
    26b6:	8c 91       	ld	r24, X
    26b8:	11 97       	sbiw	r26, 0x01	; 1
    26ba:	85 fd       	sbrc	r24, 5
    26bc:	18 c0       	rjmp	.+48     	; 0x26ee <__vector_123+0x158>
    26be:	33 c0       	rjmp	.+102    	; 0x2726 <__vector_123+0x190>
}

inline uint8_t uart_dequeue(USART_t* port){
	uint8_t idx = port_map(port);
	uint16_t oldtail;
	oldtail = uart_tail[idx];
    26c0:	e8 81       	ld	r30, Y
    26c2:	f9 81       	ldd	r31, Y+1	; 0x01
	uart_tail[idx]++;
    26c4:	88 81       	ld	r24, Y
    26c6:	99 81       	ldd	r25, Y+1	; 0x01
    26c8:	01 96       	adiw	r24, 0x01	; 1
    26ca:	88 83       	st	Y, r24
    26cc:	99 83       	std	Y+1, r25	; 0x01
	if (uart_tail[idx] >= MAX_BUFFER_LEN){
    26ce:	88 81       	ld	r24, Y
    26d0:	99 81       	ldd	r25, Y+1	; 0x01
    26d2:	b4 e0       	ldi	r27, 0x04	; 4
    26d4:	80 30       	cpi	r24, 0x00	; 0
    26d6:	9b 07       	cpc	r25, r27
    26d8:	10 f0       	brcs	.+4      	; 0x26de <__vector_123+0x148>
		uart_tail[idx] = 0;
    26da:	18 82       	st	Y, r1
    26dc:	19 82       	std	Y+1, r1	; 0x01
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    26de:	ee 55       	subi	r30, 0x5E	; 94
    26e0:	fb 4c       	sbci	r31, 0xCB	; 203
    26e2:	80 81       	ld	r24, Z
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
    26e4:	f7 01       	movw	r30, r14
    26e6:	80 83       	st	Z, r24
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    26e8:	81 81       	ldd	r24, Z+1	; 0x01
    26ea:	85 ff       	sbrs	r24, 5
    26ec:	1c c0       	rjmp	.+56     	; 0x2726 <__vector_123+0x190>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    26ee:	d8 01       	movw	r26, r16
    26f0:	8d 91       	ld	r24, X+
    26f2:	9c 91       	ld	r25, X
    26f4:	11 97       	sbiw	r26, 0x01	; 1
    26f6:	28 81       	ld	r18, Y
    26f8:	39 81       	ldd	r19, Y+1	; 0x01
    26fa:	82 17       	cp	r24, r18
    26fc:	93 07       	cpc	r25, r19
    26fe:	40 f0       	brcs	.+16     	; 0x2710 <__vector_123+0x17a>
		return (uart_head[idx] - uart_tail[idx]);
    2700:	8d 91       	ld	r24, X+
    2702:	9c 91       	ld	r25, X
    2704:	11 97       	sbiw	r26, 0x01	; 1
    2706:	28 81       	ld	r18, Y
    2708:	39 81       	ldd	r19, Y+1	; 0x01
    270a:	82 1b       	sub	r24, r18
    270c:	93 0b       	sbc	r25, r19
    270e:	09 c0       	rjmp	.+18     	; 0x2722 <__vector_123+0x18c>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    2710:	f8 01       	movw	r30, r16
    2712:	80 81       	ld	r24, Z
    2714:	91 81       	ldd	r25, Z+1	; 0x01
    2716:	28 81       	ld	r18, Y
    2718:	39 81       	ldd	r19, Y+1	; 0x01
    271a:	80 50       	subi	r24, 0x00	; 0
    271c:	9c 4f       	sbci	r25, 0xFC	; 252
    271e:	82 1b       	sub	r24, r18
    2720:	93 0b       	sbc	r25, r19
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    2722:	00 97       	sbiw	r24, 0x00	; 0
    2724:	69 f6       	brne	.-102    	; 0x26c0 <__vector_123+0x12a>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    2726:	d8 01       	movw	r26, r16
    2728:	8d 91       	ld	r24, X+
    272a:	9c 91       	ld	r25, X
    272c:	11 97       	sbiw	r26, 0x01	; 1
    272e:	28 81       	ld	r18, Y
    2730:	39 81       	ldd	r19, Y+1	; 0x01
    2732:	82 17       	cp	r24, r18
    2734:	93 07       	cpc	r25, r19
    2736:	40 f0       	brcs	.+16     	; 0x2748 <__vector_123+0x1b2>
		return (uart_head[idx] - uart_tail[idx]);
    2738:	8d 91       	ld	r24, X+
    273a:	9c 91       	ld	r25, X
    273c:	11 97       	sbiw	r26, 0x01	; 1
    273e:	28 81       	ld	r18, Y
    2740:	39 81       	ldd	r19, Y+1	; 0x01
    2742:	82 1b       	sub	r24, r18
    2744:	93 0b       	sbc	r25, r19
    2746:	09 c0       	rjmp	.+18     	; 0x275a <__vector_123+0x1c4>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    2748:	f8 01       	movw	r30, r16
    274a:	80 81       	ld	r24, Z
    274c:	91 81       	ldd	r25, Z+1	; 0x01
    274e:	28 81       	ld	r18, Y
    2750:	39 81       	ldd	r19, Y+1	; 0x01
    2752:	80 50       	subi	r24, 0x00	; 0
    2754:	9c 4f       	sbci	r25, 0xFC	; 252
    2756:	82 1b       	sub	r24, r18
    2758:	93 0b       	sbc	r25, r19
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
	}
	//disable the tx outgoing hardware buffer ready interrupt if we have nothing more to put in it.
	if(uart_count(port)>0) uart_txbuffer_enable(port);
    275a:	00 97       	sbiw	r24, 0x00	; 0
    275c:	21 f0       	breq	.+8      	; 0x2766 <__vector_123+0x1d0>
    275e:	c7 01       	movw	r24, r14
    2760:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <uart_txbuffer_enable>
    2764:	03 c0       	rjmp	.+6      	; 0x276c <__vector_123+0x1d6>
	else uart_txbuffer_disable(port);
    2766:	c7 01       	movw	r24, r14
    2768:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <uart_txbuffer_disable>
#ifndef UART_DEBUG
	uint8_t idx = port_map(port);
	
	//if (idx==0){uart_enqueue(&uctrl, datain);} //xxx
	
	uart_buffer[idx][uart_head[idx]] = datain;
    276c:	d8 01       	movw	r26, r16
    276e:	8d 91       	ld	r24, X+
    2770:	9c 91       	ld	r25, X
    2772:	11 97       	sbiw	r26, 0x01	; 1
    2774:	8e 55       	subi	r24, 0x5E	; 94
    2776:	9b 4c       	sbci	r25, 0xCB	; 203
    2778:	fc 01       	movw	r30, r24
    277a:	d0 82       	st	Z, r13
	uart_head[idx]++;
    277c:	8d 91       	ld	r24, X+
    277e:	9c 91       	ld	r25, X
    2780:	11 97       	sbiw	r26, 0x01	; 1
    2782:	01 96       	adiw	r24, 0x01	; 1
    2784:	8d 93       	st	X+, r24
    2786:	9c 93       	st	X, r25
    2788:	11 97       	sbiw	r26, 0x01	; 1
	if (uart_head[idx] >= MAX_BUFFER_LEN){
    278a:	8d 91       	ld	r24, X+
    278c:	9c 91       	ld	r25, X
    278e:	11 97       	sbiw	r26, 0x01	; 1
    2790:	f4 e0       	ldi	r31, 0x04	; 4
    2792:	80 30       	cpi	r24, 0x00	; 0
    2794:	9f 07       	cpc	r25, r31
    2796:	18 f0       	brcs	.+6      	; 0x279e <__vector_123+0x208>
		uart_head[idx] = 0;
    2798:	1d 92       	st	X+, r1
    279a:	1c 92       	st	X, r1
    279c:	11 97       	sbiw	r26, 0x01	; 1
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    279e:	d7 01       	movw	r26, r14
    27a0:	11 96       	adiw	r26, 0x01	; 1
    27a2:	8c 91       	ld	r24, X
    27a4:	11 97       	sbiw	r26, 0x01	; 1
    27a6:	85 fd       	sbrc	r24, 5
    27a8:	18 c0       	rjmp	.+48     	; 0x27da <__vector_123+0x244>
    27aa:	33 c0       	rjmp	.+102    	; 0x2812 <__vector_123+0x27c>
}

inline uint8_t uart_dequeue(USART_t* port){
	uint8_t idx = port_map(port);
	uint16_t oldtail;
	oldtail = uart_tail[idx];
    27ac:	e8 81       	ld	r30, Y
    27ae:	f9 81       	ldd	r31, Y+1	; 0x01
	uart_tail[idx]++;
    27b0:	88 81       	ld	r24, Y
    27b2:	99 81       	ldd	r25, Y+1	; 0x01
    27b4:	01 96       	adiw	r24, 0x01	; 1
    27b6:	88 83       	st	Y, r24
    27b8:	99 83       	std	Y+1, r25	; 0x01
	if (uart_tail[idx] >= MAX_BUFFER_LEN){
    27ba:	88 81       	ld	r24, Y
    27bc:	99 81       	ldd	r25, Y+1	; 0x01
    27be:	b4 e0       	ldi	r27, 0x04	; 4
    27c0:	80 30       	cpi	r24, 0x00	; 0
    27c2:	9b 07       	cpc	r25, r27
    27c4:	10 f0       	brcs	.+4      	; 0x27ca <__vector_123+0x234>
		uart_tail[idx] = 0;
    27c6:	18 82       	st	Y, r1
    27c8:	19 82       	std	Y+1, r1	; 0x01
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    27ca:	ee 55       	subi	r30, 0x5E	; 94
    27cc:	fb 4c       	sbci	r31, 0xCB	; 203
    27ce:	80 81       	ld	r24, Z
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
    27d0:	f7 01       	movw	r30, r14
    27d2:	80 83       	st	Z, r24
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    27d4:	81 81       	ldd	r24, Z+1	; 0x01
    27d6:	85 ff       	sbrs	r24, 5
    27d8:	1c c0       	rjmp	.+56     	; 0x2812 <__vector_123+0x27c>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    27da:	d8 01       	movw	r26, r16
    27dc:	8d 91       	ld	r24, X+
    27de:	9c 91       	ld	r25, X
    27e0:	11 97       	sbiw	r26, 0x01	; 1
    27e2:	28 81       	ld	r18, Y
    27e4:	39 81       	ldd	r19, Y+1	; 0x01
    27e6:	82 17       	cp	r24, r18
    27e8:	93 07       	cpc	r25, r19
    27ea:	40 f0       	brcs	.+16     	; 0x27fc <__vector_123+0x266>
		return (uart_head[idx] - uart_tail[idx]);
    27ec:	8d 91       	ld	r24, X+
    27ee:	9c 91       	ld	r25, X
    27f0:	11 97       	sbiw	r26, 0x01	; 1
    27f2:	28 81       	ld	r18, Y
    27f4:	39 81       	ldd	r19, Y+1	; 0x01
    27f6:	82 1b       	sub	r24, r18
    27f8:	93 0b       	sbc	r25, r19
    27fa:	09 c0       	rjmp	.+18     	; 0x280e <__vector_123+0x278>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    27fc:	f8 01       	movw	r30, r16
    27fe:	80 81       	ld	r24, Z
    2800:	91 81       	ldd	r25, Z+1	; 0x01
    2802:	28 81       	ld	r18, Y
    2804:	39 81       	ldd	r19, Y+1	; 0x01
    2806:	80 50       	subi	r24, 0x00	; 0
    2808:	9c 4f       	sbci	r25, 0xFC	; 252
    280a:	82 1b       	sub	r24, r18
    280c:	93 0b       	sbc	r25, r19
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    280e:	00 97       	sbiw	r24, 0x00	; 0
    2810:	69 f6       	brne	.-102    	; 0x27ac <__vector_123+0x216>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    2812:	d8 01       	movw	r26, r16
    2814:	8d 91       	ld	r24, X+
    2816:	9c 91       	ld	r25, X
    2818:	11 97       	sbiw	r26, 0x01	; 1
    281a:	28 81       	ld	r18, Y
    281c:	39 81       	ldd	r19, Y+1	; 0x01
    281e:	82 17       	cp	r24, r18
    2820:	93 07       	cpc	r25, r19
    2822:	40 f0       	brcs	.+16     	; 0x2834 <__vector_123+0x29e>
		return (uart_head[idx] - uart_tail[idx]);
    2824:	8d 91       	ld	r24, X+
    2826:	9c 91       	ld	r25, X
    2828:	11 97       	sbiw	r26, 0x01	; 1
    282a:	28 81       	ld	r18, Y
    282c:	39 81       	ldd	r19, Y+1	; 0x01
    282e:	82 1b       	sub	r24, r18
    2830:	93 0b       	sbc	r25, r19
    2832:	09 c0       	rjmp	.+18     	; 0x2846 <__vector_123+0x2b0>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    2834:	f8 01       	movw	r30, r16
    2836:	80 81       	ld	r24, Z
    2838:	91 81       	ldd	r25, Z+1	; 0x01
    283a:	28 81       	ld	r18, Y
    283c:	39 81       	ldd	r19, Y+1	; 0x01
    283e:	80 50       	subi	r24, 0x00	; 0
    2840:	9c 4f       	sbci	r25, 0xFC	; 252
    2842:	82 1b       	sub	r24, r18
    2844:	93 0b       	sbc	r25, r19
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
	}
	//disable the tx outgoing hardware buffer ready interrupt if we have nothing more to put in it.
	if(uart_count(port)>0) uart_txbuffer_enable(port);
    2846:	00 97       	sbiw	r24, 0x00	; 0
    2848:	21 f0       	breq	.+8      	; 0x2852 <__vector_123+0x2bc>
    284a:	c7 01       	movw	r24, r14
    284c:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <uart_txbuffer_enable>
    2850:	03 c0       	rjmp	.+6      	; 0x2858 <__vector_123+0x2c2>
	else uart_txbuffer_disable(port);
    2852:	c7 01       	movw	r24, r14
    2854:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <uart_txbuffer_disable>
			case LCD_COMMAND:
			case LCD_MACRO:
				//Header byte just describes payload -- do not send to LCD
				uart_enqueue(&uctrl, '+'); //echo to data port -- xxx
				uart_enqueue(&uctrl, toSend); //echo to data port -- xxx
				lcd_flow_type = toSend;
    2858:	d0 92 93 24 	sts	0x2493, r13
    285c:	7d c0       	rjmp	.+250    	; 0x2958 <__vector_123+0x3c2>
#ifndef UART_DEBUG
	uint8_t idx = port_map(port);
	
	//if (idx==0){uart_enqueue(&uctrl, datain);} //xxx
	
	uart_buffer[idx][uart_head[idx]] = datain;
    285e:	d8 01       	movw	r26, r16
    2860:	8d 91       	ld	r24, X+
    2862:	9c 91       	ld	r25, X
    2864:	11 97       	sbiw	r26, 0x01	; 1
    2866:	8e 55       	subi	r24, 0x5E	; 94
    2868:	9b 4c       	sbci	r25, 0xCB	; 203
    286a:	fc 01       	movw	r30, r24
    286c:	d0 82       	st	Z, r13
	uart_head[idx]++;
    286e:	8d 91       	ld	r24, X+
    2870:	9c 91       	ld	r25, X
    2872:	11 97       	sbiw	r26, 0x01	; 1
    2874:	01 96       	adiw	r24, 0x01	; 1
    2876:	8d 93       	st	X+, r24
    2878:	9c 93       	st	X, r25
    287a:	11 97       	sbiw	r26, 0x01	; 1
	if (uart_head[idx] >= MAX_BUFFER_LEN){
    287c:	8d 91       	ld	r24, X+
    287e:	9c 91       	ld	r25, X
    2880:	11 97       	sbiw	r26, 0x01	; 1
    2882:	f4 e0       	ldi	r31, 0x04	; 4
    2884:	80 30       	cpi	r24, 0x00	; 0
    2886:	9f 07       	cpc	r25, r31
    2888:	18 f0       	brcs	.+6      	; 0x2890 <__vector_123+0x2fa>
		uart_head[idx] = 0;
    288a:	1d 92       	st	X+, r1
    288c:	1c 92       	st	X, r1
    288e:	11 97       	sbiw	r26, 0x01	; 1
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    2890:	d7 01       	movw	r26, r14
    2892:	11 96       	adiw	r26, 0x01	; 1
    2894:	8c 91       	ld	r24, X
    2896:	11 97       	sbiw	r26, 0x01	; 1
    2898:	85 fd       	sbrc	r24, 5
    289a:	18 c0       	rjmp	.+48     	; 0x28cc <__vector_123+0x336>
    289c:	33 c0       	rjmp	.+102    	; 0x2904 <__vector_123+0x36e>
}

inline uint8_t uart_dequeue(USART_t* port){
	uint8_t idx = port_map(port);
	uint16_t oldtail;
	oldtail = uart_tail[idx];
    289e:	e8 81       	ld	r30, Y
    28a0:	f9 81       	ldd	r31, Y+1	; 0x01
	uart_tail[idx]++;
    28a2:	88 81       	ld	r24, Y
    28a4:	99 81       	ldd	r25, Y+1	; 0x01
    28a6:	01 96       	adiw	r24, 0x01	; 1
    28a8:	88 83       	st	Y, r24
    28aa:	99 83       	std	Y+1, r25	; 0x01
	if (uart_tail[idx] >= MAX_BUFFER_LEN){
    28ac:	88 81       	ld	r24, Y
    28ae:	99 81       	ldd	r25, Y+1	; 0x01
    28b0:	b4 e0       	ldi	r27, 0x04	; 4
    28b2:	80 30       	cpi	r24, 0x00	; 0
    28b4:	9b 07       	cpc	r25, r27
    28b6:	10 f0       	brcs	.+4      	; 0x28bc <__vector_123+0x326>
		uart_tail[idx] = 0;
    28b8:	18 82       	st	Y, r1
    28ba:	19 82       	std	Y+1, r1	; 0x01
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    28bc:	ee 55       	subi	r30, 0x5E	; 94
    28be:	fb 4c       	sbci	r31, 0xCB	; 203
    28c0:	80 81       	ld	r24, Z
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
    28c2:	f7 01       	movw	r30, r14
    28c4:	80 83       	st	Z, r24
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    28c6:	81 81       	ldd	r24, Z+1	; 0x01
    28c8:	85 ff       	sbrs	r24, 5
    28ca:	1c c0       	rjmp	.+56     	; 0x2904 <__vector_123+0x36e>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    28cc:	d8 01       	movw	r26, r16
    28ce:	8d 91       	ld	r24, X+
    28d0:	9c 91       	ld	r25, X
    28d2:	11 97       	sbiw	r26, 0x01	; 1
    28d4:	28 81       	ld	r18, Y
    28d6:	39 81       	ldd	r19, Y+1	; 0x01
    28d8:	82 17       	cp	r24, r18
    28da:	93 07       	cpc	r25, r19
    28dc:	40 f0       	brcs	.+16     	; 0x28ee <__vector_123+0x358>
		return (uart_head[idx] - uart_tail[idx]);
    28de:	8d 91       	ld	r24, X+
    28e0:	9c 91       	ld	r25, X
    28e2:	11 97       	sbiw	r26, 0x01	; 1
    28e4:	28 81       	ld	r18, Y
    28e6:	39 81       	ldd	r19, Y+1	; 0x01
    28e8:	82 1b       	sub	r24, r18
    28ea:	93 0b       	sbc	r25, r19
    28ec:	09 c0       	rjmp	.+18     	; 0x2900 <__vector_123+0x36a>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    28ee:	f8 01       	movw	r30, r16
    28f0:	80 81       	ld	r24, Z
    28f2:	91 81       	ldd	r25, Z+1	; 0x01
    28f4:	28 81       	ld	r18, Y
    28f6:	39 81       	ldd	r19, Y+1	; 0x01
    28f8:	80 50       	subi	r24, 0x00	; 0
    28fa:	9c 4f       	sbci	r25, 0xFC	; 252
    28fc:	82 1b       	sub	r24, r18
    28fe:	93 0b       	sbc	r25, r19
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    2900:	00 97       	sbiw	r24, 0x00	; 0
    2902:	69 f6       	brne	.-102    	; 0x289e <__vector_123+0x308>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    2904:	d8 01       	movw	r26, r16
    2906:	8d 91       	ld	r24, X+
    2908:	9c 91       	ld	r25, X
    290a:	11 97       	sbiw	r26, 0x01	; 1
    290c:	28 81       	ld	r18, Y
    290e:	39 81       	ldd	r19, Y+1	; 0x01
    2910:	82 17       	cp	r24, r18
    2912:	93 07       	cpc	r25, r19
    2914:	40 f0       	brcs	.+16     	; 0x2926 <__vector_123+0x390>
		return (uart_head[idx] - uart_tail[idx]);
    2916:	8d 91       	ld	r24, X+
    2918:	9c 91       	ld	r25, X
    291a:	11 97       	sbiw	r26, 0x01	; 1
    291c:	28 81       	ld	r18, Y
    291e:	39 81       	ldd	r19, Y+1	; 0x01
    2920:	82 1b       	sub	r24, r18
    2922:	93 0b       	sbc	r25, r19
    2924:	09 c0       	rjmp	.+18     	; 0x2938 <__vector_123+0x3a2>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    2926:	f8 01       	movw	r30, r16
    2928:	80 81       	ld	r24, Z
    292a:	91 81       	ldd	r25, Z+1	; 0x01
    292c:	28 81       	ld	r18, Y
    292e:	39 81       	ldd	r19, Y+1	; 0x01
    2930:	80 50       	subi	r24, 0x00	; 0
    2932:	9c 4f       	sbci	r25, 0xFC	; 252
    2934:	82 1b       	sub	r24, r18
    2936:	93 0b       	sbc	r25, r19
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
	}
	//disable the tx outgoing hardware buffer ready interrupt if we have nothing more to put in it.
	if(uart_count(port)>0) uart_txbuffer_enable(port);
    2938:	00 97       	sbiw	r24, 0x00	; 0
    293a:	21 f0       	breq	.+8      	; 0x2944 <__vector_123+0x3ae>
    293c:	c7 01       	movw	r24, r14
    293e:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <uart_txbuffer_enable>
    2942:	03 c0       	rjmp	.+6      	; 0x294a <__vector_123+0x3b4>
	else uart_txbuffer_disable(port);
    2944:	c7 01       	movw	r24, r14
    2946:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <uart_txbuffer_disable>
				lcd_flow_type = toSend;
				break;
			default:
				//Payload bytes -- send to LCD
				uart_enqueue(&uctrl, toSend); //echo to data port -- xxx
				if (toSend == 0x0D) {lcd_flow_control = LCD_BUSY;}
    294a:	fd e0       	ldi	r31, 0x0D	; 13
    294c:	df 16       	cp	r13, r31
    294e:	11 f4       	brne	.+4      	; 0x2954 <__vector_123+0x3be>
    2950:	30 92 94 24 	sts	0x2494, r3
				port->DATA = toSend;
    2954:	d3 01       	movw	r26, r6
    2956:	dc 92       	st	X, r13
}

void inline uart_transmit_lcd(USART_t* port){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0) && (lcd_flow_control == LCD_READY)){
    2958:	f3 01       	movw	r30, r6
    295a:	81 81       	ldd	r24, Z+1	; 0x01
    295c:	85 ff       	sbrs	r24, 5
    295e:	24 c0       	rjmp	.+72     	; 0x29a8 <__vector_123+0x412>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    2960:	d4 01       	movw	r26, r8
    2962:	8d 91       	ld	r24, X+
    2964:	9c 91       	ld	r25, X
    2966:	11 97       	sbiw	r26, 0x01	; 1
    2968:	f5 01       	movw	r30, r10
    296a:	20 81       	ld	r18, Z
    296c:	31 81       	ldd	r19, Z+1	; 0x01
    296e:	82 17       	cp	r24, r18
    2970:	93 07       	cpc	r25, r19
    2972:	40 f0       	brcs	.+16     	; 0x2984 <__vector_123+0x3ee>
		return (uart_head[idx] - uart_tail[idx]);
    2974:	8d 91       	ld	r24, X+
    2976:	9c 91       	ld	r25, X
    2978:	11 97       	sbiw	r26, 0x01	; 1
    297a:	20 81       	ld	r18, Z
    297c:	31 81       	ldd	r19, Z+1	; 0x01
    297e:	82 1b       	sub	r24, r18
    2980:	93 0b       	sbc	r25, r19
    2982:	0b c0       	rjmp	.+22     	; 0x299a <__vector_123+0x404>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    2984:	d4 01       	movw	r26, r8
    2986:	8d 91       	ld	r24, X+
    2988:	9c 91       	ld	r25, X
    298a:	11 97       	sbiw	r26, 0x01	; 1
    298c:	f5 01       	movw	r30, r10
    298e:	20 81       	ld	r18, Z
    2990:	31 81       	ldd	r19, Z+1	; 0x01
    2992:	80 50       	subi	r24, 0x00	; 0
    2994:	9c 4f       	sbci	r25, 0xFC	; 252
    2996:	82 1b       	sub	r24, r18
    2998:	93 0b       	sbc	r25, r19
}

void inline uart_transmit_lcd(USART_t* port){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0) && (lcd_flow_control == LCD_READY)){
    299a:	00 97       	sbiw	r24, 0x00	; 0
    299c:	29 f0       	breq	.+10     	; 0x29a8 <__vector_123+0x412>
    299e:	80 91 94 24 	lds	r24, 0x2494
    29a2:	82 35       	cpi	r24, 0x52	; 82
    29a4:	09 f4       	brne	.+2      	; 0x29a8 <__vector_123+0x412>
    29a6:	4c ce       	rjmp	.-872    	; 0x2640 <__vector_123+0xaa>
				if (toSend == 0x0D) {lcd_flow_control = LCD_BUSY;}
				port->DATA = toSend;
				break;
		}				
	}
	uart_txbuffer_disable(port); //implemented this way to prevent periodic stalls that happen when uart_txbuffer isn't disabled quickly enough
    29a8:	80 eb       	ldi	r24, 0xB0	; 176
    29aa:	9b e0       	ldi	r25, 0x0B	; 11
    29ac:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <uart_txbuffer_disable>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    29b0:	20 91 9c 30 	lds	r18, 0x309C
    29b4:	30 91 9d 30 	lds	r19, 0x309D
    29b8:	80 91 a8 3c 	lds	r24, 0x3CA8
    29bc:	90 91 a9 3c 	lds	r25, 0x3CA9
    29c0:	28 17       	cp	r18, r24
    29c2:	39 07       	cpc	r19, r25
    29c4:	58 f0       	brcs	.+22     	; 0x29dc <__vector_123+0x446>
		return (uart_head[idx] - uart_tail[idx]);
    29c6:	80 91 9c 30 	lds	r24, 0x309C
    29ca:	90 91 9d 30 	lds	r25, 0x309D
    29ce:	20 91 a8 3c 	lds	r18, 0x3CA8
    29d2:	30 91 a9 3c 	lds	r19, 0x3CA9
    29d6:	82 1b       	sub	r24, r18
    29d8:	93 0b       	sbc	r25, r19
    29da:	0c c0       	rjmp	.+24     	; 0x29f4 <__vector_123+0x45e>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    29dc:	80 91 9c 30 	lds	r24, 0x309C
    29e0:	90 91 9d 30 	lds	r25, 0x309D
    29e4:	20 91 a8 3c 	lds	r18, 0x3CA8
    29e8:	30 91 a9 3c 	lds	r19, 0x3CA9
    29ec:	80 50       	subi	r24, 0x00	; 0
    29ee:	9c 4f       	sbci	r25, 0xFC	; 252
    29f0:	82 1b       	sub	r24, r18
    29f2:	93 0b       	sbc	r25, r19
				port->DATA = toSend;
				break;
		}				
	}
	uart_txbuffer_disable(port); //implemented this way to prevent periodic stalls that happen when uart_txbuffer isn't disabled quickly enough
	if ((uart_count(port)>0) && (lcd_flow_control == LCD_READY)){ //...something is waiting to go out
    29f4:	00 97       	sbiw	r24, 0x00	; 0
    29f6:	41 f0       	breq	.+16     	; 0x2a08 <__vector_123+0x472>
    29f8:	80 91 94 24 	lds	r24, 0x2494
    29fc:	82 35       	cpi	r24, 0x52	; 82
    29fe:	21 f4       	brne	.+8      	; 0x2a08 <__vector_123+0x472>
		uart_txbuffer_enable(port);	
    2a00:	80 eb       	ldi	r24, 0xB0	; 176
    2a02:	9b e0       	ldi	r25, 0x0B	; 11
    2a04:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <uart_txbuffer_enable>
//Must correspond to definitions in uart.h
SIGNAL(USARTC0_DRE_vect) {uart_transmit(&uctrl);}//TX Interrupt
SIGNAL(USARTC0_RXC_vect) {uart_receive(&uctrl);} //RX Interrupt
SIGNAL(USARTC1_DRE_vect) {uart_transmit(&udata);}//TX Interrupt
SIGNAL(USARTC1_RXC_vect) {uart_receive(&udata);} //RX Interrupt
SIGNAL(USARTF1_DRE_vect) {uart_transmit_lcd(&ulcd);}//TX Interrupt
    2a08:	ff 91       	pop	r31
    2a0a:	ef 91       	pop	r30
    2a0c:	df 91       	pop	r29
    2a0e:	cf 91       	pop	r28
    2a10:	bf 91       	pop	r27
    2a12:	af 91       	pop	r26
    2a14:	9f 91       	pop	r25
    2a16:	8f 91       	pop	r24
    2a18:	7f 91       	pop	r23
    2a1a:	6f 91       	pop	r22
    2a1c:	5f 91       	pop	r21
    2a1e:	4f 91       	pop	r20
    2a20:	3f 91       	pop	r19
    2a22:	2f 91       	pop	r18
    2a24:	1f 91       	pop	r17
    2a26:	0f 91       	pop	r16
    2a28:	ff 90       	pop	r15
    2a2a:	ef 90       	pop	r14
    2a2c:	df 90       	pop	r13
    2a2e:	cf 90       	pop	r12
    2a30:	bf 90       	pop	r11
    2a32:	af 90       	pop	r10
    2a34:	9f 90       	pop	r9
    2a36:	8f 90       	pop	r8
    2a38:	7f 90       	pop	r7
    2a3a:	6f 90       	pop	r6
    2a3c:	5f 90       	pop	r5
    2a3e:	4f 90       	pop	r4
    2a40:	3f 90       	pop	r3
    2a42:	0f 90       	pop	r0
    2a44:	0b be       	out	0x3b, r0	; 59
    2a46:	0f 90       	pop	r0
    2a48:	0a be       	out	0x3a, r0	; 58
    2a4a:	0f 90       	pop	r0
    2a4c:	09 be       	out	0x39, r0	; 57
    2a4e:	0f 90       	pop	r0
    2a50:	08 be       	out	0x38, r0	; 56
    2a52:	0f 90       	pop	r0
    2a54:	0f be       	out	0x3f, r0	; 63
    2a56:	0f 90       	pop	r0
    2a58:	1f 90       	pop	r1
    2a5a:	18 95       	reti

00002a5c <uart_receive>:

//==================================
//= RECEPTION ENGINE (ISR BASED)
//==================================

void inline uart_receive(USART_t* port){
    2a5c:	cf 92       	push	r12
    2a5e:	df 92       	push	r13
    2a60:	ef 92       	push	r14
    2a62:	ff 92       	push	r15
    2a64:	0f 93       	push	r16
    2a66:	1f 93       	push	r17
    2a68:	cf 93       	push	r28
    2a6a:	df 93       	push	r29
    2a6c:	dc 01       	movw	r26, r24
	uart_itail[idx] = 0;
}

inline uint16_t uart_icount(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_ihead[idx] >= uart_itail[idx]){	
    2a6e:	0f 2e       	mov	r0, r31
    2a70:	f2 ea       	ldi	r31, 0xA2	; 162
    2a72:	cf 2e       	mov	r12, r31
    2a74:	fc e3       	ldi	r31, 0x3C	; 60
    2a76:	df 2e       	mov	r13, r31
    2a78:	f0 2d       	mov	r31, r0
    2a7a:	06 e9       	ldi	r16, 0x96	; 150
    2a7c:	14 e2       	ldi	r17, 0x24	; 36
	}
}

inline void uart_ienqueue(USART_t* port, uint8_t datain){
	uint8_t idx = port_map(port);
	uart_ibuffer[idx][uart_ihead[idx]] = datain;
    2a7e:	0f 2e       	mov	r0, r31
    2a80:	fc e9       	ldi	r31, 0x9C	; 156
    2a82:	ef 2e       	mov	r14, r31
    2a84:	f4 e2       	ldi	r31, 0x24	; 36
    2a86:	ff 2e       	mov	r15, r31
    2a88:	f0 2d       	mov	r31, r0
//= RECEPTION ENGINE (ISR BASED)
//==================================

void inline uart_receive(USART_t* port){
	//keep receiving until data register is empty or incoming queue is full
	while (((port->STATUS & _BV(7)) == B8(10000000)) && (uart_icount(port) < MAX_IBUFFER_LEN)){		
    2a8a:	3a c0       	rjmp	.+116    	; 0x2b00 <uart_receive+0xa4>
		uart_ienqueue(port, port->DATA);
    2a8c:	4c 91       	ld	r20, X
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    2a8e:	2b e0       	ldi	r18, 0x0B	; 11
    2a90:	a0 3b       	cpi	r26, 0xB0	; 176
    2a92:	b2 07       	cpc	r27, r18
    2a94:	51 f0       	breq	.+20     	; 0x2aaa <uart_receive+0x4e>
	if (port == &uctrl) {return 1;}
    2a96:	38 e0       	ldi	r19, 0x08	; 8
    2a98:	a0 3a       	cpi	r26, 0xA0	; 160
    2a9a:	b3 07       	cpc	r27, r19
    2a9c:	41 f0       	breq	.+16     	; 0x2aae <uart_receive+0x52>
	if (port == &udata) {return 2;}
    2a9e:	88 e0       	ldi	r24, 0x08	; 8
    2aa0:	a0 3b       	cpi	r26, 0xB0	; 176
    2aa2:	b8 07       	cpc	r27, r24
    2aa4:	31 f4       	brne	.+12     	; 0x2ab2 <uart_receive+0x56>
    2aa6:	62 e0       	ldi	r22, 0x02	; 2
    2aa8:	05 c0       	rjmp	.+10     	; 0x2ab4 <uart_receive+0x58>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    2aaa:	60 e0       	ldi	r22, 0x00	; 0
    2aac:	03 c0       	rjmp	.+6      	; 0x2ab4 <uart_receive+0x58>
	if (port == &uctrl) {return 1;}
    2aae:	61 e0       	ldi	r22, 0x01	; 1
    2ab0:	01 c0       	rjmp	.+2      	; 0x2ab4 <uart_receive+0x58>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    2ab2:	60 e0       	ldi	r22, 0x00	; 0
	}
}

inline void uart_ienqueue(USART_t* port, uint8_t datain){
	uint8_t idx = port_map(port);
	uart_ibuffer[idx][uart_ihead[idx]] = datain;
    2ab4:	70 e0       	ldi	r23, 0x00	; 0
    2ab6:	cb 01       	movw	r24, r22
    2ab8:	88 0f       	add	r24, r24
    2aba:	99 1f       	adc	r25, r25
    2abc:	f6 01       	movw	r30, r12
    2abe:	e8 0f       	add	r30, r24
    2ac0:	f9 1f       	adc	r31, r25
    2ac2:	20 81       	ld	r18, Z
    2ac4:	31 81       	ldd	r19, Z+1	; 0x01
    2ac6:	cb 01       	movw	r24, r22
    2ac8:	98 2f       	mov	r25, r24
    2aca:	88 27       	eor	r24, r24
    2acc:	99 0f       	add	r25, r25
    2ace:	99 0f       	add	r25, r25
    2ad0:	82 0f       	add	r24, r18
    2ad2:	93 1f       	adc	r25, r19
    2ad4:	8e 0d       	add	r24, r14
    2ad6:	9f 1d       	adc	r25, r15
    2ad8:	ec 01       	movw	r28, r24
    2ada:	48 83       	st	Y, r20
	uart_ihead[idx]++;
    2adc:	80 81       	ld	r24, Z
    2ade:	91 81       	ldd	r25, Z+1	; 0x01
    2ae0:	01 96       	adiw	r24, 0x01	; 1
    2ae2:	80 83       	st	Z, r24
    2ae4:	91 83       	std	Z+1, r25	; 0x01
	if (uart_ihead[idx] >= MAX_IBUFFER_LEN){
    2ae6:	80 81       	ld	r24, Z
    2ae8:	91 81       	ldd	r25, Z+1	; 0x01
    2aea:	d4 e0       	ldi	r29, 0x04	; 4
    2aec:	80 30       	cpi	r24, 0x00	; 0
    2aee:	9d 07       	cpc	r25, r29
    2af0:	38 f0       	brcs	.+14     	; 0x2b00 <uart_receive+0xa4>
		uart_ihead[idx] = 0;
    2af2:	fb 01       	movw	r30, r22
    2af4:	ee 0f       	add	r30, r30
    2af6:	ff 1f       	adc	r31, r31
    2af8:	ec 0d       	add	r30, r12
    2afa:	fd 1d       	adc	r31, r13
    2afc:	10 82       	st	Z, r1
    2afe:	11 82       	std	Z+1, r1	; 0x01
//= RECEPTION ENGINE (ISR BASED)
//==================================

void inline uart_receive(USART_t* port){
	//keep receiving until data register is empty or incoming queue is full
	while (((port->STATUS & _BV(7)) == B8(10000000)) && (uart_icount(port) < MAX_IBUFFER_LEN)){		
    2b00:	11 96       	adiw	r26, 0x01	; 1
    2b02:	8c 91       	ld	r24, X
    2b04:	11 97       	sbiw	r26, 0x01	; 1
    2b06:	88 23       	and	r24, r24
    2b08:	0c f0       	brlt	.+2      	; 0x2b0c <uart_receive+0xb0>
    2b0a:	4c c0       	rjmp	.+152    	; 0x2ba4 <uart_receive+0x148>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    2b0c:	2b e0       	ldi	r18, 0x0B	; 11
    2b0e:	a0 3b       	cpi	r26, 0xB0	; 176
    2b10:	b2 07       	cpc	r27, r18
    2b12:	51 f0       	breq	.+20     	; 0x2b28 <uart_receive+0xcc>
	if (port == &uctrl) {return 1;}
    2b14:	38 e0       	ldi	r19, 0x08	; 8
    2b16:	a0 3a       	cpi	r26, 0xA0	; 160
    2b18:	b3 07       	cpc	r27, r19
    2b1a:	41 f0       	breq	.+16     	; 0x2b2c <uart_receive+0xd0>
	if (port == &udata) {return 2;}
    2b1c:	88 e0       	ldi	r24, 0x08	; 8
    2b1e:	a0 3b       	cpi	r26, 0xB0	; 176
    2b20:	b8 07       	cpc	r27, r24
    2b22:	31 f4       	brne	.+12     	; 0x2b30 <uart_receive+0xd4>
    2b24:	22 e0       	ldi	r18, 0x02	; 2
    2b26:	05 c0       	rjmp	.+10     	; 0x2b32 <uart_receive+0xd6>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    2b28:	20 e0       	ldi	r18, 0x00	; 0
    2b2a:	03 c0       	rjmp	.+6      	; 0x2b32 <uart_receive+0xd6>
	if (port == &uctrl) {return 1;}
    2b2c:	21 e0       	ldi	r18, 0x01	; 1
    2b2e:	01 c0       	rjmp	.+2      	; 0x2b32 <uart_receive+0xd6>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    2b30:	20 e0       	ldi	r18, 0x00	; 0
	uart_itail[idx] = 0;
}

inline uint16_t uart_icount(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_ihead[idx] >= uart_itail[idx]){	
    2b32:	30 e0       	ldi	r19, 0x00	; 0
    2b34:	c9 01       	movw	r24, r18
    2b36:	88 0f       	add	r24, r24
    2b38:	99 1f       	adc	r25, r25
    2b3a:	f6 01       	movw	r30, r12
    2b3c:	e8 0f       	add	r30, r24
    2b3e:	f9 1f       	adc	r31, r25
    2b40:	40 81       	ld	r20, Z
    2b42:	51 81       	ldd	r21, Z+1	; 0x01
    2b44:	f8 01       	movw	r30, r16
    2b46:	e8 0f       	add	r30, r24
    2b48:	f9 1f       	adc	r31, r25
    2b4a:	80 81       	ld	r24, Z
    2b4c:	91 81       	ldd	r25, Z+1	; 0x01
    2b4e:	48 17       	cp	r20, r24
    2b50:	59 07       	cpc	r21, r25
    2b52:	88 f0       	brcs	.+34     	; 0x2b76 <uart_receive+0x11a>
		return (uart_ihead[idx] - uart_itail[idx]);
    2b54:	22 0f       	add	r18, r18
    2b56:	33 1f       	adc	r19, r19
    2b58:	f6 01       	movw	r30, r12
    2b5a:	e2 0f       	add	r30, r18
    2b5c:	f3 1f       	adc	r31, r19
    2b5e:	40 81       	ld	r20, Z
    2b60:	51 81       	ldd	r21, Z+1	; 0x01
    2b62:	f8 01       	movw	r30, r16
    2b64:	e2 0f       	add	r30, r18
    2b66:	f3 1f       	adc	r31, r19
    2b68:	80 81       	ld	r24, Z
    2b6a:	91 81       	ldd	r25, Z+1	; 0x01
    2b6c:	ea 01       	movw	r28, r20
    2b6e:	c8 1b       	sub	r28, r24
    2b70:	d9 0b       	sbc	r29, r25
    2b72:	ce 01       	movw	r24, r28
    2b74:	12 c0       	rjmp	.+36     	; 0x2b9a <uart_receive+0x13e>
	}
	else {
		return ((MAX_IBUFFER_LEN-uart_itail[idx])+uart_ihead[idx]);
    2b76:	c9 01       	movw	r24, r18
    2b78:	88 0f       	add	r24, r24
    2b7a:	99 1f       	adc	r25, r25
    2b7c:	f6 01       	movw	r30, r12
    2b7e:	e8 0f       	add	r30, r24
    2b80:	f9 1f       	adc	r31, r25
    2b82:	40 81       	ld	r20, Z
    2b84:	51 81       	ldd	r21, Z+1	; 0x01
    2b86:	f8 01       	movw	r30, r16
    2b88:	e8 0f       	add	r30, r24
    2b8a:	f9 1f       	adc	r31, r25
    2b8c:	20 81       	ld	r18, Z
    2b8e:	31 81       	ldd	r19, Z+1	; 0x01
    2b90:	ca 01       	movw	r24, r20
    2b92:	80 50       	subi	r24, 0x00	; 0
    2b94:	9c 4f       	sbci	r25, 0xFC	; 252
    2b96:	82 1b       	sub	r24, r18
    2b98:	93 0b       	sbc	r25, r19
//= RECEPTION ENGINE (ISR BASED)
//==================================

void inline uart_receive(USART_t* port){
	//keep receiving until data register is empty or incoming queue is full
	while (((port->STATUS & _BV(7)) == B8(10000000)) && (uart_icount(port) < MAX_IBUFFER_LEN)){		
    2b9a:	d4 e0       	ldi	r29, 0x04	; 4
    2b9c:	80 30       	cpi	r24, 0x00	; 0
    2b9e:	9d 07       	cpc	r25, r29
    2ba0:	08 f4       	brcc	.+2      	; 0x2ba4 <uart_receive+0x148>
    2ba2:	74 cf       	rjmp	.-280    	; 0x2a8c <uart_receive+0x30>
		uart_ienqueue(port, port->DATA);
	}	
}
    2ba4:	df 91       	pop	r29
    2ba6:	cf 91       	pop	r28
    2ba8:	1f 91       	pop	r17
    2baa:	0f 91       	pop	r16
    2bac:	ff 90       	pop	r15
    2bae:	ef 90       	pop	r14
    2bb0:	df 90       	pop	r13
    2bb2:	cf 90       	pop	r12
    2bb4:	08 95       	ret

00002bb6 <uart_receive_lcd>:

void inline uart_receive_lcd(USART_t* port){
    2bb6:	2f 92       	push	r2
    2bb8:	3f 92       	push	r3
    2bba:	4f 92       	push	r4
    2bbc:	5f 92       	push	r5
    2bbe:	6f 92       	push	r6
    2bc0:	7f 92       	push	r7
    2bc2:	8f 92       	push	r8
    2bc4:	9f 92       	push	r9
    2bc6:	bf 92       	push	r11
    2bc8:	cf 92       	push	r12
    2bca:	df 92       	push	r13
    2bcc:	ef 92       	push	r14
    2bce:	ff 92       	push	r15
    2bd0:	0f 93       	push	r16
    2bd2:	1f 93       	push	r17
    2bd4:	cf 93       	push	r28
    2bd6:	df 93       	push	r29
    2bd8:	6c 01       	movw	r12, r24
	uart_itail[idx] = 0;
}

inline uint16_t uart_icount(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_ihead[idx] >= uart_itail[idx]){	
    2bda:	0f 2e       	mov	r0, r31
    2bdc:	f2 ea       	ldi	r31, 0xA2	; 162
    2bde:	8f 2e       	mov	r8, r31
    2be0:	fc e3       	ldi	r31, 0x3C	; 60
    2be2:	9f 2e       	mov	r9, r31
    2be4:	f0 2d       	mov	r31, r0
    2be6:	0f 2e       	mov	r0, r31
    2be8:	f6 e9       	ldi	r31, 0x96	; 150
    2bea:	6f 2e       	mov	r6, r31
    2bec:	f4 e2       	ldi	r31, 0x24	; 36
    2bee:	7f 2e       	mov	r7, r31
    2bf0:	f0 2d       	mov	r31, r0
#ifndef UART_DEBUG
	uint8_t idx = port_map(port);
	
	//if (idx==0){uart_enqueue(&uctrl, datain);} //xxx
	
	uart_buffer[idx][uart_head[idx]] = datain;
    2bf2:	00 ea       	ldi	r16, 0xA0	; 160
    2bf4:	10 e3       	ldi	r17, 0x30	; 48
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    2bf6:	0f 2e       	mov	r0, r31
    2bf8:	f0 eb       	ldi	r31, 0xB0	; 176
    2bfa:	ef 2e       	mov	r14, r31
    2bfc:	f8 e0       	ldi	r31, 0x08	; 8
    2bfe:	ff 2e       	mov	r15, r31
    2c00:	f0 2d       	mov	r31, r0
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    2c02:	cc ea       	ldi	r28, 0xAC	; 172
    2c04:	dc e3       	ldi	r29, 0x3C	; 60
		incomingByte = port->DATA;
		uart_enqueue(&udata, incomingByte); //echo to data port
		if (incomingByte == 0x0D){
			switch(lcd_flow_type){				
				case LCD_MACRO:
					uart_enqueue(&udata,"+");uart_enqueue(&udata,lcd_touch_buffer[0]);uart_enqueue(&udata,lcd_touch_buffer[1]);
    2c06:	0f 2e       	mov	r0, r31
    2c08:	fc e8       	ldi	r31, 0x8C	; 140
    2c0a:	2f 2e       	mov	r2, r31
    2c0c:	f4 e2       	ldi	r31, 0x24	; 36
    2c0e:	3f 2e       	mov	r3, r31
    2c10:	f0 2d       	mov	r31, r0
	}
}

inline void uart_ienqueue(USART_t* port, uint8_t datain){
	uint8_t idx = port_map(port);
	uart_ibuffer[idx][uart_ihead[idx]] = datain;
    2c12:	0f 2e       	mov	r0, r31
    2c14:	fc e9       	ldi	r31, 0x9C	; 156
    2c16:	4f 2e       	mov	r4, r31
    2c18:	f4 e2       	ldi	r31, 0x24	; 36
    2c1a:	5f 2e       	mov	r5, r31
    2c1c:	f0 2d       	mov	r31, r0
}

void inline uart_receive_lcd(USART_t* port){
	uint8_t incomingByte;
	//keep receiving until data register is empty or incoming queue is full
	while (((port->STATUS & _BV(7)) == B8(10000000)) && (uart_icount(port) < MAX_IBUFFER_LEN)){
    2c1e:	19 c2       	rjmp	.+1074   	; 0x3052 <uart_receive_lcd+0x49c>
		incomingByte = port->DATA;
    2c20:	d6 01       	movw	r26, r12
    2c22:	bc 90       	ld	r11, X
#ifndef UART_DEBUG
	uint8_t idx = port_map(port);
	
	//if (idx==0){uart_enqueue(&uctrl, datain);} //xxx
	
	uart_buffer[idx][uart_head[idx]] = datain;
    2c24:	f8 01       	movw	r30, r16
    2c26:	80 81       	ld	r24, Z
    2c28:	91 81       	ldd	r25, Z+1	; 0x01
    2c2a:	8e 55       	subi	r24, 0x5E	; 94
    2c2c:	97 4c       	sbci	r25, 0xC7	; 199
    2c2e:	dc 01       	movw	r26, r24
    2c30:	bc 92       	st	X, r11
	uart_head[idx]++;
    2c32:	80 81       	ld	r24, Z
    2c34:	91 81       	ldd	r25, Z+1	; 0x01
    2c36:	01 96       	adiw	r24, 0x01	; 1
    2c38:	80 83       	st	Z, r24
    2c3a:	91 83       	std	Z+1, r25	; 0x01
	if (uart_head[idx] >= MAX_BUFFER_LEN){
    2c3c:	80 81       	ld	r24, Z
    2c3e:	91 81       	ldd	r25, Z+1	; 0x01
    2c40:	b4 e0       	ldi	r27, 0x04	; 4
    2c42:	80 30       	cpi	r24, 0x00	; 0
    2c44:	9b 07       	cpc	r25, r27
    2c46:	10 f0       	brcs	.+4      	; 0x2c4c <uart_receive_lcd+0x96>
		uart_head[idx] = 0;
    2c48:	10 82       	st	Z, r1
    2c4a:	11 82       	std	Z+1, r1	; 0x01
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    2c4c:	f7 01       	movw	r30, r14
    2c4e:	81 81       	ldd	r24, Z+1	; 0x01
    2c50:	85 fd       	sbrc	r24, 5
    2c52:	1a c0       	rjmp	.+52     	; 0x2c88 <uart_receive_lcd+0xd2>
    2c54:	32 c0       	rjmp	.+100    	; 0x2cba <uart_receive_lcd+0x104>
}

inline uint8_t uart_dequeue(USART_t* port){
	uint8_t idx = port_map(port);
	uint16_t oldtail;
	oldtail = uart_tail[idx];
    2c56:	e8 81       	ld	r30, Y
    2c58:	f9 81       	ldd	r31, Y+1	; 0x01
	uart_tail[idx]++;
    2c5a:	88 81       	ld	r24, Y
    2c5c:	99 81       	ldd	r25, Y+1	; 0x01
    2c5e:	01 96       	adiw	r24, 0x01	; 1
    2c60:	88 83       	st	Y, r24
    2c62:	99 83       	std	Y+1, r25	; 0x01
	if (uart_tail[idx] >= MAX_BUFFER_LEN){
    2c64:	88 81       	ld	r24, Y
    2c66:	99 81       	ldd	r25, Y+1	; 0x01
    2c68:	24 e0       	ldi	r18, 0x04	; 4
    2c6a:	80 30       	cpi	r24, 0x00	; 0
    2c6c:	92 07       	cpc	r25, r18
    2c6e:	10 f0       	brcs	.+4      	; 0x2c74 <uart_receive_lcd+0xbe>
		uart_tail[idx] = 0;
    2c70:	18 82       	st	Y, r1
    2c72:	19 82       	std	Y+1, r1	; 0x01
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    2c74:	ee 55       	subi	r30, 0x5E	; 94
    2c76:	f7 4c       	sbci	r31, 0xC7	; 199
    2c78:	80 81       	ld	r24, Z
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
    2c7a:	d7 01       	movw	r26, r14
    2c7c:	8c 93       	st	X, r24
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    2c7e:	11 96       	adiw	r26, 0x01	; 1
    2c80:	8c 91       	ld	r24, X
    2c82:	11 97       	sbiw	r26, 0x01	; 1
    2c84:	85 ff       	sbrs	r24, 5
    2c86:	19 c0       	rjmp	.+50     	; 0x2cba <uart_receive_lcd+0x104>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    2c88:	f8 01       	movw	r30, r16
    2c8a:	80 81       	ld	r24, Z
    2c8c:	91 81       	ldd	r25, Z+1	; 0x01
    2c8e:	28 81       	ld	r18, Y
    2c90:	39 81       	ldd	r19, Y+1	; 0x01
    2c92:	82 17       	cp	r24, r18
    2c94:	93 07       	cpc	r25, r19
    2c96:	38 f0       	brcs	.+14     	; 0x2ca6 <uart_receive_lcd+0xf0>
		return (uart_head[idx] - uart_tail[idx]);
    2c98:	80 81       	ld	r24, Z
    2c9a:	91 81       	ldd	r25, Z+1	; 0x01
    2c9c:	28 81       	ld	r18, Y
    2c9e:	39 81       	ldd	r19, Y+1	; 0x01
    2ca0:	82 1b       	sub	r24, r18
    2ca2:	93 0b       	sbc	r25, r19
    2ca4:	08 c0       	rjmp	.+16     	; 0x2cb6 <uart_receive_lcd+0x100>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    2ca6:	80 81       	ld	r24, Z
    2ca8:	91 81       	ldd	r25, Z+1	; 0x01
    2caa:	28 81       	ld	r18, Y
    2cac:	39 81       	ldd	r19, Y+1	; 0x01
    2cae:	80 50       	subi	r24, 0x00	; 0
    2cb0:	9c 4f       	sbci	r25, 0xFC	; 252
    2cb2:	82 1b       	sub	r24, r18
    2cb4:	93 0b       	sbc	r25, r19
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    2cb6:	00 97       	sbiw	r24, 0x00	; 0
    2cb8:	71 f6       	brne	.-100    	; 0x2c56 <uart_receive_lcd+0xa0>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    2cba:	f8 01       	movw	r30, r16
    2cbc:	80 81       	ld	r24, Z
    2cbe:	91 81       	ldd	r25, Z+1	; 0x01
    2cc0:	28 81       	ld	r18, Y
    2cc2:	39 81       	ldd	r19, Y+1	; 0x01
    2cc4:	82 17       	cp	r24, r18
    2cc6:	93 07       	cpc	r25, r19
    2cc8:	38 f0       	brcs	.+14     	; 0x2cd8 <uart_receive_lcd+0x122>
		return (uart_head[idx] - uart_tail[idx]);
    2cca:	80 81       	ld	r24, Z
    2ccc:	91 81       	ldd	r25, Z+1	; 0x01
    2cce:	28 81       	ld	r18, Y
    2cd0:	39 81       	ldd	r19, Y+1	; 0x01
    2cd2:	82 1b       	sub	r24, r18
    2cd4:	93 0b       	sbc	r25, r19
    2cd6:	08 c0       	rjmp	.+16     	; 0x2ce8 <uart_receive_lcd+0x132>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    2cd8:	80 81       	ld	r24, Z
    2cda:	91 81       	ldd	r25, Z+1	; 0x01
    2cdc:	28 81       	ld	r18, Y
    2cde:	39 81       	ldd	r19, Y+1	; 0x01
    2ce0:	80 50       	subi	r24, 0x00	; 0
    2ce2:	9c 4f       	sbci	r25, 0xFC	; 252
    2ce4:	82 1b       	sub	r24, r18
    2ce6:	93 0b       	sbc	r25, r19
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
	}
	//disable the tx outgoing hardware buffer ready interrupt if we have nothing more to put in it.
	if(uart_count(port)>0) uart_txbuffer_enable(port);
    2ce8:	00 97       	sbiw	r24, 0x00	; 0
    2cea:	21 f0       	breq	.+8      	; 0x2cf4 <uart_receive_lcd+0x13e>
    2cec:	c7 01       	movw	r24, r14
    2cee:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <uart_txbuffer_enable>
    2cf2:	03 c0       	rjmp	.+6      	; 0x2cfa <uart_receive_lcd+0x144>
	else uart_txbuffer_disable(port);
    2cf4:	c7 01       	movw	r24, r14
    2cf6:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <uart_txbuffer_disable>
	uint8_t incomingByte;
	//keep receiving until data register is empty or incoming queue is full
	while (((port->STATUS & _BV(7)) == B8(10000000)) && (uart_icount(port) < MAX_IBUFFER_LEN)){
		incomingByte = port->DATA;
		uart_enqueue(&udata, incomingByte); //echo to data port
		if (incomingByte == 0x0D){
    2cfa:	bd e0       	ldi	r27, 0x0D	; 13
    2cfc:	bb 16       	cp	r11, r27
    2cfe:	09 f0       	breq	.+2      	; 0x2d02 <uart_receive_lcd+0x14c>
    2d00:	6e c1       	rjmp	.+732    	; 0x2fde <uart_receive_lcd+0x428>
			switch(lcd_flow_type){				
    2d02:	80 91 93 24 	lds	r24, 0x2493
    2d06:	8e 3f       	cpi	r24, 0xFE	; 254
    2d08:	09 f0       	breq	.+2      	; 0x2d0c <uart_receive_lcd+0x156>
    2d0a:	66 c1       	rjmp	.+716    	; 0x2fd8 <uart_receive_lcd+0x422>
#ifndef UART_DEBUG
	uint8_t idx = port_map(port);
	
	//if (idx==0){uart_enqueue(&uctrl, datain);} //xxx
	
	uart_buffer[idx][uart_head[idx]] = datain;
    2d0c:	f8 01       	movw	r30, r16
    2d0e:	80 81       	ld	r24, Z
    2d10:	91 81       	ldd	r25, Z+1	; 0x01
    2d12:	8e 55       	subi	r24, 0x5E	; 94
    2d14:	97 4c       	sbci	r25, 0xC7	; 199
    2d16:	e8 e1       	ldi	r30, 0x18	; 24
    2d18:	f1 e2       	ldi	r31, 0x21	; 33
    2d1a:	dc 01       	movw	r26, r24
    2d1c:	ec 93       	st	X, r30
	uart_head[idx]++;
    2d1e:	d8 01       	movw	r26, r16
    2d20:	8d 91       	ld	r24, X+
    2d22:	9c 91       	ld	r25, X
    2d24:	11 97       	sbiw	r26, 0x01	; 1
    2d26:	01 96       	adiw	r24, 0x01	; 1
    2d28:	8d 93       	st	X+, r24
    2d2a:	9c 93       	st	X, r25
    2d2c:	11 97       	sbiw	r26, 0x01	; 1
	if (uart_head[idx] >= MAX_BUFFER_LEN){
    2d2e:	8d 91       	ld	r24, X+
    2d30:	9c 91       	ld	r25, X
    2d32:	11 97       	sbiw	r26, 0x01	; 1
    2d34:	b4 e0       	ldi	r27, 0x04	; 4
    2d36:	80 30       	cpi	r24, 0x00	; 0
    2d38:	9b 07       	cpc	r25, r27
    2d3a:	18 f0       	brcs	.+6      	; 0x2d42 <uart_receive_lcd+0x18c>
		uart_head[idx] = 0;
    2d3c:	f8 01       	movw	r30, r16
    2d3e:	10 82       	st	Z, r1
    2d40:	11 82       	std	Z+1, r1	; 0x01
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    2d42:	d7 01       	movw	r26, r14
    2d44:	11 96       	adiw	r26, 0x01	; 1
    2d46:	8c 91       	ld	r24, X
    2d48:	11 97       	sbiw	r26, 0x01	; 1
    2d4a:	85 fd       	sbrc	r24, 5
    2d4c:	18 c0       	rjmp	.+48     	; 0x2d7e <uart_receive_lcd+0x1c8>
    2d4e:	33 c0       	rjmp	.+102    	; 0x2db6 <uart_receive_lcd+0x200>
}

inline uint8_t uart_dequeue(USART_t* port){
	uint8_t idx = port_map(port);
	uint16_t oldtail;
	oldtail = uart_tail[idx];
    2d50:	e8 81       	ld	r30, Y
    2d52:	f9 81       	ldd	r31, Y+1	; 0x01
	uart_tail[idx]++;
    2d54:	88 81       	ld	r24, Y
    2d56:	99 81       	ldd	r25, Y+1	; 0x01
    2d58:	01 96       	adiw	r24, 0x01	; 1
    2d5a:	88 83       	st	Y, r24
    2d5c:	99 83       	std	Y+1, r25	; 0x01
	if (uart_tail[idx] >= MAX_BUFFER_LEN){
    2d5e:	88 81       	ld	r24, Y
    2d60:	99 81       	ldd	r25, Y+1	; 0x01
    2d62:	b4 e0       	ldi	r27, 0x04	; 4
    2d64:	80 30       	cpi	r24, 0x00	; 0
    2d66:	9b 07       	cpc	r25, r27
    2d68:	10 f0       	brcs	.+4      	; 0x2d6e <uart_receive_lcd+0x1b8>
		uart_tail[idx] = 0;
    2d6a:	18 82       	st	Y, r1
    2d6c:	19 82       	std	Y+1, r1	; 0x01
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    2d6e:	ee 55       	subi	r30, 0x5E	; 94
    2d70:	f7 4c       	sbci	r31, 0xC7	; 199
    2d72:	80 81       	ld	r24, Z
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
    2d74:	f7 01       	movw	r30, r14
    2d76:	80 83       	st	Z, r24
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    2d78:	81 81       	ldd	r24, Z+1	; 0x01
    2d7a:	85 ff       	sbrs	r24, 5
    2d7c:	1c c0       	rjmp	.+56     	; 0x2db6 <uart_receive_lcd+0x200>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    2d7e:	d8 01       	movw	r26, r16
    2d80:	8d 91       	ld	r24, X+
    2d82:	9c 91       	ld	r25, X
    2d84:	11 97       	sbiw	r26, 0x01	; 1
    2d86:	28 81       	ld	r18, Y
    2d88:	39 81       	ldd	r19, Y+1	; 0x01
    2d8a:	82 17       	cp	r24, r18
    2d8c:	93 07       	cpc	r25, r19
    2d8e:	40 f0       	brcs	.+16     	; 0x2da0 <uart_receive_lcd+0x1ea>
		return (uart_head[idx] - uart_tail[idx]);
    2d90:	8d 91       	ld	r24, X+
    2d92:	9c 91       	ld	r25, X
    2d94:	11 97       	sbiw	r26, 0x01	; 1
    2d96:	28 81       	ld	r18, Y
    2d98:	39 81       	ldd	r19, Y+1	; 0x01
    2d9a:	82 1b       	sub	r24, r18
    2d9c:	93 0b       	sbc	r25, r19
    2d9e:	09 c0       	rjmp	.+18     	; 0x2db2 <uart_receive_lcd+0x1fc>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    2da0:	f8 01       	movw	r30, r16
    2da2:	80 81       	ld	r24, Z
    2da4:	91 81       	ldd	r25, Z+1	; 0x01
    2da6:	28 81       	ld	r18, Y
    2da8:	39 81       	ldd	r19, Y+1	; 0x01
    2daa:	80 50       	subi	r24, 0x00	; 0
    2dac:	9c 4f       	sbci	r25, 0xFC	; 252
    2dae:	82 1b       	sub	r24, r18
    2db0:	93 0b       	sbc	r25, r19
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    2db2:	00 97       	sbiw	r24, 0x00	; 0
    2db4:	69 f6       	brne	.-102    	; 0x2d50 <uart_receive_lcd+0x19a>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    2db6:	d8 01       	movw	r26, r16
    2db8:	8d 91       	ld	r24, X+
    2dba:	9c 91       	ld	r25, X
    2dbc:	11 97       	sbiw	r26, 0x01	; 1
    2dbe:	28 81       	ld	r18, Y
    2dc0:	39 81       	ldd	r19, Y+1	; 0x01
    2dc2:	82 17       	cp	r24, r18
    2dc4:	93 07       	cpc	r25, r19
    2dc6:	40 f0       	brcs	.+16     	; 0x2dd8 <uart_receive_lcd+0x222>
		return (uart_head[idx] - uart_tail[idx]);
    2dc8:	8d 91       	ld	r24, X+
    2dca:	9c 91       	ld	r25, X
    2dcc:	11 97       	sbiw	r26, 0x01	; 1
    2dce:	28 81       	ld	r18, Y
    2dd0:	39 81       	ldd	r19, Y+1	; 0x01
    2dd2:	82 1b       	sub	r24, r18
    2dd4:	93 0b       	sbc	r25, r19
    2dd6:	09 c0       	rjmp	.+18     	; 0x2dea <uart_receive_lcd+0x234>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    2dd8:	f8 01       	movw	r30, r16
    2dda:	80 81       	ld	r24, Z
    2ddc:	91 81       	ldd	r25, Z+1	; 0x01
    2dde:	28 81       	ld	r18, Y
    2de0:	39 81       	ldd	r19, Y+1	; 0x01
    2de2:	80 50       	subi	r24, 0x00	; 0
    2de4:	9c 4f       	sbci	r25, 0xFC	; 252
    2de6:	82 1b       	sub	r24, r18
    2de8:	93 0b       	sbc	r25, r19
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
	}
	//disable the tx outgoing hardware buffer ready interrupt if we have nothing more to put in it.
	if(uart_count(port)>0) uart_txbuffer_enable(port);
    2dea:	00 97       	sbiw	r24, 0x00	; 0
    2dec:	21 f0       	breq	.+8      	; 0x2df6 <uart_receive_lcd+0x240>
    2dee:	c7 01       	movw	r24, r14
    2df0:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <uart_txbuffer_enable>
    2df4:	03 c0       	rjmp	.+6      	; 0x2dfc <uart_receive_lcd+0x246>
	else uart_txbuffer_disable(port);
    2df6:	c7 01       	movw	r24, r14
    2df8:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <uart_txbuffer_disable>
		incomingByte = port->DATA;
		uart_enqueue(&udata, incomingByte); //echo to data port
		if (incomingByte == 0x0D){
			switch(lcd_flow_type){				
				case LCD_MACRO:
					uart_enqueue(&udata,"+");uart_enqueue(&udata,lcd_touch_buffer[0]);uart_enqueue(&udata,lcd_touch_buffer[1]);
    2dfc:	d1 01       	movw	r26, r2
    2dfe:	2c 91       	ld	r18, X
#ifndef UART_DEBUG
	uint8_t idx = port_map(port);
	
	//if (idx==0){uart_enqueue(&uctrl, datain);} //xxx
	
	uart_buffer[idx][uart_head[idx]] = datain;
    2e00:	f8 01       	movw	r30, r16
    2e02:	80 81       	ld	r24, Z
    2e04:	91 81       	ldd	r25, Z+1	; 0x01
    2e06:	8e 55       	subi	r24, 0x5E	; 94
    2e08:	97 4c       	sbci	r25, 0xC7	; 199
    2e0a:	dc 01       	movw	r26, r24
    2e0c:	2c 93       	st	X, r18
	uart_head[idx]++;
    2e0e:	80 81       	ld	r24, Z
    2e10:	91 81       	ldd	r25, Z+1	; 0x01
    2e12:	01 96       	adiw	r24, 0x01	; 1
    2e14:	80 83       	st	Z, r24
    2e16:	91 83       	std	Z+1, r25	; 0x01
	if (uart_head[idx] >= MAX_BUFFER_LEN){
    2e18:	80 81       	ld	r24, Z
    2e1a:	91 81       	ldd	r25, Z+1	; 0x01
    2e1c:	b4 e0       	ldi	r27, 0x04	; 4
    2e1e:	80 30       	cpi	r24, 0x00	; 0
    2e20:	9b 07       	cpc	r25, r27
    2e22:	10 f0       	brcs	.+4      	; 0x2e28 <uart_receive_lcd+0x272>
		uart_head[idx] = 0;
    2e24:	10 82       	st	Z, r1
    2e26:	11 82       	std	Z+1, r1	; 0x01
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    2e28:	f7 01       	movw	r30, r14
    2e2a:	81 81       	ldd	r24, Z+1	; 0x01
    2e2c:	85 fd       	sbrc	r24, 5
    2e2e:	1a c0       	rjmp	.+52     	; 0x2e64 <uart_receive_lcd+0x2ae>
    2e30:	32 c0       	rjmp	.+100    	; 0x2e96 <uart_receive_lcd+0x2e0>
}

inline uint8_t uart_dequeue(USART_t* port){
	uint8_t idx = port_map(port);
	uint16_t oldtail;
	oldtail = uart_tail[idx];
    2e32:	e8 81       	ld	r30, Y
    2e34:	f9 81       	ldd	r31, Y+1	; 0x01
	uart_tail[idx]++;
    2e36:	88 81       	ld	r24, Y
    2e38:	99 81       	ldd	r25, Y+1	; 0x01
    2e3a:	01 96       	adiw	r24, 0x01	; 1
    2e3c:	88 83       	st	Y, r24
    2e3e:	99 83       	std	Y+1, r25	; 0x01
	if (uart_tail[idx] >= MAX_BUFFER_LEN){
    2e40:	88 81       	ld	r24, Y
    2e42:	99 81       	ldd	r25, Y+1	; 0x01
    2e44:	24 e0       	ldi	r18, 0x04	; 4
    2e46:	80 30       	cpi	r24, 0x00	; 0
    2e48:	92 07       	cpc	r25, r18
    2e4a:	10 f0       	brcs	.+4      	; 0x2e50 <uart_receive_lcd+0x29a>
		uart_tail[idx] = 0;
    2e4c:	18 82       	st	Y, r1
    2e4e:	19 82       	std	Y+1, r1	; 0x01
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    2e50:	ee 55       	subi	r30, 0x5E	; 94
    2e52:	f7 4c       	sbci	r31, 0xC7	; 199
    2e54:	80 81       	ld	r24, Z
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
    2e56:	d7 01       	movw	r26, r14
    2e58:	8c 93       	st	X, r24
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    2e5a:	11 96       	adiw	r26, 0x01	; 1
    2e5c:	8c 91       	ld	r24, X
    2e5e:	11 97       	sbiw	r26, 0x01	; 1
    2e60:	85 ff       	sbrs	r24, 5
    2e62:	19 c0       	rjmp	.+50     	; 0x2e96 <uart_receive_lcd+0x2e0>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    2e64:	f8 01       	movw	r30, r16
    2e66:	80 81       	ld	r24, Z
    2e68:	91 81       	ldd	r25, Z+1	; 0x01
    2e6a:	28 81       	ld	r18, Y
    2e6c:	39 81       	ldd	r19, Y+1	; 0x01
    2e6e:	82 17       	cp	r24, r18
    2e70:	93 07       	cpc	r25, r19
    2e72:	38 f0       	brcs	.+14     	; 0x2e82 <uart_receive_lcd+0x2cc>
		return (uart_head[idx] - uart_tail[idx]);
    2e74:	80 81       	ld	r24, Z
    2e76:	91 81       	ldd	r25, Z+1	; 0x01
    2e78:	28 81       	ld	r18, Y
    2e7a:	39 81       	ldd	r19, Y+1	; 0x01
    2e7c:	82 1b       	sub	r24, r18
    2e7e:	93 0b       	sbc	r25, r19
    2e80:	08 c0       	rjmp	.+16     	; 0x2e92 <uart_receive_lcd+0x2dc>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    2e82:	80 81       	ld	r24, Z
    2e84:	91 81       	ldd	r25, Z+1	; 0x01
    2e86:	28 81       	ld	r18, Y
    2e88:	39 81       	ldd	r19, Y+1	; 0x01
    2e8a:	80 50       	subi	r24, 0x00	; 0
    2e8c:	9c 4f       	sbci	r25, 0xFC	; 252
    2e8e:	82 1b       	sub	r24, r18
    2e90:	93 0b       	sbc	r25, r19
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    2e92:	00 97       	sbiw	r24, 0x00	; 0
    2e94:	71 f6       	brne	.-100    	; 0x2e32 <uart_receive_lcd+0x27c>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    2e96:	f8 01       	movw	r30, r16
    2e98:	80 81       	ld	r24, Z
    2e9a:	91 81       	ldd	r25, Z+1	; 0x01
    2e9c:	28 81       	ld	r18, Y
    2e9e:	39 81       	ldd	r19, Y+1	; 0x01
    2ea0:	82 17       	cp	r24, r18
    2ea2:	93 07       	cpc	r25, r19
    2ea4:	38 f0       	brcs	.+14     	; 0x2eb4 <uart_receive_lcd+0x2fe>
		return (uart_head[idx] - uart_tail[idx]);
    2ea6:	80 81       	ld	r24, Z
    2ea8:	91 81       	ldd	r25, Z+1	; 0x01
    2eaa:	28 81       	ld	r18, Y
    2eac:	39 81       	ldd	r19, Y+1	; 0x01
    2eae:	82 1b       	sub	r24, r18
    2eb0:	93 0b       	sbc	r25, r19
    2eb2:	08 c0       	rjmp	.+16     	; 0x2ec4 <uart_receive_lcd+0x30e>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    2eb4:	80 81       	ld	r24, Z
    2eb6:	91 81       	ldd	r25, Z+1	; 0x01
    2eb8:	28 81       	ld	r18, Y
    2eba:	39 81       	ldd	r19, Y+1	; 0x01
    2ebc:	80 50       	subi	r24, 0x00	; 0
    2ebe:	9c 4f       	sbci	r25, 0xFC	; 252
    2ec0:	82 1b       	sub	r24, r18
    2ec2:	93 0b       	sbc	r25, r19
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
	}
	//disable the tx outgoing hardware buffer ready interrupt if we have nothing more to put in it.
	if(uart_count(port)>0) uart_txbuffer_enable(port);
    2ec4:	00 97       	sbiw	r24, 0x00	; 0
    2ec6:	21 f0       	breq	.+8      	; 0x2ed0 <uart_receive_lcd+0x31a>
    2ec8:	c7 01       	movw	r24, r14
    2eca:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <uart_txbuffer_enable>
    2ece:	03 c0       	rjmp	.+6      	; 0x2ed6 <uart_receive_lcd+0x320>
	else uart_txbuffer_disable(port);
    2ed0:	c7 01       	movw	r24, r14
    2ed2:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <uart_txbuffer_disable>
		incomingByte = port->DATA;
		uart_enqueue(&udata, incomingByte); //echo to data port
		if (incomingByte == 0x0D){
			switch(lcd_flow_type){				
				case LCD_MACRO:
					uart_enqueue(&udata,"+");uart_enqueue(&udata,lcd_touch_buffer[0]);uart_enqueue(&udata,lcd_touch_buffer[1]);
    2ed6:	ed e8       	ldi	r30, 0x8D	; 141
    2ed8:	f4 e2       	ldi	r31, 0x24	; 36
    2eda:	20 81       	ld	r18, Z
#ifndef UART_DEBUG
	uint8_t idx = port_map(port);
	
	//if (idx==0){uart_enqueue(&uctrl, datain);} //xxx
	
	uart_buffer[idx][uart_head[idx]] = datain;
    2edc:	d8 01       	movw	r26, r16
    2ede:	8d 91       	ld	r24, X+
    2ee0:	9c 91       	ld	r25, X
    2ee2:	11 97       	sbiw	r26, 0x01	; 1
    2ee4:	8e 55       	subi	r24, 0x5E	; 94
    2ee6:	97 4c       	sbci	r25, 0xC7	; 199
    2ee8:	fc 01       	movw	r30, r24
    2eea:	20 83       	st	Z, r18
	uart_head[idx]++;
    2eec:	8d 91       	ld	r24, X+
    2eee:	9c 91       	ld	r25, X
    2ef0:	11 97       	sbiw	r26, 0x01	; 1
    2ef2:	01 96       	adiw	r24, 0x01	; 1
    2ef4:	8d 93       	st	X+, r24
    2ef6:	9c 93       	st	X, r25
    2ef8:	11 97       	sbiw	r26, 0x01	; 1
	if (uart_head[idx] >= MAX_BUFFER_LEN){
    2efa:	8d 91       	ld	r24, X+
    2efc:	9c 91       	ld	r25, X
    2efe:	11 97       	sbiw	r26, 0x01	; 1
    2f00:	f4 e0       	ldi	r31, 0x04	; 4
    2f02:	80 30       	cpi	r24, 0x00	; 0
    2f04:	9f 07       	cpc	r25, r31
    2f06:	18 f0       	brcs	.+6      	; 0x2f0e <uart_receive_lcd+0x358>
		uart_head[idx] = 0;
    2f08:	1d 92       	st	X+, r1
    2f0a:	1c 92       	st	X, r1
    2f0c:	11 97       	sbiw	r26, 0x01	; 1
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    2f0e:	d7 01       	movw	r26, r14
    2f10:	11 96       	adiw	r26, 0x01	; 1
    2f12:	8c 91       	ld	r24, X
    2f14:	11 97       	sbiw	r26, 0x01	; 1
    2f16:	85 fd       	sbrc	r24, 5
    2f18:	18 c0       	rjmp	.+48     	; 0x2f4a <uart_receive_lcd+0x394>
    2f1a:	33 c0       	rjmp	.+102    	; 0x2f82 <uart_receive_lcd+0x3cc>
}

inline uint8_t uart_dequeue(USART_t* port){
	uint8_t idx = port_map(port);
	uint16_t oldtail;
	oldtail = uart_tail[idx];
    2f1c:	e8 81       	ld	r30, Y
    2f1e:	f9 81       	ldd	r31, Y+1	; 0x01
	uart_tail[idx]++;
    2f20:	88 81       	ld	r24, Y
    2f22:	99 81       	ldd	r25, Y+1	; 0x01
    2f24:	01 96       	adiw	r24, 0x01	; 1
    2f26:	88 83       	st	Y, r24
    2f28:	99 83       	std	Y+1, r25	; 0x01
	if (uart_tail[idx] >= MAX_BUFFER_LEN){
    2f2a:	88 81       	ld	r24, Y
    2f2c:	99 81       	ldd	r25, Y+1	; 0x01
    2f2e:	b4 e0       	ldi	r27, 0x04	; 4
    2f30:	80 30       	cpi	r24, 0x00	; 0
    2f32:	9b 07       	cpc	r25, r27
    2f34:	10 f0       	brcs	.+4      	; 0x2f3a <uart_receive_lcd+0x384>
		uart_tail[idx] = 0;
    2f36:	18 82       	st	Y, r1
    2f38:	19 82       	std	Y+1, r1	; 0x01
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    2f3a:	ee 55       	subi	r30, 0x5E	; 94
    2f3c:	f7 4c       	sbci	r31, 0xC7	; 199
    2f3e:	80 81       	ld	r24, Z
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
    2f40:	f7 01       	movw	r30, r14
    2f42:	80 83       	st	Z, r24
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    2f44:	81 81       	ldd	r24, Z+1	; 0x01
    2f46:	85 ff       	sbrs	r24, 5
    2f48:	1c c0       	rjmp	.+56     	; 0x2f82 <uart_receive_lcd+0x3cc>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    2f4a:	d8 01       	movw	r26, r16
    2f4c:	8d 91       	ld	r24, X+
    2f4e:	9c 91       	ld	r25, X
    2f50:	11 97       	sbiw	r26, 0x01	; 1
    2f52:	28 81       	ld	r18, Y
    2f54:	39 81       	ldd	r19, Y+1	; 0x01
    2f56:	82 17       	cp	r24, r18
    2f58:	93 07       	cpc	r25, r19
    2f5a:	40 f0       	brcs	.+16     	; 0x2f6c <uart_receive_lcd+0x3b6>
		return (uart_head[idx] - uart_tail[idx]);
    2f5c:	8d 91       	ld	r24, X+
    2f5e:	9c 91       	ld	r25, X
    2f60:	11 97       	sbiw	r26, 0x01	; 1
    2f62:	28 81       	ld	r18, Y
    2f64:	39 81       	ldd	r19, Y+1	; 0x01
    2f66:	82 1b       	sub	r24, r18
    2f68:	93 0b       	sbc	r25, r19
    2f6a:	09 c0       	rjmp	.+18     	; 0x2f7e <uart_receive_lcd+0x3c8>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    2f6c:	f8 01       	movw	r30, r16
    2f6e:	80 81       	ld	r24, Z
    2f70:	91 81       	ldd	r25, Z+1	; 0x01
    2f72:	28 81       	ld	r18, Y
    2f74:	39 81       	ldd	r19, Y+1	; 0x01
    2f76:	80 50       	subi	r24, 0x00	; 0
    2f78:	9c 4f       	sbci	r25, 0xFC	; 252
    2f7a:	82 1b       	sub	r24, r18
    2f7c:	93 0b       	sbc	r25, r19
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    2f7e:	00 97       	sbiw	r24, 0x00	; 0
    2f80:	69 f6       	brne	.-102    	; 0x2f1c <uart_receive_lcd+0x366>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    2f82:	d8 01       	movw	r26, r16
    2f84:	8d 91       	ld	r24, X+
    2f86:	9c 91       	ld	r25, X
    2f88:	11 97       	sbiw	r26, 0x01	; 1
    2f8a:	28 81       	ld	r18, Y
    2f8c:	39 81       	ldd	r19, Y+1	; 0x01
    2f8e:	82 17       	cp	r24, r18
    2f90:	93 07       	cpc	r25, r19
    2f92:	40 f0       	brcs	.+16     	; 0x2fa4 <uart_receive_lcd+0x3ee>
		return (uart_head[idx] - uart_tail[idx]);
    2f94:	8d 91       	ld	r24, X+
    2f96:	9c 91       	ld	r25, X
    2f98:	11 97       	sbiw	r26, 0x01	; 1
    2f9a:	28 81       	ld	r18, Y
    2f9c:	39 81       	ldd	r19, Y+1	; 0x01
    2f9e:	82 1b       	sub	r24, r18
    2fa0:	93 0b       	sbc	r25, r19
    2fa2:	09 c0       	rjmp	.+18     	; 0x2fb6 <uart_receive_lcd+0x400>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    2fa4:	f8 01       	movw	r30, r16
    2fa6:	80 81       	ld	r24, Z
    2fa8:	91 81       	ldd	r25, Z+1	; 0x01
    2faa:	28 81       	ld	r18, Y
    2fac:	39 81       	ldd	r19, Y+1	; 0x01
    2fae:	80 50       	subi	r24, 0x00	; 0
    2fb0:	9c 4f       	sbci	r25, 0xFC	; 252
    2fb2:	82 1b       	sub	r24, r18
    2fb4:	93 0b       	sbc	r25, r19
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
	}
	//disable the tx outgoing hardware buffer ready interrupt if we have nothing more to put in it.
	if(uart_count(port)>0) uart_txbuffer_enable(port);
    2fb6:	00 97       	sbiw	r24, 0x00	; 0
    2fb8:	21 f0       	breq	.+8      	; 0x2fc2 <uart_receive_lcd+0x40c>
    2fba:	c7 01       	movw	r24, r14
    2fbc:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <uart_txbuffer_enable>
    2fc0:	03 c0       	rjmp	.+6      	; 0x2fc8 <uart_receive_lcd+0x412>
	else uart_txbuffer_disable(port);
    2fc2:	c7 01       	movw	r24, r14
    2fc4:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <uart_txbuffer_disable>
		uart_enqueue(&udata, incomingByte); //echo to data port
		if (incomingByte == 0x0D){
			switch(lcd_flow_type){				
				case LCD_MACRO:
					uart_enqueue(&udata,"+");uart_enqueue(&udata,lcd_touch_buffer[0]);uart_enqueue(&udata,lcd_touch_buffer[1]);
					if (lcd_end_macro()){ //look for '~ macro terminator sequence
    2fc8:	0e 94 57 05 	call	0xaae	; 0xaae <lcd_end_macro>
    2fcc:	88 23       	and	r24, r24
    2fce:	39 f0       	breq	.+14     	; 0x2fde <uart_receive_lcd+0x428>
						lcd_flow_control = LCD_DONE_MACRO;
    2fd0:	80 e5       	ldi	r24, 0x50	; 80
    2fd2:	80 93 94 24 	sts	0x2494, r24
    2fd6:	03 c0       	rjmp	.+6      	; 0x2fde <uart_receive_lcd+0x428>
					}
					break;
				default:
				case LCD_COMMAND:
					lcd_flow_control = LCD_DONE_COMMAND;
    2fd8:	8f e4       	ldi	r24, 0x4F	; 79
    2fda:	80 93 94 24 	sts	0x2494, r24
					break;
			}					
		}
		lcd_set_touch(incomingByte); //write to touch-command listener
    2fde:	8b 2d       	mov	r24, r11
    2fe0:	0e 94 6a 05 	call	0xad4	; 0xad4 <lcd_set_touch>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    2fe4:	f0 eb       	ldi	r31, 0xB0	; 176
    2fe6:	cf 16       	cp	r12, r31
    2fe8:	fb e0       	ldi	r31, 0x0B	; 11
    2fea:	df 06       	cpc	r13, r31
    2fec:	61 f0       	breq	.+24     	; 0x3006 <uart_receive_lcd+0x450>
	if (port == &uctrl) {return 1;}
    2fee:	20 ea       	ldi	r18, 0xA0	; 160
    2ff0:	c2 16       	cp	r12, r18
    2ff2:	28 e0       	ldi	r18, 0x08	; 8
    2ff4:	d2 06       	cpc	r13, r18
    2ff6:	49 f0       	breq	.+18     	; 0x300a <uart_receive_lcd+0x454>
	if (port == &udata) {return 2;}
    2ff8:	30 eb       	ldi	r19, 0xB0	; 176
    2ffa:	c3 16       	cp	r12, r19
    2ffc:	38 e0       	ldi	r19, 0x08	; 8
    2ffe:	d3 06       	cpc	r13, r19
    3000:	31 f4       	brne	.+12     	; 0x300e <uart_receive_lcd+0x458>
    3002:	42 e0       	ldi	r20, 0x02	; 2
    3004:	05 c0       	rjmp	.+10     	; 0x3010 <uart_receive_lcd+0x45a>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    3006:	40 e0       	ldi	r20, 0x00	; 0
    3008:	03 c0       	rjmp	.+6      	; 0x3010 <uart_receive_lcd+0x45a>
	if (port == &uctrl) {return 1;}
    300a:	41 e0       	ldi	r20, 0x01	; 1
    300c:	01 c0       	rjmp	.+2      	; 0x3010 <uart_receive_lcd+0x45a>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    300e:	40 e0       	ldi	r20, 0x00	; 0
	}
}

inline void uart_ienqueue(USART_t* port, uint8_t datain){
	uint8_t idx = port_map(port);
	uart_ibuffer[idx][uart_ihead[idx]] = datain;
    3010:	50 e0       	ldi	r21, 0x00	; 0
    3012:	ca 01       	movw	r24, r20
    3014:	88 0f       	add	r24, r24
    3016:	99 1f       	adc	r25, r25
    3018:	f4 01       	movw	r30, r8
    301a:	e8 0f       	add	r30, r24
    301c:	f9 1f       	adc	r31, r25
    301e:	20 81       	ld	r18, Z
    3020:	31 81       	ldd	r19, Z+1	; 0x01
    3022:	ca 01       	movw	r24, r20
    3024:	98 2f       	mov	r25, r24
    3026:	88 27       	eor	r24, r24
    3028:	99 0f       	add	r25, r25
    302a:	99 0f       	add	r25, r25
    302c:	82 0f       	add	r24, r18
    302e:	93 1f       	adc	r25, r19
    3030:	84 0d       	add	r24, r4
    3032:	95 1d       	adc	r25, r5
    3034:	dc 01       	movw	r26, r24
    3036:	bc 92       	st	X, r11
	uart_ihead[idx]++;
    3038:	80 81       	ld	r24, Z
    303a:	91 81       	ldd	r25, Z+1	; 0x01
    303c:	01 96       	adiw	r24, 0x01	; 1
    303e:	80 83       	st	Z, r24
    3040:	91 83       	std	Z+1, r25	; 0x01
	if (uart_ihead[idx] >= MAX_IBUFFER_LEN){
    3042:	80 81       	ld	r24, Z
    3044:	91 81       	ldd	r25, Z+1	; 0x01
    3046:	b4 e0       	ldi	r27, 0x04	; 4
    3048:	80 30       	cpi	r24, 0x00	; 0
    304a:	9b 07       	cpc	r25, r27
    304c:	10 f0       	brcs	.+4      	; 0x3052 <uart_receive_lcd+0x49c>
		uart_ihead[idx] = 0;
    304e:	10 82       	st	Z, r1
    3050:	11 82       	std	Z+1, r1	; 0x01
}

void inline uart_receive_lcd(USART_t* port){
	uint8_t incomingByte;
	//keep receiving until data register is empty or incoming queue is full
	while (((port->STATUS & _BV(7)) == B8(10000000)) && (uart_icount(port) < MAX_IBUFFER_LEN)){
    3052:	d6 01       	movw	r26, r12
    3054:	11 96       	adiw	r26, 0x01	; 1
    3056:	8c 91       	ld	r24, X
    3058:	11 97       	sbiw	r26, 0x01	; 1
    305a:	88 23       	and	r24, r24
    305c:	0c f0       	brlt	.+2      	; 0x3060 <uart_receive_lcd+0x4aa>
    305e:	4d c0       	rjmp	.+154    	; 0x30fa <uart_receive_lcd+0x544>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    3060:	b0 eb       	ldi	r27, 0xB0	; 176
    3062:	cb 16       	cp	r12, r27
    3064:	bb e0       	ldi	r27, 0x0B	; 11
    3066:	db 06       	cpc	r13, r27
    3068:	61 f0       	breq	.+24     	; 0x3082 <uart_receive_lcd+0x4cc>
	if (port == &uctrl) {return 1;}
    306a:	e0 ea       	ldi	r30, 0xA0	; 160
    306c:	ce 16       	cp	r12, r30
    306e:	e8 e0       	ldi	r30, 0x08	; 8
    3070:	de 06       	cpc	r13, r30
    3072:	49 f0       	breq	.+18     	; 0x3086 <uart_receive_lcd+0x4d0>
	if (port == &udata) {return 2;}
    3074:	f0 eb       	ldi	r31, 0xB0	; 176
    3076:	cf 16       	cp	r12, r31
    3078:	f8 e0       	ldi	r31, 0x08	; 8
    307a:	df 06       	cpc	r13, r31
    307c:	31 f4       	brne	.+12     	; 0x308a <uart_receive_lcd+0x4d4>
    307e:	22 e0       	ldi	r18, 0x02	; 2
    3080:	05 c0       	rjmp	.+10     	; 0x308c <uart_receive_lcd+0x4d6>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    3082:	20 e0       	ldi	r18, 0x00	; 0
    3084:	03 c0       	rjmp	.+6      	; 0x308c <uart_receive_lcd+0x4d6>
	if (port == &uctrl) {return 1;}
    3086:	21 e0       	ldi	r18, 0x01	; 1
    3088:	01 c0       	rjmp	.+2      	; 0x308c <uart_receive_lcd+0x4d6>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    308a:	20 e0       	ldi	r18, 0x00	; 0
	uart_itail[idx] = 0;
}

inline uint16_t uart_icount(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_ihead[idx] >= uart_itail[idx]){	
    308c:	30 e0       	ldi	r19, 0x00	; 0
    308e:	c9 01       	movw	r24, r18
    3090:	88 0f       	add	r24, r24
    3092:	99 1f       	adc	r25, r25
    3094:	f4 01       	movw	r30, r8
    3096:	e8 0f       	add	r30, r24
    3098:	f9 1f       	adc	r31, r25
    309a:	40 81       	ld	r20, Z
    309c:	51 81       	ldd	r21, Z+1	; 0x01
    309e:	f3 01       	movw	r30, r6
    30a0:	e8 0f       	add	r30, r24
    30a2:	f9 1f       	adc	r31, r25
    30a4:	80 81       	ld	r24, Z
    30a6:	91 81       	ldd	r25, Z+1	; 0x01
    30a8:	48 17       	cp	r20, r24
    30aa:	59 07       	cpc	r21, r25
    30ac:	88 f0       	brcs	.+34     	; 0x30d0 <uart_receive_lcd+0x51a>
		return (uart_ihead[idx] - uart_itail[idx]);
    30ae:	22 0f       	add	r18, r18
    30b0:	33 1f       	adc	r19, r19
    30b2:	f4 01       	movw	r30, r8
    30b4:	e2 0f       	add	r30, r18
    30b6:	f3 1f       	adc	r31, r19
    30b8:	40 81       	ld	r20, Z
    30ba:	51 81       	ldd	r21, Z+1	; 0x01
    30bc:	f3 01       	movw	r30, r6
    30be:	e2 0f       	add	r30, r18
    30c0:	f3 1f       	adc	r31, r19
    30c2:	80 81       	ld	r24, Z
    30c4:	91 81       	ldd	r25, Z+1	; 0x01
    30c6:	9a 01       	movw	r18, r20
    30c8:	28 1b       	sub	r18, r24
    30ca:	39 0b       	sbc	r19, r25
    30cc:	c9 01       	movw	r24, r18
    30ce:	10 c0       	rjmp	.+32     	; 0x30f0 <uart_receive_lcd+0x53a>
	}
	else {
		return ((MAX_IBUFFER_LEN-uart_itail[idx])+uart_ihead[idx]);
    30d0:	22 0f       	add	r18, r18
    30d2:	33 1f       	adc	r19, r19
    30d4:	f4 01       	movw	r30, r8
    30d6:	e2 0f       	add	r30, r18
    30d8:	f3 1f       	adc	r31, r19
    30da:	80 81       	ld	r24, Z
    30dc:	91 81       	ldd	r25, Z+1	; 0x01
    30de:	f3 01       	movw	r30, r6
    30e0:	e2 0f       	add	r30, r18
    30e2:	f3 1f       	adc	r31, r19
    30e4:	20 81       	ld	r18, Z
    30e6:	31 81       	ldd	r19, Z+1	; 0x01
    30e8:	80 50       	subi	r24, 0x00	; 0
    30ea:	9c 4f       	sbci	r25, 0xFC	; 252
    30ec:	82 1b       	sub	r24, r18
    30ee:	93 0b       	sbc	r25, r19
}

void inline uart_receive_lcd(USART_t* port){
	uint8_t incomingByte;
	//keep receiving until data register is empty or incoming queue is full
	while (((port->STATUS & _BV(7)) == B8(10000000)) && (uart_icount(port) < MAX_IBUFFER_LEN)){
    30f0:	34 e0       	ldi	r19, 0x04	; 4
    30f2:	80 30       	cpi	r24, 0x00	; 0
    30f4:	93 07       	cpc	r25, r19
    30f6:	08 f4       	brcc	.+2      	; 0x30fa <uart_receive_lcd+0x544>
    30f8:	93 cd       	rjmp	.-1242   	; 0x2c20 <uart_receive_lcd+0x6a>
			}					
		}
		lcd_set_touch(incomingByte); //write to touch-command listener
		uart_ienqueue(port, incomingByte);
	}
}
    30fa:	df 91       	pop	r29
    30fc:	cf 91       	pop	r28
    30fe:	1f 91       	pop	r17
    3100:	0f 91       	pop	r16
    3102:	ff 90       	pop	r15
    3104:	ef 90       	pop	r14
    3106:	df 90       	pop	r13
    3108:	cf 90       	pop	r12
    310a:	bf 90       	pop	r11
    310c:	9f 90       	pop	r9
    310e:	8f 90       	pop	r8
    3110:	7f 90       	pop	r7
    3112:	6f 90       	pop	r6
    3114:	5f 90       	pop	r5
    3116:	4f 90       	pop	r4
    3118:	3f 90       	pop	r3
    311a:	2f 90       	pop	r2
    311c:	08 95       	ret

0000311e <__vector_122>:
SIGNAL(USARTC0_DRE_vect) {uart_transmit(&uctrl);}//TX Interrupt
SIGNAL(USARTC0_RXC_vect) {uart_receive(&uctrl);} //RX Interrupt
SIGNAL(USARTC1_DRE_vect) {uart_transmit(&udata);}//TX Interrupt
SIGNAL(USARTC1_RXC_vect) {uart_receive(&udata);} //RX Interrupt
SIGNAL(USARTF1_DRE_vect) {uart_transmit_lcd(&ulcd);}//TX Interrupt
SIGNAL(USARTF1_RXC_vect) {uart_receive_lcd(&ulcd);} //RX Interrupt
    311e:	1f 92       	push	r1
    3120:	0f 92       	push	r0
    3122:	0f b6       	in	r0, 0x3f	; 63
    3124:	0f 92       	push	r0
    3126:	08 b6       	in	r0, 0x38	; 56
    3128:	0f 92       	push	r0
    312a:	09 b6       	in	r0, 0x39	; 57
    312c:	0f 92       	push	r0
    312e:	0b b6       	in	r0, 0x3b	; 59
    3130:	0f 92       	push	r0
    3132:	11 24       	eor	r1, r1
    3134:	2f 93       	push	r18
    3136:	3f 93       	push	r19
    3138:	4f 93       	push	r20
    313a:	5f 93       	push	r21
    313c:	6f 93       	push	r22
    313e:	7f 93       	push	r23
    3140:	8f 93       	push	r24
    3142:	9f 93       	push	r25
    3144:	af 93       	push	r26
    3146:	bf 93       	push	r27
    3148:	ef 93       	push	r30
    314a:	ff 93       	push	r31
    314c:	80 eb       	ldi	r24, 0xB0	; 176
    314e:	9b e0       	ldi	r25, 0x0B	; 11
    3150:	0e 94 db 15 	call	0x2bb6	; 0x2bb6 <uart_receive_lcd>
    3154:	ff 91       	pop	r31
    3156:	ef 91       	pop	r30
    3158:	bf 91       	pop	r27
    315a:	af 91       	pop	r26
    315c:	9f 91       	pop	r25
    315e:	8f 91       	pop	r24
    3160:	7f 91       	pop	r23
    3162:	6f 91       	pop	r22
    3164:	5f 91       	pop	r21
    3166:	4f 91       	pop	r20
    3168:	3f 91       	pop	r19
    316a:	2f 91       	pop	r18
    316c:	0f 90       	pop	r0
    316e:	0b be       	out	0x3b, r0	; 59
    3170:	0f 90       	pop	r0
    3172:	09 be       	out	0x39, r0	; 57
    3174:	0f 90       	pop	r0
    3176:	08 be       	out	0x38, r0	; 56
    3178:	0f 90       	pop	r0
    317a:	0f be       	out	0x3f, r0	; 63
    317c:	0f 90       	pop	r0
    317e:	1f 90       	pop	r1
    3180:	18 95       	reti

00003182 <init_uart_obuffer>:
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    3182:	2b e0       	ldi	r18, 0x0B	; 11
    3184:	80 3b       	cpi	r24, 0xB0	; 176
    3186:	92 07       	cpc	r25, r18
    3188:	51 f0       	breq	.+20     	; 0x319e <init_uart_obuffer+0x1c>
	if (port == &uctrl) {return 1;}
    318a:	e8 e0       	ldi	r30, 0x08	; 8
    318c:	80 3a       	cpi	r24, 0xA0	; 160
    318e:	9e 07       	cpc	r25, r30
    3190:	41 f0       	breq	.+16     	; 0x31a2 <init_uart_obuffer+0x20>
	if (port == &udata) {return 2;}
    3192:	f8 e0       	ldi	r31, 0x08	; 8
    3194:	80 3b       	cpi	r24, 0xB0	; 176
    3196:	9f 07       	cpc	r25, r31
    3198:	31 f4       	brne	.+12     	; 0x31a6 <init_uart_obuffer+0x24>
    319a:	82 e0       	ldi	r24, 0x02	; 2
    319c:	05 c0       	rjmp	.+10     	; 0x31a8 <init_uart_obuffer+0x26>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    319e:	80 e0       	ldi	r24, 0x00	; 0
    31a0:	03 c0       	rjmp	.+6      	; 0x31a8 <init_uart_obuffer+0x26>
	if (port == &uctrl) {return 1;}
    31a2:	81 e0       	ldi	r24, 0x01	; 1
    31a4:	01 c0       	rjmp	.+2      	; 0x31a8 <init_uart_obuffer+0x26>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    31a6:	80 e0       	ldi	r24, 0x00	; 0
	No protection is provided for buffer overflow! Be careful! */
//***************************************************

void init_uart_obuffer(USART_t* port){
	uint8_t idx = port_map(port);
	uart_head[idx] = 0;
    31a8:	90 e0       	ldi	r25, 0x00	; 0
    31aa:	88 0f       	add	r24, r24
    31ac:	99 1f       	adc	r25, r25
    31ae:	fc 01       	movw	r30, r24
    31b0:	e4 56       	subi	r30, 0x64	; 100
    31b2:	ff 4c       	sbci	r31, 0xCF	; 207
    31b4:	10 82       	st	Z, r1
    31b6:	11 82       	std	Z+1, r1	; 0x01
	uart_tail[idx] = 0;
    31b8:	88 55       	subi	r24, 0x58	; 88
    31ba:	93 4c       	sbci	r25, 0xC3	; 195
    31bc:	fc 01       	movw	r30, r24
    31be:	10 82       	st	Z, r1
    31c0:	11 82       	std	Z+1, r1	; 0x01
}
    31c2:	08 95       	ret

000031c4 <uart_count>:
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    31c4:	2b e0       	ldi	r18, 0x0B	; 11
    31c6:	80 3b       	cpi	r24, 0xB0	; 176
    31c8:	92 07       	cpc	r25, r18
    31ca:	51 f0       	breq	.+20     	; 0x31e0 <uart_count+0x1c>
	if (port == &uctrl) {return 1;}
    31cc:	e8 e0       	ldi	r30, 0x08	; 8
    31ce:	80 3a       	cpi	r24, 0xA0	; 160
    31d0:	9e 07       	cpc	r25, r30
    31d2:	41 f0       	breq	.+16     	; 0x31e4 <uart_count+0x20>
	if (port == &udata) {return 2;}
    31d4:	f8 e0       	ldi	r31, 0x08	; 8
    31d6:	80 3b       	cpi	r24, 0xB0	; 176
    31d8:	9f 07       	cpc	r25, r31
    31da:	31 f4       	brne	.+12     	; 0x31e8 <uart_count+0x24>
    31dc:	82 e0       	ldi	r24, 0x02	; 2
    31de:	05 c0       	rjmp	.+10     	; 0x31ea <uart_count+0x26>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    31e0:	80 e0       	ldi	r24, 0x00	; 0
    31e2:	03 c0       	rjmp	.+6      	; 0x31ea <uart_count+0x26>
	if (port == &uctrl) {return 1;}
    31e4:	81 e0       	ldi	r24, 0x01	; 1
    31e6:	01 c0       	rjmp	.+2      	; 0x31ea <uart_count+0x26>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    31e8:	80 e0       	ldi	r24, 0x00	; 0
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    31ea:	90 e0       	ldi	r25, 0x00	; 0
    31ec:	9c 01       	movw	r18, r24
    31ee:	22 0f       	add	r18, r18
    31f0:	33 1f       	adc	r19, r19
    31f2:	f9 01       	movw	r30, r18
    31f4:	e4 56       	subi	r30, 0x64	; 100
    31f6:	ff 4c       	sbci	r31, 0xCF	; 207
    31f8:	40 81       	ld	r20, Z
    31fa:	51 81       	ldd	r21, Z+1	; 0x01
    31fc:	28 55       	subi	r18, 0x58	; 88
    31fe:	33 4c       	sbci	r19, 0xC3	; 195
    3200:	f9 01       	movw	r30, r18
    3202:	20 81       	ld	r18, Z
    3204:	31 81       	ldd	r19, Z+1	; 0x01
    3206:	42 17       	cp	r20, r18
    3208:	53 07       	cpc	r21, r19
    320a:	80 f0       	brcs	.+32     	; 0x322c <uart_count+0x68>
		return (uart_head[idx] - uart_tail[idx]);
    320c:	9c 01       	movw	r18, r24
    320e:	22 0f       	add	r18, r18
    3210:	33 1f       	adc	r19, r19
    3212:	f9 01       	movw	r30, r18
    3214:	e4 56       	subi	r30, 0x64	; 100
    3216:	ff 4c       	sbci	r31, 0xCF	; 207
    3218:	80 81       	ld	r24, Z
    321a:	91 81       	ldd	r25, Z+1	; 0x01
    321c:	28 55       	subi	r18, 0x58	; 88
    321e:	33 4c       	sbci	r19, 0xC3	; 195
    3220:	f9 01       	movw	r30, r18
    3222:	20 81       	ld	r18, Z
    3224:	31 81       	ldd	r19, Z+1	; 0x01
    3226:	82 1b       	sub	r24, r18
    3228:	93 0b       	sbc	r25, r19
    322a:	08 95       	ret
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    322c:	9c 01       	movw	r18, r24
    322e:	22 0f       	add	r18, r18
    3230:	33 1f       	adc	r19, r19
    3232:	f9 01       	movw	r30, r18
    3234:	e4 56       	subi	r30, 0x64	; 100
    3236:	ff 4c       	sbci	r31, 0xCF	; 207
    3238:	40 81       	ld	r20, Z
    323a:	51 81       	ldd	r21, Z+1	; 0x01
    323c:	28 55       	subi	r18, 0x58	; 88
    323e:	33 4c       	sbci	r19, 0xC3	; 195
    3240:	f9 01       	movw	r30, r18
    3242:	20 81       	ld	r18, Z
    3244:	31 81       	ldd	r19, Z+1	; 0x01
    3246:	ca 01       	movw	r24, r20
    3248:	80 50       	subi	r24, 0x00	; 0
    324a:	9c 4f       	sbci	r25, 0xFC	; 252
    324c:	82 1b       	sub	r24, r18
    324e:	93 0b       	sbc	r25, r19
	}
}
    3250:	08 95       	ret

00003252 <uart_enqueue_string>:

///Enqueue a string into the outgoing serial queue. Adds CR terminator to string.
inline void uart_enqueue_string(USART_t* port, char* string_in){
    3252:	2f 92       	push	r2
    3254:	3f 92       	push	r3
    3256:	4f 92       	push	r4
    3258:	5f 92       	push	r5
    325a:	6f 92       	push	r6
    325c:	7f 92       	push	r7
    325e:	8f 92       	push	r8
    3260:	9f 92       	push	r9
    3262:	af 92       	push	r10
    3264:	bf 92       	push	r11
    3266:	cf 92       	push	r12
    3268:	df 92       	push	r13
    326a:	ef 92       	push	r14
    326c:	ff 92       	push	r15
    326e:	0f 93       	push	r16
    3270:	1f 93       	push	r17
    3272:	cf 93       	push	r28
    3274:	df 93       	push	r29
    3276:	00 d0       	rcall	.+0      	; 0x3278 <uart_enqueue_string+0x26>
    3278:	0f 92       	push	r0
    327a:	cd b7       	in	r28, 0x3d	; 61
    327c:	de b7       	in	r29, 0x3e	; 62
    327e:	6c 01       	movw	r12, r24
	uint16_t length = (uint16_t)strlen(string_in);
    3280:	26 2f       	mov	r18, r22
    3282:	37 2f       	mov	r19, r23
    3284:	d9 01       	movw	r26, r18
    3286:	0d 90       	ld	r0, X+
    3288:	00 20       	and	r0, r0
    328a:	e9 f7       	brne	.-6      	; 0x3286 <uart_enqueue_string+0x34>
    328c:	11 97       	sbiw	r26, 0x01	; 1
    328e:	cd 01       	movw	r24, r26
    3290:	82 1b       	sub	r24, r18
    3292:	93 0b       	sbc	r25, r19
    3294:	8b 83       	std	Y+3, r24	; 0x03
    3296:	9c 83       	std	Y+4, r25	; 0x04
	for (uint16_t i=0; i<length; i++) {uart_enqueue(port, (uint8_t)string_in[i]);}
    3298:	00 97       	sbiw	r24, 0x00	; 0
    329a:	09 f4       	brne	.+2      	; 0x329e <uart_enqueue_string+0x4c>
    329c:	d3 c3       	rjmp	.+1958   	; 0x3a44 <uart_enqueue_string+0x7f2>
    329e:	69 83       	std	Y+1, r22	; 0x01
    32a0:	7a 83       	std	Y+2, r23	; 0x02
    32a2:	22 24       	eor	r2, r2
    32a4:	33 24       	eor	r3, r3
#ifndef UART_DEBUG
	uint8_t idx = port_map(port);
	
	//if (idx==0){uart_enqueue(&uctrl, datain);} //xxx
	
	uart_buffer[idx][uart_head[idx]] = datain;
    32a6:	0f 2e       	mov	r0, r31
    32a8:	fc e9       	ldi	r31, 0x9C	; 156
    32aa:	6f 2e       	mov	r6, r31
    32ac:	f0 e3       	ldi	r31, 0x30	; 48
    32ae:	7f 2e       	mov	r7, r31
    32b0:	f0 2d       	mov	r31, r0
    32b2:	0f 2e       	mov	r0, r31
    32b4:	f2 ea       	ldi	r31, 0xA2	; 162
    32b6:	4f 2e       	mov	r4, r31
    32b8:	f0 e3       	ldi	r31, 0x30	; 48
    32ba:	5f 2e       	mov	r5, r31
    32bc:	f0 2d       	mov	r31, r0
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    32be:	0f 2e       	mov	r0, r31
    32c0:	f8 ea       	ldi	r31, 0xA8	; 168
    32c2:	8f 2e       	mov	r8, r31
    32c4:	fc e3       	ldi	r31, 0x3C	; 60
    32c6:	9f 2e       	mov	r9, r31
    32c8:	f0 2d       	mov	r31, r0
#ifndef UART_DEBUG
	uint8_t idx = port_map(port);
	
	//if (idx==0){uart_enqueue(&uctrl, datain);} //xxx
	
	uart_buffer[idx][uart_head[idx]] = datain;
    32ca:	0f 2e       	mov	r0, r31
    32cc:	fe e9       	ldi	r31, 0x9E	; 158
    32ce:	ef 2e       	mov	r14, r31
    32d0:	f0 e3       	ldi	r31, 0x30	; 48
    32d2:	ff 2e       	mov	r15, r31
    32d4:	f0 2d       	mov	r31, r0
}

///Enqueue a string into the outgoing serial queue. Adds CR terminator to string.
inline void uart_enqueue_string(USART_t* port, char* string_in){
	uint16_t length = (uint16_t)strlen(string_in);
	for (uint16_t i=0; i<length; i++) {uart_enqueue(port, (uint8_t)string_in[i]);}
    32d6:	a9 81       	ldd	r26, Y+1	; 0x01
    32d8:	ba 81       	ldd	r27, Y+2	; 0x02
    32da:	5d 91       	ld	r21, X+
    32dc:	a9 83       	std	Y+1, r26	; 0x01
    32de:	ba 83       	std	Y+2, r27	; 0x02
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    32e0:	b0 eb       	ldi	r27, 0xB0	; 176
    32e2:	cb 16       	cp	r12, r27
    32e4:	bb e0       	ldi	r27, 0x0B	; 11
    32e6:	db 06       	cpc	r13, r27
    32e8:	61 f0       	breq	.+24     	; 0x3302 <uart_enqueue_string+0xb0>
	if (port == &uctrl) {return 1;}
    32ea:	e0 ea       	ldi	r30, 0xA0	; 160
    32ec:	ce 16       	cp	r12, r30
    32ee:	e8 e0       	ldi	r30, 0x08	; 8
    32f0:	de 06       	cpc	r13, r30
    32f2:	49 f0       	breq	.+18     	; 0x3306 <uart_enqueue_string+0xb4>
	if (port == &udata) {return 2;}
    32f4:	f0 eb       	ldi	r31, 0xB0	; 176
    32f6:	cf 16       	cp	r12, r31
    32f8:	f8 e0       	ldi	r31, 0x08	; 8
    32fa:	df 06       	cpc	r13, r31
    32fc:	31 f4       	brne	.+12     	; 0x330a <uart_enqueue_string+0xb8>
    32fe:	42 e0       	ldi	r20, 0x02	; 2
    3300:	05 c0       	rjmp	.+10     	; 0x330c <uart_enqueue_string+0xba>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    3302:	40 e0       	ldi	r20, 0x00	; 0
    3304:	03 c0       	rjmp	.+6      	; 0x330c <uart_enqueue_string+0xba>
	if (port == &uctrl) {return 1;}
    3306:	41 e0       	ldi	r20, 0x01	; 1
    3308:	01 c0       	rjmp	.+2      	; 0x330c <uart_enqueue_string+0xba>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    330a:	40 e0       	ldi	r20, 0x00	; 0
#ifndef UART_DEBUG
	uint8_t idx = port_map(port);
	
	//if (idx==0){uart_enqueue(&uctrl, datain);} //xxx
	
	uart_buffer[idx][uart_head[idx]] = datain;
    330c:	64 2f       	mov	r22, r20
    330e:	70 e0       	ldi	r23, 0x00	; 0
    3310:	cb 01       	movw	r24, r22
    3312:	88 0f       	add	r24, r24
    3314:	99 1f       	adc	r25, r25
    3316:	f3 01       	movw	r30, r6
    3318:	e8 0f       	add	r30, r24
    331a:	f9 1f       	adc	r31, r25
    331c:	20 81       	ld	r18, Z
    331e:	31 81       	ldd	r19, Z+1	; 0x01
    3320:	cb 01       	movw	r24, r22
    3322:	98 2f       	mov	r25, r24
    3324:	88 27       	eor	r24, r24
    3326:	99 0f       	add	r25, r25
    3328:	99 0f       	add	r25, r25
    332a:	82 0f       	add	r24, r18
    332c:	93 1f       	adc	r25, r19
    332e:	84 0d       	add	r24, r4
    3330:	95 1d       	adc	r25, r5
    3332:	dc 01       	movw	r26, r24
    3334:	5c 93       	st	X, r21
	uart_head[idx]++;
    3336:	80 81       	ld	r24, Z
    3338:	91 81       	ldd	r25, Z+1	; 0x01
    333a:	01 96       	adiw	r24, 0x01	; 1
    333c:	80 83       	st	Z, r24
    333e:	91 83       	std	Z+1, r25	; 0x01
	if (uart_head[idx] >= MAX_BUFFER_LEN){
    3340:	80 81       	ld	r24, Z
    3342:	91 81       	ldd	r25, Z+1	; 0x01
    3344:	b4 e0       	ldi	r27, 0x04	; 4
    3346:	80 30       	cpi	r24, 0x00	; 0
    3348:	9b 07       	cpc	r25, r27
    334a:	10 f0       	brcs	.+4      	; 0x3350 <uart_enqueue_string+0xfe>
		uart_head[idx] = 0;
    334c:	10 82       	st	Z, r1
    334e:	11 82       	std	Z+1, r1	; 0x01
	}
	if (idx == 0){uart_transmit_lcd(port);} //start the transmission process.
    3350:	44 23       	and	r20, r20
    3352:	09 f4       	brne	.+2      	; 0x3356 <uart_enqueue_string+0x104>
    3354:	e6 c1       	rjmp	.+972    	; 0x3722 <uart_enqueue_string+0x4d0>
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    3356:	d6 01       	movw	r26, r12
    3358:	11 96       	adiw	r26, 0x01	; 1
    335a:	8c 91       	ld	r24, X
    335c:	11 97       	sbiw	r26, 0x01	; 1
    335e:	85 fd       	sbrc	r24, 5
    3360:	cc c2       	rjmp	.+1432   	; 0x38fa <uart_enqueue_string+0x6a8>
    3362:	16 c3       	rjmp	.+1580   	; 0x3990 <uart_enqueue_string+0x73e>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    3364:	b0 eb       	ldi	r27, 0xB0	; 176
    3366:	cb 16       	cp	r12, r27
    3368:	bb e0       	ldi	r27, 0x0B	; 11
    336a:	db 06       	cpc	r13, r27
    336c:	61 f0       	breq	.+24     	; 0x3386 <uart_enqueue_string+0x134>
	if (port == &uctrl) {return 1;}
    336e:	e0 ea       	ldi	r30, 0xA0	; 160
    3370:	ce 16       	cp	r12, r30
    3372:	e8 e0       	ldi	r30, 0x08	; 8
    3374:	de 06       	cpc	r13, r30
    3376:	49 f0       	breq	.+18     	; 0x338a <uart_enqueue_string+0x138>
	if (port == &udata) {return 2;}
    3378:	f0 eb       	ldi	r31, 0xB0	; 176
    337a:	cf 16       	cp	r12, r31
    337c:	f8 e0       	ldi	r31, 0x08	; 8
    337e:	df 06       	cpc	r13, r31
    3380:	31 f4       	brne	.+12     	; 0x338e <uart_enqueue_string+0x13c>
    3382:	22 e0       	ldi	r18, 0x02	; 2
    3384:	05 c0       	rjmp	.+10     	; 0x3390 <uart_enqueue_string+0x13e>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    3386:	20 e0       	ldi	r18, 0x00	; 0
    3388:	03 c0       	rjmp	.+6      	; 0x3390 <uart_enqueue_string+0x13e>
	if (port == &uctrl) {return 1;}
    338a:	21 e0       	ldi	r18, 0x01	; 1
    338c:	01 c0       	rjmp	.+2      	; 0x3390 <uart_enqueue_string+0x13e>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    338e:	20 e0       	ldi	r18, 0x00	; 0
}

inline uint8_t uart_dequeue(USART_t* port){
	uint8_t idx = port_map(port);
	uint16_t oldtail;
	oldtail = uart_tail[idx];
    3390:	30 e0       	ldi	r19, 0x00	; 0
    3392:	c9 01       	movw	r24, r18
    3394:	88 0f       	add	r24, r24
    3396:	99 1f       	adc	r25, r25
    3398:	f4 01       	movw	r30, r8
    339a:	e8 0f       	add	r30, r24
    339c:	f9 1f       	adc	r31, r25
    339e:	40 81       	ld	r20, Z
    33a0:	51 81       	ldd	r21, Z+1	; 0x01
	uart_tail[idx]++;
    33a2:	80 81       	ld	r24, Z
    33a4:	91 81       	ldd	r25, Z+1	; 0x01
    33a6:	01 96       	adiw	r24, 0x01	; 1
    33a8:	80 83       	st	Z, r24
    33aa:	91 83       	std	Z+1, r25	; 0x01
	if (uart_tail[idx] >= MAX_BUFFER_LEN){
    33ac:	80 81       	ld	r24, Z
    33ae:	91 81       	ldd	r25, Z+1	; 0x01
    33b0:	64 e0       	ldi	r22, 0x04	; 4
    33b2:	80 30       	cpi	r24, 0x00	; 0
    33b4:	96 07       	cpc	r25, r22
    33b6:	10 f0       	brcs	.+4      	; 0x33bc <uart_enqueue_string+0x16a>
		uart_tail[idx] = 0;
    33b8:	10 82       	st	Z, r1
    33ba:	11 82       	std	Z+1, r1	; 0x01
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    33bc:	c9 01       	movw	r24, r18
    33be:	98 2f       	mov	r25, r24
    33c0:	88 27       	eor	r24, r24
    33c2:	99 0f       	add	r25, r25
    33c4:	99 0f       	add	r25, r25
    33c6:	84 0f       	add	r24, r20
    33c8:	95 1f       	adc	r25, r21
    33ca:	84 0d       	add	r24, r4
    33cc:	95 1d       	adc	r25, r5
    33ce:	fc 01       	movw	r30, r24
    33d0:	b0 80       	ld	r11, Z
void inline uart_transmit_lcd(USART_t* port){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0) && (lcd_flow_control == LCD_READY)){
		toSend = uart_dequeue(port);
		switch(toSend){
    33d2:	fa ef       	ldi	r31, 0xFA	; 250
    33d4:	bf 16       	cp	r11, r31
    33d6:	21 f0       	breq	.+8      	; 0x33e0 <uart_enqueue_string+0x18e>
    33d8:	2e ef       	ldi	r18, 0xFE	; 254
    33da:	b2 16       	cp	r11, r18
    33dc:	09 f0       	breq	.+2      	; 0x33e0 <uart_enqueue_string+0x18e>
    33de:	11 c1       	rjmp	.+546    	; 0x3602 <uart_enqueue_string+0x3b0>
#ifndef UART_DEBUG
	uint8_t idx = port_map(port);
	
	//if (idx==0){uart_enqueue(&uctrl, datain);} //xxx
	
	uart_buffer[idx][uart_head[idx]] = datain;
    33e0:	d7 01       	movw	r26, r14
    33e2:	8d 91       	ld	r24, X+
    33e4:	9c 91       	ld	r25, X
    33e6:	11 97       	sbiw	r26, 0x01	; 1
    33e8:	8e 55       	subi	r24, 0x5E	; 94
    33ea:	9b 4c       	sbci	r25, 0xCB	; 203
    33ec:	fc 01       	movw	r30, r24
    33ee:	a0 82       	st	Z, r10
	uart_head[idx]++;
    33f0:	8d 91       	ld	r24, X+
    33f2:	9c 91       	ld	r25, X
    33f4:	11 97       	sbiw	r26, 0x01	; 1
    33f6:	01 96       	adiw	r24, 0x01	; 1
    33f8:	8d 93       	st	X+, r24
    33fa:	9c 93       	st	X, r25
    33fc:	11 97       	sbiw	r26, 0x01	; 1
	if (uart_head[idx] >= MAX_BUFFER_LEN){
    33fe:	8d 91       	ld	r24, X+
    3400:	9c 91       	ld	r25, X
    3402:	11 97       	sbiw	r26, 0x01	; 1
    3404:	f4 e0       	ldi	r31, 0x04	; 4
    3406:	80 30       	cpi	r24, 0x00	; 0
    3408:	9f 07       	cpc	r25, r31
    340a:	18 f0       	brcs	.+6      	; 0x3412 <uart_enqueue_string+0x1c0>
		uart_head[idx] = 0;
    340c:	1d 92       	st	X+, r1
    340e:	1c 92       	st	X, r1
    3410:	11 97       	sbiw	r26, 0x01	; 1
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    3412:	d8 01       	movw	r26, r16
    3414:	11 96       	adiw	r26, 0x01	; 1
    3416:	8c 91       	ld	r24, X
    3418:	11 97       	sbiw	r26, 0x01	; 1
    341a:	85 fd       	sbrc	r24, 5
    341c:	1f c0       	rjmp	.+62     	; 0x345c <uart_enqueue_string+0x20a>
    341e:	3f c0       	rjmp	.+126    	; 0x349e <uart_enqueue_string+0x24c>
}

inline uint8_t uart_dequeue(USART_t* port){
	uint8_t idx = port_map(port);
	uint16_t oldtail;
	oldtail = uart_tail[idx];
    3420:	aa ea       	ldi	r26, 0xAA	; 170
    3422:	bc e3       	ldi	r27, 0x3C	; 60
    3424:	ed 91       	ld	r30, X+
    3426:	fc 91       	ld	r31, X
    3428:	11 97       	sbiw	r26, 0x01	; 1
	uart_tail[idx]++;
    342a:	8d 91       	ld	r24, X+
    342c:	9c 91       	ld	r25, X
    342e:	11 97       	sbiw	r26, 0x01	; 1
    3430:	01 96       	adiw	r24, 0x01	; 1
    3432:	8d 93       	st	X+, r24
    3434:	9c 93       	st	X, r25
    3436:	11 97       	sbiw	r26, 0x01	; 1
	if (uart_tail[idx] >= MAX_BUFFER_LEN){
    3438:	8d 91       	ld	r24, X+
    343a:	9c 91       	ld	r25, X
    343c:	11 97       	sbiw	r26, 0x01	; 1
    343e:	b4 e0       	ldi	r27, 0x04	; 4
    3440:	80 30       	cpi	r24, 0x00	; 0
    3442:	9b 07       	cpc	r25, r27
    3444:	18 f0       	brcs	.+6      	; 0x344c <uart_enqueue_string+0x1fa>
		uart_tail[idx] = 0;
    3446:	1d 92       	st	X+, r1
    3448:	1c 92       	st	X, r1
    344a:	11 97       	sbiw	r26, 0x01	; 1
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    344c:	ee 55       	subi	r30, 0x5E	; 94
    344e:	fb 4c       	sbci	r31, 0xCB	; 203
    3450:	80 81       	ld	r24, Z
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
    3452:	f8 01       	movw	r30, r16
    3454:	80 83       	st	Z, r24
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    3456:	81 81       	ldd	r24, Z+1	; 0x01
    3458:	85 ff       	sbrs	r24, 5
    345a:	21 c0       	rjmp	.+66     	; 0x349e <uart_enqueue_string+0x24c>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    345c:	d7 01       	movw	r26, r14
    345e:	8d 91       	ld	r24, X+
    3460:	9c 91       	ld	r25, X
    3462:	11 97       	sbiw	r26, 0x01	; 1
    3464:	ea ea       	ldi	r30, 0xAA	; 170
    3466:	fc e3       	ldi	r31, 0x3C	; 60
    3468:	20 81       	ld	r18, Z
    346a:	31 81       	ldd	r19, Z+1	; 0x01
    346c:	82 17       	cp	r24, r18
    346e:	93 07       	cpc	r25, r19
    3470:	40 f0       	brcs	.+16     	; 0x3482 <uart_enqueue_string+0x230>
		return (uart_head[idx] - uart_tail[idx]);
    3472:	8d 91       	ld	r24, X+
    3474:	9c 91       	ld	r25, X
    3476:	11 97       	sbiw	r26, 0x01	; 1
    3478:	20 81       	ld	r18, Z
    347a:	31 81       	ldd	r19, Z+1	; 0x01
    347c:	82 1b       	sub	r24, r18
    347e:	93 0b       	sbc	r25, r19
    3480:	0c c0       	rjmp	.+24     	; 0x349a <uart_enqueue_string+0x248>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    3482:	d7 01       	movw	r26, r14
    3484:	8d 91       	ld	r24, X+
    3486:	9c 91       	ld	r25, X
    3488:	11 97       	sbiw	r26, 0x01	; 1
    348a:	ea ea       	ldi	r30, 0xAA	; 170
    348c:	fc e3       	ldi	r31, 0x3C	; 60
    348e:	20 81       	ld	r18, Z
    3490:	31 81       	ldd	r19, Z+1	; 0x01
    3492:	80 50       	subi	r24, 0x00	; 0
    3494:	9c 4f       	sbci	r25, 0xFC	; 252
    3496:	82 1b       	sub	r24, r18
    3498:	93 0b       	sbc	r25, r19
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    349a:	00 97       	sbiw	r24, 0x00	; 0
    349c:	09 f6       	brne	.-126    	; 0x3420 <uart_enqueue_string+0x1ce>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    349e:	d7 01       	movw	r26, r14
    34a0:	8d 91       	ld	r24, X+
    34a2:	9c 91       	ld	r25, X
    34a4:	11 97       	sbiw	r26, 0x01	; 1
    34a6:	ea ea       	ldi	r30, 0xAA	; 170
    34a8:	fc e3       	ldi	r31, 0x3C	; 60
    34aa:	20 81       	ld	r18, Z
    34ac:	31 81       	ldd	r19, Z+1	; 0x01
    34ae:	82 17       	cp	r24, r18
    34b0:	93 07       	cpc	r25, r19
    34b2:	40 f0       	brcs	.+16     	; 0x34c4 <uart_enqueue_string+0x272>
		return (uart_head[idx] - uart_tail[idx]);
    34b4:	8d 91       	ld	r24, X+
    34b6:	9c 91       	ld	r25, X
    34b8:	11 97       	sbiw	r26, 0x01	; 1
    34ba:	20 81       	ld	r18, Z
    34bc:	31 81       	ldd	r19, Z+1	; 0x01
    34be:	82 1b       	sub	r24, r18
    34c0:	93 0b       	sbc	r25, r19
    34c2:	0c c0       	rjmp	.+24     	; 0x34dc <uart_enqueue_string+0x28a>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    34c4:	d7 01       	movw	r26, r14
    34c6:	8d 91       	ld	r24, X+
    34c8:	9c 91       	ld	r25, X
    34ca:	11 97       	sbiw	r26, 0x01	; 1
    34cc:	ea ea       	ldi	r30, 0xAA	; 170
    34ce:	fc e3       	ldi	r31, 0x3C	; 60
    34d0:	20 81       	ld	r18, Z
    34d2:	31 81       	ldd	r19, Z+1	; 0x01
    34d4:	80 50       	subi	r24, 0x00	; 0
    34d6:	9c 4f       	sbci	r25, 0xFC	; 252
    34d8:	82 1b       	sub	r24, r18
    34da:	93 0b       	sbc	r25, r19
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
	}
	//disable the tx outgoing hardware buffer ready interrupt if we have nothing more to put in it.
	if(uart_count(port)>0) uart_txbuffer_enable(port);
    34dc:	00 97       	sbiw	r24, 0x00	; 0
    34de:	21 f0       	breq	.+8      	; 0x34e8 <uart_enqueue_string+0x296>
    34e0:	c8 01       	movw	r24, r16
    34e2:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <uart_txbuffer_enable>
    34e6:	03 c0       	rjmp	.+6      	; 0x34ee <uart_enqueue_string+0x29c>
	else uart_txbuffer_disable(port);
    34e8:	c8 01       	movw	r24, r16
    34ea:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <uart_txbuffer_disable>
#ifndef UART_DEBUG
	uint8_t idx = port_map(port);
	
	//if (idx==0){uart_enqueue(&uctrl, datain);} //xxx
	
	uart_buffer[idx][uart_head[idx]] = datain;
    34ee:	d7 01       	movw	r26, r14
    34f0:	8d 91       	ld	r24, X+
    34f2:	9c 91       	ld	r25, X
    34f4:	11 97       	sbiw	r26, 0x01	; 1
    34f6:	8e 55       	subi	r24, 0x5E	; 94
    34f8:	9b 4c       	sbci	r25, 0xCB	; 203
    34fa:	fc 01       	movw	r30, r24
    34fc:	b0 82       	st	Z, r11
	uart_head[idx]++;
    34fe:	8d 91       	ld	r24, X+
    3500:	9c 91       	ld	r25, X
    3502:	11 97       	sbiw	r26, 0x01	; 1
    3504:	01 96       	adiw	r24, 0x01	; 1
    3506:	8d 93       	st	X+, r24
    3508:	9c 93       	st	X, r25
    350a:	11 97       	sbiw	r26, 0x01	; 1
	if (uart_head[idx] >= MAX_BUFFER_LEN){
    350c:	8d 91       	ld	r24, X+
    350e:	9c 91       	ld	r25, X
    3510:	11 97       	sbiw	r26, 0x01	; 1
    3512:	f4 e0       	ldi	r31, 0x04	; 4
    3514:	80 30       	cpi	r24, 0x00	; 0
    3516:	9f 07       	cpc	r25, r31
    3518:	18 f0       	brcs	.+6      	; 0x3520 <uart_enqueue_string+0x2ce>
		uart_head[idx] = 0;
    351a:	1d 92       	st	X+, r1
    351c:	1c 92       	st	X, r1
    351e:	11 97       	sbiw	r26, 0x01	; 1
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    3520:	d8 01       	movw	r26, r16
    3522:	11 96       	adiw	r26, 0x01	; 1
    3524:	8c 91       	ld	r24, X
    3526:	11 97       	sbiw	r26, 0x01	; 1
    3528:	85 fd       	sbrc	r24, 5
    352a:	1f c0       	rjmp	.+62     	; 0x356a <uart_enqueue_string+0x318>
    352c:	3f c0       	rjmp	.+126    	; 0x35ac <uart_enqueue_string+0x35a>
}

inline uint8_t uart_dequeue(USART_t* port){
	uint8_t idx = port_map(port);
	uint16_t oldtail;
	oldtail = uart_tail[idx];
    352e:	aa ea       	ldi	r26, 0xAA	; 170
    3530:	bc e3       	ldi	r27, 0x3C	; 60
    3532:	ed 91       	ld	r30, X+
    3534:	fc 91       	ld	r31, X
    3536:	11 97       	sbiw	r26, 0x01	; 1
	uart_tail[idx]++;
    3538:	8d 91       	ld	r24, X+
    353a:	9c 91       	ld	r25, X
    353c:	11 97       	sbiw	r26, 0x01	; 1
    353e:	01 96       	adiw	r24, 0x01	; 1
    3540:	8d 93       	st	X+, r24
    3542:	9c 93       	st	X, r25
    3544:	11 97       	sbiw	r26, 0x01	; 1
	if (uart_tail[idx] >= MAX_BUFFER_LEN){
    3546:	8d 91       	ld	r24, X+
    3548:	9c 91       	ld	r25, X
    354a:	11 97       	sbiw	r26, 0x01	; 1
    354c:	b4 e0       	ldi	r27, 0x04	; 4
    354e:	80 30       	cpi	r24, 0x00	; 0
    3550:	9b 07       	cpc	r25, r27
    3552:	18 f0       	brcs	.+6      	; 0x355a <uart_enqueue_string+0x308>
		uart_tail[idx] = 0;
    3554:	1d 92       	st	X+, r1
    3556:	1c 92       	st	X, r1
    3558:	11 97       	sbiw	r26, 0x01	; 1
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    355a:	ee 55       	subi	r30, 0x5E	; 94
    355c:	fb 4c       	sbci	r31, 0xCB	; 203
    355e:	80 81       	ld	r24, Z
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
    3560:	f8 01       	movw	r30, r16
    3562:	80 83       	st	Z, r24
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    3564:	81 81       	ldd	r24, Z+1	; 0x01
    3566:	85 ff       	sbrs	r24, 5
    3568:	21 c0       	rjmp	.+66     	; 0x35ac <uart_enqueue_string+0x35a>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    356a:	d7 01       	movw	r26, r14
    356c:	8d 91       	ld	r24, X+
    356e:	9c 91       	ld	r25, X
    3570:	11 97       	sbiw	r26, 0x01	; 1
    3572:	ea ea       	ldi	r30, 0xAA	; 170
    3574:	fc e3       	ldi	r31, 0x3C	; 60
    3576:	20 81       	ld	r18, Z
    3578:	31 81       	ldd	r19, Z+1	; 0x01
    357a:	82 17       	cp	r24, r18
    357c:	93 07       	cpc	r25, r19
    357e:	40 f0       	brcs	.+16     	; 0x3590 <uart_enqueue_string+0x33e>
		return (uart_head[idx] - uart_tail[idx]);
    3580:	8d 91       	ld	r24, X+
    3582:	9c 91       	ld	r25, X
    3584:	11 97       	sbiw	r26, 0x01	; 1
    3586:	20 81       	ld	r18, Z
    3588:	31 81       	ldd	r19, Z+1	; 0x01
    358a:	82 1b       	sub	r24, r18
    358c:	93 0b       	sbc	r25, r19
    358e:	0c c0       	rjmp	.+24     	; 0x35a8 <uart_enqueue_string+0x356>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    3590:	d7 01       	movw	r26, r14
    3592:	8d 91       	ld	r24, X+
    3594:	9c 91       	ld	r25, X
    3596:	11 97       	sbiw	r26, 0x01	; 1
    3598:	ea ea       	ldi	r30, 0xAA	; 170
    359a:	fc e3       	ldi	r31, 0x3C	; 60
    359c:	20 81       	ld	r18, Z
    359e:	31 81       	ldd	r19, Z+1	; 0x01
    35a0:	80 50       	subi	r24, 0x00	; 0
    35a2:	9c 4f       	sbci	r25, 0xFC	; 252
    35a4:	82 1b       	sub	r24, r18
    35a6:	93 0b       	sbc	r25, r19
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    35a8:	00 97       	sbiw	r24, 0x00	; 0
    35aa:	09 f6       	brne	.-126    	; 0x352e <uart_enqueue_string+0x2dc>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    35ac:	d7 01       	movw	r26, r14
    35ae:	8d 91       	ld	r24, X+
    35b0:	9c 91       	ld	r25, X
    35b2:	11 97       	sbiw	r26, 0x01	; 1
    35b4:	ea ea       	ldi	r30, 0xAA	; 170
    35b6:	fc e3       	ldi	r31, 0x3C	; 60
    35b8:	20 81       	ld	r18, Z
    35ba:	31 81       	ldd	r19, Z+1	; 0x01
    35bc:	82 17       	cp	r24, r18
    35be:	93 07       	cpc	r25, r19
    35c0:	40 f0       	brcs	.+16     	; 0x35d2 <uart_enqueue_string+0x380>
		return (uart_head[idx] - uart_tail[idx]);
    35c2:	8d 91       	ld	r24, X+
    35c4:	9c 91       	ld	r25, X
    35c6:	11 97       	sbiw	r26, 0x01	; 1
    35c8:	20 81       	ld	r18, Z
    35ca:	31 81       	ldd	r19, Z+1	; 0x01
    35cc:	82 1b       	sub	r24, r18
    35ce:	93 0b       	sbc	r25, r19
    35d0:	0c c0       	rjmp	.+24     	; 0x35ea <uart_enqueue_string+0x398>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    35d2:	d7 01       	movw	r26, r14
    35d4:	8d 91       	ld	r24, X+
    35d6:	9c 91       	ld	r25, X
    35d8:	11 97       	sbiw	r26, 0x01	; 1
    35da:	ea ea       	ldi	r30, 0xAA	; 170
    35dc:	fc e3       	ldi	r31, 0x3C	; 60
    35de:	20 81       	ld	r18, Z
    35e0:	31 81       	ldd	r19, Z+1	; 0x01
    35e2:	80 50       	subi	r24, 0x00	; 0
    35e4:	9c 4f       	sbci	r25, 0xFC	; 252
    35e6:	82 1b       	sub	r24, r18
    35e8:	93 0b       	sbc	r25, r19
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
	}
	//disable the tx outgoing hardware buffer ready interrupt if we have nothing more to put in it.
	if(uart_count(port)>0) uart_txbuffer_enable(port);
    35ea:	00 97       	sbiw	r24, 0x00	; 0
    35ec:	21 f0       	breq	.+8      	; 0x35f6 <uart_enqueue_string+0x3a4>
    35ee:	c8 01       	movw	r24, r16
    35f0:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <uart_txbuffer_enable>
    35f4:	03 c0       	rjmp	.+6      	; 0x35fc <uart_enqueue_string+0x3aa>
	else uart_txbuffer_disable(port);
    35f6:	c8 01       	movw	r24, r16
    35f8:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <uart_txbuffer_disable>
			case LCD_COMMAND:
			case LCD_MACRO:
				//Header byte just describes payload -- do not send to LCD
				uart_enqueue(&uctrl, '+'); //echo to data port -- xxx
				uart_enqueue(&uctrl, toSend); //echo to data port -- xxx
				lcd_flow_type = toSend;
    35fc:	b0 92 93 24 	sts	0x2493, r11
    3600:	96 c0       	rjmp	.+300    	; 0x372e <uart_enqueue_string+0x4dc>
#ifndef UART_DEBUG
	uint8_t idx = port_map(port);
	
	//if (idx==0){uart_enqueue(&uctrl, datain);} //xxx
	
	uart_buffer[idx][uart_head[idx]] = datain;
    3602:	d7 01       	movw	r26, r14
    3604:	8d 91       	ld	r24, X+
    3606:	9c 91       	ld	r25, X
    3608:	11 97       	sbiw	r26, 0x01	; 1
    360a:	8e 55       	subi	r24, 0x5E	; 94
    360c:	9b 4c       	sbci	r25, 0xCB	; 203
    360e:	fc 01       	movw	r30, r24
    3610:	b0 82       	st	Z, r11
	uart_head[idx]++;
    3612:	8d 91       	ld	r24, X+
    3614:	9c 91       	ld	r25, X
    3616:	11 97       	sbiw	r26, 0x01	; 1
    3618:	01 96       	adiw	r24, 0x01	; 1
    361a:	8d 93       	st	X+, r24
    361c:	9c 93       	st	X, r25
    361e:	11 97       	sbiw	r26, 0x01	; 1
	if (uart_head[idx] >= MAX_BUFFER_LEN){
    3620:	8d 91       	ld	r24, X+
    3622:	9c 91       	ld	r25, X
    3624:	11 97       	sbiw	r26, 0x01	; 1
    3626:	f4 e0       	ldi	r31, 0x04	; 4
    3628:	80 30       	cpi	r24, 0x00	; 0
    362a:	9f 07       	cpc	r25, r31
    362c:	18 f0       	brcs	.+6      	; 0x3634 <uart_enqueue_string+0x3e2>
		uart_head[idx] = 0;
    362e:	1d 92       	st	X+, r1
    3630:	1c 92       	st	X, r1
    3632:	11 97       	sbiw	r26, 0x01	; 1
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    3634:	d8 01       	movw	r26, r16
    3636:	11 96       	adiw	r26, 0x01	; 1
    3638:	8c 91       	ld	r24, X
    363a:	11 97       	sbiw	r26, 0x01	; 1
    363c:	85 fd       	sbrc	r24, 5
    363e:	1f c0       	rjmp	.+62     	; 0x367e <uart_enqueue_string+0x42c>
    3640:	3f c0       	rjmp	.+126    	; 0x36c0 <uart_enqueue_string+0x46e>
}

inline uint8_t uart_dequeue(USART_t* port){
	uint8_t idx = port_map(port);
	uint16_t oldtail;
	oldtail = uart_tail[idx];
    3642:	aa ea       	ldi	r26, 0xAA	; 170
    3644:	bc e3       	ldi	r27, 0x3C	; 60
    3646:	ed 91       	ld	r30, X+
    3648:	fc 91       	ld	r31, X
    364a:	11 97       	sbiw	r26, 0x01	; 1
	uart_tail[idx]++;
    364c:	8d 91       	ld	r24, X+
    364e:	9c 91       	ld	r25, X
    3650:	11 97       	sbiw	r26, 0x01	; 1
    3652:	01 96       	adiw	r24, 0x01	; 1
    3654:	8d 93       	st	X+, r24
    3656:	9c 93       	st	X, r25
    3658:	11 97       	sbiw	r26, 0x01	; 1
	if (uart_tail[idx] >= MAX_BUFFER_LEN){
    365a:	8d 91       	ld	r24, X+
    365c:	9c 91       	ld	r25, X
    365e:	11 97       	sbiw	r26, 0x01	; 1
    3660:	b4 e0       	ldi	r27, 0x04	; 4
    3662:	80 30       	cpi	r24, 0x00	; 0
    3664:	9b 07       	cpc	r25, r27
    3666:	18 f0       	brcs	.+6      	; 0x366e <uart_enqueue_string+0x41c>
		uart_tail[idx] = 0;
    3668:	1d 92       	st	X+, r1
    366a:	1c 92       	st	X, r1
    366c:	11 97       	sbiw	r26, 0x01	; 1
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    366e:	ee 55       	subi	r30, 0x5E	; 94
    3670:	fb 4c       	sbci	r31, 0xCB	; 203
    3672:	80 81       	ld	r24, Z
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
    3674:	f8 01       	movw	r30, r16
    3676:	80 83       	st	Z, r24
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    3678:	81 81       	ldd	r24, Z+1	; 0x01
    367a:	85 ff       	sbrs	r24, 5
    367c:	21 c0       	rjmp	.+66     	; 0x36c0 <uart_enqueue_string+0x46e>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    367e:	d7 01       	movw	r26, r14
    3680:	8d 91       	ld	r24, X+
    3682:	9c 91       	ld	r25, X
    3684:	11 97       	sbiw	r26, 0x01	; 1
    3686:	ea ea       	ldi	r30, 0xAA	; 170
    3688:	fc e3       	ldi	r31, 0x3C	; 60
    368a:	20 81       	ld	r18, Z
    368c:	31 81       	ldd	r19, Z+1	; 0x01
    368e:	82 17       	cp	r24, r18
    3690:	93 07       	cpc	r25, r19
    3692:	40 f0       	brcs	.+16     	; 0x36a4 <uart_enqueue_string+0x452>
		return (uart_head[idx] - uart_tail[idx]);
    3694:	8d 91       	ld	r24, X+
    3696:	9c 91       	ld	r25, X
    3698:	11 97       	sbiw	r26, 0x01	; 1
    369a:	20 81       	ld	r18, Z
    369c:	31 81       	ldd	r19, Z+1	; 0x01
    369e:	82 1b       	sub	r24, r18
    36a0:	93 0b       	sbc	r25, r19
    36a2:	0c c0       	rjmp	.+24     	; 0x36bc <uart_enqueue_string+0x46a>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    36a4:	d7 01       	movw	r26, r14
    36a6:	8d 91       	ld	r24, X+
    36a8:	9c 91       	ld	r25, X
    36aa:	11 97       	sbiw	r26, 0x01	; 1
    36ac:	ea ea       	ldi	r30, 0xAA	; 170
    36ae:	fc e3       	ldi	r31, 0x3C	; 60
    36b0:	20 81       	ld	r18, Z
    36b2:	31 81       	ldd	r19, Z+1	; 0x01
    36b4:	80 50       	subi	r24, 0x00	; 0
    36b6:	9c 4f       	sbci	r25, 0xFC	; 252
    36b8:	82 1b       	sub	r24, r18
    36ba:	93 0b       	sbc	r25, r19
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    36bc:	00 97       	sbiw	r24, 0x00	; 0
    36be:	09 f6       	brne	.-126    	; 0x3642 <uart_enqueue_string+0x3f0>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    36c0:	d7 01       	movw	r26, r14
    36c2:	8d 91       	ld	r24, X+
    36c4:	9c 91       	ld	r25, X
    36c6:	11 97       	sbiw	r26, 0x01	; 1
    36c8:	ea ea       	ldi	r30, 0xAA	; 170
    36ca:	fc e3       	ldi	r31, 0x3C	; 60
    36cc:	20 81       	ld	r18, Z
    36ce:	31 81       	ldd	r19, Z+1	; 0x01
    36d0:	82 17       	cp	r24, r18
    36d2:	93 07       	cpc	r25, r19
    36d4:	40 f0       	brcs	.+16     	; 0x36e6 <uart_enqueue_string+0x494>
		return (uart_head[idx] - uart_tail[idx]);
    36d6:	8d 91       	ld	r24, X+
    36d8:	9c 91       	ld	r25, X
    36da:	11 97       	sbiw	r26, 0x01	; 1
    36dc:	20 81       	ld	r18, Z
    36de:	31 81       	ldd	r19, Z+1	; 0x01
    36e0:	82 1b       	sub	r24, r18
    36e2:	93 0b       	sbc	r25, r19
    36e4:	0c c0       	rjmp	.+24     	; 0x36fe <uart_enqueue_string+0x4ac>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    36e6:	d7 01       	movw	r26, r14
    36e8:	8d 91       	ld	r24, X+
    36ea:	9c 91       	ld	r25, X
    36ec:	11 97       	sbiw	r26, 0x01	; 1
    36ee:	ea ea       	ldi	r30, 0xAA	; 170
    36f0:	fc e3       	ldi	r31, 0x3C	; 60
    36f2:	20 81       	ld	r18, Z
    36f4:	31 81       	ldd	r19, Z+1	; 0x01
    36f6:	80 50       	subi	r24, 0x00	; 0
    36f8:	9c 4f       	sbci	r25, 0xFC	; 252
    36fa:	82 1b       	sub	r24, r18
    36fc:	93 0b       	sbc	r25, r19
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
	}
	//disable the tx outgoing hardware buffer ready interrupt if we have nothing more to put in it.
	if(uart_count(port)>0) uart_txbuffer_enable(port);
    36fe:	00 97       	sbiw	r24, 0x00	; 0
    3700:	21 f0       	breq	.+8      	; 0x370a <uart_enqueue_string+0x4b8>
    3702:	c8 01       	movw	r24, r16
    3704:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <uart_txbuffer_enable>
    3708:	03 c0       	rjmp	.+6      	; 0x3710 <uart_enqueue_string+0x4be>
	else uart_txbuffer_disable(port);
    370a:	c8 01       	movw	r24, r16
    370c:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <uart_txbuffer_disable>
				lcd_flow_type = toSend;
				break;
			default:
				//Payload bytes -- send to LCD
				uart_enqueue(&uctrl, toSend); //echo to data port -- xxx
				if (toSend == 0x0D) {lcd_flow_control = LCD_BUSY;}
    3710:	fd e0       	ldi	r31, 0x0D	; 13
    3712:	bf 16       	cp	r11, r31
    3714:	19 f4       	brne	.+6      	; 0x371c <uart_enqueue_string+0x4ca>
    3716:	2e e4       	ldi	r18, 0x4E	; 78
    3718:	20 93 94 24 	sts	0x2494, r18
				port->DATA = toSend;
    371c:	d6 01       	movw	r26, r12
    371e:	bc 92       	st	X, r11
    3720:	06 c0       	rjmp	.+12     	; 0x372e <uart_enqueue_string+0x4dc>
#ifndef UART_DEBUG
	uint8_t idx = port_map(port);
	
	//if (idx==0){uart_enqueue(&uctrl, datain);} //xxx
	
	uart_buffer[idx][uart_head[idx]] = datain;
    3722:	0f 2e       	mov	r0, r31
    3724:	fb e2       	ldi	r31, 0x2B	; 43
    3726:	af 2e       	mov	r10, r31
    3728:	f0 2d       	mov	r31, r0
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    372a:	00 ea       	ldi	r16, 0xA0	; 160
    372c:	18 e0       	ldi	r17, 0x08	; 8
}

void inline uart_transmit_lcd(USART_t* port){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0) && (lcd_flow_control == LCD_READY)){
    372e:	f6 01       	movw	r30, r12
    3730:	81 81       	ldd	r24, Z+1	; 0x01
    3732:	85 ff       	sbrs	r24, 5
    3734:	4f c0       	rjmp	.+158    	; 0x37d4 <uart_enqueue_string+0x582>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    3736:	f0 eb       	ldi	r31, 0xB0	; 176
    3738:	cf 16       	cp	r12, r31
    373a:	fb e0       	ldi	r31, 0x0B	; 11
    373c:	df 06       	cpc	r13, r31
    373e:	61 f0       	breq	.+24     	; 0x3758 <uart_enqueue_string+0x506>
	if (port == &uctrl) {return 1;}
    3740:	20 ea       	ldi	r18, 0xA0	; 160
    3742:	c2 16       	cp	r12, r18
    3744:	28 e0       	ldi	r18, 0x08	; 8
    3746:	d2 06       	cpc	r13, r18
    3748:	49 f0       	breq	.+18     	; 0x375c <uart_enqueue_string+0x50a>
	if (port == &udata) {return 2;}
    374a:	30 eb       	ldi	r19, 0xB0	; 176
    374c:	c3 16       	cp	r12, r19
    374e:	38 e0       	ldi	r19, 0x08	; 8
    3750:	d3 06       	cpc	r13, r19
    3752:	31 f4       	brne	.+12     	; 0x3760 <uart_enqueue_string+0x50e>
    3754:	22 e0       	ldi	r18, 0x02	; 2
    3756:	05 c0       	rjmp	.+10     	; 0x3762 <uart_enqueue_string+0x510>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    3758:	20 e0       	ldi	r18, 0x00	; 0
    375a:	03 c0       	rjmp	.+6      	; 0x3762 <uart_enqueue_string+0x510>
	if (port == &uctrl) {return 1;}
    375c:	21 e0       	ldi	r18, 0x01	; 1
    375e:	01 c0       	rjmp	.+2      	; 0x3762 <uart_enqueue_string+0x510>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    3760:	20 e0       	ldi	r18, 0x00	; 0
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    3762:	30 e0       	ldi	r19, 0x00	; 0
    3764:	c9 01       	movw	r24, r18
    3766:	88 0f       	add	r24, r24
    3768:	99 1f       	adc	r25, r25
    376a:	f3 01       	movw	r30, r6
    376c:	e8 0f       	add	r30, r24
    376e:	f9 1f       	adc	r31, r25
    3770:	40 81       	ld	r20, Z
    3772:	51 81       	ldd	r21, Z+1	; 0x01
    3774:	f4 01       	movw	r30, r8
    3776:	e8 0f       	add	r30, r24
    3778:	f9 1f       	adc	r31, r25
    377a:	80 81       	ld	r24, Z
    377c:	91 81       	ldd	r25, Z+1	; 0x01
    377e:	48 17       	cp	r20, r24
    3780:	59 07       	cpc	r21, r25
    3782:	88 f0       	brcs	.+34     	; 0x37a6 <uart_enqueue_string+0x554>
		return (uart_head[idx] - uart_tail[idx]);
    3784:	22 0f       	add	r18, r18
    3786:	33 1f       	adc	r19, r19
    3788:	f3 01       	movw	r30, r6
    378a:	e2 0f       	add	r30, r18
    378c:	f3 1f       	adc	r31, r19
    378e:	40 81       	ld	r20, Z
    3790:	51 81       	ldd	r21, Z+1	; 0x01
    3792:	f4 01       	movw	r30, r8
    3794:	e2 0f       	add	r30, r18
    3796:	f3 1f       	adc	r31, r19
    3798:	80 81       	ld	r24, Z
    379a:	91 81       	ldd	r25, Z+1	; 0x01
    379c:	da 01       	movw	r26, r20
    379e:	a8 1b       	sub	r26, r24
    37a0:	b9 0b       	sbc	r27, r25
    37a2:	cd 01       	movw	r24, r26
    37a4:	10 c0       	rjmp	.+32     	; 0x37c6 <uart_enqueue_string+0x574>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    37a6:	22 0f       	add	r18, r18
    37a8:	33 1f       	adc	r19, r19
    37aa:	f3 01       	movw	r30, r6
    37ac:	e2 0f       	add	r30, r18
    37ae:	f3 1f       	adc	r31, r19
    37b0:	80 81       	ld	r24, Z
    37b2:	91 81       	ldd	r25, Z+1	; 0x01
    37b4:	f4 01       	movw	r30, r8
    37b6:	e2 0f       	add	r30, r18
    37b8:	f3 1f       	adc	r31, r19
    37ba:	20 81       	ld	r18, Z
    37bc:	31 81       	ldd	r19, Z+1	; 0x01
    37be:	80 50       	subi	r24, 0x00	; 0
    37c0:	9c 4f       	sbci	r25, 0xFC	; 252
    37c2:	82 1b       	sub	r24, r18
    37c4:	93 0b       	sbc	r25, r19
}

void inline uart_transmit_lcd(USART_t* port){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0) && (lcd_flow_control == LCD_READY)){
    37c6:	00 97       	sbiw	r24, 0x00	; 0
    37c8:	29 f0       	breq	.+10     	; 0x37d4 <uart_enqueue_string+0x582>
    37ca:	80 91 94 24 	lds	r24, 0x2494
    37ce:	82 35       	cpi	r24, 0x52	; 82
    37d0:	09 f4       	brne	.+2      	; 0x37d4 <uart_enqueue_string+0x582>
    37d2:	c8 cd       	rjmp	.-1136   	; 0x3364 <uart_enqueue_string+0x112>
				if (toSend == 0x0D) {lcd_flow_control = LCD_BUSY;}
				port->DATA = toSend;
				break;
		}				
	}
	uart_txbuffer_disable(port); //implemented this way to prevent periodic stalls that happen when uart_txbuffer isn't disabled quickly enough
    37d4:	c6 01       	movw	r24, r12
    37d6:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <uart_txbuffer_disable>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    37da:	b0 eb       	ldi	r27, 0xB0	; 176
    37dc:	cb 16       	cp	r12, r27
    37de:	bb e0       	ldi	r27, 0x0B	; 11
    37e0:	db 06       	cpc	r13, r27
    37e2:	61 f0       	breq	.+24     	; 0x37fc <uart_enqueue_string+0x5aa>
	if (port == &uctrl) {return 1;}
    37e4:	e0 ea       	ldi	r30, 0xA0	; 160
    37e6:	ce 16       	cp	r12, r30
    37e8:	e8 e0       	ldi	r30, 0x08	; 8
    37ea:	de 06       	cpc	r13, r30
    37ec:	49 f0       	breq	.+18     	; 0x3800 <uart_enqueue_string+0x5ae>
	if (port == &udata) {return 2;}
    37ee:	f0 eb       	ldi	r31, 0xB0	; 176
    37f0:	cf 16       	cp	r12, r31
    37f2:	f8 e0       	ldi	r31, 0x08	; 8
    37f4:	df 06       	cpc	r13, r31
    37f6:	31 f4       	brne	.+12     	; 0x3804 <uart_enqueue_string+0x5b2>
    37f8:	22 e0       	ldi	r18, 0x02	; 2
    37fa:	05 c0       	rjmp	.+10     	; 0x3806 <uart_enqueue_string+0x5b4>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    37fc:	20 e0       	ldi	r18, 0x00	; 0
    37fe:	03 c0       	rjmp	.+6      	; 0x3806 <uart_enqueue_string+0x5b4>
	if (port == &uctrl) {return 1;}
    3800:	21 e0       	ldi	r18, 0x01	; 1
    3802:	01 c0       	rjmp	.+2      	; 0x3806 <uart_enqueue_string+0x5b4>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    3804:	20 e0       	ldi	r18, 0x00	; 0
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    3806:	30 e0       	ldi	r19, 0x00	; 0
    3808:	c9 01       	movw	r24, r18
    380a:	88 0f       	add	r24, r24
    380c:	99 1f       	adc	r25, r25
    380e:	f3 01       	movw	r30, r6
    3810:	e8 0f       	add	r30, r24
    3812:	f9 1f       	adc	r31, r25
    3814:	40 81       	ld	r20, Z
    3816:	51 81       	ldd	r21, Z+1	; 0x01
    3818:	f4 01       	movw	r30, r8
    381a:	e8 0f       	add	r30, r24
    381c:	f9 1f       	adc	r31, r25
    381e:	80 81       	ld	r24, Z
    3820:	91 81       	ldd	r25, Z+1	; 0x01
    3822:	48 17       	cp	r20, r24
    3824:	59 07       	cpc	r21, r25
    3826:	88 f0       	brcs	.+34     	; 0x384a <uart_enqueue_string+0x5f8>
		return (uart_head[idx] - uart_tail[idx]);
    3828:	22 0f       	add	r18, r18
    382a:	33 1f       	adc	r19, r19
    382c:	f3 01       	movw	r30, r6
    382e:	e2 0f       	add	r30, r18
    3830:	f3 1f       	adc	r31, r19
    3832:	40 81       	ld	r20, Z
    3834:	51 81       	ldd	r21, Z+1	; 0x01
    3836:	f4 01       	movw	r30, r8
    3838:	e2 0f       	add	r30, r18
    383a:	f3 1f       	adc	r31, r19
    383c:	80 81       	ld	r24, Z
    383e:	91 81       	ldd	r25, Z+1	; 0x01
    3840:	9a 01       	movw	r18, r20
    3842:	28 1b       	sub	r18, r24
    3844:	39 0b       	sbc	r19, r25
    3846:	c9 01       	movw	r24, r18
    3848:	10 c0       	rjmp	.+32     	; 0x386a <uart_enqueue_string+0x618>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    384a:	22 0f       	add	r18, r18
    384c:	33 1f       	adc	r19, r19
    384e:	f3 01       	movw	r30, r6
    3850:	e2 0f       	add	r30, r18
    3852:	f3 1f       	adc	r31, r19
    3854:	80 81       	ld	r24, Z
    3856:	91 81       	ldd	r25, Z+1	; 0x01
    3858:	f4 01       	movw	r30, r8
    385a:	e2 0f       	add	r30, r18
    385c:	f3 1f       	adc	r31, r19
    385e:	20 81       	ld	r18, Z
    3860:	31 81       	ldd	r19, Z+1	; 0x01
    3862:	80 50       	subi	r24, 0x00	; 0
    3864:	9c 4f       	sbci	r25, 0xFC	; 252
    3866:	82 1b       	sub	r24, r18
    3868:	93 0b       	sbc	r25, r19
				port->DATA = toSend;
				break;
		}				
	}
	uart_txbuffer_disable(port); //implemented this way to prevent periodic stalls that happen when uart_txbuffer isn't disabled quickly enough
	if ((uart_count(port)>0) && (lcd_flow_control == LCD_READY)){ //...something is waiting to go out
    386a:	00 97       	sbiw	r24, 0x00	; 0
    386c:	09 f4       	brne	.+2      	; 0x3870 <uart_enqueue_string+0x61e>
    386e:	e1 c0       	rjmp	.+450    	; 0x3a32 <uart_enqueue_string+0x7e0>
    3870:	80 91 94 24 	lds	r24, 0x2494
    3874:	82 35       	cpi	r24, 0x52	; 82
    3876:	09 f0       	breq	.+2      	; 0x387a <uart_enqueue_string+0x628>
    3878:	dc c0       	rjmp	.+440    	; 0x3a32 <uart_enqueue_string+0x7e0>
		uart_txbuffer_enable(port);	
    387a:	c6 01       	movw	r24, r12
    387c:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <uart_txbuffer_enable>
    3880:	d8 c0       	rjmp	.+432    	; 0x3a32 <uart_enqueue_string+0x7e0>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    3882:	30 eb       	ldi	r19, 0xB0	; 176
    3884:	c3 16       	cp	r12, r19
    3886:	3b e0       	ldi	r19, 0x0B	; 11
    3888:	d3 06       	cpc	r13, r19
    388a:	61 f0       	breq	.+24     	; 0x38a4 <uart_enqueue_string+0x652>
	if (port == &uctrl) {return 1;}
    388c:	60 ea       	ldi	r22, 0xA0	; 160
    388e:	c6 16       	cp	r12, r22
    3890:	68 e0       	ldi	r22, 0x08	; 8
    3892:	d6 06       	cpc	r13, r22
    3894:	49 f0       	breq	.+18     	; 0x38a8 <uart_enqueue_string+0x656>
	if (port == &udata) {return 2;}
    3896:	80 eb       	ldi	r24, 0xB0	; 176
    3898:	c8 16       	cp	r12, r24
    389a:	88 e0       	ldi	r24, 0x08	; 8
    389c:	d8 06       	cpc	r13, r24
    389e:	31 f4       	brne	.+12     	; 0x38ac <uart_enqueue_string+0x65a>
    38a0:	22 e0       	ldi	r18, 0x02	; 2
    38a2:	05 c0       	rjmp	.+10     	; 0x38ae <uart_enqueue_string+0x65c>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    38a4:	20 e0       	ldi	r18, 0x00	; 0
    38a6:	03 c0       	rjmp	.+6      	; 0x38ae <uart_enqueue_string+0x65c>
	if (port == &uctrl) {return 1;}
    38a8:	21 e0       	ldi	r18, 0x01	; 1
    38aa:	01 c0       	rjmp	.+2      	; 0x38ae <uart_enqueue_string+0x65c>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    38ac:	20 e0       	ldi	r18, 0x00	; 0
}

inline uint8_t uart_dequeue(USART_t* port){
	uint8_t idx = port_map(port);
	uint16_t oldtail;
	oldtail = uart_tail[idx];
    38ae:	30 e0       	ldi	r19, 0x00	; 0
    38b0:	c9 01       	movw	r24, r18
    38b2:	88 0f       	add	r24, r24
    38b4:	99 1f       	adc	r25, r25
    38b6:	f4 01       	movw	r30, r8
    38b8:	e8 0f       	add	r30, r24
    38ba:	f9 1f       	adc	r31, r25
    38bc:	40 81       	ld	r20, Z
    38be:	51 81       	ldd	r21, Z+1	; 0x01
	uart_tail[idx]++;
    38c0:	80 81       	ld	r24, Z
    38c2:	91 81       	ldd	r25, Z+1	; 0x01
    38c4:	01 96       	adiw	r24, 0x01	; 1
    38c6:	80 83       	st	Z, r24
    38c8:	91 83       	std	Z+1, r25	; 0x01
	if (uart_tail[idx] >= MAX_BUFFER_LEN){
    38ca:	80 81       	ld	r24, Z
    38cc:	91 81       	ldd	r25, Z+1	; 0x01
    38ce:	a4 e0       	ldi	r26, 0x04	; 4
    38d0:	80 30       	cpi	r24, 0x00	; 0
    38d2:	9a 07       	cpc	r25, r26
    38d4:	10 f0       	brcs	.+4      	; 0x38da <uart_enqueue_string+0x688>
		uart_tail[idx] = 0;
    38d6:	10 82       	st	Z, r1
    38d8:	11 82       	std	Z+1, r1	; 0x01
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    38da:	c9 01       	movw	r24, r18
    38dc:	98 2f       	mov	r25, r24
    38de:	88 27       	eor	r24, r24
    38e0:	99 0f       	add	r25, r25
    38e2:	99 0f       	add	r25, r25
    38e4:	84 0f       	add	r24, r20
    38e6:	95 1f       	adc	r25, r21
    38e8:	84 0d       	add	r24, r4
    38ea:	95 1d       	adc	r25, r5
    38ec:	dc 01       	movw	r26, r24
    38ee:	8c 91       	ld	r24, X
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
    38f0:	f6 01       	movw	r30, r12
    38f2:	80 83       	st	Z, r24
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    38f4:	81 81       	ldd	r24, Z+1	; 0x01
    38f6:	85 ff       	sbrs	r24, 5
    38f8:	4b c0       	rjmp	.+150    	; 0x3990 <uart_enqueue_string+0x73e>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    38fa:	f0 eb       	ldi	r31, 0xB0	; 176
    38fc:	cf 16       	cp	r12, r31
    38fe:	fb e0       	ldi	r31, 0x0B	; 11
    3900:	df 06       	cpc	r13, r31
    3902:	61 f0       	breq	.+24     	; 0x391c <uart_enqueue_string+0x6ca>
	if (port == &uctrl) {return 1;}
    3904:	20 ea       	ldi	r18, 0xA0	; 160
    3906:	c2 16       	cp	r12, r18
    3908:	28 e0       	ldi	r18, 0x08	; 8
    390a:	d2 06       	cpc	r13, r18
    390c:	49 f0       	breq	.+18     	; 0x3920 <uart_enqueue_string+0x6ce>
	if (port == &udata) {return 2;}
    390e:	30 eb       	ldi	r19, 0xB0	; 176
    3910:	c3 16       	cp	r12, r19
    3912:	38 e0       	ldi	r19, 0x08	; 8
    3914:	d3 06       	cpc	r13, r19
    3916:	31 f4       	brne	.+12     	; 0x3924 <uart_enqueue_string+0x6d2>
    3918:	22 e0       	ldi	r18, 0x02	; 2
    391a:	05 c0       	rjmp	.+10     	; 0x3926 <uart_enqueue_string+0x6d4>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    391c:	20 e0       	ldi	r18, 0x00	; 0
    391e:	03 c0       	rjmp	.+6      	; 0x3926 <uart_enqueue_string+0x6d4>
	if (port == &uctrl) {return 1;}
    3920:	21 e0       	ldi	r18, 0x01	; 1
    3922:	01 c0       	rjmp	.+2      	; 0x3926 <uart_enqueue_string+0x6d4>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    3924:	20 e0       	ldi	r18, 0x00	; 0
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    3926:	30 e0       	ldi	r19, 0x00	; 0
    3928:	c9 01       	movw	r24, r18
    392a:	88 0f       	add	r24, r24
    392c:	99 1f       	adc	r25, r25
    392e:	f3 01       	movw	r30, r6
    3930:	e8 0f       	add	r30, r24
    3932:	f9 1f       	adc	r31, r25
    3934:	40 81       	ld	r20, Z
    3936:	51 81       	ldd	r21, Z+1	; 0x01
    3938:	f4 01       	movw	r30, r8
    393a:	e8 0f       	add	r30, r24
    393c:	f9 1f       	adc	r31, r25
    393e:	80 81       	ld	r24, Z
    3940:	91 81       	ldd	r25, Z+1	; 0x01
    3942:	48 17       	cp	r20, r24
    3944:	59 07       	cpc	r21, r25
    3946:	88 f0       	brcs	.+34     	; 0x396a <uart_enqueue_string+0x718>
		return (uart_head[idx] - uart_tail[idx]);
    3948:	22 0f       	add	r18, r18
    394a:	33 1f       	adc	r19, r19
    394c:	f3 01       	movw	r30, r6
    394e:	e2 0f       	add	r30, r18
    3950:	f3 1f       	adc	r31, r19
    3952:	40 81       	ld	r20, Z
    3954:	51 81       	ldd	r21, Z+1	; 0x01
    3956:	f4 01       	movw	r30, r8
    3958:	e2 0f       	add	r30, r18
    395a:	f3 1f       	adc	r31, r19
    395c:	80 81       	ld	r24, Z
    395e:	91 81       	ldd	r25, Z+1	; 0x01
    3960:	da 01       	movw	r26, r20
    3962:	a8 1b       	sub	r26, r24
    3964:	b9 0b       	sbc	r27, r25
    3966:	cd 01       	movw	r24, r26
    3968:	10 c0       	rjmp	.+32     	; 0x398a <uart_enqueue_string+0x738>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    396a:	22 0f       	add	r18, r18
    396c:	33 1f       	adc	r19, r19
    396e:	f3 01       	movw	r30, r6
    3970:	e2 0f       	add	r30, r18
    3972:	f3 1f       	adc	r31, r19
    3974:	80 81       	ld	r24, Z
    3976:	91 81       	ldd	r25, Z+1	; 0x01
    3978:	f4 01       	movw	r30, r8
    397a:	e2 0f       	add	r30, r18
    397c:	f3 1f       	adc	r31, r19
    397e:	20 81       	ld	r18, Z
    3980:	31 81       	ldd	r19, Z+1	; 0x01
    3982:	80 50       	subi	r24, 0x00	; 0
    3984:	9c 4f       	sbci	r25, 0xFC	; 252
    3986:	82 1b       	sub	r24, r18
    3988:	93 0b       	sbc	r25, r19
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    398a:	00 97       	sbiw	r24, 0x00	; 0
    398c:	09 f0       	breq	.+2      	; 0x3990 <uart_enqueue_string+0x73e>
    398e:	79 cf       	rjmp	.-270    	; 0x3882 <uart_enqueue_string+0x630>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    3990:	b0 eb       	ldi	r27, 0xB0	; 176
    3992:	cb 16       	cp	r12, r27
    3994:	bb e0       	ldi	r27, 0x0B	; 11
    3996:	db 06       	cpc	r13, r27
    3998:	61 f0       	breq	.+24     	; 0x39b2 <uart_enqueue_string+0x760>
	if (port == &uctrl) {return 1;}
    399a:	e0 ea       	ldi	r30, 0xA0	; 160
    399c:	ce 16       	cp	r12, r30
    399e:	e8 e0       	ldi	r30, 0x08	; 8
    39a0:	de 06       	cpc	r13, r30
    39a2:	49 f0       	breq	.+18     	; 0x39b6 <uart_enqueue_string+0x764>
	if (port == &udata) {return 2;}
    39a4:	f0 eb       	ldi	r31, 0xB0	; 176
    39a6:	cf 16       	cp	r12, r31
    39a8:	f8 e0       	ldi	r31, 0x08	; 8
    39aa:	df 06       	cpc	r13, r31
    39ac:	31 f4       	brne	.+12     	; 0x39ba <uart_enqueue_string+0x768>
    39ae:	22 e0       	ldi	r18, 0x02	; 2
    39b0:	05 c0       	rjmp	.+10     	; 0x39bc <uart_enqueue_string+0x76a>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    39b2:	20 e0       	ldi	r18, 0x00	; 0
    39b4:	03 c0       	rjmp	.+6      	; 0x39bc <uart_enqueue_string+0x76a>
	if (port == &uctrl) {return 1;}
    39b6:	21 e0       	ldi	r18, 0x01	; 1
    39b8:	01 c0       	rjmp	.+2      	; 0x39bc <uart_enqueue_string+0x76a>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    39ba:	20 e0       	ldi	r18, 0x00	; 0
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    39bc:	30 e0       	ldi	r19, 0x00	; 0
    39be:	c9 01       	movw	r24, r18
    39c0:	88 0f       	add	r24, r24
    39c2:	99 1f       	adc	r25, r25
    39c4:	f3 01       	movw	r30, r6
    39c6:	e8 0f       	add	r30, r24
    39c8:	f9 1f       	adc	r31, r25
    39ca:	40 81       	ld	r20, Z
    39cc:	51 81       	ldd	r21, Z+1	; 0x01
    39ce:	f4 01       	movw	r30, r8
    39d0:	e8 0f       	add	r30, r24
    39d2:	f9 1f       	adc	r31, r25
    39d4:	80 81       	ld	r24, Z
    39d6:	91 81       	ldd	r25, Z+1	; 0x01
    39d8:	48 17       	cp	r20, r24
    39da:	59 07       	cpc	r21, r25
    39dc:	88 f0       	brcs	.+34     	; 0x3a00 <uart_enqueue_string+0x7ae>
		return (uart_head[idx] - uart_tail[idx]);
    39de:	22 0f       	add	r18, r18
    39e0:	33 1f       	adc	r19, r19
    39e2:	f3 01       	movw	r30, r6
    39e4:	e2 0f       	add	r30, r18
    39e6:	f3 1f       	adc	r31, r19
    39e8:	40 81       	ld	r20, Z
    39ea:	51 81       	ldd	r21, Z+1	; 0x01
    39ec:	f4 01       	movw	r30, r8
    39ee:	e2 0f       	add	r30, r18
    39f0:	f3 1f       	adc	r31, r19
    39f2:	80 81       	ld	r24, Z
    39f4:	91 81       	ldd	r25, Z+1	; 0x01
    39f6:	9a 01       	movw	r18, r20
    39f8:	28 1b       	sub	r18, r24
    39fa:	39 0b       	sbc	r19, r25
    39fc:	c9 01       	movw	r24, r18
    39fe:	10 c0       	rjmp	.+32     	; 0x3a20 <uart_enqueue_string+0x7ce>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    3a00:	22 0f       	add	r18, r18
    3a02:	33 1f       	adc	r19, r19
    3a04:	f3 01       	movw	r30, r6
    3a06:	e2 0f       	add	r30, r18
    3a08:	f3 1f       	adc	r31, r19
    3a0a:	80 81       	ld	r24, Z
    3a0c:	91 81       	ldd	r25, Z+1	; 0x01
    3a0e:	f4 01       	movw	r30, r8
    3a10:	e2 0f       	add	r30, r18
    3a12:	f3 1f       	adc	r31, r19
    3a14:	20 81       	ld	r18, Z
    3a16:	31 81       	ldd	r19, Z+1	; 0x01
    3a18:	80 50       	subi	r24, 0x00	; 0
    3a1a:	9c 4f       	sbci	r25, 0xFC	; 252
    3a1c:	82 1b       	sub	r24, r18
    3a1e:	93 0b       	sbc	r25, r19
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
	}
	//disable the tx outgoing hardware buffer ready interrupt if we have nothing more to put in it.
	if(uart_count(port)>0) uart_txbuffer_enable(port);
    3a20:	00 97       	sbiw	r24, 0x00	; 0
    3a22:	21 f0       	breq	.+8      	; 0x3a2c <uart_enqueue_string+0x7da>
    3a24:	c6 01       	movw	r24, r12
    3a26:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <uart_txbuffer_enable>
    3a2a:	03 c0       	rjmp	.+6      	; 0x3a32 <uart_enqueue_string+0x7e0>
	else uart_txbuffer_disable(port);
    3a2c:	c6 01       	movw	r24, r12
    3a2e:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <uart_txbuffer_disable>
}

///Enqueue a string into the outgoing serial queue. Adds CR terminator to string.
inline void uart_enqueue_string(USART_t* port, char* string_in){
	uint16_t length = (uint16_t)strlen(string_in);
	for (uint16_t i=0; i<length; i++) {uart_enqueue(port, (uint8_t)string_in[i]);}
    3a32:	08 94       	sec
    3a34:	21 1c       	adc	r2, r1
    3a36:	31 1c       	adc	r3, r1
    3a38:	8b 81       	ldd	r24, Y+3	; 0x03
    3a3a:	9c 81       	ldd	r25, Y+4	; 0x04
    3a3c:	28 16       	cp	r2, r24
    3a3e:	39 06       	cpc	r3, r25
    3a40:	09 f0       	breq	.+2      	; 0x3a44 <uart_enqueue_string+0x7f2>
    3a42:	49 cc       	rjmp	.-1902   	; 0x32d6 <uart_enqueue_string+0x84>
}
    3a44:	24 96       	adiw	r28, 0x04	; 4
    3a46:	cd bf       	out	0x3d, r28	; 61
    3a48:	de bf       	out	0x3e, r29	; 62
    3a4a:	df 91       	pop	r29
    3a4c:	cf 91       	pop	r28
    3a4e:	1f 91       	pop	r17
    3a50:	0f 91       	pop	r16
    3a52:	ff 90       	pop	r15
    3a54:	ef 90       	pop	r14
    3a56:	df 90       	pop	r13
    3a58:	cf 90       	pop	r12
    3a5a:	bf 90       	pop	r11
    3a5c:	af 90       	pop	r10
    3a5e:	9f 90       	pop	r9
    3a60:	8f 90       	pop	r8
    3a62:	7f 90       	pop	r7
    3a64:	6f 90       	pop	r6
    3a66:	5f 90       	pop	r5
    3a68:	4f 90       	pop	r4
    3a6a:	3f 90       	pop	r3
    3a6c:	2f 90       	pop	r2
    3a6e:	08 95       	ret

00003a70 <uart_enqueue>:

///Enqueue date into the outgoing serial queue. This data is sent via USB to the PC's first virtual Comm Port associated with the EEICM. 
/**This is the queue used to send data back to the command and control GUI. The #define UART_DEBUG can be used to disable normal serial activity through this queue
	The blue LED is used in this routine to signal buffer overflow, which, due to the real-time scheduled nature of the EEICM firmware architecture, should not happen.
	This function is inactive when in UART DEBUG mode. Calls to this function have no effect during this period.*/
inline void uart_enqueue(USART_t* port, uint8_t datain){
    3a70:	3f 92       	push	r3
    3a72:	4f 92       	push	r4
    3a74:	5f 92       	push	r5
    3a76:	6f 92       	push	r6
    3a78:	7f 92       	push	r7
    3a7a:	8f 92       	push	r8
    3a7c:	9f 92       	push	r9
    3a7e:	af 92       	push	r10
    3a80:	bf 92       	push	r11
    3a82:	cf 92       	push	r12
    3a84:	df 92       	push	r13
    3a86:	ef 92       	push	r14
    3a88:	ff 92       	push	r15
    3a8a:	0f 93       	push	r16
    3a8c:	1f 93       	push	r17
    3a8e:	cf 93       	push	r28
    3a90:	df 93       	push	r29
    3a92:	6c 01       	movw	r12, r24
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    3a94:	2b e0       	ldi	r18, 0x0B	; 11
    3a96:	80 3b       	cpi	r24, 0xB0	; 176
    3a98:	92 07       	cpc	r25, r18
    3a9a:	59 f0       	breq	.+22     	; 0x3ab2 <uart_enqueue+0x42>
	if (port == &uctrl) {return 1;}
    3a9c:	38 e0       	ldi	r19, 0x08	; 8
    3a9e:	80 3a       	cpi	r24, 0xA0	; 160
    3aa0:	93 07       	cpc	r25, r19
    3aa2:	49 f0       	breq	.+18     	; 0x3ab6 <uart_enqueue+0x46>
	if (port == &udata) {return 2;}
    3aa4:	80 eb       	ldi	r24, 0xB0	; 176
    3aa6:	c8 16       	cp	r12, r24
    3aa8:	88 e0       	ldi	r24, 0x08	; 8
    3aaa:	d8 06       	cpc	r13, r24
    3aac:	31 f4       	brne	.+12     	; 0x3aba <uart_enqueue+0x4a>
    3aae:	42 e0       	ldi	r20, 0x02	; 2
    3ab0:	05 c0       	rjmp	.+10     	; 0x3abc <uart_enqueue+0x4c>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    3ab2:	40 e0       	ldi	r20, 0x00	; 0
    3ab4:	03 c0       	rjmp	.+6      	; 0x3abc <uart_enqueue+0x4c>
	if (port == &uctrl) {return 1;}
    3ab6:	41 e0       	ldi	r20, 0x01	; 1
    3ab8:	01 c0       	rjmp	.+2      	; 0x3abc <uart_enqueue+0x4c>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    3aba:	40 e0       	ldi	r20, 0x00	; 0
#ifndef UART_DEBUG
	uint8_t idx = port_map(port);
	
	//if (idx==0){uart_enqueue(&uctrl, datain);} //xxx
	
	uart_buffer[idx][uart_head[idx]] = datain;
    3abc:	c4 2f       	mov	r28, r20
    3abe:	d0 e0       	ldi	r29, 0x00	; 0
    3ac0:	fe 01       	movw	r30, r28
    3ac2:	ee 0f       	add	r30, r30
    3ac4:	ff 1f       	adc	r31, r31
    3ac6:	e4 56       	subi	r30, 0x64	; 100
    3ac8:	ff 4c       	sbci	r31, 0xCF	; 207
    3aca:	20 81       	ld	r18, Z
    3acc:	31 81       	ldd	r19, Z+1	; 0x01
    3ace:	ce 01       	movw	r24, r28
    3ad0:	98 2f       	mov	r25, r24
    3ad2:	88 27       	eor	r24, r24
    3ad4:	99 0f       	add	r25, r25
    3ad6:	99 0f       	add	r25, r25
    3ad8:	82 0f       	add	r24, r18
    3ada:	93 1f       	adc	r25, r19
    3adc:	dc 01       	movw	r26, r24
    3ade:	ae 55       	subi	r26, 0x5E	; 94
    3ae0:	bf 4c       	sbci	r27, 0xCF	; 207
    3ae2:	6c 93       	st	X, r22
	uart_head[idx]++;
    3ae4:	80 81       	ld	r24, Z
    3ae6:	91 81       	ldd	r25, Z+1	; 0x01
    3ae8:	01 96       	adiw	r24, 0x01	; 1
    3aea:	80 83       	st	Z, r24
    3aec:	91 83       	std	Z+1, r25	; 0x01
	if (uart_head[idx] >= MAX_BUFFER_LEN){
    3aee:	80 81       	ld	r24, Z
    3af0:	91 81       	ldd	r25, Z+1	; 0x01
    3af2:	e4 e0       	ldi	r30, 0x04	; 4
    3af4:	80 30       	cpi	r24, 0x00	; 0
    3af6:	9e 07       	cpc	r25, r30
    3af8:	30 f0       	brcs	.+12     	; 0x3b06 <uart_enqueue+0x96>
		uart_head[idx] = 0;
    3afa:	cc 0f       	add	r28, r28
    3afc:	dd 1f       	adc	r29, r29
    3afe:	c4 56       	subi	r28, 0x64	; 100
    3b00:	df 4c       	sbci	r29, 0xCF	; 207
    3b02:	18 82       	st	Y, r1
    3b04:	19 82       	std	Y+1, r1	; 0x01
	}
	if (idx == 0){uart_transmit_lcd(port);} //start the transmission process.
    3b06:	44 23       	and	r20, r20
    3b08:	09 f4       	brne	.+2      	; 0x3b0c <uart_enqueue+0x9c>
    3b0a:	95 c1       	rjmp	.+810    	; 0x3e36 <uart_enqueue+0x3c6>
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    3b0c:	f6 01       	movw	r30, r12
    3b0e:	81 81       	ldd	r24, Z+1	; 0x01
    3b10:	85 fd       	sbrc	r24, 5
    3b12:	a1 c2       	rjmp	.+1346   	; 0x4056 <__stack+0x57>
    3b14:	f3 c2       	rjmp	.+1510   	; 0x40fc <__stack+0xfd>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    3b16:	f0 eb       	ldi	r31, 0xB0	; 176
    3b18:	cf 16       	cp	r12, r31
    3b1a:	fb e0       	ldi	r31, 0x0B	; 11
    3b1c:	df 06       	cpc	r13, r31
    3b1e:	61 f0       	breq	.+24     	; 0x3b38 <uart_enqueue+0xc8>
	if (port == &uctrl) {return 1;}
    3b20:	20 ea       	ldi	r18, 0xA0	; 160
    3b22:	c2 16       	cp	r12, r18
    3b24:	28 e0       	ldi	r18, 0x08	; 8
    3b26:	d2 06       	cpc	r13, r18
    3b28:	49 f0       	breq	.+18     	; 0x3b3c <uart_enqueue+0xcc>
	if (port == &udata) {return 2;}
    3b2a:	30 eb       	ldi	r19, 0xB0	; 176
    3b2c:	c3 16       	cp	r12, r19
    3b2e:	38 e0       	ldi	r19, 0x08	; 8
    3b30:	d3 06       	cpc	r13, r19
    3b32:	31 f4       	brne	.+12     	; 0x3b40 <uart_enqueue+0xd0>
    3b34:	22 e0       	ldi	r18, 0x02	; 2
    3b36:	05 c0       	rjmp	.+10     	; 0x3b42 <uart_enqueue+0xd2>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    3b38:	20 e0       	ldi	r18, 0x00	; 0
    3b3a:	03 c0       	rjmp	.+6      	; 0x3b42 <uart_enqueue+0xd2>
	if (port == &uctrl) {return 1;}
    3b3c:	21 e0       	ldi	r18, 0x01	; 1
    3b3e:	01 c0       	rjmp	.+2      	; 0x3b42 <uart_enqueue+0xd2>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    3b40:	20 e0       	ldi	r18, 0x00	; 0
}

inline uint8_t uart_dequeue(USART_t* port){
	uint8_t idx = port_map(port);
	uint16_t oldtail;
	oldtail = uart_tail[idx];
    3b42:	30 e0       	ldi	r19, 0x00	; 0
    3b44:	c9 01       	movw	r24, r18
    3b46:	88 0f       	add	r24, r24
    3b48:	99 1f       	adc	r25, r25
    3b4a:	f4 01       	movw	r30, r8
    3b4c:	e8 0f       	add	r30, r24
    3b4e:	f9 1f       	adc	r31, r25
    3b50:	40 81       	ld	r20, Z
    3b52:	51 81       	ldd	r21, Z+1	; 0x01
	uart_tail[idx]++;
    3b54:	80 81       	ld	r24, Z
    3b56:	91 81       	ldd	r25, Z+1	; 0x01
    3b58:	01 96       	adiw	r24, 0x01	; 1
    3b5a:	80 83       	st	Z, r24
    3b5c:	91 83       	std	Z+1, r25	; 0x01
	if (uart_tail[idx] >= MAX_BUFFER_LEN){
    3b5e:	80 81       	ld	r24, Z
    3b60:	91 81       	ldd	r25, Z+1	; 0x01
    3b62:	64 e0       	ldi	r22, 0x04	; 4
    3b64:	80 30       	cpi	r24, 0x00	; 0
    3b66:	96 07       	cpc	r25, r22
    3b68:	10 f0       	brcs	.+4      	; 0x3b6e <uart_enqueue+0xfe>
		uart_tail[idx] = 0;
    3b6a:	10 82       	st	Z, r1
    3b6c:	11 82       	std	Z+1, r1	; 0x01
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    3b6e:	c9 01       	movw	r24, r18
    3b70:	98 2f       	mov	r25, r24
    3b72:	88 27       	eor	r24, r24
    3b74:	99 0f       	add	r25, r25
    3b76:	99 0f       	add	r25, r25
    3b78:	84 0f       	add	r24, r20
    3b7a:	95 1f       	adc	r25, r21
    3b7c:	84 0d       	add	r24, r4
    3b7e:	95 1d       	adc	r25, r5
    3b80:	fc 01       	movw	r30, r24
    3b82:	b0 80       	ld	r11, Z
void inline uart_transmit_lcd(USART_t* port){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0) && (lcd_flow_control == LCD_READY)){
		toSend = uart_dequeue(port);
		switch(toSend){
    3b84:	fa ef       	ldi	r31, 0xFA	; 250
    3b86:	bf 16       	cp	r11, r31
    3b88:	21 f0       	breq	.+8      	; 0x3b92 <uart_enqueue+0x122>
    3b8a:	2e ef       	ldi	r18, 0xFE	; 254
    3b8c:	b2 16       	cp	r11, r18
    3b8e:	09 f0       	breq	.+2      	; 0x3b92 <uart_enqueue+0x122>
    3b90:	dd c0       	rjmp	.+442    	; 0x3d4c <uart_enqueue+0x2dc>
#ifndef UART_DEBUG
	uint8_t idx = port_map(port);
	
	//if (idx==0){uart_enqueue(&uctrl, datain);} //xxx
	
	uart_buffer[idx][uart_head[idx]] = datain;
    3b92:	f8 01       	movw	r30, r16
    3b94:	80 81       	ld	r24, Z
    3b96:	91 81       	ldd	r25, Z+1	; 0x01
    3b98:	8e 55       	subi	r24, 0x5E	; 94
    3b9a:	9b 4c       	sbci	r25, 0xCB	; 203
    3b9c:	fc 01       	movw	r30, r24
    3b9e:	a0 82       	st	Z, r10
	uart_head[idx]++;
    3ba0:	f8 01       	movw	r30, r16
    3ba2:	80 81       	ld	r24, Z
    3ba4:	91 81       	ldd	r25, Z+1	; 0x01
    3ba6:	01 96       	adiw	r24, 0x01	; 1
    3ba8:	80 83       	st	Z, r24
    3baa:	91 83       	std	Z+1, r25	; 0x01
	if (uart_head[idx] >= MAX_BUFFER_LEN){
    3bac:	80 81       	ld	r24, Z
    3bae:	91 81       	ldd	r25, Z+1	; 0x01
    3bb0:	f4 e0       	ldi	r31, 0x04	; 4
    3bb2:	80 30       	cpi	r24, 0x00	; 0
    3bb4:	9f 07       	cpc	r25, r31
    3bb6:	18 f0       	brcs	.+6      	; 0x3bbe <uart_enqueue+0x14e>
		uart_head[idx] = 0;
    3bb8:	f8 01       	movw	r30, r16
    3bba:	10 82       	st	Z, r1
    3bbc:	11 82       	std	Z+1, r1	; 0x01
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    3bbe:	f7 01       	movw	r30, r14
    3bc0:	81 81       	ldd	r24, Z+1	; 0x01
    3bc2:	85 fd       	sbrc	r24, 5
    3bc4:	18 c0       	rjmp	.+48     	; 0x3bf6 <uart_enqueue+0x186>
    3bc6:	31 c0       	rjmp	.+98     	; 0x3c2a <uart_enqueue+0x1ba>
}

inline uint8_t uart_dequeue(USART_t* port){
	uint8_t idx = port_map(port);
	uint16_t oldtail;
	oldtail = uart_tail[idx];
    3bc8:	e8 81       	ld	r30, Y
    3bca:	f9 81       	ldd	r31, Y+1	; 0x01
	uart_tail[idx]++;
    3bcc:	88 81       	ld	r24, Y
    3bce:	99 81       	ldd	r25, Y+1	; 0x01
    3bd0:	01 96       	adiw	r24, 0x01	; 1
    3bd2:	88 83       	st	Y, r24
    3bd4:	99 83       	std	Y+1, r25	; 0x01
	if (uart_tail[idx] >= MAX_BUFFER_LEN){
    3bd6:	88 81       	ld	r24, Y
    3bd8:	99 81       	ldd	r25, Y+1	; 0x01
    3bda:	24 e0       	ldi	r18, 0x04	; 4
    3bdc:	80 30       	cpi	r24, 0x00	; 0
    3bde:	92 07       	cpc	r25, r18
    3be0:	10 f0       	brcs	.+4      	; 0x3be6 <uart_enqueue+0x176>
		uart_tail[idx] = 0;
    3be2:	18 82       	st	Y, r1
    3be4:	19 82       	std	Y+1, r1	; 0x01
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    3be6:	ee 55       	subi	r30, 0x5E	; 94
    3be8:	fb 4c       	sbci	r31, 0xCB	; 203
    3bea:	80 81       	ld	r24, Z
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
    3bec:	f7 01       	movw	r30, r14
    3bee:	80 83       	st	Z, r24
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    3bf0:	81 81       	ldd	r24, Z+1	; 0x01
    3bf2:	85 ff       	sbrs	r24, 5
    3bf4:	1a c0       	rjmp	.+52     	; 0x3c2a <uart_enqueue+0x1ba>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    3bf6:	f8 01       	movw	r30, r16
    3bf8:	80 81       	ld	r24, Z
    3bfa:	91 81       	ldd	r25, Z+1	; 0x01
    3bfc:	28 81       	ld	r18, Y
    3bfe:	39 81       	ldd	r19, Y+1	; 0x01
    3c00:	82 17       	cp	r24, r18
    3c02:	93 07       	cpc	r25, r19
    3c04:	38 f0       	brcs	.+14     	; 0x3c14 <uart_enqueue+0x1a4>
		return (uart_head[idx] - uart_tail[idx]);
    3c06:	80 81       	ld	r24, Z
    3c08:	91 81       	ldd	r25, Z+1	; 0x01
    3c0a:	28 81       	ld	r18, Y
    3c0c:	39 81       	ldd	r19, Y+1	; 0x01
    3c0e:	82 1b       	sub	r24, r18
    3c10:	93 0b       	sbc	r25, r19
    3c12:	09 c0       	rjmp	.+18     	; 0x3c26 <uart_enqueue+0x1b6>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    3c14:	f8 01       	movw	r30, r16
    3c16:	80 81       	ld	r24, Z
    3c18:	91 81       	ldd	r25, Z+1	; 0x01
    3c1a:	28 81       	ld	r18, Y
    3c1c:	39 81       	ldd	r19, Y+1	; 0x01
    3c1e:	80 50       	subi	r24, 0x00	; 0
    3c20:	9c 4f       	sbci	r25, 0xFC	; 252
    3c22:	82 1b       	sub	r24, r18
    3c24:	93 0b       	sbc	r25, r19
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    3c26:	00 97       	sbiw	r24, 0x00	; 0
    3c28:	79 f6       	brne	.-98     	; 0x3bc8 <uart_enqueue+0x158>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    3c2a:	f8 01       	movw	r30, r16
    3c2c:	80 81       	ld	r24, Z
    3c2e:	91 81       	ldd	r25, Z+1	; 0x01
    3c30:	28 81       	ld	r18, Y
    3c32:	39 81       	ldd	r19, Y+1	; 0x01
    3c34:	82 17       	cp	r24, r18
    3c36:	93 07       	cpc	r25, r19
    3c38:	38 f0       	brcs	.+14     	; 0x3c48 <uart_enqueue+0x1d8>
		return (uart_head[idx] - uart_tail[idx]);
    3c3a:	80 81       	ld	r24, Z
    3c3c:	91 81       	ldd	r25, Z+1	; 0x01
    3c3e:	28 81       	ld	r18, Y
    3c40:	39 81       	ldd	r19, Y+1	; 0x01
    3c42:	82 1b       	sub	r24, r18
    3c44:	93 0b       	sbc	r25, r19
    3c46:	09 c0       	rjmp	.+18     	; 0x3c5a <uart_enqueue+0x1ea>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    3c48:	f8 01       	movw	r30, r16
    3c4a:	80 81       	ld	r24, Z
    3c4c:	91 81       	ldd	r25, Z+1	; 0x01
    3c4e:	28 81       	ld	r18, Y
    3c50:	39 81       	ldd	r19, Y+1	; 0x01
    3c52:	80 50       	subi	r24, 0x00	; 0
    3c54:	9c 4f       	sbci	r25, 0xFC	; 252
    3c56:	82 1b       	sub	r24, r18
    3c58:	93 0b       	sbc	r25, r19
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
	}
	//disable the tx outgoing hardware buffer ready interrupt if we have nothing more to put in it.
	if(uart_count(port)>0) uart_txbuffer_enable(port);
    3c5a:	00 97       	sbiw	r24, 0x00	; 0
    3c5c:	21 f0       	breq	.+8      	; 0x3c66 <uart_enqueue+0x1f6>
    3c5e:	c7 01       	movw	r24, r14
    3c60:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <uart_txbuffer_enable>
    3c64:	03 c0       	rjmp	.+6      	; 0x3c6c <uart_enqueue+0x1fc>
	else uart_txbuffer_disable(port);
    3c66:	c7 01       	movw	r24, r14
    3c68:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <uart_txbuffer_disable>
#ifndef UART_DEBUG
	uint8_t idx = port_map(port);
	
	//if (idx==0){uart_enqueue(&uctrl, datain);} //xxx
	
	uart_buffer[idx][uart_head[idx]] = datain;
    3c6c:	f8 01       	movw	r30, r16
    3c6e:	80 81       	ld	r24, Z
    3c70:	91 81       	ldd	r25, Z+1	; 0x01
    3c72:	8e 55       	subi	r24, 0x5E	; 94
    3c74:	9b 4c       	sbci	r25, 0xCB	; 203
    3c76:	fc 01       	movw	r30, r24
    3c78:	b0 82       	st	Z, r11
	uart_head[idx]++;
    3c7a:	f8 01       	movw	r30, r16
    3c7c:	80 81       	ld	r24, Z
    3c7e:	91 81       	ldd	r25, Z+1	; 0x01
    3c80:	01 96       	adiw	r24, 0x01	; 1
    3c82:	80 83       	st	Z, r24
    3c84:	91 83       	std	Z+1, r25	; 0x01
	if (uart_head[idx] >= MAX_BUFFER_LEN){
    3c86:	80 81       	ld	r24, Z
    3c88:	91 81       	ldd	r25, Z+1	; 0x01
    3c8a:	f4 e0       	ldi	r31, 0x04	; 4
    3c8c:	80 30       	cpi	r24, 0x00	; 0
    3c8e:	9f 07       	cpc	r25, r31
    3c90:	18 f0       	brcs	.+6      	; 0x3c98 <uart_enqueue+0x228>
		uart_head[idx] = 0;
    3c92:	f8 01       	movw	r30, r16
    3c94:	10 82       	st	Z, r1
    3c96:	11 82       	std	Z+1, r1	; 0x01
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    3c98:	f7 01       	movw	r30, r14
    3c9a:	81 81       	ldd	r24, Z+1	; 0x01
    3c9c:	85 fd       	sbrc	r24, 5
    3c9e:	18 c0       	rjmp	.+48     	; 0x3cd0 <uart_enqueue+0x260>
    3ca0:	31 c0       	rjmp	.+98     	; 0x3d04 <uart_enqueue+0x294>
}

inline uint8_t uart_dequeue(USART_t* port){
	uint8_t idx = port_map(port);
	uint16_t oldtail;
	oldtail = uart_tail[idx];
    3ca2:	e8 81       	ld	r30, Y
    3ca4:	f9 81       	ldd	r31, Y+1	; 0x01
	uart_tail[idx]++;
    3ca6:	88 81       	ld	r24, Y
    3ca8:	99 81       	ldd	r25, Y+1	; 0x01
    3caa:	01 96       	adiw	r24, 0x01	; 1
    3cac:	88 83       	st	Y, r24
    3cae:	99 83       	std	Y+1, r25	; 0x01
	if (uart_tail[idx] >= MAX_BUFFER_LEN){
    3cb0:	88 81       	ld	r24, Y
    3cb2:	99 81       	ldd	r25, Y+1	; 0x01
    3cb4:	24 e0       	ldi	r18, 0x04	; 4
    3cb6:	80 30       	cpi	r24, 0x00	; 0
    3cb8:	92 07       	cpc	r25, r18
    3cba:	10 f0       	brcs	.+4      	; 0x3cc0 <uart_enqueue+0x250>
		uart_tail[idx] = 0;
    3cbc:	18 82       	st	Y, r1
    3cbe:	19 82       	std	Y+1, r1	; 0x01
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    3cc0:	ee 55       	subi	r30, 0x5E	; 94
    3cc2:	fb 4c       	sbci	r31, 0xCB	; 203
    3cc4:	80 81       	ld	r24, Z
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
    3cc6:	f7 01       	movw	r30, r14
    3cc8:	80 83       	st	Z, r24
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    3cca:	81 81       	ldd	r24, Z+1	; 0x01
    3ccc:	85 ff       	sbrs	r24, 5
    3cce:	1a c0       	rjmp	.+52     	; 0x3d04 <uart_enqueue+0x294>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    3cd0:	f8 01       	movw	r30, r16
    3cd2:	80 81       	ld	r24, Z
    3cd4:	91 81       	ldd	r25, Z+1	; 0x01
    3cd6:	28 81       	ld	r18, Y
    3cd8:	39 81       	ldd	r19, Y+1	; 0x01
    3cda:	82 17       	cp	r24, r18
    3cdc:	93 07       	cpc	r25, r19
    3cde:	38 f0       	brcs	.+14     	; 0x3cee <uart_enqueue+0x27e>
		return (uart_head[idx] - uart_tail[idx]);
    3ce0:	80 81       	ld	r24, Z
    3ce2:	91 81       	ldd	r25, Z+1	; 0x01
    3ce4:	28 81       	ld	r18, Y
    3ce6:	39 81       	ldd	r19, Y+1	; 0x01
    3ce8:	82 1b       	sub	r24, r18
    3cea:	93 0b       	sbc	r25, r19
    3cec:	09 c0       	rjmp	.+18     	; 0x3d00 <uart_enqueue+0x290>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    3cee:	f8 01       	movw	r30, r16
    3cf0:	80 81       	ld	r24, Z
    3cf2:	91 81       	ldd	r25, Z+1	; 0x01
    3cf4:	28 81       	ld	r18, Y
    3cf6:	39 81       	ldd	r19, Y+1	; 0x01
    3cf8:	80 50       	subi	r24, 0x00	; 0
    3cfa:	9c 4f       	sbci	r25, 0xFC	; 252
    3cfc:	82 1b       	sub	r24, r18
    3cfe:	93 0b       	sbc	r25, r19
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    3d00:	00 97       	sbiw	r24, 0x00	; 0
    3d02:	79 f6       	brne	.-98     	; 0x3ca2 <uart_enqueue+0x232>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    3d04:	f8 01       	movw	r30, r16
    3d06:	80 81       	ld	r24, Z
    3d08:	91 81       	ldd	r25, Z+1	; 0x01
    3d0a:	28 81       	ld	r18, Y
    3d0c:	39 81       	ldd	r19, Y+1	; 0x01
    3d0e:	82 17       	cp	r24, r18
    3d10:	93 07       	cpc	r25, r19
    3d12:	38 f0       	brcs	.+14     	; 0x3d22 <uart_enqueue+0x2b2>
		return (uart_head[idx] - uart_tail[idx]);
    3d14:	80 81       	ld	r24, Z
    3d16:	91 81       	ldd	r25, Z+1	; 0x01
    3d18:	28 81       	ld	r18, Y
    3d1a:	39 81       	ldd	r19, Y+1	; 0x01
    3d1c:	82 1b       	sub	r24, r18
    3d1e:	93 0b       	sbc	r25, r19
    3d20:	09 c0       	rjmp	.+18     	; 0x3d34 <uart_enqueue+0x2c4>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    3d22:	f8 01       	movw	r30, r16
    3d24:	80 81       	ld	r24, Z
    3d26:	91 81       	ldd	r25, Z+1	; 0x01
    3d28:	28 81       	ld	r18, Y
    3d2a:	39 81       	ldd	r19, Y+1	; 0x01
    3d2c:	80 50       	subi	r24, 0x00	; 0
    3d2e:	9c 4f       	sbci	r25, 0xFC	; 252
    3d30:	82 1b       	sub	r24, r18
    3d32:	93 0b       	sbc	r25, r19
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
	}
	//disable the tx outgoing hardware buffer ready interrupt if we have nothing more to put in it.
	if(uart_count(port)>0) uart_txbuffer_enable(port);
    3d34:	00 97       	sbiw	r24, 0x00	; 0
    3d36:	21 f0       	breq	.+8      	; 0x3d40 <uart_enqueue+0x2d0>
    3d38:	c7 01       	movw	r24, r14
    3d3a:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <uart_txbuffer_enable>
    3d3e:	03 c0       	rjmp	.+6      	; 0x3d46 <uart_enqueue+0x2d6>
	else uart_txbuffer_disable(port);
    3d40:	c7 01       	movw	r24, r14
    3d42:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <uart_txbuffer_disable>
			case LCD_COMMAND:
			case LCD_MACRO:
				//Header byte just describes payload -- do not send to LCD
				uart_enqueue(&uctrl, '+'); //echo to data port -- xxx
				uart_enqueue(&uctrl, toSend); //echo to data port -- xxx
				lcd_flow_type = toSend;
    3d46:	b0 92 93 24 	sts	0x2493, r11
    3d4a:	99 c0       	rjmp	.+306    	; 0x3e7e <uart_enqueue+0x40e>
#ifndef UART_DEBUG
	uint8_t idx = port_map(port);
	
	//if (idx==0){uart_enqueue(&uctrl, datain);} //xxx
	
	uart_buffer[idx][uart_head[idx]] = datain;
    3d4c:	f8 01       	movw	r30, r16
    3d4e:	80 81       	ld	r24, Z
    3d50:	91 81       	ldd	r25, Z+1	; 0x01
    3d52:	8e 55       	subi	r24, 0x5E	; 94
    3d54:	9b 4c       	sbci	r25, 0xCB	; 203
    3d56:	fc 01       	movw	r30, r24
    3d58:	b0 82       	st	Z, r11
	uart_head[idx]++;
    3d5a:	f8 01       	movw	r30, r16
    3d5c:	80 81       	ld	r24, Z
    3d5e:	91 81       	ldd	r25, Z+1	; 0x01
    3d60:	01 96       	adiw	r24, 0x01	; 1
    3d62:	80 83       	st	Z, r24
    3d64:	91 83       	std	Z+1, r25	; 0x01
	if (uart_head[idx] >= MAX_BUFFER_LEN){
    3d66:	80 81       	ld	r24, Z
    3d68:	91 81       	ldd	r25, Z+1	; 0x01
    3d6a:	f4 e0       	ldi	r31, 0x04	; 4
    3d6c:	80 30       	cpi	r24, 0x00	; 0
    3d6e:	9f 07       	cpc	r25, r31
    3d70:	18 f0       	brcs	.+6      	; 0x3d78 <uart_enqueue+0x308>
		uart_head[idx] = 0;
    3d72:	f8 01       	movw	r30, r16
    3d74:	10 82       	st	Z, r1
    3d76:	11 82       	std	Z+1, r1	; 0x01
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    3d78:	f7 01       	movw	r30, r14
    3d7a:	81 81       	ldd	r24, Z+1	; 0x01
    3d7c:	85 fd       	sbrc	r24, 5
    3d7e:	18 c0       	rjmp	.+48     	; 0x3db0 <uart_enqueue+0x340>
    3d80:	31 c0       	rjmp	.+98     	; 0x3de4 <uart_enqueue+0x374>
}

inline uint8_t uart_dequeue(USART_t* port){
	uint8_t idx = port_map(port);
	uint16_t oldtail;
	oldtail = uart_tail[idx];
    3d82:	e8 81       	ld	r30, Y
    3d84:	f9 81       	ldd	r31, Y+1	; 0x01
	uart_tail[idx]++;
    3d86:	88 81       	ld	r24, Y
    3d88:	99 81       	ldd	r25, Y+1	; 0x01
    3d8a:	01 96       	adiw	r24, 0x01	; 1
    3d8c:	88 83       	st	Y, r24
    3d8e:	99 83       	std	Y+1, r25	; 0x01
	if (uart_tail[idx] >= MAX_BUFFER_LEN){
    3d90:	88 81       	ld	r24, Y
    3d92:	99 81       	ldd	r25, Y+1	; 0x01
    3d94:	24 e0       	ldi	r18, 0x04	; 4
    3d96:	80 30       	cpi	r24, 0x00	; 0
    3d98:	92 07       	cpc	r25, r18
    3d9a:	10 f0       	brcs	.+4      	; 0x3da0 <uart_enqueue+0x330>
		uart_tail[idx] = 0;
    3d9c:	18 82       	st	Y, r1
    3d9e:	19 82       	std	Y+1, r1	; 0x01
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    3da0:	ee 55       	subi	r30, 0x5E	; 94
    3da2:	fb 4c       	sbci	r31, 0xCB	; 203
    3da4:	80 81       	ld	r24, Z
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
    3da6:	f7 01       	movw	r30, r14
    3da8:	80 83       	st	Z, r24
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    3daa:	81 81       	ldd	r24, Z+1	; 0x01
    3dac:	85 ff       	sbrs	r24, 5
    3dae:	1a c0       	rjmp	.+52     	; 0x3de4 <uart_enqueue+0x374>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    3db0:	f8 01       	movw	r30, r16
    3db2:	80 81       	ld	r24, Z
    3db4:	91 81       	ldd	r25, Z+1	; 0x01
    3db6:	28 81       	ld	r18, Y
    3db8:	39 81       	ldd	r19, Y+1	; 0x01
    3dba:	82 17       	cp	r24, r18
    3dbc:	93 07       	cpc	r25, r19
    3dbe:	38 f0       	brcs	.+14     	; 0x3dce <uart_enqueue+0x35e>
		return (uart_head[idx] - uart_tail[idx]);
    3dc0:	80 81       	ld	r24, Z
    3dc2:	91 81       	ldd	r25, Z+1	; 0x01
    3dc4:	28 81       	ld	r18, Y
    3dc6:	39 81       	ldd	r19, Y+1	; 0x01
    3dc8:	82 1b       	sub	r24, r18
    3dca:	93 0b       	sbc	r25, r19
    3dcc:	09 c0       	rjmp	.+18     	; 0x3de0 <uart_enqueue+0x370>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    3dce:	f8 01       	movw	r30, r16
    3dd0:	80 81       	ld	r24, Z
    3dd2:	91 81       	ldd	r25, Z+1	; 0x01
    3dd4:	28 81       	ld	r18, Y
    3dd6:	39 81       	ldd	r19, Y+1	; 0x01
    3dd8:	80 50       	subi	r24, 0x00	; 0
    3dda:	9c 4f       	sbci	r25, 0xFC	; 252
    3ddc:	82 1b       	sub	r24, r18
    3dde:	93 0b       	sbc	r25, r19
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    3de0:	00 97       	sbiw	r24, 0x00	; 0
    3de2:	79 f6       	brne	.-98     	; 0x3d82 <uart_enqueue+0x312>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    3de4:	f8 01       	movw	r30, r16
    3de6:	80 81       	ld	r24, Z
    3de8:	91 81       	ldd	r25, Z+1	; 0x01
    3dea:	28 81       	ld	r18, Y
    3dec:	39 81       	ldd	r19, Y+1	; 0x01
    3dee:	82 17       	cp	r24, r18
    3df0:	93 07       	cpc	r25, r19
    3df2:	38 f0       	brcs	.+14     	; 0x3e02 <uart_enqueue+0x392>
		return (uart_head[idx] - uart_tail[idx]);
    3df4:	80 81       	ld	r24, Z
    3df6:	91 81       	ldd	r25, Z+1	; 0x01
    3df8:	28 81       	ld	r18, Y
    3dfa:	39 81       	ldd	r19, Y+1	; 0x01
    3dfc:	82 1b       	sub	r24, r18
    3dfe:	93 0b       	sbc	r25, r19
    3e00:	09 c0       	rjmp	.+18     	; 0x3e14 <uart_enqueue+0x3a4>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    3e02:	f8 01       	movw	r30, r16
    3e04:	80 81       	ld	r24, Z
    3e06:	91 81       	ldd	r25, Z+1	; 0x01
    3e08:	28 81       	ld	r18, Y
    3e0a:	39 81       	ldd	r19, Y+1	; 0x01
    3e0c:	80 50       	subi	r24, 0x00	; 0
    3e0e:	9c 4f       	sbci	r25, 0xFC	; 252
    3e10:	82 1b       	sub	r24, r18
    3e12:	93 0b       	sbc	r25, r19
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
	}
	//disable the tx outgoing hardware buffer ready interrupt if we have nothing more to put in it.
	if(uart_count(port)>0) uart_txbuffer_enable(port);
    3e14:	00 97       	sbiw	r24, 0x00	; 0
    3e16:	21 f0       	breq	.+8      	; 0x3e20 <uart_enqueue+0x3b0>
    3e18:	c7 01       	movw	r24, r14
    3e1a:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <uart_txbuffer_enable>
    3e1e:	03 c0       	rjmp	.+6      	; 0x3e26 <uart_enqueue+0x3b6>
	else uart_txbuffer_disable(port);
    3e20:	c7 01       	movw	r24, r14
    3e22:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <uart_txbuffer_disable>
				lcd_flow_type = toSend;
				break;
			default:
				//Payload bytes -- send to LCD
				uart_enqueue(&uctrl, toSend); //echo to data port -- xxx
				if (toSend == 0x0D) {lcd_flow_control = LCD_BUSY;}
    3e26:	fd e0       	ldi	r31, 0x0D	; 13
    3e28:	bf 16       	cp	r11, r31
    3e2a:	11 f4       	brne	.+4      	; 0x3e30 <uart_enqueue+0x3c0>
    3e2c:	30 92 94 24 	sts	0x2494, r3
				port->DATA = toSend;
    3e30:	f6 01       	movw	r30, r12
    3e32:	b0 82       	st	Z, r11
    3e34:	24 c0       	rjmp	.+72     	; 0x3e7e <uart_enqueue+0x40e>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    3e36:	0f 2e       	mov	r0, r31
    3e38:	fc e9       	ldi	r31, 0x9C	; 156
    3e3a:	6f 2e       	mov	r6, r31
    3e3c:	f0 e3       	ldi	r31, 0x30	; 48
    3e3e:	7f 2e       	mov	r7, r31
    3e40:	f0 2d       	mov	r31, r0
    3e42:	0f 2e       	mov	r0, r31
    3e44:	f8 ea       	ldi	r31, 0xA8	; 168
    3e46:	8f 2e       	mov	r8, r31
    3e48:	fc e3       	ldi	r31, 0x3C	; 60
    3e4a:	9f 2e       	mov	r9, r31
    3e4c:	f0 2d       	mov	r31, r0
		uart_tail[idx] = 0;
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    3e4e:	0f 2e       	mov	r0, r31
    3e50:	f2 ea       	ldi	r31, 0xA2	; 162
    3e52:	4f 2e       	mov	r4, r31
    3e54:	f0 e3       	ldi	r31, 0x30	; 48
    3e56:	5f 2e       	mov	r5, r31
    3e58:	f0 2d       	mov	r31, r0
#ifndef UART_DEBUG
	uint8_t idx = port_map(port);
	
	//if (idx==0){uart_enqueue(&uctrl, datain);} //xxx
	
	uart_buffer[idx][uart_head[idx]] = datain;
    3e5a:	0e e9       	ldi	r16, 0x9E	; 158
    3e5c:	10 e3       	ldi	r17, 0x30	; 48
    3e5e:	0f 2e       	mov	r0, r31
    3e60:	fb e2       	ldi	r31, 0x2B	; 43
    3e62:	af 2e       	mov	r10, r31
    3e64:	f0 2d       	mov	r31, r0
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    3e66:	0f 2e       	mov	r0, r31
    3e68:	f0 ea       	ldi	r31, 0xA0	; 160
    3e6a:	ef 2e       	mov	r14, r31
    3e6c:	f8 e0       	ldi	r31, 0x08	; 8
    3e6e:	ff 2e       	mov	r15, r31
    3e70:	f0 2d       	mov	r31, r0
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    3e72:	ca ea       	ldi	r28, 0xAA	; 170
    3e74:	dc e3       	ldi	r29, 0x3C	; 60
				lcd_flow_type = toSend;
				break;
			default:
				//Payload bytes -- send to LCD
				uart_enqueue(&uctrl, toSend); //echo to data port -- xxx
				if (toSend == 0x0D) {lcd_flow_control = LCD_BUSY;}
    3e76:	0f 2e       	mov	r0, r31
    3e78:	fe e4       	ldi	r31, 0x4E	; 78
    3e7a:	3f 2e       	mov	r3, r31
    3e7c:	f0 2d       	mov	r31, r0
}

void inline uart_transmit_lcd(USART_t* port){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0) && (lcd_flow_control == LCD_READY)){
    3e7e:	f6 01       	movw	r30, r12
    3e80:	81 81       	ldd	r24, Z+1	; 0x01
    3e82:	85 ff       	sbrs	r24, 5
    3e84:	4f c0       	rjmp	.+158    	; 0x3f24 <uart_enqueue+0x4b4>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    3e86:	f0 eb       	ldi	r31, 0xB0	; 176
    3e88:	cf 16       	cp	r12, r31
    3e8a:	fb e0       	ldi	r31, 0x0B	; 11
    3e8c:	df 06       	cpc	r13, r31
    3e8e:	61 f0       	breq	.+24     	; 0x3ea8 <uart_enqueue+0x438>
	if (port == &uctrl) {return 1;}
    3e90:	20 ea       	ldi	r18, 0xA0	; 160
    3e92:	c2 16       	cp	r12, r18
    3e94:	28 e0       	ldi	r18, 0x08	; 8
    3e96:	d2 06       	cpc	r13, r18
    3e98:	49 f0       	breq	.+18     	; 0x3eac <uart_enqueue+0x43c>
	if (port == &udata) {return 2;}
    3e9a:	30 eb       	ldi	r19, 0xB0	; 176
    3e9c:	c3 16       	cp	r12, r19
    3e9e:	38 e0       	ldi	r19, 0x08	; 8
    3ea0:	d3 06       	cpc	r13, r19
    3ea2:	31 f4       	brne	.+12     	; 0x3eb0 <uart_enqueue+0x440>
    3ea4:	22 e0       	ldi	r18, 0x02	; 2
    3ea6:	05 c0       	rjmp	.+10     	; 0x3eb2 <uart_enqueue+0x442>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    3ea8:	20 e0       	ldi	r18, 0x00	; 0
    3eaa:	03 c0       	rjmp	.+6      	; 0x3eb2 <uart_enqueue+0x442>
	if (port == &uctrl) {return 1;}
    3eac:	21 e0       	ldi	r18, 0x01	; 1
    3eae:	01 c0       	rjmp	.+2      	; 0x3eb2 <uart_enqueue+0x442>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    3eb0:	20 e0       	ldi	r18, 0x00	; 0
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    3eb2:	30 e0       	ldi	r19, 0x00	; 0
    3eb4:	c9 01       	movw	r24, r18
    3eb6:	88 0f       	add	r24, r24
    3eb8:	99 1f       	adc	r25, r25
    3eba:	f3 01       	movw	r30, r6
    3ebc:	e8 0f       	add	r30, r24
    3ebe:	f9 1f       	adc	r31, r25
    3ec0:	40 81       	ld	r20, Z
    3ec2:	51 81       	ldd	r21, Z+1	; 0x01
    3ec4:	f4 01       	movw	r30, r8
    3ec6:	e8 0f       	add	r30, r24
    3ec8:	f9 1f       	adc	r31, r25
    3eca:	80 81       	ld	r24, Z
    3ecc:	91 81       	ldd	r25, Z+1	; 0x01
    3ece:	48 17       	cp	r20, r24
    3ed0:	59 07       	cpc	r21, r25
    3ed2:	88 f0       	brcs	.+34     	; 0x3ef6 <uart_enqueue+0x486>
		return (uart_head[idx] - uart_tail[idx]);
    3ed4:	22 0f       	add	r18, r18
    3ed6:	33 1f       	adc	r19, r19
    3ed8:	f3 01       	movw	r30, r6
    3eda:	e2 0f       	add	r30, r18
    3edc:	f3 1f       	adc	r31, r19
    3ede:	40 81       	ld	r20, Z
    3ee0:	51 81       	ldd	r21, Z+1	; 0x01
    3ee2:	f4 01       	movw	r30, r8
    3ee4:	e2 0f       	add	r30, r18
    3ee6:	f3 1f       	adc	r31, r19
    3ee8:	80 81       	ld	r24, Z
    3eea:	91 81       	ldd	r25, Z+1	; 0x01
    3eec:	fa 01       	movw	r30, r20
    3eee:	e8 1b       	sub	r30, r24
    3ef0:	f9 0b       	sbc	r31, r25
    3ef2:	cf 01       	movw	r24, r30
    3ef4:	10 c0       	rjmp	.+32     	; 0x3f16 <uart_enqueue+0x4a6>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    3ef6:	22 0f       	add	r18, r18
    3ef8:	33 1f       	adc	r19, r19
    3efa:	f3 01       	movw	r30, r6
    3efc:	e2 0f       	add	r30, r18
    3efe:	f3 1f       	adc	r31, r19
    3f00:	80 81       	ld	r24, Z
    3f02:	91 81       	ldd	r25, Z+1	; 0x01
    3f04:	f4 01       	movw	r30, r8
    3f06:	e2 0f       	add	r30, r18
    3f08:	f3 1f       	adc	r31, r19
    3f0a:	20 81       	ld	r18, Z
    3f0c:	31 81       	ldd	r19, Z+1	; 0x01
    3f0e:	80 50       	subi	r24, 0x00	; 0
    3f10:	9c 4f       	sbci	r25, 0xFC	; 252
    3f12:	82 1b       	sub	r24, r18
    3f14:	93 0b       	sbc	r25, r19
}

void inline uart_transmit_lcd(USART_t* port){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0) && (lcd_flow_control == LCD_READY)){
    3f16:	00 97       	sbiw	r24, 0x00	; 0
    3f18:	29 f0       	breq	.+10     	; 0x3f24 <uart_enqueue+0x4b4>
    3f1a:	80 91 94 24 	lds	r24, 0x2494
    3f1e:	82 35       	cpi	r24, 0x52	; 82
    3f20:	09 f4       	brne	.+2      	; 0x3f24 <uart_enqueue+0x4b4>
    3f22:	f9 cd       	rjmp	.-1038   	; 0x3b16 <uart_enqueue+0xa6>
				if (toSend == 0x0D) {lcd_flow_control = LCD_BUSY;}
				port->DATA = toSend;
				break;
		}				
	}
	uart_txbuffer_disable(port); //implemented this way to prevent periodic stalls that happen when uart_txbuffer isn't disabled quickly enough
    3f24:	c6 01       	movw	r24, r12
    3f26:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <uart_txbuffer_disable>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    3f2a:	f0 eb       	ldi	r31, 0xB0	; 176
    3f2c:	cf 16       	cp	r12, r31
    3f2e:	fb e0       	ldi	r31, 0x0B	; 11
    3f30:	df 06       	cpc	r13, r31
    3f32:	61 f0       	breq	.+24     	; 0x3f4c <uart_enqueue+0x4dc>
	if (port == &uctrl) {return 1;}
    3f34:	20 ea       	ldi	r18, 0xA0	; 160
    3f36:	c2 16       	cp	r12, r18
    3f38:	28 e0       	ldi	r18, 0x08	; 8
    3f3a:	d2 06       	cpc	r13, r18
    3f3c:	49 f0       	breq	.+18     	; 0x3f50 <uart_enqueue+0x4e0>
	if (port == &udata) {return 2;}
    3f3e:	30 eb       	ldi	r19, 0xB0	; 176
    3f40:	c3 16       	cp	r12, r19
    3f42:	38 e0       	ldi	r19, 0x08	; 8
    3f44:	d3 06       	cpc	r13, r19
    3f46:	31 f4       	brne	.+12     	; 0x3f54 <uart_enqueue+0x4e4>
    3f48:	22 e0       	ldi	r18, 0x02	; 2
    3f4a:	05 c0       	rjmp	.+10     	; 0x3f56 <uart_enqueue+0x4e6>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    3f4c:	20 e0       	ldi	r18, 0x00	; 0
    3f4e:	03 c0       	rjmp	.+6      	; 0x3f56 <uart_enqueue+0x4e6>
	if (port == &uctrl) {return 1;}
    3f50:	21 e0       	ldi	r18, 0x01	; 1
    3f52:	01 c0       	rjmp	.+2      	; 0x3f56 <uart_enqueue+0x4e6>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    3f54:	20 e0       	ldi	r18, 0x00	; 0
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    3f56:	30 e0       	ldi	r19, 0x00	; 0
    3f58:	c9 01       	movw	r24, r18
    3f5a:	88 0f       	add	r24, r24
    3f5c:	99 1f       	adc	r25, r25
    3f5e:	fc 01       	movw	r30, r24
    3f60:	e4 56       	subi	r30, 0x64	; 100
    3f62:	ff 4c       	sbci	r31, 0xCF	; 207
    3f64:	40 81       	ld	r20, Z
    3f66:	51 81       	ldd	r21, Z+1	; 0x01
    3f68:	88 55       	subi	r24, 0x58	; 88
    3f6a:	93 4c       	sbci	r25, 0xC3	; 195
    3f6c:	fc 01       	movw	r30, r24
    3f6e:	80 81       	ld	r24, Z
    3f70:	91 81       	ldd	r25, Z+1	; 0x01
    3f72:	48 17       	cp	r20, r24
    3f74:	59 07       	cpc	r21, r25
    3f76:	78 f0       	brcs	.+30     	; 0x3f96 <uart_enqueue+0x526>
		return (uart_head[idx] - uart_tail[idx]);
    3f78:	22 0f       	add	r18, r18
    3f7a:	33 1f       	adc	r19, r19
    3f7c:	f9 01       	movw	r30, r18
    3f7e:	e4 56       	subi	r30, 0x64	; 100
    3f80:	ff 4c       	sbci	r31, 0xCF	; 207
    3f82:	40 81       	ld	r20, Z
    3f84:	51 81       	ldd	r21, Z+1	; 0x01
    3f86:	28 55       	subi	r18, 0x58	; 88
    3f88:	33 4c       	sbci	r19, 0xC3	; 195
    3f8a:	f9 01       	movw	r30, r18
    3f8c:	80 81       	ld	r24, Z
    3f8e:	91 81       	ldd	r25, Z+1	; 0x01
    3f90:	48 1b       	sub	r20, r24
    3f92:	59 0b       	sbc	r21, r25
    3f94:	10 c0       	rjmp	.+32     	; 0x3fb6 <uart_enqueue+0x546>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    3f96:	22 0f       	add	r18, r18
    3f98:	33 1f       	adc	r19, r19
    3f9a:	f9 01       	movw	r30, r18
    3f9c:	e4 56       	subi	r30, 0x64	; 100
    3f9e:	ff 4c       	sbci	r31, 0xCF	; 207
    3fa0:	40 81       	ld	r20, Z
    3fa2:	51 81       	ldd	r21, Z+1	; 0x01
    3fa4:	28 55       	subi	r18, 0x58	; 88
    3fa6:	33 4c       	sbci	r19, 0xC3	; 195
    3fa8:	f9 01       	movw	r30, r18
    3faa:	80 81       	ld	r24, Z
    3fac:	91 81       	ldd	r25, Z+1	; 0x01
    3fae:	40 50       	subi	r20, 0x00	; 0
    3fb0:	5c 4f       	sbci	r21, 0xFC	; 252
    3fb2:	48 1b       	sub	r20, r24
    3fb4:	59 0b       	sbc	r21, r25
				port->DATA = toSend;
				break;
		}				
	}
	uart_txbuffer_disable(port); //implemented this way to prevent periodic stalls that happen when uart_txbuffer isn't disabled quickly enough
	if ((uart_count(port)>0) && (lcd_flow_control == LCD_READY)){ //...something is waiting to go out
    3fb6:	41 15       	cp	r20, r1
    3fb8:	51 05       	cpc	r21, r1
    3fba:	09 f4       	brne	.+2      	; 0x3fbe <uart_enqueue+0x54e>
    3fbc:	ef c0       	rjmp	.+478    	; 0x419c <__stack+0x19d>
    3fbe:	80 91 94 24 	lds	r24, 0x2494
    3fc2:	82 35       	cpi	r24, 0x52	; 82
    3fc4:	09 f0       	breq	.+2      	; 0x3fc8 <uart_enqueue+0x558>
    3fc6:	ea c0       	rjmp	.+468    	; 0x419c <__stack+0x19d>
		uart_txbuffer_enable(port);	
    3fc8:	c6 01       	movw	r24, r12
    3fca:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <uart_txbuffer_enable>
    3fce:	e6 c0       	rjmp	.+460    	; 0x419c <__stack+0x19d>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    3fd0:	f0 eb       	ldi	r31, 0xB0	; 176
    3fd2:	cf 16       	cp	r12, r31
    3fd4:	fb e0       	ldi	r31, 0x0B	; 11
    3fd6:	df 06       	cpc	r13, r31
    3fd8:	61 f0       	breq	.+24     	; 0x3ff2 <uart_enqueue+0x582>
	if (port == &uctrl) {return 1;}
    3fda:	20 ea       	ldi	r18, 0xA0	; 160
    3fdc:	c2 16       	cp	r12, r18
    3fde:	28 e0       	ldi	r18, 0x08	; 8
    3fe0:	d2 06       	cpc	r13, r18
    3fe2:	49 f0       	breq	.+18     	; 0x3ff6 <uart_enqueue+0x586>
	if (port == &udata) {return 2;}
    3fe4:	30 eb       	ldi	r19, 0xB0	; 176
    3fe6:	c3 16       	cp	r12, r19
    3fe8:	38 e0       	ldi	r19, 0x08	; 8
    3fea:	d3 06       	cpc	r13, r19
    3fec:	31 f4       	brne	.+12     	; 0x3ffa <uart_enqueue+0x58a>
    3fee:	22 e0       	ldi	r18, 0x02	; 2
    3ff0:	05 c0       	rjmp	.+10     	; 0x3ffc <uart_enqueue+0x58c>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    3ff2:	20 e0       	ldi	r18, 0x00	; 0
    3ff4:	03 c0       	rjmp	.+6      	; 0x3ffc <uart_enqueue+0x58c>
	if (port == &uctrl) {return 1;}
    3ff6:	21 e0       	ldi	r18, 0x01	; 1
    3ff8:	01 c0       	rjmp	.+2      	; 0x3ffc <uart_enqueue+0x58c>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    3ffa:	20 e0       	ldi	r18, 0x00	; 0
}

inline uint8_t uart_dequeue(USART_t* port){
	uint8_t idx = port_map(port);
	uint16_t oldtail;
	oldtail = uart_tail[idx];
    3ffc:	30 e0       	ldi	r19, 0x00	; 0
    3ffe:	c9 01       	movw	r24, r18
    4000:	88 0f       	add	r24, r24
    4002:	99 1f       	adc	r25, r25
    4004:	fb 01       	movw	r30, r22
    4006:	e8 0f       	add	r30, r24
    4008:	f9 1f       	adc	r31, r25
    400a:	40 81       	ld	r20, Z
    400c:	51 81       	ldd	r21, Z+1	; 0x01
	uart_tail[idx]++;
    400e:	80 81       	ld	r24, Z
    4010:	91 81       	ldd	r25, Z+1	; 0x01
    4012:	01 96       	adiw	r24, 0x01	; 1
    4014:	80 83       	st	Z, r24
    4016:	91 83       	std	Z+1, r25	; 0x01
	if (uart_tail[idx] >= MAX_BUFFER_LEN){
    4018:	80 81       	ld	r24, Z
    401a:	91 81       	ldd	r25, Z+1	; 0x01
    401c:	e4 e0       	ldi	r30, 0x04	; 4
    401e:	80 30       	cpi	r24, 0x00	; 0
    4020:	9e 07       	cpc	r25, r30
    4022:	40 f0       	brcs	.+16     	; 0x4034 <__stack+0x35>
		uart_tail[idx] = 0;
    4024:	c9 01       	movw	r24, r18
    4026:	88 0f       	add	r24, r24
    4028:	99 1f       	adc	r25, r25
    402a:	86 0f       	add	r24, r22
    402c:	97 1f       	adc	r25, r23
    402e:	fc 01       	movw	r30, r24
    4030:	10 82       	st	Z, r1
    4032:	11 82       	std	Z+1, r1	; 0x01
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    4034:	c9 01       	movw	r24, r18
    4036:	98 2f       	mov	r25, r24
    4038:	88 27       	eor	r24, r24
    403a:	99 0f       	add	r25, r25
    403c:	99 0f       	add	r25, r25
    403e:	84 0f       	add	r24, r20
    4040:	95 1f       	adc	r25, r21
    4042:	fe 01       	movw	r30, r28
    4044:	e8 0f       	add	r30, r24
    4046:	f9 1f       	adc	r31, r25
    4048:	80 81       	ld	r24, Z
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
    404a:	f6 01       	movw	r30, r12
    404c:	80 83       	st	Z, r24
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    404e:	81 81       	ldd	r24, Z+1	; 0x01
    4050:	85 fd       	sbrc	r24, 5
    4052:	07 c0       	rjmp	.+14     	; 0x4062 <__stack+0x63>
    4054:	53 c0       	rjmp	.+166    	; 0x40fc <__stack+0xfd>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    4056:	ac e9       	ldi	r26, 0x9C	; 156
    4058:	b0 e3       	ldi	r27, 0x30	; 48
    405a:	68 ea       	ldi	r22, 0xA8	; 168
    405c:	7c e3       	ldi	r23, 0x3C	; 60
		uart_tail[idx] = 0;
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    405e:	c2 ea       	ldi	r28, 0xA2	; 162
    4060:	d0 e3       	ldi	r29, 0x30	; 48
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    4062:	f0 eb       	ldi	r31, 0xB0	; 176
    4064:	cf 16       	cp	r12, r31
    4066:	fb e0       	ldi	r31, 0x0B	; 11
    4068:	df 06       	cpc	r13, r31
    406a:	61 f0       	breq	.+24     	; 0x4084 <__stack+0x85>
	if (port == &uctrl) {return 1;}
    406c:	20 ea       	ldi	r18, 0xA0	; 160
    406e:	c2 16       	cp	r12, r18
    4070:	28 e0       	ldi	r18, 0x08	; 8
    4072:	d2 06       	cpc	r13, r18
    4074:	49 f0       	breq	.+18     	; 0x4088 <__stack+0x89>
	if (port == &udata) {return 2;}
    4076:	30 eb       	ldi	r19, 0xB0	; 176
    4078:	c3 16       	cp	r12, r19
    407a:	38 e0       	ldi	r19, 0x08	; 8
    407c:	d3 06       	cpc	r13, r19
    407e:	31 f4       	brne	.+12     	; 0x408c <__stack+0x8d>
    4080:	22 e0       	ldi	r18, 0x02	; 2
    4082:	05 c0       	rjmp	.+10     	; 0x408e <__stack+0x8f>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    4084:	20 e0       	ldi	r18, 0x00	; 0
    4086:	03 c0       	rjmp	.+6      	; 0x408e <__stack+0x8f>
	if (port == &uctrl) {return 1;}
    4088:	21 e0       	ldi	r18, 0x01	; 1
    408a:	01 c0       	rjmp	.+2      	; 0x408e <__stack+0x8f>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    408c:	20 e0       	ldi	r18, 0x00	; 0
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    408e:	30 e0       	ldi	r19, 0x00	; 0
    4090:	c9 01       	movw	r24, r18
    4092:	88 0f       	add	r24, r24
    4094:	99 1f       	adc	r25, r25
    4096:	fd 01       	movw	r30, r26
    4098:	e8 0f       	add	r30, r24
    409a:	f9 1f       	adc	r31, r25
    409c:	40 81       	ld	r20, Z
    409e:	51 81       	ldd	r21, Z+1	; 0x01
    40a0:	fb 01       	movw	r30, r22
    40a2:	e8 0f       	add	r30, r24
    40a4:	f9 1f       	adc	r31, r25
    40a6:	80 81       	ld	r24, Z
    40a8:	91 81       	ldd	r25, Z+1	; 0x01
    40aa:	48 17       	cp	r20, r24
    40ac:	59 07       	cpc	r21, r25
    40ae:	88 f0       	brcs	.+34     	; 0x40d2 <__stack+0xd3>
		return (uart_head[idx] - uart_tail[idx]);
    40b0:	22 0f       	add	r18, r18
    40b2:	33 1f       	adc	r19, r19
    40b4:	fd 01       	movw	r30, r26
    40b6:	e2 0f       	add	r30, r18
    40b8:	f3 1f       	adc	r31, r19
    40ba:	40 81       	ld	r20, Z
    40bc:	51 81       	ldd	r21, Z+1	; 0x01
    40be:	fb 01       	movw	r30, r22
    40c0:	e2 0f       	add	r30, r18
    40c2:	f3 1f       	adc	r31, r19
    40c4:	80 81       	ld	r24, Z
    40c6:	91 81       	ldd	r25, Z+1	; 0x01
    40c8:	fa 01       	movw	r30, r20
    40ca:	e8 1b       	sub	r30, r24
    40cc:	f9 0b       	sbc	r31, r25
    40ce:	cf 01       	movw	r24, r30
    40d0:	12 c0       	rjmp	.+36     	; 0x40f6 <__stack+0xf7>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    40d2:	c9 01       	movw	r24, r18
    40d4:	88 0f       	add	r24, r24
    40d6:	99 1f       	adc	r25, r25
    40d8:	fd 01       	movw	r30, r26
    40da:	e8 0f       	add	r30, r24
    40dc:	f9 1f       	adc	r31, r25
    40de:	40 81       	ld	r20, Z
    40e0:	51 81       	ldd	r21, Z+1	; 0x01
    40e2:	fb 01       	movw	r30, r22
    40e4:	e8 0f       	add	r30, r24
    40e6:	f9 1f       	adc	r31, r25
    40e8:	20 81       	ld	r18, Z
    40ea:	31 81       	ldd	r19, Z+1	; 0x01
    40ec:	ca 01       	movw	r24, r20
    40ee:	80 50       	subi	r24, 0x00	; 0
    40f0:	9c 4f       	sbci	r25, 0xFC	; 252
    40f2:	82 1b       	sub	r24, r18
    40f4:	93 0b       	sbc	r25, r19
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    40f6:	00 97       	sbiw	r24, 0x00	; 0
    40f8:	09 f0       	breq	.+2      	; 0x40fc <__stack+0xfd>
    40fa:	6a cf       	rjmp	.-300    	; 0x3fd0 <uart_enqueue+0x560>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    40fc:	f0 eb       	ldi	r31, 0xB0	; 176
    40fe:	cf 16       	cp	r12, r31
    4100:	fb e0       	ldi	r31, 0x0B	; 11
    4102:	df 06       	cpc	r13, r31
    4104:	61 f0       	breq	.+24     	; 0x411e <__stack+0x11f>
	if (port == &uctrl) {return 1;}
    4106:	20 ea       	ldi	r18, 0xA0	; 160
    4108:	c2 16       	cp	r12, r18
    410a:	28 e0       	ldi	r18, 0x08	; 8
    410c:	d2 06       	cpc	r13, r18
    410e:	49 f0       	breq	.+18     	; 0x4122 <__stack+0x123>
	if (port == &udata) {return 2;}
    4110:	30 eb       	ldi	r19, 0xB0	; 176
    4112:	c3 16       	cp	r12, r19
    4114:	38 e0       	ldi	r19, 0x08	; 8
    4116:	d3 06       	cpc	r13, r19
    4118:	31 f4       	brne	.+12     	; 0x4126 <__stack+0x127>
    411a:	22 e0       	ldi	r18, 0x02	; 2
    411c:	05 c0       	rjmp	.+10     	; 0x4128 <__stack+0x129>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    411e:	20 e0       	ldi	r18, 0x00	; 0
    4120:	03 c0       	rjmp	.+6      	; 0x4128 <__stack+0x129>
	if (port == &uctrl) {return 1;}
    4122:	21 e0       	ldi	r18, 0x01	; 1
    4124:	01 c0       	rjmp	.+2      	; 0x4128 <__stack+0x129>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    4126:	20 e0       	ldi	r18, 0x00	; 0
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    4128:	30 e0       	ldi	r19, 0x00	; 0
    412a:	c9 01       	movw	r24, r18
    412c:	88 0f       	add	r24, r24
    412e:	99 1f       	adc	r25, r25
    4130:	fc 01       	movw	r30, r24
    4132:	e4 56       	subi	r30, 0x64	; 100
    4134:	ff 4c       	sbci	r31, 0xCF	; 207
    4136:	40 81       	ld	r20, Z
    4138:	51 81       	ldd	r21, Z+1	; 0x01
    413a:	88 55       	subi	r24, 0x58	; 88
    413c:	93 4c       	sbci	r25, 0xC3	; 195
    413e:	fc 01       	movw	r30, r24
    4140:	80 81       	ld	r24, Z
    4142:	91 81       	ldd	r25, Z+1	; 0x01
    4144:	48 17       	cp	r20, r24
    4146:	59 07       	cpc	r21, r25
    4148:	78 f0       	brcs	.+30     	; 0x4168 <__stack+0x169>
		return (uart_head[idx] - uart_tail[idx]);
    414a:	22 0f       	add	r18, r18
    414c:	33 1f       	adc	r19, r19
    414e:	f9 01       	movw	r30, r18
    4150:	e4 56       	subi	r30, 0x64	; 100
    4152:	ff 4c       	sbci	r31, 0xCF	; 207
    4154:	40 81       	ld	r20, Z
    4156:	51 81       	ldd	r21, Z+1	; 0x01
    4158:	28 55       	subi	r18, 0x58	; 88
    415a:	33 4c       	sbci	r19, 0xC3	; 195
    415c:	f9 01       	movw	r30, r18
    415e:	80 81       	ld	r24, Z
    4160:	91 81       	ldd	r25, Z+1	; 0x01
    4162:	48 1b       	sub	r20, r24
    4164:	59 0b       	sbc	r21, r25
    4166:	10 c0       	rjmp	.+32     	; 0x4188 <__stack+0x189>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    4168:	22 0f       	add	r18, r18
    416a:	33 1f       	adc	r19, r19
    416c:	f9 01       	movw	r30, r18
    416e:	e4 56       	subi	r30, 0x64	; 100
    4170:	ff 4c       	sbci	r31, 0xCF	; 207
    4172:	40 81       	ld	r20, Z
    4174:	51 81       	ldd	r21, Z+1	; 0x01
    4176:	28 55       	subi	r18, 0x58	; 88
    4178:	33 4c       	sbci	r19, 0xC3	; 195
    417a:	f9 01       	movw	r30, r18
    417c:	80 81       	ld	r24, Z
    417e:	91 81       	ldd	r25, Z+1	; 0x01
    4180:	40 50       	subi	r20, 0x00	; 0
    4182:	5c 4f       	sbci	r21, 0xFC	; 252
    4184:	48 1b       	sub	r20, r24
    4186:	59 0b       	sbc	r21, r25
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
	}
	//disable the tx outgoing hardware buffer ready interrupt if we have nothing more to put in it.
	if(uart_count(port)>0) uart_txbuffer_enable(port);
    4188:	41 15       	cp	r20, r1
    418a:	51 05       	cpc	r21, r1
    418c:	21 f0       	breq	.+8      	; 0x4196 <__stack+0x197>
    418e:	c6 01       	movw	r24, r12
    4190:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <uart_txbuffer_enable>
    4194:	03 c0       	rjmp	.+6      	; 0x419c <__stack+0x19d>
	else uart_txbuffer_disable(port);
    4196:	c6 01       	movw	r24, r12
    4198:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <uart_txbuffer_disable>
	}
	if (idx == 0){uart_transmit_lcd(port);} //start the transmission process.
	else {uart_transmit(port);} //start the transmission process.}	
	
#endif
}
    419c:	df 91       	pop	r29
    419e:	cf 91       	pop	r28
    41a0:	1f 91       	pop	r17
    41a2:	0f 91       	pop	r16
    41a4:	ff 90       	pop	r15
    41a6:	ef 90       	pop	r14
    41a8:	df 90       	pop	r13
    41aa:	cf 90       	pop	r12
    41ac:	bf 90       	pop	r11
    41ae:	af 90       	pop	r10
    41b0:	9f 90       	pop	r9
    41b2:	8f 90       	pop	r8
    41b4:	7f 90       	pop	r7
    41b6:	6f 90       	pop	r6
    41b8:	5f 90       	pop	r5
    41ba:	4f 90       	pop	r4
    41bc:	3f 90       	pop	r3
    41be:	08 95       	ret

000041c0 <uart_dequeue>:
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    41c0:	2b e0       	ldi	r18, 0x0B	; 11
    41c2:	80 3b       	cpi	r24, 0xB0	; 176
    41c4:	92 07       	cpc	r25, r18
    41c6:	51 f0       	breq	.+20     	; 0x41dc <uart_dequeue+0x1c>
	if (port == &uctrl) {return 1;}
    41c8:	68 e0       	ldi	r22, 0x08	; 8
    41ca:	80 3a       	cpi	r24, 0xA0	; 160
    41cc:	96 07       	cpc	r25, r22
    41ce:	41 f0       	breq	.+16     	; 0x41e0 <uart_dequeue+0x20>
	if (port == &udata) {return 2;}
    41d0:	28 e0       	ldi	r18, 0x08	; 8
    41d2:	80 3b       	cpi	r24, 0xB0	; 176
    41d4:	92 07       	cpc	r25, r18
    41d6:	31 f4       	brne	.+12     	; 0x41e4 <uart_dequeue+0x24>
    41d8:	22 e0       	ldi	r18, 0x02	; 2
    41da:	05 c0       	rjmp	.+10     	; 0x41e6 <uart_dequeue+0x26>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    41dc:	20 e0       	ldi	r18, 0x00	; 0
    41de:	03 c0       	rjmp	.+6      	; 0x41e6 <uart_dequeue+0x26>
	if (port == &uctrl) {return 1;}
    41e0:	21 e0       	ldi	r18, 0x01	; 1
    41e2:	01 c0       	rjmp	.+2      	; 0x41e6 <uart_dequeue+0x26>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    41e4:	20 e0       	ldi	r18, 0x00	; 0
}

inline uint8_t uart_dequeue(USART_t* port){
	uint8_t idx = port_map(port);
	uint16_t oldtail;
	oldtail = uart_tail[idx];
    41e6:	30 e0       	ldi	r19, 0x00	; 0
    41e8:	f9 01       	movw	r30, r18
    41ea:	ee 0f       	add	r30, r30
    41ec:	ff 1f       	adc	r31, r31
    41ee:	e8 55       	subi	r30, 0x58	; 88
    41f0:	f3 4c       	sbci	r31, 0xC3	; 195
    41f2:	40 81       	ld	r20, Z
    41f4:	51 81       	ldd	r21, Z+1	; 0x01
	uart_tail[idx]++;
    41f6:	80 81       	ld	r24, Z
    41f8:	91 81       	ldd	r25, Z+1	; 0x01
    41fa:	01 96       	adiw	r24, 0x01	; 1
    41fc:	80 83       	st	Z, r24
    41fe:	91 83       	std	Z+1, r25	; 0x01
	if (uart_tail[idx] >= MAX_BUFFER_LEN){
    4200:	80 81       	ld	r24, Z
    4202:	91 81       	ldd	r25, Z+1	; 0x01
    4204:	64 e0       	ldi	r22, 0x04	; 4
    4206:	80 30       	cpi	r24, 0x00	; 0
    4208:	96 07       	cpc	r25, r22
    420a:	38 f0       	brcs	.+14     	; 0x421a <uart_dequeue+0x5a>
		uart_tail[idx] = 0;
    420c:	f9 01       	movw	r30, r18
    420e:	ee 0f       	add	r30, r30
    4210:	ff 1f       	adc	r31, r31
    4212:	e8 55       	subi	r30, 0x58	; 88
    4214:	f3 4c       	sbci	r31, 0xC3	; 195
    4216:	10 82       	st	Z, r1
    4218:	11 82       	std	Z+1, r1	; 0x01
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    421a:	f9 01       	movw	r30, r18
    421c:	fe 2f       	mov	r31, r30
    421e:	ee 27       	eor	r30, r30
    4220:	ff 0f       	add	r31, r31
    4222:	ff 0f       	add	r31, r31
    4224:	4e 0f       	add	r20, r30
    4226:	5f 1f       	adc	r21, r31
    4228:	fa 01       	movw	r30, r20
    422a:	ee 55       	subi	r30, 0x5E	; 94
    422c:	ff 4c       	sbci	r31, 0xCF	; 207
    422e:	80 81       	ld	r24, Z
}
    4230:	08 95       	ret

00004232 <init_uart_ibuffer>:
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    4232:	2b e0       	ldi	r18, 0x0B	; 11
    4234:	80 3b       	cpi	r24, 0xB0	; 176
    4236:	92 07       	cpc	r25, r18
    4238:	51 f0       	breq	.+20     	; 0x424e <init_uart_ibuffer+0x1c>
	if (port == &uctrl) {return 1;}
    423a:	e8 e0       	ldi	r30, 0x08	; 8
    423c:	80 3a       	cpi	r24, 0xA0	; 160
    423e:	9e 07       	cpc	r25, r30
    4240:	41 f0       	breq	.+16     	; 0x4252 <init_uart_ibuffer+0x20>
	if (port == &udata) {return 2;}
    4242:	f8 e0       	ldi	r31, 0x08	; 8
    4244:	80 3b       	cpi	r24, 0xB0	; 176
    4246:	9f 07       	cpc	r25, r31
    4248:	31 f4       	brne	.+12     	; 0x4256 <init_uart_ibuffer+0x24>
    424a:	82 e0       	ldi	r24, 0x02	; 2
    424c:	05 c0       	rjmp	.+10     	; 0x4258 <init_uart_ibuffer+0x26>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    424e:	80 e0       	ldi	r24, 0x00	; 0
    4250:	03 c0       	rjmp	.+6      	; 0x4258 <init_uart_ibuffer+0x26>
	if (port == &uctrl) {return 1;}
    4252:	81 e0       	ldi	r24, 0x01	; 1
    4254:	01 c0       	rjmp	.+2      	; 0x4258 <init_uart_ibuffer+0x26>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    4256:	80 e0       	ldi	r24, 0x00	; 0
	No protection is provided for buffer overflow! Be careful! */
//***************************************************

void init_uart_ibuffer(USART_t* port){
	uint8_t idx = port_map(port);
	uart_ihead[idx] = 0;
    4258:	90 e0       	ldi	r25, 0x00	; 0
    425a:	88 0f       	add	r24, r24
    425c:	99 1f       	adc	r25, r25
    425e:	fc 01       	movw	r30, r24
    4260:	ee 55       	subi	r30, 0x5E	; 94
    4262:	f3 4c       	sbci	r31, 0xC3	; 195
    4264:	10 82       	st	Z, r1
    4266:	11 82       	std	Z+1, r1	; 0x01
	uart_itail[idx] = 0;
    4268:	8a 56       	subi	r24, 0x6A	; 106
    426a:	9b 4d       	sbci	r25, 0xDB	; 219
    426c:	fc 01       	movw	r30, r24
    426e:	10 82       	st	Z, r1
    4270:	11 82       	std	Z+1, r1	; 0x01
}
    4272:	08 95       	ret

00004274 <init_uart_buffer>:
//** [PORT AGNOSTIC CODE]
//************************************************************************
//************************************************************************

//MAKE SURE TO INIT UART FIRST
void init_uart_buffer(USART_t* port){
    4274:	cf 93       	push	r28
    4276:	df 93       	push	r29
    4278:	ec 01       	movw	r28, r24
	//Setup data buffers
		init_uart_obuffer(port);
    427a:	0e 94 c1 18 	call	0x3182	; 0x3182 <init_uart_obuffer>
		init_uart_ibuffer(port);
    427e:	ce 01       	movw	r24, r28
    4280:	0e 94 19 21 	call	0x4232	; 0x4232 <init_uart_ibuffer>
	//Enable Receive and Transmit interrupts
		uart_rxbuffer_enable(port);
    4284:	ce 01       	movw	r24, r28
    4286:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <uart_rxbuffer_enable>
		uart_txbuffer_enable(port);
    428a:	ce 01       	movw	r24, r28
    428c:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <uart_txbuffer_enable>
}
    4290:	df 91       	pop	r29
    4292:	cf 91       	pop	r28
    4294:	08 95       	ret

00004296 <init_uart_buffers>:
SIGNAL(USARTF1_DRE_vect) {uart_transmit_lcd(&ulcd);}//TX Interrupt
SIGNAL(USARTF1_RXC_vect) {uart_receive_lcd(&ulcd);} //RX Interrupt
	
//MAKE SURE TO INIT UART FIRST
void init_uart_buffers(){
	init_uart_buffer(&uctrl);
    4296:	80 ea       	ldi	r24, 0xA0	; 160
    4298:	98 e0       	ldi	r25, 0x08	; 8
    429a:	0e 94 3a 21 	call	0x4274	; 0x4274 <init_uart_buffer>
	init_uart_buffer(&udata);
    429e:	80 eb       	ldi	r24, 0xB0	; 176
    42a0:	98 e0       	ldi	r25, 0x08	; 8
    42a2:	0e 94 3a 21 	call	0x4274	; 0x4274 <init_uart_buffer>
	init_uart_buffer(&ulcd);
    42a6:	80 eb       	ldi	r24, 0xB0	; 176
    42a8:	9b e0       	ldi	r25, 0x0B	; 11
    42aa:	0e 94 3a 21 	call	0x4274	; 0x4274 <init_uart_buffer>
}	
    42ae:	08 95       	ret

000042b0 <uart_icount>:
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    42b0:	2b e0       	ldi	r18, 0x0B	; 11
    42b2:	80 3b       	cpi	r24, 0xB0	; 176
    42b4:	92 07       	cpc	r25, r18
    42b6:	51 f0       	breq	.+20     	; 0x42cc <uart_icount+0x1c>
	if (port == &uctrl) {return 1;}
    42b8:	e8 e0       	ldi	r30, 0x08	; 8
    42ba:	80 3a       	cpi	r24, 0xA0	; 160
    42bc:	9e 07       	cpc	r25, r30
    42be:	41 f0       	breq	.+16     	; 0x42d0 <uart_icount+0x20>
	if (port == &udata) {return 2;}
    42c0:	f8 e0       	ldi	r31, 0x08	; 8
    42c2:	80 3b       	cpi	r24, 0xB0	; 176
    42c4:	9f 07       	cpc	r25, r31
    42c6:	31 f4       	brne	.+12     	; 0x42d4 <uart_icount+0x24>
    42c8:	82 e0       	ldi	r24, 0x02	; 2
    42ca:	05 c0       	rjmp	.+10     	; 0x42d6 <uart_icount+0x26>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    42cc:	80 e0       	ldi	r24, 0x00	; 0
    42ce:	03 c0       	rjmp	.+6      	; 0x42d6 <uart_icount+0x26>
	if (port == &uctrl) {return 1;}
    42d0:	81 e0       	ldi	r24, 0x01	; 1
    42d2:	01 c0       	rjmp	.+2      	; 0x42d6 <uart_icount+0x26>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    42d4:	80 e0       	ldi	r24, 0x00	; 0
	uart_itail[idx] = 0;
}

inline uint16_t uart_icount(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_ihead[idx] >= uart_itail[idx]){	
    42d6:	90 e0       	ldi	r25, 0x00	; 0
    42d8:	9c 01       	movw	r18, r24
    42da:	22 0f       	add	r18, r18
    42dc:	33 1f       	adc	r19, r19
    42de:	f9 01       	movw	r30, r18
    42e0:	ee 55       	subi	r30, 0x5E	; 94
    42e2:	f3 4c       	sbci	r31, 0xC3	; 195
    42e4:	40 81       	ld	r20, Z
    42e6:	51 81       	ldd	r21, Z+1	; 0x01
    42e8:	2a 56       	subi	r18, 0x6A	; 106
    42ea:	3b 4d       	sbci	r19, 0xDB	; 219
    42ec:	f9 01       	movw	r30, r18
    42ee:	20 81       	ld	r18, Z
    42f0:	31 81       	ldd	r19, Z+1	; 0x01
    42f2:	42 17       	cp	r20, r18
    42f4:	53 07       	cpc	r21, r19
    42f6:	80 f0       	brcs	.+32     	; 0x4318 <uart_icount+0x68>
		return (uart_ihead[idx] - uart_itail[idx]);
    42f8:	9c 01       	movw	r18, r24
    42fa:	22 0f       	add	r18, r18
    42fc:	33 1f       	adc	r19, r19
    42fe:	f9 01       	movw	r30, r18
    4300:	ee 55       	subi	r30, 0x5E	; 94
    4302:	f3 4c       	sbci	r31, 0xC3	; 195
    4304:	80 81       	ld	r24, Z
    4306:	91 81       	ldd	r25, Z+1	; 0x01
    4308:	2a 56       	subi	r18, 0x6A	; 106
    430a:	3b 4d       	sbci	r19, 0xDB	; 219
    430c:	f9 01       	movw	r30, r18
    430e:	20 81       	ld	r18, Z
    4310:	31 81       	ldd	r19, Z+1	; 0x01
    4312:	82 1b       	sub	r24, r18
    4314:	93 0b       	sbc	r25, r19
    4316:	08 95       	ret
	}
	else {
		return ((MAX_IBUFFER_LEN-uart_itail[idx])+uart_ihead[idx]);
    4318:	9c 01       	movw	r18, r24
    431a:	22 0f       	add	r18, r18
    431c:	33 1f       	adc	r19, r19
    431e:	f9 01       	movw	r30, r18
    4320:	ee 55       	subi	r30, 0x5E	; 94
    4322:	f3 4c       	sbci	r31, 0xC3	; 195
    4324:	40 81       	ld	r20, Z
    4326:	51 81       	ldd	r21, Z+1	; 0x01
    4328:	2a 56       	subi	r18, 0x6A	; 106
    432a:	3b 4d       	sbci	r19, 0xDB	; 219
    432c:	f9 01       	movw	r30, r18
    432e:	20 81       	ld	r18, Z
    4330:	31 81       	ldd	r19, Z+1	; 0x01
    4332:	ca 01       	movw	r24, r20
    4334:	80 50       	subi	r24, 0x00	; 0
    4336:	9c 4f       	sbci	r25, 0xFC	; 252
    4338:	82 1b       	sub	r24, r18
    433a:	93 0b       	sbc	r25, r19
	}
}
    433c:	08 95       	ret

0000433e <uart_ienqueue>:
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    433e:	2b e0       	ldi	r18, 0x0B	; 11
    4340:	80 3b       	cpi	r24, 0xB0	; 176
    4342:	92 07       	cpc	r25, r18
    4344:	51 f0       	breq	.+20     	; 0x435a <uart_ienqueue+0x1c>
	if (port == &uctrl) {return 1;}
    4346:	28 e0       	ldi	r18, 0x08	; 8
    4348:	80 3a       	cpi	r24, 0xA0	; 160
    434a:	92 07       	cpc	r25, r18
    434c:	41 f0       	breq	.+16     	; 0x435e <uart_ienqueue+0x20>
	if (port == &udata) {return 2;}
    434e:	28 e0       	ldi	r18, 0x08	; 8
    4350:	80 3b       	cpi	r24, 0xB0	; 176
    4352:	92 07       	cpc	r25, r18
    4354:	31 f4       	brne	.+12     	; 0x4362 <uart_ienqueue+0x24>
    4356:	42 e0       	ldi	r20, 0x02	; 2
    4358:	05 c0       	rjmp	.+10     	; 0x4364 <uart_ienqueue+0x26>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    435a:	40 e0       	ldi	r20, 0x00	; 0
    435c:	03 c0       	rjmp	.+6      	; 0x4364 <uart_ienqueue+0x26>
	if (port == &uctrl) {return 1;}
    435e:	41 e0       	ldi	r20, 0x01	; 1
    4360:	01 c0       	rjmp	.+2      	; 0x4364 <uart_ienqueue+0x26>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    4362:	40 e0       	ldi	r20, 0x00	; 0
	}
}

inline void uart_ienqueue(USART_t* port, uint8_t datain){
	uint8_t idx = port_map(port);
	uart_ibuffer[idx][uart_ihead[idx]] = datain;
    4364:	50 e0       	ldi	r21, 0x00	; 0
    4366:	fa 01       	movw	r30, r20
    4368:	ee 0f       	add	r30, r30
    436a:	ff 1f       	adc	r31, r31
    436c:	ee 55       	subi	r30, 0x5E	; 94
    436e:	f3 4c       	sbci	r31, 0xC3	; 195
    4370:	80 81       	ld	r24, Z
    4372:	91 81       	ldd	r25, Z+1	; 0x01
    4374:	9a 01       	movw	r18, r20
    4376:	32 2f       	mov	r19, r18
    4378:	22 27       	eor	r18, r18
    437a:	33 0f       	add	r19, r19
    437c:	33 0f       	add	r19, r19
    437e:	82 0f       	add	r24, r18
    4380:	93 1f       	adc	r25, r19
    4382:	dc 01       	movw	r26, r24
    4384:	a4 56       	subi	r26, 0x64	; 100
    4386:	bb 4d       	sbci	r27, 0xDB	; 219
    4388:	6c 93       	st	X, r22
	uart_ihead[idx]++;
    438a:	80 81       	ld	r24, Z
    438c:	91 81       	ldd	r25, Z+1	; 0x01
    438e:	01 96       	adiw	r24, 0x01	; 1
    4390:	80 83       	st	Z, r24
    4392:	91 83       	std	Z+1, r25	; 0x01
	if (uart_ihead[idx] >= MAX_IBUFFER_LEN){
    4394:	80 81       	ld	r24, Z
    4396:	91 81       	ldd	r25, Z+1	; 0x01
    4398:	24 e0       	ldi	r18, 0x04	; 4
    439a:	80 30       	cpi	r24, 0x00	; 0
    439c:	92 07       	cpc	r25, r18
    439e:	38 f0       	brcs	.+14     	; 0x43ae <uart_ienqueue+0x70>
		uart_ihead[idx] = 0;
    43a0:	fa 01       	movw	r30, r20
    43a2:	ee 0f       	add	r30, r30
    43a4:	ff 1f       	adc	r31, r31
    43a6:	ee 55       	subi	r30, 0x5E	; 94
    43a8:	f3 4c       	sbci	r31, 0xC3	; 195
    43aa:	10 82       	st	Z, r1
    43ac:	11 82       	std	Z+1, r1	; 0x01
    43ae:	08 95       	ret

000043b0 <uart_idequeue>:
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    43b0:	2b e0       	ldi	r18, 0x0B	; 11
    43b2:	80 3b       	cpi	r24, 0xB0	; 176
    43b4:	92 07       	cpc	r25, r18
    43b6:	51 f0       	breq	.+20     	; 0x43cc <uart_idequeue+0x1c>
	if (port == &uctrl) {return 1;}
    43b8:	68 e0       	ldi	r22, 0x08	; 8
    43ba:	80 3a       	cpi	r24, 0xA0	; 160
    43bc:	96 07       	cpc	r25, r22
    43be:	41 f0       	breq	.+16     	; 0x43d0 <uart_idequeue+0x20>
	if (port == &udata) {return 2;}
    43c0:	28 e0       	ldi	r18, 0x08	; 8
    43c2:	80 3b       	cpi	r24, 0xB0	; 176
    43c4:	92 07       	cpc	r25, r18
    43c6:	31 f4       	brne	.+12     	; 0x43d4 <uart_idequeue+0x24>
    43c8:	22 e0       	ldi	r18, 0x02	; 2
    43ca:	05 c0       	rjmp	.+10     	; 0x43d6 <uart_idequeue+0x26>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    43cc:	20 e0       	ldi	r18, 0x00	; 0
    43ce:	03 c0       	rjmp	.+6      	; 0x43d6 <uart_idequeue+0x26>
	if (port == &uctrl) {return 1;}
    43d0:	21 e0       	ldi	r18, 0x01	; 1
    43d2:	01 c0       	rjmp	.+2      	; 0x43d6 <uart_idequeue+0x26>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    43d4:	20 e0       	ldi	r18, 0x00	; 0

//internal implementation of peek and dequeue
inline uint8_t _uart_idequeue(USART_t* port, uint8_t peek){
	uint8_t idx = port_map(port);
	uint16_t oldtail;
	oldtail = uart_itail[idx];
    43d6:	30 e0       	ldi	r19, 0x00	; 0
    43d8:	f9 01       	movw	r30, r18
    43da:	ee 0f       	add	r30, r30
    43dc:	ff 1f       	adc	r31, r31
    43de:	ea 56       	subi	r30, 0x6A	; 106
    43e0:	fb 4d       	sbci	r31, 0xDB	; 219
    43e2:	40 81       	ld	r20, Z
    43e4:	51 81       	ldd	r21, Z+1	; 0x01
	uart_itail[idx]++;
    43e6:	80 81       	ld	r24, Z
    43e8:	91 81       	ldd	r25, Z+1	; 0x01
    43ea:	01 96       	adiw	r24, 0x01	; 1
    43ec:	80 83       	st	Z, r24
    43ee:	91 83       	std	Z+1, r25	; 0x01
	if (uart_itail[idx] >= MAX_IBUFFER_LEN){
    43f0:	80 81       	ld	r24, Z
    43f2:	91 81       	ldd	r25, Z+1	; 0x01
    43f4:	64 e0       	ldi	r22, 0x04	; 4
    43f6:	80 30       	cpi	r24, 0x00	; 0
    43f8:	96 07       	cpc	r25, r22
    43fa:	38 f0       	brcs	.+14     	; 0x440a <uart_idequeue+0x5a>
		uart_itail[idx] = 0;
    43fc:	f9 01       	movw	r30, r18
    43fe:	ee 0f       	add	r30, r30
    4400:	ff 1f       	adc	r31, r31
    4402:	ea 56       	subi	r30, 0x6A	; 106
    4404:	fb 4d       	sbci	r31, 0xDB	; 219
    4406:	10 82       	st	Z, r1
    4408:	11 82       	std	Z+1, r1	; 0x01
	}
	if (peek){uart_itail[idx] = oldtail;}
	return uart_ibuffer[idx][oldtail];
    440a:	f9 01       	movw	r30, r18
    440c:	fe 2f       	mov	r31, r30
    440e:	ee 27       	eor	r30, r30
    4410:	ff 0f       	add	r31, r31
    4412:	ff 0f       	add	r31, r31
    4414:	4e 0f       	add	r20, r30
    4416:	5f 1f       	adc	r21, r31
    4418:	fa 01       	movw	r30, r20
    441a:	e4 56       	subi	r30, 0x64	; 100
    441c:	fb 4d       	sbci	r31, 0xDB	; 219
    441e:	80 81       	ld	r24, Z
}

inline uint8_t uart_idequeue(USART_t* port){
	return _uart_idequeue(port, false);
}
    4420:	08 95       	ret

00004422 <service_uart_buffer>:

inline void service_uart_buffer(){
    4422:	3f 92       	push	r3
    4424:	4f 92       	push	r4
    4426:	5f 92       	push	r5
    4428:	6f 92       	push	r6
    442a:	7f 92       	push	r7
    442c:	8f 92       	push	r8
    442e:	9f 92       	push	r9
    4430:	af 92       	push	r10
    4432:	bf 92       	push	r11
    4434:	cf 92       	push	r12
    4436:	df 92       	push	r13
    4438:	ef 92       	push	r14
    443a:	ff 92       	push	r15
    443c:	0f 93       	push	r16
    443e:	1f 93       	push	r17
    4440:	cf 93       	push	r28
    4442:	df 93       	push	r29
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    4444:	20 91 9c 30 	lds	r18, 0x309C
    4448:	30 91 9d 30 	lds	r19, 0x309D
    444c:	80 91 a8 3c 	lds	r24, 0x3CA8
    4450:	90 91 a9 3c 	lds	r25, 0x3CA9
    4454:	28 17       	cp	r18, r24
    4456:	39 07       	cpc	r19, r25
    4458:	58 f0       	brcs	.+22     	; 0x4470 <service_uart_buffer+0x4e>
		return (uart_head[idx] - uart_tail[idx]);
    445a:	80 91 9c 30 	lds	r24, 0x309C
    445e:	90 91 9d 30 	lds	r25, 0x309D
    4462:	20 91 a8 3c 	lds	r18, 0x3CA8
    4466:	30 91 a9 3c 	lds	r19, 0x3CA9
    446a:	82 1b       	sub	r24, r18
    446c:	93 0b       	sbc	r25, r19
    446e:	0c c0       	rjmp	.+24     	; 0x4488 <service_uart_buffer+0x66>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    4470:	80 91 9c 30 	lds	r24, 0x309C
    4474:	90 91 9d 30 	lds	r25, 0x309D
    4478:	20 91 a8 3c 	lds	r18, 0x3CA8
    447c:	30 91 a9 3c 	lds	r19, 0x3CA9
    4480:	80 50       	subi	r24, 0x00	; 0
    4482:	9c 4f       	sbci	r25, 0xFC	; 252
    4484:	82 1b       	sub	r24, r18
    4486:	93 0b       	sbc	r25, r19
	return _uart_idequeue(port, false);
}

inline void service_uart_buffer(){
	//Resume transmission attempt if outgoing data still pending -- we do this so we can don't block the CPU for too long waiting for flow-control
	if (uart_count(&ulcd)>0){uart_transmit_lcd(&ulcd);}
    4488:	00 97       	sbiw	r24, 0x00	; 0
    448a:	09 f4       	brne	.+2      	; 0x448e <service_uart_buffer+0x6c>
    448c:	10 c2       	rjmp	.+1056   	; 0x48ae <service_uart_buffer+0x48c>
    448e:	8d c1       	rjmp	.+794    	; 0x47aa <service_uart_buffer+0x388>
}

inline uint8_t uart_dequeue(USART_t* port){
	uint8_t idx = port_map(port);
	uint16_t oldtail;
	oldtail = uart_tail[idx];
    4490:	d5 01       	movw	r26, r10
    4492:	ed 91       	ld	r30, X+
    4494:	fc 91       	ld	r31, X
    4496:	11 97       	sbiw	r26, 0x01	; 1
	uart_tail[idx]++;
    4498:	8d 91       	ld	r24, X+
    449a:	9c 91       	ld	r25, X
    449c:	11 97       	sbiw	r26, 0x01	; 1
    449e:	01 96       	adiw	r24, 0x01	; 1
    44a0:	8d 93       	st	X+, r24
    44a2:	9c 93       	st	X, r25
    44a4:	11 97       	sbiw	r26, 0x01	; 1
	if (uart_tail[idx] >= MAX_BUFFER_LEN){
    44a6:	8d 91       	ld	r24, X+
    44a8:	9c 91       	ld	r25, X
    44aa:	11 97       	sbiw	r26, 0x01	; 1
    44ac:	b4 e0       	ldi	r27, 0x04	; 4
    44ae:	80 30       	cpi	r24, 0x00	; 0
    44b0:	9b 07       	cpc	r25, r27
    44b2:	20 f0       	brcs	.+8      	; 0x44bc <service_uart_buffer+0x9a>
		uart_tail[idx] = 0;
    44b4:	d5 01       	movw	r26, r10
    44b6:	1d 92       	st	X+, r1
    44b8:	1c 92       	st	X, r1
    44ba:	11 97       	sbiw	r26, 0x01	; 1
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    44bc:	e4 0d       	add	r30, r4
    44be:	f5 1d       	adc	r31, r5
    44c0:	d0 80       	ld	r13, Z
void inline uart_transmit_lcd(USART_t* port){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0) && (lcd_flow_control == LCD_READY)){
		toSend = uart_dequeue(port);
		switch(toSend){
    44c2:	ba ef       	ldi	r27, 0xFA	; 250
    44c4:	db 16       	cp	r13, r27
    44c6:	21 f0       	breq	.+8      	; 0x44d0 <service_uart_buffer+0xae>
    44c8:	ee ef       	ldi	r30, 0xFE	; 254
    44ca:	de 16       	cp	r13, r30
    44cc:	09 f0       	breq	.+2      	; 0x44d0 <service_uart_buffer+0xae>
    44ce:	ef c0       	rjmp	.+478    	; 0x46ae <service_uart_buffer+0x28c>
#ifndef UART_DEBUG
	uint8_t idx = port_map(port);
	
	//if (idx==0){uart_enqueue(&uctrl, datain);} //xxx
	
	uart_buffer[idx][uart_head[idx]] = datain;
    44d0:	d8 01       	movw	r26, r16
    44d2:	8d 91       	ld	r24, X+
    44d4:	9c 91       	ld	r25, X
    44d6:	11 97       	sbiw	r26, 0x01	; 1
    44d8:	8e 55       	subi	r24, 0x5E	; 94
    44da:	9b 4c       	sbci	r25, 0xCB	; 203
    44dc:	fc 01       	movw	r30, r24
    44de:	c0 82       	st	Z, r12
	uart_head[idx]++;
    44e0:	8d 91       	ld	r24, X+
    44e2:	9c 91       	ld	r25, X
    44e4:	11 97       	sbiw	r26, 0x01	; 1
    44e6:	01 96       	adiw	r24, 0x01	; 1
    44e8:	8d 93       	st	X+, r24
    44ea:	9c 93       	st	X, r25
    44ec:	11 97       	sbiw	r26, 0x01	; 1
	if (uart_head[idx] >= MAX_BUFFER_LEN){
    44ee:	8d 91       	ld	r24, X+
    44f0:	9c 91       	ld	r25, X
    44f2:	11 97       	sbiw	r26, 0x01	; 1
    44f4:	f4 e0       	ldi	r31, 0x04	; 4
    44f6:	80 30       	cpi	r24, 0x00	; 0
    44f8:	9f 07       	cpc	r25, r31
    44fa:	18 f0       	brcs	.+6      	; 0x4502 <service_uart_buffer+0xe0>
		uart_head[idx] = 0;
    44fc:	1d 92       	st	X+, r1
    44fe:	1c 92       	st	X, r1
    4500:	11 97       	sbiw	r26, 0x01	; 1
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    4502:	d7 01       	movw	r26, r14
    4504:	11 96       	adiw	r26, 0x01	; 1
    4506:	8c 91       	ld	r24, X
    4508:	11 97       	sbiw	r26, 0x01	; 1
    450a:	85 fd       	sbrc	r24, 5
    450c:	18 c0       	rjmp	.+48     	; 0x453e <service_uart_buffer+0x11c>
    450e:	33 c0       	rjmp	.+102    	; 0x4576 <service_uart_buffer+0x154>
}

inline uint8_t uart_dequeue(USART_t* port){
	uint8_t idx = port_map(port);
	uint16_t oldtail;
	oldtail = uart_tail[idx];
    4510:	e8 81       	ld	r30, Y
    4512:	f9 81       	ldd	r31, Y+1	; 0x01
	uart_tail[idx]++;
    4514:	88 81       	ld	r24, Y
    4516:	99 81       	ldd	r25, Y+1	; 0x01
    4518:	01 96       	adiw	r24, 0x01	; 1
    451a:	88 83       	st	Y, r24
    451c:	99 83       	std	Y+1, r25	; 0x01
	if (uart_tail[idx] >= MAX_BUFFER_LEN){
    451e:	88 81       	ld	r24, Y
    4520:	99 81       	ldd	r25, Y+1	; 0x01
    4522:	b4 e0       	ldi	r27, 0x04	; 4
    4524:	80 30       	cpi	r24, 0x00	; 0
    4526:	9b 07       	cpc	r25, r27
    4528:	10 f0       	brcs	.+4      	; 0x452e <service_uart_buffer+0x10c>
		uart_tail[idx] = 0;
    452a:	18 82       	st	Y, r1
    452c:	19 82       	std	Y+1, r1	; 0x01
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    452e:	ee 55       	subi	r30, 0x5E	; 94
    4530:	fb 4c       	sbci	r31, 0xCB	; 203
    4532:	80 81       	ld	r24, Z
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
    4534:	f7 01       	movw	r30, r14
    4536:	80 83       	st	Z, r24
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    4538:	81 81       	ldd	r24, Z+1	; 0x01
    453a:	85 ff       	sbrs	r24, 5
    453c:	1c c0       	rjmp	.+56     	; 0x4576 <service_uart_buffer+0x154>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    453e:	d8 01       	movw	r26, r16
    4540:	8d 91       	ld	r24, X+
    4542:	9c 91       	ld	r25, X
    4544:	11 97       	sbiw	r26, 0x01	; 1
    4546:	28 81       	ld	r18, Y
    4548:	39 81       	ldd	r19, Y+1	; 0x01
    454a:	82 17       	cp	r24, r18
    454c:	93 07       	cpc	r25, r19
    454e:	40 f0       	brcs	.+16     	; 0x4560 <service_uart_buffer+0x13e>
		return (uart_head[idx] - uart_tail[idx]);
    4550:	8d 91       	ld	r24, X+
    4552:	9c 91       	ld	r25, X
    4554:	11 97       	sbiw	r26, 0x01	; 1
    4556:	28 81       	ld	r18, Y
    4558:	39 81       	ldd	r19, Y+1	; 0x01
    455a:	82 1b       	sub	r24, r18
    455c:	93 0b       	sbc	r25, r19
    455e:	09 c0       	rjmp	.+18     	; 0x4572 <service_uart_buffer+0x150>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    4560:	f8 01       	movw	r30, r16
    4562:	80 81       	ld	r24, Z
    4564:	91 81       	ldd	r25, Z+1	; 0x01
    4566:	28 81       	ld	r18, Y
    4568:	39 81       	ldd	r19, Y+1	; 0x01
    456a:	80 50       	subi	r24, 0x00	; 0
    456c:	9c 4f       	sbci	r25, 0xFC	; 252
    456e:	82 1b       	sub	r24, r18
    4570:	93 0b       	sbc	r25, r19
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    4572:	00 97       	sbiw	r24, 0x00	; 0
    4574:	69 f6       	brne	.-102    	; 0x4510 <service_uart_buffer+0xee>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    4576:	d8 01       	movw	r26, r16
    4578:	8d 91       	ld	r24, X+
    457a:	9c 91       	ld	r25, X
    457c:	11 97       	sbiw	r26, 0x01	; 1
    457e:	28 81       	ld	r18, Y
    4580:	39 81       	ldd	r19, Y+1	; 0x01
    4582:	82 17       	cp	r24, r18
    4584:	93 07       	cpc	r25, r19
    4586:	40 f0       	brcs	.+16     	; 0x4598 <service_uart_buffer+0x176>
		return (uart_head[idx] - uart_tail[idx]);
    4588:	8d 91       	ld	r24, X+
    458a:	9c 91       	ld	r25, X
    458c:	11 97       	sbiw	r26, 0x01	; 1
    458e:	28 81       	ld	r18, Y
    4590:	39 81       	ldd	r19, Y+1	; 0x01
    4592:	82 1b       	sub	r24, r18
    4594:	93 0b       	sbc	r25, r19
    4596:	09 c0       	rjmp	.+18     	; 0x45aa <service_uart_buffer+0x188>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    4598:	f8 01       	movw	r30, r16
    459a:	80 81       	ld	r24, Z
    459c:	91 81       	ldd	r25, Z+1	; 0x01
    459e:	28 81       	ld	r18, Y
    45a0:	39 81       	ldd	r19, Y+1	; 0x01
    45a2:	80 50       	subi	r24, 0x00	; 0
    45a4:	9c 4f       	sbci	r25, 0xFC	; 252
    45a6:	82 1b       	sub	r24, r18
    45a8:	93 0b       	sbc	r25, r19
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
	}
	//disable the tx outgoing hardware buffer ready interrupt if we have nothing more to put in it.
	if(uart_count(port)>0) uart_txbuffer_enable(port);
    45aa:	00 97       	sbiw	r24, 0x00	; 0
    45ac:	21 f0       	breq	.+8      	; 0x45b6 <service_uart_buffer+0x194>
    45ae:	c7 01       	movw	r24, r14
    45b0:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <uart_txbuffer_enable>
    45b4:	03 c0       	rjmp	.+6      	; 0x45bc <service_uart_buffer+0x19a>
	else uart_txbuffer_disable(port);
    45b6:	c7 01       	movw	r24, r14
    45b8:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <uart_txbuffer_disable>
#ifndef UART_DEBUG
	uint8_t idx = port_map(port);
	
	//if (idx==0){uart_enqueue(&uctrl, datain);} //xxx
	
	uart_buffer[idx][uart_head[idx]] = datain;
    45bc:	d8 01       	movw	r26, r16
    45be:	8d 91       	ld	r24, X+
    45c0:	9c 91       	ld	r25, X
    45c2:	11 97       	sbiw	r26, 0x01	; 1
    45c4:	8e 55       	subi	r24, 0x5E	; 94
    45c6:	9b 4c       	sbci	r25, 0xCB	; 203
    45c8:	fc 01       	movw	r30, r24
    45ca:	d0 82       	st	Z, r13
	uart_head[idx]++;
    45cc:	8d 91       	ld	r24, X+
    45ce:	9c 91       	ld	r25, X
    45d0:	11 97       	sbiw	r26, 0x01	; 1
    45d2:	01 96       	adiw	r24, 0x01	; 1
    45d4:	8d 93       	st	X+, r24
    45d6:	9c 93       	st	X, r25
    45d8:	11 97       	sbiw	r26, 0x01	; 1
	if (uart_head[idx] >= MAX_BUFFER_LEN){
    45da:	8d 91       	ld	r24, X+
    45dc:	9c 91       	ld	r25, X
    45de:	11 97       	sbiw	r26, 0x01	; 1
    45e0:	f4 e0       	ldi	r31, 0x04	; 4
    45e2:	80 30       	cpi	r24, 0x00	; 0
    45e4:	9f 07       	cpc	r25, r31
    45e6:	18 f0       	brcs	.+6      	; 0x45ee <service_uart_buffer+0x1cc>
		uart_head[idx] = 0;
    45e8:	1d 92       	st	X+, r1
    45ea:	1c 92       	st	X, r1
    45ec:	11 97       	sbiw	r26, 0x01	; 1
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    45ee:	d7 01       	movw	r26, r14
    45f0:	11 96       	adiw	r26, 0x01	; 1
    45f2:	8c 91       	ld	r24, X
    45f4:	11 97       	sbiw	r26, 0x01	; 1
    45f6:	85 fd       	sbrc	r24, 5
    45f8:	18 c0       	rjmp	.+48     	; 0x462a <service_uart_buffer+0x208>
    45fa:	33 c0       	rjmp	.+102    	; 0x4662 <service_uart_buffer+0x240>
}

inline uint8_t uart_dequeue(USART_t* port){
	uint8_t idx = port_map(port);
	uint16_t oldtail;
	oldtail = uart_tail[idx];
    45fc:	e8 81       	ld	r30, Y
    45fe:	f9 81       	ldd	r31, Y+1	; 0x01
	uart_tail[idx]++;
    4600:	88 81       	ld	r24, Y
    4602:	99 81       	ldd	r25, Y+1	; 0x01
    4604:	01 96       	adiw	r24, 0x01	; 1
    4606:	88 83       	st	Y, r24
    4608:	99 83       	std	Y+1, r25	; 0x01
	if (uart_tail[idx] >= MAX_BUFFER_LEN){
    460a:	88 81       	ld	r24, Y
    460c:	99 81       	ldd	r25, Y+1	; 0x01
    460e:	b4 e0       	ldi	r27, 0x04	; 4
    4610:	80 30       	cpi	r24, 0x00	; 0
    4612:	9b 07       	cpc	r25, r27
    4614:	10 f0       	brcs	.+4      	; 0x461a <service_uart_buffer+0x1f8>
		uart_tail[idx] = 0;
    4616:	18 82       	st	Y, r1
    4618:	19 82       	std	Y+1, r1	; 0x01
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    461a:	ee 55       	subi	r30, 0x5E	; 94
    461c:	fb 4c       	sbci	r31, 0xCB	; 203
    461e:	80 81       	ld	r24, Z
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
    4620:	f7 01       	movw	r30, r14
    4622:	80 83       	st	Z, r24
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    4624:	81 81       	ldd	r24, Z+1	; 0x01
    4626:	85 ff       	sbrs	r24, 5
    4628:	1c c0       	rjmp	.+56     	; 0x4662 <service_uart_buffer+0x240>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    462a:	d8 01       	movw	r26, r16
    462c:	8d 91       	ld	r24, X+
    462e:	9c 91       	ld	r25, X
    4630:	11 97       	sbiw	r26, 0x01	; 1
    4632:	28 81       	ld	r18, Y
    4634:	39 81       	ldd	r19, Y+1	; 0x01
    4636:	82 17       	cp	r24, r18
    4638:	93 07       	cpc	r25, r19
    463a:	40 f0       	brcs	.+16     	; 0x464c <service_uart_buffer+0x22a>
		return (uart_head[idx] - uart_tail[idx]);
    463c:	8d 91       	ld	r24, X+
    463e:	9c 91       	ld	r25, X
    4640:	11 97       	sbiw	r26, 0x01	; 1
    4642:	28 81       	ld	r18, Y
    4644:	39 81       	ldd	r19, Y+1	; 0x01
    4646:	82 1b       	sub	r24, r18
    4648:	93 0b       	sbc	r25, r19
    464a:	09 c0       	rjmp	.+18     	; 0x465e <service_uart_buffer+0x23c>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    464c:	f8 01       	movw	r30, r16
    464e:	80 81       	ld	r24, Z
    4650:	91 81       	ldd	r25, Z+1	; 0x01
    4652:	28 81       	ld	r18, Y
    4654:	39 81       	ldd	r19, Y+1	; 0x01
    4656:	80 50       	subi	r24, 0x00	; 0
    4658:	9c 4f       	sbci	r25, 0xFC	; 252
    465a:	82 1b       	sub	r24, r18
    465c:	93 0b       	sbc	r25, r19
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    465e:	00 97       	sbiw	r24, 0x00	; 0
    4660:	69 f6       	brne	.-102    	; 0x45fc <service_uart_buffer+0x1da>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    4662:	d8 01       	movw	r26, r16
    4664:	8d 91       	ld	r24, X+
    4666:	9c 91       	ld	r25, X
    4668:	11 97       	sbiw	r26, 0x01	; 1
    466a:	28 81       	ld	r18, Y
    466c:	39 81       	ldd	r19, Y+1	; 0x01
    466e:	82 17       	cp	r24, r18
    4670:	93 07       	cpc	r25, r19
    4672:	40 f0       	brcs	.+16     	; 0x4684 <service_uart_buffer+0x262>
		return (uart_head[idx] - uart_tail[idx]);
    4674:	8d 91       	ld	r24, X+
    4676:	9c 91       	ld	r25, X
    4678:	11 97       	sbiw	r26, 0x01	; 1
    467a:	28 81       	ld	r18, Y
    467c:	39 81       	ldd	r19, Y+1	; 0x01
    467e:	82 1b       	sub	r24, r18
    4680:	93 0b       	sbc	r25, r19
    4682:	09 c0       	rjmp	.+18     	; 0x4696 <service_uart_buffer+0x274>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    4684:	f8 01       	movw	r30, r16
    4686:	80 81       	ld	r24, Z
    4688:	91 81       	ldd	r25, Z+1	; 0x01
    468a:	28 81       	ld	r18, Y
    468c:	39 81       	ldd	r19, Y+1	; 0x01
    468e:	80 50       	subi	r24, 0x00	; 0
    4690:	9c 4f       	sbci	r25, 0xFC	; 252
    4692:	82 1b       	sub	r24, r18
    4694:	93 0b       	sbc	r25, r19
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
	}
	//disable the tx outgoing hardware buffer ready interrupt if we have nothing more to put in it.
	if(uart_count(port)>0) uart_txbuffer_enable(port);
    4696:	00 97       	sbiw	r24, 0x00	; 0
    4698:	21 f0       	breq	.+8      	; 0x46a2 <service_uart_buffer+0x280>
    469a:	c7 01       	movw	r24, r14
    469c:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <uart_txbuffer_enable>
    46a0:	03 c0       	rjmp	.+6      	; 0x46a8 <service_uart_buffer+0x286>
	else uart_txbuffer_disable(port);
    46a2:	c7 01       	movw	r24, r14
    46a4:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <uart_txbuffer_disable>
			case LCD_COMMAND:
			case LCD_MACRO:
				//Header byte just describes payload -- do not send to LCD
				uart_enqueue(&uctrl, '+'); //echo to data port -- xxx
				uart_enqueue(&uctrl, toSend); //echo to data port -- xxx
				lcd_flow_type = toSend;
    46a8:	d0 92 93 24 	sts	0x2493, r13
    46ac:	a8 c0       	rjmp	.+336    	; 0x47fe <service_uart_buffer+0x3dc>
#ifndef UART_DEBUG
	uint8_t idx = port_map(port);
	
	//if (idx==0){uart_enqueue(&uctrl, datain);} //xxx
	
	uart_buffer[idx][uart_head[idx]] = datain;
    46ae:	d8 01       	movw	r26, r16
    46b0:	8d 91       	ld	r24, X+
    46b2:	9c 91       	ld	r25, X
    46b4:	11 97       	sbiw	r26, 0x01	; 1
    46b6:	8e 55       	subi	r24, 0x5E	; 94
    46b8:	9b 4c       	sbci	r25, 0xCB	; 203
    46ba:	fc 01       	movw	r30, r24
    46bc:	d0 82       	st	Z, r13
	uart_head[idx]++;
    46be:	8d 91       	ld	r24, X+
    46c0:	9c 91       	ld	r25, X
    46c2:	11 97       	sbiw	r26, 0x01	; 1
    46c4:	01 96       	adiw	r24, 0x01	; 1
    46c6:	8d 93       	st	X+, r24
    46c8:	9c 93       	st	X, r25
    46ca:	11 97       	sbiw	r26, 0x01	; 1
	if (uart_head[idx] >= MAX_BUFFER_LEN){
    46cc:	8d 91       	ld	r24, X+
    46ce:	9c 91       	ld	r25, X
    46d0:	11 97       	sbiw	r26, 0x01	; 1
    46d2:	f4 e0       	ldi	r31, 0x04	; 4
    46d4:	80 30       	cpi	r24, 0x00	; 0
    46d6:	9f 07       	cpc	r25, r31
    46d8:	18 f0       	brcs	.+6      	; 0x46e0 <service_uart_buffer+0x2be>
		uart_head[idx] = 0;
    46da:	1d 92       	st	X+, r1
    46dc:	1c 92       	st	X, r1
    46de:	11 97       	sbiw	r26, 0x01	; 1
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    46e0:	d7 01       	movw	r26, r14
    46e2:	11 96       	adiw	r26, 0x01	; 1
    46e4:	8c 91       	ld	r24, X
    46e6:	11 97       	sbiw	r26, 0x01	; 1
    46e8:	85 fd       	sbrc	r24, 5
    46ea:	18 c0       	rjmp	.+48     	; 0x471c <service_uart_buffer+0x2fa>
    46ec:	33 c0       	rjmp	.+102    	; 0x4754 <service_uart_buffer+0x332>
}

inline uint8_t uart_dequeue(USART_t* port){
	uint8_t idx = port_map(port);
	uint16_t oldtail;
	oldtail = uart_tail[idx];
    46ee:	e8 81       	ld	r30, Y
    46f0:	f9 81       	ldd	r31, Y+1	; 0x01
	uart_tail[idx]++;
    46f2:	88 81       	ld	r24, Y
    46f4:	99 81       	ldd	r25, Y+1	; 0x01
    46f6:	01 96       	adiw	r24, 0x01	; 1
    46f8:	88 83       	st	Y, r24
    46fa:	99 83       	std	Y+1, r25	; 0x01
	if (uart_tail[idx] >= MAX_BUFFER_LEN){
    46fc:	88 81       	ld	r24, Y
    46fe:	99 81       	ldd	r25, Y+1	; 0x01
    4700:	b4 e0       	ldi	r27, 0x04	; 4
    4702:	80 30       	cpi	r24, 0x00	; 0
    4704:	9b 07       	cpc	r25, r27
    4706:	10 f0       	brcs	.+4      	; 0x470c <service_uart_buffer+0x2ea>
		uart_tail[idx] = 0;
    4708:	18 82       	st	Y, r1
    470a:	19 82       	std	Y+1, r1	; 0x01
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    470c:	ee 55       	subi	r30, 0x5E	; 94
    470e:	fb 4c       	sbci	r31, 0xCB	; 203
    4710:	80 81       	ld	r24, Z
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
    4712:	f7 01       	movw	r30, r14
    4714:	80 83       	st	Z, r24
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    4716:	81 81       	ldd	r24, Z+1	; 0x01
    4718:	85 ff       	sbrs	r24, 5
    471a:	1c c0       	rjmp	.+56     	; 0x4754 <service_uart_buffer+0x332>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    471c:	d8 01       	movw	r26, r16
    471e:	8d 91       	ld	r24, X+
    4720:	9c 91       	ld	r25, X
    4722:	11 97       	sbiw	r26, 0x01	; 1
    4724:	28 81       	ld	r18, Y
    4726:	39 81       	ldd	r19, Y+1	; 0x01
    4728:	82 17       	cp	r24, r18
    472a:	93 07       	cpc	r25, r19
    472c:	40 f0       	brcs	.+16     	; 0x473e <service_uart_buffer+0x31c>
		return (uart_head[idx] - uart_tail[idx]);
    472e:	8d 91       	ld	r24, X+
    4730:	9c 91       	ld	r25, X
    4732:	11 97       	sbiw	r26, 0x01	; 1
    4734:	28 81       	ld	r18, Y
    4736:	39 81       	ldd	r19, Y+1	; 0x01
    4738:	82 1b       	sub	r24, r18
    473a:	93 0b       	sbc	r25, r19
    473c:	09 c0       	rjmp	.+18     	; 0x4750 <service_uart_buffer+0x32e>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    473e:	f8 01       	movw	r30, r16
    4740:	80 81       	ld	r24, Z
    4742:	91 81       	ldd	r25, Z+1	; 0x01
    4744:	28 81       	ld	r18, Y
    4746:	39 81       	ldd	r19, Y+1	; 0x01
    4748:	80 50       	subi	r24, 0x00	; 0
    474a:	9c 4f       	sbci	r25, 0xFC	; 252
    474c:	82 1b       	sub	r24, r18
    474e:	93 0b       	sbc	r25, r19
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    4750:	00 97       	sbiw	r24, 0x00	; 0
    4752:	69 f6       	brne	.-102    	; 0x46ee <service_uart_buffer+0x2cc>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    4754:	d8 01       	movw	r26, r16
    4756:	8d 91       	ld	r24, X+
    4758:	9c 91       	ld	r25, X
    475a:	11 97       	sbiw	r26, 0x01	; 1
    475c:	28 81       	ld	r18, Y
    475e:	39 81       	ldd	r19, Y+1	; 0x01
    4760:	82 17       	cp	r24, r18
    4762:	93 07       	cpc	r25, r19
    4764:	40 f0       	brcs	.+16     	; 0x4776 <service_uart_buffer+0x354>
		return (uart_head[idx] - uart_tail[idx]);
    4766:	8d 91       	ld	r24, X+
    4768:	9c 91       	ld	r25, X
    476a:	11 97       	sbiw	r26, 0x01	; 1
    476c:	28 81       	ld	r18, Y
    476e:	39 81       	ldd	r19, Y+1	; 0x01
    4770:	82 1b       	sub	r24, r18
    4772:	93 0b       	sbc	r25, r19
    4774:	09 c0       	rjmp	.+18     	; 0x4788 <service_uart_buffer+0x366>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    4776:	f8 01       	movw	r30, r16
    4778:	80 81       	ld	r24, Z
    477a:	91 81       	ldd	r25, Z+1	; 0x01
    477c:	28 81       	ld	r18, Y
    477e:	39 81       	ldd	r19, Y+1	; 0x01
    4780:	80 50       	subi	r24, 0x00	; 0
    4782:	9c 4f       	sbci	r25, 0xFC	; 252
    4784:	82 1b       	sub	r24, r18
    4786:	93 0b       	sbc	r25, r19
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
	}
	//disable the tx outgoing hardware buffer ready interrupt if we have nothing more to put in it.
	if(uart_count(port)>0) uart_txbuffer_enable(port);
    4788:	00 97       	sbiw	r24, 0x00	; 0
    478a:	21 f0       	breq	.+8      	; 0x4794 <service_uart_buffer+0x372>
    478c:	c7 01       	movw	r24, r14
    478e:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <uart_txbuffer_enable>
    4792:	03 c0       	rjmp	.+6      	; 0x479a <service_uart_buffer+0x378>
	else uart_txbuffer_disable(port);
    4794:	c7 01       	movw	r24, r14
    4796:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <uart_txbuffer_disable>
				lcd_flow_type = toSend;
				break;
			default:
				//Payload bytes -- send to LCD
				uart_enqueue(&uctrl, toSend); //echo to data port -- xxx
				if (toSend == 0x0D) {lcd_flow_control = LCD_BUSY;}
    479a:	fd e0       	ldi	r31, 0x0D	; 13
    479c:	df 16       	cp	r13, r31
    479e:	11 f4       	brne	.+4      	; 0x47a4 <service_uart_buffer+0x382>
    47a0:	30 92 94 24 	sts	0x2494, r3
				port->DATA = toSend;
    47a4:	d3 01       	movw	r26, r6
    47a6:	dc 92       	st	X, r13
    47a8:	2a c0       	rjmp	.+84     	; 0x47fe <service_uart_buffer+0x3dc>
}

void inline uart_transmit_lcd(USART_t* port){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0) && (lcd_flow_control == LCD_READY)){
    47aa:	0f 2e       	mov	r0, r31
    47ac:	f0 eb       	ldi	r31, 0xB0	; 176
    47ae:	6f 2e       	mov	r6, r31
    47b0:	fb e0       	ldi	r31, 0x0B	; 11
    47b2:	7f 2e       	mov	r7, r31
    47b4:	f0 2d       	mov	r31, r0
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    47b6:	0f 2e       	mov	r0, r31
    47b8:	fc e9       	ldi	r31, 0x9C	; 156
    47ba:	8f 2e       	mov	r8, r31
    47bc:	f0 e3       	ldi	r31, 0x30	; 48
    47be:	9f 2e       	mov	r9, r31
    47c0:	f0 2d       	mov	r31, r0
    47c2:	0f 2e       	mov	r0, r31
    47c4:	f8 ea       	ldi	r31, 0xA8	; 168
    47c6:	af 2e       	mov	r10, r31
    47c8:	fc e3       	ldi	r31, 0x3C	; 60
    47ca:	bf 2e       	mov	r11, r31
    47cc:	f0 2d       	mov	r31, r0
		uart_tail[idx] = 0;
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    47ce:	0f 2e       	mov	r0, r31
    47d0:	f2 ea       	ldi	r31, 0xA2	; 162
    47d2:	4f 2e       	mov	r4, r31
    47d4:	f0 e3       	ldi	r31, 0x30	; 48
    47d6:	5f 2e       	mov	r5, r31
    47d8:	f0 2d       	mov	r31, r0
#ifndef UART_DEBUG
	uint8_t idx = port_map(port);
	
	//if (idx==0){uart_enqueue(&uctrl, datain);} //xxx
	
	uart_buffer[idx][uart_head[idx]] = datain;
    47da:	0e e9       	ldi	r16, 0x9E	; 158
    47dc:	10 e3       	ldi	r17, 0x30	; 48
    47de:	0f 2e       	mov	r0, r31
    47e0:	fb e2       	ldi	r31, 0x2B	; 43
    47e2:	cf 2e       	mov	r12, r31
    47e4:	f0 2d       	mov	r31, r0
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    47e6:	0f 2e       	mov	r0, r31
    47e8:	f0 ea       	ldi	r31, 0xA0	; 160
    47ea:	ef 2e       	mov	r14, r31
    47ec:	f8 e0       	ldi	r31, 0x08	; 8
    47ee:	ff 2e       	mov	r15, r31
    47f0:	f0 2d       	mov	r31, r0
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    47f2:	ca ea       	ldi	r28, 0xAA	; 170
    47f4:	dc e3       	ldi	r29, 0x3C	; 60
				lcd_flow_type = toSend;
				break;
			default:
				//Payload bytes -- send to LCD
				uart_enqueue(&uctrl, toSend); //echo to data port -- xxx
				if (toSend == 0x0D) {lcd_flow_control = LCD_BUSY;}
    47f6:	0f 2e       	mov	r0, r31
    47f8:	fe e4       	ldi	r31, 0x4E	; 78
    47fa:	3f 2e       	mov	r3, r31
    47fc:	f0 2d       	mov	r31, r0
}

void inline uart_transmit_lcd(USART_t* port){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0) && (lcd_flow_control == LCD_READY)){
    47fe:	f3 01       	movw	r30, r6
    4800:	81 81       	ldd	r24, Z+1	; 0x01
    4802:	85 ff       	sbrs	r24, 5
    4804:	24 c0       	rjmp	.+72     	; 0x484e <service_uart_buffer+0x42c>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    4806:	d4 01       	movw	r26, r8
    4808:	8d 91       	ld	r24, X+
    480a:	9c 91       	ld	r25, X
    480c:	11 97       	sbiw	r26, 0x01	; 1
    480e:	f5 01       	movw	r30, r10
    4810:	20 81       	ld	r18, Z
    4812:	31 81       	ldd	r19, Z+1	; 0x01
    4814:	82 17       	cp	r24, r18
    4816:	93 07       	cpc	r25, r19
    4818:	40 f0       	brcs	.+16     	; 0x482a <service_uart_buffer+0x408>
		return (uart_head[idx] - uart_tail[idx]);
    481a:	8d 91       	ld	r24, X+
    481c:	9c 91       	ld	r25, X
    481e:	11 97       	sbiw	r26, 0x01	; 1
    4820:	20 81       	ld	r18, Z
    4822:	31 81       	ldd	r19, Z+1	; 0x01
    4824:	82 1b       	sub	r24, r18
    4826:	93 0b       	sbc	r25, r19
    4828:	0b c0       	rjmp	.+22     	; 0x4840 <service_uart_buffer+0x41e>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    482a:	d4 01       	movw	r26, r8
    482c:	8d 91       	ld	r24, X+
    482e:	9c 91       	ld	r25, X
    4830:	11 97       	sbiw	r26, 0x01	; 1
    4832:	f5 01       	movw	r30, r10
    4834:	20 81       	ld	r18, Z
    4836:	31 81       	ldd	r19, Z+1	; 0x01
    4838:	80 50       	subi	r24, 0x00	; 0
    483a:	9c 4f       	sbci	r25, 0xFC	; 252
    483c:	82 1b       	sub	r24, r18
    483e:	93 0b       	sbc	r25, r19
}

void inline uart_transmit_lcd(USART_t* port){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0) && (lcd_flow_control == LCD_READY)){
    4840:	00 97       	sbiw	r24, 0x00	; 0
    4842:	29 f0       	breq	.+10     	; 0x484e <service_uart_buffer+0x42c>
    4844:	80 91 94 24 	lds	r24, 0x2494
    4848:	82 35       	cpi	r24, 0x52	; 82
    484a:	09 f4       	brne	.+2      	; 0x484e <service_uart_buffer+0x42c>
    484c:	21 ce       	rjmp	.-958    	; 0x4490 <service_uart_buffer+0x6e>
				if (toSend == 0x0D) {lcd_flow_control = LCD_BUSY;}
				port->DATA = toSend;
				break;
		}				
	}
	uart_txbuffer_disable(port); //implemented this way to prevent periodic stalls that happen when uart_txbuffer isn't disabled quickly enough
    484e:	80 eb       	ldi	r24, 0xB0	; 176
    4850:	9b e0       	ldi	r25, 0x0B	; 11
    4852:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <uart_txbuffer_disable>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    4856:	20 91 9c 30 	lds	r18, 0x309C
    485a:	30 91 9d 30 	lds	r19, 0x309D
    485e:	80 91 a8 3c 	lds	r24, 0x3CA8
    4862:	90 91 a9 3c 	lds	r25, 0x3CA9
    4866:	28 17       	cp	r18, r24
    4868:	39 07       	cpc	r19, r25
    486a:	58 f0       	brcs	.+22     	; 0x4882 <service_uart_buffer+0x460>
		return (uart_head[idx] - uart_tail[idx]);
    486c:	80 91 9c 30 	lds	r24, 0x309C
    4870:	90 91 9d 30 	lds	r25, 0x309D
    4874:	20 91 a8 3c 	lds	r18, 0x3CA8
    4878:	30 91 a9 3c 	lds	r19, 0x3CA9
    487c:	82 1b       	sub	r24, r18
    487e:	93 0b       	sbc	r25, r19
    4880:	0c c0       	rjmp	.+24     	; 0x489a <service_uart_buffer+0x478>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    4882:	80 91 9c 30 	lds	r24, 0x309C
    4886:	90 91 9d 30 	lds	r25, 0x309D
    488a:	20 91 a8 3c 	lds	r18, 0x3CA8
    488e:	30 91 a9 3c 	lds	r19, 0x3CA9
    4892:	80 50       	subi	r24, 0x00	; 0
    4894:	9c 4f       	sbci	r25, 0xFC	; 252
    4896:	82 1b       	sub	r24, r18
    4898:	93 0b       	sbc	r25, r19
				port->DATA = toSend;
				break;
		}				
	}
	uart_txbuffer_disable(port); //implemented this way to prevent periodic stalls that happen when uart_txbuffer isn't disabled quickly enough
	if ((uart_count(port)>0) && (lcd_flow_control == LCD_READY)){ //...something is waiting to go out
    489a:	00 97       	sbiw	r24, 0x00	; 0
    489c:	41 f0       	breq	.+16     	; 0x48ae <service_uart_buffer+0x48c>
    489e:	80 91 94 24 	lds	r24, 0x2494
    48a2:	82 35       	cpi	r24, 0x52	; 82
    48a4:	21 f4       	brne	.+8      	; 0x48ae <service_uart_buffer+0x48c>
		uart_txbuffer_enable(port);	
    48a6:	80 eb       	ldi	r24, 0xB0	; 176
    48a8:	9b e0       	ldi	r25, 0x0B	; 11
    48aa:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <uart_txbuffer_enable>
}

inline void service_uart_buffer(){
	//Resume transmission attempt if outgoing data still pending -- we do this so we can don't block the CPU for too long waiting for flow-control
	if (uart_count(&ulcd)>0){uart_transmit_lcd(&ulcd);}
}
    48ae:	df 91       	pop	r29
    48b0:	cf 91       	pop	r28
    48b2:	1f 91       	pop	r17
    48b4:	0f 91       	pop	r16
    48b6:	ff 90       	pop	r15
    48b8:	ef 90       	pop	r14
    48ba:	df 90       	pop	r13
    48bc:	cf 90       	pop	r12
    48be:	bf 90       	pop	r11
    48c0:	af 90       	pop	r10
    48c2:	9f 90       	pop	r9
    48c4:	8f 90       	pop	r8
    48c6:	7f 90       	pop	r7
    48c8:	6f 90       	pop	r6
    48ca:	5f 90       	pop	r5
    48cc:	4f 90       	pop	r4
    48ce:	3f 90       	pop	r3
    48d0:	08 95       	ret

000048d2 <led_on>:
    48d2:	81 30       	cpi	r24, 0x01	; 1
    48d4:	61 f0       	breq	.+24     	; 0x48ee <led_on+0x1c>
    48d6:	81 30       	cpi	r24, 0x01	; 1
    48d8:	18 f0       	brcs	.+6      	; 0x48e0 <led_on+0xe>
    48da:	82 30       	cpi	r24, 0x02	; 2
    48dc:	a9 f4       	brne	.+42     	; 0x4908 <led_on+0x36>
    48de:	0e c0       	rjmp	.+28     	; 0x48fc <led_on+0x2a>
    48e0:	8f ef       	ldi	r24, 0xFF	; 255
    48e2:	90 e0       	ldi	r25, 0x00	; 0
    48e4:	e0 e0       	ldi	r30, 0x00	; 0
    48e6:	fb e0       	ldi	r31, 0x0B	; 11
    48e8:	80 af       	sts	0x70, r24
    48ea:	91 af       	sts	0x71, r25
    48ec:	08 95       	ret
    48ee:	8f ef       	ldi	r24, 0xFF	; 255
    48f0:	90 e0       	ldi	r25, 0x00	; 0
    48f2:	e0 e0       	ldi	r30, 0x00	; 0
    48f4:	fb e0       	ldi	r31, 0x0B	; 11
    48f6:	82 af       	sts	0x72, r24
    48f8:	93 af       	sts	0x73, r25
    48fa:	08 95       	ret
    48fc:	8f ef       	ldi	r24, 0xFF	; 255
    48fe:	90 e0       	ldi	r25, 0x00	; 0
    4900:	80 93 3e 0b 	sts	0x0B3E, r24
    4904:	90 93 3f 0b 	sts	0x0B3F, r25
    4908:	08 95       	ret

0000490a <led_off>:
    490a:	81 30       	cpi	r24, 0x01	; 1
    490c:	51 f0       	breq	.+20     	; 0x4922 <led_off+0x18>
    490e:	81 30       	cpi	r24, 0x01	; 1
    4910:	18 f0       	brcs	.+6      	; 0x4918 <led_off+0xe>
    4912:	82 30       	cpi	r24, 0x02	; 2
    4914:	79 f4       	brne	.+30     	; 0x4934 <led_off+0x2a>
    4916:	0a c0       	rjmp	.+20     	; 0x492c <led_off+0x22>
    4918:	e0 e0       	ldi	r30, 0x00	; 0
    491a:	fb e0       	ldi	r31, 0x0B	; 11
    491c:	10 ae       	sts	0xb0, r17
    491e:	11 ae       	sts	0xb1, r17
    4920:	08 95       	ret
    4922:	e0 e0       	ldi	r30, 0x00	; 0
    4924:	fb e0       	ldi	r31, 0x0B	; 11
    4926:	12 ae       	sts	0xb2, r17
    4928:	13 ae       	sts	0xb3, r17
    492a:	08 95       	ret
    492c:	10 92 3e 0b 	sts	0x0B3E, r1
    4930:	10 92 3f 0b 	sts	0x0B3F, r1
    4934:	08 95       	ret

00004936 <led_dim>:
    4936:	81 30       	cpi	r24, 0x01	; 1
    4938:	59 f0       	breq	.+22     	; 0x4950 <led_dim+0x1a>
    493a:	81 30       	cpi	r24, 0x01	; 1
    493c:	18 f0       	brcs	.+6      	; 0x4944 <led_dim+0xe>
    493e:	82 30       	cpi	r24, 0x02	; 2
    4940:	91 f4       	brne	.+36     	; 0x4966 <led_dim+0x30>
    4942:	0c c0       	rjmp	.+24     	; 0x495c <led_dim+0x26>
    4944:	70 e0       	ldi	r23, 0x00	; 0
    4946:	e0 e0       	ldi	r30, 0x00	; 0
    4948:	fb e0       	ldi	r31, 0x0B	; 11
    494a:	60 af       	sts	0x70, r22
    494c:	71 af       	sts	0x71, r23
    494e:	08 95       	ret
    4950:	70 e0       	ldi	r23, 0x00	; 0
    4952:	e0 e0       	ldi	r30, 0x00	; 0
    4954:	fb e0       	ldi	r31, 0x0B	; 11
    4956:	62 af       	sts	0x72, r22
    4958:	73 af       	sts	0x73, r23
    495a:	08 95       	ret
    495c:	70 e0       	ldi	r23, 0x00	; 0
    495e:	60 93 3e 0b 	sts	0x0B3E, r22
    4962:	70 93 3f 0b 	sts	0x0B3F, r23
    4966:	08 95       	ret

00004968 <led_toggle>:
    4968:	81 30       	cpi	r24, 0x01	; 1
    496a:	59 f0       	breq	.+22     	; 0x4982 <led_toggle+0x1a>
    496c:	81 30       	cpi	r24, 0x01	; 1
    496e:	18 f0       	brcs	.+6      	; 0x4976 <led_toggle+0xe>
    4970:	82 30       	cpi	r24, 0x02	; 2
    4972:	91 f4       	brne	.+36     	; 0x4998 <led_toggle+0x30>
    4974:	0c c0       	rjmp	.+24     	; 0x498e <led_toggle+0x26>
    4976:	e0 e0       	ldi	r30, 0x00	; 0
    4978:	fb e0       	ldi	r31, 0x0B	; 11
    497a:	80 a5       	lds	r24, 0x60
    497c:	80 95       	com	r24
    497e:	80 a7       	lds	r24, 0x70
    4980:	08 95       	ret
    4982:	e0 e0       	ldi	r30, 0x00	; 0
    4984:	fb e0       	ldi	r31, 0x0B	; 11
    4986:	82 a5       	lds	r24, 0x62
    4988:	80 95       	com	r24
    498a:	82 a7       	lds	r24, 0x72
    498c:	08 95       	ret
    498e:	e0 e0       	ldi	r30, 0x00	; 0
    4990:	fb e0       	ldi	r31, 0x0B	; 11
    4992:	86 a5       	lds	r24, 0x66
    4994:	80 95       	com	r24
    4996:	86 a7       	lds	r24, 0x76
    4998:	08 95       	ret

0000499a <audio_volume>:
    499a:	90 e0       	ldi	r25, 0x00	; 0
    499c:	e0 e0       	ldi	r30, 0x00	; 0
    499e:	fb e0       	ldi	r31, 0x0B	; 11
    49a0:	84 af       	sts	0x74, r24
    49a2:	95 af       	sts	0x75, r25
    49a4:	08 95       	ret

000049a6 <init_ui>:
    49a6:	cf 93       	push	r28
    49a8:	df 93       	push	r29
    49aa:	e0 ea       	ldi	r30, 0xA0	; 160
    49ac:	f6 e0       	ldi	r31, 0x06	; 6
    49ae:	8f e0       	ldi	r24, 0x0F	; 15
    49b0:	81 83       	std	Z+1, r24	; 0x01
    49b2:	80 e4       	ldi	r24, 0x40	; 64
    49b4:	80 8b       	std	Z+16, r24	; 0x10
    49b6:	81 8b       	std	Z+17, r24	; 0x11
    49b8:	83 8b       	std	Z+19, r24	; 0x13
    49ba:	c0 e0       	ldi	r28, 0x00	; 0
    49bc:	db e0       	ldi	r29, 0x0B	; 11
    49be:	87 e0       	ldi	r24, 0x07	; 7
    49c0:	88 83       	st	Y, r24
    49c2:	83 ef       	ldi	r24, 0xF3	; 243
    49c4:	89 83       	std	Y+1, r24	; 0x01
    49c6:	8f ef       	ldi	r24, 0xFF	; 255
    49c8:	90 e0       	ldi	r25, 0x00	; 0
    49ca:	8e a3       	lds	r24, 0x5e
    49cc:	9f a3       	lds	r25, 0x5f
    49ce:	80 e0       	ldi	r24, 0x00	; 0
    49d0:	0e 94 cd 24 	call	0x499a	; 0x499a <audio_volume>
    49d4:	18 ae       	sts	0xb8, r17
    49d6:	19 ae       	sts	0xb9, r17
    49d8:	1a ae       	sts	0xba, r17
    49da:	1b ae       	sts	0xbb, r17
    49dc:	10 92 3e 0b 	sts	0x0B3E, r1
    49e0:	10 92 3f 0b 	sts	0x0B3F, r1
    49e4:	df 91       	pop	r29
    49e6:	cf 91       	pop	r28
    49e8:	08 95       	ret

000049ea <_audio_beep>:
    49ea:	80 91 af 3c 	lds	r24, 0x3CAF
    49ee:	81 50       	subi	r24, 0x01	; 1
    49f0:	80 93 af 3c 	sts	0x3CAF, r24
    49f4:	85 e2       	ldi	r24, 0x25	; 37
    49f6:	80 93 1a 21 	sts	0x211A, r24
    49fa:	85 e0       	ldi	r24, 0x05	; 5
    49fc:	80 93 b0 3c 	sts	0x3CB0, r24
    4a00:	80 91 ae 3c 	lds	r24, 0x3CAE
    4a04:	0e 94 cd 24 	call	0x499a	; 0x499a <audio_volume>
    4a08:	08 95       	ret

00004a0a <audio_beep>:
    4a0a:	88 23       	and	r24, r24
    4a0c:	49 f0       	breq	.+18     	; 0x4a20 <audio_beep+0x16>
    4a0e:	80 93 af 3c 	sts	0x3CAF, r24
    4a12:	61 15       	cp	r22, r1
    4a14:	71 05       	cpc	r23, r1
    4a16:	21 f0       	breq	.+8      	; 0x4a20 <audio_beep+0x16>
    4a18:	60 93 ae 3c 	sts	0x3CAE, r22
    4a1c:	0e 94 f5 24 	call	0x49ea	; 0x49ea <_audio_beep>
    4a20:	08 95       	ret

00004a22 <service_audio>:
    4a22:	80 91 1a 21 	lds	r24, 0x211A
    4a26:	85 32       	cpi	r24, 0x25	; 37
    4a28:	19 f0       	breq	.+6      	; 0x4a30 <service_audio+0xe>
    4a2a:	86 32       	cpi	r24, 0x26	; 38
    4a2c:	19 f5       	brne	.+70     	; 0x4a74 <service_audio+0x52>
    4a2e:	18 c0       	rjmp	.+48     	; 0x4a60 <service_audio+0x3e>
    4a30:	80 91 b0 3c 	lds	r24, 0x3CB0
    4a34:	81 50       	subi	r24, 0x01	; 1
    4a36:	80 93 b0 3c 	sts	0x3CB0, r24
    4a3a:	88 23       	and	r24, r24
    4a3c:	f1 f4       	brne	.+60     	; 0x4a7a <service_audio+0x58>
    4a3e:	0e 94 cd 24 	call	0x499a	; 0x499a <audio_volume>
    4a42:	80 91 af 3c 	lds	r24, 0x3CAF
    4a46:	88 23       	and	r24, r24
    4a48:	21 f4       	brne	.+8      	; 0x4a52 <service_audio+0x30>
    4a4a:	84 e2       	ldi	r24, 0x24	; 36
    4a4c:	80 93 1a 21 	sts	0x211A, r24
    4a50:	08 95       	ret
    4a52:	86 e2       	ldi	r24, 0x26	; 38
    4a54:	80 93 1a 21 	sts	0x211A, r24
    4a58:	82 e3       	ldi	r24, 0x32	; 50
    4a5a:	80 93 b0 3c 	sts	0x3CB0, r24
    4a5e:	08 95       	ret
    4a60:	80 91 b0 3c 	lds	r24, 0x3CB0
    4a64:	81 50       	subi	r24, 0x01	; 1
    4a66:	80 93 b0 3c 	sts	0x3CB0, r24
    4a6a:	88 23       	and	r24, r24
    4a6c:	31 f4       	brne	.+12     	; 0x4a7a <service_audio+0x58>
    4a6e:	0e 94 f5 24 	call	0x49ea	; 0x49ea <_audio_beep>
    4a72:	08 95       	ret
    4a74:	80 e0       	ldi	r24, 0x00	; 0
    4a76:	0e 94 cd 24 	call	0x499a	; 0x499a <audio_volume>
    4a7a:	08 95       	ret

00004a7c <__udivmodsi4>:
    4a7c:	a1 e2       	ldi	r26, 0x21	; 33
    4a7e:	1a 2e       	mov	r1, r26
    4a80:	aa 1b       	sub	r26, r26
    4a82:	bb 1b       	sub	r27, r27
    4a84:	fd 01       	movw	r30, r26
    4a86:	0d c0       	rjmp	.+26     	; 0x4aa2 <__udivmodsi4_ep>

00004a88 <__udivmodsi4_loop>:
    4a88:	aa 1f       	adc	r26, r26
    4a8a:	bb 1f       	adc	r27, r27
    4a8c:	ee 1f       	adc	r30, r30
    4a8e:	ff 1f       	adc	r31, r31
    4a90:	a2 17       	cp	r26, r18
    4a92:	b3 07       	cpc	r27, r19
    4a94:	e4 07       	cpc	r30, r20
    4a96:	f5 07       	cpc	r31, r21
    4a98:	20 f0       	brcs	.+8      	; 0x4aa2 <__udivmodsi4_ep>
    4a9a:	a2 1b       	sub	r26, r18
    4a9c:	b3 0b       	sbc	r27, r19
    4a9e:	e4 0b       	sbc	r30, r20
    4aa0:	f5 0b       	sbc	r31, r21

00004aa2 <__udivmodsi4_ep>:
    4aa2:	66 1f       	adc	r22, r22
    4aa4:	77 1f       	adc	r23, r23
    4aa6:	88 1f       	adc	r24, r24
    4aa8:	99 1f       	adc	r25, r25
    4aaa:	1a 94       	dec	r1
    4aac:	69 f7       	brne	.-38     	; 0x4a88 <__udivmodsi4_loop>
    4aae:	60 95       	com	r22
    4ab0:	70 95       	com	r23
    4ab2:	80 95       	com	r24
    4ab4:	90 95       	com	r25
    4ab6:	9b 01       	movw	r18, r22
    4ab8:	ac 01       	movw	r20, r24
    4aba:	bd 01       	movw	r22, r26
    4abc:	cf 01       	movw	r24, r30
    4abe:	08 95       	ret

00004ac0 <_exit>:
    4ac0:	f8 94       	cli

00004ac2 <__stop_program>:
    4ac2:	ff cf       	rjmp	.-2      	; 0x4ac2 <__stop_program>
