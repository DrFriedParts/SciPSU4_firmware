
SciPSU4-Firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004250  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000148  00802000  00004250  000042e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00001caa  00802148  00802148  0000442c  2**0
                  ALLOC
  3 .stab         0000192c  00000000  00000000  0000442c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000005ea  00000000  00000000  00005d58  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000200  00000000  00000000  00006348  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005fe6  00000000  00000000  00006548  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000011c5  00000000  00000000  0000c52e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001f1d  00000000  00000000  0000d6f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000d30  00000000  00000000  0000f610  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001445  00000000  00000000  00010340  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002f54  00000000  00000000  00011785  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000528  00000000  00000000  000146d9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__ctors_end>
       4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
       8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
       c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      10:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      14:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      18:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      1c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      20:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      24:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      28:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      2c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      30:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      34:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      38:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      3c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      40:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      44:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      48:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      4c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      50:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      54:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      58:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      5c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      60:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      64:	0c 94 e8 0f 	jmp	0x1fd0	; 0x1fd0 <__vector_25>
      68:	0c 94 d8 10 	jmp	0x21b0	; 0x21b0 <__vector_26>
      6c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      70:	0c 94 56 10 	jmp	0x20ac	; 0x20ac <__vector_28>
      74:	0c 94 7b 11 	jmp	0x22f6	; 0x22f6 <__vector_29>
      78:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      7c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      80:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      84:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      88:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      8c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      90:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      94:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      98:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      9c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      a0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      a4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      a8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      ac:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      b0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      b4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      b8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      bc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      c0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      c4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      c8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      cc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      d0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      d4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      d8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      dc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      e0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      e4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      e8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      ec:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      f0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      f4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      f8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      fc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     100:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     104:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     108:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     10c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     110:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     114:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     118:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     11c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     120:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     124:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     128:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     12c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     130:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     134:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     138:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     13c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     140:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     144:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     148:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     14c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     150:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     154:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     158:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     15c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     160:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     164:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     168:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     16c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     170:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     174:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     178:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     17c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     180:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     184:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     188:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     18c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     190:	0c 94 82 0a 	jmp	0x1504	; 0x1504 <__vector_100>
     194:	0c 94 ea 0a 	jmp	0x15d4	; 0x15d4 <__vector_101>
     198:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     19c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1a0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1a4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1a8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1ac:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1b0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1b4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1b8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1bc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1c0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1c4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1c8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1cc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1d0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1d4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1d8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1dc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1e0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1e4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1e8:	0c 94 25 18 	jmp	0x304a	; 0x304a <__vector_122>
     1ec:	0c 94 1e 12 	jmp	0x243c	; 0x243c <__vector_123>
     1f0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>

000001f4 <__ctors_end>:
     1f4:	11 24       	eor	r1, r1
     1f6:	1f be       	out	0x3f, r1	; 63
     1f8:	cf ef       	ldi	r28, 0xFF	; 255
     1fa:	df e3       	ldi	r29, 0x3F	; 63
     1fc:	de bf       	out	0x3e, r29	; 62
     1fe:	cd bf       	out	0x3d, r28	; 61
     200:	00 e0       	ldi	r16, 0x00	; 0
     202:	0c bf       	out	0x3c, r16	; 60
     204:	18 be       	out	0x38, r1	; 56
     206:	19 be       	out	0x39, r1	; 57
     208:	1a be       	out	0x3a, r1	; 58
     20a:	1b be       	out	0x3b, r1	; 59

0000020c <__do_copy_data>:
     20c:	11 e2       	ldi	r17, 0x21	; 33
     20e:	a0 e0       	ldi	r26, 0x00	; 0
     210:	b0 e2       	ldi	r27, 0x20	; 32
     212:	e0 e5       	ldi	r30, 0x50	; 80
     214:	f2 e4       	ldi	r31, 0x42	; 66
     216:	00 e0       	ldi	r16, 0x00	; 0
     218:	0b bf       	out	0x3b, r16	; 59
     21a:	02 c0       	rjmp	.+4      	; 0x220 <__do_copy_data+0x14>
     21c:	07 90       	elpm	r0, Z+
     21e:	0d 92       	st	X+, r0
     220:	a8 34       	cpi	r26, 0x48	; 72
     222:	b1 07       	cpc	r27, r17
     224:	d9 f7       	brne	.-10     	; 0x21c <__do_copy_data+0x10>

00000226 <__do_clear_bss>:
     226:	1d e3       	ldi	r17, 0x3D	; 61
     228:	a8 e4       	ldi	r26, 0x48	; 72
     22a:	b1 e2       	ldi	r27, 0x21	; 33
     22c:	01 c0       	rjmp	.+2      	; 0x230 <.do_clear_bss_start>

0000022e <.do_clear_bss_loop>:
     22e:	1d 92       	st	X+, r1

00000230 <.do_clear_bss_start>:
     230:	a2 3f       	cpi	r26, 0xF2	; 242
     232:	b1 07       	cpc	r27, r17
     234:	e1 f7       	brne	.-8      	; 0x22e <.do_clear_bss_loop>
     236:	0e 94 cb 09 	call	0x1396	; 0x1396 <main>
     23a:	0c 94 26 21 	jmp	0x424c	; 0x424c <_exit>

0000023e <__bad_interrupt>:
     23e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000242 <adc_read_cal_byte>:

///http://www.bostonandroid.com/manuals/xmega-precision-adc-howto.html
uint8_t adc_read_cal_byte( uint8_t index ){
	uint8_t result;
	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
     242:	aa ec       	ldi	r26, 0xCA	; 202
     244:	b1 e0       	ldi	r27, 0x01	; 1
     246:	92 e0       	ldi	r25, 0x02	; 2
     248:	9c 93       	st	X, r25
	result = pgm_read_byte(index);
     24a:	e8 2f       	mov	r30, r24
     24c:	f0 e0       	ldi	r31, 0x00	; 0
     24e:	84 91       	lpm	r24, Z
	/* Clean up NVM Command register. */
	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
     250:	1c 92       	st	X, r1
	return( result );
}
     252:	08 95       	ret

00000254 <adc_bank_select>:
//#############################################################
//## ADCs -- OPERATION
//#############################################################

void adc_bank_select(uint8_t which){
	if(which % 2){
     254:	80 ff       	sbrs	r24, 0
     256:	10 c0       	rjmp	.+32     	; 0x278 <adc_bank_select+0x24>
		ADCA.CH0.MUXCTRL = B8(00000000); //CH0 converts from PA0
     258:	e0 e0       	ldi	r30, 0x00	; 0
     25a:	f2 e0       	ldi	r31, 0x02	; 2
     25c:	11 a2       	lds	r17, 0x91
		ADCA.CH1.MUXCTRL = B8(00001000); //CH1 converts from PA1
     25e:	28 e0       	ldi	r18, 0x08	; 8
     260:	21 a7       	lds	r18, 0x71
		ADCA.CH2.MUXCTRL = B8(00010000); //CH2 converts from PA2
     262:	90 e1       	ldi	r25, 0x10	; 16
     264:	91 ab       	sts	0x51, r25
		ADCA.CH3.MUXCTRL = B8(00011000); //CH3 converts from PA3
     266:	88 e1       	ldi	r24, 0x18	; 24
     268:	81 af       	sts	0x71, r24
		ADCB.CH0.MUXCTRL = B8(00000000); //CH0 converts from PB0
     26a:	e0 e4       	ldi	r30, 0x40	; 64
     26c:	f2 e0       	ldi	r31, 0x02	; 2
     26e:	11 a2       	lds	r17, 0x91
		ADCB.CH1.MUXCTRL = B8(00001000); //CH1 converts from PB1
     270:	21 a7       	lds	r18, 0x71
		ADCB.CH2.MUXCTRL = B8(00010000); //CH2 converts from PB2
     272:	91 ab       	sts	0x51, r25
		ADCB.CH3.MUXCTRL = B8(00011000); //CH3 converts from PB3
     274:	81 af       	sts	0x71, r24
     276:	08 95       	ret
	}
	else {
		ADCA.CH0.MUXCTRL = B8(00100000); //CH0 converts from PA4
     278:	e0 e0       	ldi	r30, 0x00	; 0
     27a:	f2 e0       	ldi	r31, 0x02	; 2
     27c:	30 e2       	ldi	r19, 0x20	; 32
     27e:	31 a3       	lds	r19, 0x51
		ADCA.CH1.MUXCTRL = B8(00101000); //CH1 converts from PA5
     280:	28 e2       	ldi	r18, 0x28	; 40
     282:	21 a7       	lds	r18, 0x71
		ADCA.CH2.MUXCTRL = B8(00110000); //CH2 converts from PA6
     284:	90 e3       	ldi	r25, 0x30	; 48
     286:	91 ab       	sts	0x51, r25
		ADCA.CH3.MUXCTRL = B8(00111000); //CH3 converts from PA7
     288:	88 e3       	ldi	r24, 0x38	; 56
     28a:	81 af       	sts	0x71, r24
		ADCB.CH0.MUXCTRL = B8(00100000); //CH0 converts from PB4
     28c:	e0 e4       	ldi	r30, 0x40	; 64
     28e:	f2 e0       	ldi	r31, 0x02	; 2
     290:	31 a3       	lds	r19, 0x51
		ADCB.CH1.MUXCTRL = B8(00101000); //CH1 converts from PB5
     292:	21 a7       	lds	r18, 0x71
		ADCB.CH2.MUXCTRL = B8(00110000); //CH2 converts from PB6
     294:	91 ab       	sts	0x51, r25
		ADCB.CH3.MUXCTRL = B8(00111000); //CH3 converts from PB7	
     296:	81 af       	sts	0x71, r24
     298:	08 95       	ret

0000029a <adc_convert>:
	}
}	

void adc_convert(){
	ADCA.CTRLA |= B8(00111100); //Start conversions on all four channels
     29a:	e0 e0       	ldi	r30, 0x00	; 0
     29c:	f2 e0       	ldi	r31, 0x02	; 2
     29e:	80 81       	ld	r24, Z
     2a0:	8c 63       	ori	r24, 0x3C	; 60
     2a2:	80 83       	st	Z, r24
	ADCB.CTRLA |= B8(00111100); //Start conversions on all four channels
     2a4:	e0 e4       	ldi	r30, 0x40	; 64
     2a6:	f2 e0       	ldi	r31, 0x02	; 2
     2a8:	80 81       	ld	r24, Z
     2aa:	8c 63       	ori	r24, 0x3C	; 60
     2ac:	80 83       	st	Z, r24
}
     2ae:	08 95       	ret

000002b0 <init_adc>:

//#############################################################
//## ADCs -- INITIALIZATION
//#############################################################

void init_adc(){	
     2b0:	cf 92       	push	r12
     2b2:	df 92       	push	r13
     2b4:	ef 92       	push	r14
     2b6:	ff 92       	push	r15
     2b8:	0f 93       	push	r16
     2ba:	1f 93       	push	r17
     2bc:	cf 93       	push	r28
     2be:	df 93       	push	r29
	//ADC A
	ADCA.CALL = adc_read_cal_byte( offsetof(NVM_PROD_SIGNATURES_t, ADCACAL0) );
     2c0:	80 e2       	ldi	r24, 0x20	; 32
     2c2:	0e 94 21 01 	call	0x242	; 0x242 <adc_read_cal_byte>
     2c6:	c0 e0       	ldi	r28, 0x00	; 0
     2c8:	d2 e0       	ldi	r29, 0x02	; 2
     2ca:	8c 87       	std	Y+12, r24	; 0x0c
	ADCA.CALH = adc_read_cal_byte( offsetof(NVM_PROD_SIGNATURES_t, ADCACAL1) );
     2cc:	81 e2       	ldi	r24, 0x21	; 33
     2ce:	0e 94 21 01 	call	0x242	; 0x242 <adc_read_cal_byte>
     2d2:	8d 87       	std	Y+13, r24	; 0x0d
	ADCA.PRESCALER = B8(00000111); //ADC clock = Peripheral clock / 512 (maximum resolution/accuracy)
     2d4:	0f 2e       	mov	r0, r31
     2d6:	f7 e0       	ldi	r31, 0x07	; 7
     2d8:	ef 2e       	mov	r14, r31
     2da:	f0 2d       	mov	r31, r0
     2dc:	ec 82       	std	Y+4, r14	; 0x04
	ADCA.REFCTRL = B8(00010011); //Use AVCC/1.6 = 2.063V as reference (highest allowed); Enable BandGap Reference and Temperature Sensor (internal)
     2de:	0f 2e       	mov	r0, r31
     2e0:	f3 e1       	ldi	r31, 0x13	; 19
     2e2:	df 2e       	mov	r13, r31
     2e4:	f0 2d       	mov	r31, r0
     2e6:	da 82       	std	Y+2, r13	; 0x02
	ADCA.CTRLB = B8(00000110); //12bit-left adjusted; One-shot conversion; unsigned mode;
     2e8:	0f 2e       	mov	r0, r31
     2ea:	f6 e0       	ldi	r31, 0x06	; 6
     2ec:	cf 2e       	mov	r12, r31
     2ee:	f0 2d       	mov	r31, r0
     2f0:	c9 82       	std	Y+1, r12	; 0x01
	ADCA.CTRLA = B8(00000001); //Enable ADC;
     2f2:	ff 24       	eor	r15, r15
     2f4:	f3 94       	inc	r15
     2f6:	f8 82       	st	Y, r15
	ADCA.CH0.CTRL = B8(00000001); //Single ended input mode; No gain
     2f8:	f8 a2       	lds	r31, 0x98
	ADCA.CH1.CTRL = B8(00000001); //Single ended input mode; No gain
     2fa:	f8 a6       	lds	r31, 0xb8
	ADCA.CH2.CTRL = B8(00000001); //Single ended input mode; No gain
     2fc:	f8 aa       	sts	0x98, r31
	ADCA.CH3.CTRL = B8(00000001); //Single ended input mode; No gain
     2fe:	f8 ae       	sts	0xb8, r31
	
	//ADC B
	ADCB.CALL = adc_read_cal_byte( offsetof(NVM_PROD_SIGNATURES_t, ADCBCAL0) );
     300:	84 e2       	ldi	r24, 0x24	; 36
     302:	0e 94 21 01 	call	0x242	; 0x242 <adc_read_cal_byte>
     306:	00 e4       	ldi	r16, 0x40	; 64
     308:	12 e0       	ldi	r17, 0x02	; 2
     30a:	f8 01       	movw	r30, r16
     30c:	84 87       	std	Z+12, r24	; 0x0c
	ADCB.CALH = adc_read_cal_byte( offsetof(NVM_PROD_SIGNATURES_t, ADCBCAL1) );
     30e:	85 e2       	ldi	r24, 0x25	; 37
     310:	0e 94 21 01 	call	0x242	; 0x242 <adc_read_cal_byte>
     314:	f8 01       	movw	r30, r16
     316:	85 87       	std	Z+13, r24	; 0x0d
	ADCB.PRESCALER = B8(00000111); //ADC clock = Peripheral clock / 512 (maximum resolution/accuracy)
     318:	e4 82       	std	Z+4, r14	; 0x04
	ADCB.REFCTRL = B8(00010011); //Use AVCC/1.6 = 2.063V as reference (highest allowed); Enable BandGap Reference and Temperature Sensor (internal)
     31a:	d2 82       	std	Z+2, r13	; 0x02
	ADCB.CTRLB = B8(00000110); //12bit-left adjusted; One-shot conversion; unsigned mode;
     31c:	c1 82       	std	Z+1, r12	; 0x01
	ADCB.CTRLA = B8(00000001); //Enable ADC;
     31e:	f0 82       	st	Z, r15
	ADCB.CH0.CTRL = B8(00000001); //Single ended input mode; No gain
     320:	f0 a2       	lds	r31, 0x90
	ADCB.CH1.CTRL = B8(00000001); //Single ended input mode; No gain
     322:	f0 a6       	lds	r31, 0xb0
	ADCB.CH2.CTRL = B8(00000001); //Single ended input mode; No gain
     324:	f0 aa       	sts	0x90, r31
	ADCB.CH3.CTRL = B8(00000001); //Single ended input mode; No gain
     326:	f0 ae       	sts	0xb0, r31
	
	//STATE
	adc_bank = 0;
     328:	10 92 ba 25 	sts	0x25BA, r1
	adc_head = 0;
     32c:	10 92 b9 25 	sts	0x25B9, r1
	adc_bank_select(adc_bank);
     330:	80 e0       	ldi	r24, 0x00	; 0
     332:	0e 94 2a 01 	call	0x254	; 0x254 <adc_bank_select>
	
	//FLUSH
	ADCA.CTRLA |= 0x02;
     336:	88 81       	ld	r24, Y
     338:	82 60       	ori	r24, 0x02	; 2
     33a:	88 83       	st	Y, r24
	ADCB.CTRLB |= 0x02;
     33c:	f8 01       	movw	r30, r16
     33e:	81 81       	ldd	r24, Z+1	; 0x01
     340:	82 60       	ori	r24, 0x02	; 2
     342:	81 83       	std	Z+1, r24	; 0x01
	adc_convert();
     344:	0e 94 4d 01 	call	0x29a	; 0x29a <adc_convert>
}
     348:	df 91       	pop	r29
     34a:	cf 91       	pop	r28
     34c:	1f 91       	pop	r17
     34e:	0f 91       	pop	r16
     350:	ff 90       	pop	r15
     352:	ef 90       	pop	r14
     354:	df 90       	pop	r13
     356:	cf 90       	pop	r12
     358:	08 95       	ret

0000035a <ftoa>:
//#############################################################
//## ADCs -- DATA PROCESSING
//#############################################################

//Float-to-ASCII: uses scaler to shift position, does not include fractional component, null-terminates result, handles pos & neg numbers
void ftoa(float x, uint16_t scaler, char* result){
     35a:	cf 92       	push	r12
     35c:	df 92       	push	r13
     35e:	ef 92       	push	r14
     360:	ff 92       	push	r15
     362:	cf 93       	push	r28
     364:	df 93       	push	r29
     366:	6b 01       	movw	r12, r22
     368:	7c 01       	movw	r14, r24
     36a:	e9 01       	movw	r28, r18
	x = x * scaler;
     36c:	ba 01       	movw	r22, r20
     36e:	80 e0       	ldi	r24, 0x00	; 0
     370:	90 e0       	ldi	r25, 0x00	; 0
     372:	0e 94 fb 1f 	call	0x3ff6	; 0x3ff6 <__floatunsisf>
     376:	a7 01       	movw	r20, r14
     378:	96 01       	movw	r18, r12
     37a:	0e 94 61 20 	call	0x40c2	; 0x40c2 <__mulsf3>
	utoa((int)x, result, 10);
     37e:	0e 94 ca 1f 	call	0x3f94	; 0x3f94 <__fixsfsi>
     382:	dc 01       	movw	r26, r24
     384:	cb 01       	movw	r24, r22
     386:	be 01       	movw	r22, r28
     388:	4a e0       	ldi	r20, 0x0A	; 10
     38a:	50 e0       	ldi	r21, 0x00	; 0
     38c:	0e 94 ec 20 	call	0x41d8	; 0x41d8 <utoa>
	lcd_console_write(result);
     390:	ce 01       	movw	r24, r28
     392:	0e 94 70 08 	call	0x10e0	; 0x10e0 <lcd_console_write>
}
     396:	df 91       	pop	r29
     398:	cf 91       	pop	r28
     39a:	ff 90       	pop	r15
     39c:	ef 90       	pop	r14
     39e:	df 90       	pop	r13
     3a0:	cf 90       	pop	r12
     3a2:	08 95       	ret

000003a4 <adc_data>:

///result = char[6] = 15324\0 --> 15.324 V or A (don't forget string terminator byte)
void adc_data(uint8_t channel_num, uint8_t measurement_type, char* result){
     3a4:	cf 93       	push	r28
     3a6:	df 93       	push	r29
     3a8:	ea 01       	movw	r28, r20
		uint16_t summation = 0;
		float voltage;
		
	//Average
		for (uint8_t i=0;i<ADC_NUM_CONVERSIONS;i++){
			summation += adc_results[channel_num][i];
     3aa:	a8 2f       	mov	r26, r24
     3ac:	b0 e0       	ldi	r27, 0x00	; 0
	utoa((int)x, result, 10);
	lcd_console_write(result);
}

///result = char[6] = 15324\0 --> 15.324 V or A (don't forget string terminator byte)
void adc_data(uint8_t channel_num, uint8_t measurement_type, char* result){
     3ae:	ad 01       	movw	r20, r26
     3b0:	42 95       	swap	r20
     3b2:	52 95       	swap	r21
     3b4:	50 7f       	andi	r21, 0xF0	; 240
     3b6:	54 27       	eor	r21, r20
     3b8:	40 7f       	andi	r20, 0xF0	; 240
     3ba:	54 27       	eor	r21, r20
     3bc:	fa 01       	movw	r30, r20
     3be:	e7 54       	subi	r30, 0x47	; 71
     3c0:	fb 4d       	sbci	r31, 0xDB	; 219
     3c2:	47 53       	subi	r20, 0x37	; 55
     3c4:	5b 4d       	sbci	r21, 0xDB	; 219
	uint16_t current_offset;
	
	//Init
		uint16_t summation = 0;
     3c6:	80 e0       	ldi	r24, 0x00	; 0
     3c8:	90 e0       	ldi	r25, 0x00	; 0
		float voltage;
		
	//Average
		for (uint8_t i=0;i<ADC_NUM_CONVERSIONS;i++){
			summation += adc_results[channel_num][i];
     3ca:	21 91       	ld	r18, Z+
     3cc:	31 91       	ld	r19, Z+
     3ce:	82 0f       	add	r24, r18
     3d0:	93 1f       	adc	r25, r19
	//Init
		uint16_t summation = 0;
		float voltage;
		
	//Average
		for (uint8_t i=0;i<ADC_NUM_CONVERSIONS;i++){
     3d2:	e4 17       	cp	r30, r20
     3d4:	f5 07       	cpc	r31, r21
     3d6:	c9 f7       	brne	.-14     	; 0x3ca <adc_data+0x26>
			summation += adc_results[channel_num][i];
		}
		summation = summation >> 3; //divide by 8
     3d8:	96 95       	lsr	r25
     3da:	87 95       	ror	r24
     3dc:	96 95       	lsr	r25
     3de:	87 95       	ror	r24
     3e0:	96 95       	lsr	r25
     3e2:	87 95       	ror	r24
		
	//Offset
		switch (measurement_type){
     3e4:	67 36       	cpi	r22, 0x67	; 103
     3e6:	19 f0       	breq	.+6      	; 0x3ee <adc_data+0x4a>
     3e8:	69 36       	cpi	r22, 0x69	; 105
     3ea:	c9 f4       	brne	.+50     	; 0x41e <adc_data+0x7a>
     3ec:	06 c0       	rjmp	.+12     	; 0x3fa <adc_data+0x56>
			case VOLTAGE:
				if(summation<CODE_ZERO){summation = 0;}
     3ee:	81 3a       	cpi	r24, 0xA1	; 161
     3f0:	91 05       	cpc	r25, r1
     3f2:	e8 f0       	brcs	.+58     	; 0x42e <adc_data+0x8a>
				else{summation -= CODE_ZERO;}
     3f4:	81 5a       	subi	r24, 0xA1	; 161
     3f6:	90 40       	sbci	r25, 0x00	; 0
     3f8:	1c c0       	rjmp	.+56     	; 0x432 <adc_data+0x8e>
				break;
			case CURRENT_HI_RES:
				current_offset = adc_current_offset[(channel_num-1)>>2];
     3fa:	11 97       	sbiw	r26, 0x01	; 1
     3fc:	fd 01       	movw	r30, r26
     3fe:	f5 95       	asr	r31
     400:	e7 95       	ror	r30
     402:	f5 95       	asr	r31
     404:	e7 95       	ror	r30
     406:	ee 0f       	add	r30, r30
     408:	ff 1f       	adc	r31, r31
     40a:	e2 5b       	subi	r30, 0xB2	; 178
     40c:	fe 4d       	sbci	r31, 0xDE	; 222
     40e:	20 81       	ld	r18, Z
     410:	31 81       	ldd	r19, Z+1	; 0x01
				if(summation<current_offset){summation=0;}
     412:	82 17       	cp	r24, r18
     414:	93 07       	cpc	r25, r19
     416:	20 f1       	brcs	.+72     	; 0x460 <adc_data+0xbc>
				else{summation -= current_offset;}
     418:	82 1b       	sub	r24, r18
     41a:	93 0b       	sbc	r25, r19
     41c:	23 c0       	rjmp	.+70     	; 0x464 <adc_data+0xc0>
				//TODO: add scaler for the low-res mode
				break;
		}
		
	//Format & Return
		switch (measurement_type){
     41e:	68 36       	cpi	r22, 0x68	; 104
     420:	09 f4       	brne	.+2      	; 0x424 <adc_data+0x80>
     422:	43 c0       	rjmp	.+134    	; 0x4aa <adc_data+0x106>
     424:	69 36       	cpi	r22, 0x69	; 105
     426:	f1 f0       	breq	.+60     	; 0x464 <adc_data+0xc0>
     428:	67 36       	cpi	r22, 0x67	; 103
     42a:	69 f5       	brne	.+90     	; 0x486 <adc_data+0xe2>
     42c:	02 c0       	rjmp	.+4      	; 0x432 <adc_data+0x8e>
		summation = summation >> 3; //divide by 8
		
	//Offset
		switch (measurement_type){
			case VOLTAGE:
				if(summation<CODE_ZERO){summation = 0;}
     42e:	80 e0       	ldi	r24, 0x00	; 0
     430:	90 e0       	ldi	r25, 0x00	; 0
		}
		
	//Format & Return
		switch (measurement_type){
			case VOLTAGE:
				voltage = (float)summation * CODE_TO_VOLTS * VOLTAGE_DESCALE_FACTOR;
     432:	bc 01       	movw	r22, r24
     434:	80 e0       	ldi	r24, 0x00	; 0
     436:	90 e0       	ldi	r25, 0x00	; 0
     438:	0e 94 fb 1f 	call	0x3ff6	; 0x3ff6 <__floatunsisf>
     43c:	27 e9       	ldi	r18, 0x97	; 151
     43e:	38 ea       	ldi	r19, 0xA8	; 168
     440:	4f ef       	ldi	r20, 0xFF	; 255
     442:	59 e3       	ldi	r21, 0x39	; 57
     444:	0e 94 61 20 	call	0x40c2	; 0x40c2 <__mulsf3>
     448:	25 e8       	ldi	r18, 0x85	; 133
     44a:	3b ee       	ldi	r19, 0xEB	; 235
     44c:	41 e5       	ldi	r20, 0x51	; 81
     44e:	51 e4       	ldi	r21, 0x41	; 65
     450:	0e 94 61 20 	call	0x40c2	; 0x40c2 <__mulsf3>
				ftoa(voltage, 100, result);
     454:	44 e6       	ldi	r20, 0x64	; 100
     456:	50 e0       	ldi	r21, 0x00	; 0
     458:	9e 01       	movw	r18, r28
     45a:	0e 94 ad 01 	call	0x35a	; 0x35a <ftoa>
				return;
     45e:	25 c0       	rjmp	.+74     	; 0x4aa <adc_data+0x106>
				if(summation<CODE_ZERO){summation = 0;}
				else{summation -= CODE_ZERO;}
				break;
			case CURRENT_HI_RES:
				current_offset = adc_current_offset[(channel_num-1)>>2];
				if(summation<current_offset){summation=0;}
     460:	80 e0       	ldi	r24, 0x00	; 0
     462:	90 e0       	ldi	r25, 0x00	; 0
			case VOLTAGE:
				voltage = (float)summation * CODE_TO_VOLTS * VOLTAGE_DESCALE_FACTOR;
				ftoa(voltage, 100, result);
				return;
			case CURRENT_HI_RES:
				ftoa((float)summation * CODE_TO_AMPS, 1000, result);
     464:	bc 01       	movw	r22, r24
     466:	80 e0       	ldi	r24, 0x00	; 0
     468:	90 e0       	ldi	r25, 0x00	; 0
     46a:	0e 94 fb 1f 	call	0x3ff6	; 0x3ff6 <__floatunsisf>
     46e:	23 e7       	ldi	r18, 0x73	; 115
     470:	30 e3       	ldi	r19, 0x30	; 48
     472:	4b e1       	ldi	r20, 0x1B	; 27
     474:	5a e3       	ldi	r21, 0x3A	; 58
     476:	0e 94 61 20 	call	0x40c2	; 0x40c2 <__mulsf3>
     47a:	48 ee       	ldi	r20, 0xE8	; 232
     47c:	53 e0       	ldi	r21, 0x03	; 3
     47e:	9e 01       	movw	r18, r28
     480:	0e 94 ad 01 	call	0x35a	; 0x35a <ftoa>
				return;
     484:	12 c0       	rjmp	.+36     	; 0x4aa <adc_data+0x106>
			case CURRENT_LO_RES:
				//TODO: add scaler for the low-res mode
				return;
		}
		utoa((uint16_t)(voltage * 1000), result, 10); //report at millivolt/milliamp resolution
     486:	60 e0       	ldi	r22, 0x00	; 0
     488:	70 e0       	ldi	r23, 0x00	; 0
     48a:	cb 01       	movw	r24, r22
     48c:	20 e0       	ldi	r18, 0x00	; 0
     48e:	30 e0       	ldi	r19, 0x00	; 0
     490:	4a e7       	ldi	r20, 0x7A	; 122
     492:	54 e4       	ldi	r21, 0x44	; 68
     494:	0e 94 61 20 	call	0x40c2	; 0x40c2 <__mulsf3>
     498:	0e 94 cf 1f 	call	0x3f9e	; 0x3f9e <__fixunssfsi>
     49c:	dc 01       	movw	r26, r24
     49e:	cb 01       	movw	r24, r22
     4a0:	be 01       	movw	r22, r28
     4a2:	4a e0       	ldi	r20, 0x0A	; 10
     4a4:	50 e0       	ldi	r21, 0x00	; 0
     4a6:	0e 94 ec 20 	call	0x41d8	; 0x41d8 <utoa>
}
     4aa:	df 91       	pop	r29
     4ac:	cf 91       	pop	r28
     4ae:	08 95       	ret

000004b0 <adc_max>:

//Returns the maximum value seen in the buffer for the specified channel
uint16_t adc_max(uint8_t channel_num){
	uint16_t maxValue = 0;
	for(uint8_t i=0;i<ADC_NUM_CONVERSIONS;i++){
		if (adc_results[channel_num][i]>maxValue){maxValue=adc_results[channel_num][i];};
     4b0:	48 2f       	mov	r20, r24
     4b2:	50 e0       	ldi	r21, 0x00	; 0
		}
		utoa((uint16_t)(voltage * 1000), result, 10); //report at millivolt/milliamp resolution
}

//Returns the maximum value seen in the buffer for the specified channel
uint16_t adc_max(uint8_t channel_num){
     4b4:	42 95       	swap	r20
     4b6:	52 95       	swap	r21
     4b8:	50 7f       	andi	r21, 0xF0	; 240
     4ba:	54 27       	eor	r21, r20
     4bc:	40 7f       	andi	r20, 0xF0	; 240
     4be:	54 27       	eor	r21, r20
     4c0:	fa 01       	movw	r30, r20
     4c2:	e7 54       	subi	r30, 0x47	; 71
     4c4:	fb 4d       	sbci	r31, 0xDB	; 219
     4c6:	47 53       	subi	r20, 0x37	; 55
     4c8:	5b 4d       	sbci	r21, 0xDB	; 219
	uint16_t maxValue = 0;
     4ca:	20 e0       	ldi	r18, 0x00	; 0
     4cc:	30 e0       	ldi	r19, 0x00	; 0
	for(uint8_t i=0;i<ADC_NUM_CONVERSIONS;i++){
		if (adc_results[channel_num][i]>maxValue){maxValue=adc_results[channel_num][i];};
     4ce:	81 91       	ld	r24, Z+
     4d0:	91 91       	ld	r25, Z+
     4d2:	28 17       	cp	r18, r24
     4d4:	39 07       	cpc	r19, r25
     4d6:	08 f4       	brcc	.+2      	; 0x4da <adc_max+0x2a>
     4d8:	9c 01       	movw	r18, r24
}

//Returns the maximum value seen in the buffer for the specified channel
uint16_t adc_max(uint8_t channel_num){
	uint16_t maxValue = 0;
	for(uint8_t i=0;i<ADC_NUM_CONVERSIONS;i++){
     4da:	e4 17       	cp	r30, r20
     4dc:	f5 07       	cpc	r31, r21
     4de:	b9 f7       	brne	.-18     	; 0x4ce <adc_max+0x1e>
		if (adc_results[channel_num][i]>maxValue){maxValue=adc_results[channel_num][i];};
	}		
	return maxValue;
}
     4e0:	82 2f       	mov	r24, r18
     4e2:	93 2f       	mov	r25, r19
     4e4:	08 95       	ret

000004e6 <adjust>:
//## ADCs -- SERVICE
//#############################################################

uint16_t adjust(uint16_t theValue){
	uint16_t working = theValue;
	working = theValue >> 4;
     4e6:	92 95       	swap	r25
     4e8:	82 95       	swap	r24
     4ea:	8f 70       	andi	r24, 0x0F	; 15
     4ec:	89 27       	eor	r24, r25
     4ee:	9f 70       	andi	r25, 0x0F	; 15
     4f0:	89 27       	eor	r24, r25
	if (working < CODE_ZERO){working = CODE_ZERO;}; //clip on overflow
     4f2:	81 3a       	cpi	r24, 0xA1	; 161
     4f4:	91 05       	cpc	r25, r1
     4f6:	10 f4       	brcc	.+4      	; 0x4fc <adjust+0x16>
     4f8:	81 ea       	ldi	r24, 0xA1	; 161
     4fa:	90 e0       	ldi	r25, 0x00	; 0
	return working;
}
     4fc:	08 95       	ret

000004fe <service_adc>:

// Implemented with polling for conversion complete
void service_adc(){	
     4fe:	df 92       	push	r13
     500:	ef 92       	push	r14
     502:	ff 92       	push	r15
     504:	0f 93       	push	r16
     506:	1f 93       	push	r17
     508:	cf 93       	push	r28
     50a:	df 93       	push	r29
	//Did all conversions complete?
	if ((ADCA.INTFLAGS == 0x0F) && (ADCB.INTFLAGS == 0x0F)){
     50c:	e0 e0       	ldi	r30, 0x00	; 0
     50e:	f2 e0       	ldi	r31, 0x02	; 2
     510:	86 81       	ldd	r24, Z+6	; 0x06
     512:	8f 30       	cpi	r24, 0x0F	; 15
     514:	09 f0       	breq	.+2      	; 0x518 <service_adc+0x1a>
     516:	17 c1       	rjmp	.+558    	; 0x746 <service_adc+0x248>
     518:	e0 e4       	ldi	r30, 0x40	; 64
     51a:	f2 e0       	ldi	r31, 0x02	; 2
     51c:	86 81       	ldd	r24, Z+6	; 0x06
     51e:	8f 30       	cpi	r24, 0x0F	; 15
     520:	09 f0       	breq	.+2      	; 0x524 <service_adc+0x26>
     522:	11 c1       	rjmp	.+546    	; 0x746 <service_adc+0x248>
		//Write Results
		if(adc_bank % 2){
     524:	80 91 ba 25 	lds	r24, 0x25BA
     528:	80 ff       	sbrs	r24, 0
     52a:	71 c0       	rjmp	.+226    	; 0x60e <service_adc+0x110>
			//lower bank
			adc_results[0][adc_head] = adjust(ADCA.CH0RES); //PSU Channel A
     52c:	00 91 b9 25 	lds	r16, 0x25B9
     530:	10 e0       	ldi	r17, 0x00	; 0
     532:	c0 e0       	ldi	r28, 0x00	; 0
     534:	d2 e0       	ldi	r29, 0x02	; 2
     536:	88 89       	ldd	r24, Y+16	; 0x10
     538:	99 89       	ldd	r25, Y+17	; 0x11
     53a:	0e 94 73 02 	call	0x4e6	; 0x4e6 <adjust>
     53e:	0f 2e       	mov	r0, r31
     540:	f9 eb       	ldi	r31, 0xB9	; 185
     542:	ef 2e       	mov	r14, r31
     544:	f4 e2       	ldi	r31, 0x24	; 36
     546:	ff 2e       	mov	r15, r31
     548:	f0 2d       	mov	r31, r0
     54a:	f8 01       	movw	r30, r16
     54c:	ee 0f       	add	r30, r30
     54e:	ff 1f       	adc	r31, r31
     550:	ee 0d       	add	r30, r14
     552:	ff 1d       	adc	r31, r15
     554:	80 83       	st	Z, r24
     556:	91 83       	std	Z+1, r25	; 0x01
			adc_results[1][adc_head] = adjust(ADCA.CH1RES);
     558:	8a 89       	ldd	r24, Y+18	; 0x12
     55a:	9b 89       	ldd	r25, Y+19	; 0x13
     55c:	0e 94 73 02 	call	0x4e6	; 0x4e6 <adjust>
     560:	f8 01       	movw	r30, r16
     562:	38 96       	adiw	r30, 0x08	; 8
     564:	ee 0f       	add	r30, r30
     566:	ff 1f       	adc	r31, r31
     568:	ee 0d       	add	r30, r14
     56a:	ff 1d       	adc	r31, r15
     56c:	80 83       	st	Z, r24
     56e:	91 83       	std	Z+1, r25	; 0x01
			adc_results[2][adc_head] = adjust(ADCA.CH2RES);
     570:	8c 89       	ldd	r24, Y+20	; 0x14
     572:	9d 89       	ldd	r25, Y+21	; 0x15
     574:	0e 94 73 02 	call	0x4e6	; 0x4e6 <adjust>
     578:	f8 01       	movw	r30, r16
     57a:	70 96       	adiw	r30, 0x10	; 16
     57c:	ee 0f       	add	r30, r30
     57e:	ff 1f       	adc	r31, r31
     580:	ee 0d       	add	r30, r14
     582:	ff 1d       	adc	r31, r15
     584:	80 83       	st	Z, r24
     586:	91 83       	std	Z+1, r25	; 0x01
			adc_results[3][adc_head] = adjust(ADCA.CH3RES);
     588:	8e 89       	ldd	r24, Y+22	; 0x16
     58a:	9f 89       	ldd	r25, Y+23	; 0x17
     58c:	0e 94 73 02 	call	0x4e6	; 0x4e6 <adjust>
     590:	f8 01       	movw	r30, r16
     592:	78 96       	adiw	r30, 0x18	; 24
     594:	ee 0f       	add	r30, r30
     596:	ff 1f       	adc	r31, r31
     598:	ee 0d       	add	r30, r14
     59a:	ff 1d       	adc	r31, r15
     59c:	80 83       	st	Z, r24
     59e:	91 83       	std	Z+1, r25	; 0x01
			adc_results[8][adc_head] = adjust(ADCB.CH0.RES); //PSU Channel C
     5a0:	c0 e4       	ldi	r28, 0x40	; 64
     5a2:	d2 e0       	ldi	r29, 0x02	; 2
     5a4:	8c a1       	lds	r24, 0x4c
     5a6:	9d a1       	lds	r25, 0x4d
     5a8:	0e 94 73 02 	call	0x4e6	; 0x4e6 <adjust>
     5ac:	f8 01       	movw	r30, r16
     5ae:	e0 5c       	subi	r30, 0xC0	; 192
     5b0:	ff 4f       	sbci	r31, 0xFF	; 255
     5b2:	ee 0f       	add	r30, r30
     5b4:	ff 1f       	adc	r31, r31
     5b6:	ee 0d       	add	r30, r14
     5b8:	ff 1d       	adc	r31, r15
     5ba:	80 83       	st	Z, r24
     5bc:	91 83       	std	Z+1, r25	; 0x01
			adc_results[9][adc_head] = adjust(ADCB.CH1.RES);
     5be:	8c a5       	lds	r24, 0x6c
     5c0:	9d a5       	lds	r25, 0x6d
     5c2:	0e 94 73 02 	call	0x4e6	; 0x4e6 <adjust>
     5c6:	f8 01       	movw	r30, r16
     5c8:	e8 5b       	subi	r30, 0xB8	; 184
     5ca:	ff 4f       	sbci	r31, 0xFF	; 255
     5cc:	ee 0f       	add	r30, r30
     5ce:	ff 1f       	adc	r31, r31
     5d0:	ee 0d       	add	r30, r14
     5d2:	ff 1d       	adc	r31, r15
     5d4:	80 83       	st	Z, r24
     5d6:	91 83       	std	Z+1, r25	; 0x01
			adc_results[10][adc_head] = adjust(ADCB.CH2.RES);
     5d8:	8c a9       	sts	0x4c, r24
     5da:	9d a9       	sts	0x4d, r25
     5dc:	0e 94 73 02 	call	0x4e6	; 0x4e6 <adjust>
     5e0:	f8 01       	movw	r30, r16
     5e2:	e0 5b       	subi	r30, 0xB0	; 176
     5e4:	ff 4f       	sbci	r31, 0xFF	; 255
     5e6:	ee 0f       	add	r30, r30
     5e8:	ff 1f       	adc	r31, r31
     5ea:	ee 0d       	add	r30, r14
     5ec:	ff 1d       	adc	r31, r15
     5ee:	80 83       	st	Z, r24
     5f0:	91 83       	std	Z+1, r25	; 0x01
			adc_results[11][adc_head] = adjust(ADCB.CH3.RES);
     5f2:	8c ad       	sts	0x6c, r24
     5f4:	9d ad       	sts	0x6d, r25
     5f6:	0e 94 73 02 	call	0x4e6	; 0x4e6 <adjust>
     5fa:	08 5a       	subi	r16, 0xA8	; 168
     5fc:	1f 4f       	sbci	r17, 0xFF	; 255
     5fe:	00 0f       	add	r16, r16
     600:	11 1f       	adc	r17, r17
     602:	e0 0e       	add	r14, r16
     604:	f1 1e       	adc	r15, r17
     606:	f7 01       	movw	r30, r14
     608:	80 83       	st	Z, r24
     60a:	91 83       	std	Z+1, r25	; 0x01
     60c:	7a c0       	rjmp	.+244    	; 0x702 <service_adc+0x204>
		}
		else {
			//upper bank
			adc_results[4][adc_head] = adjust(ADCA.CH0.RES); //PSU Channel B
     60e:	d0 90 b9 25 	lds	r13, 0x25B9
     612:	0d 2d       	mov	r16, r13
     614:	10 e0       	ldi	r17, 0x00	; 0
     616:	c0 e0       	ldi	r28, 0x00	; 0
     618:	d2 e0       	ldi	r29, 0x02	; 2
     61a:	8c a1       	lds	r24, 0x4c
     61c:	9d a1       	lds	r25, 0x4d
     61e:	0e 94 73 02 	call	0x4e6	; 0x4e6 <adjust>
     622:	f8 01       	movw	r30, r16
     624:	b0 96       	adiw	r30, 0x20	; 32
     626:	0f 2e       	mov	r0, r31
     628:	f9 eb       	ldi	r31, 0xB9	; 185
     62a:	ef 2e       	mov	r14, r31
     62c:	f4 e2       	ldi	r31, 0x24	; 36
     62e:	ff 2e       	mov	r15, r31
     630:	f0 2d       	mov	r31, r0
     632:	ee 0f       	add	r30, r30
     634:	ff 1f       	adc	r31, r31
     636:	ee 0d       	add	r30, r14
     638:	ff 1d       	adc	r31, r15
     63a:	80 83       	st	Z, r24
     63c:	91 83       	std	Z+1, r25	; 0x01
			adc_results[5][adc_head] = adjust(ADCA.CH1.RES);
     63e:	8c a5       	lds	r24, 0x6c
     640:	9d a5       	lds	r25, 0x6d
     642:	0e 94 73 02 	call	0x4e6	; 0x4e6 <adjust>
     646:	f8 01       	movw	r30, r16
     648:	b8 96       	adiw	r30, 0x28	; 40
     64a:	ee 0f       	add	r30, r30
     64c:	ff 1f       	adc	r31, r31
     64e:	ee 0d       	add	r30, r14
     650:	ff 1d       	adc	r31, r15
     652:	80 83       	st	Z, r24
     654:	91 83       	std	Z+1, r25	; 0x01
			adc_results[6][adc_head] = adjust(ADCA.CH2.RES);
     656:	8c a9       	sts	0x4c, r24
     658:	9d a9       	sts	0x4d, r25
     65a:	0e 94 73 02 	call	0x4e6	; 0x4e6 <adjust>
     65e:	f8 01       	movw	r30, r16
     660:	f0 96       	adiw	r30, 0x30	; 48
     662:	ee 0f       	add	r30, r30
     664:	ff 1f       	adc	r31, r31
     666:	ee 0d       	add	r30, r14
     668:	ff 1d       	adc	r31, r15
     66a:	80 83       	st	Z, r24
     66c:	91 83       	std	Z+1, r25	; 0x01
			adc_results[7][adc_head] = adjust(ADCA.CH3.RES);
     66e:	8c ad       	sts	0x6c, r24
     670:	9d ad       	sts	0x6d, r25
     672:	0e 94 73 02 	call	0x4e6	; 0x4e6 <adjust>
     676:	f8 01       	movw	r30, r16
     678:	f8 96       	adiw	r30, 0x38	; 56
     67a:	ee 0f       	add	r30, r30
     67c:	ff 1f       	adc	r31, r31
     67e:	ee 0d       	add	r30, r14
     680:	ff 1d       	adc	r31, r15
     682:	80 83       	st	Z, r24
     684:	91 83       	std	Z+1, r25	; 0x01
			adc_results[12][adc_head] = adjust(ADCB.CH0.RES); //PSU Channel D
     686:	c0 e4       	ldi	r28, 0x40	; 64
     688:	d2 e0       	ldi	r29, 0x02	; 2
     68a:	8c a1       	lds	r24, 0x4c
     68c:	9d a1       	lds	r25, 0x4d
     68e:	0e 94 73 02 	call	0x4e6	; 0x4e6 <adjust>
     692:	f8 01       	movw	r30, r16
     694:	e0 5a       	subi	r30, 0xA0	; 160
     696:	ff 4f       	sbci	r31, 0xFF	; 255
     698:	ee 0f       	add	r30, r30
     69a:	ff 1f       	adc	r31, r31
     69c:	ee 0d       	add	r30, r14
     69e:	ff 1d       	adc	r31, r15
     6a0:	80 83       	st	Z, r24
     6a2:	91 83       	std	Z+1, r25	; 0x01
			adc_results[13][adc_head] = adjust(ADCB.CH1RES);
     6a4:	8a 89       	ldd	r24, Y+18	; 0x12
     6a6:	9b 89       	ldd	r25, Y+19	; 0x13
     6a8:	0e 94 73 02 	call	0x4e6	; 0x4e6 <adjust>
     6ac:	f8 01       	movw	r30, r16
     6ae:	e8 59       	subi	r30, 0x98	; 152
     6b0:	ff 4f       	sbci	r31, 0xFF	; 255
     6b2:	ee 0f       	add	r30, r30
     6b4:	ff 1f       	adc	r31, r31
     6b6:	ee 0d       	add	r30, r14
     6b8:	ff 1d       	adc	r31, r15
     6ba:	80 83       	st	Z, r24
     6bc:	91 83       	std	Z+1, r25	; 0x01
			adc_results[14][adc_head] = adjust(ADCB.CH2RES);
     6be:	8c 89       	ldd	r24, Y+20	; 0x14
     6c0:	9d 89       	ldd	r25, Y+21	; 0x15
     6c2:	0e 94 73 02 	call	0x4e6	; 0x4e6 <adjust>
     6c6:	f8 01       	movw	r30, r16
     6c8:	e0 59       	subi	r30, 0x90	; 144
     6ca:	ff 4f       	sbci	r31, 0xFF	; 255
     6cc:	ee 0f       	add	r30, r30
     6ce:	ff 1f       	adc	r31, r31
     6d0:	ee 0d       	add	r30, r14
     6d2:	ff 1d       	adc	r31, r15
     6d4:	80 83       	st	Z, r24
     6d6:	91 83       	std	Z+1, r25	; 0x01
			adc_results[15][adc_head] = adjust(ADCB.CH3RES);
     6d8:	8e 89       	ldd	r24, Y+22	; 0x16
     6da:	9f 89       	ldd	r25, Y+23	; 0x17
     6dc:	0e 94 73 02 	call	0x4e6	; 0x4e6 <adjust>
     6e0:	08 58       	subi	r16, 0x88	; 136
     6e2:	1f 4f       	sbci	r17, 0xFF	; 255
     6e4:	00 0f       	add	r16, r16
     6e6:	11 1f       	adc	r17, r17
     6e8:	e0 0e       	add	r14, r16
     6ea:	f1 1e       	adc	r15, r17
     6ec:	f7 01       	movw	r30, r14
     6ee:	80 83       	st	Z, r24
     6f0:	91 83       	std	Z+1, r25	; 0x01
			
			//next column
			adc_head++;
     6f2:	8d 2d       	mov	r24, r13
     6f4:	8f 5f       	subi	r24, 0xFF	; 255
     6f6:	80 93 b9 25 	sts	0x25B9, r24
			if (adc_head >= ADC_NUM_CONVERSIONS){adc_head=0;}
     6fa:	88 30       	cpi	r24, 0x08	; 8
     6fc:	10 f0       	brcs	.+4      	; 0x702 <service_adc+0x204>
     6fe:	10 92 b9 25 	sts	0x25B9, r1
		}
		
		//Clear Flags to Reset ADC
		ADCA.INTFLAGS = 0x0F;
     702:	8f e0       	ldi	r24, 0x0F	; 15
     704:	e0 e0       	ldi	r30, 0x00	; 0
     706:	f2 e0       	ldi	r31, 0x02	; 2
     708:	86 83       	std	Z+6, r24	; 0x06
		ADCB.INTFLAGS = 0x0F;
     70a:	e0 e4       	ldi	r30, 0x40	; 64
     70c:	f2 e0       	ldi	r31, 0x02	; 2
     70e:	86 83       	std	Z+6, r24	; 0x06
		
		//Toggle Channel Bank
		adc_bank++;
     710:	80 91 ba 25 	lds	r24, 0x25BA
     714:	8f 5f       	subi	r24, 0xFF	; 255
     716:	80 93 ba 25 	sts	0x25BA, r24
		adc_bank_select(adc_bank);
     71a:	0e 94 2a 01 	call	0x254	; 0x254 <adc_bank_select>
		
		//Start Next Round of Conversions
		adc_convert();
     71e:	0e 94 4d 01 	call	0x29a	; 0x29a <adc_convert>
		
		//Auto-calibrate Current Offsets (when output is disabled)
		if(STATE_power_output == DISABLE){
     722:	80 91 b8 24 	lds	r24, 0x24B8
     726:	89 32       	cpi	r24, 0x29	; 41
     728:	71 f4       	brne	.+28     	; 0x746 <service_adc+0x248>
     72a:	ce e4       	ldi	r28, 0x4E	; 78
     72c:	d1 e2       	ldi	r29, 0x21	; 33
     72e:	00 e0       	ldi	r16, 0x00	; 0
			for(uint8_t i=0;i<(ADC_NUM_CHANNELS>>2);i++){
				adc_current_offset[i] = adc_max((i<<2)+1);
     730:	80 2f       	mov	r24, r16
     732:	88 0f       	add	r24, r24
     734:	88 0f       	add	r24, r24
     736:	8f 5f       	subi	r24, 0xFF	; 255
     738:	0e 94 58 02 	call	0x4b0	; 0x4b0 <adc_max>
     73c:	89 93       	st	Y+, r24
     73e:	99 93       	st	Y+, r25
		//Start Next Round of Conversions
		adc_convert();
		
		//Auto-calibrate Current Offsets (when output is disabled)
		if(STATE_power_output == DISABLE){
			for(uint8_t i=0;i<(ADC_NUM_CHANNELS>>2);i++){
     740:	0f 5f       	subi	r16, 0xFF	; 255
     742:	04 30       	cpi	r16, 0x04	; 4
     744:	a9 f7       	brne	.-22     	; 0x730 <service_adc+0x232>
				adc_current_offset[i] = adc_max((i<<2)+1);
			}			
		}
	}
}
     746:	df 91       	pop	r29
     748:	cf 91       	pop	r28
     74a:	1f 91       	pop	r17
     74c:	0f 91       	pop	r16
     74e:	ff 90       	pop	r15
     750:	ef 90       	pop	r14
     752:	df 90       	pop	r13
     754:	08 95       	ret

00000756 <brain_debug>:
//#############################################################
//## API
//#############################################################

//Used for testing stuff -- usually via a button so runs on demand
void brain_debug(){
     756:	cf 93       	push	r28
     758:	df 93       	push	r29
     75a:	cd b7       	in	r28, 0x3d	; 61
     75c:	de b7       	in	r29, 0x3e	; 62
     75e:	2c 97       	sbiw	r28, 0x0c	; 12
     760:	cd bf       	out	0x3d, r28	; 61
     762:	de bf       	out	0x3e, r29	; 62
	static uint8_t c = 0;
	char volts[12];
	//uart_enqueue_string(&uctrl, "0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789----100---012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789---<200---012345678901234567890123456789---250>---ABCDEFGHIJ");

	//Channel values (from ADC)
	if (STATE_menu == MENU_CONSOLE){
     764:	80 91 b7 24 	lds	r24, 0x24B7
     768:	82 32       	cpi	r24, 0x22	; 34
     76a:	e1 f4       	brne	.+56     	; 0x7a4 <brain_debug+0x4e>
		c++;
     76c:	80 91 48 21 	lds	r24, 0x2148
     770:	8f 5f       	subi	r24, 0xFF	; 255
     772:	80 93 48 21 	sts	0x2148, r24
		if(c%2){lcd_console_write("Hello World...");}
     776:	80 ff       	sbrs	r24, 0
     778:	05 c0       	rjmp	.+10     	; 0x784 <brain_debug+0x2e>
     77a:	80 e0       	ldi	r24, 0x00	; 0
     77c:	90 e2       	ldi	r25, 0x20	; 32
     77e:	0e 94 70 08 	call	0x10e0	; 0x10e0 <lcd_console_write>
     782:	04 c0       	rjmp	.+8      	; 0x78c <brain_debug+0x36>
		else{lcd_console_write("No! I refuse!");}
     784:	8f e0       	ldi	r24, 0x0F	; 15
     786:	90 e2       	ldi	r25, 0x20	; 32
     788:	0e 94 70 08 	call	0x10e0	; 0x10e0 <lcd_console_write>
		adc_data(8, VOLTAGE, volts);
     78c:	88 e0       	ldi	r24, 0x08	; 8
     78e:	67 e6       	ldi	r22, 0x67	; 103
     790:	ae 01       	movw	r20, r28
     792:	4f 5f       	subi	r20, 0xFF	; 255
     794:	5f 4f       	sbci	r21, 0xFF	; 255
     796:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <adc_data>
		lcd_console_write(volts);
     79a:	ce 01       	movw	r24, r28
     79c:	01 96       	adiw	r24, 0x01	; 1
     79e:	0e 94 70 08 	call	0x10e0	; 0x10e0 <lcd_console_write>
     7a2:	10 c0       	rjmp	.+32     	; 0x7c4 <brain_debug+0x6e>
	}
	else {		
		lcd_command("75 1 1234");
     7a4:	8d e1       	ldi	r24, 0x1D	; 29
     7a6:	90 e2       	ldi	r25, 0x20	; 32
     7a8:	0e 94 24 07 	call	0xe48	; 0xe48 <lcd_command>
		lcd_command("75 11 5678");
     7ac:	87 e2       	ldi	r24, 0x27	; 39
     7ae:	90 e2       	ldi	r25, 0x20	; 32
     7b0:	0e 94 24 07 	call	0xe48	; 0xe48 <lcd_command>
		lcd_command("75 2 8765");
     7b4:	82 e3       	ldi	r24, 0x32	; 50
     7b6:	90 e2       	ldi	r25, 0x20	; 32
     7b8:	0e 94 24 07 	call	0xe48	; 0xe48 <lcd_command>
		lcd_command("75 21 4321");
     7bc:	8c e3       	ldi	r24, 0x3C	; 60
     7be:	90 e2       	ldi	r25, 0x20	; 32
     7c0:	0e 94 24 07 	call	0xe48	; 0xe48 <lcd_command>
	}		
	
}
     7c4:	2c 96       	adiw	r28, 0x0c	; 12
     7c6:	cd bf       	out	0x3d, r28	; 61
     7c8:	de bf       	out	0x3e, r29	; 62
     7ca:	df 91       	pop	r29
     7cc:	cf 91       	pop	r28
     7ce:	08 95       	ret

000007d0 <brain_power_reset>:


//Safe and reset all channels (all disabled, master off)
void brain_power_reset(){
	STATE_power_channels = 0;
     7d0:	10 92 b6 24 	sts	0x24B6, r1
	STATE_power_output = DISABLE;
     7d4:	89 e2       	ldi	r24, 0x29	; 41
     7d6:	80 93 b8 24 	sts	0x24B8, r24
	pwr_main_off(CHANNEL_ALL); //Actually shutoff power
     7da:	8a e3       	ldi	r24, 0x3A	; 58
     7dc:	0e 94 64 09 	call	0x12c8	; 0x12c8 <pwr_main_off>
	fp_led_disable(CHANNEL_M); //Update LED display to indicate this
     7e0:	85 e0       	ldi	r24, 0x05	; 5
     7e2:	0e 94 d6 05 	call	0xbac	; 0xbac <fp_led_disable>
}
     7e6:	08 95       	ret

000007e8 <init_brain>:
//#############################################################
//## INITIALIZATION ROUTINE
//#############################################################

void init_brain(){
	brain_power_reset();
     7e8:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <brain_power_reset>
	STATE_menu = MENU_STARTUP;
     7ec:	8f e1       	ldi	r24, 0x1F	; 31
     7ee:	80 93 b7 24 	sts	0x24B7, r24
}
     7f2:	08 95       	ret

000007f4 <brain_menu_output>:
	}
	brain_menu_update(); //Update channel indicators
}

void brain_menu_output(){
	STATE_menu = MENU_OUTPUT;
     7f4:	80 e2       	ldi	r24, 0x20	; 32
     7f6:	80 93 b7 24 	sts	0x24B7, r24
	lcd_macro("RUN M_OUT");
     7fa:	87 e4       	ldi	r24, 0x47	; 71
     7fc:	90 e2       	ldi	r25, 0x20	; 32
     7fe:	0e 94 b1 07 	call	0xf62	; 0xf62 <lcd_macro>
}
     802:	08 95       	ret

00000804 <brain_menu_control>:

void brain_menu_control(){
	STATE_menu = MENU_CONTROL;
     804:	81 e2       	ldi	r24, 0x21	; 33
     806:	80 93 b7 24 	sts	0x24B7, r24
	lcd_macro("RUN M_CTRL");
     80a:	81 e5       	ldi	r24, 0x51	; 81
     80c:	90 e2       	ldi	r25, 0x20	; 32
     80e:	0e 94 b1 07 	call	0xf62	; 0xf62 <lcd_macro>
}
     812:	08 95       	ret

00000814 <brain_menu_console>:

void brain_menu_console(){
	STATE_menu = MENU_CONSOLE;
     814:	82 e2       	ldi	r24, 0x22	; 34
     816:	80 93 b7 24 	sts	0x24B7, r24
	lcd_macro("RUN M_CON");
     81a:	8c e5       	ldi	r24, 0x5C	; 92
     81c:	90 e2       	ldi	r25, 0x20	; 32
     81e:	0e 94 b1 07 	call	0xf62	; 0xf62 <lcd_macro>
}
     822:	08 95       	ret

00000824 <brain_menu_update>:

//Update channel enabled indicators
void brain_menu_update(){
	if ((STATE_menu == MENU_OUTPUT) || (STATE_menu == MENU_CONTROL)) {
     824:	80 91 b7 24 	lds	r24, 0x24B7
     828:	80 52       	subi	r24, 0x20	; 32
     82a:	82 30       	cpi	r24, 0x02	; 2
     82c:	08 f0       	brcs	.+2      	; 0x830 <brain_menu_update+0xc>
     82e:	54 c0       	rjmp	.+168    	; 0x8d8 <brain_menu_update+0xb4>
		if ((STATE_power_channels & _BV(0)) == 0){lcd_a(LCD_DISABLED);}
     830:	80 91 b6 24 	lds	r24, 0x24B6
     834:	80 fd       	sbrc	r24, 0
     836:	04 c0       	rjmp	.+8      	; 0x840 <brain_menu_update+0x1c>
     838:	81 e2       	ldi	r24, 0x21	; 33
     83a:	0e 94 9d 07 	call	0xf3a	; 0xf3a <lcd_a>
     83e:	0d c0       	rjmp	.+26     	; 0x85a <brain_menu_update+0x36>
		else {
			if (STATE_power_output == DISABLE){lcd_a(LCD_STANDBY);}
     840:	80 91 b8 24 	lds	r24, 0x24B8
     844:	89 32       	cpi	r24, 0x29	; 41
     846:	21 f4       	brne	.+8      	; 0x850 <brain_menu_update+0x2c>
     848:	80 e2       	ldi	r24, 0x20	; 32
     84a:	0e 94 9d 07 	call	0xf3a	; 0xf3a <lcd_a>
     84e:	05 c0       	rjmp	.+10     	; 0x85a <brain_menu_update+0x36>
			else if (STATE_power_output == ENABLE){lcd_a(LCD_ENABLED);}
     850:	8a 32       	cpi	r24, 0x2A	; 42
     852:	19 f4       	brne	.+6      	; 0x85a <brain_menu_update+0x36>
     854:	8f e1       	ldi	r24, 0x1F	; 31
     856:	0e 94 9d 07 	call	0xf3a	; 0xf3a <lcd_a>
		}	
				
		if ((STATE_power_channels & _BV(1)) == 0){lcd_b(LCD_DISABLED);}
     85a:	80 91 b6 24 	lds	r24, 0x24B6
     85e:	81 fd       	sbrc	r24, 1
     860:	04 c0       	rjmp	.+8      	; 0x86a <brain_menu_update+0x46>
     862:	81 e2       	ldi	r24, 0x21	; 33
     864:	0e 94 89 07 	call	0xf12	; 0xf12 <lcd_b>
     868:	0d c0       	rjmp	.+26     	; 0x884 <brain_menu_update+0x60>
		else {
			if (STATE_power_output == DISABLE){lcd_b(LCD_STANDBY);}
     86a:	80 91 b8 24 	lds	r24, 0x24B8
     86e:	89 32       	cpi	r24, 0x29	; 41
     870:	21 f4       	brne	.+8      	; 0x87a <brain_menu_update+0x56>
     872:	80 e2       	ldi	r24, 0x20	; 32
     874:	0e 94 89 07 	call	0xf12	; 0xf12 <lcd_b>
     878:	05 c0       	rjmp	.+10     	; 0x884 <brain_menu_update+0x60>
			else if (STATE_power_output == ENABLE){lcd_b(LCD_ENABLED);}
     87a:	8a 32       	cpi	r24, 0x2A	; 42
     87c:	19 f4       	brne	.+6      	; 0x884 <brain_menu_update+0x60>
     87e:	8f e1       	ldi	r24, 0x1F	; 31
     880:	0e 94 89 07 	call	0xf12	; 0xf12 <lcd_b>
		}	

		if ((STATE_power_channels & _BV(2)) == 0){lcd_c(LCD_DISABLED);}
     884:	80 91 b6 24 	lds	r24, 0x24B6
     888:	82 fd       	sbrc	r24, 2
     88a:	04 c0       	rjmp	.+8      	; 0x894 <brain_menu_update+0x70>
     88c:	81 e2       	ldi	r24, 0x21	; 33
     88e:	0e 94 75 07 	call	0xeea	; 0xeea <lcd_c>
     892:	0d c0       	rjmp	.+26     	; 0x8ae <brain_menu_update+0x8a>
		else {
			if (STATE_power_output == DISABLE){lcd_c(LCD_STANDBY);}
     894:	80 91 b8 24 	lds	r24, 0x24B8
     898:	89 32       	cpi	r24, 0x29	; 41
     89a:	21 f4       	brne	.+8      	; 0x8a4 <brain_menu_update+0x80>
     89c:	80 e2       	ldi	r24, 0x20	; 32
     89e:	0e 94 75 07 	call	0xeea	; 0xeea <lcd_c>
     8a2:	05 c0       	rjmp	.+10     	; 0x8ae <brain_menu_update+0x8a>
			else if (STATE_power_output == ENABLE){lcd_c(LCD_ENABLED);}
     8a4:	8a 32       	cpi	r24, 0x2A	; 42
     8a6:	19 f4       	brne	.+6      	; 0x8ae <brain_menu_update+0x8a>
     8a8:	8f e1       	ldi	r24, 0x1F	; 31
     8aa:	0e 94 75 07 	call	0xeea	; 0xeea <lcd_c>
		}

		if ((STATE_power_channels & _BV(3)) == 0){lcd_d(LCD_DISABLED);}
     8ae:	80 91 b6 24 	lds	r24, 0x24B6
     8b2:	83 fd       	sbrc	r24, 3
     8b4:	04 c0       	rjmp	.+8      	; 0x8be <brain_menu_update+0x9a>
     8b6:	81 e2       	ldi	r24, 0x21	; 33
     8b8:	0e 94 61 07 	call	0xec2	; 0xec2 <lcd_d>
     8bc:	08 95       	ret
		else {
			if (STATE_power_output == DISABLE){lcd_d(LCD_STANDBY);}
     8be:	80 91 b8 24 	lds	r24, 0x24B8
     8c2:	89 32       	cpi	r24, 0x29	; 41
     8c4:	21 f4       	brne	.+8      	; 0x8ce <brain_menu_update+0xaa>
     8c6:	80 e2       	ldi	r24, 0x20	; 32
     8c8:	0e 94 61 07 	call	0xec2	; 0xec2 <lcd_d>
     8cc:	08 95       	ret
			else if (STATE_power_output == ENABLE){lcd_d(LCD_ENABLED);}
     8ce:	8a 32       	cpi	r24, 0x2A	; 42
     8d0:	19 f4       	brne	.+6      	; 0x8d8 <brain_menu_update+0xb4>
     8d2:	8f e1       	ldi	r24, 0x1F	; 31
     8d4:	0e 94 61 07 	call	0xec2	; 0xec2 <lcd_d>
     8d8:	08 95       	ret

000008da <brain_menu_change>:

void brain_button_pressed(){
	if (STATE_menu == MENU_STARTUP){brain_menu_change(0);}
}

void brain_menu_change(uint8_t which_way){
     8da:	cf 93       	push	r28
     8dc:	c8 2f       	mov	r28, r24
	//Announce!
	audio_beep(1, 100);
     8de:	81 e0       	ldi	r24, 0x01	; 1
     8e0:	64 e6       	ldi	r22, 0x64	; 100
     8e2:	70 e0       	ldi	r23, 0x00	; 0
     8e4:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <audio_beep>
	
	//Reset LCD state for menu change (no need to update screen with old stuff)
	init_uart_buffer(&ulcd); //flush outgoing buffer
     8e8:	80 eb       	ldi	r24, 0xB0	; 176
     8ea:	9b e0       	ldi	r25, 0x0B	; 11
     8ec:	0e 94 6f 1d 	call	0x3ade	; 0x3ade <init_uart_buffer>
	lcd_flow_control = LCD_READY; //clear any current transmissions
     8f0:	82 e5       	ldi	r24, 0x52	; 82
     8f2:	80 93 d6 25 	sts	0x25D6, r24
	lcd_last_touch_command = LCD_TOUCH_NONE; //clear out any latent touch actions
     8f6:	85 e1       	ldi	r24, 0x15	; 21
     8f8:	80 93 c7 25 	sts	0x25C7, r24
	lcd_command(""); //send \r to flush any existing partially transmitted commands
     8fc:	86 e6       	ldi	r24, 0x66	; 102
     8fe:	90 e2       	ldi	r25, 0x20	; 32
     900:	0e 94 24 07 	call	0xe48	; 0xe48 <lcd_command>
	
	//Change menu
	switch (STATE_menu){
     904:	80 91 b7 24 	lds	r24, 0x24B7
     908:	80 32       	cpi	r24, 0x20	; 32
     90a:	69 f0       	breq	.+26     	; 0x926 <brain_menu_change+0x4c>
     90c:	81 32       	cpi	r24, 0x21	; 33
     90e:	18 f4       	brcc	.+6      	; 0x916 <brain_menu_change+0x3c>
     910:	8f 31       	cpi	r24, 0x1F	; 31
     912:	31 f5       	brne	.+76     	; 0x960 <brain_menu_change+0x86>
     914:	05 c0       	rjmp	.+10     	; 0x920 <brain_menu_change+0x46>
     916:	81 32       	cpi	r24, 0x21	; 33
     918:	81 f0       	breq	.+32     	; 0x93a <brain_menu_change+0x60>
     91a:	82 32       	cpi	r24, 0x22	; 34
     91c:	09 f5       	brne	.+66     	; 0x960 <brain_menu_change+0x86>
     91e:	17 c0       	rjmp	.+46     	; 0x94e <brain_menu_change+0x74>
		case MENU_STARTUP:
			brain_menu_output();
     920:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <brain_menu_output>
			break;
     924:	1d c0       	rjmp	.+58     	; 0x960 <brain_menu_change+0x86>
		case MENU_OUTPUT:
			if (which_way == QUAD_DOWN){brain_menu_control();}
     926:	ce 32       	cpi	r28, 0x2E	; 46
     928:	19 f4       	brne	.+6      	; 0x930 <brain_menu_change+0x56>
     92a:	0e 94 02 04 	call	0x804	; 0x804 <brain_menu_control>
     92e:	18 c0       	rjmp	.+48     	; 0x960 <brain_menu_change+0x86>
			if (which_way == QUAD_UP){brain_menu_console();}
     930:	cd 32       	cpi	r28, 0x2D	; 45
     932:	b1 f4       	brne	.+44     	; 0x960 <brain_menu_change+0x86>
     934:	0e 94 0a 04 	call	0x814	; 0x814 <brain_menu_console>
     938:	13 c0       	rjmp	.+38     	; 0x960 <brain_menu_change+0x86>
			break;
		case MENU_CONTROL:
			if (which_way == QUAD_DOWN){brain_menu_console();}
     93a:	ce 32       	cpi	r28, 0x2E	; 46
     93c:	19 f4       	brne	.+6      	; 0x944 <brain_menu_change+0x6a>
     93e:	0e 94 0a 04 	call	0x814	; 0x814 <brain_menu_console>
     942:	0e c0       	rjmp	.+28     	; 0x960 <brain_menu_change+0x86>
			if (which_way == QUAD_UP){brain_menu_output();}
     944:	cd 32       	cpi	r28, 0x2D	; 45
     946:	61 f4       	brne	.+24     	; 0x960 <brain_menu_change+0x86>
     948:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <brain_menu_output>
     94c:	09 c0       	rjmp	.+18     	; 0x960 <brain_menu_change+0x86>
			break;
		case MENU_CONSOLE:
			if (which_way == QUAD_DOWN){brain_menu_output();}
     94e:	ce 32       	cpi	r28, 0x2E	; 46
     950:	19 f4       	brne	.+6      	; 0x958 <brain_menu_change+0x7e>
     952:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <brain_menu_output>
     956:	04 c0       	rjmp	.+8      	; 0x960 <brain_menu_change+0x86>
			if (which_way == QUAD_UP){brain_menu_control();}
     958:	cd 32       	cpi	r28, 0x2D	; 45
     95a:	11 f4       	brne	.+4      	; 0x960 <brain_menu_change+0x86>
     95c:	0e 94 02 04 	call	0x804	; 0x804 <brain_menu_control>
			break;
	}
	brain_menu_update(); //Update channel indicators
     960:	0e 94 12 04 	call	0x824	; 0x824 <brain_menu_update>
}
     964:	cf 91       	pop	r28
     966:	08 95       	ret

00000968 <brain_button_pressed>:
	//Update LCD
	brain_menu_update();
}	

void brain_button_pressed(){
	if (STATE_menu == MENU_STARTUP){brain_menu_change(0);}
     968:	80 91 b7 24 	lds	r24, 0x24B7
     96c:	8f 31       	cpi	r24, 0x1F	; 31
     96e:	19 f4       	brne	.+6      	; 0x976 <brain_button_pressed+0xe>
     970:	80 e0       	ldi	r24, 0x00	; 0
     972:	0e 94 6d 04 	call	0x8da	; 0x8da <brain_menu_change>
     976:	08 95       	ret

00000978 <brain_power_master>:
		brain_menu_update();
}

void brain_power_master(){
	//Go to STANDBY (DISABLE)
	if (STATE_power_output == ENABLE){
     978:	80 91 b8 24 	lds	r24, 0x24B8
     97c:	8a 32       	cpi	r24, 0x2A	; 42
     97e:	51 f4       	brne	.+20     	; 0x994 <brain_power_master+0x1c>
			STATE_power_output = DISABLE;
     980:	89 e2       	ldi	r24, 0x29	; 41
     982:	80 93 b8 24 	sts	0x24B8, r24
			pwr_main_off(CHANNEL_ALL);
     986:	8a e3       	ldi	r24, 0x3A	; 58
     988:	0e 94 64 09 	call	0x12c8	; 0x12c8 <pwr_main_off>
			fp_led_disable(CHANNEL_M);			
     98c:	85 e0       	ldi	r24, 0x05	; 5
     98e:	0e 94 d6 05 	call	0xbac	; 0xbac <fp_led_disable>
     992:	0b c0       	rjmp	.+22     	; 0x9aa <brain_power_master+0x32>
	}
	
	//Enable OUTPUT! (ENABLE)
	else {	
		if (STATE_power_output == DISABLE){
     994:	89 32       	cpi	r24, 0x29	; 41
     996:	49 f4       	brne	.+18     	; 0x9aa <brain_power_master+0x32>
			STATE_power_output = ENABLE;
     998:	8a e2       	ldi	r24, 0x2A	; 42
     99a:	80 93 b8 24 	sts	0x24B8, r24
			pwr_main_on(CHANNEL_RESTORE);
     99e:	8c e3       	ldi	r24, 0x3C	; 60
     9a0:	0e 94 2e 09 	call	0x125c	; 0x125c <pwr_main_on>
			fp_led_enable(CHANNEL_M);
     9a4:	85 e0       	ldi	r24, 0x05	; 5
     9a6:	0e 94 aa 05 	call	0xb54	; 0xb54 <fp_led_enable>
		}			
	}
	
	//Update LCD
	brain_menu_update();
     9aa:	0e 94 12 04 	call	0x824	; 0x824 <brain_menu_update>
}	
     9ae:	08 95       	ret

000009b0 <brain_power>:
	pwr_main_off(CHANNEL_ALL); //Actually shutoff power
	fp_led_disable(CHANNEL_M); //Update LED display to indicate this
}

//Toggle power state and effect the new behavior
void brain_power(uint8_t which){
     9b0:	cf 93       	push	r28
     9b2:	c8 2f       	mov	r28, r24
	//Toggle channel state
		STATE_power_channels ^= _BV(which); 
     9b4:	81 e0       	ldi	r24, 0x01	; 1
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	0c 2e       	mov	r0, r28
     9ba:	02 c0       	rjmp	.+4      	; 0x9c0 <brain_power+0x10>
     9bc:	88 0f       	add	r24, r24
     9be:	99 1f       	adc	r25, r25
     9c0:	0a 94       	dec	r0
     9c2:	e2 f7       	brpl	.-8      	; 0x9bc <brain_power+0xc>
     9c4:	90 91 b6 24 	lds	r25, 0x24B6
     9c8:	89 27       	eor	r24, r25
     9ca:	80 93 b6 24 	sts	0x24B6, r24
	//Channel disabled
		if ((STATE_power_channels & _BV(which))==0){		
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	0c 2e       	mov	r0, r28
     9d2:	02 c0       	rjmp	.+4      	; 0x9d8 <brain_power+0x28>
     9d4:	95 95       	asr	r25
     9d6:	87 95       	ror	r24
     9d8:	0a 94       	dec	r0
     9da:	e2 f7       	brpl	.-8      	; 0x9d4 <brain_power+0x24>
     9dc:	80 fd       	sbrc	r24, 0
     9de:	07 c0       	rjmp	.+14     	; 0x9ee <brain_power+0x3e>
			pwr_main_off(which);
     9e0:	8c 2f       	mov	r24, r28
     9e2:	0e 94 64 09 	call	0x12c8	; 0x12c8 <pwr_main_off>
			fp_led_disable(which);
     9e6:	8c 2f       	mov	r24, r28
     9e8:	0e 94 d6 05 	call	0xbac	; 0xbac <fp_led_disable>
     9ec:	0a c0       	rjmp	.+20     	; 0xa02 <brain_power+0x52>
		}	
	//Channel enabled
		else {
			fp_led_enable(which);
     9ee:	8c 2f       	mov	r24, r28
     9f0:	0e 94 aa 05 	call	0xb54	; 0xb54 <fp_led_enable>
			if (STATE_power_output == ENABLE) {pwr_main_on(which);}
     9f4:	80 91 b8 24 	lds	r24, 0x24B8
     9f8:	8a 32       	cpi	r24, 0x2A	; 42
     9fa:	19 f4       	brne	.+6      	; 0xa02 <brain_power+0x52>
     9fc:	8c 2f       	mov	r24, r28
     9fe:	0e 94 2e 09 	call	0x125c	; 0x125c <pwr_main_on>
			if (STATE_power_output == DISABLE) {}		
		}	
	//Update LCD
		brain_menu_update();
     a02:	0e 94 12 04 	call	0x824	; 0x824 <brain_menu_update>
}
     a06:	cf 91       	pop	r28
     a08:	08 95       	ret

00000a0a <service_brain>:

//#############################################################
//## SERVICE ROUTINE
//#############################################################

void service_brain(){
     a0a:	cf 93       	push	r28
     a0c:	df 93       	push	r29
     a0e:	cd b7       	in	r28, 0x3d	; 61
     a10:	de b7       	in	r29, 0x3e	; 62
     a12:	2c 97       	sbiw	r28, 0x0c	; 12
     a14:	cd bf       	out	0x3d, r28	; 61
     a16:	de bf       	out	0x3e, r29	; 62
	static uint16_t menu_update_counter = 0;
	char meter_value[12];
	//Decide when to update Power output measurements
	menu_update_counter++;
     a18:	80 91 49 21 	lds	r24, 0x2149
     a1c:	90 91 4a 21 	lds	r25, 0x214A
     a20:	01 96       	adiw	r24, 0x01	; 1
     a22:	80 93 49 21 	sts	0x2149, r24
     a26:	90 93 4a 21 	sts	0x214A, r25
	if (menu_update_counter >= 500){
     a2a:	21 e0       	ldi	r18, 0x01	; 1
     a2c:	84 3f       	cpi	r24, 0xF4	; 244
     a2e:	92 07       	cpc	r25, r18
     a30:	08 f4       	brcc	.+2      	; 0xa34 <service_brain+0x2a>
     a32:	79 c0       	rjmp	.+242    	; 0xb26 <service_brain+0x11c>
		menu_update_counter = 0;
     a34:	10 92 49 21 	sts	0x2149, r1
     a38:	10 92 4a 21 	sts	0x214A, r1
		switch(STATE_menu){
     a3c:	80 91 b7 24 	lds	r24, 0x24B7
     a40:	80 32       	cpi	r24, 0x20	; 32
     a42:	09 f0       	breq	.+2      	; 0xa46 <service_brain+0x3c>
     a44:	70 c0       	rjmp	.+224    	; 0xb26 <service_brain+0x11c>
			case MENU_OUTPUT:
				adc_data(0, VOLTAGE, meter_value); //A V+
     a46:	80 e0       	ldi	r24, 0x00	; 0
     a48:	67 e6       	ldi	r22, 0x67	; 103
     a4a:	ae 01       	movw	r20, r28
     a4c:	4f 5f       	subi	r20, 0xFF	; 255
     a4e:	5f 4f       	sbci	r21, 0xFF	; 255
     a50:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <adc_data>
				lcd_update("75 1", meter_value);
     a54:	87 e6       	ldi	r24, 0x67	; 103
     a56:	90 e2       	ldi	r25, 0x20	; 32
     a58:	be 01       	movw	r22, r28
     a5a:	6f 5f       	subi	r22, 0xFF	; 255
     a5c:	7f 4f       	sbci	r23, 0xFF	; 255
     a5e:	0e 94 c6 07 	call	0xf8c	; 0xf8c <lcd_update>
				adc_data(1, CURRENT_HI_RES, meter_value); //A I+
     a62:	81 e0       	ldi	r24, 0x01	; 1
     a64:	69 e6       	ldi	r22, 0x69	; 105
     a66:	ae 01       	movw	r20, r28
     a68:	4f 5f       	subi	r20, 0xFF	; 255
     a6a:	5f 4f       	sbci	r21, 0xFF	; 255
     a6c:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <adc_data>
				lcd_update("75 11", meter_value);
     a70:	8c e6       	ldi	r24, 0x6C	; 108
     a72:	90 e2       	ldi	r25, 0x20	; 32
     a74:	be 01       	movw	r22, r28
     a76:	6f 5f       	subi	r22, 0xFF	; 255
     a78:	7f 4f       	sbci	r23, 0xFF	; 255
     a7a:	0e 94 c6 07 	call	0xf8c	; 0xf8c <lcd_update>
				adc_data(4, VOLTAGE, meter_value); //B V+
     a7e:	84 e0       	ldi	r24, 0x04	; 4
     a80:	67 e6       	ldi	r22, 0x67	; 103
     a82:	ae 01       	movw	r20, r28
     a84:	4f 5f       	subi	r20, 0xFF	; 255
     a86:	5f 4f       	sbci	r21, 0xFF	; 255
     a88:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <adc_data>
				lcd_update("75 2", meter_value);
     a8c:	82 e7       	ldi	r24, 0x72	; 114
     a8e:	90 e2       	ldi	r25, 0x20	; 32
     a90:	be 01       	movw	r22, r28
     a92:	6f 5f       	subi	r22, 0xFF	; 255
     a94:	7f 4f       	sbci	r23, 0xFF	; 255
     a96:	0e 94 c6 07 	call	0xf8c	; 0xf8c <lcd_update>
				adc_data(5, CURRENT_HI_RES, meter_value); //B I+
     a9a:	85 e0       	ldi	r24, 0x05	; 5
     a9c:	69 e6       	ldi	r22, 0x69	; 105
     a9e:	ae 01       	movw	r20, r28
     aa0:	4f 5f       	subi	r20, 0xFF	; 255
     aa2:	5f 4f       	sbci	r21, 0xFF	; 255
     aa4:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <adc_data>
				lcd_update("75 21", meter_value);
     aa8:	87 e7       	ldi	r24, 0x77	; 119
     aaa:	90 e2       	ldi	r25, 0x20	; 32
     aac:	be 01       	movw	r22, r28
     aae:	6f 5f       	subi	r22, 0xFF	; 255
     ab0:	7f 4f       	sbci	r23, 0xFF	; 255
     ab2:	0e 94 c6 07 	call	0xf8c	; 0xf8c <lcd_update>
				adc_data(8, VOLTAGE, meter_value); //C V+
     ab6:	88 e0       	ldi	r24, 0x08	; 8
     ab8:	67 e6       	ldi	r22, 0x67	; 103
     aba:	ae 01       	movw	r20, r28
     abc:	4f 5f       	subi	r20, 0xFF	; 255
     abe:	5f 4f       	sbci	r21, 0xFF	; 255
     ac0:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <adc_data>
				lcd_update("75 3", meter_value);
     ac4:	8d e7       	ldi	r24, 0x7D	; 125
     ac6:	90 e2       	ldi	r25, 0x20	; 32
     ac8:	be 01       	movw	r22, r28
     aca:	6f 5f       	subi	r22, 0xFF	; 255
     acc:	7f 4f       	sbci	r23, 0xFF	; 255
     ace:	0e 94 c6 07 	call	0xf8c	; 0xf8c <lcd_update>
				adc_data(9, CURRENT_HI_RES, meter_value); //C I+
     ad2:	89 e0       	ldi	r24, 0x09	; 9
     ad4:	69 e6       	ldi	r22, 0x69	; 105
     ad6:	ae 01       	movw	r20, r28
     ad8:	4f 5f       	subi	r20, 0xFF	; 255
     ada:	5f 4f       	sbci	r21, 0xFF	; 255
     adc:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <adc_data>
				lcd_update("75 31", meter_value);
     ae0:	82 e8       	ldi	r24, 0x82	; 130
     ae2:	90 e2       	ldi	r25, 0x20	; 32
     ae4:	be 01       	movw	r22, r28
     ae6:	6f 5f       	subi	r22, 0xFF	; 255
     ae8:	7f 4f       	sbci	r23, 0xFF	; 255
     aea:	0e 94 c6 07 	call	0xf8c	; 0xf8c <lcd_update>
				adc_data(12, VOLTAGE, meter_value); //D V+
     aee:	8c e0       	ldi	r24, 0x0C	; 12
     af0:	67 e6       	ldi	r22, 0x67	; 103
     af2:	ae 01       	movw	r20, r28
     af4:	4f 5f       	subi	r20, 0xFF	; 255
     af6:	5f 4f       	sbci	r21, 0xFF	; 255
     af8:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <adc_data>
				lcd_update("75 4", meter_value);
     afc:	88 e8       	ldi	r24, 0x88	; 136
     afe:	90 e2       	ldi	r25, 0x20	; 32
     b00:	be 01       	movw	r22, r28
     b02:	6f 5f       	subi	r22, 0xFF	; 255
     b04:	7f 4f       	sbci	r23, 0xFF	; 255
     b06:	0e 94 c6 07 	call	0xf8c	; 0xf8c <lcd_update>
				adc_data(13, CURRENT_HI_RES, meter_value); //D I+
     b0a:	8d e0       	ldi	r24, 0x0D	; 13
     b0c:	69 e6       	ldi	r22, 0x69	; 105
     b0e:	ae 01       	movw	r20, r28
     b10:	4f 5f       	subi	r20, 0xFF	; 255
     b12:	5f 4f       	sbci	r21, 0xFF	; 255
     b14:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <adc_data>
				lcd_update("75 41", meter_value);
     b18:	8d e8       	ldi	r24, 0x8D	; 141
     b1a:	90 e2       	ldi	r25, 0x20	; 32
     b1c:	be 01       	movw	r22, r28
     b1e:	6f 5f       	subi	r22, 0xFF	; 255
     b20:	7f 4f       	sbci	r23, 0xFF	; 255
     b22:	0e 94 c6 07 	call	0xf8c	; 0xf8c <lcd_update>
				break;
		}
		
	}
	
}
     b26:	2c 96       	adiw	r28, 0x0c	; 12
     b28:	cd bf       	out	0x3d, r28	; 61
     b2a:	de bf       	out	0x3e, r29	; 62
     b2c:	df 91       	pop	r29
     b2e:	cf 91       	pop	r28
     b30:	08 95       	ret

00000b32 <init_fp>:
		PK6: Rotary Channel A
		PK7: Rotary Channel B
				
	*/
	//LED's
	PORTJ.PIN1CTRL = B8(01000000); //invert pin logic
     b32:	e0 e0       	ldi	r30, 0x00	; 0
     b34:	f7 e0       	ldi	r31, 0x07	; 7
     b36:	80 e4       	ldi	r24, 0x40	; 64
     b38:	81 8b       	std	Z+17, r24	; 0x11
	PORTJ.PIN2CTRL = B8(01000000); //invert pin logic
     b3a:	82 8b       	std	Z+18, r24	; 0x12
	PORTJ.PIN3CTRL = B8(01000000); //invert pin logic
     b3c:	83 8b       	std	Z+19, r24	; 0x13
	PORTJ.PIN4CTRL = B8(01000000); //invert pin logic
     b3e:	84 8b       	std	Z+20, r24	; 0x14
	PORTJ.OUTCLR = B8(00011110); //pins to low (LED's off, remember: inverted!)	
     b40:	8e e1       	ldi	r24, 0x1E	; 30
     b42:	86 83       	std	Z+6, r24	; 0x06
	PORTJ.DIRSET = B8(00011110); //pins to output	
     b44:	81 83       	std	Z+1, r24	; 0x01
	
	fp_channel_mask = 0x00;
     b46:	10 92 c8 25 	sts	0x25C8, r1
	
	//Switches
	//	SciPSU FP switches have hardware pull-up and hardware debounce
	PORTK.DIRCLR = B8(00111111); //This is the default condition, but just to be safe
     b4a:	8f e3       	ldi	r24, 0x3F	; 63
     b4c:	e0 e2       	ldi	r30, 0x20	; 32
     b4e:	f7 e0       	ldi	r31, 0x07	; 7
     b50:	82 83       	std	Z+2, r24	; 0x02
}
     b52:	08 95       	ret

00000b54 <fp_led_enable>:
//## LEDs
//#############################################################

// Uses generic defines for channel (see main.h)
void fp_led_enable(uint8_t which){
	switch(which){
     b54:	82 30       	cpi	r24, 0x02	; 2
     b56:	b1 f0       	breq	.+44     	; 0xb84 <fp_led_enable+0x30>
     b58:	83 30       	cpi	r24, 0x03	; 3
     b5a:	28 f4       	brcc	.+10     	; 0xb66 <fp_led_enable+0x12>
     b5c:	88 23       	and	r24, r24
     b5e:	41 f0       	breq	.+16     	; 0xb70 <fp_led_enable+0x1c>
     b60:	81 30       	cpi	r24, 0x01	; 1
     b62:	19 f5       	brne	.+70     	; 0xbaa <fp_led_enable+0x56>
     b64:	0a c0       	rjmp	.+20     	; 0xb7a <fp_led_enable+0x26>
     b66:	83 30       	cpi	r24, 0x03	; 3
     b68:	91 f0       	breq	.+36     	; 0xb8e <fp_led_enable+0x3a>
     b6a:	85 30       	cpi	r24, 0x05	; 5
     b6c:	f1 f4       	brne	.+60     	; 0xbaa <fp_led_enable+0x56>
     b6e:	14 c0       	rjmp	.+40     	; 0xb98 <fp_led_enable+0x44>
		case CHANNEL_A:
			PORTJ.OUTSET = B8(00000010); //PJ1
     b70:	82 e0       	ldi	r24, 0x02	; 2
     b72:	e0 e0       	ldi	r30, 0x00	; 0
     b74:	f7 e0       	ldi	r31, 0x07	; 7
     b76:	85 83       	std	Z+5, r24	; 0x05
			break;
     b78:	08 95       	ret
		case CHANNEL_B:
			PORTJ.OUTSET = B8(00000100); //PJ2
     b7a:	84 e0       	ldi	r24, 0x04	; 4
     b7c:	e0 e0       	ldi	r30, 0x00	; 0
     b7e:	f7 e0       	ldi	r31, 0x07	; 7
     b80:	85 83       	std	Z+5, r24	; 0x05
			break;
     b82:	08 95       	ret
		case CHANNEL_C:
			PORTJ.OUTSET = B8(00001000); //PJ3
     b84:	88 e0       	ldi	r24, 0x08	; 8
     b86:	e0 e0       	ldi	r30, 0x00	; 0
     b88:	f7 e0       	ldi	r31, 0x07	; 7
     b8a:	85 83       	std	Z+5, r24	; 0x05
			break;
     b8c:	08 95       	ret
		case CHANNEL_D:
			PORTJ.OUTSET = B8(00010000); //PJ4
     b8e:	80 e1       	ldi	r24, 0x10	; 16
     b90:	e0 e0       	ldi	r30, 0x00	; 0
     b92:	f7 e0       	ldi	r31, 0x07	; 7
     b94:	85 83       	std	Z+5, r24	; 0x05
			break;			
     b96:	08 95       	ret
		case CHANNEL_M:
			PORTJ.OUTSET = STATE_power_channels << 1; //left shift 1 to move [0-3] state to [1-4] pin locations
     b98:	80 91 b6 24 	lds	r24, 0x24B6
     b9c:	88 0f       	add	r24, r24
     b9e:	e0 e0       	ldi	r30, 0x00	; 0
     ba0:	f7 e0       	ldi	r31, 0x07	; 7
     ba2:	85 83       	std	Z+5, r24	; 0x05
			led_on(LED_3); //Master LED is dimmable so its over in the ui.h module
     ba4:	82 e0       	ldi	r24, 0x02	; 2
     ba6:	0e 94 f5 1e 	call	0x3dea	; 0x3dea <led_on>
     baa:	08 95       	ret

00000bac <fp_led_disable>:
			break;
	}
}

void fp_led_disable(uint8_t which){
	switch(which){
     bac:	82 30       	cpi	r24, 0x02	; 2
     bae:	b1 f0       	breq	.+44     	; 0xbdc <fp_led_disable+0x30>
     bb0:	83 30       	cpi	r24, 0x03	; 3
     bb2:	28 f4       	brcc	.+10     	; 0xbbe <fp_led_disable+0x12>
     bb4:	88 23       	and	r24, r24
     bb6:	41 f0       	breq	.+16     	; 0xbc8 <fp_led_disable+0x1c>
     bb8:	81 30       	cpi	r24, 0x01	; 1
     bba:	09 f5       	brne	.+66     	; 0xbfe <fp_led_disable+0x52>
     bbc:	0a c0       	rjmp	.+20     	; 0xbd2 <fp_led_disable+0x26>
     bbe:	83 30       	cpi	r24, 0x03	; 3
     bc0:	91 f0       	breq	.+36     	; 0xbe6 <fp_led_disable+0x3a>
     bc2:	85 30       	cpi	r24, 0x05	; 5
     bc4:	e1 f4       	brne	.+56     	; 0xbfe <fp_led_disable+0x52>
     bc6:	14 c0       	rjmp	.+40     	; 0xbf0 <fp_led_disable+0x44>
		case CHANNEL_A:
			PORTJ.OUTCLR = B8(00000010); //PJ1
     bc8:	82 e0       	ldi	r24, 0x02	; 2
     bca:	e0 e0       	ldi	r30, 0x00	; 0
     bcc:	f7 e0       	ldi	r31, 0x07	; 7
     bce:	86 83       	std	Z+6, r24	; 0x06
			break;
     bd0:	08 95       	ret
		case CHANNEL_B:
			PORTJ.OUTCLR = B8(00000100); //PJ2
     bd2:	84 e0       	ldi	r24, 0x04	; 4
     bd4:	e0 e0       	ldi	r30, 0x00	; 0
     bd6:	f7 e0       	ldi	r31, 0x07	; 7
     bd8:	86 83       	std	Z+6, r24	; 0x06
			break;
     bda:	08 95       	ret
		case CHANNEL_C:
			PORTJ.OUTCLR = B8(00001000); //PJ3
     bdc:	88 e0       	ldi	r24, 0x08	; 8
     bde:	e0 e0       	ldi	r30, 0x00	; 0
     be0:	f7 e0       	ldi	r31, 0x07	; 7
     be2:	86 83       	std	Z+6, r24	; 0x06
			break;
     be4:	08 95       	ret
		case CHANNEL_D:
			PORTJ.OUTCLR = B8(00010000); //PJ4
     be6:	80 e1       	ldi	r24, 0x10	; 16
     be8:	e0 e0       	ldi	r30, 0x00	; 0
     bea:	f7 e0       	ldi	r31, 0x07	; 7
     bec:	86 83       	std	Z+6, r24	; 0x06
			break;
     bee:	08 95       	ret
		case CHANNEL_M:
			fp_counter = 0; fp_counter2 = 0; fp_updown = 1;
     bf0:	10 92 c5 25 	sts	0x25C5, r1
     bf4:	10 92 ca 25 	sts	0x25CA, r1
     bf8:	81 e0       	ldi	r24, 0x01	; 1
     bfa:	80 93 cb 25 	sts	0x25CB, r24
     bfe:	08 95       	ret

00000c00 <_fp_read_switches>:
//#############################################################

//t0 = most recent --> t2 = oldest values
void _fp_read_switches(){
	//rotate
	fp_button_time2 = fp_button_time1;
     c00:	80 91 c6 25 	lds	r24, 0x25C6
     c04:	80 93 c4 25 	sts	0x25C4, r24
	fp_button_time1 = fp_button_time0;
     c08:	80 91 d4 25 	lds	r24, 0x25D4
     c0c:	80 93 c6 25 	sts	0x25C6, r24
	fp_button_time0 = PORTK.IN;
     c10:	e0 e2       	ldi	r30, 0x20	; 32
     c12:	f7 e0       	ldi	r31, 0x07	; 7
     c14:	80 85       	ldd	r24, Z+8	; 0x08
     c16:	80 93 d4 25 	sts	0x25D4, r24
}
     c1a:	08 95       	ret

00000c1c <_fp_switch_pressed>:

//Button was pressed
void _fp_switch_pressed(uint8_t which){
     c1c:	cf 93       	push	r28
     c1e:	c8 2f       	mov	r28, r24
	audio_beep(1, 10);
     c20:	81 e0       	ldi	r24, 0x01	; 1
     c22:	6a e0       	ldi	r22, 0x0A	; 10
     c24:	70 e0       	ldi	r23, 0x00	; 0
     c26:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <audio_beep>
	brain_button_pressed();
     c2a:	0e 94 b4 04 	call	0x968	; 0x968 <brain_button_pressed>
	switch(which){
     c2e:	c2 30       	cpi	r28, 0x02	; 2
     c30:	b1 f0       	breq	.+44     	; 0xc5e <_fp_switch_pressed+0x42>
     c32:	c3 30       	cpi	r28, 0x03	; 3
     c34:	28 f4       	brcc	.+10     	; 0xc40 <_fp_switch_pressed+0x24>
     c36:	cc 23       	and	r28, r28
     c38:	51 f0       	breq	.+20     	; 0xc4e <_fp_switch_pressed+0x32>
     c3a:	c1 30       	cpi	r28, 0x01	; 1
     c3c:	e9 f4       	brne	.+58     	; 0xc78 <_fp_switch_pressed+0x5c>
     c3e:	0b c0       	rjmp	.+22     	; 0xc56 <_fp_switch_pressed+0x3a>
     c40:	c4 30       	cpi	r28, 0x04	; 4
     c42:	a9 f0       	breq	.+42     	; 0xc6e <_fp_switch_pressed+0x52>
     c44:	c4 30       	cpi	r28, 0x04	; 4
     c46:	78 f0       	brcs	.+30     	; 0xc66 <_fp_switch_pressed+0x4a>
     c48:	c5 30       	cpi	r28, 0x05	; 5
     c4a:	b1 f4       	brne	.+44     	; 0xc78 <_fp_switch_pressed+0x5c>
     c4c:	13 c0       	rjmp	.+38     	; 0xc74 <_fp_switch_pressed+0x58>
		case FP_SWITCH_A:
			brain_power(CHANNEL_A);			
     c4e:	80 e0       	ldi	r24, 0x00	; 0
     c50:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <brain_power>
			break;
     c54:	11 c0       	rjmp	.+34     	; 0xc78 <_fp_switch_pressed+0x5c>
		case FP_SWITCH_B:
			brain_power(CHANNEL_B);
     c56:	81 e0       	ldi	r24, 0x01	; 1
     c58:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <brain_power>
			break;
     c5c:	0d c0       	rjmp	.+26     	; 0xc78 <_fp_switch_pressed+0x5c>
		case FP_SWITCH_C:
			brain_power(CHANNEL_C);
     c5e:	82 e0       	ldi	r24, 0x02	; 2
     c60:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <brain_power>
			break;
     c64:	09 c0       	rjmp	.+18     	; 0xc78 <_fp_switch_pressed+0x5c>
		case FP_SWITCH_D:
			brain_power(CHANNEL_D);
     c66:	83 e0       	ldi	r24, 0x03	; 3
     c68:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <brain_power>
			break;
     c6c:	05 c0       	rjmp	.+10     	; 0xc78 <_fp_switch_pressed+0x5c>
		case FP_SWITCH_M:
			brain_power_master();
     c6e:	0e 94 bc 04 	call	0x978	; 0x978 <brain_power_master>
			break;
     c72:	02 c0       	rjmp	.+4      	; 0xc78 <_fp_switch_pressed+0x5c>
		case FP_SWITCH_R:
			brain_debug(); //xxx
     c74:	0e 94 ab 03 	call	0x756	; 0x756 <brain_debug>
			break;		
	}
}
     c78:	cf 91       	pop	r28
     c7a:	08 95       	ret

00000c7c <_fp_switch_released>:
		case FP_SWITCH_M:
			break;
		case FP_SWITCH_R:
			break;
	}
}
     c7c:	08 95       	ret

00000c7e <_process_switch>:

void _process_switch(uint8_t current, uint8_t change, uint8_t which){
	if (current != 0) {return;} //unstable -- wait for things to settle
     c7e:	88 23       	and	r24, r24
     c80:	b9 f4       	brne	.+46     	; 0xcb0 <_process_switch+0x32>
	if ((change & _BV(which)) == 0){return;} //no change
     c82:	70 e0       	ldi	r23, 0x00	; 0
     c84:	04 2e       	mov	r0, r20
     c86:	02 c0       	rjmp	.+4      	; 0xc8c <_process_switch+0xe>
     c88:	75 95       	asr	r23
     c8a:	67 95       	ror	r22
     c8c:	0a 94       	dec	r0
     c8e:	e2 f7       	brpl	.-8      	; 0xc88 <_process_switch+0xa>
     c90:	60 ff       	sbrs	r22, 0
     c92:	0e c0       	rjmp	.+28     	; 0xcb0 <_process_switch+0x32>
	//Pin has been changed!
	if ((fp_button_time0 & _BV(which)) == 0){_fp_switch_pressed(which);}
     c94:	20 91 d4 25 	lds	r18, 0x25D4
     c98:	30 e0       	ldi	r19, 0x00	; 0
     c9a:	04 2e       	mov	r0, r20
     c9c:	02 c0       	rjmp	.+4      	; 0xca2 <_process_switch+0x24>
     c9e:	35 95       	asr	r19
     ca0:	27 95       	ror	r18
     ca2:	0a 94       	dec	r0
     ca4:	e2 f7       	brpl	.-8      	; 0xc9e <_process_switch+0x20>
     ca6:	20 fd       	sbrc	r18, 0
     ca8:	03 c0       	rjmp	.+6      	; 0xcb0 <_process_switch+0x32>
     caa:	84 2f       	mov	r24, r20
     cac:	0e 94 0e 06 	call	0xc1c	; 0xc1c <_fp_switch_pressed>
     cb0:	08 95       	ret

00000cb2 <_fp_process_switches>:
	else {_fp_switch_released(which);}
}

void _fp_process_switches(){
     cb2:	cf 93       	push	r28
     cb4:	df 93       	push	r29
	uint8_t current = fp_button_time0 ^ fp_button_time1;
     cb6:	c0 91 c6 25 	lds	r28, 0x25C6
     cba:	80 91 d4 25 	lds	r24, 0x25D4
     cbe:	c8 27       	eor	r28, r24
	uint8_t change = current ^ fp_button_time2;
     cc0:	d0 91 c4 25 	lds	r29, 0x25C4
     cc4:	dc 27       	eor	r29, r28
	_process_switch(current, change, FP_SWITCH_A);
     cc6:	8c 2f       	mov	r24, r28
     cc8:	6d 2f       	mov	r22, r29
     cca:	40 e0       	ldi	r20, 0x00	; 0
     ccc:	0e 94 3f 06 	call	0xc7e	; 0xc7e <_process_switch>
	_process_switch(current, change, FP_SWITCH_B);
     cd0:	8c 2f       	mov	r24, r28
     cd2:	6d 2f       	mov	r22, r29
     cd4:	41 e0       	ldi	r20, 0x01	; 1
     cd6:	0e 94 3f 06 	call	0xc7e	; 0xc7e <_process_switch>
	_process_switch(current, change, FP_SWITCH_C);
     cda:	8c 2f       	mov	r24, r28
     cdc:	6d 2f       	mov	r22, r29
     cde:	42 e0       	ldi	r20, 0x02	; 2
     ce0:	0e 94 3f 06 	call	0xc7e	; 0xc7e <_process_switch>
	_process_switch(current, change, FP_SWITCH_D);
     ce4:	8c 2f       	mov	r24, r28
     ce6:	6d 2f       	mov	r22, r29
     ce8:	43 e0       	ldi	r20, 0x03	; 3
     cea:	0e 94 3f 06 	call	0xc7e	; 0xc7e <_process_switch>
	_process_switch(current, change, FP_SWITCH_M);
     cee:	8c 2f       	mov	r24, r28
     cf0:	6d 2f       	mov	r22, r29
     cf2:	44 e0       	ldi	r20, 0x04	; 4
     cf4:	0e 94 3f 06 	call	0xc7e	; 0xc7e <_process_switch>
	_process_switch(current, change, FP_SWITCH_R);
     cf8:	8c 2f       	mov	r24, r28
     cfa:	6d 2f       	mov	r22, r29
     cfc:	45 e0       	ldi	r20, 0x05	; 5
     cfe:	0e 94 3f 06 	call	0xc7e	; 0xc7e <_process_switch>
}
     d02:	df 91       	pop	r29
     d04:	cf 91       	pop	r28
     d06:	08 95       	ret

00000d08 <service_fp>:
//#############################################################
//## SERVICE ROUTINE
//#############################################################

void service_fp(){	
	uint8_t fp_channel_mask = STATE_power_channels << 1;
     d08:	90 91 b6 24 	lds	r25, 0x24B6
	//LEDs
	if (STATE_power_output == DISABLE){
     d0c:	80 91 b8 24 	lds	r24, 0x24B8
     d10:	89 32       	cpi	r24, 0x29	; 41
     d12:	09 f0       	breq	.+2      	; 0xd16 <service_fp+0xe>
     d14:	43 c0       	rjmp	.+134    	; 0xd9c <service_fp+0x94>
//#############################################################
//## SERVICE ROUTINE
//#############################################################

void service_fp(){	
	uint8_t fp_channel_mask = STATE_power_channels << 1;
     d16:	99 0f       	add	r25, r25
	//LEDs
	if (STATE_power_output == DISABLE){
				
		//Channel LED's			
		if (fp_counter == 0) {PORTJ.OUTSET = fp_channel_mask;} 
     d18:	80 91 c5 25 	lds	r24, 0x25C5
     d1c:	88 23       	and	r24, r24
     d1e:	39 f4       	brne	.+14     	; 0xd2e <service_fp+0x26>
     d20:	e0 e0       	ldi	r30, 0x00	; 0
     d22:	f7 e0       	ldi	r31, 0x07	; 7
     d24:	95 83       	std	Z+5, r25	; 0x05
		if (fp_counter == FP_ON_LENGTH) {PORTJ.OUTCLR = fp_channel_mask;}
		fp_counter++;
     d26:	8f 5f       	subi	r24, 0xFF	; 255
     d28:	80 93 c5 25 	sts	0x25C5, r24
     d2c:	10 c0       	rjmp	.+32     	; 0xd4e <service_fp+0x46>
	//LEDs
	if (STATE_power_output == DISABLE){
				
		//Channel LED's			
		if (fp_counter == 0) {PORTJ.OUTSET = fp_channel_mask;} 
		if (fp_counter == FP_ON_LENGTH) {PORTJ.OUTCLR = fp_channel_mask;}
     d2e:	81 30       	cpi	r24, 0x01	; 1
     d30:	39 f4       	brne	.+14     	; 0xd40 <service_fp+0x38>
     d32:	e0 e0       	ldi	r30, 0x00	; 0
     d34:	f7 e0       	ldi	r31, 0x07	; 7
     d36:	96 83       	std	Z+6, r25	; 0x06
		fp_counter++;
     d38:	82 e0       	ldi	r24, 0x02	; 2
     d3a:	80 93 c5 25 	sts	0x25C5, r24
     d3e:	07 c0       	rjmp	.+14     	; 0xd4e <service_fp+0x46>
     d40:	8f 5f       	subi	r24, 0xFF	; 255
     d42:	80 93 c5 25 	sts	0x25C5, r24
		if (fp_counter >= FP_ON_LENGTH + FP_OFF_LENGTH) {fp_counter = 0;}
     d46:	8b 30       	cpi	r24, 0x0B	; 11
     d48:	10 f0       	brcs	.+4      	; 0xd4e <service_fp+0x46>
     d4a:	10 92 c5 25 	sts	0x25C5, r1
			
		//Master LED
		fp_counter2 += fp_updown;
     d4e:	80 91 cb 25 	lds	r24, 0x25CB
     d52:	60 91 ca 25 	lds	r22, 0x25CA
     d56:	68 0f       	add	r22, r24
     d58:	60 93 ca 25 	sts	0x25CA, r22
		if (fp_counter2 < 128) {
     d5c:	66 23       	and	r22, r22
     d5e:	34 f0       	brlt	.+12     	; 0xd6c <service_fp+0x64>
			if (fp_counter2 % 2 == 0){
     d60:	60 fd       	sbrc	r22, 0
     d62:	12 c0       	rjmp	.+36     	; 0xd88 <service_fp+0x80>
				led_dim(LED_3, fp_counter2);
     d64:	82 e0       	ldi	r24, 0x02	; 2
     d66:	0e 94 27 1f 	call	0x3e4e	; 0x3e4e <led_dim>
     d6a:	0e c0       	rjmp	.+28     	; 0xd88 <service_fp+0x80>
			}
		}
		else {
			if (fp_updown > 0) {fp_counter2 += 2;}
     d6c:	88 23       	and	r24, r24
     d6e:	21 f0       	breq	.+8      	; 0xd78 <service_fp+0x70>
     d70:	6e 5f       	subi	r22, 0xFE	; 254
     d72:	60 93 ca 25 	sts	0x25CA, r22
     d76:	03 c0       	rjmp	.+6      	; 0xd7e <service_fp+0x76>
			else {fp_counter2 += 2;}
     d78:	6e 5f       	subi	r22, 0xFE	; 254
     d7a:	60 93 ca 25 	sts	0x25CA, r22
			led_dim(LED_3, fp_counter2);
     d7e:	82 e0       	ldi	r24, 0x02	; 2
     d80:	60 91 ca 25 	lds	r22, 0x25CA
     d84:	0e 94 27 1f 	call	0x3e4e	; 0x3e4e <led_dim>
		}			
		if ((fp_counter2 >= 255) || (fp_counter2 <= 0)) {
     d88:	80 91 ca 25 	lds	r24, 0x25CA
     d8c:	81 50       	subi	r24, 0x01	; 1
     d8e:	8e 3f       	cpi	r24, 0xFE	; 254
     d90:	28 f0       	brcs	.+10     	; 0xd9c <service_fp+0x94>
			fp_updown = -1 * fp_updown;
     d92:	80 91 cb 25 	lds	r24, 0x25CB
     d96:	81 95       	neg	r24
     d98:	80 93 cb 25 	sts	0x25CB, r24
		}
	}
	
	//SWITCHes
	_fp_read_switches();
     d9c:	0e 94 00 06 	call	0xc00	; 0xc00 <_fp_read_switches>
	_fp_process_switches();
     da0:	0e 94 59 06 	call	0xcb2	; 0xcb2 <_fp_process_switches>

inline void _fp_process_rotary(){
	static int16_t blanking_counter = -1;
	
	//Software blank rotary dial in menu navigation mode
	if (STATE_menu != MENU_DIAL){
     da4:	80 91 b7 24 	lds	r24, 0x24B7
     da8:	83 32       	cpi	r24, 0x23	; 35
     daa:	a9 f1       	breq	.+106    	; 0xe16 <service_fp+0x10e>
		if (blanking_counter >= 0){
     dac:	80 91 93 20 	lds	r24, 0x2093
     db0:	90 91 94 20 	lds	r25, 0x2094
     db4:	99 23       	and	r25, r25
     db6:	c4 f0       	brlt	.+48     	; 0xde8 <service_fp+0xe0>
			blanking_counter++;
     db8:	01 96       	adiw	r24, 0x01	; 1
     dba:	80 93 93 20 	sts	0x2093, r24
     dbe:	90 93 94 20 	sts	0x2094, r25
			quad_up(); quad_down(); //clear state changes during blanking period
     dc2:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <quad_up>
     dc6:	0e 94 77 0a 	call	0x14ee	; 0x14ee <quad_down>
			if (blanking_counter > 500){blanking_counter = -1;}
     dca:	80 91 93 20 	lds	r24, 0x2093
     dce:	90 91 94 20 	lds	r25, 0x2094
     dd2:	21 e0       	ldi	r18, 0x01	; 1
     dd4:	85 3f       	cpi	r24, 0xF5	; 245
     dd6:	92 07       	cpc	r25, r18
     dd8:	64 f1       	brlt	.+88     	; 0xe32 <service_fp+0x12a>
     dda:	8f ef       	ldi	r24, 0xFF	; 255
     ddc:	9f ef       	ldi	r25, 0xFF	; 255
     dde:	80 93 93 20 	sts	0x2093, r24
     de2:	90 93 94 20 	sts	0x2094, r25
     de6:	08 95       	ret
		}
		else {
			if (quad_up()) {blanking_counter = 0; brain_menu_change(QUAD_UP);}
     de8:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <quad_up>
     dec:	88 23       	and	r24, r24
     dee:	39 f0       	breq	.+14     	; 0xdfe <service_fp+0xf6>
     df0:	10 92 93 20 	sts	0x2093, r1
     df4:	10 92 94 20 	sts	0x2094, r1
     df8:	8d e2       	ldi	r24, 0x2D	; 45
     dfa:	0e 94 6d 04 	call	0x8da	; 0x8da <brain_menu_change>
			if (quad_down()) {blanking_counter = 0; brain_menu_change(QUAD_DOWN);}
     dfe:	0e 94 77 0a 	call	0x14ee	; 0x14ee <quad_down>
     e02:	88 23       	and	r24, r24
     e04:	b1 f0       	breq	.+44     	; 0xe32 <service_fp+0x12a>
     e06:	10 92 93 20 	sts	0x2093, r1
     e0a:	10 92 94 20 	sts	0x2094, r1
     e0e:	8e e2       	ldi	r24, 0x2E	; 46
     e10:	0e 94 6d 04 	call	0x8da	; 0x8da <brain_menu_change>
     e14:	08 95       	ret
		}		
	}
	//Use full dial resolution in adjustment mode
	else {
		if (quad_up()) {brain_menu_change(QUAD_UP);}
     e16:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <quad_up>
     e1a:	88 23       	and	r24, r24
     e1c:	19 f0       	breq	.+6      	; 0xe24 <service_fp+0x11c>
     e1e:	8d e2       	ldi	r24, 0x2D	; 45
     e20:	0e 94 6d 04 	call	0x8da	; 0x8da <brain_menu_change>
		if (quad_down()) {brain_menu_change(QUAD_DOWN);}
     e24:	0e 94 77 0a 	call	0x14ee	; 0x14ee <quad_down>
     e28:	88 23       	and	r24, r24
     e2a:	19 f0       	breq	.+6      	; 0xe32 <service_fp+0x12a>
     e2c:	8e e2       	ldi	r24, 0x2E	; 46
     e2e:	0e 94 6d 04 	call	0x8da	; 0x8da <brain_menu_change>
     e32:	08 95       	ret

00000e34 <init_lcd>:
//#############################################################
//## INITIALIZATION ROUTINE
//#############################################################

void init_lcd(){
	lcd_flow_control = LCD_BUSY; //Wait for LCD to bootup -- queue all commands prior to start
     e34:	8e e4       	ldi	r24, 0x4E	; 78
     e36:	80 93 d6 25 	sts	0x25D6, r24
	lcd_flow_type = LCD_COMMAND;
     e3a:	8a ef       	ldi	r24, 0xFA	; 250
     e3c:	80 93 d5 25 	sts	0x25D5, r24
	lcd_last_touch_command = LCD_TOUCH_NONE;
     e40:	85 e1       	ldi	r24, 0x15	; 21
     e42:	80 93 c7 25 	sts	0x25C7, r24
}
     e46:	08 95       	ret

00000e48 <lcd_command>:
//#############################################################
//## API
//#############################################################

//Only supports RUN (capital) and 31 (PLAY command as number) for detecting macros
void lcd_command(char* theCommand){
     e48:	cf 93       	push	r28
     e4a:	df 93       	push	r29
     e4c:	ec 01       	movw	r28, r24
	uart_enqueue(&ulcd, LCD_COMMAND);
     e4e:	80 eb       	ldi	r24, 0xB0	; 176
     e50:	9b e0       	ldi	r25, 0x0B	; 11
     e52:	6a ef       	ldi	r22, 0xFA	; 250
     e54:	0e 94 f8 1a 	call	0x35f0	; 0x35f0 <uart_enqueue>
	uart_enqueue_string(&ulcd, theCommand);
     e58:	80 eb       	ldi	r24, 0xB0	; 176
     e5a:	9b e0       	ldi	r25, 0x0B	; 11
     e5c:	be 01       	movw	r22, r28
     e5e:	0e 94 bf 18 	call	0x317e	; 0x317e <uart_enqueue_string>
	uart_enqueue(&ulcd, 0x0D); //command terminator
     e62:	80 eb       	ldi	r24, 0xB0	; 176
     e64:	9b e0       	ldi	r25, 0x0B	; 11
     e66:	6d e0       	ldi	r22, 0x0D	; 13
     e68:	0e 94 f8 1a 	call	0x35f0	; 0x35f0 <uart_enqueue>
}
     e6c:	df 91       	pop	r29
     e6e:	cf 91       	pop	r28
     e70:	08 95       	ret

00000e72 <_lcd_bubble>:
	lcd_command("COLOR BLUE");
	lcd_command("BOX 30 30 F");
}

void _lcd_bubble(uint8_t mode){
	switch(mode){
     e72:	8f 31       	cpi	r24, 0x1F	; 31
     e74:	19 f0       	breq	.+6      	; 0xe7c <_lcd_bubble+0xa>
     e76:	80 32       	cpi	r24, 0x20	; 32
     e78:	51 f4       	brne	.+20     	; 0xe8e <_lcd_bubble+0x1c>
     e7a:	05 c0       	rjmp	.+10     	; 0xe86 <_lcd_bubble+0x14>
		case LCD_ENABLED:
		lcd_command("COLOR 69");
     e7c:	85 e9       	ldi	r24, 0x95	; 149
     e7e:	90 e2       	ldi	r25, 0x20	; 32
     e80:	0e 94 24 07 	call	0xe48	; 0xe48 <lcd_command>
		break;
     e84:	04 c0       	rjmp	.+8      	; 0xe8e <_lcd_bubble+0x1c>
		case LCD_STANDBY:
		lcd_command("COLOR 16");
     e86:	8e e9       	ldi	r24, 0x9E	; 158
     e88:	90 e2       	ldi	r25, 0x20	; 32
     e8a:	0e 94 24 07 	call	0xe48	; 0xe48 <lcd_command>
		break;
	}
	lcd_command("CIRCLE 10 F");
     e8e:	87 ea       	ldi	r24, 0xA7	; 167
     e90:	90 e2       	ldi	r25, 0x20	; 32
     e92:	0e 94 24 07 	call	0xe48	; 0xe48 <lcd_command>
	lcd_command("COLOR WHITE");
     e96:	83 eb       	ldi	r24, 0xB3	; 179
     e98:	90 e2       	ldi	r25, 0x20	; 32
     e9a:	0e 94 24 07 	call	0xe48	; 0xe48 <lcd_command>
	lcd_command("CIRCLE 10");
     e9e:	8f eb       	ldi	r24, 0xBF	; 191
     ea0:	90 e2       	ldi	r25, 0x20	; 32
     ea2:	0e 94 24 07 	call	0xe48	; 0xe48 <lcd_command>
	lcd_command("ARC 8 125 145");
     ea6:	89 ec       	ldi	r24, 0xC9	; 201
     ea8:	90 e2       	ldi	r25, 0x20	; 32
     eaa:	0e 94 24 07 	call	0xe48	; 0xe48 <lcd_command>
}
     eae:	08 95       	ret

00000eb0 <_lcd_no_bubble>:
//#############################################################
//## SCREENS: OUTPUT STATUS
//#############################################################

void _lcd_no_bubble(){
	lcd_command("COLOR BLUE");
     eb0:	87 ed       	ldi	r24, 0xD7	; 215
     eb2:	90 e2       	ldi	r25, 0x20	; 32
     eb4:	0e 94 24 07 	call	0xe48	; 0xe48 <lcd_command>
	lcd_command("BOX 30 30 F");
     eb8:	82 ee       	ldi	r24, 0xE2	; 226
     eba:	90 e2       	ldi	r25, 0x20	; 32
     ebc:	0e 94 24 07 	call	0xe48	; 0xe48 <lcd_command>
}
     ec0:	08 95       	ret

00000ec2 <lcd_d>:
		lcd_command("XY 380 161");
		_lcd_bubble(mode);
	}
}

void lcd_d(uint8_t mode){
     ec2:	cf 93       	push	r28
     ec4:	c8 2f       	mov	r28, r24
	if (mode == LCD_DISABLED){
     ec6:	81 32       	cpi	r24, 0x21	; 33
     ec8:	39 f4       	brne	.+14     	; 0xed8 <lcd_d+0x16>
		lcd_command("XY 365 199");
     eca:	8e ee       	ldi	r24, 0xEE	; 238
     ecc:	90 e2       	ldi	r25, 0x20	; 32
     ece:	0e 94 24 07 	call	0xe48	; 0xe48 <lcd_command>
		_lcd_no_bubble();
     ed2:	0e 94 58 07 	call	0xeb0	; 0xeb0 <_lcd_no_bubble>
     ed6:	07 c0       	rjmp	.+14     	; 0xee6 <lcd_d+0x24>
	}
	else {
		lcd_command("XY 380 209");
     ed8:	89 ef       	ldi	r24, 0xF9	; 249
     eda:	90 e2       	ldi	r25, 0x20	; 32
     edc:	0e 94 24 07 	call	0xe48	; 0xe48 <lcd_command>
		_lcd_bubble(mode);
     ee0:	8c 2f       	mov	r24, r28
     ee2:	0e 94 39 07 	call	0xe72	; 0xe72 <_lcd_bubble>
	}
}
     ee6:	cf 91       	pop	r28
     ee8:	08 95       	ret

00000eea <lcd_c>:
		lcd_command("XY 380 113");
		_lcd_bubble(mode);
	}
}

void lcd_c(uint8_t mode){
     eea:	cf 93       	push	r28
     eec:	c8 2f       	mov	r28, r24
	if (mode == LCD_DISABLED){
     eee:	81 32       	cpi	r24, 0x21	; 33
     ef0:	39 f4       	brne	.+14     	; 0xf00 <lcd_c+0x16>
		lcd_command("XY 365 151");
     ef2:	84 e0       	ldi	r24, 0x04	; 4
     ef4:	91 e2       	ldi	r25, 0x21	; 33
     ef6:	0e 94 24 07 	call	0xe48	; 0xe48 <lcd_command>
		_lcd_no_bubble();
     efa:	0e 94 58 07 	call	0xeb0	; 0xeb0 <_lcd_no_bubble>
     efe:	07 c0       	rjmp	.+14     	; 0xf0e <lcd_c+0x24>
	}
	else {
		lcd_command("XY 380 161");
     f00:	8f e0       	ldi	r24, 0x0F	; 15
     f02:	91 e2       	ldi	r25, 0x21	; 33
     f04:	0e 94 24 07 	call	0xe48	; 0xe48 <lcd_command>
		_lcd_bubble(mode);
     f08:	8c 2f       	mov	r24, r28
     f0a:	0e 94 39 07 	call	0xe72	; 0xe72 <_lcd_bubble>
	}
}
     f0e:	cf 91       	pop	r28
     f10:	08 95       	ret

00000f12 <lcd_b>:
		lcd_command("XY 380 65");
		_lcd_bubble(mode);
	}		
}

void lcd_b(uint8_t mode){
     f12:	cf 93       	push	r28
     f14:	c8 2f       	mov	r28, r24
	if (mode == LCD_DISABLED){
     f16:	81 32       	cpi	r24, 0x21	; 33
     f18:	39 f4       	brne	.+14     	; 0xf28 <lcd_b+0x16>
		lcd_command("XY 365 103");
     f1a:	8a e1       	ldi	r24, 0x1A	; 26
     f1c:	91 e2       	ldi	r25, 0x21	; 33
     f1e:	0e 94 24 07 	call	0xe48	; 0xe48 <lcd_command>
		_lcd_no_bubble();
     f22:	0e 94 58 07 	call	0xeb0	; 0xeb0 <_lcd_no_bubble>
     f26:	07 c0       	rjmp	.+14     	; 0xf36 <lcd_b+0x24>
	}
	else {
		lcd_command("XY 380 113");
     f28:	85 e2       	ldi	r24, 0x25	; 37
     f2a:	91 e2       	ldi	r25, 0x21	; 33
     f2c:	0e 94 24 07 	call	0xe48	; 0xe48 <lcd_command>
		_lcd_bubble(mode);
     f30:	8c 2f       	mov	r24, r28
     f32:	0e 94 39 07 	call	0xe72	; 0xe72 <_lcd_bubble>
	}
}
     f36:	cf 91       	pop	r28
     f38:	08 95       	ret

00000f3a <lcd_a>:
	lcd_command("COLOR WHITE");
	lcd_command("CIRCLE 10");
	lcd_command("ARC 8 125 145");
}

void lcd_a(uint8_t mode){
     f3a:	cf 93       	push	r28
     f3c:	c8 2f       	mov	r28, r24
	if (mode == LCD_DISABLED){
     f3e:	81 32       	cpi	r24, 0x21	; 33
     f40:	39 f4       	brne	.+14     	; 0xf50 <lcd_a+0x16>
		lcd_command("XY 365 55");
     f42:	80 e3       	ldi	r24, 0x30	; 48
     f44:	91 e2       	ldi	r25, 0x21	; 33
     f46:	0e 94 24 07 	call	0xe48	; 0xe48 <lcd_command>
		_lcd_no_bubble();		
     f4a:	0e 94 58 07 	call	0xeb0	; 0xeb0 <_lcd_no_bubble>
     f4e:	07 c0       	rjmp	.+14     	; 0xf5e <lcd_a+0x24>
	}
	else {
		lcd_command("XY 380 65");
     f50:	8a e3       	ldi	r24, 0x3A	; 58
     f52:	91 e2       	ldi	r25, 0x21	; 33
     f54:	0e 94 24 07 	call	0xe48	; 0xe48 <lcd_command>
		_lcd_bubble(mode);
     f58:	8c 2f       	mov	r24, r28
     f5a:	0e 94 39 07 	call	0xe72	; 0xe72 <_lcd_bubble>
	}		
}
     f5e:	cf 91       	pop	r28
     f60:	08 95       	ret

00000f62 <lcd_macro>:
	uart_enqueue(&ulcd, LCD_COMMAND);
	uart_enqueue_string(&ulcd, theCommand);
	uart_enqueue(&ulcd, 0x0D); //command terminator
}

void lcd_macro(char* theCommand){
     f62:	cf 93       	push	r28
     f64:	df 93       	push	r29
     f66:	ec 01       	movw	r28, r24
	//Command Header
	uart_enqueue(&ulcd, LCD_MACRO);
     f68:	80 eb       	ldi	r24, 0xB0	; 176
     f6a:	9b e0       	ldi	r25, 0x0B	; 11
     f6c:	6e ef       	ldi	r22, 0xFE	; 254
     f6e:	0e 94 f8 1a 	call	0x35f0	; 0x35f0 <uart_enqueue>
	//Command String
	uart_enqueue_string(&ulcd, theCommand);
     f72:	80 eb       	ldi	r24, 0xB0	; 176
     f74:	9b e0       	ldi	r25, 0x0B	; 11
     f76:	be 01       	movw	r22, r28
     f78:	0e 94 bf 18 	call	0x317e	; 0x317e <uart_enqueue_string>
	//Command Footer (terminator)
	uart_enqueue(&ulcd, 0x0D);
     f7c:	80 eb       	ldi	r24, 0xB0	; 176
     f7e:	9b e0       	ldi	r25, 0x0B	; 11
     f80:	6d e0       	ldi	r22, 0x0D	; 13
     f82:	0e 94 f8 1a 	call	0x35f0	; 0x35f0 <uart_enqueue>
}	
     f86:	df 91       	pop	r29
     f88:	cf 91       	pop	r28
     f8a:	08 95       	ret

00000f8c <lcd_update>:

void lcd_update(char* theCommand, char* theValue){
     f8c:	0f 93       	push	r16
     f8e:	1f 93       	push	r17
     f90:	cf 93       	push	r28
     f92:	df 93       	push	r29
     f94:	ec 01       	movw	r28, r24
     f96:	8b 01       	movw	r16, r22
	uart_enqueue(&ulcd, LCD_COMMAND);
     f98:	80 eb       	ldi	r24, 0xB0	; 176
     f9a:	9b e0       	ldi	r25, 0x0B	; 11
     f9c:	6a ef       	ldi	r22, 0xFA	; 250
     f9e:	0e 94 f8 1a 	call	0x35f0	; 0x35f0 <uart_enqueue>
	uart_enqueue_string(&ulcd, theCommand);
     fa2:	80 eb       	ldi	r24, 0xB0	; 176
     fa4:	9b e0       	ldi	r25, 0x0B	; 11
     fa6:	be 01       	movw	r22, r28
     fa8:	0e 94 bf 18 	call	0x317e	; 0x317e <uart_enqueue_string>
	uart_enqueue(&ulcd, ' ');
     fac:	80 eb       	ldi	r24, 0xB0	; 176
     fae:	9b e0       	ldi	r25, 0x0B	; 11
     fb0:	60 e2       	ldi	r22, 0x20	; 32
     fb2:	0e 94 f8 1a 	call	0x35f0	; 0x35f0 <uart_enqueue>
	uart_enqueue_string(&ulcd, theValue);
     fb6:	80 eb       	ldi	r24, 0xB0	; 176
     fb8:	9b e0       	ldi	r25, 0x0B	; 11
     fba:	b8 01       	movw	r22, r16
     fbc:	0e 94 bf 18 	call	0x317e	; 0x317e <uart_enqueue_string>
	uart_enqueue(&ulcd, 0x0D); //command terminator
     fc0:	80 eb       	ldi	r24, 0xB0	; 176
     fc2:	9b e0       	ldi	r25, 0x0B	; 11
     fc4:	6d e0       	ldi	r22, 0x0D	; 13
     fc6:	0e 94 f8 1a 	call	0x35f0	; 0x35f0 <uart_enqueue>
}
     fca:	df 91       	pop	r29
     fcc:	cf 91       	pop	r28
     fce:	1f 91       	pop	r17
     fd0:	0f 91       	pop	r16
     fd2:	08 95       	ret

00000fd4 <lcd_end_macro>:
//#############################################################
//## TOUCHSCREEN COMMAND BUFFER
//#############################################################

boolean lcd_end_macro(){
	if ((lcd_touch_buffer[0]==0x7E)&&(lcd_touch_buffer[1]==0x27)){return true;}
     fd4:	80 91 ce 25 	lds	r24, 0x25CE
     fd8:	8e 37       	cpi	r24, 0x7E	; 126
     fda:	39 f4       	brne	.+14     	; 0xfea <lcd_end_macro+0x16>
     fdc:	90 91 cf 25 	lds	r25, 0x25CF

//#############################################################
//## TOUCHSCREEN COMMAND BUFFER
//#############################################################

boolean lcd_end_macro(){
     fe0:	81 e0       	ldi	r24, 0x01	; 1
     fe2:	97 32       	cpi	r25, 0x27	; 39
     fe4:	19 f0       	breq	.+6      	; 0xfec <lcd_end_macro+0x18>
     fe6:	80 e0       	ldi	r24, 0x00	; 0
     fe8:	08 95       	ret
	if ((lcd_touch_buffer[0]==0x7E)&&(lcd_touch_buffer[1]==0x27)){return true;}
	else {return false;}
     fea:	80 e0       	ldi	r24, 0x00	; 0
}
     fec:	08 95       	ret

00000fee <lcd_get_touch>:

/// Returns the code for the last thing touched by user
/** Clears the touch history on read*/
uint8_t lcd_get_touch(){
	uint8_t last = lcd_last_touch_command;
     fee:	80 91 c7 25 	lds	r24, 0x25C7
	lcd_last_touch_command = LCD_TOUCH_NONE;
     ff2:	95 e1       	ldi	r25, 0x15	; 21
     ff4:	90 93 c7 25 	sts	0x25C7, r25
	return last;
}
     ff8:	08 95       	ret

00000ffa <lcd_set_touch>:
	
void lcd_set_touch(uint8_t latest){
	//Rotate buffer
	for (uint8_t i=0;i<LCD_TOUCH_BUFFER_LEN-1;i++){lcd_touch_buffer[i+1] = lcd_touch_buffer[i];}
     ffa:	90 91 ce 25 	lds	r25, 0x25CE
     ffe:	90 93 cf 25 	sts	0x25CF, r25
    1002:	90 91 cf 25 	lds	r25, 0x25CF
    1006:	90 93 d0 25 	sts	0x25D0, r25
    100a:	90 91 d0 25 	lds	r25, 0x25D0
    100e:	90 93 d1 25 	sts	0x25D1, r25
    1012:	90 91 d1 25 	lds	r25, 0x25D1
    1016:	90 93 d2 25 	sts	0x25D2, r25
    101a:	90 91 d2 25 	lds	r25, 0x25D2
    101e:	90 93 d3 25 	sts	0x25D3, r25
	//Add to front (0-index)
	lcd_touch_buffer[0] = latest;
    1022:	80 93 ce 25 	sts	0x25CE, r24
	//Analyze (remember reverse order)
	if ((lcd_touch_buffer[0]==' ')&&(lcd_touch_buffer[1]==' ')&&(lcd_touch_buffer[2]==' ')&&(lcd_touch_buffer[3]==' ')){lcd_last_touch_command=LCD_TOUCH_NONE;return;}
    1026:	80 91 ce 25 	lds	r24, 0x25CE
    102a:	80 32       	cpi	r24, 0x20	; 32
    102c:	79 f4       	brne	.+30     	; 0x104c <lcd_set_touch+0x52>
    102e:	80 91 cf 25 	lds	r24, 0x25CF
    1032:	80 32       	cpi	r24, 0x20	; 32
    1034:	59 f4       	brne	.+22     	; 0x104c <lcd_set_touch+0x52>
    1036:	80 91 d0 25 	lds	r24, 0x25D0
    103a:	80 32       	cpi	r24, 0x20	; 32
    103c:	39 f4       	brne	.+14     	; 0x104c <lcd_set_touch+0x52>
    103e:	80 91 d1 25 	lds	r24, 0x25D1
    1042:	80 32       	cpi	r24, 0x20	; 32
    1044:	19 f4       	brne	.+6      	; 0x104c <lcd_set_touch+0x52>
    1046:	85 e1       	ldi	r24, 0x15	; 21
    1048:	80 93 c7 25 	sts	0x25C7, r24
    104c:	08 95       	ret

0000104e <service_lcd>:

void service_lcd(){	
	static uint16_t decimator = 0;

	//Flow control indicator
	if (lcd_flow_control != LCD_READY){led_on(LED_1);}
    104e:	80 91 d6 25 	lds	r24, 0x25D6
    1052:	82 35       	cpi	r24, 0x52	; 82
    1054:	21 f0       	breq	.+8      	; 0x105e <service_lcd+0x10>
    1056:	81 e0       	ldi	r24, 0x01	; 1
    1058:	0e 94 f5 1e 	call	0x3dea	; 0x3dea <led_on>
    105c:	03 c0       	rjmp	.+6      	; 0x1064 <service_lcd+0x16>
	else {led_off(LED_1);}
    105e:	81 e0       	ldi	r24, 0x01	; 1
    1060:	0e 94 11 1f 	call	0x3e22	; 0x3e22 <led_off>
	
	switch(lcd_flow_control){
    1064:	80 91 d6 25 	lds	r24, 0x25D6
    1068:	8f 34       	cpi	r24, 0x4F	; 79
    106a:	19 f0       	breq	.+6      	; 0x1072 <service_lcd+0x24>
    106c:	80 35       	cpi	r24, 0x50	; 80
    106e:	61 f4       	brne	.+24     	; 0x1088 <service_lcd+0x3a>
    1070:	08 c0       	rjmp	.+16     	; 0x1082 <service_lcd+0x34>
		case LCD_DONE_COMMAND:
			if (lcd_flow_type == LCD_COMMAND){lcd_flow_control = LCD_READY;}
    1072:	80 91 d5 25 	lds	r24, 0x25D5
    1076:	8a 3f       	cpi	r24, 0xFA	; 250
    1078:	39 f4       	brne	.+14     	; 0x1088 <service_lcd+0x3a>
    107a:	82 e5       	ldi	r24, 0x52	; 82
    107c:	80 93 d6 25 	sts	0x25D6, r24
    1080:	03 c0       	rjmp	.+6      	; 0x1088 <service_lcd+0x3a>
			break;
		case LCD_DONE_MACRO:
			lcd_flow_control = LCD_READY;
    1082:	82 e5       	ldi	r24, 0x52	; 82
    1084:	80 93 d6 25 	sts	0x25D6, r24
			break;
	}
	
	//Boot up logic (show start screen and let LCD bootup so commands are understood)
	if (decimator < 5000) {decimator++;}
    1088:	80 91 4b 21 	lds	r24, 0x214B
    108c:	90 91 4c 21 	lds	r25, 0x214C
    1090:	23 e1       	ldi	r18, 0x13	; 19
    1092:	88 38       	cpi	r24, 0x88	; 136
    1094:	92 07       	cpc	r25, r18
    1096:	30 f4       	brcc	.+12     	; 0x10a4 <service_lcd+0x56>
    1098:	01 96       	adiw	r24, 0x01	; 1
    109a:	80 93 4b 21 	sts	0x214B, r24
    109e:	90 93 4c 21 	sts	0x214C, r25
    10a2:	08 95       	ret
	else if (decimator == 5000) {lcd_flow_control = LCD_READY; decimator = 9000;}
    10a4:	23 e1       	ldi	r18, 0x13	; 19
    10a6:	88 38       	cpi	r24, 0x88	; 136
    10a8:	92 07       	cpc	r25, r18
    10aa:	49 f4       	brne	.+18     	; 0x10be <service_lcd+0x70>
    10ac:	82 e5       	ldi	r24, 0x52	; 82
    10ae:	80 93 d6 25 	sts	0x25D6, r24
    10b2:	88 e2       	ldi	r24, 0x28	; 40
    10b4:	93 e2       	ldi	r25, 0x23	; 35
    10b6:	80 93 4b 21 	sts	0x214B, r24
    10ba:	90 93 4c 21 	sts	0x214C, r25
    10be:	08 95       	ret

000010c0 <init_lcd_console>:

//#############################################################
//## INITIALIZATION ROUTINE
//#############################################################

void init_lcd_console(){
    10c0:	ee e5       	ldi	r30, 0x5E	; 94
    10c2:	f1 e2       	ldi	r31, 0x21	; 33
    10c4:	ac eb       	ldi	r26, 0xBC	; 188
    10c6:	b5 e2       	ldi	r27, 0x25	; 37
    10c8:	86 eb       	ldi	r24, 0xB6	; 182
    10ca:	94 e2       	ldi	r25, 0x24	; 36
	//ensure that string termination is present in the beginning for blank lines
	for(uint8_t i=0;i<LCD_CONSOLE_NUM_ROWS;i++){
		lcd_console[i][0] = 0;
    10cc:	10 82       	st	Z, r1
		lcd_buffer_dirty[i] = false;
    10ce:	1d 92       	st	X+, r1
    10d0:	e5 59       	subi	r30, 0x95	; 149
    10d2:	ff 4f       	sbci	r31, 0xFF	; 255
//## INITIALIZATION ROUTINE
//#############################################################

void init_lcd_console(){
	//ensure that string termination is present in the beginning for blank lines
	for(uint8_t i=0;i<LCD_CONSOLE_NUM_ROWS;i++){
    10d4:	e8 17       	cp	r30, r24
    10d6:	f9 07       	cpc	r31, r25
    10d8:	c9 f7       	brne	.-14     	; 0x10cc <init_lcd_console+0xc>
		lcd_console[i][0] = 0;
		lcd_buffer_dirty[i] = false;
	}
	lcd_console_head = 0;
    10da:	10 92 bb 25 	sts	0x25BB, r1
}
    10de:	08 95       	ret

000010e0 <lcd_console_write>:

//#############################################################
//## SCREENS: CONSOLE
//#############################################################

void lcd_console_write(char* theString){
    10e0:	ef 92       	push	r14
    10e2:	ff 92       	push	r15
    10e4:	1f 93       	push	r17
    10e6:	cf 93       	push	r28
    10e8:	df 93       	push	r29
    10ea:	7c 01       	movw	r14, r24
	uint8_t head = lcd_console_head;
    10ec:	10 91 bb 25 	lds	r17, 0x25BB
	char* line_buffer = lcd_console[lcd_console_head];
    10f0:	21 2f       	mov	r18, r17
    10f2:	30 e0       	ldi	r19, 0x00	; 0
    10f4:	8b e6       	ldi	r24, 0x6B	; 107
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	28 9f       	mul	r18, r24
    10fa:	a0 01       	movw	r20, r0
    10fc:	29 9f       	mul	r18, r25
    10fe:	50 0d       	add	r21, r0
    1100:	38 9f       	mul	r19, r24
    1102:	50 0d       	add	r21, r0
    1104:	11 24       	eor	r1, r1
    1106:	ea 01       	movw	r28, r20
    1108:	c2 5a       	subi	r28, 0xA2	; 162
    110a:	de 4d       	sbci	r29, 0xDE	; 222
	//Command
	line_buffer[0] = '8'; line_buffer[1]='8'; line_buffer[2]=' '; line_buffer[4]=' '; line_buffer[5]='"';
    110c:	88 e3       	ldi	r24, 0x38	; 56
    110e:	88 83       	st	Y, r24
    1110:	89 83       	std	Y+1, r24	; 0x01
    1112:	80 e2       	ldi	r24, 0x20	; 32
    1114:	8a 83       	std	Y+2, r24	; 0x02
    1116:	8c 83       	std	Y+4, r24	; 0x04
    1118:	82 e2       	ldi	r24, 0x22	; 34
    111a:	8d 83       	std	Y+5, r24	; 0x05
//#############################################################
//## SCREENS: CONSOLE
//#############################################################

void lcd_console_write(char* theString){
	uint8_t head = lcd_console_head;
    111c:	e1 2f       	mov	r30, r17
	char* line_buffer = lcd_console[lcd_console_head];
	//Command
	line_buffer[0] = '8'; line_buffer[1]='8'; line_buffer[2]=' '; line_buffer[4]=' '; line_buffer[5]='"';
    111e:	f1 e3       	ldi	r31, 0x31	; 49
	//Destination
	for(uint8_t i=0;i<LCD_CONSOLE_NUM_ROWS;i++){
		lcd_console[head][3] = 0x31 + i; //id of static control (Row) to write to 
    1120:	4e e5       	ldi	r20, 0x5E	; 94
    1122:	51 e2       	ldi	r21, 0x21	; 33
    1124:	6b e6       	ldi	r22, 0x6B	; 107
    1126:	70 e0       	ldi	r23, 0x00	; 0
    1128:	8e 2f       	mov	r24, r30
    112a:	90 e0       	ldi	r25, 0x00	; 0
    112c:	86 9f       	mul	r24, r22
    112e:	90 01       	movw	r18, r0
    1130:	87 9f       	mul	r24, r23
    1132:	30 0d       	add	r19, r0
    1134:	96 9f       	mul	r25, r22
    1136:	30 0d       	add	r19, r0
    1138:	11 24       	eor	r1, r1
    113a:	24 0f       	add	r18, r20
    113c:	35 1f       	adc	r19, r21
    113e:	d9 01       	movw	r26, r18
    1140:	13 96       	adiw	r26, 0x03	; 3
    1142:	fc 93       	st	X, r31
    1144:	13 97       	sbiw	r26, 0x03	; 3
		head++;
    1146:	ef 5f       	subi	r30, 0xFF	; 255
		if(head >= LCD_CONSOLE_NUM_ROWS){head = 0;}
    1148:	e8 30       	cpi	r30, 0x08	; 8
    114a:	08 f0       	brcs	.+2      	; 0x114e <lcd_console_write+0x6e>
    114c:	e0 e0       	ldi	r30, 0x00	; 0
    114e:	ff 5f       	subi	r31, 0xFF	; 255
	uint8_t head = lcd_console_head;
	char* line_buffer = lcd_console[lcd_console_head];
	//Command
	line_buffer[0] = '8'; line_buffer[1]='8'; line_buffer[2]=' '; line_buffer[4]=' '; line_buffer[5]='"';
	//Destination
	for(uint8_t i=0;i<LCD_CONSOLE_NUM_ROWS;i++){
    1150:	f9 33       	cpi	r31, 0x39	; 57
    1152:	51 f7       	brne	.-44     	; 0x1128 <lcd_console_write+0x48>
		head++;
		if(head >= LCD_CONSOLE_NUM_ROWS){head = 0;}
	}	
	//Content
	for (uint8_t i=0; i<LCD_CONSOLE_NUM_COLS; i++){
		if (theString[i] == 0){
    1154:	f7 01       	movw	r30, r14
    1156:	80 81       	ld	r24, Z
    1158:	88 23       	and	r24, r24
    115a:	31 f5       	brne	.+76     	; 0x11a8 <lcd_console_write+0xc8>
    115c:	05 c0       	rjmp	.+10     	; 0x1168 <lcd_console_write+0x88>
    115e:	94 2f       	mov	r25, r20
    1160:	81 91       	ld	r24, Z+
    1162:	88 23       	and	r24, r24
    1164:	69 f4       	brne	.+26     	; 0x1180 <lcd_console_write+0xa0>
    1166:	03 c0       	rjmp	.+6      	; 0x116e <lcd_console_write+0x8e>
    1168:	40 e0       	ldi	r20, 0x00	; 0
    116a:	50 e0       	ldi	r21, 0x00	; 0
    116c:	90 e0       	ldi	r25, 0x00	; 0
			line_buffer[6+i] = '"';
    116e:	fe 01       	movw	r30, r28
    1170:	e9 0f       	add	r30, r25
    1172:	f1 1d       	adc	r31, r1
    1174:	82 e2       	ldi	r24, 0x22	; 34
    1176:	86 83       	std	Z+6, r24	; 0x06
			line_buffer[6+i+1] = 0;
    1178:	c4 0f       	add	r28, r20
    117a:	d5 1f       	adc	r29, r21
    117c:	1f 82       	std	Y+7, r1	; 0x07
			break;
    117e:	06 c0       	rjmp	.+12     	; 0x118c <lcd_console_write+0xac>
		}
		line_buffer[6+i] = theString[i];
    1180:	8d 93       	st	X+, r24
    1182:	4f 5f       	subi	r20, 0xFF	; 255
    1184:	5f 4f       	sbci	r21, 0xFF	; 255
		lcd_console[head][3] = 0x31 + i; //id of static control (Row) to write to 
		head++;
		if(head >= LCD_CONSOLE_NUM_ROWS){head = 0;}
	}	
	//Content
	for (uint8_t i=0; i<LCD_CONSOLE_NUM_COLS; i++){
    1186:	44 36       	cpi	r20, 0x64	; 100
    1188:	51 05       	cpc	r21, r1
    118a:	49 f7       	brne	.-46     	; 0x115e <lcd_console_write+0x7e>
			line_buffer[6+i+1] = 0;
			break;
		}
		line_buffer[6+i] = theString[i];
	}
	lcd_buffer_dirty[lcd_console_head] = true;
    118c:	ec eb       	ldi	r30, 0xBC	; 188
    118e:	f5 e2       	ldi	r31, 0x25	; 37
    1190:	e1 0f       	add	r30, r17
    1192:	f1 1d       	adc	r31, r1
    1194:	81 e0       	ldi	r24, 0x01	; 1
    1196:	80 83       	st	Z, r24
	//Move row pointer
	lcd_console_head++;
    1198:	1f 5f       	subi	r17, 0xFF	; 255
    119a:	10 93 bb 25 	sts	0x25BB, r17
	if (lcd_console_head >= LCD_CONSOLE_NUM_ROWS){lcd_console_head = 0;}
    119e:	18 30       	cpi	r17, 0x08	; 8
    11a0:	58 f0       	brcs	.+22     	; 0x11b8 <lcd_console_write+0xd8>
    11a2:	10 92 bb 25 	sts	0x25BB, r1
    11a6:	08 c0       	rjmp	.+16     	; 0x11b8 <lcd_console_write+0xd8>
		if (theString[i] == 0){
			line_buffer[6+i] = '"';
			line_buffer[6+i+1] = 0;
			break;
		}
		line_buffer[6+i] = theString[i];
    11a8:	8e 83       	std	Y+6, r24	; 0x06

//#############################################################
//## SCREENS: CONSOLE
//#############################################################

void lcd_console_write(char* theString){
    11aa:	f7 01       	movw	r30, r14
    11ac:	31 96       	adiw	r30, 0x01	; 1
    11ae:	de 01       	movw	r26, r28
    11b0:	17 96       	adiw	r26, 0x07	; 7
    11b2:	41 e0       	ldi	r20, 0x01	; 1
    11b4:	50 e0       	ldi	r21, 0x00	; 0
    11b6:	d3 cf       	rjmp	.-90     	; 0x115e <lcd_console_write+0x7e>
	}
	lcd_buffer_dirty[lcd_console_head] = true;
	//Move row pointer
	lcd_console_head++;
	if (lcd_console_head >= LCD_CONSOLE_NUM_ROWS){lcd_console_head = 0;}
}
    11b8:	df 91       	pop	r29
    11ba:	cf 91       	pop	r28
    11bc:	1f 91       	pop	r17
    11be:	ff 90       	pop	r15
    11c0:	ef 90       	pop	r14
    11c2:	08 95       	ret

000011c4 <service_lcd_console>:
//#############################################################
//## SERVICE ROUTINE
//#############################################################

//Used to refresh the console
void service_lcd_console(){
    11c4:	ef 92       	push	r14
    11c6:	ff 92       	push	r15
    11c8:	0f 93       	push	r16
    11ca:	1f 93       	push	r17
    11cc:	cf 93       	push	r28
	static uint8_t next_row_to_output = 0;
	uint8_t num_rows_output = 0;
	if (STATE_menu != MENU_CONSOLE){return;}
    11ce:	80 91 b7 24 	lds	r24, 0x24B7
    11d2:	82 32       	cpi	r24, 0x22	; 34
    11d4:	b1 f5       	brne	.+108    	; 0x1242 <service_lcd_console+0x7e>
    11d6:	c9 e0       	ldi	r28, 0x09	; 9
	while((uart_count(&ulcd) < 512)&&(num_rows_output<LCD_CONSOLE_NUM_ROWS)){
		if(lcd_buffer_dirty[next_row_to_output]){
    11d8:	0c eb       	ldi	r16, 0xBC	; 188
    11da:	15 e2       	ldi	r17, 0x25	; 37
			lcd_command(lcd_console[next_row_to_output]);
    11dc:	0f 2e       	mov	r0, r31
    11de:	fb e6       	ldi	r31, 0x6B	; 107
    11e0:	ef 2e       	mov	r14, r31
    11e2:	ff 24       	eor	r15, r15
    11e4:	f0 2d       	mov	r31, r0
    11e6:	23 c0       	rjmp	.+70     	; 0x122e <service_lcd_console+0x6a>
void service_lcd_console(){
	static uint8_t next_row_to_output = 0;
	uint8_t num_rows_output = 0;
	if (STATE_menu != MENU_CONSOLE){return;}
	while((uart_count(&ulcd) < 512)&&(num_rows_output<LCD_CONSOLE_NUM_ROWS)){
		if(lcd_buffer_dirty[next_row_to_output]){
    11e8:	20 91 4d 21 	lds	r18, 0x214D
    11ec:	f8 01       	movw	r30, r16
    11ee:	e2 0f       	add	r30, r18
    11f0:	f1 1d       	adc	r31, r1
    11f2:	80 81       	ld	r24, Z
    11f4:	88 23       	and	r24, r24
    11f6:	91 f0       	breq	.+36     	; 0x121c <service_lcd_console+0x58>
			lcd_command(lcd_console[next_row_to_output]);
    11f8:	30 e0       	ldi	r19, 0x00	; 0
    11fa:	2e 9d       	mul	r18, r14
    11fc:	c0 01       	movw	r24, r0
    11fe:	2f 9d       	mul	r18, r15
    1200:	90 0d       	add	r25, r0
    1202:	3e 9d       	mul	r19, r14
    1204:	90 0d       	add	r25, r0
    1206:	11 24       	eor	r1, r1
    1208:	82 5a       	subi	r24, 0xA2	; 162
    120a:	9e 4d       	sbci	r25, 0xDE	; 222
    120c:	0e 94 24 07 	call	0xe48	; 0xe48 <lcd_command>
			lcd_buffer_dirty[next_row_to_output] = false;
    1210:	80 91 4d 21 	lds	r24, 0x214D
    1214:	f8 01       	movw	r30, r16
    1216:	e8 0f       	add	r30, r24
    1218:	f1 1d       	adc	r31, r1
    121a:	10 82       	st	Z, r1
		}
		next_row_to_output++; num_rows_output++;
    121c:	80 91 4d 21 	lds	r24, 0x214D
    1220:	8f 5f       	subi	r24, 0xFF	; 255
    1222:	80 93 4d 21 	sts	0x214D, r24
		if(next_row_to_output>=LCD_CONSOLE_NUM_ROWS){next_row_to_output=0;}
    1226:	88 30       	cpi	r24, 0x08	; 8
    1228:	10 f0       	brcs	.+4      	; 0x122e <service_lcd_console+0x6a>
    122a:	10 92 4d 21 	sts	0x214D, r1
//Used to refresh the console
void service_lcd_console(){
	static uint8_t next_row_to_output = 0;
	uint8_t num_rows_output = 0;
	if (STATE_menu != MENU_CONSOLE){return;}
	while((uart_count(&ulcd) < 512)&&(num_rows_output<LCD_CONSOLE_NUM_ROWS)){
    122e:	80 eb       	ldi	r24, 0xB0	; 176
    1230:	9b e0       	ldi	r25, 0x0B	; 11
    1232:	0e 94 78 18 	call	0x30f0	; 0x30f0 <uart_count>
    1236:	22 e0       	ldi	r18, 0x02	; 2
    1238:	80 30       	cpi	r24, 0x00	; 0
    123a:	92 07       	cpc	r25, r18
    123c:	10 f4       	brcc	.+4      	; 0x1242 <service_lcd_console+0x7e>
    123e:	c1 50       	subi	r28, 0x01	; 1
    1240:	99 f6       	brne	.-90     	; 0x11e8 <service_lcd_console+0x24>
			lcd_buffer_dirty[next_row_to_output] = false;
		}
		next_row_to_output++; num_rows_output++;
		if(next_row_to_output>=LCD_CONSOLE_NUM_ROWS){next_row_to_output=0;}
	}
    1242:	cf 91       	pop	r28
    1244:	1f 91       	pop	r17
    1246:	0f 91       	pop	r16
    1248:	ff 90       	pop	r15
    124a:	ef 90       	pop	r14
    124c:	08 95       	ret

0000124e <init_pwr_main>:

//Handles control of the main power channels

void init_pwr_main(){
	//LED's are located at PF0 (Lower) and PF1 (Upper)
	PORTC.DIRSET = B8(00110011); //pins 0,1,4,5 to output
    124e:	e0 e4       	ldi	r30, 0x40	; 64
    1250:	f6 e0       	ldi	r31, 0x06	; 6
    1252:	83 e3       	ldi	r24, 0x33	; 51
    1254:	81 83       	std	Z+1, r24	; 0x01
	PORTC.OUTCLR = B8(00110011); //pins 0,1,4,5 to low output value (off)
    1256:	86 83       	std	Z+6, r24	; 0x06
		break;
		case CHANNEL_D:
		PORTC.OUTCLR = B8(00100000);
		break;
		case CHANNEL_ALL:
		PORTC.OUTCLR = B8(00110011);
    1258:	86 83       	std	Z+6, r24	; 0x06
void init_pwr_main(){
	//LED's are located at PF0 (Lower) and PF1 (Upper)
	PORTC.DIRSET = B8(00110011); //pins 0,1,4,5 to output
	PORTC.OUTCLR = B8(00110011); //pins 0,1,4,5 to low output value (off)
	pwr_main_off(CHANNEL_ALL);				
}
    125a:	08 95       	ret

0000125c <pwr_main_on>:
//## OUTPUT MUTE
//#############################################################

void inline pwr_main_on(uint8_t which){
	uint8_t mask;
	switch(which){
    125c:	82 30       	cpi	r24, 0x02	; 2
    125e:	c1 f0       	breq	.+48     	; 0x1290 <pwr_main_on+0x34>
    1260:	83 30       	cpi	r24, 0x03	; 3
    1262:	28 f4       	brcc	.+10     	; 0x126e <pwr_main_on+0x12>
    1264:	88 23       	and	r24, r24
    1266:	51 f0       	breq	.+20     	; 0x127c <pwr_main_on+0x20>
    1268:	81 30       	cpi	r24, 0x01	; 1
    126a:	69 f5       	brne	.+90     	; 0x12c6 <pwr_main_on+0x6a>
    126c:	0c c0       	rjmp	.+24     	; 0x1286 <pwr_main_on+0x2a>
    126e:	8a 33       	cpi	r24, 0x3A	; 58
    1270:	c9 f0       	breq	.+50     	; 0x12a4 <pwr_main_on+0x48>
    1272:	8c 33       	cpi	r24, 0x3C	; 60
    1274:	e1 f0       	breq	.+56     	; 0x12ae <pwr_main_on+0x52>
    1276:	83 30       	cpi	r24, 0x03	; 3
    1278:	31 f5       	brne	.+76     	; 0x12c6 <pwr_main_on+0x6a>
    127a:	0f c0       	rjmp	.+30     	; 0x129a <pwr_main_on+0x3e>
		case CHANNEL_A:
			PORTC.OUTSET = B8(00000001);
    127c:	81 e0       	ldi	r24, 0x01	; 1
    127e:	e0 e4       	ldi	r30, 0x40	; 64
    1280:	f6 e0       	ldi	r31, 0x06	; 6
    1282:	85 83       	std	Z+5, r24	; 0x05
			break;
    1284:	08 95       	ret
		case CHANNEL_B:
			PORTC.OUTSET = B8(00000010);
    1286:	82 e0       	ldi	r24, 0x02	; 2
    1288:	e0 e4       	ldi	r30, 0x40	; 64
    128a:	f6 e0       	ldi	r31, 0x06	; 6
    128c:	85 83       	std	Z+5, r24	; 0x05
			break;
    128e:	08 95       	ret
		case CHANNEL_C:
			PORTC.OUTSET = B8(00010000);
    1290:	80 e1       	ldi	r24, 0x10	; 16
    1292:	e0 e4       	ldi	r30, 0x40	; 64
    1294:	f6 e0       	ldi	r31, 0x06	; 6
    1296:	85 83       	std	Z+5, r24	; 0x05
			break;
    1298:	08 95       	ret
		case CHANNEL_D:
			PORTC.OUTSET = B8(00100000);
    129a:	80 e2       	ldi	r24, 0x20	; 32
    129c:	e0 e4       	ldi	r30, 0x40	; 64
    129e:	f6 e0       	ldi	r31, 0x06	; 6
    12a0:	85 83       	std	Z+5, r24	; 0x05
			break;
    12a2:	08 95       	ret
		case CHANNEL_ALL:
			PORTC.OUTSET = B8(00110011);
    12a4:	83 e3       	ldi	r24, 0x33	; 51
    12a6:	e0 e4       	ldi	r30, 0x40	; 64
    12a8:	f6 e0       	ldi	r31, 0x06	; 6
    12aa:	85 83       	std	Z+5, r24	; 0x05
			break;
    12ac:	08 95       	ret
		case CHANNEL_RESTORE:
			mask = STATE_power_channels >> 2; //[000000DC] remove lower channels
    12ae:	80 91 b6 24 	lds	r24, 0x24B6
    12b2:	98 2f       	mov	r25, r24
    12b4:	96 95       	lsr	r25
    12b6:	96 95       	lsr	r25
			mask = mask << 4; //[00DC0000] position upper channels
    12b8:	92 95       	swap	r25
    12ba:	90 7f       	andi	r25, 0xF0	; 240
			mask |= (STATE_power_channels & B8(00000011)); //[00DC00BA] merge in lower channels
    12bc:	83 70       	andi	r24, 0x03	; 3
    12be:	89 2b       	or	r24, r25
			PORTC.OUTSET = mask;
    12c0:	e0 e4       	ldi	r30, 0x40	; 64
    12c2:	f6 e0       	ldi	r31, 0x06	; 6
    12c4:	85 83       	std	Z+5, r24	; 0x05
    12c6:	08 95       	ret

000012c8 <pwr_main_off>:
			break;
	}
}

void inline pwr_main_off(uint8_t which){
	switch(which){
    12c8:	82 30       	cpi	r24, 0x02	; 2
    12ca:	b1 f0       	breq	.+44     	; 0x12f8 <pwr_main_off+0x30>
    12cc:	83 30       	cpi	r24, 0x03	; 3
    12ce:	28 f4       	brcc	.+10     	; 0x12da <pwr_main_off+0x12>
    12d0:	88 23       	and	r24, r24
    12d2:	41 f0       	breq	.+16     	; 0x12e4 <pwr_main_off+0x1c>
    12d4:	81 30       	cpi	r24, 0x01	; 1
    12d6:	f1 f4       	brne	.+60     	; 0x1314 <pwr_main_off+0x4c>
    12d8:	0a c0       	rjmp	.+20     	; 0x12ee <pwr_main_off+0x26>
    12da:	83 30       	cpi	r24, 0x03	; 3
    12dc:	91 f0       	breq	.+36     	; 0x1302 <pwr_main_off+0x3a>
    12de:	8a 33       	cpi	r24, 0x3A	; 58
    12e0:	c9 f4       	brne	.+50     	; 0x1314 <pwr_main_off+0x4c>
    12e2:	14 c0       	rjmp	.+40     	; 0x130c <pwr_main_off+0x44>
		case CHANNEL_A:
		PORTC.OUTCLR = B8(00000001);
    12e4:	81 e0       	ldi	r24, 0x01	; 1
    12e6:	e0 e4       	ldi	r30, 0x40	; 64
    12e8:	f6 e0       	ldi	r31, 0x06	; 6
    12ea:	86 83       	std	Z+6, r24	; 0x06
		break;
    12ec:	08 95       	ret
		case CHANNEL_B:
		PORTC.OUTCLR = B8(00000010);
    12ee:	82 e0       	ldi	r24, 0x02	; 2
    12f0:	e0 e4       	ldi	r30, 0x40	; 64
    12f2:	f6 e0       	ldi	r31, 0x06	; 6
    12f4:	86 83       	std	Z+6, r24	; 0x06
		break;
    12f6:	08 95       	ret
		case CHANNEL_C:
		PORTC.OUTCLR = B8(00010000);
    12f8:	80 e1       	ldi	r24, 0x10	; 16
    12fa:	e0 e4       	ldi	r30, 0x40	; 64
    12fc:	f6 e0       	ldi	r31, 0x06	; 6
    12fe:	86 83       	std	Z+6, r24	; 0x06
		break;
    1300:	08 95       	ret
		case CHANNEL_D:
		PORTC.OUTCLR = B8(00100000);
    1302:	80 e2       	ldi	r24, 0x20	; 32
    1304:	e0 e4       	ldi	r30, 0x40	; 64
    1306:	f6 e0       	ldi	r31, 0x06	; 6
    1308:	86 83       	std	Z+6, r24	; 0x06
		break;
    130a:	08 95       	ret
		case CHANNEL_ALL:
		PORTC.OUTCLR = B8(00110011);
    130c:	83 e3       	ldi	r24, 0x33	; 51
    130e:	e0 e4       	ldi	r30, 0x40	; 64
    1310:	f6 e0       	ldi	r31, 0x06	; 6
    1312:	86 83       	std	Z+6, r24	; 0x06
    1314:	08 95       	ret

00001316 <service_pwr_main>:
		break;
	}
}

void service_pwr_main(){
}
    1316:	08 95       	ret

00001318 <init_rtos_clock_external>:
#include "lcd.h"
#include "quadrature.h"

int init_rtos_clock_external(void){
	//Boot up and configure oscillator
	OSC.XOSCCTRL = B8(00100010); //enable external 32kHz Xtal using low-power (e.g. low-swing) mode
    1318:	e0 e5       	ldi	r30, 0x50	; 80
    131a:	f0 e0       	ldi	r31, 0x00	; 0
    131c:	82 e2       	ldi	r24, 0x22	; 34
    131e:	82 83       	std	Z+2, r24	; 0x02
	OSC.CTRL = B8(00001011); //enable 32M-RC & External Xtal -- also "enable" 2M-RC since its already running b/c we booted from it and can't actually disable it until we switch sources
    1320:	8b e0       	ldi	r24, 0x0B	; 11
    1322:	80 83       	st	Z, r24
	//Wait for stability
	led_on(LED_0);
    1324:	80 e0       	ldi	r24, 0x00	; 0
    1326:	0e 94 f5 1e 	call	0x3dea	; 0x3dea <led_on>
	//This is actually tricky sequencing because we boot from the 2MHz internal RC so previous write to OSC.CTRL was ineffective at shutting down the 2M-RC so OSC.STATUS will still reflect that it is running
	while(OSC.STATUS != B8(00001011)); //stall for external xtal and 32M-RC stability
    132a:	e0 e5       	ldi	r30, 0x50	; 80
    132c:	f0 e0       	ldi	r31, 0x00	; 0
    132e:	81 81       	ldd	r24, Z+1	; 0x01
    1330:	8b 30       	cpi	r24, 0x0B	; 11
    1332:	e9 f7       	brne	.-6      	; 0x132e <init_rtos_clock_external+0x16>
	led_off(LED_0);
    1334:	80 e0       	ldi	r24, 0x00	; 0
    1336:	0e 94 11 1f 	call	0x3e22	; 0x3e22 <led_off>
	//Configure
	OSC.DFLLCTRL = B8(00000010); //use external xtal for 32M-RC calibration
    133a:	e0 e5       	ldi	r30, 0x50	; 80
    133c:	f0 e0       	ldi	r31, 0x00	; 0
    133e:	82 e0       	ldi	r24, 0x02	; 2
    1340:	86 83       	std	Z+6, r24	; 0x06
	DFLLRC32M.CTRL = B8(00000001); //enable Xtal calibration of internal 32MHz RC oscillator
    1342:	81 e0       	ldi	r24, 0x01	; 1
    1344:	80 93 60 00 	sts	0x0060, r24
	//Switch system clock over to stable RC oscillator
	//Switch to 32M-RC as system clock source and disable the 2M-RC that we booted from.
	//----REQUIRES CONFIGURATION PROTECTION REGISTER
	CCP = CCP_IOREG_gc; //disable change protection for IO register
    1348:	98 ed       	ldi	r25, 0xD8	; 216
    134a:	94 bf       	out	0x34, r25	; 52
	CLK.CTRL = CLK_SCLKSEL_RC32M_gc;
    134c:	80 93 40 00 	sts	0x0040, r24
	OSC.CTRL = B8(00001010); //re-execute this write -- this will shutdown the 2M-RC since we are no longer running from it.
    1350:	8a e0       	ldi	r24, 0x0A	; 10
    1352:	80 83       	st	Z, r24
	//Now running live at 32MHz
	return 0;
}
    1354:	80 e0       	ldi	r24, 0x00	; 0
    1356:	90 e0       	ldi	r25, 0x00	; 0
    1358:	08 95       	ret

0000135a <init_rtos_clock_internal>:

int init_rtos_clock_internal(void){
	//Boot up and configure oscillator
	OSC.CTRL = B8(00000111); //enable 32M-RC & INTERNAL 32kHz -- also "enable" 2M-RC since its already running b/c we booted from it and can't actually disable it until we switch sources
    135a:	87 e0       	ldi	r24, 0x07	; 7
    135c:	80 93 50 00 	sts	0x0050, r24
	//Wait for stability
	led_on(LED_0);
    1360:	80 e0       	ldi	r24, 0x00	; 0
    1362:	0e 94 f5 1e 	call	0x3dea	; 0x3dea <led_on>
	//This is actually tricky sequencing because we boot from the 2MHz internal RC so previous write to OSC.CTRL was ineffective at shutting down the 2M-RC so OSC.STATUS will still reflect that it is running
	while(OSC.STATUS != B8(00000111)); //stall for INTERNAL 32k-RC and 32MHz-RC stability
    1366:	e0 e5       	ldi	r30, 0x50	; 80
    1368:	f0 e0       	ldi	r31, 0x00	; 0
    136a:	81 81       	ldd	r24, Z+1	; 0x01
    136c:	87 30       	cpi	r24, 0x07	; 7
    136e:	e9 f7       	brne	.-6      	; 0x136a <init_rtos_clock_internal+0x10>
	led_off(LED_0);
    1370:	80 e0       	ldi	r24, 0x00	; 0
    1372:	0e 94 11 1f 	call	0x3e22	; 0x3e22 <led_off>
	//Configure
	OSC.DFLLCTRL = B8(00000010); //use external xtal for 32M-RC calibration
    1376:	e0 e5       	ldi	r30, 0x50	; 80
    1378:	f0 e0       	ldi	r31, 0x00	; 0
    137a:	82 e0       	ldi	r24, 0x02	; 2
    137c:	86 83       	std	Z+6, r24	; 0x06
	DFLLRC32M.CTRL = B8(00000001); //enable Xtal calibration of internal 32MHz RC oscillator
    137e:	81 e0       	ldi	r24, 0x01	; 1
    1380:	80 93 60 00 	sts	0x0060, r24
	//Switch system clock over to stable RC oscillator
	//Switch to 32M-RC as system clock source and disable the 2M-RC that we booted from.
	//----REQUIRES CONFIGURATION PROTECTION REGISTER
	CCP = CCP_IOREG_gc; //disable change protection for IO register
    1384:	98 ed       	ldi	r25, 0xD8	; 216
    1386:	94 bf       	out	0x34, r25	; 52
	CLK.CTRL = CLK_SCLKSEL_RC32M_gc;
    1388:	80 93 40 00 	sts	0x0040, r24
	OSC.CTRL = B8(00001010); //re-execute this write -- this will shutdown the 2M-RC since we are no longer running from it.
    138c:	8a e0       	ldi	r24, 0x0A	; 10
    138e:	80 83       	st	Z, r24
	//Now running live at 32MHz
	return 0;
}
    1390:	80 e0       	ldi	r24, 0x00	; 0
    1392:	90 e0       	ldi	r25, 0x00	; 0
    1394:	08 95       	ret

00001396 <main>:
	//[BLINK ALIVE]
	uint8_t blah;
	int8_t updown;

	//[LED's, Button, & Switches]
	init_ui(); //init LED's first so that they are available for debugging
    1396:	0e 94 5f 1f 	call	0x3ebe	; 0x3ebe <init_ui>
	init_fp(); //init Front Panel LED's and Switches so that they are available for debugging
    139a:	0e 94 99 05 	call	0xb32	; 0xb32 <init_fp>
	init_quadrature(); //init quadrature decoder for front panel rotary encoder
    139e:	0e 94 44 0a 	call	0x1488	; 0x1488 <init_quadrature>
	
	//[CPU CLOCK]
	init_rtos_clock_internal();
    13a2:	0e 94 ad 09 	call	0x135a	; 0x135a <init_rtos_clock_internal>

	//[LCD]
	init_lcd();
    13a6:	0e 94 1a 07 	call	0xe34	; 0xe34 <init_lcd>
	init_lcd_console();
    13aa:	0e 94 60 08 	call	0x10c0	; 0x10c0 <init_lcd_console>

	//[UARTs]
	init_uart(&uctrl, BAUD_115200);
    13ae:	80 ea       	ldi	r24, 0xA0	; 160
    13b0:	98 e0       	ldi	r25, 0x08	; 8
    13b2:	60 e0       	ldi	r22, 0x00	; 0
    13b4:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <init_uart>
	init_uart(&udata, BAUD_115200);
    13b8:	80 eb       	ldi	r24, 0xB0	; 176
    13ba:	98 e0       	ldi	r25, 0x08	; 8
    13bc:	60 e0       	ldi	r22, 0x00	; 0
    13be:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <init_uart>
	init_uart(&ulcd, BAUD_115200);
    13c2:	80 eb       	ldi	r24, 0xB0	; 176
    13c4:	9b e0       	ldi	r25, 0x0B	; 11
    13c6:	60 e0       	ldi	r22, 0x00	; 0
    13c8:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <init_uart>
	init_uart_buffers();
    13cc:	0e 94 80 1d 	call	0x3b00	; 0x3b00 <init_uart_buffers>
	
	//[ADC]
	init_adc();		
    13d0:	0e 94 58 01 	call	0x2b0	; 0x2b0 <init_adc>

	//[POWER PATH]
	init_pwr_main();
    13d4:	0e 94 27 09 	call	0x124e	; 0x124e <init_pwr_main>
	//init_pwr_adj();

	//[BRAIN]
	init_brain();
    13d8:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <init_brain>
	
	//[Realtime Loop Timer]
	//Use PortC's T/C0
	TCC0.CTRLA = 0x07; //Start the timer; Div1024 operation = 32M/1024 = 31250
    13dc:	e0 e0       	ldi	r30, 0x00	; 0
    13de:	f8 e0       	ldi	r31, 0x08	; 8
    13e0:	87 e0       	ldi	r24, 0x07	; 7
    13e2:	80 83       	st	Z, r24
	TCC0.PER = 62; //2ms Loop Time
    13e4:	8e e3       	ldi	r24, 0x3E	; 62
    13e6:	90 e0       	ldi	r25, 0x00	; 0
    13e8:	86 a3       	lds	r24, 0x56
    13ea:	97 a3       	lds	r25, 0x57

	//[PMIC (Interrupt Controller)]
	PMIC.CTRL = B8(10000111); //enable all three interrupt levels (lowest one with round-robin)
    13ec:	87 e8       	ldi	r24, 0x87	; 135
    13ee:	e0 ea       	ldi	r30, 0xA0	; 160
    13f0:	f0 e0       	ldi	r31, 0x00	; 0
    13f2:	82 83       	std	Z+2, r24	; 0x02
	sei(); //ENABLE INTERRUPTS AND GO LIVE!
    13f4:	78 94       	sei

	//[RTOS START!]
	blah = 1;
	updown = 1;
	led_off(LED_0);
    13f6:	80 e0       	ldi	r24, 0x00	; 0
    13f8:	0e 94 11 1f 	call	0x3e22	; 0x3e22 <led_off>
	led_off(LED_1);
    13fc:	81 e0       	ldi	r24, 0x01	; 1
    13fe:	0e 94 11 1f 	call	0x3e22	; 0x3e22 <led_off>
	audio_beep(2, 100);
    1402:	82 e0       	ldi	r24, 0x02	; 2
    1404:	64 e6       	ldi	r22, 0x64	; 100
    1406:	70 e0       	ldi	r23, 0x00	; 0
    1408:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <audio_beep>
	PORTE.DIRSET = B8(00000011); //PE0, PE1 to output pin for loop timer
    140c:	e0 e8       	ldi	r30, 0x80	; 128
    140e:	f6 e0       	ldi	r31, 0x06	; 6
    1410:	83 e0       	ldi	r24, 0x03	; 3
    1412:	81 83       	std	Z+1, r24	; 0x01

	while(1){
		PORTE.OUTSET = 0x02; //Set PE1 on start of loop and lower after work is done.
    1414:	82 e0       	ldi	r24, 0x02	; 2
    1416:	85 83       	std	Z+5, r24	; 0x05
		//Blink alive
		led_dim(LED_0, blah);	
    1418:	80 e0       	ldi	r24, 0x00	; 0
    141a:	61 e0       	ldi	r22, 0x01	; 1
    141c:	0e 94 27 1f 	call	0x3e4e	; 0x3e4e <led_dim>
		blah += updown;
    1420:	12 e0       	ldi	r17, 0x02	; 2
	PMIC.CTRL = B8(10000111); //enable all three interrupt levels (lowest one with round-robin)
	sei(); //ENABLE INTERRUPTS AND GO LIVE!

	//[RTOS START!]
	blah = 1;
	updown = 1;
    1422:	01 e0       	ldi	r16, 0x01	; 1
		led_dim(LED_0, blah);	
		blah += updown;
		if ((blah == 255) || (blah == 0)) {
			updown = -1 * updown;
		}
		PORTE.OUTTGL = 0x01; //wiggle pin to indicate loop timing
    1424:	0f 2e       	mov	r0, r31
    1426:	f0 e8       	ldi	r31, 0x80	; 128
    1428:	ef 2e       	mov	r14, r31
    142a:	f6 e0       	ldi	r31, 0x06	; 6
    142c:	ff 2e       	mov	r15, r31
    142e:	f0 2d       	mov	r31, r0
    1430:	cc 24       	eor	r12, r12
    1432:	c3 94       	inc	r12
    1434:	bc 2c       	mov	r11, r12
		service_uart_buffer();
		service_lcd();
		service_lcd_console();
		
		//Wait out RTOS loop
		PORTE.OUTCLR = 0x02; //Indicate work for this cycle has finished on PE1
    1436:	dd 24       	eor	r13, r13
    1438:	68 94       	set
    143a:	d1 f8       	bld	r13, 1
		while((TCC0.INTFLAGS & _BV(0)) != 0x01); //Wait for the loop time to expire
    143c:	c0 e0       	ldi	r28, 0x00	; 0
    143e:	d8 e0       	ldi	r29, 0x08	; 8
    1440:	01 c0       	rjmp	.+2      	; 0x1444 <main+0xae>
		PORTE.OUTSET = 0x02; //Set PE1 on start of loop and lower after work is done.
		//Blink alive
		led_dim(LED_0, blah);	
		blah += updown;
		if ((blah == 255) || (blah == 0)) {
			updown = -1 * updown;
    1442:	01 95       	neg	r16
		}
		PORTE.OUTTGL = 0x01; //wiggle pin to indicate loop timing
    1444:	f7 01       	movw	r30, r14
    1446:	b7 82       	std	Z+7, r11	; 0x07
		
		//Call services
		service_audio();
    1448:	0e 94 9d 1f 	call	0x3f3a	; 0x3f3a <service_audio>
		service_fp();
    144c:	0e 94 84 06 	call	0xd08	; 0xd08 <service_fp>
		service_adc();
    1450:	0e 94 7f 02 	call	0x4fe	; 0x4fe <service_adc>
		service_brain();	
    1454:	0e 94 05 05 	call	0xa0a	; 0xa0a <service_brain>
		service_uart_buffer();
    1458:	0e 94 46 1e 	call	0x3c8c	; 0x3c8c <service_uart_buffer>
		service_lcd();
    145c:	0e 94 27 08 	call	0x104e	; 0x104e <service_lcd>
		service_lcd_console();
    1460:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <service_lcd_console>
		
		//Wait out RTOS loop
		PORTE.OUTCLR = 0x02; //Indicate work for this cycle has finished on PE1
    1464:	f7 01       	movw	r30, r14
    1466:	d6 82       	std	Z+6, r13	; 0x06
		while((TCC0.INTFLAGS & _BV(0)) != 0x01); //Wait for the loop time to expire
    1468:	8c 85       	ldd	r24, Y+12	; 0x0c
    146a:	80 ff       	sbrs	r24, 0
    146c:	fd cf       	rjmp	.-6      	; 0x1468 <main+0xd2>
		TCC0.INTFLAGS = 0x01; //Clear the interrupt flag
    146e:	cc 86       	std	Y+12, r12	; 0x0c
	led_off(LED_1);
	audio_beep(2, 100);
	PORTE.DIRSET = B8(00000011); //PE0, PE1 to output pin for loop timer

	while(1){
		PORTE.OUTSET = 0x02; //Set PE1 on start of loop and lower after work is done.
    1470:	f7 01       	movw	r30, r14
    1472:	d5 82       	std	Z+5, r13	; 0x05
		//Blink alive
		led_dim(LED_0, blah);	
    1474:	80 e0       	ldi	r24, 0x00	; 0
    1476:	61 2f       	mov	r22, r17
    1478:	0e 94 27 1f 	call	0x3e4e	; 0x3e4e <led_dim>
		blah += updown;
    147c:	10 0f       	add	r17, r16
		if ((blah == 255) || (blah == 0)) {
    147e:	81 2f       	mov	r24, r17
    1480:	81 50       	subi	r24, 0x01	; 1
    1482:	8e 3f       	cpi	r24, 0xFE	; 254
    1484:	f0 f6       	brcc	.-68     	; 0x1442 <main+0xac>
    1486:	de cf       	rjmp	.-68     	; 0x1444 <main+0xae>

00001488 <init_quadrature>:
		============		
		PK6: Rotary Channel A
		PK7: Rotary Channel B
	*/
	//	SciPSU FP switches have hardware pull-up and hardware debounce
	PORTK.DIRCLR = B8(11000000); //This is the default condition, but just to be safe
    1488:	e0 e2       	ldi	r30, 0x20	; 32
    148a:	f7 e0       	ldi	r31, 0x07	; 7
    148c:	80 ec       	ldi	r24, 0xC0	; 192
    148e:	82 83       	std	Z+2, r24	; 0x02
	PORTK.INT0MASK = B8(01000000); //Enable PORTK.Interrupt0 channel for PK6 
    1490:	80 e4       	ldi	r24, 0x40	; 64
    1492:	82 87       	std	Z+10, r24	; 0x0a
	PORTK.INT1MASK = B8(10000000); //Enable PORTK.Interrupt1 channel for PK7 
    1494:	80 e8       	ldi	r24, 0x80	; 128
    1496:	83 87       	std	Z+11, r24	; 0x0b
	PORTK.INTCTRL = B8(00001111); //interrupt 0 & 1 channels set to highest priority
    1498:	8f e0       	ldi	r24, 0x0F	; 15
    149a:	81 87       	std	Z+9, r24	; 0x09
	//Setup initial edge look directions -- need to enable global interrupts shortly after doing this (so init the quadrature module last in main.c)
	if ((PORTK.IN & _BV(6)) == 0){PORTK.PIN6CTRL = RISING_EDGE;} 
    149c:	80 85       	ldd	r24, Z+8	; 0x08
    149e:	86 fd       	sbrc	r24, 6
    14a0:	03 c0       	rjmp	.+6      	; 0x14a8 <init_quadrature+0x20>
    14a2:	89 e9       	ldi	r24, 0x99	; 153
    14a4:	86 8b       	std	Z+22, r24	; 0x16
    14a6:	04 c0       	rjmp	.+8      	; 0x14b0 <init_quadrature+0x28>
	else {PORTK.PIN6CTRL = FALLING_EDGE;}
    14a8:	8a e9       	ldi	r24, 0x9A	; 154
    14aa:	e0 e2       	ldi	r30, 0x20	; 32
    14ac:	f7 e0       	ldi	r31, 0x07	; 7
    14ae:	86 8b       	std	Z+22, r24	; 0x16
	if ((PORTK.IN & _BV(7)) == 0){PORTK.PIN7CTRL = RISING_EDGE;}
    14b0:	e0 e2       	ldi	r30, 0x20	; 32
    14b2:	f7 e0       	ldi	r31, 0x07	; 7
    14b4:	80 85       	ldd	r24, Z+8	; 0x08
    14b6:	88 23       	and	r24, r24
    14b8:	1c f0       	brlt	.+6      	; 0x14c0 <init_quadrature+0x38>
    14ba:	89 e9       	ldi	r24, 0x99	; 153
    14bc:	87 8b       	std	Z+23, r24	; 0x17
    14be:	04 c0       	rjmp	.+8      	; 0x14c8 <init_quadrature+0x40>
	else {PORTK.PIN7CTRL = FALLING_EDGE;}
    14c0:	8a e9       	ldi	r24, 0x9A	; 154
    14c2:	e0 e2       	ldi	r30, 0x20	; 32
    14c4:	f7 e0       	ldi	r31, 0x07	; 7
    14c6:	87 8b       	std	Z+23, r24	; 0x17
		
	quad_count = 0;
    14c8:	10 92 cc 25 	sts	0x25CC, r1
    14cc:	10 92 cd 25 	sts	0x25CD, r1
	quad_state = QUAD_IDLE;
    14d0:	8c e2       	ldi	r24, 0x2C	; 44
    14d2:	80 93 c9 25 	sts	0x25C9, r24
	
}
    14d6:	08 95       	ret

000014d8 <quad_up>:

/// Reports if the quadrature encoded control has moved up since the last time this function was called.
/* SIDE EFFECT: modifies internal state. If you call this twice, only the first call will report true.*/
boolean quad_up(){
	if (quad_state == QUAD_UP){quad_state = QUAD_IDLE; return true;}
    14d8:	80 91 c9 25 	lds	r24, 0x25C9
    14dc:	8d 32       	cpi	r24, 0x2D	; 45
    14de:	29 f4       	brne	.+10     	; 0x14ea <quad_up+0x12>
    14e0:	8c e2       	ldi	r24, 0x2C	; 44
    14e2:	80 93 c9 25 	sts	0x25C9, r24
    14e6:	81 e0       	ldi	r24, 0x01	; 1
    14e8:	08 95       	ret
	return false;
    14ea:	80 e0       	ldi	r24, 0x00	; 0
}
    14ec:	08 95       	ret

000014ee <quad_down>:

/// Reports if the quadrature encoded control has moved down since the last time this function was called.
/* SIDE EFFECT: modifies internal state. If you call this twice, only the first call will report true.*/
boolean quad_down(){
if (quad_state == QUAD_DOWN){quad_state = QUAD_IDLE; return true;}
    14ee:	80 91 c9 25 	lds	r24, 0x25C9
    14f2:	8e 32       	cpi	r24, 0x2E	; 46
    14f4:	29 f4       	brne	.+10     	; 0x1500 <quad_down+0x12>
    14f6:	8c e2       	ldi	r24, 0x2C	; 44
    14f8:	80 93 c9 25 	sts	0x25C9, r24
    14fc:	81 e0       	ldi	r24, 0x01	; 1
    14fe:	08 95       	ret
return false;
    1500:	80 e0       	ldi	r24, 0x00	; 0
}
    1502:	08 95       	ret

00001504 <__vector_100>:
//#############################################################
//## ROTARY CONTROL
//#############################################################

///Interrupt Service Routine (ISR) for quadrature encoder Channel A (PORTK Int0; PK6)
SIGNAL(PORTK_INT0_vect){
    1504:	1f 92       	push	r1
    1506:	0f 92       	push	r0
    1508:	0f b6       	in	r0, 0x3f	; 63
    150a:	0f 92       	push	r0
    150c:	08 b6       	in	r0, 0x38	; 56
    150e:	0f 92       	push	r0
    1510:	0b b6       	in	r0, 0x3b	; 59
    1512:	0f 92       	push	r0
    1514:	11 24       	eor	r1, r1
    1516:	8f 93       	push	r24
    1518:	9f 93       	push	r25
    151a:	ef 93       	push	r30
    151c:	ff 93       	push	r31
	if (PORTK.PIN6CTRL == FALLING_EDGE){
    151e:	e0 e2       	ldi	r30, 0x20	; 32
    1520:	f7 e0       	ldi	r31, 0x07	; 7
    1522:	86 89       	ldd	r24, Z+22	; 0x16
    1524:	8a 39       	cpi	r24, 0x9A	; 154
    1526:	01 f5       	brne	.+64     	; 0x1568 <__vector_100+0x64>
		//Detected FALLING edge on channel A
		if ((PORTK.IN & _BV(7)) == 0){
    1528:	80 85       	ldd	r24, Z+8	; 0x08
    152a:	88 23       	and	r24, r24
    152c:	6c f0       	brlt	.+26     	; 0x1548 <__vector_100+0x44>
			//if channel A is falling and channel B is low, direction = DOWN
			quad_count--;
    152e:	80 91 cc 25 	lds	r24, 0x25CC
    1532:	90 91 cd 25 	lds	r25, 0x25CD
    1536:	01 97       	sbiw	r24, 0x01	; 1
    1538:	80 93 cc 25 	sts	0x25CC, r24
    153c:	90 93 cd 25 	sts	0x25CD, r25
			quad_state = QUAD_DOWN;
    1540:	8e e2       	ldi	r24, 0x2E	; 46
    1542:	80 93 c9 25 	sts	0x25C9, r24
    1546:	0c c0       	rjmp	.+24     	; 0x1560 <__vector_100+0x5c>
		}
		else{
			//if channel A is falling and channel B is high, direction = UP
			quad_count++;
    1548:	80 91 cc 25 	lds	r24, 0x25CC
    154c:	90 91 cd 25 	lds	r25, 0x25CD
    1550:	01 96       	adiw	r24, 0x01	; 1
    1552:	80 93 cc 25 	sts	0x25CC, r24
    1556:	90 93 cd 25 	sts	0x25CD, r25
			quad_state = QUAD_UP;
    155a:	8d e2       	ldi	r24, 0x2D	; 45
    155c:	80 93 c9 25 	sts	0x25C9, r24
		}
		//Now, look for rising edge
		PORTK.PIN6CTRL = RISING_EDGE;
    1560:	89 e9       	ldi	r24, 0x99	; 153
    1562:	e0 e2       	ldi	r30, 0x20	; 32
    1564:	f7 e0       	ldi	r31, 0x07	; 7
    1566:	86 8b       	std	Z+22, r24	; 0x16
	}
	if (PORTK.PIN6CTRL == RISING_EDGE){
    1568:	e0 e2       	ldi	r30, 0x20	; 32
    156a:	f7 e0       	ldi	r31, 0x07	; 7
    156c:	86 89       	ldd	r24, Z+22	; 0x16
    156e:	89 39       	cpi	r24, 0x99	; 153
    1570:	01 f5       	brne	.+64     	; 0x15b2 <__vector_100+0xae>
		//Detected RISING edge on channel A
		if ((PORTK.IN & _BV(7)) == 0){
    1572:	80 85       	ldd	r24, Z+8	; 0x08
    1574:	88 23       	and	r24, r24
    1576:	6c f0       	brlt	.+26     	; 0x1592 <__vector_100+0x8e>
			//if channel A is rising and channel B is low, direction = UP
			quad_count++;
    1578:	80 91 cc 25 	lds	r24, 0x25CC
    157c:	90 91 cd 25 	lds	r25, 0x25CD
    1580:	01 96       	adiw	r24, 0x01	; 1
    1582:	80 93 cc 25 	sts	0x25CC, r24
    1586:	90 93 cd 25 	sts	0x25CD, r25
			quad_state = QUAD_UP;
    158a:	8d e2       	ldi	r24, 0x2D	; 45
    158c:	80 93 c9 25 	sts	0x25C9, r24
    1590:	0c c0       	rjmp	.+24     	; 0x15aa <__vector_100+0xa6>
		}
		else{
			//if channel A is rising and channel B is high, direction = DOWN
			quad_count--;
    1592:	80 91 cc 25 	lds	r24, 0x25CC
    1596:	90 91 cd 25 	lds	r25, 0x25CD
    159a:	01 97       	sbiw	r24, 0x01	; 1
    159c:	80 93 cc 25 	sts	0x25CC, r24
    15a0:	90 93 cd 25 	sts	0x25CD, r25
			quad_state = QUAD_DOWN;
    15a4:	8e e2       	ldi	r24, 0x2E	; 46
    15a6:	80 93 c9 25 	sts	0x25C9, r24
		}
		//Now, look for falling edge
		PORTK.PIN6CTRL = FALLING_EDGE;
    15aa:	8a e9       	ldi	r24, 0x9A	; 154
    15ac:	e0 e2       	ldi	r30, 0x20	; 32
    15ae:	f7 e0       	ldi	r31, 0x07	; 7
    15b0:	86 8b       	std	Z+22, r24	; 0x16
	}
	PORTK.INTFLAGS = B8(00000001); //clear interrupt flag just in case
    15b2:	81 e0       	ldi	r24, 0x01	; 1
    15b4:	e0 e2       	ldi	r30, 0x20	; 32
    15b6:	f7 e0       	ldi	r31, 0x07	; 7
    15b8:	84 87       	std	Z+12, r24	; 0x0c
}
    15ba:	ff 91       	pop	r31
    15bc:	ef 91       	pop	r30
    15be:	9f 91       	pop	r25
    15c0:	8f 91       	pop	r24
    15c2:	0f 90       	pop	r0
    15c4:	0b be       	out	0x3b, r0	; 59
    15c6:	0f 90       	pop	r0
    15c8:	08 be       	out	0x38, r0	; 56
    15ca:	0f 90       	pop	r0
    15cc:	0f be       	out	0x3f, r0	; 63
    15ce:	0f 90       	pop	r0
    15d0:	1f 90       	pop	r1
    15d2:	18 95       	reti

000015d4 <__vector_101>:

///Interrupt Service Routine (ISR) for quadrature encoder Channel B (PORTK Int1; PK7)
SIGNAL(PORTK_INT1_vect){
    15d4:	1f 92       	push	r1
    15d6:	0f 92       	push	r0
    15d8:	0f b6       	in	r0, 0x3f	; 63
    15da:	0f 92       	push	r0
    15dc:	08 b6       	in	r0, 0x38	; 56
    15de:	0f 92       	push	r0
    15e0:	0b b6       	in	r0, 0x3b	; 59
    15e2:	0f 92       	push	r0
    15e4:	11 24       	eor	r1, r1
    15e6:	8f 93       	push	r24
    15e8:	9f 93       	push	r25
    15ea:	ef 93       	push	r30
    15ec:	ff 93       	push	r31
	if (PORTK.PIN7CTRL == FALLING_EDGE){
    15ee:	e0 e2       	ldi	r30, 0x20	; 32
    15f0:	f7 e0       	ldi	r31, 0x07	; 7
    15f2:	87 89       	ldd	r24, Z+23	; 0x17
    15f4:	8a 39       	cpi	r24, 0x9A	; 154
    15f6:	01 f5       	brne	.+64     	; 0x1638 <__vector_101+0x64>
		//Detected FALLING edge on channel A
		if ((PORTK.IN & _BV(6)) == 0){
    15f8:	80 85       	ldd	r24, Z+8	; 0x08
    15fa:	86 fd       	sbrc	r24, 6
    15fc:	0d c0       	rjmp	.+26     	; 0x1618 <__vector_101+0x44>
			//if channel B is falling and channel A is low, direction = UP
			quad_count++;
    15fe:	80 91 cc 25 	lds	r24, 0x25CC
    1602:	90 91 cd 25 	lds	r25, 0x25CD
    1606:	01 96       	adiw	r24, 0x01	; 1
    1608:	80 93 cc 25 	sts	0x25CC, r24
    160c:	90 93 cd 25 	sts	0x25CD, r25
			quad_state = QUAD_UP;
    1610:	8d e2       	ldi	r24, 0x2D	; 45
    1612:	80 93 c9 25 	sts	0x25C9, r24
    1616:	0c c0       	rjmp	.+24     	; 0x1630 <__vector_101+0x5c>
		}
		else{
			//if channel B is falling and channel A is high, direction = DOWN
			quad_count--;
    1618:	80 91 cc 25 	lds	r24, 0x25CC
    161c:	90 91 cd 25 	lds	r25, 0x25CD
    1620:	01 97       	sbiw	r24, 0x01	; 1
    1622:	80 93 cc 25 	sts	0x25CC, r24
    1626:	90 93 cd 25 	sts	0x25CD, r25
			quad_state = QUAD_DOWN;
    162a:	8e e2       	ldi	r24, 0x2E	; 46
    162c:	80 93 c9 25 	sts	0x25C9, r24
		}
		//Now, look for rising edge
		PORTK.PIN7CTRL = RISING_EDGE;
    1630:	89 e9       	ldi	r24, 0x99	; 153
    1632:	e0 e2       	ldi	r30, 0x20	; 32
    1634:	f7 e0       	ldi	r31, 0x07	; 7
    1636:	87 8b       	std	Z+23, r24	; 0x17
	}
	if (PORTK.PIN7CTRL == RISING_EDGE){
    1638:	e0 e2       	ldi	r30, 0x20	; 32
    163a:	f7 e0       	ldi	r31, 0x07	; 7
    163c:	87 89       	ldd	r24, Z+23	; 0x17
    163e:	89 39       	cpi	r24, 0x99	; 153
    1640:	01 f5       	brne	.+64     	; 0x1682 <__vector_101+0xae>
		//Detected RISING edge on channel B
		if ((PORTK.IN & _BV(6)) == 0){
    1642:	80 85       	ldd	r24, Z+8	; 0x08
    1644:	86 fd       	sbrc	r24, 6
    1646:	0d c0       	rjmp	.+26     	; 0x1662 <__vector_101+0x8e>
			//if channel B is rising and channel A is low, direction = DOWN
			quad_count--;
    1648:	80 91 cc 25 	lds	r24, 0x25CC
    164c:	90 91 cd 25 	lds	r25, 0x25CD
    1650:	01 97       	sbiw	r24, 0x01	; 1
    1652:	80 93 cc 25 	sts	0x25CC, r24
    1656:	90 93 cd 25 	sts	0x25CD, r25
			quad_state = QUAD_DOWN;
    165a:	8e e2       	ldi	r24, 0x2E	; 46
    165c:	80 93 c9 25 	sts	0x25C9, r24
    1660:	0c c0       	rjmp	.+24     	; 0x167a <__vector_101+0xa6>
		}
		else{
			//if channel B is rising and channel A is high, direction = UP
			quad_count++;
    1662:	80 91 cc 25 	lds	r24, 0x25CC
    1666:	90 91 cd 25 	lds	r25, 0x25CD
    166a:	01 96       	adiw	r24, 0x01	; 1
    166c:	80 93 cc 25 	sts	0x25CC, r24
    1670:	90 93 cd 25 	sts	0x25CD, r25
			quad_state = QUAD_UP;
    1674:	8d e2       	ldi	r24, 0x2D	; 45
    1676:	80 93 c9 25 	sts	0x25C9, r24
		}
		//Now, look for falling edge
		PORTK.PIN7CTRL = FALLING_EDGE;
    167a:	8a e9       	ldi	r24, 0x9A	; 154
    167c:	e0 e2       	ldi	r30, 0x20	; 32
    167e:	f7 e0       	ldi	r31, 0x07	; 7
    1680:	87 8b       	std	Z+23, r24	; 0x17
	}
	PORTK.INTFLAGS = B8(00000010); //clear interrupt flag just in case
    1682:	82 e0       	ldi	r24, 0x02	; 2
    1684:	e0 e2       	ldi	r30, 0x20	; 32
    1686:	f7 e0       	ldi	r31, 0x07	; 7
    1688:	84 87       	std	Z+12, r24	; 0x0c
}
    168a:	ff 91       	pop	r31
    168c:	ef 91       	pop	r30
    168e:	9f 91       	pop	r25
    1690:	8f 91       	pop	r24
    1692:	0f 90       	pop	r0
    1694:	0b be       	out	0x3b, r0	; 59
    1696:	0f 90       	pop	r0
    1698:	08 be       	out	0x38, r0	; 56
    169a:	0f 90       	pop	r0
    169c:	0f be       	out	0x3f, r0	; 63
    169e:	0f 90       	pop	r0
    16a0:	1f 90       	pop	r1
    16a2:	18 95       	reti

000016a4 <service_quadrature>:
//## SERVICE ROUTINE
//#############################################################

void service_quadrature(){	
	
}
    16a4:	08 95       	ret

000016a6 <init_thermal>:
    16a6:	e0 ea       	ldi	r30, 0xA0	; 160
    16a8:	f6 e0       	ldi	r31, 0x06	; 6
    16aa:	80 e3       	ldi	r24, 0x30	; 48
    16ac:	81 83       	std	Z+1, r24	; 0x01
    16ae:	85 81       	ldd	r24, Z+5	; 0x05
    16b0:	8f 7c       	andi	r24, 0xCF	; 207
    16b2:	85 83       	std	Z+5, r24	; 0x05
    16b4:	e0 e4       	ldi	r30, 0x40	; 64
    16b6:	fb e0       	ldi	r31, 0x0B	; 11
    16b8:	87 e0       	ldi	r24, 0x07	; 7
    16ba:	80 83       	st	Z, r24
    16bc:	83 e1       	ldi	r24, 0x13	; 19
    16be:	81 83       	std	Z+1, r24	; 0x01
    16c0:	8f ef       	ldi	r24, 0xFF	; 255
    16c2:	90 e0       	ldi	r25, 0x00	; 0
    16c4:	86 a3       	lds	r24, 0x56
    16c6:	97 a3       	lds	r25, 0x57
    16c8:	80 e1       	ldi	r24, 0x10	; 16
    16ca:	90 e0       	ldi	r25, 0x00	; 0
    16cc:	80 a7       	lds	r24, 0x70
    16ce:	91 a7       	lds	r25, 0x71
    16d0:	08 95       	ret

000016d2 <init_uart>:
    16d2:	fc 01       	movw	r30, r24
    16d4:	88 e0       	ldi	r24, 0x08	; 8
    16d6:	e0 3a       	cpi	r30, 0xA0	; 160
    16d8:	f8 07       	cpc	r31, r24
    16da:	51 f4       	brne	.+20     	; 0x16f0 <init_uart+0x1e>
    16dc:	a0 e4       	ldi	r26, 0x40	; 64
    16de:	b6 e0       	ldi	r27, 0x06	; 6
    16e0:	88 e0       	ldi	r24, 0x08	; 8
    16e2:	11 96       	adiw	r26, 0x01	; 1
    16e4:	8c 93       	st	X, r24
    16e6:	11 97       	sbiw	r26, 0x01	; 1
    16e8:	15 96       	adiw	r26, 0x05	; 5
    16ea:	8c 93       	st	X, r24
    16ec:	15 97       	sbiw	r26, 0x05	; 5
    16ee:	61 c0       	rjmp	.+194    	; 0x17b2 <init_uart+0xe0>
    16f0:	88 e0       	ldi	r24, 0x08	; 8
    16f2:	e0 3b       	cpi	r30, 0xB0	; 176
    16f4:	f8 07       	cpc	r31, r24
    16f6:	51 f4       	brne	.+20     	; 0x170c <init_uart+0x3a>
    16f8:	a0 e4       	ldi	r26, 0x40	; 64
    16fa:	b6 e0       	ldi	r27, 0x06	; 6
    16fc:	80 e8       	ldi	r24, 0x80	; 128
    16fe:	11 96       	adiw	r26, 0x01	; 1
    1700:	8c 93       	st	X, r24
    1702:	11 97       	sbiw	r26, 0x01	; 1
    1704:	15 96       	adiw	r26, 0x05	; 5
    1706:	8c 93       	st	X, r24
    1708:	15 97       	sbiw	r26, 0x05	; 5
    170a:	53 c0       	rjmp	.+166    	; 0x17b2 <init_uart+0xe0>
    170c:	89 e0       	ldi	r24, 0x09	; 9
    170e:	e0 3a       	cpi	r30, 0xA0	; 160
    1710:	f8 07       	cpc	r31, r24
    1712:	51 f4       	brne	.+20     	; 0x1728 <init_uart+0x56>
    1714:	a0 e6       	ldi	r26, 0x60	; 96
    1716:	b6 e0       	ldi	r27, 0x06	; 6
    1718:	88 e0       	ldi	r24, 0x08	; 8
    171a:	11 96       	adiw	r26, 0x01	; 1
    171c:	8c 93       	st	X, r24
    171e:	11 97       	sbiw	r26, 0x01	; 1
    1720:	15 96       	adiw	r26, 0x05	; 5
    1722:	8c 93       	st	X, r24
    1724:	15 97       	sbiw	r26, 0x05	; 5
    1726:	45 c0       	rjmp	.+138    	; 0x17b2 <init_uart+0xe0>
    1728:	89 e0       	ldi	r24, 0x09	; 9
    172a:	e0 3b       	cpi	r30, 0xB0	; 176
    172c:	f8 07       	cpc	r31, r24
    172e:	51 f4       	brne	.+20     	; 0x1744 <init_uart+0x72>
    1730:	a0 e6       	ldi	r26, 0x60	; 96
    1732:	b6 e0       	ldi	r27, 0x06	; 6
    1734:	80 e8       	ldi	r24, 0x80	; 128
    1736:	11 96       	adiw	r26, 0x01	; 1
    1738:	8c 93       	st	X, r24
    173a:	11 97       	sbiw	r26, 0x01	; 1
    173c:	15 96       	adiw	r26, 0x05	; 5
    173e:	8c 93       	st	X, r24
    1740:	15 97       	sbiw	r26, 0x05	; 5
    1742:	37 c0       	rjmp	.+110    	; 0x17b2 <init_uart+0xe0>
    1744:	8a e0       	ldi	r24, 0x0A	; 10
    1746:	e0 3a       	cpi	r30, 0xA0	; 160
    1748:	f8 07       	cpc	r31, r24
    174a:	51 f4       	brne	.+20     	; 0x1760 <init_uart+0x8e>
    174c:	a0 e8       	ldi	r26, 0x80	; 128
    174e:	b6 e0       	ldi	r27, 0x06	; 6
    1750:	88 e0       	ldi	r24, 0x08	; 8
    1752:	11 96       	adiw	r26, 0x01	; 1
    1754:	8c 93       	st	X, r24
    1756:	11 97       	sbiw	r26, 0x01	; 1
    1758:	15 96       	adiw	r26, 0x05	; 5
    175a:	8c 93       	st	X, r24
    175c:	15 97       	sbiw	r26, 0x05	; 5
    175e:	29 c0       	rjmp	.+82     	; 0x17b2 <init_uart+0xe0>
    1760:	8a e0       	ldi	r24, 0x0A	; 10
    1762:	e0 3b       	cpi	r30, 0xB0	; 176
    1764:	f8 07       	cpc	r31, r24
    1766:	51 f4       	brne	.+20     	; 0x177c <init_uart+0xaa>
    1768:	a0 e8       	ldi	r26, 0x80	; 128
    176a:	b6 e0       	ldi	r27, 0x06	; 6
    176c:	80 e8       	ldi	r24, 0x80	; 128
    176e:	11 96       	adiw	r26, 0x01	; 1
    1770:	8c 93       	st	X, r24
    1772:	11 97       	sbiw	r26, 0x01	; 1
    1774:	15 96       	adiw	r26, 0x05	; 5
    1776:	8c 93       	st	X, r24
    1778:	15 97       	sbiw	r26, 0x05	; 5
    177a:	1b c0       	rjmp	.+54     	; 0x17b2 <init_uart+0xe0>
    177c:	8b e0       	ldi	r24, 0x0B	; 11
    177e:	e0 3a       	cpi	r30, 0xA0	; 160
    1780:	f8 07       	cpc	r31, r24
    1782:	51 f4       	brne	.+20     	; 0x1798 <init_uart+0xc6>
    1784:	a0 ea       	ldi	r26, 0xA0	; 160
    1786:	b6 e0       	ldi	r27, 0x06	; 6
    1788:	88 e0       	ldi	r24, 0x08	; 8
    178a:	11 96       	adiw	r26, 0x01	; 1
    178c:	8c 93       	st	X, r24
    178e:	11 97       	sbiw	r26, 0x01	; 1
    1790:	15 96       	adiw	r26, 0x05	; 5
    1792:	8c 93       	st	X, r24
    1794:	15 97       	sbiw	r26, 0x05	; 5
    1796:	0d c0       	rjmp	.+26     	; 0x17b2 <init_uart+0xe0>
    1798:	8b e0       	ldi	r24, 0x0B	; 11
    179a:	e0 3b       	cpi	r30, 0xB0	; 176
    179c:	f8 07       	cpc	r31, r24
    179e:	49 f4       	brne	.+18     	; 0x17b2 <init_uart+0xe0>
    17a0:	a0 ea       	ldi	r26, 0xA0	; 160
    17a2:	b6 e0       	ldi	r27, 0x06	; 6
    17a4:	80 e8       	ldi	r24, 0x80	; 128
    17a6:	11 96       	adiw	r26, 0x01	; 1
    17a8:	8c 93       	st	X, r24
    17aa:	11 97       	sbiw	r26, 0x01	; 1
    17ac:	15 96       	adiw	r26, 0x05	; 5
    17ae:	8c 93       	st	X, r24
    17b0:	15 97       	sbiw	r26, 0x05	; 5
    17b2:	61 30       	cpi	r22, 0x01	; 1
    17b4:	39 f0       	breq	.+14     	; 0x17c4 <init_uart+0xf2>
    17b6:	62 30       	cpi	r22, 0x02	; 2
    17b8:	51 f4       	brne	.+20     	; 0x17ce <init_uart+0xfc>
    17ba:	8c ea       	ldi	r24, 0xAC	; 172
    17bc:	87 83       	std	Z+7, r24	; 0x07
    17be:	85 ec       	ldi	r24, 0xC5	; 197
    17c0:	86 83       	std	Z+6, r24	; 0x06
    17c2:	09 c0       	rjmp	.+18     	; 0x17d6 <init_uart+0x104>
    17c4:	88 ea       	ldi	r24, 0xA8	; 168
    17c6:	87 83       	std	Z+7, r24	; 0x07
    17c8:	8e e6       	ldi	r24, 0x6E	; 110
    17ca:	86 83       	std	Z+6, r24	; 0x06
    17cc:	04 c0       	rjmp	.+8      	; 0x17d6 <init_uart+0x104>
    17ce:	84 ea       	ldi	r24, 0xA4	; 164
    17d0:	87 83       	std	Z+7, r24	; 0x07
    17d2:	8e e2       	ldi	r24, 0x2E	; 46
    17d4:	86 83       	std	Z+6, r24	; 0x06
    17d6:	13 82       	std	Z+3, r1	; 0x03
    17d8:	88 e1       	ldi	r24, 0x18	; 24
    17da:	84 83       	std	Z+4, r24	; 0x04
    17dc:	83 e0       	ldi	r24, 0x03	; 3
    17de:	85 83       	std	Z+5, r24	; 0x05
    17e0:	08 95       	ret

000017e2 <uart_send_byte>:
    17e2:	fc 01       	movw	r30, r24
    17e4:	81 81       	ldd	r24, Z+1	; 0x01
    17e6:	85 ff       	sbrs	r24, 5
    17e8:	fd cf       	rjmp	.-6      	; 0x17e4 <uart_send_byte+0x2>
    17ea:	60 83       	st	Z, r22
    17ec:	08 95       	ret

000017ee <uart_send_string>:
    17ee:	cf 92       	push	r12
    17f0:	df 92       	push	r13
    17f2:	ef 92       	push	r14
    17f4:	ff 92       	push	r15
    17f6:	0f 93       	push	r16
    17f8:	1f 93       	push	r17
    17fa:	cf 93       	push	r28
    17fc:	df 93       	push	r29
    17fe:	6c 01       	movw	r12, r24
    1800:	e6 2f       	mov	r30, r22
    1802:	f7 2f       	mov	r31, r23
    1804:	ef 01       	movw	r28, r30
    1806:	09 90       	ld	r0, Y+
    1808:	00 20       	and	r0, r0
    180a:	e9 f7       	brne	.-6      	; 0x1806 <uart_send_string+0x18>
    180c:	21 97       	sbiw	r28, 0x01	; 1
    180e:	ce 1b       	sub	r28, r30
    1810:	df 0b       	sbc	r29, r31
    1812:	79 f0       	breq	.+30     	; 0x1832 <uart_send_string+0x44>
    1814:	e6 2e       	mov	r14, r22
    1816:	f7 2e       	mov	r15, r23
    1818:	00 e0       	ldi	r16, 0x00	; 0
    181a:	10 e0       	ldi	r17, 0x00	; 0
    181c:	f7 01       	movw	r30, r14
    181e:	61 91       	ld	r22, Z+
    1820:	7f 01       	movw	r14, r30
    1822:	c6 01       	movw	r24, r12
    1824:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <uart_send_byte>
    1828:	0f 5f       	subi	r16, 0xFF	; 255
    182a:	1f 4f       	sbci	r17, 0xFF	; 255
    182c:	0c 17       	cp	r16, r28
    182e:	1d 07       	cpc	r17, r29
    1830:	a9 f7       	brne	.-22     	; 0x181c <uart_send_string+0x2e>
    1832:	df 91       	pop	r29
    1834:	cf 91       	pop	r28
    1836:	1f 91       	pop	r17
    1838:	0f 91       	pop	r16
    183a:	ff 90       	pop	r15
    183c:	ef 90       	pop	r14
    183e:	df 90       	pop	r13
    1840:	cf 90       	pop	r12
    1842:	08 95       	ret

00001844 <uart_send_BIN4>:
    1844:	cf 93       	push	r28
    1846:	df 93       	push	r29
    1848:	ec 01       	movw	r28, r24
    184a:	67 30       	cpi	r22, 0x07	; 7
    184c:	09 f4       	brne	.+2      	; 0x1850 <uart_send_BIN4+0xc>
    184e:	9d c0       	rjmp	.+314    	; 0x198a <uart_send_BIN4+0x146>
    1850:	68 30       	cpi	r22, 0x08	; 8
    1852:	90 f4       	brcc	.+36     	; 0x1878 <uart_send_BIN4+0x34>
    1854:	63 30       	cpi	r22, 0x03	; 3
    1856:	09 f4       	brne	.+2      	; 0x185a <uart_send_BIN4+0x16>
    1858:	58 c0       	rjmp	.+176    	; 0x190a <uart_send_BIN4+0xc6>
    185a:	64 30       	cpi	r22, 0x04	; 4
    185c:	30 f4       	brcc	.+12     	; 0x186a <uart_send_BIN4+0x26>
    185e:	61 30       	cpi	r22, 0x01	; 1
    1860:	a1 f1       	breq	.+104    	; 0x18ca <uart_send_BIN4+0x86>
    1862:	62 30       	cpi	r22, 0x02	; 2
    1864:	08 f0       	brcs	.+2      	; 0x1868 <uart_send_BIN4+0x24>
    1866:	41 c0       	rjmp	.+130    	; 0x18ea <uart_send_BIN4+0xa6>
    1868:	20 c0       	rjmp	.+64     	; 0x18aa <uart_send_BIN4+0x66>
    186a:	65 30       	cpi	r22, 0x05	; 5
    186c:	09 f4       	brne	.+2      	; 0x1870 <uart_send_BIN4+0x2c>
    186e:	6d c0       	rjmp	.+218    	; 0x194a <uart_send_BIN4+0x106>
    1870:	66 30       	cpi	r22, 0x06	; 6
    1872:	08 f0       	brcs	.+2      	; 0x1876 <uart_send_BIN4+0x32>
    1874:	7a c0       	rjmp	.+244    	; 0x196a <uart_send_BIN4+0x126>
    1876:	59 c0       	rjmp	.+178    	; 0x192a <uart_send_BIN4+0xe6>
    1878:	6b 30       	cpi	r22, 0x0B	; 11
    187a:	09 f4       	brne	.+2      	; 0x187e <uart_send_BIN4+0x3a>
    187c:	c6 c0       	rjmp	.+396    	; 0x1a0a <uart_send_BIN4+0x1c6>
    187e:	6c 30       	cpi	r22, 0x0C	; 12
    1880:	38 f4       	brcc	.+14     	; 0x1890 <uart_send_BIN4+0x4c>
    1882:	69 30       	cpi	r22, 0x09	; 9
    1884:	09 f4       	brne	.+2      	; 0x1888 <uart_send_BIN4+0x44>
    1886:	a1 c0       	rjmp	.+322    	; 0x19ca <uart_send_BIN4+0x186>
    1888:	6a 30       	cpi	r22, 0x0A	; 10
    188a:	08 f0       	brcs	.+2      	; 0x188e <uart_send_BIN4+0x4a>
    188c:	ae c0       	rjmp	.+348    	; 0x19ea <uart_send_BIN4+0x1a6>
    188e:	8d c0       	rjmp	.+282    	; 0x19aa <uart_send_BIN4+0x166>
    1890:	6d 30       	cpi	r22, 0x0D	; 13
    1892:	09 f4       	brne	.+2      	; 0x1896 <uart_send_BIN4+0x52>
    1894:	da c0       	rjmp	.+436    	; 0x1a4a <uart_send_BIN4+0x206>
    1896:	6d 30       	cpi	r22, 0x0D	; 13
    1898:	08 f4       	brcc	.+2      	; 0x189c <uart_send_BIN4+0x58>
    189a:	c7 c0       	rjmp	.+398    	; 0x1a2a <uart_send_BIN4+0x1e6>
    189c:	6e 30       	cpi	r22, 0x0E	; 14
    189e:	09 f4       	brne	.+2      	; 0x18a2 <uart_send_BIN4+0x5e>
    18a0:	e4 c0       	rjmp	.+456    	; 0x1a6a <uart_send_BIN4+0x226>
    18a2:	6f 30       	cpi	r22, 0x0F	; 15
    18a4:	09 f0       	breq	.+2      	; 0x18a8 <uart_send_BIN4+0x64>
    18a6:	00 c1       	rjmp	.+512    	; 0x1aa8 <uart_send_BIN4+0x264>
    18a8:	f0 c0       	rjmp	.+480    	; 0x1a8a <uart_send_BIN4+0x246>
    18aa:	60 e3       	ldi	r22, 0x30	; 48
    18ac:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <uart_send_byte>
    18b0:	ce 01       	movw	r24, r28
    18b2:	60 e3       	ldi	r22, 0x30	; 48
    18b4:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <uart_send_byte>
    18b8:	ce 01       	movw	r24, r28
    18ba:	60 e3       	ldi	r22, 0x30	; 48
    18bc:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <uart_send_byte>
    18c0:	ce 01       	movw	r24, r28
    18c2:	60 e3       	ldi	r22, 0x30	; 48
    18c4:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <uart_send_byte>
    18c8:	ef c0       	rjmp	.+478    	; 0x1aa8 <uart_send_BIN4+0x264>
    18ca:	60 e3       	ldi	r22, 0x30	; 48
    18cc:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <uart_send_byte>
    18d0:	ce 01       	movw	r24, r28
    18d2:	60 e3       	ldi	r22, 0x30	; 48
    18d4:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <uart_send_byte>
    18d8:	ce 01       	movw	r24, r28
    18da:	60 e3       	ldi	r22, 0x30	; 48
    18dc:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <uart_send_byte>
    18e0:	ce 01       	movw	r24, r28
    18e2:	61 e3       	ldi	r22, 0x31	; 49
    18e4:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <uart_send_byte>
    18e8:	df c0       	rjmp	.+446    	; 0x1aa8 <uart_send_BIN4+0x264>
    18ea:	60 e3       	ldi	r22, 0x30	; 48
    18ec:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <uart_send_byte>
    18f0:	ce 01       	movw	r24, r28
    18f2:	60 e3       	ldi	r22, 0x30	; 48
    18f4:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <uart_send_byte>
    18f8:	ce 01       	movw	r24, r28
    18fa:	61 e3       	ldi	r22, 0x31	; 49
    18fc:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <uart_send_byte>
    1900:	ce 01       	movw	r24, r28
    1902:	60 e3       	ldi	r22, 0x30	; 48
    1904:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <uart_send_byte>
    1908:	cf c0       	rjmp	.+414    	; 0x1aa8 <uart_send_BIN4+0x264>
    190a:	60 e3       	ldi	r22, 0x30	; 48
    190c:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <uart_send_byte>
    1910:	ce 01       	movw	r24, r28
    1912:	60 e3       	ldi	r22, 0x30	; 48
    1914:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <uart_send_byte>
    1918:	ce 01       	movw	r24, r28
    191a:	61 e3       	ldi	r22, 0x31	; 49
    191c:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <uart_send_byte>
    1920:	ce 01       	movw	r24, r28
    1922:	61 e3       	ldi	r22, 0x31	; 49
    1924:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <uart_send_byte>
    1928:	bf c0       	rjmp	.+382    	; 0x1aa8 <uart_send_BIN4+0x264>
    192a:	60 e3       	ldi	r22, 0x30	; 48
    192c:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <uart_send_byte>
    1930:	ce 01       	movw	r24, r28
    1932:	61 e3       	ldi	r22, 0x31	; 49
    1934:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <uart_send_byte>
    1938:	ce 01       	movw	r24, r28
    193a:	60 e3       	ldi	r22, 0x30	; 48
    193c:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <uart_send_byte>
    1940:	ce 01       	movw	r24, r28
    1942:	60 e3       	ldi	r22, 0x30	; 48
    1944:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <uart_send_byte>
    1948:	af c0       	rjmp	.+350    	; 0x1aa8 <uart_send_BIN4+0x264>
    194a:	60 e3       	ldi	r22, 0x30	; 48
    194c:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <uart_send_byte>
    1950:	ce 01       	movw	r24, r28
    1952:	61 e3       	ldi	r22, 0x31	; 49
    1954:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <uart_send_byte>
    1958:	ce 01       	movw	r24, r28
    195a:	60 e3       	ldi	r22, 0x30	; 48
    195c:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <uart_send_byte>
    1960:	ce 01       	movw	r24, r28
    1962:	61 e3       	ldi	r22, 0x31	; 49
    1964:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <uart_send_byte>
    1968:	9f c0       	rjmp	.+318    	; 0x1aa8 <uart_send_BIN4+0x264>
    196a:	60 e3       	ldi	r22, 0x30	; 48
    196c:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <uart_send_byte>
    1970:	ce 01       	movw	r24, r28
    1972:	61 e3       	ldi	r22, 0x31	; 49
    1974:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <uart_send_byte>
    1978:	ce 01       	movw	r24, r28
    197a:	61 e3       	ldi	r22, 0x31	; 49
    197c:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <uart_send_byte>
    1980:	ce 01       	movw	r24, r28
    1982:	60 e3       	ldi	r22, 0x30	; 48
    1984:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <uart_send_byte>
    1988:	8f c0       	rjmp	.+286    	; 0x1aa8 <uart_send_BIN4+0x264>
    198a:	60 e3       	ldi	r22, 0x30	; 48
    198c:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <uart_send_byte>
    1990:	ce 01       	movw	r24, r28
    1992:	61 e3       	ldi	r22, 0x31	; 49
    1994:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <uart_send_byte>
    1998:	ce 01       	movw	r24, r28
    199a:	61 e3       	ldi	r22, 0x31	; 49
    199c:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <uart_send_byte>
    19a0:	ce 01       	movw	r24, r28
    19a2:	61 e3       	ldi	r22, 0x31	; 49
    19a4:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <uart_send_byte>
    19a8:	7f c0       	rjmp	.+254    	; 0x1aa8 <uart_send_BIN4+0x264>
    19aa:	61 e3       	ldi	r22, 0x31	; 49
    19ac:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <uart_send_byte>
    19b0:	ce 01       	movw	r24, r28
    19b2:	60 e3       	ldi	r22, 0x30	; 48
    19b4:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <uart_send_byte>
    19b8:	ce 01       	movw	r24, r28
    19ba:	60 e3       	ldi	r22, 0x30	; 48
    19bc:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <uart_send_byte>
    19c0:	ce 01       	movw	r24, r28
    19c2:	60 e3       	ldi	r22, 0x30	; 48
    19c4:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <uart_send_byte>
    19c8:	6f c0       	rjmp	.+222    	; 0x1aa8 <uart_send_BIN4+0x264>
    19ca:	61 e3       	ldi	r22, 0x31	; 49
    19cc:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <uart_send_byte>
    19d0:	ce 01       	movw	r24, r28
    19d2:	60 e3       	ldi	r22, 0x30	; 48
    19d4:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <uart_send_byte>
    19d8:	ce 01       	movw	r24, r28
    19da:	60 e3       	ldi	r22, 0x30	; 48
    19dc:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <uart_send_byte>
    19e0:	ce 01       	movw	r24, r28
    19e2:	61 e3       	ldi	r22, 0x31	; 49
    19e4:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <uart_send_byte>
    19e8:	5f c0       	rjmp	.+190    	; 0x1aa8 <uart_send_BIN4+0x264>
    19ea:	61 e3       	ldi	r22, 0x31	; 49
    19ec:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <uart_send_byte>
    19f0:	ce 01       	movw	r24, r28
    19f2:	60 e3       	ldi	r22, 0x30	; 48
    19f4:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <uart_send_byte>
    19f8:	ce 01       	movw	r24, r28
    19fa:	61 e3       	ldi	r22, 0x31	; 49
    19fc:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <uart_send_byte>
    1a00:	ce 01       	movw	r24, r28
    1a02:	60 e3       	ldi	r22, 0x30	; 48
    1a04:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <uart_send_byte>
    1a08:	4f c0       	rjmp	.+158    	; 0x1aa8 <uart_send_BIN4+0x264>
    1a0a:	61 e3       	ldi	r22, 0x31	; 49
    1a0c:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <uart_send_byte>
    1a10:	ce 01       	movw	r24, r28
    1a12:	60 e3       	ldi	r22, 0x30	; 48
    1a14:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <uart_send_byte>
    1a18:	ce 01       	movw	r24, r28
    1a1a:	61 e3       	ldi	r22, 0x31	; 49
    1a1c:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <uart_send_byte>
    1a20:	ce 01       	movw	r24, r28
    1a22:	61 e3       	ldi	r22, 0x31	; 49
    1a24:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <uart_send_byte>
    1a28:	3f c0       	rjmp	.+126    	; 0x1aa8 <uart_send_BIN4+0x264>
    1a2a:	61 e3       	ldi	r22, 0x31	; 49
    1a2c:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <uart_send_byte>
    1a30:	ce 01       	movw	r24, r28
    1a32:	61 e3       	ldi	r22, 0x31	; 49
    1a34:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <uart_send_byte>
    1a38:	ce 01       	movw	r24, r28
    1a3a:	60 e3       	ldi	r22, 0x30	; 48
    1a3c:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <uart_send_byte>
    1a40:	ce 01       	movw	r24, r28
    1a42:	60 e3       	ldi	r22, 0x30	; 48
    1a44:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <uart_send_byte>
    1a48:	2f c0       	rjmp	.+94     	; 0x1aa8 <uart_send_BIN4+0x264>
    1a4a:	61 e3       	ldi	r22, 0x31	; 49
    1a4c:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <uart_send_byte>
    1a50:	ce 01       	movw	r24, r28
    1a52:	61 e3       	ldi	r22, 0x31	; 49
    1a54:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <uart_send_byte>
    1a58:	ce 01       	movw	r24, r28
    1a5a:	60 e3       	ldi	r22, 0x30	; 48
    1a5c:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <uart_send_byte>
    1a60:	ce 01       	movw	r24, r28
    1a62:	61 e3       	ldi	r22, 0x31	; 49
    1a64:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <uart_send_byte>
    1a68:	1f c0       	rjmp	.+62     	; 0x1aa8 <uart_send_BIN4+0x264>
    1a6a:	61 e3       	ldi	r22, 0x31	; 49
    1a6c:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <uart_send_byte>
    1a70:	ce 01       	movw	r24, r28
    1a72:	61 e3       	ldi	r22, 0x31	; 49
    1a74:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <uart_send_byte>
    1a78:	ce 01       	movw	r24, r28
    1a7a:	61 e3       	ldi	r22, 0x31	; 49
    1a7c:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <uart_send_byte>
    1a80:	ce 01       	movw	r24, r28
    1a82:	60 e3       	ldi	r22, 0x30	; 48
    1a84:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <uart_send_byte>
    1a88:	0f c0       	rjmp	.+30     	; 0x1aa8 <uart_send_BIN4+0x264>
    1a8a:	61 e3       	ldi	r22, 0x31	; 49
    1a8c:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <uart_send_byte>
    1a90:	ce 01       	movw	r24, r28
    1a92:	61 e3       	ldi	r22, 0x31	; 49
    1a94:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <uart_send_byte>
    1a98:	ce 01       	movw	r24, r28
    1a9a:	61 e3       	ldi	r22, 0x31	; 49
    1a9c:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <uart_send_byte>
    1aa0:	ce 01       	movw	r24, r28
    1aa2:	61 e3       	ldi	r22, 0x31	; 49
    1aa4:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <uart_send_byte>
    1aa8:	df 91       	pop	r29
    1aaa:	cf 91       	pop	r28
    1aac:	08 95       	ret

00001aae <uart_send_BIN8>:
    1aae:	1f 93       	push	r17
    1ab0:	cf 93       	push	r28
    1ab2:	df 93       	push	r29
    1ab4:	ec 01       	movw	r28, r24
    1ab6:	16 2f       	mov	r17, r22
    1ab8:	62 e6       	ldi	r22, 0x62	; 98
    1aba:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <uart_send_byte>
    1abe:	61 2f       	mov	r22, r17
    1ac0:	62 95       	swap	r22
    1ac2:	6f 70       	andi	r22, 0x0F	; 15
    1ac4:	ce 01       	movw	r24, r28
    1ac6:	0e 94 22 0c 	call	0x1844	; 0x1844 <uart_send_BIN4>
    1aca:	61 2f       	mov	r22, r17
    1acc:	6f 70       	andi	r22, 0x0F	; 15
    1ace:	ce 01       	movw	r24, r28
    1ad0:	0e 94 22 0c 	call	0x1844	; 0x1844 <uart_send_BIN4>
    1ad4:	df 91       	pop	r29
    1ad6:	cf 91       	pop	r28
    1ad8:	1f 91       	pop	r17
    1ada:	08 95       	ret

00001adc <uart_send_HEX4>:
    1adc:	67 30       	cpi	r22, 0x07	; 7
    1ade:	09 f4       	brne	.+2      	; 0x1ae2 <uart_send_HEX4+0x6>
    1ae0:	3f c0       	rjmp	.+126    	; 0x1b60 <uart_send_HEX4+0x84>
    1ae2:	68 30       	cpi	r22, 0x08	; 8
    1ae4:	70 f4       	brcc	.+28     	; 0x1b02 <uart_send_HEX4+0x26>
    1ae6:	63 30       	cpi	r22, 0x03	; 3
    1ae8:	59 f1       	breq	.+86     	; 0x1b40 <uart_send_HEX4+0x64>
    1aea:	64 30       	cpi	r22, 0x04	; 4
    1aec:	28 f4       	brcc	.+10     	; 0x1af8 <uart_send_HEX4+0x1c>
    1aee:	61 30       	cpi	r22, 0x01	; 1
    1af0:	f9 f0       	breq	.+62     	; 0x1b30 <uart_send_HEX4+0x54>
    1af2:	62 30       	cpi	r22, 0x02	; 2
    1af4:	08 f5       	brcc	.+66     	; 0x1b38 <uart_send_HEX4+0x5c>
    1af6:	18 c0       	rjmp	.+48     	; 0x1b28 <uart_send_HEX4+0x4c>
    1af8:	65 30       	cpi	r22, 0x05	; 5
    1afa:	51 f1       	breq	.+84     	; 0x1b50 <uart_send_HEX4+0x74>
    1afc:	66 30       	cpi	r22, 0x06	; 6
    1afe:	60 f5       	brcc	.+88     	; 0x1b58 <uart_send_HEX4+0x7c>
    1b00:	23 c0       	rjmp	.+70     	; 0x1b48 <uart_send_HEX4+0x6c>
    1b02:	6b 30       	cpi	r22, 0x0B	; 11
    1b04:	e9 f1       	breq	.+122    	; 0x1b80 <uart_send_HEX4+0xa4>
    1b06:	6c 30       	cpi	r22, 0x0C	; 12
    1b08:	28 f4       	brcc	.+10     	; 0x1b14 <uart_send_HEX4+0x38>
    1b0a:	69 30       	cpi	r22, 0x09	; 9
    1b0c:	89 f1       	breq	.+98     	; 0x1b70 <uart_send_HEX4+0x94>
    1b0e:	6a 30       	cpi	r22, 0x0A	; 10
    1b10:	98 f5       	brcc	.+102    	; 0x1b78 <uart_send_HEX4+0x9c>
    1b12:	2a c0       	rjmp	.+84     	; 0x1b68 <uart_send_HEX4+0x8c>
    1b14:	6d 30       	cpi	r22, 0x0D	; 13
    1b16:	e1 f1       	breq	.+120    	; 0x1b90 <uart_send_HEX4+0xb4>
    1b18:	6d 30       	cpi	r22, 0x0D	; 13
    1b1a:	b0 f1       	brcs	.+108    	; 0x1b88 <uart_send_HEX4+0xac>
    1b1c:	6e 30       	cpi	r22, 0x0E	; 14
    1b1e:	e1 f1       	breq	.+120    	; 0x1b98 <uart_send_HEX4+0xbc>
    1b20:	6f 30       	cpi	r22, 0x0F	; 15
    1b22:	09 f0       	breq	.+2      	; 0x1b26 <uart_send_HEX4+0x4a>
    1b24:	40 c0       	rjmp	.+128    	; 0x1ba6 <uart_send_HEX4+0xca>
    1b26:	3c c0       	rjmp	.+120    	; 0x1ba0 <uart_send_HEX4+0xc4>
    1b28:	60 e3       	ldi	r22, 0x30	; 48
    1b2a:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <uart_send_byte>
    1b2e:	08 95       	ret
    1b30:	61 e3       	ldi	r22, 0x31	; 49
    1b32:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <uart_send_byte>
    1b36:	08 95       	ret
    1b38:	62 e3       	ldi	r22, 0x32	; 50
    1b3a:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <uart_send_byte>
    1b3e:	08 95       	ret
    1b40:	63 e3       	ldi	r22, 0x33	; 51
    1b42:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <uart_send_byte>
    1b46:	08 95       	ret
    1b48:	64 e3       	ldi	r22, 0x34	; 52
    1b4a:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <uart_send_byte>
    1b4e:	08 95       	ret
    1b50:	65 e3       	ldi	r22, 0x35	; 53
    1b52:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <uart_send_byte>
    1b56:	08 95       	ret
    1b58:	66 e3       	ldi	r22, 0x36	; 54
    1b5a:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <uart_send_byte>
    1b5e:	08 95       	ret
    1b60:	67 e3       	ldi	r22, 0x37	; 55
    1b62:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <uart_send_byte>
    1b66:	08 95       	ret
    1b68:	68 e3       	ldi	r22, 0x38	; 56
    1b6a:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <uart_send_byte>
    1b6e:	08 95       	ret
    1b70:	69 e3       	ldi	r22, 0x39	; 57
    1b72:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <uart_send_byte>
    1b76:	08 95       	ret
    1b78:	61 e4       	ldi	r22, 0x41	; 65
    1b7a:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <uart_send_byte>
    1b7e:	08 95       	ret
    1b80:	62 e4       	ldi	r22, 0x42	; 66
    1b82:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <uart_send_byte>
    1b86:	08 95       	ret
    1b88:	63 e4       	ldi	r22, 0x43	; 67
    1b8a:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <uart_send_byte>
    1b8e:	08 95       	ret
    1b90:	64 e4       	ldi	r22, 0x44	; 68
    1b92:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <uart_send_byte>
    1b96:	08 95       	ret
    1b98:	65 e4       	ldi	r22, 0x45	; 69
    1b9a:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <uart_send_byte>
    1b9e:	08 95       	ret
    1ba0:	66 e4       	ldi	r22, 0x46	; 70
    1ba2:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <uart_send_byte>
    1ba6:	08 95       	ret

00001ba8 <uart_send_HEX8>:
    1ba8:	1f 93       	push	r17
    1baa:	cf 93       	push	r28
    1bac:	df 93       	push	r29
    1bae:	ec 01       	movw	r28, r24
    1bb0:	16 2f       	mov	r17, r22
    1bb2:	62 95       	swap	r22
    1bb4:	6f 70       	andi	r22, 0x0F	; 15
    1bb6:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <uart_send_HEX4>
    1bba:	61 2f       	mov	r22, r17
    1bbc:	6f 70       	andi	r22, 0x0F	; 15
    1bbe:	ce 01       	movw	r24, r28
    1bc0:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <uart_send_HEX4>
    1bc4:	df 91       	pop	r29
    1bc6:	cf 91       	pop	r28
    1bc8:	1f 91       	pop	r17
    1bca:	08 95       	ret

00001bcc <uart_send_HEX16b>:
    1bcc:	1f 93       	push	r17
    1bce:	cf 93       	push	r28
    1bd0:	df 93       	push	r29
    1bd2:	ec 01       	movw	r28, r24
    1bd4:	14 2f       	mov	r17, r20
    1bd6:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <uart_send_HEX8>
    1bda:	ce 01       	movw	r24, r28
    1bdc:	61 2f       	mov	r22, r17
    1bde:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <uart_send_HEX8>
    1be2:	df 91       	pop	r29
    1be4:	cf 91       	pop	r28
    1be6:	1f 91       	pop	r17
    1be8:	08 95       	ret

00001bea <uart_send_HEX16>:
    1bea:	1f 93       	push	r17
    1bec:	cf 93       	push	r28
    1bee:	df 93       	push	r29
    1bf0:	ec 01       	movw	r28, r24
    1bf2:	16 2f       	mov	r17, r22
    1bf4:	67 2f       	mov	r22, r23
    1bf6:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <uart_send_HEX8>
    1bfa:	ce 01       	movw	r24, r28
    1bfc:	61 2f       	mov	r22, r17
    1bfe:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <uart_send_HEX8>
    1c02:	df 91       	pop	r29
    1c04:	cf 91       	pop	r28
    1c06:	1f 91       	pop	r17
    1c08:	08 95       	ret

00001c0a <uart_enq_BIN4>:
    1c0a:	cf 93       	push	r28
    1c0c:	df 93       	push	r29
    1c0e:	ec 01       	movw	r28, r24
    1c10:	67 30       	cpi	r22, 0x07	; 7
    1c12:	09 f4       	brne	.+2      	; 0x1c16 <uart_enq_BIN4+0xc>
    1c14:	9d c0       	rjmp	.+314    	; 0x1d50 <uart_enq_BIN4+0x146>
    1c16:	68 30       	cpi	r22, 0x08	; 8
    1c18:	90 f4       	brcc	.+36     	; 0x1c3e <uart_enq_BIN4+0x34>
    1c1a:	63 30       	cpi	r22, 0x03	; 3
    1c1c:	09 f4       	brne	.+2      	; 0x1c20 <uart_enq_BIN4+0x16>
    1c1e:	58 c0       	rjmp	.+176    	; 0x1cd0 <uart_enq_BIN4+0xc6>
    1c20:	64 30       	cpi	r22, 0x04	; 4
    1c22:	30 f4       	brcc	.+12     	; 0x1c30 <uart_enq_BIN4+0x26>
    1c24:	61 30       	cpi	r22, 0x01	; 1
    1c26:	a1 f1       	breq	.+104    	; 0x1c90 <uart_enq_BIN4+0x86>
    1c28:	62 30       	cpi	r22, 0x02	; 2
    1c2a:	08 f0       	brcs	.+2      	; 0x1c2e <uart_enq_BIN4+0x24>
    1c2c:	41 c0       	rjmp	.+130    	; 0x1cb0 <uart_enq_BIN4+0xa6>
    1c2e:	20 c0       	rjmp	.+64     	; 0x1c70 <uart_enq_BIN4+0x66>
    1c30:	65 30       	cpi	r22, 0x05	; 5
    1c32:	09 f4       	brne	.+2      	; 0x1c36 <uart_enq_BIN4+0x2c>
    1c34:	6d c0       	rjmp	.+218    	; 0x1d10 <uart_enq_BIN4+0x106>
    1c36:	66 30       	cpi	r22, 0x06	; 6
    1c38:	08 f0       	brcs	.+2      	; 0x1c3c <uart_enq_BIN4+0x32>
    1c3a:	7a c0       	rjmp	.+244    	; 0x1d30 <uart_enq_BIN4+0x126>
    1c3c:	59 c0       	rjmp	.+178    	; 0x1cf0 <uart_enq_BIN4+0xe6>
    1c3e:	6b 30       	cpi	r22, 0x0B	; 11
    1c40:	09 f4       	brne	.+2      	; 0x1c44 <uart_enq_BIN4+0x3a>
    1c42:	c6 c0       	rjmp	.+396    	; 0x1dd0 <uart_enq_BIN4+0x1c6>
    1c44:	6c 30       	cpi	r22, 0x0C	; 12
    1c46:	38 f4       	brcc	.+14     	; 0x1c56 <uart_enq_BIN4+0x4c>
    1c48:	69 30       	cpi	r22, 0x09	; 9
    1c4a:	09 f4       	brne	.+2      	; 0x1c4e <uart_enq_BIN4+0x44>
    1c4c:	a1 c0       	rjmp	.+322    	; 0x1d90 <uart_enq_BIN4+0x186>
    1c4e:	6a 30       	cpi	r22, 0x0A	; 10
    1c50:	08 f0       	brcs	.+2      	; 0x1c54 <uart_enq_BIN4+0x4a>
    1c52:	ae c0       	rjmp	.+348    	; 0x1db0 <uart_enq_BIN4+0x1a6>
    1c54:	8d c0       	rjmp	.+282    	; 0x1d70 <uart_enq_BIN4+0x166>
    1c56:	6d 30       	cpi	r22, 0x0D	; 13
    1c58:	09 f4       	brne	.+2      	; 0x1c5c <uart_enq_BIN4+0x52>
    1c5a:	da c0       	rjmp	.+436    	; 0x1e10 <uart_enq_BIN4+0x206>
    1c5c:	6d 30       	cpi	r22, 0x0D	; 13
    1c5e:	08 f4       	brcc	.+2      	; 0x1c62 <uart_enq_BIN4+0x58>
    1c60:	c7 c0       	rjmp	.+398    	; 0x1df0 <uart_enq_BIN4+0x1e6>
    1c62:	6e 30       	cpi	r22, 0x0E	; 14
    1c64:	09 f4       	brne	.+2      	; 0x1c68 <uart_enq_BIN4+0x5e>
    1c66:	e4 c0       	rjmp	.+456    	; 0x1e30 <uart_enq_BIN4+0x226>
    1c68:	6f 30       	cpi	r22, 0x0F	; 15
    1c6a:	09 f0       	breq	.+2      	; 0x1c6e <uart_enq_BIN4+0x64>
    1c6c:	00 c1       	rjmp	.+512    	; 0x1e6e <uart_enq_BIN4+0x264>
    1c6e:	f0 c0       	rjmp	.+480    	; 0x1e50 <uart_enq_BIN4+0x246>
    1c70:	60 e3       	ldi	r22, 0x30	; 48
    1c72:	0e 94 f8 1a 	call	0x35f0	; 0x35f0 <uart_enqueue>
    1c76:	ce 01       	movw	r24, r28
    1c78:	60 e3       	ldi	r22, 0x30	; 48
    1c7a:	0e 94 f8 1a 	call	0x35f0	; 0x35f0 <uart_enqueue>
    1c7e:	ce 01       	movw	r24, r28
    1c80:	60 e3       	ldi	r22, 0x30	; 48
    1c82:	0e 94 f8 1a 	call	0x35f0	; 0x35f0 <uart_enqueue>
    1c86:	ce 01       	movw	r24, r28
    1c88:	60 e3       	ldi	r22, 0x30	; 48
    1c8a:	0e 94 f8 1a 	call	0x35f0	; 0x35f0 <uart_enqueue>
    1c8e:	ef c0       	rjmp	.+478    	; 0x1e6e <uart_enq_BIN4+0x264>
    1c90:	60 e3       	ldi	r22, 0x30	; 48
    1c92:	0e 94 f8 1a 	call	0x35f0	; 0x35f0 <uart_enqueue>
    1c96:	ce 01       	movw	r24, r28
    1c98:	60 e3       	ldi	r22, 0x30	; 48
    1c9a:	0e 94 f8 1a 	call	0x35f0	; 0x35f0 <uart_enqueue>
    1c9e:	ce 01       	movw	r24, r28
    1ca0:	60 e3       	ldi	r22, 0x30	; 48
    1ca2:	0e 94 f8 1a 	call	0x35f0	; 0x35f0 <uart_enqueue>
    1ca6:	ce 01       	movw	r24, r28
    1ca8:	61 e3       	ldi	r22, 0x31	; 49
    1caa:	0e 94 f8 1a 	call	0x35f0	; 0x35f0 <uart_enqueue>
    1cae:	df c0       	rjmp	.+446    	; 0x1e6e <uart_enq_BIN4+0x264>
    1cb0:	60 e3       	ldi	r22, 0x30	; 48
    1cb2:	0e 94 f8 1a 	call	0x35f0	; 0x35f0 <uart_enqueue>
    1cb6:	ce 01       	movw	r24, r28
    1cb8:	60 e3       	ldi	r22, 0x30	; 48
    1cba:	0e 94 f8 1a 	call	0x35f0	; 0x35f0 <uart_enqueue>
    1cbe:	ce 01       	movw	r24, r28
    1cc0:	61 e3       	ldi	r22, 0x31	; 49
    1cc2:	0e 94 f8 1a 	call	0x35f0	; 0x35f0 <uart_enqueue>
    1cc6:	ce 01       	movw	r24, r28
    1cc8:	60 e3       	ldi	r22, 0x30	; 48
    1cca:	0e 94 f8 1a 	call	0x35f0	; 0x35f0 <uart_enqueue>
    1cce:	cf c0       	rjmp	.+414    	; 0x1e6e <uart_enq_BIN4+0x264>
    1cd0:	60 e3       	ldi	r22, 0x30	; 48
    1cd2:	0e 94 f8 1a 	call	0x35f0	; 0x35f0 <uart_enqueue>
    1cd6:	ce 01       	movw	r24, r28
    1cd8:	60 e3       	ldi	r22, 0x30	; 48
    1cda:	0e 94 f8 1a 	call	0x35f0	; 0x35f0 <uart_enqueue>
    1cde:	ce 01       	movw	r24, r28
    1ce0:	61 e3       	ldi	r22, 0x31	; 49
    1ce2:	0e 94 f8 1a 	call	0x35f0	; 0x35f0 <uart_enqueue>
    1ce6:	ce 01       	movw	r24, r28
    1ce8:	61 e3       	ldi	r22, 0x31	; 49
    1cea:	0e 94 f8 1a 	call	0x35f0	; 0x35f0 <uart_enqueue>
    1cee:	bf c0       	rjmp	.+382    	; 0x1e6e <uart_enq_BIN4+0x264>
    1cf0:	60 e3       	ldi	r22, 0x30	; 48
    1cf2:	0e 94 f8 1a 	call	0x35f0	; 0x35f0 <uart_enqueue>
    1cf6:	ce 01       	movw	r24, r28
    1cf8:	61 e3       	ldi	r22, 0x31	; 49
    1cfa:	0e 94 f8 1a 	call	0x35f0	; 0x35f0 <uart_enqueue>
    1cfe:	ce 01       	movw	r24, r28
    1d00:	60 e3       	ldi	r22, 0x30	; 48
    1d02:	0e 94 f8 1a 	call	0x35f0	; 0x35f0 <uart_enqueue>
    1d06:	ce 01       	movw	r24, r28
    1d08:	60 e3       	ldi	r22, 0x30	; 48
    1d0a:	0e 94 f8 1a 	call	0x35f0	; 0x35f0 <uart_enqueue>
    1d0e:	af c0       	rjmp	.+350    	; 0x1e6e <uart_enq_BIN4+0x264>
    1d10:	60 e3       	ldi	r22, 0x30	; 48
    1d12:	0e 94 f8 1a 	call	0x35f0	; 0x35f0 <uart_enqueue>
    1d16:	ce 01       	movw	r24, r28
    1d18:	61 e3       	ldi	r22, 0x31	; 49
    1d1a:	0e 94 f8 1a 	call	0x35f0	; 0x35f0 <uart_enqueue>
    1d1e:	ce 01       	movw	r24, r28
    1d20:	60 e3       	ldi	r22, 0x30	; 48
    1d22:	0e 94 f8 1a 	call	0x35f0	; 0x35f0 <uart_enqueue>
    1d26:	ce 01       	movw	r24, r28
    1d28:	61 e3       	ldi	r22, 0x31	; 49
    1d2a:	0e 94 f8 1a 	call	0x35f0	; 0x35f0 <uart_enqueue>
    1d2e:	9f c0       	rjmp	.+318    	; 0x1e6e <uart_enq_BIN4+0x264>
    1d30:	60 e3       	ldi	r22, 0x30	; 48
    1d32:	0e 94 f8 1a 	call	0x35f0	; 0x35f0 <uart_enqueue>
    1d36:	ce 01       	movw	r24, r28
    1d38:	61 e3       	ldi	r22, 0x31	; 49
    1d3a:	0e 94 f8 1a 	call	0x35f0	; 0x35f0 <uart_enqueue>
    1d3e:	ce 01       	movw	r24, r28
    1d40:	61 e3       	ldi	r22, 0x31	; 49
    1d42:	0e 94 f8 1a 	call	0x35f0	; 0x35f0 <uart_enqueue>
    1d46:	ce 01       	movw	r24, r28
    1d48:	60 e3       	ldi	r22, 0x30	; 48
    1d4a:	0e 94 f8 1a 	call	0x35f0	; 0x35f0 <uart_enqueue>
    1d4e:	8f c0       	rjmp	.+286    	; 0x1e6e <uart_enq_BIN4+0x264>
    1d50:	60 e3       	ldi	r22, 0x30	; 48
    1d52:	0e 94 f8 1a 	call	0x35f0	; 0x35f0 <uart_enqueue>
    1d56:	ce 01       	movw	r24, r28
    1d58:	61 e3       	ldi	r22, 0x31	; 49
    1d5a:	0e 94 f8 1a 	call	0x35f0	; 0x35f0 <uart_enqueue>
    1d5e:	ce 01       	movw	r24, r28
    1d60:	61 e3       	ldi	r22, 0x31	; 49
    1d62:	0e 94 f8 1a 	call	0x35f0	; 0x35f0 <uart_enqueue>
    1d66:	ce 01       	movw	r24, r28
    1d68:	61 e3       	ldi	r22, 0x31	; 49
    1d6a:	0e 94 f8 1a 	call	0x35f0	; 0x35f0 <uart_enqueue>
    1d6e:	7f c0       	rjmp	.+254    	; 0x1e6e <uart_enq_BIN4+0x264>
    1d70:	61 e3       	ldi	r22, 0x31	; 49
    1d72:	0e 94 f8 1a 	call	0x35f0	; 0x35f0 <uart_enqueue>
    1d76:	ce 01       	movw	r24, r28
    1d78:	60 e3       	ldi	r22, 0x30	; 48
    1d7a:	0e 94 f8 1a 	call	0x35f0	; 0x35f0 <uart_enqueue>
    1d7e:	ce 01       	movw	r24, r28
    1d80:	60 e3       	ldi	r22, 0x30	; 48
    1d82:	0e 94 f8 1a 	call	0x35f0	; 0x35f0 <uart_enqueue>
    1d86:	ce 01       	movw	r24, r28
    1d88:	60 e3       	ldi	r22, 0x30	; 48
    1d8a:	0e 94 f8 1a 	call	0x35f0	; 0x35f0 <uart_enqueue>
    1d8e:	6f c0       	rjmp	.+222    	; 0x1e6e <uart_enq_BIN4+0x264>
    1d90:	61 e3       	ldi	r22, 0x31	; 49
    1d92:	0e 94 f8 1a 	call	0x35f0	; 0x35f0 <uart_enqueue>
    1d96:	ce 01       	movw	r24, r28
    1d98:	60 e3       	ldi	r22, 0x30	; 48
    1d9a:	0e 94 f8 1a 	call	0x35f0	; 0x35f0 <uart_enqueue>
    1d9e:	ce 01       	movw	r24, r28
    1da0:	60 e3       	ldi	r22, 0x30	; 48
    1da2:	0e 94 f8 1a 	call	0x35f0	; 0x35f0 <uart_enqueue>
    1da6:	ce 01       	movw	r24, r28
    1da8:	61 e3       	ldi	r22, 0x31	; 49
    1daa:	0e 94 f8 1a 	call	0x35f0	; 0x35f0 <uart_enqueue>
    1dae:	5f c0       	rjmp	.+190    	; 0x1e6e <uart_enq_BIN4+0x264>
    1db0:	61 e3       	ldi	r22, 0x31	; 49
    1db2:	0e 94 f8 1a 	call	0x35f0	; 0x35f0 <uart_enqueue>
    1db6:	ce 01       	movw	r24, r28
    1db8:	60 e3       	ldi	r22, 0x30	; 48
    1dba:	0e 94 f8 1a 	call	0x35f0	; 0x35f0 <uart_enqueue>
    1dbe:	ce 01       	movw	r24, r28
    1dc0:	61 e3       	ldi	r22, 0x31	; 49
    1dc2:	0e 94 f8 1a 	call	0x35f0	; 0x35f0 <uart_enqueue>
    1dc6:	ce 01       	movw	r24, r28
    1dc8:	60 e3       	ldi	r22, 0x30	; 48
    1dca:	0e 94 f8 1a 	call	0x35f0	; 0x35f0 <uart_enqueue>
    1dce:	4f c0       	rjmp	.+158    	; 0x1e6e <uart_enq_BIN4+0x264>
    1dd0:	61 e3       	ldi	r22, 0x31	; 49
    1dd2:	0e 94 f8 1a 	call	0x35f0	; 0x35f0 <uart_enqueue>
    1dd6:	ce 01       	movw	r24, r28
    1dd8:	60 e3       	ldi	r22, 0x30	; 48
    1dda:	0e 94 f8 1a 	call	0x35f0	; 0x35f0 <uart_enqueue>
    1dde:	ce 01       	movw	r24, r28
    1de0:	61 e3       	ldi	r22, 0x31	; 49
    1de2:	0e 94 f8 1a 	call	0x35f0	; 0x35f0 <uart_enqueue>
    1de6:	ce 01       	movw	r24, r28
    1de8:	61 e3       	ldi	r22, 0x31	; 49
    1dea:	0e 94 f8 1a 	call	0x35f0	; 0x35f0 <uart_enqueue>
    1dee:	3f c0       	rjmp	.+126    	; 0x1e6e <uart_enq_BIN4+0x264>
    1df0:	61 e3       	ldi	r22, 0x31	; 49
    1df2:	0e 94 f8 1a 	call	0x35f0	; 0x35f0 <uart_enqueue>
    1df6:	ce 01       	movw	r24, r28
    1df8:	61 e3       	ldi	r22, 0x31	; 49
    1dfa:	0e 94 f8 1a 	call	0x35f0	; 0x35f0 <uart_enqueue>
    1dfe:	ce 01       	movw	r24, r28
    1e00:	60 e3       	ldi	r22, 0x30	; 48
    1e02:	0e 94 f8 1a 	call	0x35f0	; 0x35f0 <uart_enqueue>
    1e06:	ce 01       	movw	r24, r28
    1e08:	60 e3       	ldi	r22, 0x30	; 48
    1e0a:	0e 94 f8 1a 	call	0x35f0	; 0x35f0 <uart_enqueue>
    1e0e:	2f c0       	rjmp	.+94     	; 0x1e6e <uart_enq_BIN4+0x264>
    1e10:	61 e3       	ldi	r22, 0x31	; 49
    1e12:	0e 94 f8 1a 	call	0x35f0	; 0x35f0 <uart_enqueue>
    1e16:	ce 01       	movw	r24, r28
    1e18:	61 e3       	ldi	r22, 0x31	; 49
    1e1a:	0e 94 f8 1a 	call	0x35f0	; 0x35f0 <uart_enqueue>
    1e1e:	ce 01       	movw	r24, r28
    1e20:	60 e3       	ldi	r22, 0x30	; 48
    1e22:	0e 94 f8 1a 	call	0x35f0	; 0x35f0 <uart_enqueue>
    1e26:	ce 01       	movw	r24, r28
    1e28:	61 e3       	ldi	r22, 0x31	; 49
    1e2a:	0e 94 f8 1a 	call	0x35f0	; 0x35f0 <uart_enqueue>
    1e2e:	1f c0       	rjmp	.+62     	; 0x1e6e <uart_enq_BIN4+0x264>
    1e30:	61 e3       	ldi	r22, 0x31	; 49
    1e32:	0e 94 f8 1a 	call	0x35f0	; 0x35f0 <uart_enqueue>
    1e36:	ce 01       	movw	r24, r28
    1e38:	61 e3       	ldi	r22, 0x31	; 49
    1e3a:	0e 94 f8 1a 	call	0x35f0	; 0x35f0 <uart_enqueue>
    1e3e:	ce 01       	movw	r24, r28
    1e40:	61 e3       	ldi	r22, 0x31	; 49
    1e42:	0e 94 f8 1a 	call	0x35f0	; 0x35f0 <uart_enqueue>
    1e46:	ce 01       	movw	r24, r28
    1e48:	60 e3       	ldi	r22, 0x30	; 48
    1e4a:	0e 94 f8 1a 	call	0x35f0	; 0x35f0 <uart_enqueue>
    1e4e:	0f c0       	rjmp	.+30     	; 0x1e6e <uart_enq_BIN4+0x264>
    1e50:	61 e3       	ldi	r22, 0x31	; 49
    1e52:	0e 94 f8 1a 	call	0x35f0	; 0x35f0 <uart_enqueue>
    1e56:	ce 01       	movw	r24, r28
    1e58:	61 e3       	ldi	r22, 0x31	; 49
    1e5a:	0e 94 f8 1a 	call	0x35f0	; 0x35f0 <uart_enqueue>
    1e5e:	ce 01       	movw	r24, r28
    1e60:	61 e3       	ldi	r22, 0x31	; 49
    1e62:	0e 94 f8 1a 	call	0x35f0	; 0x35f0 <uart_enqueue>
    1e66:	ce 01       	movw	r24, r28
    1e68:	61 e3       	ldi	r22, 0x31	; 49
    1e6a:	0e 94 f8 1a 	call	0x35f0	; 0x35f0 <uart_enqueue>
    1e6e:	df 91       	pop	r29
    1e70:	cf 91       	pop	r28
    1e72:	08 95       	ret

00001e74 <uart_enq_BIN8>:
    1e74:	1f 93       	push	r17
    1e76:	cf 93       	push	r28
    1e78:	df 93       	push	r29
    1e7a:	ec 01       	movw	r28, r24
    1e7c:	16 2f       	mov	r17, r22
    1e7e:	62 e6       	ldi	r22, 0x62	; 98
    1e80:	0e 94 f8 1a 	call	0x35f0	; 0x35f0 <uart_enqueue>
    1e84:	61 2f       	mov	r22, r17
    1e86:	62 95       	swap	r22
    1e88:	6f 70       	andi	r22, 0x0F	; 15
    1e8a:	ce 01       	movw	r24, r28
    1e8c:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <uart_enq_BIN4>
    1e90:	61 2f       	mov	r22, r17
    1e92:	6f 70       	andi	r22, 0x0F	; 15
    1e94:	ce 01       	movw	r24, r28
    1e96:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <uart_enq_BIN4>
    1e9a:	df 91       	pop	r29
    1e9c:	cf 91       	pop	r28
    1e9e:	1f 91       	pop	r17
    1ea0:	08 95       	ret

00001ea2 <uart_enq_HEX4>:
    1ea2:	67 30       	cpi	r22, 0x07	; 7
    1ea4:	09 f4       	brne	.+2      	; 0x1ea8 <uart_enq_HEX4+0x6>
    1ea6:	3f c0       	rjmp	.+126    	; 0x1f26 <uart_enq_HEX4+0x84>
    1ea8:	68 30       	cpi	r22, 0x08	; 8
    1eaa:	70 f4       	brcc	.+28     	; 0x1ec8 <uart_enq_HEX4+0x26>
    1eac:	63 30       	cpi	r22, 0x03	; 3
    1eae:	59 f1       	breq	.+86     	; 0x1f06 <uart_enq_HEX4+0x64>
    1eb0:	64 30       	cpi	r22, 0x04	; 4
    1eb2:	28 f4       	brcc	.+10     	; 0x1ebe <uart_enq_HEX4+0x1c>
    1eb4:	61 30       	cpi	r22, 0x01	; 1
    1eb6:	f9 f0       	breq	.+62     	; 0x1ef6 <uart_enq_HEX4+0x54>
    1eb8:	62 30       	cpi	r22, 0x02	; 2
    1eba:	08 f5       	brcc	.+66     	; 0x1efe <uart_enq_HEX4+0x5c>
    1ebc:	18 c0       	rjmp	.+48     	; 0x1eee <uart_enq_HEX4+0x4c>
    1ebe:	65 30       	cpi	r22, 0x05	; 5
    1ec0:	51 f1       	breq	.+84     	; 0x1f16 <uart_enq_HEX4+0x74>
    1ec2:	66 30       	cpi	r22, 0x06	; 6
    1ec4:	60 f5       	brcc	.+88     	; 0x1f1e <uart_enq_HEX4+0x7c>
    1ec6:	23 c0       	rjmp	.+70     	; 0x1f0e <uart_enq_HEX4+0x6c>
    1ec8:	6b 30       	cpi	r22, 0x0B	; 11
    1eca:	e9 f1       	breq	.+122    	; 0x1f46 <uart_enq_HEX4+0xa4>
    1ecc:	6c 30       	cpi	r22, 0x0C	; 12
    1ece:	28 f4       	brcc	.+10     	; 0x1eda <uart_enq_HEX4+0x38>
    1ed0:	69 30       	cpi	r22, 0x09	; 9
    1ed2:	89 f1       	breq	.+98     	; 0x1f36 <uart_enq_HEX4+0x94>
    1ed4:	6a 30       	cpi	r22, 0x0A	; 10
    1ed6:	98 f5       	brcc	.+102    	; 0x1f3e <uart_enq_HEX4+0x9c>
    1ed8:	2a c0       	rjmp	.+84     	; 0x1f2e <uart_enq_HEX4+0x8c>
    1eda:	6d 30       	cpi	r22, 0x0D	; 13
    1edc:	e1 f1       	breq	.+120    	; 0x1f56 <uart_enq_HEX4+0xb4>
    1ede:	6d 30       	cpi	r22, 0x0D	; 13
    1ee0:	b0 f1       	brcs	.+108    	; 0x1f4e <uart_enq_HEX4+0xac>
    1ee2:	6e 30       	cpi	r22, 0x0E	; 14
    1ee4:	e1 f1       	breq	.+120    	; 0x1f5e <uart_enq_HEX4+0xbc>
    1ee6:	6f 30       	cpi	r22, 0x0F	; 15
    1ee8:	09 f0       	breq	.+2      	; 0x1eec <uart_enq_HEX4+0x4a>
    1eea:	40 c0       	rjmp	.+128    	; 0x1f6c <uart_enq_HEX4+0xca>
    1eec:	3c c0       	rjmp	.+120    	; 0x1f66 <uart_enq_HEX4+0xc4>
    1eee:	60 e3       	ldi	r22, 0x30	; 48
    1ef0:	0e 94 f8 1a 	call	0x35f0	; 0x35f0 <uart_enqueue>
    1ef4:	08 95       	ret
    1ef6:	61 e3       	ldi	r22, 0x31	; 49
    1ef8:	0e 94 f8 1a 	call	0x35f0	; 0x35f0 <uart_enqueue>
    1efc:	08 95       	ret
    1efe:	62 e3       	ldi	r22, 0x32	; 50
    1f00:	0e 94 f8 1a 	call	0x35f0	; 0x35f0 <uart_enqueue>
    1f04:	08 95       	ret
    1f06:	63 e3       	ldi	r22, 0x33	; 51
    1f08:	0e 94 f8 1a 	call	0x35f0	; 0x35f0 <uart_enqueue>
    1f0c:	08 95       	ret
    1f0e:	64 e3       	ldi	r22, 0x34	; 52
    1f10:	0e 94 f8 1a 	call	0x35f0	; 0x35f0 <uart_enqueue>
    1f14:	08 95       	ret
    1f16:	65 e3       	ldi	r22, 0x35	; 53
    1f18:	0e 94 f8 1a 	call	0x35f0	; 0x35f0 <uart_enqueue>
    1f1c:	08 95       	ret
    1f1e:	66 e3       	ldi	r22, 0x36	; 54
    1f20:	0e 94 f8 1a 	call	0x35f0	; 0x35f0 <uart_enqueue>
    1f24:	08 95       	ret
    1f26:	67 e3       	ldi	r22, 0x37	; 55
    1f28:	0e 94 f8 1a 	call	0x35f0	; 0x35f0 <uart_enqueue>
    1f2c:	08 95       	ret
    1f2e:	68 e3       	ldi	r22, 0x38	; 56
    1f30:	0e 94 f8 1a 	call	0x35f0	; 0x35f0 <uart_enqueue>
    1f34:	08 95       	ret
    1f36:	69 e3       	ldi	r22, 0x39	; 57
    1f38:	0e 94 f8 1a 	call	0x35f0	; 0x35f0 <uart_enqueue>
    1f3c:	08 95       	ret
    1f3e:	61 e4       	ldi	r22, 0x41	; 65
    1f40:	0e 94 f8 1a 	call	0x35f0	; 0x35f0 <uart_enqueue>
    1f44:	08 95       	ret
    1f46:	62 e4       	ldi	r22, 0x42	; 66
    1f48:	0e 94 f8 1a 	call	0x35f0	; 0x35f0 <uart_enqueue>
    1f4c:	08 95       	ret
    1f4e:	63 e4       	ldi	r22, 0x43	; 67
    1f50:	0e 94 f8 1a 	call	0x35f0	; 0x35f0 <uart_enqueue>
    1f54:	08 95       	ret
    1f56:	64 e4       	ldi	r22, 0x44	; 68
    1f58:	0e 94 f8 1a 	call	0x35f0	; 0x35f0 <uart_enqueue>
    1f5c:	08 95       	ret
    1f5e:	65 e4       	ldi	r22, 0x45	; 69
    1f60:	0e 94 f8 1a 	call	0x35f0	; 0x35f0 <uart_enqueue>
    1f64:	08 95       	ret
    1f66:	66 e4       	ldi	r22, 0x46	; 70
    1f68:	0e 94 f8 1a 	call	0x35f0	; 0x35f0 <uart_enqueue>
    1f6c:	08 95       	ret

00001f6e <uart_enq_HEX8>:
    1f6e:	1f 93       	push	r17
    1f70:	cf 93       	push	r28
    1f72:	df 93       	push	r29
    1f74:	ec 01       	movw	r28, r24
    1f76:	16 2f       	mov	r17, r22
    1f78:	62 95       	swap	r22
    1f7a:	6f 70       	andi	r22, 0x0F	; 15
    1f7c:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <uart_enq_HEX4>
    1f80:	61 2f       	mov	r22, r17
    1f82:	6f 70       	andi	r22, 0x0F	; 15
    1f84:	ce 01       	movw	r24, r28
    1f86:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <uart_enq_HEX4>
    1f8a:	df 91       	pop	r29
    1f8c:	cf 91       	pop	r28
    1f8e:	1f 91       	pop	r17
    1f90:	08 95       	ret

00001f92 <uart_enq_HEX16b>:
    1f92:	1f 93       	push	r17
    1f94:	cf 93       	push	r28
    1f96:	df 93       	push	r29
    1f98:	ec 01       	movw	r28, r24
    1f9a:	14 2f       	mov	r17, r20
    1f9c:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <uart_enq_HEX8>
    1fa0:	ce 01       	movw	r24, r28
    1fa2:	61 2f       	mov	r22, r17
    1fa4:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <uart_enq_HEX8>
    1fa8:	df 91       	pop	r29
    1faa:	cf 91       	pop	r28
    1fac:	1f 91       	pop	r17
    1fae:	08 95       	ret

00001fb0 <uart_enq_HEX16>:
    1fb0:	1f 93       	push	r17
    1fb2:	cf 93       	push	r28
    1fb4:	df 93       	push	r29
    1fb6:	ec 01       	movw	r28, r24
    1fb8:	16 2f       	mov	r17, r22
    1fba:	67 2f       	mov	r22, r23
    1fbc:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <uart_enq_HEX8>
    1fc0:	ce 01       	movw	r24, r28
    1fc2:	61 2f       	mov	r22, r17
    1fc4:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <uart_enq_HEX8>
    1fc8:	df 91       	pop	r29
    1fca:	cf 91       	pop	r28
    1fcc:	1f 91       	pop	r17
    1fce:	08 95       	ret

00001fd0 <__vector_25>:
//************************************************************************
//************************************************************************

//Must correspond to definitions in uart.h
SIGNAL(USARTC0_DRE_vect) {uart_transmit(&uctrl);}//TX Interrupt
SIGNAL(USARTC0_RXC_vect) {uart_receive(&uctrl);} //RX Interrupt
    1fd0:	1f 92       	push	r1
    1fd2:	0f 92       	push	r0
    1fd4:	0f b6       	in	r0, 0x3f	; 63
    1fd6:	0f 92       	push	r0
    1fd8:	08 b6       	in	r0, 0x38	; 56
    1fda:	0f 92       	push	r0
    1fdc:	09 b6       	in	r0, 0x39	; 57
    1fde:	0f 92       	push	r0
    1fe0:	0a b6       	in	r0, 0x3a	; 58
    1fe2:	0f 92       	push	r0
    1fe4:	0b b6       	in	r0, 0x3b	; 59
    1fe6:	0f 92       	push	r0
    1fe8:	11 24       	eor	r1, r1
    1fea:	2f 93       	push	r18
    1fec:	3f 93       	push	r19
    1fee:	4f 93       	push	r20
    1ff0:	5f 93       	push	r21
    1ff2:	8f 93       	push	r24
    1ff4:	9f 93       	push	r25
    1ff6:	af 93       	push	r26
    1ff8:	bf 93       	push	r27
    1ffa:	cf 93       	push	r28
    1ffc:	df 93       	push	r29
    1ffe:	ef 93       	push	r30
    2000:	ff 93       	push	r31
//= RECEPTION ENGINE (ISR BASED)
//==================================

void inline uart_receive(USART_t* port){
	//keep receiving until data register is empty or incoming queue is full
	while (((port->STATUS & _BV(7)) == B8(10000000)) && (uart_icount(port) < MAX_IBUFFER_LEN)){		
    2002:	c0 ea       	ldi	r28, 0xA0	; 160
    2004:	d8 e0       	ldi	r29, 0x08	; 8
	uart_itail[idx] = 0;
}

inline uint16_t uart_icount(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_ihead[idx] >= uart_itail[idx]){	
    2006:	e5 ee       	ldi	r30, 0xE5	; 229
    2008:	fd e3       	ldi	r31, 0x3D	; 61
    200a:	49 ed       	ldi	r20, 0xD9	; 217
    200c:	55 e2       	ldi	r21, 0x25	; 37
    200e:	13 c0       	rjmp	.+38     	; 0x2036 <__vector_25+0x66>
//==================================

void inline uart_receive(USART_t* port){
	//keep receiving until data register is empty or incoming queue is full
	while (((port->STATUS & _BV(7)) == B8(10000000)) && (uart_icount(port) < MAX_IBUFFER_LEN)){		
		uart_ienqueue(port, port->DATA);
    2010:	88 81       	ld	r24, Y
	}
}

inline void uart_ienqueue(USART_t* port, uint8_t datain){
	uint8_t idx = port_map(port);
	uart_ibuffer[idx][uart_ihead[idx]] = datain;
    2012:	a0 81       	ld	r26, Z
    2014:	b1 81       	ldd	r27, Z+1	; 0x01
    2016:	a3 52       	subi	r26, 0x23	; 35
    2018:	b6 4d       	sbci	r27, 0xD6	; 214
    201a:	8c 93       	st	X, r24
	uart_ihead[idx]++;
    201c:	80 81       	ld	r24, Z
    201e:	91 81       	ldd	r25, Z+1	; 0x01
    2020:	01 96       	adiw	r24, 0x01	; 1
    2022:	80 83       	st	Z, r24
    2024:	91 83       	std	Z+1, r25	; 0x01
	if (uart_ihead[idx] >= MAX_IBUFFER_LEN){
    2026:	80 81       	ld	r24, Z
    2028:	91 81       	ldd	r25, Z+1	; 0x01
    202a:	24 e0       	ldi	r18, 0x04	; 4
    202c:	80 30       	cpi	r24, 0x00	; 0
    202e:	92 07       	cpc	r25, r18
    2030:	10 f0       	brcs	.+4      	; 0x2036 <__vector_25+0x66>
		uart_ihead[idx] = 0;
    2032:	10 82       	st	Z, r1
    2034:	11 82       	std	Z+1, r1	; 0x01
//= RECEPTION ENGINE (ISR BASED)
//==================================

void inline uart_receive(USART_t* port){
	//keep receiving until data register is empty or incoming queue is full
	while (((port->STATUS & _BV(7)) == B8(10000000)) && (uart_icount(port) < MAX_IBUFFER_LEN)){		
    2036:	89 81       	ldd	r24, Y+1	; 0x01
    2038:	88 23       	and	r24, r24
    203a:	fc f4       	brge	.+62     	; 0x207a <__vector_25+0xaa>
	uart_itail[idx] = 0;
}

inline uint16_t uart_icount(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_ihead[idx] >= uart_itail[idx]){	
    203c:	80 81       	ld	r24, Z
    203e:	91 81       	ldd	r25, Z+1	; 0x01
    2040:	da 01       	movw	r26, r20
    2042:	2d 91       	ld	r18, X+
    2044:	3c 91       	ld	r19, X
    2046:	11 97       	sbiw	r26, 0x01	; 1
    2048:	82 17       	cp	r24, r18
    204a:	93 07       	cpc	r25, r19
    204c:	40 f0       	brcs	.+16     	; 0x205e <__vector_25+0x8e>
		return (uart_ihead[idx] - uart_itail[idx]);
    204e:	80 81       	ld	r24, Z
    2050:	91 81       	ldd	r25, Z+1	; 0x01
    2052:	2d 91       	ld	r18, X+
    2054:	3c 91       	ld	r19, X
    2056:	11 97       	sbiw	r26, 0x01	; 1
    2058:	82 1b       	sub	r24, r18
    205a:	93 0b       	sbc	r25, r19
    205c:	0a c0       	rjmp	.+20     	; 0x2072 <__vector_25+0xa2>
	}
	else {
		return ((MAX_IBUFFER_LEN-uart_itail[idx])+uart_ihead[idx]);
    205e:	80 81       	ld	r24, Z
    2060:	91 81       	ldd	r25, Z+1	; 0x01
    2062:	da 01       	movw	r26, r20
    2064:	2d 91       	ld	r18, X+
    2066:	3c 91       	ld	r19, X
    2068:	11 97       	sbiw	r26, 0x01	; 1
    206a:	80 50       	subi	r24, 0x00	; 0
    206c:	9c 4f       	sbci	r25, 0xFC	; 252
    206e:	82 1b       	sub	r24, r18
    2070:	93 0b       	sbc	r25, r19
//= RECEPTION ENGINE (ISR BASED)
//==================================

void inline uart_receive(USART_t* port){
	//keep receiving until data register is empty or incoming queue is full
	while (((port->STATUS & _BV(7)) == B8(10000000)) && (uart_icount(port) < MAX_IBUFFER_LEN)){		
    2072:	b4 e0       	ldi	r27, 0x04	; 4
    2074:	80 30       	cpi	r24, 0x00	; 0
    2076:	9b 07       	cpc	r25, r27
    2078:	58 f2       	brcs	.-106    	; 0x2010 <__vector_25+0x40>
//************************************************************************
//************************************************************************

//Must correspond to definitions in uart.h
SIGNAL(USARTC0_DRE_vect) {uart_transmit(&uctrl);}//TX Interrupt
SIGNAL(USARTC0_RXC_vect) {uart_receive(&uctrl);} //RX Interrupt
    207a:	ff 91       	pop	r31
    207c:	ef 91       	pop	r30
    207e:	df 91       	pop	r29
    2080:	cf 91       	pop	r28
    2082:	bf 91       	pop	r27
    2084:	af 91       	pop	r26
    2086:	9f 91       	pop	r25
    2088:	8f 91       	pop	r24
    208a:	5f 91       	pop	r21
    208c:	4f 91       	pop	r20
    208e:	3f 91       	pop	r19
    2090:	2f 91       	pop	r18
    2092:	0f 90       	pop	r0
    2094:	0b be       	out	0x3b, r0	; 59
    2096:	0f 90       	pop	r0
    2098:	0a be       	out	0x3a, r0	; 58
    209a:	0f 90       	pop	r0
    209c:	09 be       	out	0x39, r0	; 57
    209e:	0f 90       	pop	r0
    20a0:	08 be       	out	0x38, r0	; 56
    20a2:	0f 90       	pop	r0
    20a4:	0f be       	out	0x3f, r0	; 63
    20a6:	0f 90       	pop	r0
    20a8:	1f 90       	pop	r1
    20aa:	18 95       	reti

000020ac <__vector_28>:
SIGNAL(USARTC1_DRE_vect) {uart_transmit(&udata);}//TX Interrupt
SIGNAL(USARTC1_RXC_vect) {uart_receive(&udata);} //RX Interrupt
    20ac:	1f 92       	push	r1
    20ae:	0f 92       	push	r0
    20b0:	0f b6       	in	r0, 0x3f	; 63
    20b2:	0f 92       	push	r0
    20b4:	08 b6       	in	r0, 0x38	; 56
    20b6:	0f 92       	push	r0
    20b8:	09 b6       	in	r0, 0x39	; 57
    20ba:	0f 92       	push	r0
    20bc:	0a b6       	in	r0, 0x3a	; 58
    20be:	0f 92       	push	r0
    20c0:	0b b6       	in	r0, 0x3b	; 59
    20c2:	0f 92       	push	r0
    20c4:	11 24       	eor	r1, r1
    20c6:	2f 93       	push	r18
    20c8:	3f 93       	push	r19
    20ca:	4f 93       	push	r20
    20cc:	5f 93       	push	r21
    20ce:	8f 93       	push	r24
    20d0:	9f 93       	push	r25
    20d2:	af 93       	push	r26
    20d4:	bf 93       	push	r27
    20d6:	cf 93       	push	r28
    20d8:	df 93       	push	r29
    20da:	ef 93       	push	r30
    20dc:	ff 93       	push	r31
//= RECEPTION ENGINE (ISR BASED)
//==================================

void inline uart_receive(USART_t* port){
	//keep receiving until data register is empty or incoming queue is full
	while (((port->STATUS & _BV(7)) == B8(10000000)) && (uart_icount(port) < MAX_IBUFFER_LEN)){		
    20de:	c0 eb       	ldi	r28, 0xB0	; 176
    20e0:	d8 e0       	ldi	r29, 0x08	; 8
	uart_itail[idx] = 0;
}

inline uint16_t uart_icount(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_ihead[idx] >= uart_itail[idx]){	
    20e2:	e7 ee       	ldi	r30, 0xE7	; 231
    20e4:	fd e3       	ldi	r31, 0x3D	; 61
    20e6:	4b ed       	ldi	r20, 0xDB	; 219
    20e8:	55 e2       	ldi	r21, 0x25	; 37
    20ea:	13 c0       	rjmp	.+38     	; 0x2112 <__vector_28+0x66>
//==================================

void inline uart_receive(USART_t* port){
	//keep receiving until data register is empty or incoming queue is full
	while (((port->STATUS & _BV(7)) == B8(10000000)) && (uart_icount(port) < MAX_IBUFFER_LEN)){		
		uart_ienqueue(port, port->DATA);
    20ec:	88 81       	ld	r24, Y
	}
}

inline void uart_ienqueue(USART_t* port, uint8_t datain){
	uint8_t idx = port_map(port);
	uart_ibuffer[idx][uart_ihead[idx]] = datain;
    20ee:	a0 81       	ld	r26, Z
    20f0:	b1 81       	ldd	r27, Z+1	; 0x01
    20f2:	a3 52       	subi	r26, 0x23	; 35
    20f4:	b2 4d       	sbci	r27, 0xD2	; 210
    20f6:	8c 93       	st	X, r24
	uart_ihead[idx]++;
    20f8:	80 81       	ld	r24, Z
    20fa:	91 81       	ldd	r25, Z+1	; 0x01
    20fc:	01 96       	adiw	r24, 0x01	; 1
    20fe:	80 83       	st	Z, r24
    2100:	91 83       	std	Z+1, r25	; 0x01
	if (uart_ihead[idx] >= MAX_IBUFFER_LEN){
    2102:	80 81       	ld	r24, Z
    2104:	91 81       	ldd	r25, Z+1	; 0x01
    2106:	24 e0       	ldi	r18, 0x04	; 4
    2108:	80 30       	cpi	r24, 0x00	; 0
    210a:	92 07       	cpc	r25, r18
    210c:	10 f0       	brcs	.+4      	; 0x2112 <__vector_28+0x66>
		uart_ihead[idx] = 0;
    210e:	10 82       	st	Z, r1
    2110:	11 82       	std	Z+1, r1	; 0x01
//= RECEPTION ENGINE (ISR BASED)
//==================================

void inline uart_receive(USART_t* port){
	//keep receiving until data register is empty or incoming queue is full
	while (((port->STATUS & _BV(7)) == B8(10000000)) && (uart_icount(port) < MAX_IBUFFER_LEN)){		
    2112:	89 81       	ldd	r24, Y+1	; 0x01
    2114:	88 23       	and	r24, r24
    2116:	fc f4       	brge	.+62     	; 0x2156 <__vector_28+0xaa>
	uart_itail[idx] = 0;
}

inline uint16_t uart_icount(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_ihead[idx] >= uart_itail[idx]){	
    2118:	80 81       	ld	r24, Z
    211a:	91 81       	ldd	r25, Z+1	; 0x01
    211c:	da 01       	movw	r26, r20
    211e:	2d 91       	ld	r18, X+
    2120:	3c 91       	ld	r19, X
    2122:	11 97       	sbiw	r26, 0x01	; 1
    2124:	82 17       	cp	r24, r18
    2126:	93 07       	cpc	r25, r19
    2128:	40 f0       	brcs	.+16     	; 0x213a <__vector_28+0x8e>
		return (uart_ihead[idx] - uart_itail[idx]);
    212a:	80 81       	ld	r24, Z
    212c:	91 81       	ldd	r25, Z+1	; 0x01
    212e:	2d 91       	ld	r18, X+
    2130:	3c 91       	ld	r19, X
    2132:	11 97       	sbiw	r26, 0x01	; 1
    2134:	82 1b       	sub	r24, r18
    2136:	93 0b       	sbc	r25, r19
    2138:	0a c0       	rjmp	.+20     	; 0x214e <__vector_28+0xa2>
	}
	else {
		return ((MAX_IBUFFER_LEN-uart_itail[idx])+uart_ihead[idx]);
    213a:	80 81       	ld	r24, Z
    213c:	91 81       	ldd	r25, Z+1	; 0x01
    213e:	da 01       	movw	r26, r20
    2140:	2d 91       	ld	r18, X+
    2142:	3c 91       	ld	r19, X
    2144:	11 97       	sbiw	r26, 0x01	; 1
    2146:	80 50       	subi	r24, 0x00	; 0
    2148:	9c 4f       	sbci	r25, 0xFC	; 252
    214a:	82 1b       	sub	r24, r18
    214c:	93 0b       	sbc	r25, r19
//= RECEPTION ENGINE (ISR BASED)
//==================================

void inline uart_receive(USART_t* port){
	//keep receiving until data register is empty or incoming queue is full
	while (((port->STATUS & _BV(7)) == B8(10000000)) && (uart_icount(port) < MAX_IBUFFER_LEN)){		
    214e:	b4 e0       	ldi	r27, 0x04	; 4
    2150:	80 30       	cpi	r24, 0x00	; 0
    2152:	9b 07       	cpc	r25, r27
    2154:	58 f2       	brcs	.-106    	; 0x20ec <__vector_28+0x40>

//Must correspond to definitions in uart.h
SIGNAL(USARTC0_DRE_vect) {uart_transmit(&uctrl);}//TX Interrupt
SIGNAL(USARTC0_RXC_vect) {uart_receive(&uctrl);} //RX Interrupt
SIGNAL(USARTC1_DRE_vect) {uart_transmit(&udata);}//TX Interrupt
SIGNAL(USARTC1_RXC_vect) {uart_receive(&udata);} //RX Interrupt
    2156:	ff 91       	pop	r31
    2158:	ef 91       	pop	r30
    215a:	df 91       	pop	r29
    215c:	cf 91       	pop	r28
    215e:	bf 91       	pop	r27
    2160:	af 91       	pop	r26
    2162:	9f 91       	pop	r25
    2164:	8f 91       	pop	r24
    2166:	5f 91       	pop	r21
    2168:	4f 91       	pop	r20
    216a:	3f 91       	pop	r19
    216c:	2f 91       	pop	r18
    216e:	0f 90       	pop	r0
    2170:	0b be       	out	0x3b, r0	; 59
    2172:	0f 90       	pop	r0
    2174:	0a be       	out	0x3a, r0	; 58
    2176:	0f 90       	pop	r0
    2178:	09 be       	out	0x39, r0	; 57
    217a:	0f 90       	pop	r0
    217c:	08 be       	out	0x38, r0	; 56
    217e:	0f 90       	pop	r0
    2180:	0f be       	out	0x3f, r0	; 63
    2182:	0f 90       	pop	r0
    2184:	1f 90       	pop	r1
    2186:	18 95       	reti

00002188 <uart_rxbuffer_enable>:
		uart_rxbuffer_enable(port);
		uart_txbuffer_enable(port);
}

//Enable Receive Complete (high priority) -- so incoming is always handled first
void uart_rxbuffer_enable(USART_t* port){
    2188:	fc 01       	movw	r30, r24
	port->CTRLA = (port->CTRLA | B8(00110000));	//Set the Data Register Empty Interrupt to Medium Priority (timer needs to be higher!)
    218a:	83 81       	ldd	r24, Z+3	; 0x03
    218c:	80 63       	ori	r24, 0x30	; 48
    218e:	83 83       	std	Z+3, r24	; 0x03
}
    2190:	08 95       	ret

00002192 <uart_rxbuffer_disable>:

void uart_rxbuffer_disable(USART_t* port){
    2192:	fc 01       	movw	r30, r24
	port->CTRLA = (port->CTRLA & B8(11001111));	//Disable the Data Register Empty Interrupt
    2194:	83 81       	ldd	r24, Z+3	; 0x03
    2196:	8f 7c       	andi	r24, 0xCF	; 207
    2198:	83 83       	std	Z+3, r24	; 0x03
}
    219a:	08 95       	ret

0000219c <uart_txbuffer_enable>:

//Enable Transmit Ready (med priority) 
void uart_txbuffer_enable(USART_t* port){
    219c:	fc 01       	movw	r30, r24
	port->CTRLA = (port->CTRLA | B8(00000010));	//Set the Data Register Empty Interrupt to Medium Priority (timer needs to be higher!)
    219e:	83 81       	ldd	r24, Z+3	; 0x03
    21a0:	82 60       	ori	r24, 0x02	; 2
    21a2:	83 83       	std	Z+3, r24	; 0x03
}
    21a4:	08 95       	ret

000021a6 <uart_txbuffer_disable>:

void uart_txbuffer_disable(USART_t* port){
    21a6:	fc 01       	movw	r30, r24
	port->CTRLA = (port->CTRLA & B8(11111100));	//Disable the Data Register Empty Interrupt
    21a8:	83 81       	ldd	r24, Z+3	; 0x03
    21aa:	8c 7f       	andi	r24, 0xFC	; 252
    21ac:	83 83       	std	Z+3, r24	; 0x03
}
    21ae:	08 95       	ret

000021b0 <__vector_26>:
//** [PORT SPECIFIC CODE]
//************************************************************************
//************************************************************************

//Must correspond to definitions in uart.h
SIGNAL(USARTC0_DRE_vect) {uart_transmit(&uctrl);}//TX Interrupt
    21b0:	1f 92       	push	r1
    21b2:	0f 92       	push	r0
    21b4:	0f b6       	in	r0, 0x3f	; 63
    21b6:	0f 92       	push	r0
    21b8:	08 b6       	in	r0, 0x38	; 56
    21ba:	0f 92       	push	r0
    21bc:	09 b6       	in	r0, 0x39	; 57
    21be:	0f 92       	push	r0
    21c0:	0a b6       	in	r0, 0x3a	; 58
    21c2:	0f 92       	push	r0
    21c4:	0b b6       	in	r0, 0x3b	; 59
    21c6:	0f 92       	push	r0
    21c8:	11 24       	eor	r1, r1
    21ca:	2f 93       	push	r18
    21cc:	3f 93       	push	r19
    21ce:	4f 93       	push	r20
    21d0:	5f 93       	push	r21
    21d2:	6f 93       	push	r22
    21d4:	7f 93       	push	r23
    21d6:	8f 93       	push	r24
    21d8:	9f 93       	push	r25
    21da:	af 93       	push	r26
    21dc:	bf 93       	push	r27
    21de:	cf 93       	push	r28
    21e0:	df 93       	push	r29
    21e2:	ef 93       	push	r30
    21e4:	ff 93       	push	r31
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    21e6:	e0 ea       	ldi	r30, 0xA0	; 160
    21e8:	f8 e0       	ldi	r31, 0x08	; 8
    21ea:	81 81       	ldd	r24, Z+1	; 0x01
    21ec:	85 fd       	sbrc	r24, 5
    21ee:	1a c0       	rjmp	.+52     	; 0x2224 <__vector_26+0x74>
    21f0:	3a c0       	rjmp	.+116    	; 0x2266 <__vector_26+0xb6>
}

inline uint8_t uart_dequeue(USART_t* port){
	uint8_t idx = port_map(port);
	uint16_t oldtail;
	oldtail = uart_tail[idx];
    21f2:	20 81       	ld	r18, Z
    21f4:	31 81       	ldd	r19, Z+1	; 0x01
	uart_tail[idx]++;
    21f6:	80 81       	ld	r24, Z
    21f8:	91 81       	ldd	r25, Z+1	; 0x01
    21fa:	01 96       	adiw	r24, 0x01	; 1
    21fc:	80 83       	st	Z, r24
    21fe:	91 83       	std	Z+1, r25	; 0x01
	if (uart_tail[idx] >= MAX_BUFFER_LEN){
    2200:	80 81       	ld	r24, Z
    2202:	91 81       	ldd	r25, Z+1	; 0x01
    2204:	44 e0       	ldi	r20, 0x04	; 4
    2206:	80 30       	cpi	r24, 0x00	; 0
    2208:	94 07       	cpc	r25, r20
    220a:	10 f0       	brcs	.+4      	; 0x2210 <__vector_26+0x60>
		uart_tail[idx] = 0;
    220c:	10 82       	st	Z, r1
    220e:	11 82       	std	Z+1, r1	; 0x01
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    2210:	2d 51       	subi	r18, 0x1D	; 29
    2212:	3a 4c       	sbci	r19, 0xCA	; 202
    2214:	e9 01       	movw	r28, r18
    2216:	88 81       	ld	r24, Y
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
    2218:	eb 01       	movw	r28, r22
    221a:	88 83       	st	Y, r24
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    221c:	89 81       	ldd	r24, Y+1	; 0x01
    221e:	85 fd       	sbrc	r24, 5
    2220:	07 c0       	rjmp	.+14     	; 0x2230 <__vector_26+0x80>
    2222:	21 c0       	rjmp	.+66     	; 0x2266 <__vector_26+0xb6>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    2224:	af ed       	ldi	r26, 0xDF	; 223
    2226:	b1 e3       	ldi	r27, 0x31	; 49
    2228:	eb ee       	ldi	r30, 0xEB	; 235
    222a:	fd e3       	ldi	r31, 0x3D	; 61
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
    222c:	60 ea       	ldi	r22, 0xA0	; 160
    222e:	78 e0       	ldi	r23, 0x08	; 8
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    2230:	8d 91       	ld	r24, X+
    2232:	9c 91       	ld	r25, X
    2234:	11 97       	sbiw	r26, 0x01	; 1
    2236:	20 81       	ld	r18, Z
    2238:	31 81       	ldd	r19, Z+1	; 0x01
    223a:	82 17       	cp	r24, r18
    223c:	93 07       	cpc	r25, r19
    223e:	40 f0       	brcs	.+16     	; 0x2250 <__vector_26+0xa0>
		return (uart_head[idx] - uart_tail[idx]);
    2240:	8d 91       	ld	r24, X+
    2242:	9c 91       	ld	r25, X
    2244:	11 97       	sbiw	r26, 0x01	; 1
    2246:	20 81       	ld	r18, Z
    2248:	31 81       	ldd	r19, Z+1	; 0x01
    224a:	82 1b       	sub	r24, r18
    224c:	93 0b       	sbc	r25, r19
    224e:	09 c0       	rjmp	.+18     	; 0x2262 <__vector_26+0xb2>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    2250:	8d 91       	ld	r24, X+
    2252:	9c 91       	ld	r25, X
    2254:	11 97       	sbiw	r26, 0x01	; 1
    2256:	20 81       	ld	r18, Z
    2258:	31 81       	ldd	r19, Z+1	; 0x01
    225a:	80 50       	subi	r24, 0x00	; 0
    225c:	9c 4f       	sbci	r25, 0xFC	; 252
    225e:	82 1b       	sub	r24, r18
    2260:	93 0b       	sbc	r25, r19
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    2262:	00 97       	sbiw	r24, 0x00	; 0
    2264:	31 f6       	brne	.-116    	; 0x21f2 <__vector_26+0x42>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    2266:	20 91 df 31 	lds	r18, 0x31DF
    226a:	30 91 e0 31 	lds	r19, 0x31E0
    226e:	80 91 eb 3d 	lds	r24, 0x3DEB
    2272:	90 91 ec 3d 	lds	r25, 0x3DEC
    2276:	28 17       	cp	r18, r24
    2278:	39 07       	cpc	r19, r25
    227a:	58 f0       	brcs	.+22     	; 0x2292 <__vector_26+0xe2>
		return (uart_head[idx] - uart_tail[idx]);
    227c:	80 91 df 31 	lds	r24, 0x31DF
    2280:	90 91 e0 31 	lds	r25, 0x31E0
    2284:	20 91 eb 3d 	lds	r18, 0x3DEB
    2288:	30 91 ec 3d 	lds	r19, 0x3DEC
    228c:	82 1b       	sub	r24, r18
    228e:	93 0b       	sbc	r25, r19
    2290:	0c c0       	rjmp	.+24     	; 0x22aa <__vector_26+0xfa>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    2292:	80 91 df 31 	lds	r24, 0x31DF
    2296:	90 91 e0 31 	lds	r25, 0x31E0
    229a:	20 91 eb 3d 	lds	r18, 0x3DEB
    229e:	30 91 ec 3d 	lds	r19, 0x3DEC
    22a2:	80 50       	subi	r24, 0x00	; 0
    22a4:	9c 4f       	sbci	r25, 0xFC	; 252
    22a6:	82 1b       	sub	r24, r18
    22a8:	93 0b       	sbc	r25, r19
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
	}
	//disable the tx outgoing hardware buffer ready interrupt if we have nothing more to put in it.
	if(uart_count(port)>0) uart_txbuffer_enable(port);
    22aa:	00 97       	sbiw	r24, 0x00	; 0
    22ac:	29 f0       	breq	.+10     	; 0x22b8 <__vector_26+0x108>
    22ae:	80 ea       	ldi	r24, 0xA0	; 160
    22b0:	98 e0       	ldi	r25, 0x08	; 8
    22b2:	0e 94 ce 10 	call	0x219c	; 0x219c <uart_txbuffer_enable>
    22b6:	04 c0       	rjmp	.+8      	; 0x22c0 <__vector_26+0x110>
	else uart_txbuffer_disable(port);
    22b8:	80 ea       	ldi	r24, 0xA0	; 160
    22ba:	98 e0       	ldi	r25, 0x08	; 8
    22bc:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <uart_txbuffer_disable>
//** [PORT SPECIFIC CODE]
//************************************************************************
//************************************************************************

//Must correspond to definitions in uart.h
SIGNAL(USARTC0_DRE_vect) {uart_transmit(&uctrl);}//TX Interrupt
    22c0:	ff 91       	pop	r31
    22c2:	ef 91       	pop	r30
    22c4:	df 91       	pop	r29
    22c6:	cf 91       	pop	r28
    22c8:	bf 91       	pop	r27
    22ca:	af 91       	pop	r26
    22cc:	9f 91       	pop	r25
    22ce:	8f 91       	pop	r24
    22d0:	7f 91       	pop	r23
    22d2:	6f 91       	pop	r22
    22d4:	5f 91       	pop	r21
    22d6:	4f 91       	pop	r20
    22d8:	3f 91       	pop	r19
    22da:	2f 91       	pop	r18
    22dc:	0f 90       	pop	r0
    22de:	0b be       	out	0x3b, r0	; 59
    22e0:	0f 90       	pop	r0
    22e2:	0a be       	out	0x3a, r0	; 58
    22e4:	0f 90       	pop	r0
    22e6:	09 be       	out	0x39, r0	; 57
    22e8:	0f 90       	pop	r0
    22ea:	08 be       	out	0x38, r0	; 56
    22ec:	0f 90       	pop	r0
    22ee:	0f be       	out	0x3f, r0	; 63
    22f0:	0f 90       	pop	r0
    22f2:	1f 90       	pop	r1
    22f4:	18 95       	reti

000022f6 <__vector_29>:
SIGNAL(USARTC0_RXC_vect) {uart_receive(&uctrl);} //RX Interrupt
SIGNAL(USARTC1_DRE_vect) {uart_transmit(&udata);}//TX Interrupt
    22f6:	1f 92       	push	r1
    22f8:	0f 92       	push	r0
    22fa:	0f b6       	in	r0, 0x3f	; 63
    22fc:	0f 92       	push	r0
    22fe:	08 b6       	in	r0, 0x38	; 56
    2300:	0f 92       	push	r0
    2302:	09 b6       	in	r0, 0x39	; 57
    2304:	0f 92       	push	r0
    2306:	0a b6       	in	r0, 0x3a	; 58
    2308:	0f 92       	push	r0
    230a:	0b b6       	in	r0, 0x3b	; 59
    230c:	0f 92       	push	r0
    230e:	11 24       	eor	r1, r1
    2310:	2f 93       	push	r18
    2312:	3f 93       	push	r19
    2314:	4f 93       	push	r20
    2316:	5f 93       	push	r21
    2318:	6f 93       	push	r22
    231a:	7f 93       	push	r23
    231c:	8f 93       	push	r24
    231e:	9f 93       	push	r25
    2320:	af 93       	push	r26
    2322:	bf 93       	push	r27
    2324:	cf 93       	push	r28
    2326:	df 93       	push	r29
    2328:	ef 93       	push	r30
    232a:	ff 93       	push	r31
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    232c:	e0 eb       	ldi	r30, 0xB0	; 176
    232e:	f8 e0       	ldi	r31, 0x08	; 8
    2330:	81 81       	ldd	r24, Z+1	; 0x01
    2332:	85 fd       	sbrc	r24, 5
    2334:	1a c0       	rjmp	.+52     	; 0x236a <__vector_29+0x74>
    2336:	3a c0       	rjmp	.+116    	; 0x23ac <__vector_29+0xb6>
}

inline uint8_t uart_dequeue(USART_t* port){
	uint8_t idx = port_map(port);
	uint16_t oldtail;
	oldtail = uart_tail[idx];
    2338:	20 81       	ld	r18, Z
    233a:	31 81       	ldd	r19, Z+1	; 0x01
	uart_tail[idx]++;
    233c:	80 81       	ld	r24, Z
    233e:	91 81       	ldd	r25, Z+1	; 0x01
    2340:	01 96       	adiw	r24, 0x01	; 1
    2342:	80 83       	st	Z, r24
    2344:	91 83       	std	Z+1, r25	; 0x01
	if (uart_tail[idx] >= MAX_BUFFER_LEN){
    2346:	80 81       	ld	r24, Z
    2348:	91 81       	ldd	r25, Z+1	; 0x01
    234a:	44 e0       	ldi	r20, 0x04	; 4
    234c:	80 30       	cpi	r24, 0x00	; 0
    234e:	94 07       	cpc	r25, r20
    2350:	10 f0       	brcs	.+4      	; 0x2356 <__vector_29+0x60>
		uart_tail[idx] = 0;
    2352:	10 82       	st	Z, r1
    2354:	11 82       	std	Z+1, r1	; 0x01
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    2356:	2d 51       	subi	r18, 0x1D	; 29
    2358:	36 4c       	sbci	r19, 0xC6	; 198
    235a:	e9 01       	movw	r28, r18
    235c:	88 81       	ld	r24, Y
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
    235e:	eb 01       	movw	r28, r22
    2360:	88 83       	st	Y, r24
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    2362:	89 81       	ldd	r24, Y+1	; 0x01
    2364:	85 fd       	sbrc	r24, 5
    2366:	07 c0       	rjmp	.+14     	; 0x2376 <__vector_29+0x80>
    2368:	21 c0       	rjmp	.+66     	; 0x23ac <__vector_29+0xb6>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    236a:	a1 ee       	ldi	r26, 0xE1	; 225
    236c:	b1 e3       	ldi	r27, 0x31	; 49
    236e:	ed ee       	ldi	r30, 0xED	; 237
    2370:	fd e3       	ldi	r31, 0x3D	; 61
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
    2372:	60 eb       	ldi	r22, 0xB0	; 176
    2374:	78 e0       	ldi	r23, 0x08	; 8
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    2376:	8d 91       	ld	r24, X+
    2378:	9c 91       	ld	r25, X
    237a:	11 97       	sbiw	r26, 0x01	; 1
    237c:	20 81       	ld	r18, Z
    237e:	31 81       	ldd	r19, Z+1	; 0x01
    2380:	82 17       	cp	r24, r18
    2382:	93 07       	cpc	r25, r19
    2384:	40 f0       	brcs	.+16     	; 0x2396 <__vector_29+0xa0>
		return (uart_head[idx] - uart_tail[idx]);
    2386:	8d 91       	ld	r24, X+
    2388:	9c 91       	ld	r25, X
    238a:	11 97       	sbiw	r26, 0x01	; 1
    238c:	20 81       	ld	r18, Z
    238e:	31 81       	ldd	r19, Z+1	; 0x01
    2390:	82 1b       	sub	r24, r18
    2392:	93 0b       	sbc	r25, r19
    2394:	09 c0       	rjmp	.+18     	; 0x23a8 <__vector_29+0xb2>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    2396:	8d 91       	ld	r24, X+
    2398:	9c 91       	ld	r25, X
    239a:	11 97       	sbiw	r26, 0x01	; 1
    239c:	20 81       	ld	r18, Z
    239e:	31 81       	ldd	r19, Z+1	; 0x01
    23a0:	80 50       	subi	r24, 0x00	; 0
    23a2:	9c 4f       	sbci	r25, 0xFC	; 252
    23a4:	82 1b       	sub	r24, r18
    23a6:	93 0b       	sbc	r25, r19
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    23a8:	00 97       	sbiw	r24, 0x00	; 0
    23aa:	31 f6       	brne	.-116    	; 0x2338 <__vector_29+0x42>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    23ac:	20 91 e1 31 	lds	r18, 0x31E1
    23b0:	30 91 e2 31 	lds	r19, 0x31E2
    23b4:	80 91 ed 3d 	lds	r24, 0x3DED
    23b8:	90 91 ee 3d 	lds	r25, 0x3DEE
    23bc:	28 17       	cp	r18, r24
    23be:	39 07       	cpc	r19, r25
    23c0:	58 f0       	brcs	.+22     	; 0x23d8 <__vector_29+0xe2>
		return (uart_head[idx] - uart_tail[idx]);
    23c2:	80 91 e1 31 	lds	r24, 0x31E1
    23c6:	90 91 e2 31 	lds	r25, 0x31E2
    23ca:	20 91 ed 3d 	lds	r18, 0x3DED
    23ce:	30 91 ee 3d 	lds	r19, 0x3DEE
    23d2:	82 1b       	sub	r24, r18
    23d4:	93 0b       	sbc	r25, r19
    23d6:	0c c0       	rjmp	.+24     	; 0x23f0 <__vector_29+0xfa>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    23d8:	80 91 e1 31 	lds	r24, 0x31E1
    23dc:	90 91 e2 31 	lds	r25, 0x31E2
    23e0:	20 91 ed 3d 	lds	r18, 0x3DED
    23e4:	30 91 ee 3d 	lds	r19, 0x3DEE
    23e8:	80 50       	subi	r24, 0x00	; 0
    23ea:	9c 4f       	sbci	r25, 0xFC	; 252
    23ec:	82 1b       	sub	r24, r18
    23ee:	93 0b       	sbc	r25, r19
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
	}
	//disable the tx outgoing hardware buffer ready interrupt if we have nothing more to put in it.
	if(uart_count(port)>0) uart_txbuffer_enable(port);
    23f0:	00 97       	sbiw	r24, 0x00	; 0
    23f2:	29 f0       	breq	.+10     	; 0x23fe <__vector_29+0x108>
    23f4:	80 eb       	ldi	r24, 0xB0	; 176
    23f6:	98 e0       	ldi	r25, 0x08	; 8
    23f8:	0e 94 ce 10 	call	0x219c	; 0x219c <uart_txbuffer_enable>
    23fc:	04 c0       	rjmp	.+8      	; 0x2406 <__vector_29+0x110>
	else uart_txbuffer_disable(port);
    23fe:	80 eb       	ldi	r24, 0xB0	; 176
    2400:	98 e0       	ldi	r25, 0x08	; 8
    2402:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <uart_txbuffer_disable>
//************************************************************************

//Must correspond to definitions in uart.h
SIGNAL(USARTC0_DRE_vect) {uart_transmit(&uctrl);}//TX Interrupt
SIGNAL(USARTC0_RXC_vect) {uart_receive(&uctrl);} //RX Interrupt
SIGNAL(USARTC1_DRE_vect) {uart_transmit(&udata);}//TX Interrupt
    2406:	ff 91       	pop	r31
    2408:	ef 91       	pop	r30
    240a:	df 91       	pop	r29
    240c:	cf 91       	pop	r28
    240e:	bf 91       	pop	r27
    2410:	af 91       	pop	r26
    2412:	9f 91       	pop	r25
    2414:	8f 91       	pop	r24
    2416:	7f 91       	pop	r23
    2418:	6f 91       	pop	r22
    241a:	5f 91       	pop	r21
    241c:	4f 91       	pop	r20
    241e:	3f 91       	pop	r19
    2420:	2f 91       	pop	r18
    2422:	0f 90       	pop	r0
    2424:	0b be       	out	0x3b, r0	; 59
    2426:	0f 90       	pop	r0
    2428:	0a be       	out	0x3a, r0	; 58
    242a:	0f 90       	pop	r0
    242c:	09 be       	out	0x39, r0	; 57
    242e:	0f 90       	pop	r0
    2430:	08 be       	out	0x38, r0	; 56
    2432:	0f 90       	pop	r0
    2434:	0f be       	out	0x3f, r0	; 63
    2436:	0f 90       	pop	r0
    2438:	1f 90       	pop	r1
    243a:	18 95       	reti

0000243c <__vector_123>:
SIGNAL(USARTC1_RXC_vect) {uart_receive(&udata);} //RX Interrupt
SIGNAL(USARTF1_DRE_vect) {uart_transmit_lcd(&ulcd);}//TX Interrupt
    243c:	1f 92       	push	r1
    243e:	0f 92       	push	r0
    2440:	0f b6       	in	r0, 0x3f	; 63
    2442:	0f 92       	push	r0
    2444:	08 b6       	in	r0, 0x38	; 56
    2446:	0f 92       	push	r0
    2448:	09 b6       	in	r0, 0x39	; 57
    244a:	0f 92       	push	r0
    244c:	0a b6       	in	r0, 0x3a	; 58
    244e:	0f 92       	push	r0
    2450:	0b b6       	in	r0, 0x3b	; 59
    2452:	0f 92       	push	r0
    2454:	11 24       	eor	r1, r1
    2456:	1f 93       	push	r17
    2458:	2f 93       	push	r18
    245a:	3f 93       	push	r19
    245c:	4f 93       	push	r20
    245e:	5f 93       	push	r21
    2460:	6f 93       	push	r22
    2462:	7f 93       	push	r23
    2464:	8f 93       	push	r24
    2466:	9f 93       	push	r25
    2468:	af 93       	push	r26
    246a:	bf 93       	push	r27
    246c:	cf 93       	push	r28
    246e:	df 93       	push	r29
    2470:	ef 93       	push	r30
    2472:	ff 93       	push	r31
}

void inline uart_transmit_lcd(USART_t* port){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0) && (lcd_flow_control == LCD_READY)){
    2474:	40 eb       	ldi	r20, 0xB0	; 176
    2476:	5b e0       	ldi	r21, 0x0B	; 11
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    2478:	cd ed       	ldi	r28, 0xDD	; 221
    247a:	d1 e3       	ldi	r29, 0x31	; 49
    247c:	a9 ee       	ldi	r26, 0xE9	; 233
    247e:	bd e3       	ldi	r27, 0x3D	; 61
		uart_tail[idx] = 0;
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    2480:	63 ee       	ldi	r22, 0xE3	; 227
    2482:	71 e3       	ldi	r23, 0x31	; 49
				//Header byte just describes payload -- do not send to LCD
				lcd_flow_type = toSend;
				break;
			default:
				//Payload bytes -- send to LCD
				if (toSend == 0x0D) {lcd_flow_control = LCD_BUSY;}
    2484:	1e e4       	ldi	r17, 0x4E	; 78
    2486:	24 c0       	rjmp	.+72     	; 0x24d0 <__vector_123+0x94>
}

inline uint8_t uart_dequeue(USART_t* port){
	uint8_t idx = port_map(port);
	uint16_t oldtail;
	oldtail = uart_tail[idx];
    2488:	ed 91       	ld	r30, X+
    248a:	fc 91       	ld	r31, X
    248c:	11 97       	sbiw	r26, 0x01	; 1
	uart_tail[idx]++;
    248e:	8d 91       	ld	r24, X+
    2490:	9c 91       	ld	r25, X
    2492:	11 97       	sbiw	r26, 0x01	; 1
    2494:	01 96       	adiw	r24, 0x01	; 1
    2496:	8d 93       	st	X+, r24
    2498:	9c 93       	st	X, r25
    249a:	11 97       	sbiw	r26, 0x01	; 1
	if (uart_tail[idx] >= MAX_BUFFER_LEN){
    249c:	8d 91       	ld	r24, X+
    249e:	9c 91       	ld	r25, X
    24a0:	11 97       	sbiw	r26, 0x01	; 1
    24a2:	24 e0       	ldi	r18, 0x04	; 4
    24a4:	80 30       	cpi	r24, 0x00	; 0
    24a6:	92 07       	cpc	r25, r18
    24a8:	18 f0       	brcs	.+6      	; 0x24b0 <__vector_123+0x74>
		uart_tail[idx] = 0;
    24aa:	1d 92       	st	X+, r1
    24ac:	1c 92       	st	X, r1
    24ae:	11 97       	sbiw	r26, 0x01	; 1
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    24b0:	e6 0f       	add	r30, r22
    24b2:	f7 1f       	adc	r31, r23
    24b4:	80 81       	ld	r24, Z
void inline uart_transmit_lcd(USART_t* port){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0) && (lcd_flow_control == LCD_READY)){
		toSend = uart_dequeue(port);
		switch(toSend){
    24b6:	8a 3f       	cpi	r24, 0xFA	; 250
    24b8:	11 f0       	breq	.+4      	; 0x24be <__vector_123+0x82>
    24ba:	8e 3f       	cpi	r24, 0xFE	; 254
    24bc:	19 f4       	brne	.+6      	; 0x24c4 <__vector_123+0x88>
			case LCD_COMMAND:
			case LCD_MACRO:
				//Header byte just describes payload -- do not send to LCD
				lcd_flow_type = toSend;
    24be:	80 93 d5 25 	sts	0x25D5, r24
    24c2:	06 c0       	rjmp	.+12     	; 0x24d0 <__vector_123+0x94>
				break;
			default:
				//Payload bytes -- send to LCD
				if (toSend == 0x0D) {lcd_flow_control = LCD_BUSY;}
    24c4:	8d 30       	cpi	r24, 0x0D	; 13
    24c6:	11 f4       	brne	.+4      	; 0x24cc <__vector_123+0x90>
    24c8:	10 93 d6 25 	sts	0x25D6, r17
				port->DATA = toSend;
    24cc:	fa 01       	movw	r30, r20
    24ce:	80 83       	st	Z, r24
}

void inline uart_transmit_lcd(USART_t* port){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0) && (lcd_flow_control == LCD_READY)){
    24d0:	fa 01       	movw	r30, r20
    24d2:	81 81       	ldd	r24, Z+1	; 0x01
    24d4:	85 ff       	sbrs	r24, 5
    24d6:	20 c0       	rjmp	.+64     	; 0x2518 <__vector_123+0xdc>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    24d8:	88 81       	ld	r24, Y
    24da:	99 81       	ldd	r25, Y+1	; 0x01
    24dc:	2d 91       	ld	r18, X+
    24de:	3c 91       	ld	r19, X
    24e0:	11 97       	sbiw	r26, 0x01	; 1
    24e2:	82 17       	cp	r24, r18
    24e4:	93 07       	cpc	r25, r19
    24e6:	40 f0       	brcs	.+16     	; 0x24f8 <__vector_123+0xbc>
		return (uart_head[idx] - uart_tail[idx]);
    24e8:	88 81       	ld	r24, Y
    24ea:	99 81       	ldd	r25, Y+1	; 0x01
    24ec:	2d 91       	ld	r18, X+
    24ee:	3c 91       	ld	r19, X
    24f0:	11 97       	sbiw	r26, 0x01	; 1
    24f2:	82 1b       	sub	r24, r18
    24f4:	93 0b       	sbc	r25, r19
    24f6:	09 c0       	rjmp	.+18     	; 0x250a <__vector_123+0xce>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    24f8:	88 81       	ld	r24, Y
    24fa:	99 81       	ldd	r25, Y+1	; 0x01
    24fc:	2d 91       	ld	r18, X+
    24fe:	3c 91       	ld	r19, X
    2500:	11 97       	sbiw	r26, 0x01	; 1
    2502:	80 50       	subi	r24, 0x00	; 0
    2504:	9c 4f       	sbci	r25, 0xFC	; 252
    2506:	82 1b       	sub	r24, r18
    2508:	93 0b       	sbc	r25, r19
}

void inline uart_transmit_lcd(USART_t* port){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0) && (lcd_flow_control == LCD_READY)){
    250a:	00 97       	sbiw	r24, 0x00	; 0
    250c:	29 f0       	breq	.+10     	; 0x2518 <__vector_123+0xdc>
    250e:	80 91 d6 25 	lds	r24, 0x25D6
    2512:	82 35       	cpi	r24, 0x52	; 82
    2514:	09 f4       	brne	.+2      	; 0x2518 <__vector_123+0xdc>
    2516:	b8 cf       	rjmp	.-144    	; 0x2488 <__vector_123+0x4c>
				if (toSend == 0x0D) {lcd_flow_control = LCD_BUSY;}
				port->DATA = toSend;
				break;
		}				
	}
	uart_txbuffer_disable(port); //implemented this way to prevent periodic stalls that happen when uart_txbuffer isn't disabled quickly enough
    2518:	80 eb       	ldi	r24, 0xB0	; 176
    251a:	9b e0       	ldi	r25, 0x0B	; 11
    251c:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <uart_txbuffer_disable>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    2520:	20 91 dd 31 	lds	r18, 0x31DD
    2524:	30 91 de 31 	lds	r19, 0x31DE
    2528:	80 91 e9 3d 	lds	r24, 0x3DE9
    252c:	90 91 ea 3d 	lds	r25, 0x3DEA
    2530:	28 17       	cp	r18, r24
    2532:	39 07       	cpc	r19, r25
    2534:	58 f0       	brcs	.+22     	; 0x254c <__vector_123+0x110>
		return (uart_head[idx] - uart_tail[idx]);
    2536:	80 91 dd 31 	lds	r24, 0x31DD
    253a:	90 91 de 31 	lds	r25, 0x31DE
    253e:	20 91 e9 3d 	lds	r18, 0x3DE9
    2542:	30 91 ea 3d 	lds	r19, 0x3DEA
    2546:	82 1b       	sub	r24, r18
    2548:	93 0b       	sbc	r25, r19
    254a:	0c c0       	rjmp	.+24     	; 0x2564 <__vector_123+0x128>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    254c:	80 91 dd 31 	lds	r24, 0x31DD
    2550:	90 91 de 31 	lds	r25, 0x31DE
    2554:	20 91 e9 3d 	lds	r18, 0x3DE9
    2558:	30 91 ea 3d 	lds	r19, 0x3DEA
    255c:	80 50       	subi	r24, 0x00	; 0
    255e:	9c 4f       	sbci	r25, 0xFC	; 252
    2560:	82 1b       	sub	r24, r18
    2562:	93 0b       	sbc	r25, r19
				port->DATA = toSend;
				break;
		}				
	}
	uart_txbuffer_disable(port); //implemented this way to prevent periodic stalls that happen when uart_txbuffer isn't disabled quickly enough
	if ((uart_count(port)>0) && (lcd_flow_control == LCD_READY)){ //...something is waiting to go out
    2564:	00 97       	sbiw	r24, 0x00	; 0
    2566:	41 f0       	breq	.+16     	; 0x2578 <__vector_123+0x13c>
    2568:	80 91 d6 25 	lds	r24, 0x25D6
    256c:	82 35       	cpi	r24, 0x52	; 82
    256e:	21 f4       	brne	.+8      	; 0x2578 <__vector_123+0x13c>
		uart_txbuffer_enable(port);	
    2570:	80 eb       	ldi	r24, 0xB0	; 176
    2572:	9b e0       	ldi	r25, 0x0B	; 11
    2574:	0e 94 ce 10 	call	0x219c	; 0x219c <uart_txbuffer_enable>
//Must correspond to definitions in uart.h
SIGNAL(USARTC0_DRE_vect) {uart_transmit(&uctrl);}//TX Interrupt
SIGNAL(USARTC0_RXC_vect) {uart_receive(&uctrl);} //RX Interrupt
SIGNAL(USARTC1_DRE_vect) {uart_transmit(&udata);}//TX Interrupt
SIGNAL(USARTC1_RXC_vect) {uart_receive(&udata);} //RX Interrupt
SIGNAL(USARTF1_DRE_vect) {uart_transmit_lcd(&ulcd);}//TX Interrupt
    2578:	ff 91       	pop	r31
    257a:	ef 91       	pop	r30
    257c:	df 91       	pop	r29
    257e:	cf 91       	pop	r28
    2580:	bf 91       	pop	r27
    2582:	af 91       	pop	r26
    2584:	9f 91       	pop	r25
    2586:	8f 91       	pop	r24
    2588:	7f 91       	pop	r23
    258a:	6f 91       	pop	r22
    258c:	5f 91       	pop	r21
    258e:	4f 91       	pop	r20
    2590:	3f 91       	pop	r19
    2592:	2f 91       	pop	r18
    2594:	1f 91       	pop	r17
    2596:	0f 90       	pop	r0
    2598:	0b be       	out	0x3b, r0	; 59
    259a:	0f 90       	pop	r0
    259c:	0a be       	out	0x3a, r0	; 58
    259e:	0f 90       	pop	r0
    25a0:	09 be       	out	0x39, r0	; 57
    25a2:	0f 90       	pop	r0
    25a4:	08 be       	out	0x38, r0	; 56
    25a6:	0f 90       	pop	r0
    25a8:	0f be       	out	0x3f, r0	; 63
    25aa:	0f 90       	pop	r0
    25ac:	1f 90       	pop	r1
    25ae:	18 95       	reti

000025b0 <uart_transmit>:
//==================================

//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
    25b0:	0f 93       	push	r16
    25b2:	1f 93       	push	r17
    25b4:	cf 93       	push	r28
    25b6:	df 93       	push	r29
    25b8:	dc 01       	movw	r26, r24
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    25ba:	11 96       	adiw	r26, 0x01	; 1
    25bc:	8c 91       	ld	r24, X
    25be:	11 97       	sbiw	r26, 0x01	; 1
    25c0:	85 fd       	sbrc	r24, 5
    25c2:	42 c0       	rjmp	.+132    	; 0x2648 <uart_transmit+0x98>
    25c4:	91 c0       	rjmp	.+290    	; 0x26e8 <uart_transmit+0x138>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    25c6:	2b e0       	ldi	r18, 0x0B	; 11
    25c8:	a0 3b       	cpi	r26, 0xB0	; 176
    25ca:	b2 07       	cpc	r27, r18
    25cc:	51 f0       	breq	.+20     	; 0x25e2 <uart_transmit+0x32>
	if (port == &uctrl) {return 1;}
    25ce:	38 e0       	ldi	r19, 0x08	; 8
    25d0:	a0 3a       	cpi	r26, 0xA0	; 160
    25d2:	b3 07       	cpc	r27, r19
    25d4:	41 f0       	breq	.+16     	; 0x25e6 <uart_transmit+0x36>
	if (port == &udata) {return 2;}
    25d6:	88 e0       	ldi	r24, 0x08	; 8
    25d8:	a0 3b       	cpi	r26, 0xB0	; 176
    25da:	b8 07       	cpc	r27, r24
    25dc:	31 f4       	brne	.+12     	; 0x25ea <uart_transmit+0x3a>
    25de:	22 e0       	ldi	r18, 0x02	; 2
    25e0:	05 c0       	rjmp	.+10     	; 0x25ec <uart_transmit+0x3c>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    25e2:	20 e0       	ldi	r18, 0x00	; 0
    25e4:	03 c0       	rjmp	.+6      	; 0x25ec <uart_transmit+0x3c>
	if (port == &uctrl) {return 1;}
    25e6:	21 e0       	ldi	r18, 0x01	; 1
    25e8:	01 c0       	rjmp	.+2      	; 0x25ec <uart_transmit+0x3c>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    25ea:	20 e0       	ldi	r18, 0x00	; 0
}

inline uint8_t uart_dequeue(USART_t* port){
	uint8_t idx = port_map(port);
	uint16_t oldtail;
	oldtail = uart_tail[idx];
    25ec:	30 e0       	ldi	r19, 0x00	; 0
    25ee:	c9 01       	movw	r24, r18
    25f0:	88 0f       	add	r24, r24
    25f2:	99 1f       	adc	r25, r25
    25f4:	fb 01       	movw	r30, r22
    25f6:	e8 0f       	add	r30, r24
    25f8:	f9 1f       	adc	r31, r25
    25fa:	40 81       	ld	r20, Z
    25fc:	51 81       	ldd	r21, Z+1	; 0x01
	uart_tail[idx]++;
    25fe:	80 81       	ld	r24, Z
    2600:	91 81       	ldd	r25, Z+1	; 0x01
    2602:	01 96       	adiw	r24, 0x01	; 1
    2604:	80 83       	st	Z, r24
    2606:	91 83       	std	Z+1, r25	; 0x01
	if (uart_tail[idx] >= MAX_BUFFER_LEN){
    2608:	80 81       	ld	r24, Z
    260a:	91 81       	ldd	r25, Z+1	; 0x01
    260c:	e4 e0       	ldi	r30, 0x04	; 4
    260e:	80 30       	cpi	r24, 0x00	; 0
    2610:	9e 07       	cpc	r25, r30
    2612:	40 f0       	brcs	.+16     	; 0x2624 <uart_transmit+0x74>
		uart_tail[idx] = 0;
    2614:	c9 01       	movw	r24, r18
    2616:	88 0f       	add	r24, r24
    2618:	99 1f       	adc	r25, r25
    261a:	86 0f       	add	r24, r22
    261c:	97 1f       	adc	r25, r23
    261e:	fc 01       	movw	r30, r24
    2620:	10 82       	st	Z, r1
    2622:	11 82       	std	Z+1, r1	; 0x01
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    2624:	c9 01       	movw	r24, r18
    2626:	98 2f       	mov	r25, r24
    2628:	88 27       	eor	r24, r24
    262a:	99 0f       	add	r25, r25
    262c:	99 0f       	add	r25, r25
    262e:	84 0f       	add	r24, r20
    2630:	95 1f       	adc	r25, r21
    2632:	f8 01       	movw	r30, r16
    2634:	e8 0f       	add	r30, r24
    2636:	f9 1f       	adc	r31, r25
    2638:	80 81       	ld	r24, Z
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
    263a:	8c 93       	st	X, r24
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    263c:	11 96       	adiw	r26, 0x01	; 1
    263e:	8c 91       	ld	r24, X
    2640:	11 97       	sbiw	r26, 0x01	; 1
    2642:	85 fd       	sbrc	r24, 5
    2644:	07 c0       	rjmp	.+14     	; 0x2654 <uart_transmit+0xa4>
    2646:	50 c0       	rjmp	.+160    	; 0x26e8 <uart_transmit+0x138>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    2648:	cd ed       	ldi	r28, 0xDD	; 221
    264a:	d1 e3       	ldi	r29, 0x31	; 49
    264c:	69 ee       	ldi	r22, 0xE9	; 233
    264e:	7d e3       	ldi	r23, 0x3D	; 61
		uart_tail[idx] = 0;
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    2650:	03 ee       	ldi	r16, 0xE3	; 227
    2652:	11 e3       	ldi	r17, 0x31	; 49
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    2654:	fb e0       	ldi	r31, 0x0B	; 11
    2656:	a0 3b       	cpi	r26, 0xB0	; 176
    2658:	bf 07       	cpc	r27, r31
    265a:	51 f0       	breq	.+20     	; 0x2670 <uart_transmit+0xc0>
	if (port == &uctrl) {return 1;}
    265c:	28 e0       	ldi	r18, 0x08	; 8
    265e:	a0 3a       	cpi	r26, 0xA0	; 160
    2660:	b2 07       	cpc	r27, r18
    2662:	41 f0       	breq	.+16     	; 0x2674 <uart_transmit+0xc4>
	if (port == &udata) {return 2;}
    2664:	38 e0       	ldi	r19, 0x08	; 8
    2666:	a0 3b       	cpi	r26, 0xB0	; 176
    2668:	b3 07       	cpc	r27, r19
    266a:	31 f4       	brne	.+12     	; 0x2678 <uart_transmit+0xc8>
    266c:	22 e0       	ldi	r18, 0x02	; 2
    266e:	05 c0       	rjmp	.+10     	; 0x267a <uart_transmit+0xca>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    2670:	20 e0       	ldi	r18, 0x00	; 0
    2672:	03 c0       	rjmp	.+6      	; 0x267a <uart_transmit+0xca>
	if (port == &uctrl) {return 1;}
    2674:	21 e0       	ldi	r18, 0x01	; 1
    2676:	01 c0       	rjmp	.+2      	; 0x267a <uart_transmit+0xca>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    2678:	20 e0       	ldi	r18, 0x00	; 0
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    267a:	30 e0       	ldi	r19, 0x00	; 0
    267c:	c9 01       	movw	r24, r18
    267e:	88 0f       	add	r24, r24
    2680:	99 1f       	adc	r25, r25
    2682:	fe 01       	movw	r30, r28
    2684:	e8 0f       	add	r30, r24
    2686:	f9 1f       	adc	r31, r25
    2688:	40 81       	ld	r20, Z
    268a:	51 81       	ldd	r21, Z+1	; 0x01
    268c:	fb 01       	movw	r30, r22
    268e:	e8 0f       	add	r30, r24
    2690:	f9 1f       	adc	r31, r25
    2692:	80 81       	ld	r24, Z
    2694:	91 81       	ldd	r25, Z+1	; 0x01
    2696:	48 17       	cp	r20, r24
    2698:	59 07       	cpc	r21, r25
    269a:	88 f0       	brcs	.+34     	; 0x26be <uart_transmit+0x10e>
		return (uart_head[idx] - uart_tail[idx]);
    269c:	22 0f       	add	r18, r18
    269e:	33 1f       	adc	r19, r19
    26a0:	fe 01       	movw	r30, r28
    26a2:	e2 0f       	add	r30, r18
    26a4:	f3 1f       	adc	r31, r19
    26a6:	40 81       	ld	r20, Z
    26a8:	51 81       	ldd	r21, Z+1	; 0x01
    26aa:	fb 01       	movw	r30, r22
    26ac:	e2 0f       	add	r30, r18
    26ae:	f3 1f       	adc	r31, r19
    26b0:	80 81       	ld	r24, Z
    26b2:	91 81       	ldd	r25, Z+1	; 0x01
    26b4:	fa 01       	movw	r30, r20
    26b6:	e8 1b       	sub	r30, r24
    26b8:	f9 0b       	sbc	r31, r25
    26ba:	cf 01       	movw	r24, r30
    26bc:	12 c0       	rjmp	.+36     	; 0x26e2 <uart_transmit+0x132>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    26be:	c9 01       	movw	r24, r18
    26c0:	88 0f       	add	r24, r24
    26c2:	99 1f       	adc	r25, r25
    26c4:	fe 01       	movw	r30, r28
    26c6:	e8 0f       	add	r30, r24
    26c8:	f9 1f       	adc	r31, r25
    26ca:	40 81       	ld	r20, Z
    26cc:	51 81       	ldd	r21, Z+1	; 0x01
    26ce:	fb 01       	movw	r30, r22
    26d0:	e8 0f       	add	r30, r24
    26d2:	f9 1f       	adc	r31, r25
    26d4:	20 81       	ld	r18, Z
    26d6:	31 81       	ldd	r19, Z+1	; 0x01
    26d8:	ca 01       	movw	r24, r20
    26da:	80 50       	subi	r24, 0x00	; 0
    26dc:	9c 4f       	sbci	r25, 0xFC	; 252
    26de:	82 1b       	sub	r24, r18
    26e0:	93 0b       	sbc	r25, r19
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    26e2:	00 97       	sbiw	r24, 0x00	; 0
    26e4:	09 f0       	breq	.+2      	; 0x26e8 <uart_transmit+0x138>
    26e6:	6f cf       	rjmp	.-290    	; 0x25c6 <uart_transmit+0x16>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    26e8:	fb e0       	ldi	r31, 0x0B	; 11
    26ea:	a0 3b       	cpi	r26, 0xB0	; 176
    26ec:	bf 07       	cpc	r27, r31
    26ee:	51 f0       	breq	.+20     	; 0x2704 <uart_transmit+0x154>
	if (port == &uctrl) {return 1;}
    26f0:	28 e0       	ldi	r18, 0x08	; 8
    26f2:	a0 3a       	cpi	r26, 0xA0	; 160
    26f4:	b2 07       	cpc	r27, r18
    26f6:	41 f0       	breq	.+16     	; 0x2708 <uart_transmit+0x158>
	if (port == &udata) {return 2;}
    26f8:	38 e0       	ldi	r19, 0x08	; 8
    26fa:	a0 3b       	cpi	r26, 0xB0	; 176
    26fc:	b3 07       	cpc	r27, r19
    26fe:	31 f4       	brne	.+12     	; 0x270c <uart_transmit+0x15c>
    2700:	22 e0       	ldi	r18, 0x02	; 2
    2702:	05 c0       	rjmp	.+10     	; 0x270e <uart_transmit+0x15e>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    2704:	20 e0       	ldi	r18, 0x00	; 0
    2706:	03 c0       	rjmp	.+6      	; 0x270e <uart_transmit+0x15e>
	if (port == &uctrl) {return 1;}
    2708:	21 e0       	ldi	r18, 0x01	; 1
    270a:	01 c0       	rjmp	.+2      	; 0x270e <uart_transmit+0x15e>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    270c:	20 e0       	ldi	r18, 0x00	; 0
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    270e:	30 e0       	ldi	r19, 0x00	; 0
    2710:	c9 01       	movw	r24, r18
    2712:	88 0f       	add	r24, r24
    2714:	99 1f       	adc	r25, r25
    2716:	fc 01       	movw	r30, r24
    2718:	e3 52       	subi	r30, 0x23	; 35
    271a:	fe 4c       	sbci	r31, 0xCE	; 206
    271c:	40 81       	ld	r20, Z
    271e:	51 81       	ldd	r21, Z+1	; 0x01
    2720:	87 51       	subi	r24, 0x17	; 23
    2722:	92 4c       	sbci	r25, 0xC2	; 194
    2724:	fc 01       	movw	r30, r24
    2726:	80 81       	ld	r24, Z
    2728:	91 81       	ldd	r25, Z+1	; 0x01
    272a:	48 17       	cp	r20, r24
    272c:	59 07       	cpc	r21, r25
    272e:	78 f0       	brcs	.+30     	; 0x274e <uart_transmit+0x19e>
		return (uart_head[idx] - uart_tail[idx]);
    2730:	22 0f       	add	r18, r18
    2732:	33 1f       	adc	r19, r19
    2734:	f9 01       	movw	r30, r18
    2736:	e3 52       	subi	r30, 0x23	; 35
    2738:	fe 4c       	sbci	r31, 0xCE	; 206
    273a:	40 81       	ld	r20, Z
    273c:	51 81       	ldd	r21, Z+1	; 0x01
    273e:	27 51       	subi	r18, 0x17	; 23
    2740:	32 4c       	sbci	r19, 0xC2	; 194
    2742:	f9 01       	movw	r30, r18
    2744:	80 81       	ld	r24, Z
    2746:	91 81       	ldd	r25, Z+1	; 0x01
    2748:	48 1b       	sub	r20, r24
    274a:	59 0b       	sbc	r21, r25
    274c:	10 c0       	rjmp	.+32     	; 0x276e <uart_transmit+0x1be>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    274e:	22 0f       	add	r18, r18
    2750:	33 1f       	adc	r19, r19
    2752:	f9 01       	movw	r30, r18
    2754:	e3 52       	subi	r30, 0x23	; 35
    2756:	fe 4c       	sbci	r31, 0xCE	; 206
    2758:	40 81       	ld	r20, Z
    275a:	51 81       	ldd	r21, Z+1	; 0x01
    275c:	27 51       	subi	r18, 0x17	; 23
    275e:	32 4c       	sbci	r19, 0xC2	; 194
    2760:	f9 01       	movw	r30, r18
    2762:	80 81       	ld	r24, Z
    2764:	91 81       	ldd	r25, Z+1	; 0x01
    2766:	40 50       	subi	r20, 0x00	; 0
    2768:	5c 4f       	sbci	r21, 0xFC	; 252
    276a:	48 1b       	sub	r20, r24
    276c:	59 0b       	sbc	r21, r25
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
	}
	//disable the tx outgoing hardware buffer ready interrupt if we have nothing more to put in it.
	if(uart_count(port)>0) uart_txbuffer_enable(port);
    276e:	41 15       	cp	r20, r1
    2770:	51 05       	cpc	r21, r1
    2772:	21 f0       	breq	.+8      	; 0x277c <uart_transmit+0x1cc>
    2774:	cd 01       	movw	r24, r26
    2776:	0e 94 ce 10 	call	0x219c	; 0x219c <uart_txbuffer_enable>
    277a:	03 c0       	rjmp	.+6      	; 0x2782 <uart_transmit+0x1d2>
	else uart_txbuffer_disable(port);
    277c:	cd 01       	movw	r24, r26
    277e:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <uart_txbuffer_disable>
}
    2782:	df 91       	pop	r29
    2784:	cf 91       	pop	r28
    2786:	1f 91       	pop	r17
    2788:	0f 91       	pop	r16
    278a:	08 95       	ret

0000278c <uart_transmit_lcd>:

void inline uart_transmit_lcd(USART_t* port){
    278c:	ff 92       	push	r15
    278e:	0f 93       	push	r16
    2790:	1f 93       	push	r17
    2792:	cf 93       	push	r28
    2794:	df 93       	push	r29
    2796:	ec 01       	movw	r28, r24
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    2798:	ad ed       	ldi	r26, 0xDD	; 221
    279a:	b1 e3       	ldi	r27, 0x31	; 49
    279c:	69 ee       	ldi	r22, 0xE9	; 233
    279e:	7d e3       	ldi	r23, 0x3D	; 61
		uart_tail[idx] = 0;
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    27a0:	03 ee       	ldi	r16, 0xE3	; 227
    27a2:	11 e3       	ldi	r17, 0x31	; 49
				//Header byte just describes payload -- do not send to LCD
				lcd_flow_type = toSend;
				break;
			default:
				//Payload bytes -- send to LCD
				if (toSend == 0x0D) {lcd_flow_control = LCD_BUSY;}
    27a4:	0f 2e       	mov	r0, r31
    27a6:	fe e4       	ldi	r31, 0x4E	; 78
    27a8:	ff 2e       	mov	r15, r31
    27aa:	f0 2d       	mov	r31, r0
}

void inline uart_transmit_lcd(USART_t* port){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0) && (lcd_flow_control == LCD_READY)){
    27ac:	46 c0       	rjmp	.+140    	; 0x283a <uart_transmit_lcd+0xae>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    27ae:	2b e0       	ldi	r18, 0x0B	; 11
    27b0:	c0 3b       	cpi	r28, 0xB0	; 176
    27b2:	d2 07       	cpc	r29, r18
    27b4:	51 f0       	breq	.+20     	; 0x27ca <uart_transmit_lcd+0x3e>
	if (port == &uctrl) {return 1;}
    27b6:	38 e0       	ldi	r19, 0x08	; 8
    27b8:	c0 3a       	cpi	r28, 0xA0	; 160
    27ba:	d3 07       	cpc	r29, r19
    27bc:	41 f0       	breq	.+16     	; 0x27ce <uart_transmit_lcd+0x42>
	if (port == &udata) {return 2;}
    27be:	88 e0       	ldi	r24, 0x08	; 8
    27c0:	c0 3b       	cpi	r28, 0xB0	; 176
    27c2:	d8 07       	cpc	r29, r24
    27c4:	31 f4       	brne	.+12     	; 0x27d2 <uart_transmit_lcd+0x46>
    27c6:	22 e0       	ldi	r18, 0x02	; 2
    27c8:	05 c0       	rjmp	.+10     	; 0x27d4 <uart_transmit_lcd+0x48>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    27ca:	20 e0       	ldi	r18, 0x00	; 0
    27cc:	03 c0       	rjmp	.+6      	; 0x27d4 <uart_transmit_lcd+0x48>
	if (port == &uctrl) {return 1;}
    27ce:	21 e0       	ldi	r18, 0x01	; 1
    27d0:	01 c0       	rjmp	.+2      	; 0x27d4 <uart_transmit_lcd+0x48>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    27d2:	20 e0       	ldi	r18, 0x00	; 0
}

inline uint8_t uart_dequeue(USART_t* port){
	uint8_t idx = port_map(port);
	uint16_t oldtail;
	oldtail = uart_tail[idx];
    27d4:	30 e0       	ldi	r19, 0x00	; 0
    27d6:	c9 01       	movw	r24, r18
    27d8:	88 0f       	add	r24, r24
    27da:	99 1f       	adc	r25, r25
    27dc:	fb 01       	movw	r30, r22
    27de:	e8 0f       	add	r30, r24
    27e0:	f9 1f       	adc	r31, r25
    27e2:	40 81       	ld	r20, Z
    27e4:	51 81       	ldd	r21, Z+1	; 0x01
	uart_tail[idx]++;
    27e6:	80 81       	ld	r24, Z
    27e8:	91 81       	ldd	r25, Z+1	; 0x01
    27ea:	01 96       	adiw	r24, 0x01	; 1
    27ec:	80 83       	st	Z, r24
    27ee:	91 83       	std	Z+1, r25	; 0x01
	if (uart_tail[idx] >= MAX_BUFFER_LEN){
    27f0:	80 81       	ld	r24, Z
    27f2:	91 81       	ldd	r25, Z+1	; 0x01
    27f4:	e4 e0       	ldi	r30, 0x04	; 4
    27f6:	80 30       	cpi	r24, 0x00	; 0
    27f8:	9e 07       	cpc	r25, r30
    27fa:	40 f0       	brcs	.+16     	; 0x280c <uart_transmit_lcd+0x80>
		uart_tail[idx] = 0;
    27fc:	c9 01       	movw	r24, r18
    27fe:	88 0f       	add	r24, r24
    2800:	99 1f       	adc	r25, r25
    2802:	86 0f       	add	r24, r22
    2804:	97 1f       	adc	r25, r23
    2806:	fc 01       	movw	r30, r24
    2808:	10 82       	st	Z, r1
    280a:	11 82       	std	Z+1, r1	; 0x01
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    280c:	c9 01       	movw	r24, r18
    280e:	98 2f       	mov	r25, r24
    2810:	88 27       	eor	r24, r24
    2812:	99 0f       	add	r25, r25
    2814:	99 0f       	add	r25, r25
    2816:	84 0f       	add	r24, r20
    2818:	95 1f       	adc	r25, r21
    281a:	f8 01       	movw	r30, r16
    281c:	e8 0f       	add	r30, r24
    281e:	f9 1f       	adc	r31, r25
    2820:	80 81       	ld	r24, Z
void inline uart_transmit_lcd(USART_t* port){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0) && (lcd_flow_control == LCD_READY)){
		toSend = uart_dequeue(port);
		switch(toSend){
    2822:	8a 3f       	cpi	r24, 0xFA	; 250
    2824:	11 f0       	breq	.+4      	; 0x282a <uart_transmit_lcd+0x9e>
    2826:	8e 3f       	cpi	r24, 0xFE	; 254
    2828:	19 f4       	brne	.+6      	; 0x2830 <uart_transmit_lcd+0xa4>
			case LCD_COMMAND:
			case LCD_MACRO:
				//Header byte just describes payload -- do not send to LCD
				lcd_flow_type = toSend;
    282a:	80 93 d5 25 	sts	0x25D5, r24
				break;
    282e:	05 c0       	rjmp	.+10     	; 0x283a <uart_transmit_lcd+0xae>
			default:
				//Payload bytes -- send to LCD
				if (toSend == 0x0D) {lcd_flow_control = LCD_BUSY;}
    2830:	8d 30       	cpi	r24, 0x0D	; 13
    2832:	11 f4       	brne	.+4      	; 0x2838 <uart_transmit_lcd+0xac>
    2834:	f0 92 d6 25 	sts	0x25D6, r15
				port->DATA = toSend;
    2838:	88 83       	st	Y, r24
}

void inline uart_transmit_lcd(USART_t* port){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0) && (lcd_flow_control == LCD_READY)){
    283a:	89 81       	ldd	r24, Y+1	; 0x01
    283c:	85 ff       	sbrs	r24, 5
    283e:	4e c0       	rjmp	.+156    	; 0x28dc <uart_transmit_lcd+0x150>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    2840:	fb e0       	ldi	r31, 0x0B	; 11
    2842:	c0 3b       	cpi	r28, 0xB0	; 176
    2844:	df 07       	cpc	r29, r31
    2846:	51 f0       	breq	.+20     	; 0x285c <uart_transmit_lcd+0xd0>
	if (port == &uctrl) {return 1;}
    2848:	28 e0       	ldi	r18, 0x08	; 8
    284a:	c0 3a       	cpi	r28, 0xA0	; 160
    284c:	d2 07       	cpc	r29, r18
    284e:	41 f0       	breq	.+16     	; 0x2860 <uart_transmit_lcd+0xd4>
	if (port == &udata) {return 2;}
    2850:	38 e0       	ldi	r19, 0x08	; 8
    2852:	c0 3b       	cpi	r28, 0xB0	; 176
    2854:	d3 07       	cpc	r29, r19
    2856:	31 f4       	brne	.+12     	; 0x2864 <uart_transmit_lcd+0xd8>
    2858:	22 e0       	ldi	r18, 0x02	; 2
    285a:	05 c0       	rjmp	.+10     	; 0x2866 <uart_transmit_lcd+0xda>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    285c:	20 e0       	ldi	r18, 0x00	; 0
    285e:	03 c0       	rjmp	.+6      	; 0x2866 <uart_transmit_lcd+0xda>
	if (port == &uctrl) {return 1;}
    2860:	21 e0       	ldi	r18, 0x01	; 1
    2862:	01 c0       	rjmp	.+2      	; 0x2866 <uart_transmit_lcd+0xda>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    2864:	20 e0       	ldi	r18, 0x00	; 0
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    2866:	30 e0       	ldi	r19, 0x00	; 0
    2868:	c9 01       	movw	r24, r18
    286a:	88 0f       	add	r24, r24
    286c:	99 1f       	adc	r25, r25
    286e:	fd 01       	movw	r30, r26
    2870:	e8 0f       	add	r30, r24
    2872:	f9 1f       	adc	r31, r25
    2874:	40 81       	ld	r20, Z
    2876:	51 81       	ldd	r21, Z+1	; 0x01
    2878:	fb 01       	movw	r30, r22
    287a:	e8 0f       	add	r30, r24
    287c:	f9 1f       	adc	r31, r25
    287e:	80 81       	ld	r24, Z
    2880:	91 81       	ldd	r25, Z+1	; 0x01
    2882:	48 17       	cp	r20, r24
    2884:	59 07       	cpc	r21, r25
    2886:	88 f0       	brcs	.+34     	; 0x28aa <uart_transmit_lcd+0x11e>
		return (uart_head[idx] - uart_tail[idx]);
    2888:	22 0f       	add	r18, r18
    288a:	33 1f       	adc	r19, r19
    288c:	fd 01       	movw	r30, r26
    288e:	e2 0f       	add	r30, r18
    2890:	f3 1f       	adc	r31, r19
    2892:	40 81       	ld	r20, Z
    2894:	51 81       	ldd	r21, Z+1	; 0x01
    2896:	fb 01       	movw	r30, r22
    2898:	e2 0f       	add	r30, r18
    289a:	f3 1f       	adc	r31, r19
    289c:	80 81       	ld	r24, Z
    289e:	91 81       	ldd	r25, Z+1	; 0x01
    28a0:	fa 01       	movw	r30, r20
    28a2:	e8 1b       	sub	r30, r24
    28a4:	f9 0b       	sbc	r31, r25
    28a6:	cf 01       	movw	r24, r30
    28a8:	12 c0       	rjmp	.+36     	; 0x28ce <uart_transmit_lcd+0x142>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    28aa:	c9 01       	movw	r24, r18
    28ac:	88 0f       	add	r24, r24
    28ae:	99 1f       	adc	r25, r25
    28b0:	fd 01       	movw	r30, r26
    28b2:	e8 0f       	add	r30, r24
    28b4:	f9 1f       	adc	r31, r25
    28b6:	40 81       	ld	r20, Z
    28b8:	51 81       	ldd	r21, Z+1	; 0x01
    28ba:	fb 01       	movw	r30, r22
    28bc:	e8 0f       	add	r30, r24
    28be:	f9 1f       	adc	r31, r25
    28c0:	20 81       	ld	r18, Z
    28c2:	31 81       	ldd	r19, Z+1	; 0x01
    28c4:	ca 01       	movw	r24, r20
    28c6:	80 50       	subi	r24, 0x00	; 0
    28c8:	9c 4f       	sbci	r25, 0xFC	; 252
    28ca:	82 1b       	sub	r24, r18
    28cc:	93 0b       	sbc	r25, r19
}

void inline uart_transmit_lcd(USART_t* port){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0) && (lcd_flow_control == LCD_READY)){
    28ce:	00 97       	sbiw	r24, 0x00	; 0
    28d0:	29 f0       	breq	.+10     	; 0x28dc <uart_transmit_lcd+0x150>
    28d2:	80 91 d6 25 	lds	r24, 0x25D6
    28d6:	82 35       	cpi	r24, 0x52	; 82
    28d8:	09 f4       	brne	.+2      	; 0x28dc <uart_transmit_lcd+0x150>
    28da:	69 cf       	rjmp	.-302    	; 0x27ae <uart_transmit_lcd+0x22>
				if (toSend == 0x0D) {lcd_flow_control = LCD_BUSY;}
				port->DATA = toSend;
				break;
		}				
	}
	uart_txbuffer_disable(port); //implemented this way to prevent periodic stalls that happen when uart_txbuffer isn't disabled quickly enough
    28dc:	ce 01       	movw	r24, r28
    28de:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <uart_txbuffer_disable>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    28e2:	fb e0       	ldi	r31, 0x0B	; 11
    28e4:	c0 3b       	cpi	r28, 0xB0	; 176
    28e6:	df 07       	cpc	r29, r31
    28e8:	51 f0       	breq	.+20     	; 0x28fe <uart_transmit_lcd+0x172>
	if (port == &uctrl) {return 1;}
    28ea:	28 e0       	ldi	r18, 0x08	; 8
    28ec:	c0 3a       	cpi	r28, 0xA0	; 160
    28ee:	d2 07       	cpc	r29, r18
    28f0:	41 f0       	breq	.+16     	; 0x2902 <uart_transmit_lcd+0x176>
	if (port == &udata) {return 2;}
    28f2:	38 e0       	ldi	r19, 0x08	; 8
    28f4:	c0 3b       	cpi	r28, 0xB0	; 176
    28f6:	d3 07       	cpc	r29, r19
    28f8:	31 f4       	brne	.+12     	; 0x2906 <uart_transmit_lcd+0x17a>
    28fa:	22 e0       	ldi	r18, 0x02	; 2
    28fc:	05 c0       	rjmp	.+10     	; 0x2908 <uart_transmit_lcd+0x17c>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    28fe:	20 e0       	ldi	r18, 0x00	; 0
    2900:	03 c0       	rjmp	.+6      	; 0x2908 <uart_transmit_lcd+0x17c>
	if (port == &uctrl) {return 1;}
    2902:	21 e0       	ldi	r18, 0x01	; 1
    2904:	01 c0       	rjmp	.+2      	; 0x2908 <uart_transmit_lcd+0x17c>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    2906:	20 e0       	ldi	r18, 0x00	; 0
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    2908:	30 e0       	ldi	r19, 0x00	; 0
    290a:	c9 01       	movw	r24, r18
    290c:	88 0f       	add	r24, r24
    290e:	99 1f       	adc	r25, r25
    2910:	fc 01       	movw	r30, r24
    2912:	e3 52       	subi	r30, 0x23	; 35
    2914:	fe 4c       	sbci	r31, 0xCE	; 206
    2916:	40 81       	ld	r20, Z
    2918:	51 81       	ldd	r21, Z+1	; 0x01
    291a:	87 51       	subi	r24, 0x17	; 23
    291c:	92 4c       	sbci	r25, 0xC2	; 194
    291e:	fc 01       	movw	r30, r24
    2920:	80 81       	ld	r24, Z
    2922:	91 81       	ldd	r25, Z+1	; 0x01
    2924:	48 17       	cp	r20, r24
    2926:	59 07       	cpc	r21, r25
    2928:	78 f0       	brcs	.+30     	; 0x2948 <uart_transmit_lcd+0x1bc>
		return (uart_head[idx] - uart_tail[idx]);
    292a:	22 0f       	add	r18, r18
    292c:	33 1f       	adc	r19, r19
    292e:	f9 01       	movw	r30, r18
    2930:	e3 52       	subi	r30, 0x23	; 35
    2932:	fe 4c       	sbci	r31, 0xCE	; 206
    2934:	40 81       	ld	r20, Z
    2936:	51 81       	ldd	r21, Z+1	; 0x01
    2938:	27 51       	subi	r18, 0x17	; 23
    293a:	32 4c       	sbci	r19, 0xC2	; 194
    293c:	f9 01       	movw	r30, r18
    293e:	80 81       	ld	r24, Z
    2940:	91 81       	ldd	r25, Z+1	; 0x01
    2942:	48 1b       	sub	r20, r24
    2944:	59 0b       	sbc	r21, r25
    2946:	10 c0       	rjmp	.+32     	; 0x2968 <uart_transmit_lcd+0x1dc>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    2948:	22 0f       	add	r18, r18
    294a:	33 1f       	adc	r19, r19
    294c:	f9 01       	movw	r30, r18
    294e:	e3 52       	subi	r30, 0x23	; 35
    2950:	fe 4c       	sbci	r31, 0xCE	; 206
    2952:	40 81       	ld	r20, Z
    2954:	51 81       	ldd	r21, Z+1	; 0x01
    2956:	27 51       	subi	r18, 0x17	; 23
    2958:	32 4c       	sbci	r19, 0xC2	; 194
    295a:	f9 01       	movw	r30, r18
    295c:	80 81       	ld	r24, Z
    295e:	91 81       	ldd	r25, Z+1	; 0x01
    2960:	40 50       	subi	r20, 0x00	; 0
    2962:	5c 4f       	sbci	r21, 0xFC	; 252
    2964:	48 1b       	sub	r20, r24
    2966:	59 0b       	sbc	r21, r25
				port->DATA = toSend;
				break;
		}				
	}
	uart_txbuffer_disable(port); //implemented this way to prevent periodic stalls that happen when uart_txbuffer isn't disabled quickly enough
	if ((uart_count(port)>0) && (lcd_flow_control == LCD_READY)){ //...something is waiting to go out
    2968:	41 15       	cp	r20, r1
    296a:	51 05       	cpc	r21, r1
    296c:	39 f0       	breq	.+14     	; 0x297c <uart_transmit_lcd+0x1f0>
    296e:	80 91 d6 25 	lds	r24, 0x25D6
    2972:	82 35       	cpi	r24, 0x52	; 82
    2974:	19 f4       	brne	.+6      	; 0x297c <uart_transmit_lcd+0x1f0>
		uart_txbuffer_enable(port);	
    2976:	ce 01       	movw	r24, r28
    2978:	0e 94 ce 10 	call	0x219c	; 0x219c <uart_txbuffer_enable>
	}	
}
    297c:	df 91       	pop	r29
    297e:	cf 91       	pop	r28
    2980:	1f 91       	pop	r17
    2982:	0f 91       	pop	r16
    2984:	ff 90       	pop	r15
    2986:	08 95       	ret

00002988 <uart_receive>:

//==================================
//= RECEPTION ENGINE (ISR BASED)
//==================================

void inline uart_receive(USART_t* port){
    2988:	cf 92       	push	r12
    298a:	df 92       	push	r13
    298c:	ef 92       	push	r14
    298e:	ff 92       	push	r15
    2990:	0f 93       	push	r16
    2992:	1f 93       	push	r17
    2994:	cf 93       	push	r28
    2996:	df 93       	push	r29
    2998:	dc 01       	movw	r26, r24
	uart_itail[idx] = 0;
}

inline uint16_t uart_icount(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_ihead[idx] >= uart_itail[idx]){	
    299a:	0f 2e       	mov	r0, r31
    299c:	f3 ee       	ldi	r31, 0xE3	; 227
    299e:	cf 2e       	mov	r12, r31
    29a0:	fd e3       	ldi	r31, 0x3D	; 61
    29a2:	df 2e       	mov	r13, r31
    29a4:	f0 2d       	mov	r31, r0
    29a6:	07 ed       	ldi	r16, 0xD7	; 215
    29a8:	15 e2       	ldi	r17, 0x25	; 37
	}
}

inline void uart_ienqueue(USART_t* port, uint8_t datain){
	uint8_t idx = port_map(port);
	uart_ibuffer[idx][uart_ihead[idx]] = datain;
    29aa:	0f 2e       	mov	r0, r31
    29ac:	fd ed       	ldi	r31, 0xDD	; 221
    29ae:	ef 2e       	mov	r14, r31
    29b0:	f5 e2       	ldi	r31, 0x25	; 37
    29b2:	ff 2e       	mov	r15, r31
    29b4:	f0 2d       	mov	r31, r0
//= RECEPTION ENGINE (ISR BASED)
//==================================

void inline uart_receive(USART_t* port){
	//keep receiving until data register is empty or incoming queue is full
	while (((port->STATUS & _BV(7)) == B8(10000000)) && (uart_icount(port) < MAX_IBUFFER_LEN)){		
    29b6:	3a c0       	rjmp	.+116    	; 0x2a2c <uart_receive+0xa4>
		uart_ienqueue(port, port->DATA);
    29b8:	4c 91       	ld	r20, X
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    29ba:	2b e0       	ldi	r18, 0x0B	; 11
    29bc:	a0 3b       	cpi	r26, 0xB0	; 176
    29be:	b2 07       	cpc	r27, r18
    29c0:	51 f0       	breq	.+20     	; 0x29d6 <uart_receive+0x4e>
	if (port == &uctrl) {return 1;}
    29c2:	38 e0       	ldi	r19, 0x08	; 8
    29c4:	a0 3a       	cpi	r26, 0xA0	; 160
    29c6:	b3 07       	cpc	r27, r19
    29c8:	41 f0       	breq	.+16     	; 0x29da <uart_receive+0x52>
	if (port == &udata) {return 2;}
    29ca:	88 e0       	ldi	r24, 0x08	; 8
    29cc:	a0 3b       	cpi	r26, 0xB0	; 176
    29ce:	b8 07       	cpc	r27, r24
    29d0:	31 f4       	brne	.+12     	; 0x29de <uart_receive+0x56>
    29d2:	62 e0       	ldi	r22, 0x02	; 2
    29d4:	05 c0       	rjmp	.+10     	; 0x29e0 <uart_receive+0x58>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    29d6:	60 e0       	ldi	r22, 0x00	; 0
    29d8:	03 c0       	rjmp	.+6      	; 0x29e0 <uart_receive+0x58>
	if (port == &uctrl) {return 1;}
    29da:	61 e0       	ldi	r22, 0x01	; 1
    29dc:	01 c0       	rjmp	.+2      	; 0x29e0 <uart_receive+0x58>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    29de:	60 e0       	ldi	r22, 0x00	; 0
	}
}

inline void uart_ienqueue(USART_t* port, uint8_t datain){
	uint8_t idx = port_map(port);
	uart_ibuffer[idx][uart_ihead[idx]] = datain;
    29e0:	70 e0       	ldi	r23, 0x00	; 0
    29e2:	cb 01       	movw	r24, r22
    29e4:	88 0f       	add	r24, r24
    29e6:	99 1f       	adc	r25, r25
    29e8:	f6 01       	movw	r30, r12
    29ea:	e8 0f       	add	r30, r24
    29ec:	f9 1f       	adc	r31, r25
    29ee:	20 81       	ld	r18, Z
    29f0:	31 81       	ldd	r19, Z+1	; 0x01
    29f2:	cb 01       	movw	r24, r22
    29f4:	98 2f       	mov	r25, r24
    29f6:	88 27       	eor	r24, r24
    29f8:	99 0f       	add	r25, r25
    29fa:	99 0f       	add	r25, r25
    29fc:	82 0f       	add	r24, r18
    29fe:	93 1f       	adc	r25, r19
    2a00:	8e 0d       	add	r24, r14
    2a02:	9f 1d       	adc	r25, r15
    2a04:	ec 01       	movw	r28, r24
    2a06:	48 83       	st	Y, r20
	uart_ihead[idx]++;
    2a08:	80 81       	ld	r24, Z
    2a0a:	91 81       	ldd	r25, Z+1	; 0x01
    2a0c:	01 96       	adiw	r24, 0x01	; 1
    2a0e:	80 83       	st	Z, r24
    2a10:	91 83       	std	Z+1, r25	; 0x01
	if (uart_ihead[idx] >= MAX_IBUFFER_LEN){
    2a12:	80 81       	ld	r24, Z
    2a14:	91 81       	ldd	r25, Z+1	; 0x01
    2a16:	d4 e0       	ldi	r29, 0x04	; 4
    2a18:	80 30       	cpi	r24, 0x00	; 0
    2a1a:	9d 07       	cpc	r25, r29
    2a1c:	38 f0       	brcs	.+14     	; 0x2a2c <uart_receive+0xa4>
		uart_ihead[idx] = 0;
    2a1e:	fb 01       	movw	r30, r22
    2a20:	ee 0f       	add	r30, r30
    2a22:	ff 1f       	adc	r31, r31
    2a24:	ec 0d       	add	r30, r12
    2a26:	fd 1d       	adc	r31, r13
    2a28:	10 82       	st	Z, r1
    2a2a:	11 82       	std	Z+1, r1	; 0x01
//= RECEPTION ENGINE (ISR BASED)
//==================================

void inline uart_receive(USART_t* port){
	//keep receiving until data register is empty or incoming queue is full
	while (((port->STATUS & _BV(7)) == B8(10000000)) && (uart_icount(port) < MAX_IBUFFER_LEN)){		
    2a2c:	11 96       	adiw	r26, 0x01	; 1
    2a2e:	8c 91       	ld	r24, X
    2a30:	11 97       	sbiw	r26, 0x01	; 1
    2a32:	88 23       	and	r24, r24
    2a34:	0c f0       	brlt	.+2      	; 0x2a38 <uart_receive+0xb0>
    2a36:	4c c0       	rjmp	.+152    	; 0x2ad0 <uart_receive+0x148>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    2a38:	2b e0       	ldi	r18, 0x0B	; 11
    2a3a:	a0 3b       	cpi	r26, 0xB0	; 176
    2a3c:	b2 07       	cpc	r27, r18
    2a3e:	51 f0       	breq	.+20     	; 0x2a54 <uart_receive+0xcc>
	if (port == &uctrl) {return 1;}
    2a40:	38 e0       	ldi	r19, 0x08	; 8
    2a42:	a0 3a       	cpi	r26, 0xA0	; 160
    2a44:	b3 07       	cpc	r27, r19
    2a46:	41 f0       	breq	.+16     	; 0x2a58 <uart_receive+0xd0>
	if (port == &udata) {return 2;}
    2a48:	88 e0       	ldi	r24, 0x08	; 8
    2a4a:	a0 3b       	cpi	r26, 0xB0	; 176
    2a4c:	b8 07       	cpc	r27, r24
    2a4e:	31 f4       	brne	.+12     	; 0x2a5c <uart_receive+0xd4>
    2a50:	22 e0       	ldi	r18, 0x02	; 2
    2a52:	05 c0       	rjmp	.+10     	; 0x2a5e <uart_receive+0xd6>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    2a54:	20 e0       	ldi	r18, 0x00	; 0
    2a56:	03 c0       	rjmp	.+6      	; 0x2a5e <uart_receive+0xd6>
	if (port == &uctrl) {return 1;}
    2a58:	21 e0       	ldi	r18, 0x01	; 1
    2a5a:	01 c0       	rjmp	.+2      	; 0x2a5e <uart_receive+0xd6>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    2a5c:	20 e0       	ldi	r18, 0x00	; 0
	uart_itail[idx] = 0;
}

inline uint16_t uart_icount(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_ihead[idx] >= uart_itail[idx]){	
    2a5e:	30 e0       	ldi	r19, 0x00	; 0
    2a60:	c9 01       	movw	r24, r18
    2a62:	88 0f       	add	r24, r24
    2a64:	99 1f       	adc	r25, r25
    2a66:	f6 01       	movw	r30, r12
    2a68:	e8 0f       	add	r30, r24
    2a6a:	f9 1f       	adc	r31, r25
    2a6c:	40 81       	ld	r20, Z
    2a6e:	51 81       	ldd	r21, Z+1	; 0x01
    2a70:	f8 01       	movw	r30, r16
    2a72:	e8 0f       	add	r30, r24
    2a74:	f9 1f       	adc	r31, r25
    2a76:	80 81       	ld	r24, Z
    2a78:	91 81       	ldd	r25, Z+1	; 0x01
    2a7a:	48 17       	cp	r20, r24
    2a7c:	59 07       	cpc	r21, r25
    2a7e:	88 f0       	brcs	.+34     	; 0x2aa2 <uart_receive+0x11a>
		return (uart_ihead[idx] - uart_itail[idx]);
    2a80:	22 0f       	add	r18, r18
    2a82:	33 1f       	adc	r19, r19
    2a84:	f6 01       	movw	r30, r12
    2a86:	e2 0f       	add	r30, r18
    2a88:	f3 1f       	adc	r31, r19
    2a8a:	40 81       	ld	r20, Z
    2a8c:	51 81       	ldd	r21, Z+1	; 0x01
    2a8e:	f8 01       	movw	r30, r16
    2a90:	e2 0f       	add	r30, r18
    2a92:	f3 1f       	adc	r31, r19
    2a94:	80 81       	ld	r24, Z
    2a96:	91 81       	ldd	r25, Z+1	; 0x01
    2a98:	ea 01       	movw	r28, r20
    2a9a:	c8 1b       	sub	r28, r24
    2a9c:	d9 0b       	sbc	r29, r25
    2a9e:	ce 01       	movw	r24, r28
    2aa0:	12 c0       	rjmp	.+36     	; 0x2ac6 <uart_receive+0x13e>
	}
	else {
		return ((MAX_IBUFFER_LEN-uart_itail[idx])+uart_ihead[idx]);
    2aa2:	c9 01       	movw	r24, r18
    2aa4:	88 0f       	add	r24, r24
    2aa6:	99 1f       	adc	r25, r25
    2aa8:	f6 01       	movw	r30, r12
    2aaa:	e8 0f       	add	r30, r24
    2aac:	f9 1f       	adc	r31, r25
    2aae:	40 81       	ld	r20, Z
    2ab0:	51 81       	ldd	r21, Z+1	; 0x01
    2ab2:	f8 01       	movw	r30, r16
    2ab4:	e8 0f       	add	r30, r24
    2ab6:	f9 1f       	adc	r31, r25
    2ab8:	20 81       	ld	r18, Z
    2aba:	31 81       	ldd	r19, Z+1	; 0x01
    2abc:	ca 01       	movw	r24, r20
    2abe:	80 50       	subi	r24, 0x00	; 0
    2ac0:	9c 4f       	sbci	r25, 0xFC	; 252
    2ac2:	82 1b       	sub	r24, r18
    2ac4:	93 0b       	sbc	r25, r19
//= RECEPTION ENGINE (ISR BASED)
//==================================

void inline uart_receive(USART_t* port){
	//keep receiving until data register is empty or incoming queue is full
	while (((port->STATUS & _BV(7)) == B8(10000000)) && (uart_icount(port) < MAX_IBUFFER_LEN)){		
    2ac6:	d4 e0       	ldi	r29, 0x04	; 4
    2ac8:	80 30       	cpi	r24, 0x00	; 0
    2aca:	9d 07       	cpc	r25, r29
    2acc:	08 f4       	brcc	.+2      	; 0x2ad0 <uart_receive+0x148>
    2ace:	74 cf       	rjmp	.-280    	; 0x29b8 <uart_receive+0x30>
		uart_ienqueue(port, port->DATA);
	}	
}
    2ad0:	df 91       	pop	r29
    2ad2:	cf 91       	pop	r28
    2ad4:	1f 91       	pop	r17
    2ad6:	0f 91       	pop	r16
    2ad8:	ff 90       	pop	r15
    2ada:	ef 90       	pop	r14
    2adc:	df 90       	pop	r13
    2ade:	cf 90       	pop	r12
    2ae0:	08 95       	ret

00002ae2 <uart_receive_lcd>:

void inline uart_receive_lcd(USART_t* port){
    2ae2:	2f 92       	push	r2
    2ae4:	3f 92       	push	r3
    2ae6:	4f 92       	push	r4
    2ae8:	5f 92       	push	r5
    2aea:	6f 92       	push	r6
    2aec:	7f 92       	push	r7
    2aee:	8f 92       	push	r8
    2af0:	9f 92       	push	r9
    2af2:	bf 92       	push	r11
    2af4:	cf 92       	push	r12
    2af6:	df 92       	push	r13
    2af8:	ef 92       	push	r14
    2afa:	ff 92       	push	r15
    2afc:	0f 93       	push	r16
    2afe:	1f 93       	push	r17
    2b00:	cf 93       	push	r28
    2b02:	df 93       	push	r29
    2b04:	6c 01       	movw	r12, r24
	uart_itail[idx] = 0;
}

inline uint16_t uart_icount(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_ihead[idx] >= uart_itail[idx]){	
    2b06:	0f 2e       	mov	r0, r31
    2b08:	f3 ee       	ldi	r31, 0xE3	; 227
    2b0a:	8f 2e       	mov	r8, r31
    2b0c:	fd e3       	ldi	r31, 0x3D	; 61
    2b0e:	9f 2e       	mov	r9, r31
    2b10:	f0 2d       	mov	r31, r0
    2b12:	0f 2e       	mov	r0, r31
    2b14:	f7 ed       	ldi	r31, 0xD7	; 215
    2b16:	6f 2e       	mov	r6, r31
    2b18:	f5 e2       	ldi	r31, 0x25	; 37
    2b1a:	7f 2e       	mov	r7, r31
    2b1c:	f0 2d       	mov	r31, r0
#ifndef UART_DEBUG
	uint8_t idx = port_map(port);
	
	//if (idx==0){uart_enqueue(&uctrl, datain);} //xxx
	
	uart_buffer[idx][uart_head[idx]] = datain;
    2b1e:	01 ee       	ldi	r16, 0xE1	; 225
    2b20:	11 e3       	ldi	r17, 0x31	; 49
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    2b22:	0f 2e       	mov	r0, r31
    2b24:	f0 eb       	ldi	r31, 0xB0	; 176
    2b26:	ef 2e       	mov	r14, r31
    2b28:	f8 e0       	ldi	r31, 0x08	; 8
    2b2a:	ff 2e       	mov	r15, r31
    2b2c:	f0 2d       	mov	r31, r0
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    2b2e:	cd ee       	ldi	r28, 0xED	; 237
    2b30:	dd e3       	ldi	r29, 0x3D	; 61
		incomingByte = port->DATA;
		uart_enqueue(&udata, incomingByte); //echo to data port
		if (incomingByte == 0x0D){
			switch(lcd_flow_type){				
				case LCD_MACRO:
					uart_enqueue(&udata,"+");uart_enqueue(&udata,lcd_touch_buffer[0]);uart_enqueue(&udata,lcd_touch_buffer[1]);
    2b32:	0f 2e       	mov	r0, r31
    2b34:	fe ec       	ldi	r31, 0xCE	; 206
    2b36:	2f 2e       	mov	r2, r31
    2b38:	f5 e2       	ldi	r31, 0x25	; 37
    2b3a:	3f 2e       	mov	r3, r31
    2b3c:	f0 2d       	mov	r31, r0
	}
}

inline void uart_ienqueue(USART_t* port, uint8_t datain){
	uint8_t idx = port_map(port);
	uart_ibuffer[idx][uart_ihead[idx]] = datain;
    2b3e:	0f 2e       	mov	r0, r31
    2b40:	fd ed       	ldi	r31, 0xDD	; 221
    2b42:	4f 2e       	mov	r4, r31
    2b44:	f5 e2       	ldi	r31, 0x25	; 37
    2b46:	5f 2e       	mov	r5, r31
    2b48:	f0 2d       	mov	r31, r0
}

void inline uart_receive_lcd(USART_t* port){
	uint8_t incomingByte;
	//keep receiving until data register is empty or incoming queue is full
	while (((port->STATUS & _BV(7)) == B8(10000000)) && (uart_icount(port) < MAX_IBUFFER_LEN)){
    2b4a:	19 c2       	rjmp	.+1074   	; 0x2f7e <uart_receive_lcd+0x49c>
		incomingByte = port->DATA;
    2b4c:	d6 01       	movw	r26, r12
    2b4e:	bc 90       	ld	r11, X
#ifndef UART_DEBUG
	uint8_t idx = port_map(port);
	
	//if (idx==0){uart_enqueue(&uctrl, datain);} //xxx
	
	uart_buffer[idx][uart_head[idx]] = datain;
    2b50:	f8 01       	movw	r30, r16
    2b52:	80 81       	ld	r24, Z
    2b54:	91 81       	ldd	r25, Z+1	; 0x01
    2b56:	8d 51       	subi	r24, 0x1D	; 29
    2b58:	96 4c       	sbci	r25, 0xC6	; 198
    2b5a:	dc 01       	movw	r26, r24
    2b5c:	bc 92       	st	X, r11
	uart_head[idx]++;
    2b5e:	80 81       	ld	r24, Z
    2b60:	91 81       	ldd	r25, Z+1	; 0x01
    2b62:	01 96       	adiw	r24, 0x01	; 1
    2b64:	80 83       	st	Z, r24
    2b66:	91 83       	std	Z+1, r25	; 0x01
	if (uart_head[idx] >= MAX_BUFFER_LEN){
    2b68:	80 81       	ld	r24, Z
    2b6a:	91 81       	ldd	r25, Z+1	; 0x01
    2b6c:	b4 e0       	ldi	r27, 0x04	; 4
    2b6e:	80 30       	cpi	r24, 0x00	; 0
    2b70:	9b 07       	cpc	r25, r27
    2b72:	10 f0       	brcs	.+4      	; 0x2b78 <uart_receive_lcd+0x96>
		uart_head[idx] = 0;
    2b74:	10 82       	st	Z, r1
    2b76:	11 82       	std	Z+1, r1	; 0x01
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    2b78:	f7 01       	movw	r30, r14
    2b7a:	81 81       	ldd	r24, Z+1	; 0x01
    2b7c:	85 fd       	sbrc	r24, 5
    2b7e:	1a c0       	rjmp	.+52     	; 0x2bb4 <uart_receive_lcd+0xd2>
    2b80:	32 c0       	rjmp	.+100    	; 0x2be6 <uart_receive_lcd+0x104>
}

inline uint8_t uart_dequeue(USART_t* port){
	uint8_t idx = port_map(port);
	uint16_t oldtail;
	oldtail = uart_tail[idx];
    2b82:	e8 81       	ld	r30, Y
    2b84:	f9 81       	ldd	r31, Y+1	; 0x01
	uart_tail[idx]++;
    2b86:	88 81       	ld	r24, Y
    2b88:	99 81       	ldd	r25, Y+1	; 0x01
    2b8a:	01 96       	adiw	r24, 0x01	; 1
    2b8c:	88 83       	st	Y, r24
    2b8e:	99 83       	std	Y+1, r25	; 0x01
	if (uart_tail[idx] >= MAX_BUFFER_LEN){
    2b90:	88 81       	ld	r24, Y
    2b92:	99 81       	ldd	r25, Y+1	; 0x01
    2b94:	24 e0       	ldi	r18, 0x04	; 4
    2b96:	80 30       	cpi	r24, 0x00	; 0
    2b98:	92 07       	cpc	r25, r18
    2b9a:	10 f0       	brcs	.+4      	; 0x2ba0 <uart_receive_lcd+0xbe>
		uart_tail[idx] = 0;
    2b9c:	18 82       	st	Y, r1
    2b9e:	19 82       	std	Y+1, r1	; 0x01
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    2ba0:	ed 51       	subi	r30, 0x1D	; 29
    2ba2:	f6 4c       	sbci	r31, 0xC6	; 198
    2ba4:	80 81       	ld	r24, Z
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
    2ba6:	d7 01       	movw	r26, r14
    2ba8:	8c 93       	st	X, r24
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    2baa:	11 96       	adiw	r26, 0x01	; 1
    2bac:	8c 91       	ld	r24, X
    2bae:	11 97       	sbiw	r26, 0x01	; 1
    2bb0:	85 ff       	sbrs	r24, 5
    2bb2:	19 c0       	rjmp	.+50     	; 0x2be6 <uart_receive_lcd+0x104>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    2bb4:	f8 01       	movw	r30, r16
    2bb6:	80 81       	ld	r24, Z
    2bb8:	91 81       	ldd	r25, Z+1	; 0x01
    2bba:	28 81       	ld	r18, Y
    2bbc:	39 81       	ldd	r19, Y+1	; 0x01
    2bbe:	82 17       	cp	r24, r18
    2bc0:	93 07       	cpc	r25, r19
    2bc2:	38 f0       	brcs	.+14     	; 0x2bd2 <uart_receive_lcd+0xf0>
		return (uart_head[idx] - uart_tail[idx]);
    2bc4:	80 81       	ld	r24, Z
    2bc6:	91 81       	ldd	r25, Z+1	; 0x01
    2bc8:	28 81       	ld	r18, Y
    2bca:	39 81       	ldd	r19, Y+1	; 0x01
    2bcc:	82 1b       	sub	r24, r18
    2bce:	93 0b       	sbc	r25, r19
    2bd0:	08 c0       	rjmp	.+16     	; 0x2be2 <uart_receive_lcd+0x100>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    2bd2:	80 81       	ld	r24, Z
    2bd4:	91 81       	ldd	r25, Z+1	; 0x01
    2bd6:	28 81       	ld	r18, Y
    2bd8:	39 81       	ldd	r19, Y+1	; 0x01
    2bda:	80 50       	subi	r24, 0x00	; 0
    2bdc:	9c 4f       	sbci	r25, 0xFC	; 252
    2bde:	82 1b       	sub	r24, r18
    2be0:	93 0b       	sbc	r25, r19
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    2be2:	00 97       	sbiw	r24, 0x00	; 0
    2be4:	71 f6       	brne	.-100    	; 0x2b82 <uart_receive_lcd+0xa0>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    2be6:	f8 01       	movw	r30, r16
    2be8:	80 81       	ld	r24, Z
    2bea:	91 81       	ldd	r25, Z+1	; 0x01
    2bec:	28 81       	ld	r18, Y
    2bee:	39 81       	ldd	r19, Y+1	; 0x01
    2bf0:	82 17       	cp	r24, r18
    2bf2:	93 07       	cpc	r25, r19
    2bf4:	38 f0       	brcs	.+14     	; 0x2c04 <uart_receive_lcd+0x122>
		return (uart_head[idx] - uart_tail[idx]);
    2bf6:	80 81       	ld	r24, Z
    2bf8:	91 81       	ldd	r25, Z+1	; 0x01
    2bfa:	28 81       	ld	r18, Y
    2bfc:	39 81       	ldd	r19, Y+1	; 0x01
    2bfe:	82 1b       	sub	r24, r18
    2c00:	93 0b       	sbc	r25, r19
    2c02:	08 c0       	rjmp	.+16     	; 0x2c14 <uart_receive_lcd+0x132>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    2c04:	80 81       	ld	r24, Z
    2c06:	91 81       	ldd	r25, Z+1	; 0x01
    2c08:	28 81       	ld	r18, Y
    2c0a:	39 81       	ldd	r19, Y+1	; 0x01
    2c0c:	80 50       	subi	r24, 0x00	; 0
    2c0e:	9c 4f       	sbci	r25, 0xFC	; 252
    2c10:	82 1b       	sub	r24, r18
    2c12:	93 0b       	sbc	r25, r19
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
	}
	//disable the tx outgoing hardware buffer ready interrupt if we have nothing more to put in it.
	if(uart_count(port)>0) uart_txbuffer_enable(port);
    2c14:	00 97       	sbiw	r24, 0x00	; 0
    2c16:	21 f0       	breq	.+8      	; 0x2c20 <uart_receive_lcd+0x13e>
    2c18:	c7 01       	movw	r24, r14
    2c1a:	0e 94 ce 10 	call	0x219c	; 0x219c <uart_txbuffer_enable>
    2c1e:	03 c0       	rjmp	.+6      	; 0x2c26 <uart_receive_lcd+0x144>
	else uart_txbuffer_disable(port);
    2c20:	c7 01       	movw	r24, r14
    2c22:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <uart_txbuffer_disable>
	uint8_t incomingByte;
	//keep receiving until data register is empty or incoming queue is full
	while (((port->STATUS & _BV(7)) == B8(10000000)) && (uart_icount(port) < MAX_IBUFFER_LEN)){
		incomingByte = port->DATA;
		uart_enqueue(&udata, incomingByte); //echo to data port
		if (incomingByte == 0x0D){
    2c26:	bd e0       	ldi	r27, 0x0D	; 13
    2c28:	bb 16       	cp	r11, r27
    2c2a:	09 f0       	breq	.+2      	; 0x2c2e <uart_receive_lcd+0x14c>
    2c2c:	6e c1       	rjmp	.+732    	; 0x2f0a <uart_receive_lcd+0x428>
			switch(lcd_flow_type){				
    2c2e:	80 91 d5 25 	lds	r24, 0x25D5
    2c32:	8e 3f       	cpi	r24, 0xFE	; 254
    2c34:	09 f0       	breq	.+2      	; 0x2c38 <uart_receive_lcd+0x156>
    2c36:	66 c1       	rjmp	.+716    	; 0x2f04 <uart_receive_lcd+0x422>
#ifndef UART_DEBUG
	uint8_t idx = port_map(port);
	
	//if (idx==0){uart_enqueue(&uctrl, datain);} //xxx
	
	uart_buffer[idx][uart_head[idx]] = datain;
    2c38:	f8 01       	movw	r30, r16
    2c3a:	80 81       	ld	r24, Z
    2c3c:	91 81       	ldd	r25, Z+1	; 0x01
    2c3e:	8d 51       	subi	r24, 0x1D	; 29
    2c40:	96 4c       	sbci	r25, 0xC6	; 198
    2c42:	e4 e4       	ldi	r30, 0x44	; 68
    2c44:	f1 e2       	ldi	r31, 0x21	; 33
    2c46:	dc 01       	movw	r26, r24
    2c48:	ec 93       	st	X, r30
	uart_head[idx]++;
    2c4a:	d8 01       	movw	r26, r16
    2c4c:	8d 91       	ld	r24, X+
    2c4e:	9c 91       	ld	r25, X
    2c50:	11 97       	sbiw	r26, 0x01	; 1
    2c52:	01 96       	adiw	r24, 0x01	; 1
    2c54:	8d 93       	st	X+, r24
    2c56:	9c 93       	st	X, r25
    2c58:	11 97       	sbiw	r26, 0x01	; 1
	if (uart_head[idx] >= MAX_BUFFER_LEN){
    2c5a:	8d 91       	ld	r24, X+
    2c5c:	9c 91       	ld	r25, X
    2c5e:	11 97       	sbiw	r26, 0x01	; 1
    2c60:	b4 e0       	ldi	r27, 0x04	; 4
    2c62:	80 30       	cpi	r24, 0x00	; 0
    2c64:	9b 07       	cpc	r25, r27
    2c66:	18 f0       	brcs	.+6      	; 0x2c6e <uart_receive_lcd+0x18c>
		uart_head[idx] = 0;
    2c68:	f8 01       	movw	r30, r16
    2c6a:	10 82       	st	Z, r1
    2c6c:	11 82       	std	Z+1, r1	; 0x01
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    2c6e:	d7 01       	movw	r26, r14
    2c70:	11 96       	adiw	r26, 0x01	; 1
    2c72:	8c 91       	ld	r24, X
    2c74:	11 97       	sbiw	r26, 0x01	; 1
    2c76:	85 fd       	sbrc	r24, 5
    2c78:	18 c0       	rjmp	.+48     	; 0x2caa <uart_receive_lcd+0x1c8>
    2c7a:	33 c0       	rjmp	.+102    	; 0x2ce2 <uart_receive_lcd+0x200>
}

inline uint8_t uart_dequeue(USART_t* port){
	uint8_t idx = port_map(port);
	uint16_t oldtail;
	oldtail = uart_tail[idx];
    2c7c:	e8 81       	ld	r30, Y
    2c7e:	f9 81       	ldd	r31, Y+1	; 0x01
	uart_tail[idx]++;
    2c80:	88 81       	ld	r24, Y
    2c82:	99 81       	ldd	r25, Y+1	; 0x01
    2c84:	01 96       	adiw	r24, 0x01	; 1
    2c86:	88 83       	st	Y, r24
    2c88:	99 83       	std	Y+1, r25	; 0x01
	if (uart_tail[idx] >= MAX_BUFFER_LEN){
    2c8a:	88 81       	ld	r24, Y
    2c8c:	99 81       	ldd	r25, Y+1	; 0x01
    2c8e:	b4 e0       	ldi	r27, 0x04	; 4
    2c90:	80 30       	cpi	r24, 0x00	; 0
    2c92:	9b 07       	cpc	r25, r27
    2c94:	10 f0       	brcs	.+4      	; 0x2c9a <uart_receive_lcd+0x1b8>
		uart_tail[idx] = 0;
    2c96:	18 82       	st	Y, r1
    2c98:	19 82       	std	Y+1, r1	; 0x01
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    2c9a:	ed 51       	subi	r30, 0x1D	; 29
    2c9c:	f6 4c       	sbci	r31, 0xC6	; 198
    2c9e:	80 81       	ld	r24, Z
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
    2ca0:	f7 01       	movw	r30, r14
    2ca2:	80 83       	st	Z, r24
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    2ca4:	81 81       	ldd	r24, Z+1	; 0x01
    2ca6:	85 ff       	sbrs	r24, 5
    2ca8:	1c c0       	rjmp	.+56     	; 0x2ce2 <uart_receive_lcd+0x200>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    2caa:	d8 01       	movw	r26, r16
    2cac:	8d 91       	ld	r24, X+
    2cae:	9c 91       	ld	r25, X
    2cb0:	11 97       	sbiw	r26, 0x01	; 1
    2cb2:	28 81       	ld	r18, Y
    2cb4:	39 81       	ldd	r19, Y+1	; 0x01
    2cb6:	82 17       	cp	r24, r18
    2cb8:	93 07       	cpc	r25, r19
    2cba:	40 f0       	brcs	.+16     	; 0x2ccc <uart_receive_lcd+0x1ea>
		return (uart_head[idx] - uart_tail[idx]);
    2cbc:	8d 91       	ld	r24, X+
    2cbe:	9c 91       	ld	r25, X
    2cc0:	11 97       	sbiw	r26, 0x01	; 1
    2cc2:	28 81       	ld	r18, Y
    2cc4:	39 81       	ldd	r19, Y+1	; 0x01
    2cc6:	82 1b       	sub	r24, r18
    2cc8:	93 0b       	sbc	r25, r19
    2cca:	09 c0       	rjmp	.+18     	; 0x2cde <uart_receive_lcd+0x1fc>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    2ccc:	f8 01       	movw	r30, r16
    2cce:	80 81       	ld	r24, Z
    2cd0:	91 81       	ldd	r25, Z+1	; 0x01
    2cd2:	28 81       	ld	r18, Y
    2cd4:	39 81       	ldd	r19, Y+1	; 0x01
    2cd6:	80 50       	subi	r24, 0x00	; 0
    2cd8:	9c 4f       	sbci	r25, 0xFC	; 252
    2cda:	82 1b       	sub	r24, r18
    2cdc:	93 0b       	sbc	r25, r19
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    2cde:	00 97       	sbiw	r24, 0x00	; 0
    2ce0:	69 f6       	brne	.-102    	; 0x2c7c <uart_receive_lcd+0x19a>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    2ce2:	d8 01       	movw	r26, r16
    2ce4:	8d 91       	ld	r24, X+
    2ce6:	9c 91       	ld	r25, X
    2ce8:	11 97       	sbiw	r26, 0x01	; 1
    2cea:	28 81       	ld	r18, Y
    2cec:	39 81       	ldd	r19, Y+1	; 0x01
    2cee:	82 17       	cp	r24, r18
    2cf0:	93 07       	cpc	r25, r19
    2cf2:	40 f0       	brcs	.+16     	; 0x2d04 <uart_receive_lcd+0x222>
		return (uart_head[idx] - uart_tail[idx]);
    2cf4:	8d 91       	ld	r24, X+
    2cf6:	9c 91       	ld	r25, X
    2cf8:	11 97       	sbiw	r26, 0x01	; 1
    2cfa:	28 81       	ld	r18, Y
    2cfc:	39 81       	ldd	r19, Y+1	; 0x01
    2cfe:	82 1b       	sub	r24, r18
    2d00:	93 0b       	sbc	r25, r19
    2d02:	09 c0       	rjmp	.+18     	; 0x2d16 <uart_receive_lcd+0x234>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    2d04:	f8 01       	movw	r30, r16
    2d06:	80 81       	ld	r24, Z
    2d08:	91 81       	ldd	r25, Z+1	; 0x01
    2d0a:	28 81       	ld	r18, Y
    2d0c:	39 81       	ldd	r19, Y+1	; 0x01
    2d0e:	80 50       	subi	r24, 0x00	; 0
    2d10:	9c 4f       	sbci	r25, 0xFC	; 252
    2d12:	82 1b       	sub	r24, r18
    2d14:	93 0b       	sbc	r25, r19
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
	}
	//disable the tx outgoing hardware buffer ready interrupt if we have nothing more to put in it.
	if(uart_count(port)>0) uart_txbuffer_enable(port);
    2d16:	00 97       	sbiw	r24, 0x00	; 0
    2d18:	21 f0       	breq	.+8      	; 0x2d22 <uart_receive_lcd+0x240>
    2d1a:	c7 01       	movw	r24, r14
    2d1c:	0e 94 ce 10 	call	0x219c	; 0x219c <uart_txbuffer_enable>
    2d20:	03 c0       	rjmp	.+6      	; 0x2d28 <uart_receive_lcd+0x246>
	else uart_txbuffer_disable(port);
    2d22:	c7 01       	movw	r24, r14
    2d24:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <uart_txbuffer_disable>
		incomingByte = port->DATA;
		uart_enqueue(&udata, incomingByte); //echo to data port
		if (incomingByte == 0x0D){
			switch(lcd_flow_type){				
				case LCD_MACRO:
					uart_enqueue(&udata,"+");uart_enqueue(&udata,lcd_touch_buffer[0]);uart_enqueue(&udata,lcd_touch_buffer[1]);
    2d28:	d1 01       	movw	r26, r2
    2d2a:	2c 91       	ld	r18, X
#ifndef UART_DEBUG
	uint8_t idx = port_map(port);
	
	//if (idx==0){uart_enqueue(&uctrl, datain);} //xxx
	
	uart_buffer[idx][uart_head[idx]] = datain;
    2d2c:	f8 01       	movw	r30, r16
    2d2e:	80 81       	ld	r24, Z
    2d30:	91 81       	ldd	r25, Z+1	; 0x01
    2d32:	8d 51       	subi	r24, 0x1D	; 29
    2d34:	96 4c       	sbci	r25, 0xC6	; 198
    2d36:	dc 01       	movw	r26, r24
    2d38:	2c 93       	st	X, r18
	uart_head[idx]++;
    2d3a:	80 81       	ld	r24, Z
    2d3c:	91 81       	ldd	r25, Z+1	; 0x01
    2d3e:	01 96       	adiw	r24, 0x01	; 1
    2d40:	80 83       	st	Z, r24
    2d42:	91 83       	std	Z+1, r25	; 0x01
	if (uart_head[idx] >= MAX_BUFFER_LEN){
    2d44:	80 81       	ld	r24, Z
    2d46:	91 81       	ldd	r25, Z+1	; 0x01
    2d48:	b4 e0       	ldi	r27, 0x04	; 4
    2d4a:	80 30       	cpi	r24, 0x00	; 0
    2d4c:	9b 07       	cpc	r25, r27
    2d4e:	10 f0       	brcs	.+4      	; 0x2d54 <uart_receive_lcd+0x272>
		uart_head[idx] = 0;
    2d50:	10 82       	st	Z, r1
    2d52:	11 82       	std	Z+1, r1	; 0x01
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    2d54:	f7 01       	movw	r30, r14
    2d56:	81 81       	ldd	r24, Z+1	; 0x01
    2d58:	85 fd       	sbrc	r24, 5
    2d5a:	1a c0       	rjmp	.+52     	; 0x2d90 <uart_receive_lcd+0x2ae>
    2d5c:	32 c0       	rjmp	.+100    	; 0x2dc2 <uart_receive_lcd+0x2e0>
}

inline uint8_t uart_dequeue(USART_t* port){
	uint8_t idx = port_map(port);
	uint16_t oldtail;
	oldtail = uart_tail[idx];
    2d5e:	e8 81       	ld	r30, Y
    2d60:	f9 81       	ldd	r31, Y+1	; 0x01
	uart_tail[idx]++;
    2d62:	88 81       	ld	r24, Y
    2d64:	99 81       	ldd	r25, Y+1	; 0x01
    2d66:	01 96       	adiw	r24, 0x01	; 1
    2d68:	88 83       	st	Y, r24
    2d6a:	99 83       	std	Y+1, r25	; 0x01
	if (uart_tail[idx] >= MAX_BUFFER_LEN){
    2d6c:	88 81       	ld	r24, Y
    2d6e:	99 81       	ldd	r25, Y+1	; 0x01
    2d70:	24 e0       	ldi	r18, 0x04	; 4
    2d72:	80 30       	cpi	r24, 0x00	; 0
    2d74:	92 07       	cpc	r25, r18
    2d76:	10 f0       	brcs	.+4      	; 0x2d7c <uart_receive_lcd+0x29a>
		uart_tail[idx] = 0;
    2d78:	18 82       	st	Y, r1
    2d7a:	19 82       	std	Y+1, r1	; 0x01
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    2d7c:	ed 51       	subi	r30, 0x1D	; 29
    2d7e:	f6 4c       	sbci	r31, 0xC6	; 198
    2d80:	80 81       	ld	r24, Z
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
    2d82:	d7 01       	movw	r26, r14
    2d84:	8c 93       	st	X, r24
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    2d86:	11 96       	adiw	r26, 0x01	; 1
    2d88:	8c 91       	ld	r24, X
    2d8a:	11 97       	sbiw	r26, 0x01	; 1
    2d8c:	85 ff       	sbrs	r24, 5
    2d8e:	19 c0       	rjmp	.+50     	; 0x2dc2 <uart_receive_lcd+0x2e0>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    2d90:	f8 01       	movw	r30, r16
    2d92:	80 81       	ld	r24, Z
    2d94:	91 81       	ldd	r25, Z+1	; 0x01
    2d96:	28 81       	ld	r18, Y
    2d98:	39 81       	ldd	r19, Y+1	; 0x01
    2d9a:	82 17       	cp	r24, r18
    2d9c:	93 07       	cpc	r25, r19
    2d9e:	38 f0       	brcs	.+14     	; 0x2dae <uart_receive_lcd+0x2cc>
		return (uart_head[idx] - uart_tail[idx]);
    2da0:	80 81       	ld	r24, Z
    2da2:	91 81       	ldd	r25, Z+1	; 0x01
    2da4:	28 81       	ld	r18, Y
    2da6:	39 81       	ldd	r19, Y+1	; 0x01
    2da8:	82 1b       	sub	r24, r18
    2daa:	93 0b       	sbc	r25, r19
    2dac:	08 c0       	rjmp	.+16     	; 0x2dbe <uart_receive_lcd+0x2dc>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    2dae:	80 81       	ld	r24, Z
    2db0:	91 81       	ldd	r25, Z+1	; 0x01
    2db2:	28 81       	ld	r18, Y
    2db4:	39 81       	ldd	r19, Y+1	; 0x01
    2db6:	80 50       	subi	r24, 0x00	; 0
    2db8:	9c 4f       	sbci	r25, 0xFC	; 252
    2dba:	82 1b       	sub	r24, r18
    2dbc:	93 0b       	sbc	r25, r19
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    2dbe:	00 97       	sbiw	r24, 0x00	; 0
    2dc0:	71 f6       	brne	.-100    	; 0x2d5e <uart_receive_lcd+0x27c>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    2dc2:	f8 01       	movw	r30, r16
    2dc4:	80 81       	ld	r24, Z
    2dc6:	91 81       	ldd	r25, Z+1	; 0x01
    2dc8:	28 81       	ld	r18, Y
    2dca:	39 81       	ldd	r19, Y+1	; 0x01
    2dcc:	82 17       	cp	r24, r18
    2dce:	93 07       	cpc	r25, r19
    2dd0:	38 f0       	brcs	.+14     	; 0x2de0 <uart_receive_lcd+0x2fe>
		return (uart_head[idx] - uart_tail[idx]);
    2dd2:	80 81       	ld	r24, Z
    2dd4:	91 81       	ldd	r25, Z+1	; 0x01
    2dd6:	28 81       	ld	r18, Y
    2dd8:	39 81       	ldd	r19, Y+1	; 0x01
    2dda:	82 1b       	sub	r24, r18
    2ddc:	93 0b       	sbc	r25, r19
    2dde:	08 c0       	rjmp	.+16     	; 0x2df0 <uart_receive_lcd+0x30e>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    2de0:	80 81       	ld	r24, Z
    2de2:	91 81       	ldd	r25, Z+1	; 0x01
    2de4:	28 81       	ld	r18, Y
    2de6:	39 81       	ldd	r19, Y+1	; 0x01
    2de8:	80 50       	subi	r24, 0x00	; 0
    2dea:	9c 4f       	sbci	r25, 0xFC	; 252
    2dec:	82 1b       	sub	r24, r18
    2dee:	93 0b       	sbc	r25, r19
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
	}
	//disable the tx outgoing hardware buffer ready interrupt if we have nothing more to put in it.
	if(uart_count(port)>0) uart_txbuffer_enable(port);
    2df0:	00 97       	sbiw	r24, 0x00	; 0
    2df2:	21 f0       	breq	.+8      	; 0x2dfc <uart_receive_lcd+0x31a>
    2df4:	c7 01       	movw	r24, r14
    2df6:	0e 94 ce 10 	call	0x219c	; 0x219c <uart_txbuffer_enable>
    2dfa:	03 c0       	rjmp	.+6      	; 0x2e02 <uart_receive_lcd+0x320>
	else uart_txbuffer_disable(port);
    2dfc:	c7 01       	movw	r24, r14
    2dfe:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <uart_txbuffer_disable>
		incomingByte = port->DATA;
		uart_enqueue(&udata, incomingByte); //echo to data port
		if (incomingByte == 0x0D){
			switch(lcd_flow_type){				
				case LCD_MACRO:
					uart_enqueue(&udata,"+");uart_enqueue(&udata,lcd_touch_buffer[0]);uart_enqueue(&udata,lcd_touch_buffer[1]);
    2e02:	ef ec       	ldi	r30, 0xCF	; 207
    2e04:	f5 e2       	ldi	r31, 0x25	; 37
    2e06:	20 81       	ld	r18, Z
#ifndef UART_DEBUG
	uint8_t idx = port_map(port);
	
	//if (idx==0){uart_enqueue(&uctrl, datain);} //xxx
	
	uart_buffer[idx][uart_head[idx]] = datain;
    2e08:	d8 01       	movw	r26, r16
    2e0a:	8d 91       	ld	r24, X+
    2e0c:	9c 91       	ld	r25, X
    2e0e:	11 97       	sbiw	r26, 0x01	; 1
    2e10:	8d 51       	subi	r24, 0x1D	; 29
    2e12:	96 4c       	sbci	r25, 0xC6	; 198
    2e14:	fc 01       	movw	r30, r24
    2e16:	20 83       	st	Z, r18
	uart_head[idx]++;
    2e18:	8d 91       	ld	r24, X+
    2e1a:	9c 91       	ld	r25, X
    2e1c:	11 97       	sbiw	r26, 0x01	; 1
    2e1e:	01 96       	adiw	r24, 0x01	; 1
    2e20:	8d 93       	st	X+, r24
    2e22:	9c 93       	st	X, r25
    2e24:	11 97       	sbiw	r26, 0x01	; 1
	if (uart_head[idx] >= MAX_BUFFER_LEN){
    2e26:	8d 91       	ld	r24, X+
    2e28:	9c 91       	ld	r25, X
    2e2a:	11 97       	sbiw	r26, 0x01	; 1
    2e2c:	f4 e0       	ldi	r31, 0x04	; 4
    2e2e:	80 30       	cpi	r24, 0x00	; 0
    2e30:	9f 07       	cpc	r25, r31
    2e32:	18 f0       	brcs	.+6      	; 0x2e3a <uart_receive_lcd+0x358>
		uart_head[idx] = 0;
    2e34:	1d 92       	st	X+, r1
    2e36:	1c 92       	st	X, r1
    2e38:	11 97       	sbiw	r26, 0x01	; 1
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    2e3a:	d7 01       	movw	r26, r14
    2e3c:	11 96       	adiw	r26, 0x01	; 1
    2e3e:	8c 91       	ld	r24, X
    2e40:	11 97       	sbiw	r26, 0x01	; 1
    2e42:	85 fd       	sbrc	r24, 5
    2e44:	18 c0       	rjmp	.+48     	; 0x2e76 <uart_receive_lcd+0x394>
    2e46:	33 c0       	rjmp	.+102    	; 0x2eae <uart_receive_lcd+0x3cc>
}

inline uint8_t uart_dequeue(USART_t* port){
	uint8_t idx = port_map(port);
	uint16_t oldtail;
	oldtail = uart_tail[idx];
    2e48:	e8 81       	ld	r30, Y
    2e4a:	f9 81       	ldd	r31, Y+1	; 0x01
	uart_tail[idx]++;
    2e4c:	88 81       	ld	r24, Y
    2e4e:	99 81       	ldd	r25, Y+1	; 0x01
    2e50:	01 96       	adiw	r24, 0x01	; 1
    2e52:	88 83       	st	Y, r24
    2e54:	99 83       	std	Y+1, r25	; 0x01
	if (uart_tail[idx] >= MAX_BUFFER_LEN){
    2e56:	88 81       	ld	r24, Y
    2e58:	99 81       	ldd	r25, Y+1	; 0x01
    2e5a:	b4 e0       	ldi	r27, 0x04	; 4
    2e5c:	80 30       	cpi	r24, 0x00	; 0
    2e5e:	9b 07       	cpc	r25, r27
    2e60:	10 f0       	brcs	.+4      	; 0x2e66 <uart_receive_lcd+0x384>
		uart_tail[idx] = 0;
    2e62:	18 82       	st	Y, r1
    2e64:	19 82       	std	Y+1, r1	; 0x01
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    2e66:	ed 51       	subi	r30, 0x1D	; 29
    2e68:	f6 4c       	sbci	r31, 0xC6	; 198
    2e6a:	80 81       	ld	r24, Z
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
    2e6c:	f7 01       	movw	r30, r14
    2e6e:	80 83       	st	Z, r24
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    2e70:	81 81       	ldd	r24, Z+1	; 0x01
    2e72:	85 ff       	sbrs	r24, 5
    2e74:	1c c0       	rjmp	.+56     	; 0x2eae <uart_receive_lcd+0x3cc>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    2e76:	d8 01       	movw	r26, r16
    2e78:	8d 91       	ld	r24, X+
    2e7a:	9c 91       	ld	r25, X
    2e7c:	11 97       	sbiw	r26, 0x01	; 1
    2e7e:	28 81       	ld	r18, Y
    2e80:	39 81       	ldd	r19, Y+1	; 0x01
    2e82:	82 17       	cp	r24, r18
    2e84:	93 07       	cpc	r25, r19
    2e86:	40 f0       	brcs	.+16     	; 0x2e98 <uart_receive_lcd+0x3b6>
		return (uart_head[idx] - uart_tail[idx]);
    2e88:	8d 91       	ld	r24, X+
    2e8a:	9c 91       	ld	r25, X
    2e8c:	11 97       	sbiw	r26, 0x01	; 1
    2e8e:	28 81       	ld	r18, Y
    2e90:	39 81       	ldd	r19, Y+1	; 0x01
    2e92:	82 1b       	sub	r24, r18
    2e94:	93 0b       	sbc	r25, r19
    2e96:	09 c0       	rjmp	.+18     	; 0x2eaa <uart_receive_lcd+0x3c8>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    2e98:	f8 01       	movw	r30, r16
    2e9a:	80 81       	ld	r24, Z
    2e9c:	91 81       	ldd	r25, Z+1	; 0x01
    2e9e:	28 81       	ld	r18, Y
    2ea0:	39 81       	ldd	r19, Y+1	; 0x01
    2ea2:	80 50       	subi	r24, 0x00	; 0
    2ea4:	9c 4f       	sbci	r25, 0xFC	; 252
    2ea6:	82 1b       	sub	r24, r18
    2ea8:	93 0b       	sbc	r25, r19
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    2eaa:	00 97       	sbiw	r24, 0x00	; 0
    2eac:	69 f6       	brne	.-102    	; 0x2e48 <uart_receive_lcd+0x366>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    2eae:	d8 01       	movw	r26, r16
    2eb0:	8d 91       	ld	r24, X+
    2eb2:	9c 91       	ld	r25, X
    2eb4:	11 97       	sbiw	r26, 0x01	; 1
    2eb6:	28 81       	ld	r18, Y
    2eb8:	39 81       	ldd	r19, Y+1	; 0x01
    2eba:	82 17       	cp	r24, r18
    2ebc:	93 07       	cpc	r25, r19
    2ebe:	40 f0       	brcs	.+16     	; 0x2ed0 <uart_receive_lcd+0x3ee>
		return (uart_head[idx] - uart_tail[idx]);
    2ec0:	8d 91       	ld	r24, X+
    2ec2:	9c 91       	ld	r25, X
    2ec4:	11 97       	sbiw	r26, 0x01	; 1
    2ec6:	28 81       	ld	r18, Y
    2ec8:	39 81       	ldd	r19, Y+1	; 0x01
    2eca:	82 1b       	sub	r24, r18
    2ecc:	93 0b       	sbc	r25, r19
    2ece:	09 c0       	rjmp	.+18     	; 0x2ee2 <uart_receive_lcd+0x400>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    2ed0:	f8 01       	movw	r30, r16
    2ed2:	80 81       	ld	r24, Z
    2ed4:	91 81       	ldd	r25, Z+1	; 0x01
    2ed6:	28 81       	ld	r18, Y
    2ed8:	39 81       	ldd	r19, Y+1	; 0x01
    2eda:	80 50       	subi	r24, 0x00	; 0
    2edc:	9c 4f       	sbci	r25, 0xFC	; 252
    2ede:	82 1b       	sub	r24, r18
    2ee0:	93 0b       	sbc	r25, r19
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
	}
	//disable the tx outgoing hardware buffer ready interrupt if we have nothing more to put in it.
	if(uart_count(port)>0) uart_txbuffer_enable(port);
    2ee2:	00 97       	sbiw	r24, 0x00	; 0
    2ee4:	21 f0       	breq	.+8      	; 0x2eee <uart_receive_lcd+0x40c>
    2ee6:	c7 01       	movw	r24, r14
    2ee8:	0e 94 ce 10 	call	0x219c	; 0x219c <uart_txbuffer_enable>
    2eec:	03 c0       	rjmp	.+6      	; 0x2ef4 <uart_receive_lcd+0x412>
	else uart_txbuffer_disable(port);
    2eee:	c7 01       	movw	r24, r14
    2ef0:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <uart_txbuffer_disable>
		uart_enqueue(&udata, incomingByte); //echo to data port
		if (incomingByte == 0x0D){
			switch(lcd_flow_type){				
				case LCD_MACRO:
					uart_enqueue(&udata,"+");uart_enqueue(&udata,lcd_touch_buffer[0]);uart_enqueue(&udata,lcd_touch_buffer[1]);
					if (lcd_end_macro()){ //look for '~ macro terminator sequence
    2ef4:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <lcd_end_macro>
    2ef8:	88 23       	and	r24, r24
    2efa:	39 f0       	breq	.+14     	; 0x2f0a <uart_receive_lcd+0x428>
						lcd_flow_control = LCD_DONE_MACRO;
    2efc:	80 e5       	ldi	r24, 0x50	; 80
    2efe:	80 93 d6 25 	sts	0x25D6, r24
    2f02:	03 c0       	rjmp	.+6      	; 0x2f0a <uart_receive_lcd+0x428>
					}
					break;
				default:
				case LCD_COMMAND:
					lcd_flow_control = LCD_DONE_COMMAND;
    2f04:	8f e4       	ldi	r24, 0x4F	; 79
    2f06:	80 93 d6 25 	sts	0x25D6, r24
					break;
			}					
		}
		lcd_set_touch(incomingByte); //write to touch-command listener
    2f0a:	8b 2d       	mov	r24, r11
    2f0c:	0e 94 fd 07 	call	0xffa	; 0xffa <lcd_set_touch>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    2f10:	f0 eb       	ldi	r31, 0xB0	; 176
    2f12:	cf 16       	cp	r12, r31
    2f14:	fb e0       	ldi	r31, 0x0B	; 11
    2f16:	df 06       	cpc	r13, r31
    2f18:	61 f0       	breq	.+24     	; 0x2f32 <uart_receive_lcd+0x450>
	if (port == &uctrl) {return 1;}
    2f1a:	20 ea       	ldi	r18, 0xA0	; 160
    2f1c:	c2 16       	cp	r12, r18
    2f1e:	28 e0       	ldi	r18, 0x08	; 8
    2f20:	d2 06       	cpc	r13, r18
    2f22:	49 f0       	breq	.+18     	; 0x2f36 <uart_receive_lcd+0x454>
	if (port == &udata) {return 2;}
    2f24:	30 eb       	ldi	r19, 0xB0	; 176
    2f26:	c3 16       	cp	r12, r19
    2f28:	38 e0       	ldi	r19, 0x08	; 8
    2f2a:	d3 06       	cpc	r13, r19
    2f2c:	31 f4       	brne	.+12     	; 0x2f3a <uart_receive_lcd+0x458>
    2f2e:	42 e0       	ldi	r20, 0x02	; 2
    2f30:	05 c0       	rjmp	.+10     	; 0x2f3c <uart_receive_lcd+0x45a>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    2f32:	40 e0       	ldi	r20, 0x00	; 0
    2f34:	03 c0       	rjmp	.+6      	; 0x2f3c <uart_receive_lcd+0x45a>
	if (port == &uctrl) {return 1;}
    2f36:	41 e0       	ldi	r20, 0x01	; 1
    2f38:	01 c0       	rjmp	.+2      	; 0x2f3c <uart_receive_lcd+0x45a>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    2f3a:	40 e0       	ldi	r20, 0x00	; 0
	}
}

inline void uart_ienqueue(USART_t* port, uint8_t datain){
	uint8_t idx = port_map(port);
	uart_ibuffer[idx][uart_ihead[idx]] = datain;
    2f3c:	50 e0       	ldi	r21, 0x00	; 0
    2f3e:	ca 01       	movw	r24, r20
    2f40:	88 0f       	add	r24, r24
    2f42:	99 1f       	adc	r25, r25
    2f44:	f4 01       	movw	r30, r8
    2f46:	e8 0f       	add	r30, r24
    2f48:	f9 1f       	adc	r31, r25
    2f4a:	20 81       	ld	r18, Z
    2f4c:	31 81       	ldd	r19, Z+1	; 0x01
    2f4e:	ca 01       	movw	r24, r20
    2f50:	98 2f       	mov	r25, r24
    2f52:	88 27       	eor	r24, r24
    2f54:	99 0f       	add	r25, r25
    2f56:	99 0f       	add	r25, r25
    2f58:	82 0f       	add	r24, r18
    2f5a:	93 1f       	adc	r25, r19
    2f5c:	84 0d       	add	r24, r4
    2f5e:	95 1d       	adc	r25, r5
    2f60:	dc 01       	movw	r26, r24
    2f62:	bc 92       	st	X, r11
	uart_ihead[idx]++;
    2f64:	80 81       	ld	r24, Z
    2f66:	91 81       	ldd	r25, Z+1	; 0x01
    2f68:	01 96       	adiw	r24, 0x01	; 1
    2f6a:	80 83       	st	Z, r24
    2f6c:	91 83       	std	Z+1, r25	; 0x01
	if (uart_ihead[idx] >= MAX_IBUFFER_LEN){
    2f6e:	80 81       	ld	r24, Z
    2f70:	91 81       	ldd	r25, Z+1	; 0x01
    2f72:	b4 e0       	ldi	r27, 0x04	; 4
    2f74:	80 30       	cpi	r24, 0x00	; 0
    2f76:	9b 07       	cpc	r25, r27
    2f78:	10 f0       	brcs	.+4      	; 0x2f7e <uart_receive_lcd+0x49c>
		uart_ihead[idx] = 0;
    2f7a:	10 82       	st	Z, r1
    2f7c:	11 82       	std	Z+1, r1	; 0x01
}

void inline uart_receive_lcd(USART_t* port){
	uint8_t incomingByte;
	//keep receiving until data register is empty or incoming queue is full
	while (((port->STATUS & _BV(7)) == B8(10000000)) && (uart_icount(port) < MAX_IBUFFER_LEN)){
    2f7e:	d6 01       	movw	r26, r12
    2f80:	11 96       	adiw	r26, 0x01	; 1
    2f82:	8c 91       	ld	r24, X
    2f84:	11 97       	sbiw	r26, 0x01	; 1
    2f86:	88 23       	and	r24, r24
    2f88:	0c f0       	brlt	.+2      	; 0x2f8c <uart_receive_lcd+0x4aa>
    2f8a:	4d c0       	rjmp	.+154    	; 0x3026 <uart_receive_lcd+0x544>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    2f8c:	b0 eb       	ldi	r27, 0xB0	; 176
    2f8e:	cb 16       	cp	r12, r27
    2f90:	bb e0       	ldi	r27, 0x0B	; 11
    2f92:	db 06       	cpc	r13, r27
    2f94:	61 f0       	breq	.+24     	; 0x2fae <uart_receive_lcd+0x4cc>
	if (port == &uctrl) {return 1;}
    2f96:	e0 ea       	ldi	r30, 0xA0	; 160
    2f98:	ce 16       	cp	r12, r30
    2f9a:	e8 e0       	ldi	r30, 0x08	; 8
    2f9c:	de 06       	cpc	r13, r30
    2f9e:	49 f0       	breq	.+18     	; 0x2fb2 <uart_receive_lcd+0x4d0>
	if (port == &udata) {return 2;}
    2fa0:	f0 eb       	ldi	r31, 0xB0	; 176
    2fa2:	cf 16       	cp	r12, r31
    2fa4:	f8 e0       	ldi	r31, 0x08	; 8
    2fa6:	df 06       	cpc	r13, r31
    2fa8:	31 f4       	brne	.+12     	; 0x2fb6 <uart_receive_lcd+0x4d4>
    2faa:	22 e0       	ldi	r18, 0x02	; 2
    2fac:	05 c0       	rjmp	.+10     	; 0x2fb8 <uart_receive_lcd+0x4d6>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    2fae:	20 e0       	ldi	r18, 0x00	; 0
    2fb0:	03 c0       	rjmp	.+6      	; 0x2fb8 <uart_receive_lcd+0x4d6>
	if (port == &uctrl) {return 1;}
    2fb2:	21 e0       	ldi	r18, 0x01	; 1
    2fb4:	01 c0       	rjmp	.+2      	; 0x2fb8 <uart_receive_lcd+0x4d6>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    2fb6:	20 e0       	ldi	r18, 0x00	; 0
	uart_itail[idx] = 0;
}

inline uint16_t uart_icount(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_ihead[idx] >= uart_itail[idx]){	
    2fb8:	30 e0       	ldi	r19, 0x00	; 0
    2fba:	c9 01       	movw	r24, r18
    2fbc:	88 0f       	add	r24, r24
    2fbe:	99 1f       	adc	r25, r25
    2fc0:	f4 01       	movw	r30, r8
    2fc2:	e8 0f       	add	r30, r24
    2fc4:	f9 1f       	adc	r31, r25
    2fc6:	40 81       	ld	r20, Z
    2fc8:	51 81       	ldd	r21, Z+1	; 0x01
    2fca:	f3 01       	movw	r30, r6
    2fcc:	e8 0f       	add	r30, r24
    2fce:	f9 1f       	adc	r31, r25
    2fd0:	80 81       	ld	r24, Z
    2fd2:	91 81       	ldd	r25, Z+1	; 0x01
    2fd4:	48 17       	cp	r20, r24
    2fd6:	59 07       	cpc	r21, r25
    2fd8:	88 f0       	brcs	.+34     	; 0x2ffc <uart_receive_lcd+0x51a>
		return (uart_ihead[idx] - uart_itail[idx]);
    2fda:	22 0f       	add	r18, r18
    2fdc:	33 1f       	adc	r19, r19
    2fde:	f4 01       	movw	r30, r8
    2fe0:	e2 0f       	add	r30, r18
    2fe2:	f3 1f       	adc	r31, r19
    2fe4:	40 81       	ld	r20, Z
    2fe6:	51 81       	ldd	r21, Z+1	; 0x01
    2fe8:	f3 01       	movw	r30, r6
    2fea:	e2 0f       	add	r30, r18
    2fec:	f3 1f       	adc	r31, r19
    2fee:	80 81       	ld	r24, Z
    2ff0:	91 81       	ldd	r25, Z+1	; 0x01
    2ff2:	9a 01       	movw	r18, r20
    2ff4:	28 1b       	sub	r18, r24
    2ff6:	39 0b       	sbc	r19, r25
    2ff8:	c9 01       	movw	r24, r18
    2ffa:	10 c0       	rjmp	.+32     	; 0x301c <uart_receive_lcd+0x53a>
	}
	else {
		return ((MAX_IBUFFER_LEN-uart_itail[idx])+uart_ihead[idx]);
    2ffc:	22 0f       	add	r18, r18
    2ffe:	33 1f       	adc	r19, r19
    3000:	f4 01       	movw	r30, r8
    3002:	e2 0f       	add	r30, r18
    3004:	f3 1f       	adc	r31, r19
    3006:	80 81       	ld	r24, Z
    3008:	91 81       	ldd	r25, Z+1	; 0x01
    300a:	f3 01       	movw	r30, r6
    300c:	e2 0f       	add	r30, r18
    300e:	f3 1f       	adc	r31, r19
    3010:	20 81       	ld	r18, Z
    3012:	31 81       	ldd	r19, Z+1	; 0x01
    3014:	80 50       	subi	r24, 0x00	; 0
    3016:	9c 4f       	sbci	r25, 0xFC	; 252
    3018:	82 1b       	sub	r24, r18
    301a:	93 0b       	sbc	r25, r19
}

void inline uart_receive_lcd(USART_t* port){
	uint8_t incomingByte;
	//keep receiving until data register is empty or incoming queue is full
	while (((port->STATUS & _BV(7)) == B8(10000000)) && (uart_icount(port) < MAX_IBUFFER_LEN)){
    301c:	34 e0       	ldi	r19, 0x04	; 4
    301e:	80 30       	cpi	r24, 0x00	; 0
    3020:	93 07       	cpc	r25, r19
    3022:	08 f4       	brcc	.+2      	; 0x3026 <uart_receive_lcd+0x544>
    3024:	93 cd       	rjmp	.-1242   	; 0x2b4c <uart_receive_lcd+0x6a>
			}					
		}
		lcd_set_touch(incomingByte); //write to touch-command listener
		uart_ienqueue(port, incomingByte);
	}
}
    3026:	df 91       	pop	r29
    3028:	cf 91       	pop	r28
    302a:	1f 91       	pop	r17
    302c:	0f 91       	pop	r16
    302e:	ff 90       	pop	r15
    3030:	ef 90       	pop	r14
    3032:	df 90       	pop	r13
    3034:	cf 90       	pop	r12
    3036:	bf 90       	pop	r11
    3038:	9f 90       	pop	r9
    303a:	8f 90       	pop	r8
    303c:	7f 90       	pop	r7
    303e:	6f 90       	pop	r6
    3040:	5f 90       	pop	r5
    3042:	4f 90       	pop	r4
    3044:	3f 90       	pop	r3
    3046:	2f 90       	pop	r2
    3048:	08 95       	ret

0000304a <__vector_122>:
SIGNAL(USARTC0_DRE_vect) {uart_transmit(&uctrl);}//TX Interrupt
SIGNAL(USARTC0_RXC_vect) {uart_receive(&uctrl);} //RX Interrupt
SIGNAL(USARTC1_DRE_vect) {uart_transmit(&udata);}//TX Interrupt
SIGNAL(USARTC1_RXC_vect) {uart_receive(&udata);} //RX Interrupt
SIGNAL(USARTF1_DRE_vect) {uart_transmit_lcd(&ulcd);}//TX Interrupt
SIGNAL(USARTF1_RXC_vect) {uart_receive_lcd(&ulcd);} //RX Interrupt
    304a:	1f 92       	push	r1
    304c:	0f 92       	push	r0
    304e:	0f b6       	in	r0, 0x3f	; 63
    3050:	0f 92       	push	r0
    3052:	08 b6       	in	r0, 0x38	; 56
    3054:	0f 92       	push	r0
    3056:	09 b6       	in	r0, 0x39	; 57
    3058:	0f 92       	push	r0
    305a:	0b b6       	in	r0, 0x3b	; 59
    305c:	0f 92       	push	r0
    305e:	11 24       	eor	r1, r1
    3060:	2f 93       	push	r18
    3062:	3f 93       	push	r19
    3064:	4f 93       	push	r20
    3066:	5f 93       	push	r21
    3068:	6f 93       	push	r22
    306a:	7f 93       	push	r23
    306c:	8f 93       	push	r24
    306e:	9f 93       	push	r25
    3070:	af 93       	push	r26
    3072:	bf 93       	push	r27
    3074:	ef 93       	push	r30
    3076:	ff 93       	push	r31
    3078:	80 eb       	ldi	r24, 0xB0	; 176
    307a:	9b e0       	ldi	r25, 0x0B	; 11
    307c:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <uart_receive_lcd>
    3080:	ff 91       	pop	r31
    3082:	ef 91       	pop	r30
    3084:	bf 91       	pop	r27
    3086:	af 91       	pop	r26
    3088:	9f 91       	pop	r25
    308a:	8f 91       	pop	r24
    308c:	7f 91       	pop	r23
    308e:	6f 91       	pop	r22
    3090:	5f 91       	pop	r21
    3092:	4f 91       	pop	r20
    3094:	3f 91       	pop	r19
    3096:	2f 91       	pop	r18
    3098:	0f 90       	pop	r0
    309a:	0b be       	out	0x3b, r0	; 59
    309c:	0f 90       	pop	r0
    309e:	09 be       	out	0x39, r0	; 57
    30a0:	0f 90       	pop	r0
    30a2:	08 be       	out	0x38, r0	; 56
    30a4:	0f 90       	pop	r0
    30a6:	0f be       	out	0x3f, r0	; 63
    30a8:	0f 90       	pop	r0
    30aa:	1f 90       	pop	r1
    30ac:	18 95       	reti

000030ae <init_uart_obuffer>:
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    30ae:	2b e0       	ldi	r18, 0x0B	; 11
    30b0:	80 3b       	cpi	r24, 0xB0	; 176
    30b2:	92 07       	cpc	r25, r18
    30b4:	51 f0       	breq	.+20     	; 0x30ca <init_uart_obuffer+0x1c>
	if (port == &uctrl) {return 1;}
    30b6:	e8 e0       	ldi	r30, 0x08	; 8
    30b8:	80 3a       	cpi	r24, 0xA0	; 160
    30ba:	9e 07       	cpc	r25, r30
    30bc:	41 f0       	breq	.+16     	; 0x30ce <init_uart_obuffer+0x20>
	if (port == &udata) {return 2;}
    30be:	f8 e0       	ldi	r31, 0x08	; 8
    30c0:	80 3b       	cpi	r24, 0xB0	; 176
    30c2:	9f 07       	cpc	r25, r31
    30c4:	31 f4       	brne	.+12     	; 0x30d2 <init_uart_obuffer+0x24>
    30c6:	82 e0       	ldi	r24, 0x02	; 2
    30c8:	05 c0       	rjmp	.+10     	; 0x30d4 <init_uart_obuffer+0x26>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    30ca:	80 e0       	ldi	r24, 0x00	; 0
    30cc:	03 c0       	rjmp	.+6      	; 0x30d4 <init_uart_obuffer+0x26>
	if (port == &uctrl) {return 1;}
    30ce:	81 e0       	ldi	r24, 0x01	; 1
    30d0:	01 c0       	rjmp	.+2      	; 0x30d4 <init_uart_obuffer+0x26>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    30d2:	80 e0       	ldi	r24, 0x00	; 0
	No protection is provided for buffer overflow! Be careful! */
//***************************************************

void init_uart_obuffer(USART_t* port){
	uint8_t idx = port_map(port);
	uart_head[idx] = 0;
    30d4:	90 e0       	ldi	r25, 0x00	; 0
    30d6:	88 0f       	add	r24, r24
    30d8:	99 1f       	adc	r25, r25
    30da:	fc 01       	movw	r30, r24
    30dc:	e3 52       	subi	r30, 0x23	; 35
    30de:	fe 4c       	sbci	r31, 0xCE	; 206
    30e0:	10 82       	st	Z, r1
    30e2:	11 82       	std	Z+1, r1	; 0x01
	uart_tail[idx] = 0;
    30e4:	87 51       	subi	r24, 0x17	; 23
    30e6:	92 4c       	sbci	r25, 0xC2	; 194
    30e8:	fc 01       	movw	r30, r24
    30ea:	10 82       	st	Z, r1
    30ec:	11 82       	std	Z+1, r1	; 0x01
}
    30ee:	08 95       	ret

000030f0 <uart_count>:
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    30f0:	2b e0       	ldi	r18, 0x0B	; 11
    30f2:	80 3b       	cpi	r24, 0xB0	; 176
    30f4:	92 07       	cpc	r25, r18
    30f6:	51 f0       	breq	.+20     	; 0x310c <uart_count+0x1c>
	if (port == &uctrl) {return 1;}
    30f8:	e8 e0       	ldi	r30, 0x08	; 8
    30fa:	80 3a       	cpi	r24, 0xA0	; 160
    30fc:	9e 07       	cpc	r25, r30
    30fe:	41 f0       	breq	.+16     	; 0x3110 <uart_count+0x20>
	if (port == &udata) {return 2;}
    3100:	f8 e0       	ldi	r31, 0x08	; 8
    3102:	80 3b       	cpi	r24, 0xB0	; 176
    3104:	9f 07       	cpc	r25, r31
    3106:	31 f4       	brne	.+12     	; 0x3114 <uart_count+0x24>
    3108:	82 e0       	ldi	r24, 0x02	; 2
    310a:	05 c0       	rjmp	.+10     	; 0x3116 <uart_count+0x26>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    310c:	80 e0       	ldi	r24, 0x00	; 0
    310e:	03 c0       	rjmp	.+6      	; 0x3116 <uart_count+0x26>
	if (port == &uctrl) {return 1;}
    3110:	81 e0       	ldi	r24, 0x01	; 1
    3112:	01 c0       	rjmp	.+2      	; 0x3116 <uart_count+0x26>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    3114:	80 e0       	ldi	r24, 0x00	; 0
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    3116:	90 e0       	ldi	r25, 0x00	; 0
    3118:	9c 01       	movw	r18, r24
    311a:	22 0f       	add	r18, r18
    311c:	33 1f       	adc	r19, r19
    311e:	f9 01       	movw	r30, r18
    3120:	e3 52       	subi	r30, 0x23	; 35
    3122:	fe 4c       	sbci	r31, 0xCE	; 206
    3124:	40 81       	ld	r20, Z
    3126:	51 81       	ldd	r21, Z+1	; 0x01
    3128:	27 51       	subi	r18, 0x17	; 23
    312a:	32 4c       	sbci	r19, 0xC2	; 194
    312c:	f9 01       	movw	r30, r18
    312e:	20 81       	ld	r18, Z
    3130:	31 81       	ldd	r19, Z+1	; 0x01
    3132:	42 17       	cp	r20, r18
    3134:	53 07       	cpc	r21, r19
    3136:	80 f0       	brcs	.+32     	; 0x3158 <uart_count+0x68>
		return (uart_head[idx] - uart_tail[idx]);
    3138:	9c 01       	movw	r18, r24
    313a:	22 0f       	add	r18, r18
    313c:	33 1f       	adc	r19, r19
    313e:	f9 01       	movw	r30, r18
    3140:	e3 52       	subi	r30, 0x23	; 35
    3142:	fe 4c       	sbci	r31, 0xCE	; 206
    3144:	80 81       	ld	r24, Z
    3146:	91 81       	ldd	r25, Z+1	; 0x01
    3148:	27 51       	subi	r18, 0x17	; 23
    314a:	32 4c       	sbci	r19, 0xC2	; 194
    314c:	f9 01       	movw	r30, r18
    314e:	20 81       	ld	r18, Z
    3150:	31 81       	ldd	r19, Z+1	; 0x01
    3152:	82 1b       	sub	r24, r18
    3154:	93 0b       	sbc	r25, r19
    3156:	08 95       	ret
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    3158:	9c 01       	movw	r18, r24
    315a:	22 0f       	add	r18, r18
    315c:	33 1f       	adc	r19, r19
    315e:	f9 01       	movw	r30, r18
    3160:	e3 52       	subi	r30, 0x23	; 35
    3162:	fe 4c       	sbci	r31, 0xCE	; 206
    3164:	40 81       	ld	r20, Z
    3166:	51 81       	ldd	r21, Z+1	; 0x01
    3168:	27 51       	subi	r18, 0x17	; 23
    316a:	32 4c       	sbci	r19, 0xC2	; 194
    316c:	f9 01       	movw	r30, r18
    316e:	20 81       	ld	r18, Z
    3170:	31 81       	ldd	r19, Z+1	; 0x01
    3172:	ca 01       	movw	r24, r20
    3174:	80 50       	subi	r24, 0x00	; 0
    3176:	9c 4f       	sbci	r25, 0xFC	; 252
    3178:	82 1b       	sub	r24, r18
    317a:	93 0b       	sbc	r25, r19
	}
}
    317c:	08 95       	ret

0000317e <uart_enqueue_string>:

///Enqueue a string into the outgoing serial queue. Adds CR terminator to string.
inline void uart_enqueue_string(USART_t* port, char* string_in){
    317e:	5f 92       	push	r5
    3180:	6f 92       	push	r6
    3182:	7f 92       	push	r7
    3184:	8f 92       	push	r8
    3186:	9f 92       	push	r9
    3188:	af 92       	push	r10
    318a:	bf 92       	push	r11
    318c:	cf 92       	push	r12
    318e:	df 92       	push	r13
    3190:	ef 92       	push	r14
    3192:	ff 92       	push	r15
    3194:	0f 93       	push	r16
    3196:	1f 93       	push	r17
    3198:	cf 93       	push	r28
    319a:	df 93       	push	r29
    319c:	ec 01       	movw	r28, r24
	uint16_t length = (uint16_t)strlen(string_in);
    319e:	e6 2f       	mov	r30, r22
    31a0:	f7 2f       	mov	r31, r23
    31a2:	df 01       	movw	r26, r30
    31a4:	0d 90       	ld	r0, X+
    31a6:	00 20       	and	r0, r0
    31a8:	e9 f7       	brne	.-6      	; 0x31a4 <uart_enqueue_string+0x26>
    31aa:	11 97       	sbiw	r26, 0x01	; 1
    31ac:	3d 01       	movw	r6, r26
    31ae:	6e 1a       	sub	r6, r30
    31b0:	7f 0a       	sbc	r7, r31
	for (uint16_t i=0; i<length; i++) {uart_enqueue(port, (uint8_t)string_in[i]);}
    31b2:	09 f4       	brne	.+2      	; 0x31b6 <uart_enqueue_string+0x38>
    31b4:	0d c2       	rjmp	.+1050   	; 0x35d0 <uart_enqueue_string+0x452>
    31b6:	86 2e       	mov	r8, r22
    31b8:	97 2e       	mov	r9, r23
    31ba:	aa 24       	eor	r10, r10
    31bc:	bb 24       	eor	r11, r11
#ifndef UART_DEBUG
	uint8_t idx = port_map(port);
	
	//if (idx==0){uart_enqueue(&uctrl, datain);} //xxx
	
	uart_buffer[idx][uart_head[idx]] = datain;
    31be:	0f 2e       	mov	r0, r31
    31c0:	fd ed       	ldi	r31, 0xDD	; 221
    31c2:	ef 2e       	mov	r14, r31
    31c4:	f1 e3       	ldi	r31, 0x31	; 49
    31c6:	ff 2e       	mov	r15, r31
    31c8:	f0 2d       	mov	r31, r0
    31ca:	0f 2e       	mov	r0, r31
    31cc:	f3 ee       	ldi	r31, 0xE3	; 227
    31ce:	cf 2e       	mov	r12, r31
    31d0:	f1 e3       	ldi	r31, 0x31	; 49
    31d2:	df 2e       	mov	r13, r31
    31d4:	f0 2d       	mov	r31, r0
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    31d6:	09 ee       	ldi	r16, 0xE9	; 233
    31d8:	1d e3       	ldi	r17, 0x3D	; 61
				//Header byte just describes payload -- do not send to LCD
				lcd_flow_type = toSend;
				break;
			default:
				//Payload bytes -- send to LCD
				if (toSend == 0x0D) {lcd_flow_control = LCD_BUSY;}
    31da:	0f 2e       	mov	r0, r31
    31dc:	fe e4       	ldi	r31, 0x4E	; 78
    31de:	5f 2e       	mov	r5, r31
    31e0:	f0 2d       	mov	r31, r0
}

///Enqueue a string into the outgoing serial queue. Adds CR terminator to string.
inline void uart_enqueue_string(USART_t* port, char* string_in){
	uint16_t length = (uint16_t)strlen(string_in);
	for (uint16_t i=0; i<length; i++) {uart_enqueue(port, (uint8_t)string_in[i]);}
    31e2:	d4 01       	movw	r26, r8
    31e4:	5d 91       	ld	r21, X+
    31e6:	4d 01       	movw	r8, r26
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    31e8:	bb e0       	ldi	r27, 0x0B	; 11
    31ea:	c0 3b       	cpi	r28, 0xB0	; 176
    31ec:	db 07       	cpc	r29, r27
    31ee:	51 f0       	breq	.+20     	; 0x3204 <uart_enqueue_string+0x86>
	if (port == &uctrl) {return 1;}
    31f0:	e8 e0       	ldi	r30, 0x08	; 8
    31f2:	c0 3a       	cpi	r28, 0xA0	; 160
    31f4:	de 07       	cpc	r29, r30
    31f6:	41 f0       	breq	.+16     	; 0x3208 <uart_enqueue_string+0x8a>
	if (port == &udata) {return 2;}
    31f8:	f8 e0       	ldi	r31, 0x08	; 8
    31fa:	c0 3b       	cpi	r28, 0xB0	; 176
    31fc:	df 07       	cpc	r29, r31
    31fe:	31 f4       	brne	.+12     	; 0x320c <uart_enqueue_string+0x8e>
    3200:	42 e0       	ldi	r20, 0x02	; 2
    3202:	05 c0       	rjmp	.+10     	; 0x320e <uart_enqueue_string+0x90>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    3204:	40 e0       	ldi	r20, 0x00	; 0
    3206:	03 c0       	rjmp	.+6      	; 0x320e <uart_enqueue_string+0x90>
	if (port == &uctrl) {return 1;}
    3208:	41 e0       	ldi	r20, 0x01	; 1
    320a:	01 c0       	rjmp	.+2      	; 0x320e <uart_enqueue_string+0x90>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    320c:	40 e0       	ldi	r20, 0x00	; 0
#ifndef UART_DEBUG
	uint8_t idx = port_map(port);
	
	//if (idx==0){uart_enqueue(&uctrl, datain);} //xxx
	
	uart_buffer[idx][uart_head[idx]] = datain;
    320e:	64 2f       	mov	r22, r20
    3210:	70 e0       	ldi	r23, 0x00	; 0
    3212:	cb 01       	movw	r24, r22
    3214:	88 0f       	add	r24, r24
    3216:	99 1f       	adc	r25, r25
    3218:	f7 01       	movw	r30, r14
    321a:	e8 0f       	add	r30, r24
    321c:	f9 1f       	adc	r31, r25
    321e:	20 81       	ld	r18, Z
    3220:	31 81       	ldd	r19, Z+1	; 0x01
    3222:	cb 01       	movw	r24, r22
    3224:	98 2f       	mov	r25, r24
    3226:	88 27       	eor	r24, r24
    3228:	99 0f       	add	r25, r25
    322a:	99 0f       	add	r25, r25
    322c:	82 0f       	add	r24, r18
    322e:	93 1f       	adc	r25, r19
    3230:	8c 0d       	add	r24, r12
    3232:	9d 1d       	adc	r25, r13
    3234:	dc 01       	movw	r26, r24
    3236:	5c 93       	st	X, r21
	uart_head[idx]++;
    3238:	80 81       	ld	r24, Z
    323a:	91 81       	ldd	r25, Z+1	; 0x01
    323c:	01 96       	adiw	r24, 0x01	; 1
    323e:	80 83       	st	Z, r24
    3240:	91 83       	std	Z+1, r25	; 0x01
	if (uart_head[idx] >= MAX_BUFFER_LEN){
    3242:	80 81       	ld	r24, Z
    3244:	91 81       	ldd	r25, Z+1	; 0x01
    3246:	b4 e0       	ldi	r27, 0x04	; 4
    3248:	80 30       	cpi	r24, 0x00	; 0
    324a:	9b 07       	cpc	r25, r27
    324c:	10 f0       	brcs	.+4      	; 0x3252 <uart_enqueue_string+0xd4>
		uart_head[idx] = 0;
    324e:	10 82       	st	Z, r1
    3250:	11 82       	std	Z+1, r1	; 0x01
	}
	if (idx == 0){uart_transmit_lcd(port);} //start the transmission process.
    3252:	44 23       	and	r20, r20
    3254:	09 f4       	brne	.+2      	; 0x3258 <uart_enqueue_string+0xda>
    3256:	44 c0       	rjmp	.+136    	; 0x32e0 <uart_enqueue_string+0x162>
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    3258:	89 81       	ldd	r24, Y+1	; 0x01
    325a:	85 fd       	sbrc	r24, 5
    325c:	1c c1       	rjmp	.+568    	; 0x3496 <uart_enqueue_string+0x318>
    325e:	63 c1       	rjmp	.+710    	; 0x3526 <uart_enqueue_string+0x3a8>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    3260:	fb e0       	ldi	r31, 0x0B	; 11
    3262:	c0 3b       	cpi	r28, 0xB0	; 176
    3264:	df 07       	cpc	r29, r31
    3266:	51 f0       	breq	.+20     	; 0x327c <uart_enqueue_string+0xfe>
	if (port == &uctrl) {return 1;}
    3268:	28 e0       	ldi	r18, 0x08	; 8
    326a:	c0 3a       	cpi	r28, 0xA0	; 160
    326c:	d2 07       	cpc	r29, r18
    326e:	41 f0       	breq	.+16     	; 0x3280 <uart_enqueue_string+0x102>
	if (port == &udata) {return 2;}
    3270:	38 e0       	ldi	r19, 0x08	; 8
    3272:	c0 3b       	cpi	r28, 0xB0	; 176
    3274:	d3 07       	cpc	r29, r19
    3276:	31 f4       	brne	.+12     	; 0x3284 <uart_enqueue_string+0x106>
    3278:	22 e0       	ldi	r18, 0x02	; 2
    327a:	05 c0       	rjmp	.+10     	; 0x3286 <uart_enqueue_string+0x108>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    327c:	20 e0       	ldi	r18, 0x00	; 0
    327e:	03 c0       	rjmp	.+6      	; 0x3286 <uart_enqueue_string+0x108>
	if (port == &uctrl) {return 1;}
    3280:	21 e0       	ldi	r18, 0x01	; 1
    3282:	01 c0       	rjmp	.+2      	; 0x3286 <uart_enqueue_string+0x108>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    3284:	20 e0       	ldi	r18, 0x00	; 0
}

inline uint8_t uart_dequeue(USART_t* port){
	uint8_t idx = port_map(port);
	uint16_t oldtail;
	oldtail = uart_tail[idx];
    3286:	30 e0       	ldi	r19, 0x00	; 0
    3288:	c9 01       	movw	r24, r18
    328a:	88 0f       	add	r24, r24
    328c:	99 1f       	adc	r25, r25
    328e:	f8 01       	movw	r30, r16
    3290:	e8 0f       	add	r30, r24
    3292:	f9 1f       	adc	r31, r25
    3294:	40 81       	ld	r20, Z
    3296:	51 81       	ldd	r21, Z+1	; 0x01
	uart_tail[idx]++;
    3298:	80 81       	ld	r24, Z
    329a:	91 81       	ldd	r25, Z+1	; 0x01
    329c:	01 96       	adiw	r24, 0x01	; 1
    329e:	80 83       	st	Z, r24
    32a0:	91 83       	std	Z+1, r25	; 0x01
	if (uart_tail[idx] >= MAX_BUFFER_LEN){
    32a2:	80 81       	ld	r24, Z
    32a4:	91 81       	ldd	r25, Z+1	; 0x01
    32a6:	64 e0       	ldi	r22, 0x04	; 4
    32a8:	80 30       	cpi	r24, 0x00	; 0
    32aa:	96 07       	cpc	r25, r22
    32ac:	10 f0       	brcs	.+4      	; 0x32b2 <uart_enqueue_string+0x134>
		uart_tail[idx] = 0;
    32ae:	10 82       	st	Z, r1
    32b0:	11 82       	std	Z+1, r1	; 0x01
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    32b2:	c9 01       	movw	r24, r18
    32b4:	98 2f       	mov	r25, r24
    32b6:	88 27       	eor	r24, r24
    32b8:	99 0f       	add	r25, r25
    32ba:	99 0f       	add	r25, r25
    32bc:	84 0f       	add	r24, r20
    32be:	95 1f       	adc	r25, r21
    32c0:	8c 0d       	add	r24, r12
    32c2:	9d 1d       	adc	r25, r13
    32c4:	fc 01       	movw	r30, r24
    32c6:	80 81       	ld	r24, Z
void inline uart_transmit_lcd(USART_t* port){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0) && (lcd_flow_control == LCD_READY)){
		toSend = uart_dequeue(port);
		switch(toSend){
    32c8:	8a 3f       	cpi	r24, 0xFA	; 250
    32ca:	11 f0       	breq	.+4      	; 0x32d0 <uart_enqueue_string+0x152>
    32cc:	8e 3f       	cpi	r24, 0xFE	; 254
    32ce:	19 f4       	brne	.+6      	; 0x32d6 <uart_enqueue_string+0x158>
			case LCD_COMMAND:
			case LCD_MACRO:
				//Header byte just describes payload -- do not send to LCD
				lcd_flow_type = toSend;
    32d0:	80 93 d5 25 	sts	0x25D5, r24
    32d4:	05 c0       	rjmp	.+10     	; 0x32e0 <uart_enqueue_string+0x162>
				break;
			default:
				//Payload bytes -- send to LCD
				if (toSend == 0x0D) {lcd_flow_control = LCD_BUSY;}
    32d6:	8d 30       	cpi	r24, 0x0D	; 13
    32d8:	11 f4       	brne	.+4      	; 0x32de <uart_enqueue_string+0x160>
    32da:	50 92 d6 25 	sts	0x25D6, r5
				port->DATA = toSend;
    32de:	88 83       	st	Y, r24
}

void inline uart_transmit_lcd(USART_t* port){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0) && (lcd_flow_control == LCD_READY)){
    32e0:	89 81       	ldd	r24, Y+1	; 0x01
    32e2:	85 ff       	sbrs	r24, 5
    32e4:	4c c0       	rjmp	.+152    	; 0x337e <uart_enqueue_string+0x200>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    32e6:	fb e0       	ldi	r31, 0x0B	; 11
    32e8:	c0 3b       	cpi	r28, 0xB0	; 176
    32ea:	df 07       	cpc	r29, r31
    32ec:	51 f0       	breq	.+20     	; 0x3302 <uart_enqueue_string+0x184>
	if (port == &uctrl) {return 1;}
    32ee:	28 e0       	ldi	r18, 0x08	; 8
    32f0:	c0 3a       	cpi	r28, 0xA0	; 160
    32f2:	d2 07       	cpc	r29, r18
    32f4:	41 f0       	breq	.+16     	; 0x3306 <uart_enqueue_string+0x188>
	if (port == &udata) {return 2;}
    32f6:	38 e0       	ldi	r19, 0x08	; 8
    32f8:	c0 3b       	cpi	r28, 0xB0	; 176
    32fa:	d3 07       	cpc	r29, r19
    32fc:	31 f4       	brne	.+12     	; 0x330a <uart_enqueue_string+0x18c>
    32fe:	22 e0       	ldi	r18, 0x02	; 2
    3300:	05 c0       	rjmp	.+10     	; 0x330c <uart_enqueue_string+0x18e>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    3302:	20 e0       	ldi	r18, 0x00	; 0
    3304:	03 c0       	rjmp	.+6      	; 0x330c <uart_enqueue_string+0x18e>
	if (port == &uctrl) {return 1;}
    3306:	21 e0       	ldi	r18, 0x01	; 1
    3308:	01 c0       	rjmp	.+2      	; 0x330c <uart_enqueue_string+0x18e>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    330a:	20 e0       	ldi	r18, 0x00	; 0
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    330c:	30 e0       	ldi	r19, 0x00	; 0
    330e:	c9 01       	movw	r24, r18
    3310:	88 0f       	add	r24, r24
    3312:	99 1f       	adc	r25, r25
    3314:	f7 01       	movw	r30, r14
    3316:	e8 0f       	add	r30, r24
    3318:	f9 1f       	adc	r31, r25
    331a:	40 81       	ld	r20, Z
    331c:	51 81       	ldd	r21, Z+1	; 0x01
    331e:	f8 01       	movw	r30, r16
    3320:	e8 0f       	add	r30, r24
    3322:	f9 1f       	adc	r31, r25
    3324:	80 81       	ld	r24, Z
    3326:	91 81       	ldd	r25, Z+1	; 0x01
    3328:	48 17       	cp	r20, r24
    332a:	59 07       	cpc	r21, r25
    332c:	88 f0       	brcs	.+34     	; 0x3350 <uart_enqueue_string+0x1d2>
		return (uart_head[idx] - uart_tail[idx]);
    332e:	22 0f       	add	r18, r18
    3330:	33 1f       	adc	r19, r19
    3332:	f7 01       	movw	r30, r14
    3334:	e2 0f       	add	r30, r18
    3336:	f3 1f       	adc	r31, r19
    3338:	40 81       	ld	r20, Z
    333a:	51 81       	ldd	r21, Z+1	; 0x01
    333c:	f8 01       	movw	r30, r16
    333e:	e2 0f       	add	r30, r18
    3340:	f3 1f       	adc	r31, r19
    3342:	80 81       	ld	r24, Z
    3344:	91 81       	ldd	r25, Z+1	; 0x01
    3346:	da 01       	movw	r26, r20
    3348:	a8 1b       	sub	r26, r24
    334a:	b9 0b       	sbc	r27, r25
    334c:	cd 01       	movw	r24, r26
    334e:	10 c0       	rjmp	.+32     	; 0x3370 <uart_enqueue_string+0x1f2>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    3350:	22 0f       	add	r18, r18
    3352:	33 1f       	adc	r19, r19
    3354:	f7 01       	movw	r30, r14
    3356:	e2 0f       	add	r30, r18
    3358:	f3 1f       	adc	r31, r19
    335a:	80 81       	ld	r24, Z
    335c:	91 81       	ldd	r25, Z+1	; 0x01
    335e:	f8 01       	movw	r30, r16
    3360:	e2 0f       	add	r30, r18
    3362:	f3 1f       	adc	r31, r19
    3364:	20 81       	ld	r18, Z
    3366:	31 81       	ldd	r19, Z+1	; 0x01
    3368:	80 50       	subi	r24, 0x00	; 0
    336a:	9c 4f       	sbci	r25, 0xFC	; 252
    336c:	82 1b       	sub	r24, r18
    336e:	93 0b       	sbc	r25, r19
}

void inline uart_transmit_lcd(USART_t* port){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0) && (lcd_flow_control == LCD_READY)){
    3370:	00 97       	sbiw	r24, 0x00	; 0
    3372:	29 f0       	breq	.+10     	; 0x337e <uart_enqueue_string+0x200>
    3374:	80 91 d6 25 	lds	r24, 0x25D6
    3378:	82 35       	cpi	r24, 0x52	; 82
    337a:	09 f4       	brne	.+2      	; 0x337e <uart_enqueue_string+0x200>
    337c:	71 cf       	rjmp	.-286    	; 0x3260 <uart_enqueue_string+0xe2>
				if (toSend == 0x0D) {lcd_flow_control = LCD_BUSY;}
				port->DATA = toSend;
				break;
		}				
	}
	uart_txbuffer_disable(port); //implemented this way to prevent periodic stalls that happen when uart_txbuffer isn't disabled quickly enough
    337e:	ce 01       	movw	r24, r28
    3380:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <uart_txbuffer_disable>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    3384:	bb e0       	ldi	r27, 0x0B	; 11
    3386:	c0 3b       	cpi	r28, 0xB0	; 176
    3388:	db 07       	cpc	r29, r27
    338a:	51 f0       	breq	.+20     	; 0x33a0 <uart_enqueue_string+0x222>
	if (port == &uctrl) {return 1;}
    338c:	e8 e0       	ldi	r30, 0x08	; 8
    338e:	c0 3a       	cpi	r28, 0xA0	; 160
    3390:	de 07       	cpc	r29, r30
    3392:	41 f0       	breq	.+16     	; 0x33a4 <uart_enqueue_string+0x226>
	if (port == &udata) {return 2;}
    3394:	f8 e0       	ldi	r31, 0x08	; 8
    3396:	c0 3b       	cpi	r28, 0xB0	; 176
    3398:	df 07       	cpc	r29, r31
    339a:	31 f4       	brne	.+12     	; 0x33a8 <uart_enqueue_string+0x22a>
    339c:	22 e0       	ldi	r18, 0x02	; 2
    339e:	05 c0       	rjmp	.+10     	; 0x33aa <uart_enqueue_string+0x22c>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    33a0:	20 e0       	ldi	r18, 0x00	; 0
    33a2:	03 c0       	rjmp	.+6      	; 0x33aa <uart_enqueue_string+0x22c>
	if (port == &uctrl) {return 1;}
    33a4:	21 e0       	ldi	r18, 0x01	; 1
    33a6:	01 c0       	rjmp	.+2      	; 0x33aa <uart_enqueue_string+0x22c>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    33a8:	20 e0       	ldi	r18, 0x00	; 0
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    33aa:	30 e0       	ldi	r19, 0x00	; 0
    33ac:	c9 01       	movw	r24, r18
    33ae:	88 0f       	add	r24, r24
    33b0:	99 1f       	adc	r25, r25
    33b2:	f7 01       	movw	r30, r14
    33b4:	e8 0f       	add	r30, r24
    33b6:	f9 1f       	adc	r31, r25
    33b8:	40 81       	ld	r20, Z
    33ba:	51 81       	ldd	r21, Z+1	; 0x01
    33bc:	f8 01       	movw	r30, r16
    33be:	e8 0f       	add	r30, r24
    33c0:	f9 1f       	adc	r31, r25
    33c2:	80 81       	ld	r24, Z
    33c4:	91 81       	ldd	r25, Z+1	; 0x01
    33c6:	48 17       	cp	r20, r24
    33c8:	59 07       	cpc	r21, r25
    33ca:	88 f0       	brcs	.+34     	; 0x33ee <uart_enqueue_string+0x270>
		return (uart_head[idx] - uart_tail[idx]);
    33cc:	22 0f       	add	r18, r18
    33ce:	33 1f       	adc	r19, r19
    33d0:	f7 01       	movw	r30, r14
    33d2:	e2 0f       	add	r30, r18
    33d4:	f3 1f       	adc	r31, r19
    33d6:	40 81       	ld	r20, Z
    33d8:	51 81       	ldd	r21, Z+1	; 0x01
    33da:	f8 01       	movw	r30, r16
    33dc:	e2 0f       	add	r30, r18
    33de:	f3 1f       	adc	r31, r19
    33e0:	80 81       	ld	r24, Z
    33e2:	91 81       	ldd	r25, Z+1	; 0x01
    33e4:	9a 01       	movw	r18, r20
    33e6:	28 1b       	sub	r18, r24
    33e8:	39 0b       	sbc	r19, r25
    33ea:	c9 01       	movw	r24, r18
    33ec:	10 c0       	rjmp	.+32     	; 0x340e <uart_enqueue_string+0x290>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    33ee:	22 0f       	add	r18, r18
    33f0:	33 1f       	adc	r19, r19
    33f2:	f7 01       	movw	r30, r14
    33f4:	e2 0f       	add	r30, r18
    33f6:	f3 1f       	adc	r31, r19
    33f8:	80 81       	ld	r24, Z
    33fa:	91 81       	ldd	r25, Z+1	; 0x01
    33fc:	f8 01       	movw	r30, r16
    33fe:	e2 0f       	add	r30, r18
    3400:	f3 1f       	adc	r31, r19
    3402:	20 81       	ld	r18, Z
    3404:	31 81       	ldd	r19, Z+1	; 0x01
    3406:	80 50       	subi	r24, 0x00	; 0
    3408:	9c 4f       	sbci	r25, 0xFC	; 252
    340a:	82 1b       	sub	r24, r18
    340c:	93 0b       	sbc	r25, r19
				port->DATA = toSend;
				break;
		}				
	}
	uart_txbuffer_disable(port); //implemented this way to prevent periodic stalls that happen when uart_txbuffer isn't disabled quickly enough
	if ((uart_count(port)>0) && (lcd_flow_control == LCD_READY)){ //...something is waiting to go out
    340e:	00 97       	sbiw	r24, 0x00	; 0
    3410:	09 f4       	brne	.+2      	; 0x3414 <uart_enqueue_string+0x296>
    3412:	d7 c0       	rjmp	.+430    	; 0x35c2 <uart_enqueue_string+0x444>
    3414:	80 91 d6 25 	lds	r24, 0x25D6
    3418:	82 35       	cpi	r24, 0x52	; 82
    341a:	09 f0       	breq	.+2      	; 0x341e <uart_enqueue_string+0x2a0>
    341c:	d2 c0       	rjmp	.+420    	; 0x35c2 <uart_enqueue_string+0x444>
		uart_txbuffer_enable(port);	
    341e:	ce 01       	movw	r24, r28
    3420:	0e 94 ce 10 	call	0x219c	; 0x219c <uart_txbuffer_enable>
    3424:	ce c0       	rjmp	.+412    	; 0x35c2 <uart_enqueue_string+0x444>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    3426:	3b e0       	ldi	r19, 0x0B	; 11
    3428:	c0 3b       	cpi	r28, 0xB0	; 176
    342a:	d3 07       	cpc	r29, r19
    342c:	51 f0       	breq	.+20     	; 0x3442 <uart_enqueue_string+0x2c4>
	if (port == &uctrl) {return 1;}
    342e:	68 e0       	ldi	r22, 0x08	; 8
    3430:	c0 3a       	cpi	r28, 0xA0	; 160
    3432:	d6 07       	cpc	r29, r22
    3434:	41 f0       	breq	.+16     	; 0x3446 <uart_enqueue_string+0x2c8>
	if (port == &udata) {return 2;}
    3436:	88 e0       	ldi	r24, 0x08	; 8
    3438:	c0 3b       	cpi	r28, 0xB0	; 176
    343a:	d8 07       	cpc	r29, r24
    343c:	31 f4       	brne	.+12     	; 0x344a <uart_enqueue_string+0x2cc>
    343e:	22 e0       	ldi	r18, 0x02	; 2
    3440:	05 c0       	rjmp	.+10     	; 0x344c <uart_enqueue_string+0x2ce>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    3442:	20 e0       	ldi	r18, 0x00	; 0
    3444:	03 c0       	rjmp	.+6      	; 0x344c <uart_enqueue_string+0x2ce>
	if (port == &uctrl) {return 1;}
    3446:	21 e0       	ldi	r18, 0x01	; 1
    3448:	01 c0       	rjmp	.+2      	; 0x344c <uart_enqueue_string+0x2ce>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    344a:	20 e0       	ldi	r18, 0x00	; 0
}

inline uint8_t uart_dequeue(USART_t* port){
	uint8_t idx = port_map(port);
	uint16_t oldtail;
	oldtail = uart_tail[idx];
    344c:	30 e0       	ldi	r19, 0x00	; 0
    344e:	c9 01       	movw	r24, r18
    3450:	88 0f       	add	r24, r24
    3452:	99 1f       	adc	r25, r25
    3454:	f8 01       	movw	r30, r16
    3456:	e8 0f       	add	r30, r24
    3458:	f9 1f       	adc	r31, r25
    345a:	40 81       	ld	r20, Z
    345c:	51 81       	ldd	r21, Z+1	; 0x01
	uart_tail[idx]++;
    345e:	80 81       	ld	r24, Z
    3460:	91 81       	ldd	r25, Z+1	; 0x01
    3462:	01 96       	adiw	r24, 0x01	; 1
    3464:	80 83       	st	Z, r24
    3466:	91 83       	std	Z+1, r25	; 0x01
	if (uart_tail[idx] >= MAX_BUFFER_LEN){
    3468:	80 81       	ld	r24, Z
    346a:	91 81       	ldd	r25, Z+1	; 0x01
    346c:	a4 e0       	ldi	r26, 0x04	; 4
    346e:	80 30       	cpi	r24, 0x00	; 0
    3470:	9a 07       	cpc	r25, r26
    3472:	10 f0       	brcs	.+4      	; 0x3478 <uart_enqueue_string+0x2fa>
		uart_tail[idx] = 0;
    3474:	10 82       	st	Z, r1
    3476:	11 82       	std	Z+1, r1	; 0x01
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    3478:	c9 01       	movw	r24, r18
    347a:	98 2f       	mov	r25, r24
    347c:	88 27       	eor	r24, r24
    347e:	99 0f       	add	r25, r25
    3480:	99 0f       	add	r25, r25
    3482:	84 0f       	add	r24, r20
    3484:	95 1f       	adc	r25, r21
    3486:	8c 0d       	add	r24, r12
    3488:	9d 1d       	adc	r25, r13
    348a:	dc 01       	movw	r26, r24
    348c:	8c 91       	ld	r24, X
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
    348e:	88 83       	st	Y, r24
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    3490:	89 81       	ldd	r24, Y+1	; 0x01
    3492:	85 ff       	sbrs	r24, 5
    3494:	48 c0       	rjmp	.+144    	; 0x3526 <uart_enqueue_string+0x3a8>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    3496:	bb e0       	ldi	r27, 0x0B	; 11
    3498:	c0 3b       	cpi	r28, 0xB0	; 176
    349a:	db 07       	cpc	r29, r27
    349c:	51 f0       	breq	.+20     	; 0x34b2 <uart_enqueue_string+0x334>
	if (port == &uctrl) {return 1;}
    349e:	e8 e0       	ldi	r30, 0x08	; 8
    34a0:	c0 3a       	cpi	r28, 0xA0	; 160
    34a2:	de 07       	cpc	r29, r30
    34a4:	41 f0       	breq	.+16     	; 0x34b6 <uart_enqueue_string+0x338>
	if (port == &udata) {return 2;}
    34a6:	f8 e0       	ldi	r31, 0x08	; 8
    34a8:	c0 3b       	cpi	r28, 0xB0	; 176
    34aa:	df 07       	cpc	r29, r31
    34ac:	31 f4       	brne	.+12     	; 0x34ba <uart_enqueue_string+0x33c>
    34ae:	22 e0       	ldi	r18, 0x02	; 2
    34b0:	05 c0       	rjmp	.+10     	; 0x34bc <uart_enqueue_string+0x33e>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    34b2:	20 e0       	ldi	r18, 0x00	; 0
    34b4:	03 c0       	rjmp	.+6      	; 0x34bc <uart_enqueue_string+0x33e>
	if (port == &uctrl) {return 1;}
    34b6:	21 e0       	ldi	r18, 0x01	; 1
    34b8:	01 c0       	rjmp	.+2      	; 0x34bc <uart_enqueue_string+0x33e>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    34ba:	20 e0       	ldi	r18, 0x00	; 0
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    34bc:	30 e0       	ldi	r19, 0x00	; 0
    34be:	c9 01       	movw	r24, r18
    34c0:	88 0f       	add	r24, r24
    34c2:	99 1f       	adc	r25, r25
    34c4:	f7 01       	movw	r30, r14
    34c6:	e8 0f       	add	r30, r24
    34c8:	f9 1f       	adc	r31, r25
    34ca:	40 81       	ld	r20, Z
    34cc:	51 81       	ldd	r21, Z+1	; 0x01
    34ce:	f8 01       	movw	r30, r16
    34d0:	e8 0f       	add	r30, r24
    34d2:	f9 1f       	adc	r31, r25
    34d4:	80 81       	ld	r24, Z
    34d6:	91 81       	ldd	r25, Z+1	; 0x01
    34d8:	48 17       	cp	r20, r24
    34da:	59 07       	cpc	r21, r25
    34dc:	88 f0       	brcs	.+34     	; 0x3500 <uart_enqueue_string+0x382>
		return (uart_head[idx] - uart_tail[idx]);
    34de:	22 0f       	add	r18, r18
    34e0:	33 1f       	adc	r19, r19
    34e2:	f7 01       	movw	r30, r14
    34e4:	e2 0f       	add	r30, r18
    34e6:	f3 1f       	adc	r31, r19
    34e8:	40 81       	ld	r20, Z
    34ea:	51 81       	ldd	r21, Z+1	; 0x01
    34ec:	f8 01       	movw	r30, r16
    34ee:	e2 0f       	add	r30, r18
    34f0:	f3 1f       	adc	r31, r19
    34f2:	80 81       	ld	r24, Z
    34f4:	91 81       	ldd	r25, Z+1	; 0x01
    34f6:	9a 01       	movw	r18, r20
    34f8:	28 1b       	sub	r18, r24
    34fa:	39 0b       	sbc	r19, r25
    34fc:	c9 01       	movw	r24, r18
    34fe:	10 c0       	rjmp	.+32     	; 0x3520 <uart_enqueue_string+0x3a2>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    3500:	22 0f       	add	r18, r18
    3502:	33 1f       	adc	r19, r19
    3504:	f7 01       	movw	r30, r14
    3506:	e2 0f       	add	r30, r18
    3508:	f3 1f       	adc	r31, r19
    350a:	80 81       	ld	r24, Z
    350c:	91 81       	ldd	r25, Z+1	; 0x01
    350e:	f8 01       	movw	r30, r16
    3510:	e2 0f       	add	r30, r18
    3512:	f3 1f       	adc	r31, r19
    3514:	20 81       	ld	r18, Z
    3516:	31 81       	ldd	r19, Z+1	; 0x01
    3518:	80 50       	subi	r24, 0x00	; 0
    351a:	9c 4f       	sbci	r25, 0xFC	; 252
    351c:	82 1b       	sub	r24, r18
    351e:	93 0b       	sbc	r25, r19
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    3520:	00 97       	sbiw	r24, 0x00	; 0
    3522:	09 f0       	breq	.+2      	; 0x3526 <uart_enqueue_string+0x3a8>
    3524:	80 cf       	rjmp	.-256    	; 0x3426 <uart_enqueue_string+0x2a8>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    3526:	3b e0       	ldi	r19, 0x0B	; 11
    3528:	c0 3b       	cpi	r28, 0xB0	; 176
    352a:	d3 07       	cpc	r29, r19
    352c:	51 f0       	breq	.+20     	; 0x3542 <uart_enqueue_string+0x3c4>
	if (port == &uctrl) {return 1;}
    352e:	68 e0       	ldi	r22, 0x08	; 8
    3530:	c0 3a       	cpi	r28, 0xA0	; 160
    3532:	d6 07       	cpc	r29, r22
    3534:	41 f0       	breq	.+16     	; 0x3546 <uart_enqueue_string+0x3c8>
	if (port == &udata) {return 2;}
    3536:	88 e0       	ldi	r24, 0x08	; 8
    3538:	c0 3b       	cpi	r28, 0xB0	; 176
    353a:	d8 07       	cpc	r29, r24
    353c:	31 f4       	brne	.+12     	; 0x354a <uart_enqueue_string+0x3cc>
    353e:	22 e0       	ldi	r18, 0x02	; 2
    3540:	05 c0       	rjmp	.+10     	; 0x354c <uart_enqueue_string+0x3ce>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    3542:	20 e0       	ldi	r18, 0x00	; 0
    3544:	03 c0       	rjmp	.+6      	; 0x354c <uart_enqueue_string+0x3ce>
	if (port == &uctrl) {return 1;}
    3546:	21 e0       	ldi	r18, 0x01	; 1
    3548:	01 c0       	rjmp	.+2      	; 0x354c <uart_enqueue_string+0x3ce>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    354a:	20 e0       	ldi	r18, 0x00	; 0
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    354c:	30 e0       	ldi	r19, 0x00	; 0
    354e:	c9 01       	movw	r24, r18
    3550:	88 0f       	add	r24, r24
    3552:	99 1f       	adc	r25, r25
    3554:	f7 01       	movw	r30, r14
    3556:	e8 0f       	add	r30, r24
    3558:	f9 1f       	adc	r31, r25
    355a:	40 81       	ld	r20, Z
    355c:	51 81       	ldd	r21, Z+1	; 0x01
    355e:	f8 01       	movw	r30, r16
    3560:	e8 0f       	add	r30, r24
    3562:	f9 1f       	adc	r31, r25
    3564:	80 81       	ld	r24, Z
    3566:	91 81       	ldd	r25, Z+1	; 0x01
    3568:	48 17       	cp	r20, r24
    356a:	59 07       	cpc	r21, r25
    356c:	88 f0       	brcs	.+34     	; 0x3590 <uart_enqueue_string+0x412>
		return (uart_head[idx] - uart_tail[idx]);
    356e:	22 0f       	add	r18, r18
    3570:	33 1f       	adc	r19, r19
    3572:	f7 01       	movw	r30, r14
    3574:	e2 0f       	add	r30, r18
    3576:	f3 1f       	adc	r31, r19
    3578:	40 81       	ld	r20, Z
    357a:	51 81       	ldd	r21, Z+1	; 0x01
    357c:	f8 01       	movw	r30, r16
    357e:	e2 0f       	add	r30, r18
    3580:	f3 1f       	adc	r31, r19
    3582:	80 81       	ld	r24, Z
    3584:	91 81       	ldd	r25, Z+1	; 0x01
    3586:	da 01       	movw	r26, r20
    3588:	a8 1b       	sub	r26, r24
    358a:	b9 0b       	sbc	r27, r25
    358c:	cd 01       	movw	r24, r26
    358e:	10 c0       	rjmp	.+32     	; 0x35b0 <uart_enqueue_string+0x432>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    3590:	22 0f       	add	r18, r18
    3592:	33 1f       	adc	r19, r19
    3594:	f7 01       	movw	r30, r14
    3596:	e2 0f       	add	r30, r18
    3598:	f3 1f       	adc	r31, r19
    359a:	80 81       	ld	r24, Z
    359c:	91 81       	ldd	r25, Z+1	; 0x01
    359e:	f8 01       	movw	r30, r16
    35a0:	e2 0f       	add	r30, r18
    35a2:	f3 1f       	adc	r31, r19
    35a4:	20 81       	ld	r18, Z
    35a6:	31 81       	ldd	r19, Z+1	; 0x01
    35a8:	80 50       	subi	r24, 0x00	; 0
    35aa:	9c 4f       	sbci	r25, 0xFC	; 252
    35ac:	82 1b       	sub	r24, r18
    35ae:	93 0b       	sbc	r25, r19
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
	}
	//disable the tx outgoing hardware buffer ready interrupt if we have nothing more to put in it.
	if(uart_count(port)>0) uart_txbuffer_enable(port);
    35b0:	00 97       	sbiw	r24, 0x00	; 0
    35b2:	21 f0       	breq	.+8      	; 0x35bc <uart_enqueue_string+0x43e>
    35b4:	ce 01       	movw	r24, r28
    35b6:	0e 94 ce 10 	call	0x219c	; 0x219c <uart_txbuffer_enable>
    35ba:	03 c0       	rjmp	.+6      	; 0x35c2 <uart_enqueue_string+0x444>
	else uart_txbuffer_disable(port);
    35bc:	ce 01       	movw	r24, r28
    35be:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <uart_txbuffer_disable>
}

///Enqueue a string into the outgoing serial queue. Adds CR terminator to string.
inline void uart_enqueue_string(USART_t* port, char* string_in){
	uint16_t length = (uint16_t)strlen(string_in);
	for (uint16_t i=0; i<length; i++) {uart_enqueue(port, (uint8_t)string_in[i]);}
    35c2:	08 94       	sec
    35c4:	a1 1c       	adc	r10, r1
    35c6:	b1 1c       	adc	r11, r1
    35c8:	a6 14       	cp	r10, r6
    35ca:	b7 04       	cpc	r11, r7
    35cc:	09 f0       	breq	.+2      	; 0x35d0 <uart_enqueue_string+0x452>
    35ce:	09 ce       	rjmp	.-1006   	; 0x31e2 <uart_enqueue_string+0x64>
}
    35d0:	df 91       	pop	r29
    35d2:	cf 91       	pop	r28
    35d4:	1f 91       	pop	r17
    35d6:	0f 91       	pop	r16
    35d8:	ff 90       	pop	r15
    35da:	ef 90       	pop	r14
    35dc:	df 90       	pop	r13
    35de:	cf 90       	pop	r12
    35e0:	bf 90       	pop	r11
    35e2:	af 90       	pop	r10
    35e4:	9f 90       	pop	r9
    35e6:	8f 90       	pop	r8
    35e8:	7f 90       	pop	r7
    35ea:	6f 90       	pop	r6
    35ec:	5f 90       	pop	r5
    35ee:	08 95       	ret

000035f0 <uart_enqueue>:

///Enqueue date into the outgoing serial queue. This data is sent via USB to the PC's first virtual Comm Port associated with the EEICM. 
/**This is the queue used to send data back to the command and control GUI. The #define UART_DEBUG can be used to disable normal serial activity through this queue
	The blue LED is used in this routine to signal buffer overflow, which, due to the real-time scheduled nature of the EEICM firmware architecture, should not happen.
	This function is inactive when in UART DEBUG mode. Calls to this function have no effect during this period.*/
inline void uart_enqueue(USART_t* port, uint8_t datain){
    35f0:	ff 92       	push	r15
    35f2:	0f 93       	push	r16
    35f4:	1f 93       	push	r17
    35f6:	cf 93       	push	r28
    35f8:	df 93       	push	r29
    35fa:	ec 01       	movw	r28, r24
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    35fc:	2b e0       	ldi	r18, 0x0B	; 11
    35fe:	80 3b       	cpi	r24, 0xB0	; 176
    3600:	92 07       	cpc	r25, r18
    3602:	51 f0       	breq	.+20     	; 0x3618 <uart_enqueue+0x28>
	if (port == &uctrl) {return 1;}
    3604:	38 e0       	ldi	r19, 0x08	; 8
    3606:	80 3a       	cpi	r24, 0xA0	; 160
    3608:	93 07       	cpc	r25, r19
    360a:	41 f0       	breq	.+16     	; 0x361c <uart_enqueue+0x2c>
	if (port == &udata) {return 2;}
    360c:	88 e0       	ldi	r24, 0x08	; 8
    360e:	c0 3b       	cpi	r28, 0xB0	; 176
    3610:	d8 07       	cpc	r29, r24
    3612:	31 f4       	brne	.+12     	; 0x3620 <uart_enqueue+0x30>
    3614:	42 e0       	ldi	r20, 0x02	; 2
    3616:	05 c0       	rjmp	.+10     	; 0x3622 <uart_enqueue+0x32>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    3618:	40 e0       	ldi	r20, 0x00	; 0
    361a:	03 c0       	rjmp	.+6      	; 0x3622 <uart_enqueue+0x32>
	if (port == &uctrl) {return 1;}
    361c:	41 e0       	ldi	r20, 0x01	; 1
    361e:	01 c0       	rjmp	.+2      	; 0x3622 <uart_enqueue+0x32>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    3620:	40 e0       	ldi	r20, 0x00	; 0
#ifndef UART_DEBUG
	uint8_t idx = port_map(port);
	
	//if (idx==0){uart_enqueue(&uctrl, datain);} //xxx
	
	uart_buffer[idx][uart_head[idx]] = datain;
    3622:	04 2f       	mov	r16, r20
    3624:	10 e0       	ldi	r17, 0x00	; 0
    3626:	d8 01       	movw	r26, r16
    3628:	aa 0f       	add	r26, r26
    362a:	bb 1f       	adc	r27, r27
    362c:	a3 52       	subi	r26, 0x23	; 35
    362e:	be 4c       	sbci	r27, 0xCE	; 206
    3630:	2d 91       	ld	r18, X+
    3632:	3c 91       	ld	r19, X
    3634:	11 97       	sbiw	r26, 0x01	; 1
    3636:	c8 01       	movw	r24, r16
    3638:	98 2f       	mov	r25, r24
    363a:	88 27       	eor	r24, r24
    363c:	99 0f       	add	r25, r25
    363e:	99 0f       	add	r25, r25
    3640:	82 0f       	add	r24, r18
    3642:	93 1f       	adc	r25, r19
    3644:	fc 01       	movw	r30, r24
    3646:	ed 51       	subi	r30, 0x1D	; 29
    3648:	fe 4c       	sbci	r31, 0xCE	; 206
    364a:	60 83       	st	Z, r22
	uart_head[idx]++;
    364c:	8d 91       	ld	r24, X+
    364e:	9c 91       	ld	r25, X
    3650:	11 97       	sbiw	r26, 0x01	; 1
    3652:	01 96       	adiw	r24, 0x01	; 1
    3654:	8d 93       	st	X+, r24
    3656:	9c 93       	st	X, r25
    3658:	11 97       	sbiw	r26, 0x01	; 1
	if (uart_head[idx] >= MAX_BUFFER_LEN){
    365a:	8d 91       	ld	r24, X+
    365c:	9c 91       	ld	r25, X
    365e:	11 97       	sbiw	r26, 0x01	; 1
    3660:	e4 e0       	ldi	r30, 0x04	; 4
    3662:	80 30       	cpi	r24, 0x00	; 0
    3664:	9e 07       	cpc	r25, r30
    3666:	18 f0       	brcs	.+6      	; 0x366e <uart_enqueue+0x7e>
		uart_head[idx] = 0;
    3668:	fd 01       	movw	r30, r26
    366a:	10 82       	st	Z, r1
    366c:	11 82       	std	Z+1, r1	; 0x01
	}
	if (idx == 0){uart_transmit_lcd(port);} //start the transmission process.
    366e:	44 23       	and	r20, r20
    3670:	09 f4       	brne	.+2      	; 0x3674 <uart_enqueue+0x84>
    3672:	4b c0       	rjmp	.+150    	; 0x370a <uart_enqueue+0x11a>
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    3674:	89 81       	ldd	r24, Y+1	; 0x01
    3676:	85 fd       	sbrc	r24, 5
    3678:	35 c1       	rjmp	.+618    	; 0x38e4 <uart_enqueue+0x2f4>
    367a:	84 c1       	rjmp	.+776    	; 0x3984 <uart_enqueue+0x394>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    367c:	fb e0       	ldi	r31, 0x0B	; 11
    367e:	c0 3b       	cpi	r28, 0xB0	; 176
    3680:	df 07       	cpc	r29, r31
    3682:	51 f0       	breq	.+20     	; 0x3698 <uart_enqueue+0xa8>
	if (port == &uctrl) {return 1;}
    3684:	28 e0       	ldi	r18, 0x08	; 8
    3686:	c0 3a       	cpi	r28, 0xA0	; 160
    3688:	d2 07       	cpc	r29, r18
    368a:	41 f0       	breq	.+16     	; 0x369c <uart_enqueue+0xac>
	if (port == &udata) {return 2;}
    368c:	38 e0       	ldi	r19, 0x08	; 8
    368e:	c0 3b       	cpi	r28, 0xB0	; 176
    3690:	d3 07       	cpc	r29, r19
    3692:	31 f4       	brne	.+12     	; 0x36a0 <uart_enqueue+0xb0>
    3694:	22 e0       	ldi	r18, 0x02	; 2
    3696:	05 c0       	rjmp	.+10     	; 0x36a2 <uart_enqueue+0xb2>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    3698:	20 e0       	ldi	r18, 0x00	; 0
    369a:	03 c0       	rjmp	.+6      	; 0x36a2 <uart_enqueue+0xb2>
	if (port == &uctrl) {return 1;}
    369c:	21 e0       	ldi	r18, 0x01	; 1
    369e:	01 c0       	rjmp	.+2      	; 0x36a2 <uart_enqueue+0xb2>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    36a0:	20 e0       	ldi	r18, 0x00	; 0
}

inline uint8_t uart_dequeue(USART_t* port){
	uint8_t idx = port_map(port);
	uint16_t oldtail;
	oldtail = uart_tail[idx];
    36a2:	30 e0       	ldi	r19, 0x00	; 0
    36a4:	c9 01       	movw	r24, r18
    36a6:	88 0f       	add	r24, r24
    36a8:	99 1f       	adc	r25, r25
    36aa:	fb 01       	movw	r30, r22
    36ac:	e8 0f       	add	r30, r24
    36ae:	f9 1f       	adc	r31, r25
    36b0:	40 81       	ld	r20, Z
    36b2:	51 81       	ldd	r21, Z+1	; 0x01
	uart_tail[idx]++;
    36b4:	80 81       	ld	r24, Z
    36b6:	91 81       	ldd	r25, Z+1	; 0x01
    36b8:	01 96       	adiw	r24, 0x01	; 1
    36ba:	80 83       	st	Z, r24
    36bc:	91 83       	std	Z+1, r25	; 0x01
	if (uart_tail[idx] >= MAX_BUFFER_LEN){
    36be:	80 81       	ld	r24, Z
    36c0:	91 81       	ldd	r25, Z+1	; 0x01
    36c2:	e4 e0       	ldi	r30, 0x04	; 4
    36c4:	80 30       	cpi	r24, 0x00	; 0
    36c6:	9e 07       	cpc	r25, r30
    36c8:	40 f0       	brcs	.+16     	; 0x36da <uart_enqueue+0xea>
		uart_tail[idx] = 0;
    36ca:	c9 01       	movw	r24, r18
    36cc:	88 0f       	add	r24, r24
    36ce:	99 1f       	adc	r25, r25
    36d0:	86 0f       	add	r24, r22
    36d2:	97 1f       	adc	r25, r23
    36d4:	fc 01       	movw	r30, r24
    36d6:	10 82       	st	Z, r1
    36d8:	11 82       	std	Z+1, r1	; 0x01
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    36da:	c9 01       	movw	r24, r18
    36dc:	98 2f       	mov	r25, r24
    36de:	88 27       	eor	r24, r24
    36e0:	99 0f       	add	r25, r25
    36e2:	99 0f       	add	r25, r25
    36e4:	84 0f       	add	r24, r20
    36e6:	95 1f       	adc	r25, r21
    36e8:	f8 01       	movw	r30, r16
    36ea:	e8 0f       	add	r30, r24
    36ec:	f9 1f       	adc	r31, r25
    36ee:	80 81       	ld	r24, Z
void inline uart_transmit_lcd(USART_t* port){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0) && (lcd_flow_control == LCD_READY)){
		toSend = uart_dequeue(port);
		switch(toSend){
    36f0:	8a 3f       	cpi	r24, 0xFA	; 250
    36f2:	11 f0       	breq	.+4      	; 0x36f8 <uart_enqueue+0x108>
    36f4:	8e 3f       	cpi	r24, 0xFE	; 254
    36f6:	19 f4       	brne	.+6      	; 0x36fe <uart_enqueue+0x10e>
			case LCD_COMMAND:
			case LCD_MACRO:
				//Header byte just describes payload -- do not send to LCD
				lcd_flow_type = toSend;
    36f8:	80 93 d5 25 	sts	0x25D5, r24
    36fc:	10 c0       	rjmp	.+32     	; 0x371e <uart_enqueue+0x12e>
				break;
			default:
				//Payload bytes -- send to LCD
				if (toSend == 0x0D) {lcd_flow_control = LCD_BUSY;}
    36fe:	8d 30       	cpi	r24, 0x0D	; 13
    3700:	11 f4       	brne	.+4      	; 0x3706 <uart_enqueue+0x116>
    3702:	f0 92 d6 25 	sts	0x25D6, r15
				port->DATA = toSend;
    3706:	88 83       	st	Y, r24
    3708:	0a c0       	rjmp	.+20     	; 0x371e <uart_enqueue+0x12e>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    370a:	ad ed       	ldi	r26, 0xDD	; 221
    370c:	b1 e3       	ldi	r27, 0x31	; 49
    370e:	69 ee       	ldi	r22, 0xE9	; 233
    3710:	7d e3       	ldi	r23, 0x3D	; 61
		uart_tail[idx] = 0;
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    3712:	03 ee       	ldi	r16, 0xE3	; 227
    3714:	11 e3       	ldi	r17, 0x31	; 49
				//Header byte just describes payload -- do not send to LCD
				lcd_flow_type = toSend;
				break;
			default:
				//Payload bytes -- send to LCD
				if (toSend == 0x0D) {lcd_flow_control = LCD_BUSY;}
    3716:	0f 2e       	mov	r0, r31
    3718:	fe e4       	ldi	r31, 0x4E	; 78
    371a:	ff 2e       	mov	r15, r31
    371c:	f0 2d       	mov	r31, r0
}

void inline uart_transmit_lcd(USART_t* port){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0) && (lcd_flow_control == LCD_READY)){
    371e:	89 81       	ldd	r24, Y+1	; 0x01
    3720:	85 ff       	sbrs	r24, 5
    3722:	4e c0       	rjmp	.+156    	; 0x37c0 <uart_enqueue+0x1d0>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    3724:	fb e0       	ldi	r31, 0x0B	; 11
    3726:	c0 3b       	cpi	r28, 0xB0	; 176
    3728:	df 07       	cpc	r29, r31
    372a:	51 f0       	breq	.+20     	; 0x3740 <uart_enqueue+0x150>
	if (port == &uctrl) {return 1;}
    372c:	28 e0       	ldi	r18, 0x08	; 8
    372e:	c0 3a       	cpi	r28, 0xA0	; 160
    3730:	d2 07       	cpc	r29, r18
    3732:	41 f0       	breq	.+16     	; 0x3744 <uart_enqueue+0x154>
	if (port == &udata) {return 2;}
    3734:	38 e0       	ldi	r19, 0x08	; 8
    3736:	c0 3b       	cpi	r28, 0xB0	; 176
    3738:	d3 07       	cpc	r29, r19
    373a:	31 f4       	brne	.+12     	; 0x3748 <uart_enqueue+0x158>
    373c:	22 e0       	ldi	r18, 0x02	; 2
    373e:	05 c0       	rjmp	.+10     	; 0x374a <uart_enqueue+0x15a>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    3740:	20 e0       	ldi	r18, 0x00	; 0
    3742:	03 c0       	rjmp	.+6      	; 0x374a <uart_enqueue+0x15a>
	if (port == &uctrl) {return 1;}
    3744:	21 e0       	ldi	r18, 0x01	; 1
    3746:	01 c0       	rjmp	.+2      	; 0x374a <uart_enqueue+0x15a>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    3748:	20 e0       	ldi	r18, 0x00	; 0
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    374a:	30 e0       	ldi	r19, 0x00	; 0
    374c:	c9 01       	movw	r24, r18
    374e:	88 0f       	add	r24, r24
    3750:	99 1f       	adc	r25, r25
    3752:	fd 01       	movw	r30, r26
    3754:	e8 0f       	add	r30, r24
    3756:	f9 1f       	adc	r31, r25
    3758:	40 81       	ld	r20, Z
    375a:	51 81       	ldd	r21, Z+1	; 0x01
    375c:	fb 01       	movw	r30, r22
    375e:	e8 0f       	add	r30, r24
    3760:	f9 1f       	adc	r31, r25
    3762:	80 81       	ld	r24, Z
    3764:	91 81       	ldd	r25, Z+1	; 0x01
    3766:	48 17       	cp	r20, r24
    3768:	59 07       	cpc	r21, r25
    376a:	88 f0       	brcs	.+34     	; 0x378e <uart_enqueue+0x19e>
		return (uart_head[idx] - uart_tail[idx]);
    376c:	22 0f       	add	r18, r18
    376e:	33 1f       	adc	r19, r19
    3770:	fd 01       	movw	r30, r26
    3772:	e2 0f       	add	r30, r18
    3774:	f3 1f       	adc	r31, r19
    3776:	40 81       	ld	r20, Z
    3778:	51 81       	ldd	r21, Z+1	; 0x01
    377a:	fb 01       	movw	r30, r22
    377c:	e2 0f       	add	r30, r18
    377e:	f3 1f       	adc	r31, r19
    3780:	80 81       	ld	r24, Z
    3782:	91 81       	ldd	r25, Z+1	; 0x01
    3784:	fa 01       	movw	r30, r20
    3786:	e8 1b       	sub	r30, r24
    3788:	f9 0b       	sbc	r31, r25
    378a:	cf 01       	movw	r24, r30
    378c:	12 c0       	rjmp	.+36     	; 0x37b2 <uart_enqueue+0x1c2>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    378e:	c9 01       	movw	r24, r18
    3790:	88 0f       	add	r24, r24
    3792:	99 1f       	adc	r25, r25
    3794:	fd 01       	movw	r30, r26
    3796:	e8 0f       	add	r30, r24
    3798:	f9 1f       	adc	r31, r25
    379a:	40 81       	ld	r20, Z
    379c:	51 81       	ldd	r21, Z+1	; 0x01
    379e:	fb 01       	movw	r30, r22
    37a0:	e8 0f       	add	r30, r24
    37a2:	f9 1f       	adc	r31, r25
    37a4:	20 81       	ld	r18, Z
    37a6:	31 81       	ldd	r19, Z+1	; 0x01
    37a8:	ca 01       	movw	r24, r20
    37aa:	80 50       	subi	r24, 0x00	; 0
    37ac:	9c 4f       	sbci	r25, 0xFC	; 252
    37ae:	82 1b       	sub	r24, r18
    37b0:	93 0b       	sbc	r25, r19
}

void inline uart_transmit_lcd(USART_t* port){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0) && (lcd_flow_control == LCD_READY)){
    37b2:	00 97       	sbiw	r24, 0x00	; 0
    37b4:	29 f0       	breq	.+10     	; 0x37c0 <uart_enqueue+0x1d0>
    37b6:	80 91 d6 25 	lds	r24, 0x25D6
    37ba:	82 35       	cpi	r24, 0x52	; 82
    37bc:	09 f4       	brne	.+2      	; 0x37c0 <uart_enqueue+0x1d0>
    37be:	5e cf       	rjmp	.-324    	; 0x367c <uart_enqueue+0x8c>
				if (toSend == 0x0D) {lcd_flow_control = LCD_BUSY;}
				port->DATA = toSend;
				break;
		}				
	}
	uart_txbuffer_disable(port); //implemented this way to prevent periodic stalls that happen when uart_txbuffer isn't disabled quickly enough
    37c0:	ce 01       	movw	r24, r28
    37c2:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <uart_txbuffer_disable>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    37c6:	fb e0       	ldi	r31, 0x0B	; 11
    37c8:	c0 3b       	cpi	r28, 0xB0	; 176
    37ca:	df 07       	cpc	r29, r31
    37cc:	51 f0       	breq	.+20     	; 0x37e2 <uart_enqueue+0x1f2>
	if (port == &uctrl) {return 1;}
    37ce:	28 e0       	ldi	r18, 0x08	; 8
    37d0:	c0 3a       	cpi	r28, 0xA0	; 160
    37d2:	d2 07       	cpc	r29, r18
    37d4:	41 f0       	breq	.+16     	; 0x37e6 <uart_enqueue+0x1f6>
	if (port == &udata) {return 2;}
    37d6:	38 e0       	ldi	r19, 0x08	; 8
    37d8:	c0 3b       	cpi	r28, 0xB0	; 176
    37da:	d3 07       	cpc	r29, r19
    37dc:	31 f4       	brne	.+12     	; 0x37ea <uart_enqueue+0x1fa>
    37de:	22 e0       	ldi	r18, 0x02	; 2
    37e0:	05 c0       	rjmp	.+10     	; 0x37ec <uart_enqueue+0x1fc>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    37e2:	20 e0       	ldi	r18, 0x00	; 0
    37e4:	03 c0       	rjmp	.+6      	; 0x37ec <uart_enqueue+0x1fc>
	if (port == &uctrl) {return 1;}
    37e6:	21 e0       	ldi	r18, 0x01	; 1
    37e8:	01 c0       	rjmp	.+2      	; 0x37ec <uart_enqueue+0x1fc>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    37ea:	20 e0       	ldi	r18, 0x00	; 0
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    37ec:	30 e0       	ldi	r19, 0x00	; 0
    37ee:	c9 01       	movw	r24, r18
    37f0:	88 0f       	add	r24, r24
    37f2:	99 1f       	adc	r25, r25
    37f4:	fc 01       	movw	r30, r24
    37f6:	e3 52       	subi	r30, 0x23	; 35
    37f8:	fe 4c       	sbci	r31, 0xCE	; 206
    37fa:	40 81       	ld	r20, Z
    37fc:	51 81       	ldd	r21, Z+1	; 0x01
    37fe:	87 51       	subi	r24, 0x17	; 23
    3800:	92 4c       	sbci	r25, 0xC2	; 194
    3802:	fc 01       	movw	r30, r24
    3804:	80 81       	ld	r24, Z
    3806:	91 81       	ldd	r25, Z+1	; 0x01
    3808:	48 17       	cp	r20, r24
    380a:	59 07       	cpc	r21, r25
    380c:	78 f0       	brcs	.+30     	; 0x382c <uart_enqueue+0x23c>
		return (uart_head[idx] - uart_tail[idx]);
    380e:	22 0f       	add	r18, r18
    3810:	33 1f       	adc	r19, r19
    3812:	f9 01       	movw	r30, r18
    3814:	e3 52       	subi	r30, 0x23	; 35
    3816:	fe 4c       	sbci	r31, 0xCE	; 206
    3818:	40 81       	ld	r20, Z
    381a:	51 81       	ldd	r21, Z+1	; 0x01
    381c:	27 51       	subi	r18, 0x17	; 23
    381e:	32 4c       	sbci	r19, 0xC2	; 194
    3820:	f9 01       	movw	r30, r18
    3822:	80 81       	ld	r24, Z
    3824:	91 81       	ldd	r25, Z+1	; 0x01
    3826:	48 1b       	sub	r20, r24
    3828:	59 0b       	sbc	r21, r25
    382a:	10 c0       	rjmp	.+32     	; 0x384c <uart_enqueue+0x25c>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    382c:	22 0f       	add	r18, r18
    382e:	33 1f       	adc	r19, r19
    3830:	f9 01       	movw	r30, r18
    3832:	e3 52       	subi	r30, 0x23	; 35
    3834:	fe 4c       	sbci	r31, 0xCE	; 206
    3836:	40 81       	ld	r20, Z
    3838:	51 81       	ldd	r21, Z+1	; 0x01
    383a:	27 51       	subi	r18, 0x17	; 23
    383c:	32 4c       	sbci	r19, 0xC2	; 194
    383e:	f9 01       	movw	r30, r18
    3840:	80 81       	ld	r24, Z
    3842:	91 81       	ldd	r25, Z+1	; 0x01
    3844:	40 50       	subi	r20, 0x00	; 0
    3846:	5c 4f       	sbci	r21, 0xFC	; 252
    3848:	48 1b       	sub	r20, r24
    384a:	59 0b       	sbc	r21, r25
				port->DATA = toSend;
				break;
		}				
	}
	uart_txbuffer_disable(port); //implemented this way to prevent periodic stalls that happen when uart_txbuffer isn't disabled quickly enough
	if ((uart_count(port)>0) && (lcd_flow_control == LCD_READY)){ //...something is waiting to go out
    384c:	41 15       	cp	r20, r1
    384e:	51 05       	cpc	r21, r1
    3850:	09 f4       	brne	.+2      	; 0x3854 <uart_enqueue+0x264>
    3852:	e5 c0       	rjmp	.+458    	; 0x3a1e <uart_enqueue+0x42e>
    3854:	80 91 d6 25 	lds	r24, 0x25D6
    3858:	82 35       	cpi	r24, 0x52	; 82
    385a:	09 f0       	breq	.+2      	; 0x385e <uart_enqueue+0x26e>
    385c:	e0 c0       	rjmp	.+448    	; 0x3a1e <uart_enqueue+0x42e>
		uart_txbuffer_enable(port);	
    385e:	ce 01       	movw	r24, r28
    3860:	0e 94 ce 10 	call	0x219c	; 0x219c <uart_txbuffer_enable>
    3864:	dc c0       	rjmp	.+440    	; 0x3a1e <uart_enqueue+0x42e>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    3866:	fb e0       	ldi	r31, 0x0B	; 11
    3868:	c0 3b       	cpi	r28, 0xB0	; 176
    386a:	df 07       	cpc	r29, r31
    386c:	51 f0       	breq	.+20     	; 0x3882 <uart_enqueue+0x292>
	if (port == &uctrl) {return 1;}
    386e:	28 e0       	ldi	r18, 0x08	; 8
    3870:	c0 3a       	cpi	r28, 0xA0	; 160
    3872:	d2 07       	cpc	r29, r18
    3874:	41 f0       	breq	.+16     	; 0x3886 <uart_enqueue+0x296>
	if (port == &udata) {return 2;}
    3876:	38 e0       	ldi	r19, 0x08	; 8
    3878:	c0 3b       	cpi	r28, 0xB0	; 176
    387a:	d3 07       	cpc	r29, r19
    387c:	31 f4       	brne	.+12     	; 0x388a <uart_enqueue+0x29a>
    387e:	22 e0       	ldi	r18, 0x02	; 2
    3880:	05 c0       	rjmp	.+10     	; 0x388c <uart_enqueue+0x29c>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    3882:	20 e0       	ldi	r18, 0x00	; 0
    3884:	03 c0       	rjmp	.+6      	; 0x388c <uart_enqueue+0x29c>
	if (port == &uctrl) {return 1;}
    3886:	21 e0       	ldi	r18, 0x01	; 1
    3888:	01 c0       	rjmp	.+2      	; 0x388c <uart_enqueue+0x29c>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    388a:	20 e0       	ldi	r18, 0x00	; 0
}

inline uint8_t uart_dequeue(USART_t* port){
	uint8_t idx = port_map(port);
	uint16_t oldtail;
	oldtail = uart_tail[idx];
    388c:	30 e0       	ldi	r19, 0x00	; 0
    388e:	c9 01       	movw	r24, r18
    3890:	88 0f       	add	r24, r24
    3892:	99 1f       	adc	r25, r25
    3894:	fb 01       	movw	r30, r22
    3896:	e8 0f       	add	r30, r24
    3898:	f9 1f       	adc	r31, r25
    389a:	40 81       	ld	r20, Z
    389c:	51 81       	ldd	r21, Z+1	; 0x01
	uart_tail[idx]++;
    389e:	80 81       	ld	r24, Z
    38a0:	91 81       	ldd	r25, Z+1	; 0x01
    38a2:	01 96       	adiw	r24, 0x01	; 1
    38a4:	80 83       	st	Z, r24
    38a6:	91 83       	std	Z+1, r25	; 0x01
	if (uart_tail[idx] >= MAX_BUFFER_LEN){
    38a8:	80 81       	ld	r24, Z
    38aa:	91 81       	ldd	r25, Z+1	; 0x01
    38ac:	e4 e0       	ldi	r30, 0x04	; 4
    38ae:	80 30       	cpi	r24, 0x00	; 0
    38b0:	9e 07       	cpc	r25, r30
    38b2:	40 f0       	brcs	.+16     	; 0x38c4 <uart_enqueue+0x2d4>
		uart_tail[idx] = 0;
    38b4:	c9 01       	movw	r24, r18
    38b6:	88 0f       	add	r24, r24
    38b8:	99 1f       	adc	r25, r25
    38ba:	86 0f       	add	r24, r22
    38bc:	97 1f       	adc	r25, r23
    38be:	fc 01       	movw	r30, r24
    38c0:	10 82       	st	Z, r1
    38c2:	11 82       	std	Z+1, r1	; 0x01
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    38c4:	c9 01       	movw	r24, r18
    38c6:	98 2f       	mov	r25, r24
    38c8:	88 27       	eor	r24, r24
    38ca:	99 0f       	add	r25, r25
    38cc:	99 0f       	add	r25, r25
    38ce:	84 0f       	add	r24, r20
    38d0:	95 1f       	adc	r25, r21
    38d2:	f8 01       	movw	r30, r16
    38d4:	e8 0f       	add	r30, r24
    38d6:	f9 1f       	adc	r31, r25
    38d8:	80 81       	ld	r24, Z
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
    38da:	88 83       	st	Y, r24
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    38dc:	89 81       	ldd	r24, Y+1	; 0x01
    38de:	85 fd       	sbrc	r24, 5
    38e0:	07 c0       	rjmp	.+14     	; 0x38f0 <uart_enqueue+0x300>
    38e2:	50 c0       	rjmp	.+160    	; 0x3984 <uart_enqueue+0x394>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    38e4:	ad ed       	ldi	r26, 0xDD	; 221
    38e6:	b1 e3       	ldi	r27, 0x31	; 49
    38e8:	69 ee       	ldi	r22, 0xE9	; 233
    38ea:	7d e3       	ldi	r23, 0x3D	; 61
		uart_tail[idx] = 0;
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    38ec:	03 ee       	ldi	r16, 0xE3	; 227
    38ee:	11 e3       	ldi	r17, 0x31	; 49
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    38f0:	fb e0       	ldi	r31, 0x0B	; 11
    38f2:	c0 3b       	cpi	r28, 0xB0	; 176
    38f4:	df 07       	cpc	r29, r31
    38f6:	51 f0       	breq	.+20     	; 0x390c <uart_enqueue+0x31c>
	if (port == &uctrl) {return 1;}
    38f8:	28 e0       	ldi	r18, 0x08	; 8
    38fa:	c0 3a       	cpi	r28, 0xA0	; 160
    38fc:	d2 07       	cpc	r29, r18
    38fe:	41 f0       	breq	.+16     	; 0x3910 <uart_enqueue+0x320>
	if (port == &udata) {return 2;}
    3900:	38 e0       	ldi	r19, 0x08	; 8
    3902:	c0 3b       	cpi	r28, 0xB0	; 176
    3904:	d3 07       	cpc	r29, r19
    3906:	31 f4       	brne	.+12     	; 0x3914 <uart_enqueue+0x324>
    3908:	22 e0       	ldi	r18, 0x02	; 2
    390a:	05 c0       	rjmp	.+10     	; 0x3916 <uart_enqueue+0x326>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    390c:	20 e0       	ldi	r18, 0x00	; 0
    390e:	03 c0       	rjmp	.+6      	; 0x3916 <uart_enqueue+0x326>
	if (port == &uctrl) {return 1;}
    3910:	21 e0       	ldi	r18, 0x01	; 1
    3912:	01 c0       	rjmp	.+2      	; 0x3916 <uart_enqueue+0x326>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    3914:	20 e0       	ldi	r18, 0x00	; 0
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    3916:	30 e0       	ldi	r19, 0x00	; 0
    3918:	c9 01       	movw	r24, r18
    391a:	88 0f       	add	r24, r24
    391c:	99 1f       	adc	r25, r25
    391e:	fd 01       	movw	r30, r26
    3920:	e8 0f       	add	r30, r24
    3922:	f9 1f       	adc	r31, r25
    3924:	40 81       	ld	r20, Z
    3926:	51 81       	ldd	r21, Z+1	; 0x01
    3928:	fb 01       	movw	r30, r22
    392a:	e8 0f       	add	r30, r24
    392c:	f9 1f       	adc	r31, r25
    392e:	80 81       	ld	r24, Z
    3930:	91 81       	ldd	r25, Z+1	; 0x01
    3932:	48 17       	cp	r20, r24
    3934:	59 07       	cpc	r21, r25
    3936:	88 f0       	brcs	.+34     	; 0x395a <uart_enqueue+0x36a>
		return (uart_head[idx] - uart_tail[idx]);
    3938:	22 0f       	add	r18, r18
    393a:	33 1f       	adc	r19, r19
    393c:	fd 01       	movw	r30, r26
    393e:	e2 0f       	add	r30, r18
    3940:	f3 1f       	adc	r31, r19
    3942:	40 81       	ld	r20, Z
    3944:	51 81       	ldd	r21, Z+1	; 0x01
    3946:	fb 01       	movw	r30, r22
    3948:	e2 0f       	add	r30, r18
    394a:	f3 1f       	adc	r31, r19
    394c:	80 81       	ld	r24, Z
    394e:	91 81       	ldd	r25, Z+1	; 0x01
    3950:	fa 01       	movw	r30, r20
    3952:	e8 1b       	sub	r30, r24
    3954:	f9 0b       	sbc	r31, r25
    3956:	cf 01       	movw	r24, r30
    3958:	12 c0       	rjmp	.+36     	; 0x397e <uart_enqueue+0x38e>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    395a:	c9 01       	movw	r24, r18
    395c:	88 0f       	add	r24, r24
    395e:	99 1f       	adc	r25, r25
    3960:	fd 01       	movw	r30, r26
    3962:	e8 0f       	add	r30, r24
    3964:	f9 1f       	adc	r31, r25
    3966:	40 81       	ld	r20, Z
    3968:	51 81       	ldd	r21, Z+1	; 0x01
    396a:	fb 01       	movw	r30, r22
    396c:	e8 0f       	add	r30, r24
    396e:	f9 1f       	adc	r31, r25
    3970:	20 81       	ld	r18, Z
    3972:	31 81       	ldd	r19, Z+1	; 0x01
    3974:	ca 01       	movw	r24, r20
    3976:	80 50       	subi	r24, 0x00	; 0
    3978:	9c 4f       	sbci	r25, 0xFC	; 252
    397a:	82 1b       	sub	r24, r18
    397c:	93 0b       	sbc	r25, r19
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    397e:	00 97       	sbiw	r24, 0x00	; 0
    3980:	09 f0       	breq	.+2      	; 0x3984 <uart_enqueue+0x394>
    3982:	71 cf       	rjmp	.-286    	; 0x3866 <uart_enqueue+0x276>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    3984:	fb e0       	ldi	r31, 0x0B	; 11
    3986:	c0 3b       	cpi	r28, 0xB0	; 176
    3988:	df 07       	cpc	r29, r31
    398a:	51 f0       	breq	.+20     	; 0x39a0 <uart_enqueue+0x3b0>
	if (port == &uctrl) {return 1;}
    398c:	28 e0       	ldi	r18, 0x08	; 8
    398e:	c0 3a       	cpi	r28, 0xA0	; 160
    3990:	d2 07       	cpc	r29, r18
    3992:	41 f0       	breq	.+16     	; 0x39a4 <uart_enqueue+0x3b4>
	if (port == &udata) {return 2;}
    3994:	38 e0       	ldi	r19, 0x08	; 8
    3996:	c0 3b       	cpi	r28, 0xB0	; 176
    3998:	d3 07       	cpc	r29, r19
    399a:	31 f4       	brne	.+12     	; 0x39a8 <uart_enqueue+0x3b8>
    399c:	22 e0       	ldi	r18, 0x02	; 2
    399e:	05 c0       	rjmp	.+10     	; 0x39aa <uart_enqueue+0x3ba>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    39a0:	20 e0       	ldi	r18, 0x00	; 0
    39a2:	03 c0       	rjmp	.+6      	; 0x39aa <uart_enqueue+0x3ba>
	if (port == &uctrl) {return 1;}
    39a4:	21 e0       	ldi	r18, 0x01	; 1
    39a6:	01 c0       	rjmp	.+2      	; 0x39aa <uart_enqueue+0x3ba>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    39a8:	20 e0       	ldi	r18, 0x00	; 0
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    39aa:	30 e0       	ldi	r19, 0x00	; 0
    39ac:	c9 01       	movw	r24, r18
    39ae:	88 0f       	add	r24, r24
    39b0:	99 1f       	adc	r25, r25
    39b2:	fc 01       	movw	r30, r24
    39b4:	e3 52       	subi	r30, 0x23	; 35
    39b6:	fe 4c       	sbci	r31, 0xCE	; 206
    39b8:	40 81       	ld	r20, Z
    39ba:	51 81       	ldd	r21, Z+1	; 0x01
    39bc:	87 51       	subi	r24, 0x17	; 23
    39be:	92 4c       	sbci	r25, 0xC2	; 194
    39c0:	fc 01       	movw	r30, r24
    39c2:	80 81       	ld	r24, Z
    39c4:	91 81       	ldd	r25, Z+1	; 0x01
    39c6:	48 17       	cp	r20, r24
    39c8:	59 07       	cpc	r21, r25
    39ca:	78 f0       	brcs	.+30     	; 0x39ea <uart_enqueue+0x3fa>
		return (uart_head[idx] - uart_tail[idx]);
    39cc:	22 0f       	add	r18, r18
    39ce:	33 1f       	adc	r19, r19
    39d0:	f9 01       	movw	r30, r18
    39d2:	e3 52       	subi	r30, 0x23	; 35
    39d4:	fe 4c       	sbci	r31, 0xCE	; 206
    39d6:	40 81       	ld	r20, Z
    39d8:	51 81       	ldd	r21, Z+1	; 0x01
    39da:	27 51       	subi	r18, 0x17	; 23
    39dc:	32 4c       	sbci	r19, 0xC2	; 194
    39de:	f9 01       	movw	r30, r18
    39e0:	80 81       	ld	r24, Z
    39e2:	91 81       	ldd	r25, Z+1	; 0x01
    39e4:	48 1b       	sub	r20, r24
    39e6:	59 0b       	sbc	r21, r25
    39e8:	10 c0       	rjmp	.+32     	; 0x3a0a <uart_enqueue+0x41a>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    39ea:	22 0f       	add	r18, r18
    39ec:	33 1f       	adc	r19, r19
    39ee:	f9 01       	movw	r30, r18
    39f0:	e3 52       	subi	r30, 0x23	; 35
    39f2:	fe 4c       	sbci	r31, 0xCE	; 206
    39f4:	40 81       	ld	r20, Z
    39f6:	51 81       	ldd	r21, Z+1	; 0x01
    39f8:	27 51       	subi	r18, 0x17	; 23
    39fa:	32 4c       	sbci	r19, 0xC2	; 194
    39fc:	f9 01       	movw	r30, r18
    39fe:	80 81       	ld	r24, Z
    3a00:	91 81       	ldd	r25, Z+1	; 0x01
    3a02:	40 50       	subi	r20, 0x00	; 0
    3a04:	5c 4f       	sbci	r21, 0xFC	; 252
    3a06:	48 1b       	sub	r20, r24
    3a08:	59 0b       	sbc	r21, r25
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
	}
	//disable the tx outgoing hardware buffer ready interrupt if we have nothing more to put in it.
	if(uart_count(port)>0) uart_txbuffer_enable(port);
    3a0a:	41 15       	cp	r20, r1
    3a0c:	51 05       	cpc	r21, r1
    3a0e:	21 f0       	breq	.+8      	; 0x3a18 <uart_enqueue+0x428>
    3a10:	ce 01       	movw	r24, r28
    3a12:	0e 94 ce 10 	call	0x219c	; 0x219c <uart_txbuffer_enable>
    3a16:	03 c0       	rjmp	.+6      	; 0x3a1e <uart_enqueue+0x42e>
	else uart_txbuffer_disable(port);
    3a18:	ce 01       	movw	r24, r28
    3a1a:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <uart_txbuffer_disable>
	}
	if (idx == 0){uart_transmit_lcd(port);} //start the transmission process.
	else {uart_transmit(port);} //start the transmission process.}	
	
#endif
}
    3a1e:	df 91       	pop	r29
    3a20:	cf 91       	pop	r28
    3a22:	1f 91       	pop	r17
    3a24:	0f 91       	pop	r16
    3a26:	ff 90       	pop	r15
    3a28:	08 95       	ret

00003a2a <uart_dequeue>:
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    3a2a:	2b e0       	ldi	r18, 0x0B	; 11
    3a2c:	80 3b       	cpi	r24, 0xB0	; 176
    3a2e:	92 07       	cpc	r25, r18
    3a30:	51 f0       	breq	.+20     	; 0x3a46 <uart_dequeue+0x1c>
	if (port == &uctrl) {return 1;}
    3a32:	68 e0       	ldi	r22, 0x08	; 8
    3a34:	80 3a       	cpi	r24, 0xA0	; 160
    3a36:	96 07       	cpc	r25, r22
    3a38:	41 f0       	breq	.+16     	; 0x3a4a <uart_dequeue+0x20>
	if (port == &udata) {return 2;}
    3a3a:	28 e0       	ldi	r18, 0x08	; 8
    3a3c:	80 3b       	cpi	r24, 0xB0	; 176
    3a3e:	92 07       	cpc	r25, r18
    3a40:	31 f4       	brne	.+12     	; 0x3a4e <uart_dequeue+0x24>
    3a42:	22 e0       	ldi	r18, 0x02	; 2
    3a44:	05 c0       	rjmp	.+10     	; 0x3a50 <uart_dequeue+0x26>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    3a46:	20 e0       	ldi	r18, 0x00	; 0
    3a48:	03 c0       	rjmp	.+6      	; 0x3a50 <uart_dequeue+0x26>
	if (port == &uctrl) {return 1;}
    3a4a:	21 e0       	ldi	r18, 0x01	; 1
    3a4c:	01 c0       	rjmp	.+2      	; 0x3a50 <uart_dequeue+0x26>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    3a4e:	20 e0       	ldi	r18, 0x00	; 0
}

inline uint8_t uart_dequeue(USART_t* port){
	uint8_t idx = port_map(port);
	uint16_t oldtail;
	oldtail = uart_tail[idx];
    3a50:	30 e0       	ldi	r19, 0x00	; 0
    3a52:	f9 01       	movw	r30, r18
    3a54:	ee 0f       	add	r30, r30
    3a56:	ff 1f       	adc	r31, r31
    3a58:	e7 51       	subi	r30, 0x17	; 23
    3a5a:	f2 4c       	sbci	r31, 0xC2	; 194
    3a5c:	40 81       	ld	r20, Z
    3a5e:	51 81       	ldd	r21, Z+1	; 0x01
	uart_tail[idx]++;
    3a60:	80 81       	ld	r24, Z
    3a62:	91 81       	ldd	r25, Z+1	; 0x01
    3a64:	01 96       	adiw	r24, 0x01	; 1
    3a66:	80 83       	st	Z, r24
    3a68:	91 83       	std	Z+1, r25	; 0x01
	if (uart_tail[idx] >= MAX_BUFFER_LEN){
    3a6a:	80 81       	ld	r24, Z
    3a6c:	91 81       	ldd	r25, Z+1	; 0x01
    3a6e:	64 e0       	ldi	r22, 0x04	; 4
    3a70:	80 30       	cpi	r24, 0x00	; 0
    3a72:	96 07       	cpc	r25, r22
    3a74:	38 f0       	brcs	.+14     	; 0x3a84 <uart_dequeue+0x5a>
		uart_tail[idx] = 0;
    3a76:	f9 01       	movw	r30, r18
    3a78:	ee 0f       	add	r30, r30
    3a7a:	ff 1f       	adc	r31, r31
    3a7c:	e7 51       	subi	r30, 0x17	; 23
    3a7e:	f2 4c       	sbci	r31, 0xC2	; 194
    3a80:	10 82       	st	Z, r1
    3a82:	11 82       	std	Z+1, r1	; 0x01
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    3a84:	f9 01       	movw	r30, r18
    3a86:	fe 2f       	mov	r31, r30
    3a88:	ee 27       	eor	r30, r30
    3a8a:	ff 0f       	add	r31, r31
    3a8c:	ff 0f       	add	r31, r31
    3a8e:	4e 0f       	add	r20, r30
    3a90:	5f 1f       	adc	r21, r31
    3a92:	fa 01       	movw	r30, r20
    3a94:	ed 51       	subi	r30, 0x1D	; 29
    3a96:	fe 4c       	sbci	r31, 0xCE	; 206
    3a98:	80 81       	ld	r24, Z
}
    3a9a:	08 95       	ret

00003a9c <init_uart_ibuffer>:
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    3a9c:	2b e0       	ldi	r18, 0x0B	; 11
    3a9e:	80 3b       	cpi	r24, 0xB0	; 176
    3aa0:	92 07       	cpc	r25, r18
    3aa2:	51 f0       	breq	.+20     	; 0x3ab8 <init_uart_ibuffer+0x1c>
	if (port == &uctrl) {return 1;}
    3aa4:	e8 e0       	ldi	r30, 0x08	; 8
    3aa6:	80 3a       	cpi	r24, 0xA0	; 160
    3aa8:	9e 07       	cpc	r25, r30
    3aaa:	41 f0       	breq	.+16     	; 0x3abc <init_uart_ibuffer+0x20>
	if (port == &udata) {return 2;}
    3aac:	f8 e0       	ldi	r31, 0x08	; 8
    3aae:	80 3b       	cpi	r24, 0xB0	; 176
    3ab0:	9f 07       	cpc	r25, r31
    3ab2:	31 f4       	brne	.+12     	; 0x3ac0 <init_uart_ibuffer+0x24>
    3ab4:	82 e0       	ldi	r24, 0x02	; 2
    3ab6:	05 c0       	rjmp	.+10     	; 0x3ac2 <init_uart_ibuffer+0x26>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    3ab8:	80 e0       	ldi	r24, 0x00	; 0
    3aba:	03 c0       	rjmp	.+6      	; 0x3ac2 <init_uart_ibuffer+0x26>
	if (port == &uctrl) {return 1;}
    3abc:	81 e0       	ldi	r24, 0x01	; 1
    3abe:	01 c0       	rjmp	.+2      	; 0x3ac2 <init_uart_ibuffer+0x26>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    3ac0:	80 e0       	ldi	r24, 0x00	; 0
	No protection is provided for buffer overflow! Be careful! */
//***************************************************

void init_uart_ibuffer(USART_t* port){
	uint8_t idx = port_map(port);
	uart_ihead[idx] = 0;
    3ac2:	90 e0       	ldi	r25, 0x00	; 0
    3ac4:	88 0f       	add	r24, r24
    3ac6:	99 1f       	adc	r25, r25
    3ac8:	fc 01       	movw	r30, r24
    3aca:	ed 51       	subi	r30, 0x1D	; 29
    3acc:	f2 4c       	sbci	r31, 0xC2	; 194
    3ace:	10 82       	st	Z, r1
    3ad0:	11 82       	std	Z+1, r1	; 0x01
	uart_itail[idx] = 0;
    3ad2:	89 52       	subi	r24, 0x29	; 41
    3ad4:	9a 4d       	sbci	r25, 0xDA	; 218
    3ad6:	fc 01       	movw	r30, r24
    3ad8:	10 82       	st	Z, r1
    3ada:	11 82       	std	Z+1, r1	; 0x01
}
    3adc:	08 95       	ret

00003ade <init_uart_buffer>:
//** [PORT AGNOSTIC CODE]
//************************************************************************
//************************************************************************

//MAKE SURE TO INIT UART FIRST
void init_uart_buffer(USART_t* port){
    3ade:	cf 93       	push	r28
    3ae0:	df 93       	push	r29
    3ae2:	ec 01       	movw	r28, r24
	//Setup data buffers
		init_uart_obuffer(port);
    3ae4:	0e 94 57 18 	call	0x30ae	; 0x30ae <init_uart_obuffer>
		init_uart_ibuffer(port);
    3ae8:	ce 01       	movw	r24, r28
    3aea:	0e 94 4e 1d 	call	0x3a9c	; 0x3a9c <init_uart_ibuffer>
	//Enable Receive and Transmit interrupts
		uart_rxbuffer_enable(port);
    3aee:	ce 01       	movw	r24, r28
    3af0:	0e 94 c4 10 	call	0x2188	; 0x2188 <uart_rxbuffer_enable>
		uart_txbuffer_enable(port);
    3af4:	ce 01       	movw	r24, r28
    3af6:	0e 94 ce 10 	call	0x219c	; 0x219c <uart_txbuffer_enable>
}
    3afa:	df 91       	pop	r29
    3afc:	cf 91       	pop	r28
    3afe:	08 95       	ret

00003b00 <init_uart_buffers>:
SIGNAL(USARTF1_DRE_vect) {uart_transmit_lcd(&ulcd);}//TX Interrupt
SIGNAL(USARTF1_RXC_vect) {uart_receive_lcd(&ulcd);} //RX Interrupt
	
//MAKE SURE TO INIT UART FIRST
void init_uart_buffers(){
	init_uart_buffer(&uctrl);
    3b00:	80 ea       	ldi	r24, 0xA0	; 160
    3b02:	98 e0       	ldi	r25, 0x08	; 8
    3b04:	0e 94 6f 1d 	call	0x3ade	; 0x3ade <init_uart_buffer>
	init_uart_buffer(&udata);
    3b08:	80 eb       	ldi	r24, 0xB0	; 176
    3b0a:	98 e0       	ldi	r25, 0x08	; 8
    3b0c:	0e 94 6f 1d 	call	0x3ade	; 0x3ade <init_uart_buffer>
	init_uart_buffer(&ulcd);
    3b10:	80 eb       	ldi	r24, 0xB0	; 176
    3b12:	9b e0       	ldi	r25, 0x0B	; 11
    3b14:	0e 94 6f 1d 	call	0x3ade	; 0x3ade <init_uart_buffer>
}	
    3b18:	08 95       	ret

00003b1a <uart_icount>:
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    3b1a:	2b e0       	ldi	r18, 0x0B	; 11
    3b1c:	80 3b       	cpi	r24, 0xB0	; 176
    3b1e:	92 07       	cpc	r25, r18
    3b20:	51 f0       	breq	.+20     	; 0x3b36 <uart_icount+0x1c>
	if (port == &uctrl) {return 1;}
    3b22:	e8 e0       	ldi	r30, 0x08	; 8
    3b24:	80 3a       	cpi	r24, 0xA0	; 160
    3b26:	9e 07       	cpc	r25, r30
    3b28:	41 f0       	breq	.+16     	; 0x3b3a <uart_icount+0x20>
	if (port == &udata) {return 2;}
    3b2a:	f8 e0       	ldi	r31, 0x08	; 8
    3b2c:	80 3b       	cpi	r24, 0xB0	; 176
    3b2e:	9f 07       	cpc	r25, r31
    3b30:	31 f4       	brne	.+12     	; 0x3b3e <uart_icount+0x24>
    3b32:	82 e0       	ldi	r24, 0x02	; 2
    3b34:	05 c0       	rjmp	.+10     	; 0x3b40 <uart_icount+0x26>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    3b36:	80 e0       	ldi	r24, 0x00	; 0
    3b38:	03 c0       	rjmp	.+6      	; 0x3b40 <uart_icount+0x26>
	if (port == &uctrl) {return 1;}
    3b3a:	81 e0       	ldi	r24, 0x01	; 1
    3b3c:	01 c0       	rjmp	.+2      	; 0x3b40 <uart_icount+0x26>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    3b3e:	80 e0       	ldi	r24, 0x00	; 0
	uart_itail[idx] = 0;
}

inline uint16_t uart_icount(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_ihead[idx] >= uart_itail[idx]){	
    3b40:	90 e0       	ldi	r25, 0x00	; 0
    3b42:	9c 01       	movw	r18, r24
    3b44:	22 0f       	add	r18, r18
    3b46:	33 1f       	adc	r19, r19
    3b48:	f9 01       	movw	r30, r18
    3b4a:	ed 51       	subi	r30, 0x1D	; 29
    3b4c:	f2 4c       	sbci	r31, 0xC2	; 194
    3b4e:	40 81       	ld	r20, Z
    3b50:	51 81       	ldd	r21, Z+1	; 0x01
    3b52:	29 52       	subi	r18, 0x29	; 41
    3b54:	3a 4d       	sbci	r19, 0xDA	; 218
    3b56:	f9 01       	movw	r30, r18
    3b58:	20 81       	ld	r18, Z
    3b5a:	31 81       	ldd	r19, Z+1	; 0x01
    3b5c:	42 17       	cp	r20, r18
    3b5e:	53 07       	cpc	r21, r19
    3b60:	80 f0       	brcs	.+32     	; 0x3b82 <uart_icount+0x68>
		return (uart_ihead[idx] - uart_itail[idx]);
    3b62:	9c 01       	movw	r18, r24
    3b64:	22 0f       	add	r18, r18
    3b66:	33 1f       	adc	r19, r19
    3b68:	f9 01       	movw	r30, r18
    3b6a:	ed 51       	subi	r30, 0x1D	; 29
    3b6c:	f2 4c       	sbci	r31, 0xC2	; 194
    3b6e:	80 81       	ld	r24, Z
    3b70:	91 81       	ldd	r25, Z+1	; 0x01
    3b72:	29 52       	subi	r18, 0x29	; 41
    3b74:	3a 4d       	sbci	r19, 0xDA	; 218
    3b76:	f9 01       	movw	r30, r18
    3b78:	20 81       	ld	r18, Z
    3b7a:	31 81       	ldd	r19, Z+1	; 0x01
    3b7c:	82 1b       	sub	r24, r18
    3b7e:	93 0b       	sbc	r25, r19
    3b80:	08 95       	ret
	}
	else {
		return ((MAX_IBUFFER_LEN-uart_itail[idx])+uart_ihead[idx]);
    3b82:	9c 01       	movw	r18, r24
    3b84:	22 0f       	add	r18, r18
    3b86:	33 1f       	adc	r19, r19
    3b88:	f9 01       	movw	r30, r18
    3b8a:	ed 51       	subi	r30, 0x1D	; 29
    3b8c:	f2 4c       	sbci	r31, 0xC2	; 194
    3b8e:	40 81       	ld	r20, Z
    3b90:	51 81       	ldd	r21, Z+1	; 0x01
    3b92:	29 52       	subi	r18, 0x29	; 41
    3b94:	3a 4d       	sbci	r19, 0xDA	; 218
    3b96:	f9 01       	movw	r30, r18
    3b98:	20 81       	ld	r18, Z
    3b9a:	31 81       	ldd	r19, Z+1	; 0x01
    3b9c:	ca 01       	movw	r24, r20
    3b9e:	80 50       	subi	r24, 0x00	; 0
    3ba0:	9c 4f       	sbci	r25, 0xFC	; 252
    3ba2:	82 1b       	sub	r24, r18
    3ba4:	93 0b       	sbc	r25, r19
	}
}
    3ba6:	08 95       	ret

00003ba8 <uart_ienqueue>:
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    3ba8:	2b e0       	ldi	r18, 0x0B	; 11
    3baa:	80 3b       	cpi	r24, 0xB0	; 176
    3bac:	92 07       	cpc	r25, r18
    3bae:	51 f0       	breq	.+20     	; 0x3bc4 <uart_ienqueue+0x1c>
	if (port == &uctrl) {return 1;}
    3bb0:	28 e0       	ldi	r18, 0x08	; 8
    3bb2:	80 3a       	cpi	r24, 0xA0	; 160
    3bb4:	92 07       	cpc	r25, r18
    3bb6:	41 f0       	breq	.+16     	; 0x3bc8 <uart_ienqueue+0x20>
	if (port == &udata) {return 2;}
    3bb8:	28 e0       	ldi	r18, 0x08	; 8
    3bba:	80 3b       	cpi	r24, 0xB0	; 176
    3bbc:	92 07       	cpc	r25, r18
    3bbe:	31 f4       	brne	.+12     	; 0x3bcc <uart_ienqueue+0x24>
    3bc0:	42 e0       	ldi	r20, 0x02	; 2
    3bc2:	05 c0       	rjmp	.+10     	; 0x3bce <uart_ienqueue+0x26>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    3bc4:	40 e0       	ldi	r20, 0x00	; 0
    3bc6:	03 c0       	rjmp	.+6      	; 0x3bce <uart_ienqueue+0x26>
	if (port == &uctrl) {return 1;}
    3bc8:	41 e0       	ldi	r20, 0x01	; 1
    3bca:	01 c0       	rjmp	.+2      	; 0x3bce <uart_ienqueue+0x26>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    3bcc:	40 e0       	ldi	r20, 0x00	; 0
	}
}

inline void uart_ienqueue(USART_t* port, uint8_t datain){
	uint8_t idx = port_map(port);
	uart_ibuffer[idx][uart_ihead[idx]] = datain;
    3bce:	50 e0       	ldi	r21, 0x00	; 0
    3bd0:	fa 01       	movw	r30, r20
    3bd2:	ee 0f       	add	r30, r30
    3bd4:	ff 1f       	adc	r31, r31
    3bd6:	ed 51       	subi	r30, 0x1D	; 29
    3bd8:	f2 4c       	sbci	r31, 0xC2	; 194
    3bda:	80 81       	ld	r24, Z
    3bdc:	91 81       	ldd	r25, Z+1	; 0x01
    3bde:	9a 01       	movw	r18, r20
    3be0:	32 2f       	mov	r19, r18
    3be2:	22 27       	eor	r18, r18
    3be4:	33 0f       	add	r19, r19
    3be6:	33 0f       	add	r19, r19
    3be8:	82 0f       	add	r24, r18
    3bea:	93 1f       	adc	r25, r19
    3bec:	dc 01       	movw	r26, r24
    3bee:	a3 52       	subi	r26, 0x23	; 35
    3bf0:	ba 4d       	sbci	r27, 0xDA	; 218
    3bf2:	6c 93       	st	X, r22
	uart_ihead[idx]++;
    3bf4:	80 81       	ld	r24, Z
    3bf6:	91 81       	ldd	r25, Z+1	; 0x01
    3bf8:	01 96       	adiw	r24, 0x01	; 1
    3bfa:	80 83       	st	Z, r24
    3bfc:	91 83       	std	Z+1, r25	; 0x01
	if (uart_ihead[idx] >= MAX_IBUFFER_LEN){
    3bfe:	80 81       	ld	r24, Z
    3c00:	91 81       	ldd	r25, Z+1	; 0x01
    3c02:	24 e0       	ldi	r18, 0x04	; 4
    3c04:	80 30       	cpi	r24, 0x00	; 0
    3c06:	92 07       	cpc	r25, r18
    3c08:	38 f0       	brcs	.+14     	; 0x3c18 <uart_ienqueue+0x70>
		uart_ihead[idx] = 0;
    3c0a:	fa 01       	movw	r30, r20
    3c0c:	ee 0f       	add	r30, r30
    3c0e:	ff 1f       	adc	r31, r31
    3c10:	ed 51       	subi	r30, 0x1D	; 29
    3c12:	f2 4c       	sbci	r31, 0xC2	; 194
    3c14:	10 82       	st	Z, r1
    3c16:	11 82       	std	Z+1, r1	; 0x01
    3c18:	08 95       	ret

00003c1a <uart_idequeue>:
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    3c1a:	2b e0       	ldi	r18, 0x0B	; 11
    3c1c:	80 3b       	cpi	r24, 0xB0	; 176
    3c1e:	92 07       	cpc	r25, r18
    3c20:	51 f0       	breq	.+20     	; 0x3c36 <uart_idequeue+0x1c>
	if (port == &uctrl) {return 1;}
    3c22:	68 e0       	ldi	r22, 0x08	; 8
    3c24:	80 3a       	cpi	r24, 0xA0	; 160
    3c26:	96 07       	cpc	r25, r22
    3c28:	41 f0       	breq	.+16     	; 0x3c3a <uart_idequeue+0x20>
	if (port == &udata) {return 2;}
    3c2a:	28 e0       	ldi	r18, 0x08	; 8
    3c2c:	80 3b       	cpi	r24, 0xB0	; 176
    3c2e:	92 07       	cpc	r25, r18
    3c30:	31 f4       	brne	.+12     	; 0x3c3e <uart_idequeue+0x24>
    3c32:	22 e0       	ldi	r18, 0x02	; 2
    3c34:	05 c0       	rjmp	.+10     	; 0x3c40 <uart_idequeue+0x26>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    3c36:	20 e0       	ldi	r18, 0x00	; 0
    3c38:	03 c0       	rjmp	.+6      	; 0x3c40 <uart_idequeue+0x26>
	if (port == &uctrl) {return 1;}
    3c3a:	21 e0       	ldi	r18, 0x01	; 1
    3c3c:	01 c0       	rjmp	.+2      	; 0x3c40 <uart_idequeue+0x26>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    3c3e:	20 e0       	ldi	r18, 0x00	; 0

//internal implementation of peek and dequeue
inline uint8_t _uart_idequeue(USART_t* port, uint8_t peek){
	uint8_t idx = port_map(port);
	uint16_t oldtail;
	oldtail = uart_itail[idx];
    3c40:	30 e0       	ldi	r19, 0x00	; 0
    3c42:	f9 01       	movw	r30, r18
    3c44:	ee 0f       	add	r30, r30
    3c46:	ff 1f       	adc	r31, r31
    3c48:	e9 52       	subi	r30, 0x29	; 41
    3c4a:	fa 4d       	sbci	r31, 0xDA	; 218
    3c4c:	40 81       	ld	r20, Z
    3c4e:	51 81       	ldd	r21, Z+1	; 0x01
	uart_itail[idx]++;
    3c50:	80 81       	ld	r24, Z
    3c52:	91 81       	ldd	r25, Z+1	; 0x01
    3c54:	01 96       	adiw	r24, 0x01	; 1
    3c56:	80 83       	st	Z, r24
    3c58:	91 83       	std	Z+1, r25	; 0x01
	if (uart_itail[idx] >= MAX_IBUFFER_LEN){
    3c5a:	80 81       	ld	r24, Z
    3c5c:	91 81       	ldd	r25, Z+1	; 0x01
    3c5e:	64 e0       	ldi	r22, 0x04	; 4
    3c60:	80 30       	cpi	r24, 0x00	; 0
    3c62:	96 07       	cpc	r25, r22
    3c64:	38 f0       	brcs	.+14     	; 0x3c74 <uart_idequeue+0x5a>
		uart_itail[idx] = 0;
    3c66:	f9 01       	movw	r30, r18
    3c68:	ee 0f       	add	r30, r30
    3c6a:	ff 1f       	adc	r31, r31
    3c6c:	e9 52       	subi	r30, 0x29	; 41
    3c6e:	fa 4d       	sbci	r31, 0xDA	; 218
    3c70:	10 82       	st	Z, r1
    3c72:	11 82       	std	Z+1, r1	; 0x01
	}
	if (peek){uart_itail[idx] = oldtail;}
	return uart_ibuffer[idx][oldtail];
    3c74:	f9 01       	movw	r30, r18
    3c76:	fe 2f       	mov	r31, r30
    3c78:	ee 27       	eor	r30, r30
    3c7a:	ff 0f       	add	r31, r31
    3c7c:	ff 0f       	add	r31, r31
    3c7e:	4e 0f       	add	r20, r30
    3c80:	5f 1f       	adc	r21, r31
    3c82:	fa 01       	movw	r30, r20
    3c84:	e3 52       	subi	r30, 0x23	; 35
    3c86:	fa 4d       	sbci	r31, 0xDA	; 218
    3c88:	80 81       	ld	r24, Z
}

inline uint8_t uart_idequeue(USART_t* port){
	return _uart_idequeue(port, false);
}
    3c8a:	08 95       	ret

00003c8c <service_uart_buffer>:

inline void service_uart_buffer(){
    3c8c:	1f 93       	push	r17
    3c8e:	cf 93       	push	r28
    3c90:	df 93       	push	r29
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    3c92:	20 91 dd 31 	lds	r18, 0x31DD
    3c96:	30 91 de 31 	lds	r19, 0x31DE
    3c9a:	80 91 e9 3d 	lds	r24, 0x3DE9
    3c9e:	90 91 ea 3d 	lds	r25, 0x3DEA
    3ca2:	28 17       	cp	r18, r24
    3ca4:	39 07       	cpc	r19, r25
    3ca6:	58 f0       	brcs	.+22     	; 0x3cbe <service_uart_buffer+0x32>
		return (uart_head[idx] - uart_tail[idx]);
    3ca8:	80 91 dd 31 	lds	r24, 0x31DD
    3cac:	90 91 de 31 	lds	r25, 0x31DE
    3cb0:	20 91 e9 3d 	lds	r18, 0x3DE9
    3cb4:	30 91 ea 3d 	lds	r19, 0x3DEA
    3cb8:	82 1b       	sub	r24, r18
    3cba:	93 0b       	sbc	r25, r19
    3cbc:	0c c0       	rjmp	.+24     	; 0x3cd6 <service_uart_buffer+0x4a>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    3cbe:	80 91 dd 31 	lds	r24, 0x31DD
    3cc2:	90 91 de 31 	lds	r25, 0x31DE
    3cc6:	20 91 e9 3d 	lds	r18, 0x3DE9
    3cca:	30 91 ea 3d 	lds	r19, 0x3DEA
    3cce:	80 50       	subi	r24, 0x00	; 0
    3cd0:	9c 4f       	sbci	r25, 0xFC	; 252
    3cd2:	82 1b       	sub	r24, r18
    3cd4:	93 0b       	sbc	r25, r19
	return _uart_idequeue(port, false);
}

inline void service_uart_buffer(){
	//Resume transmission attempt if outgoing data still pending -- we do this so we can don't block the CPU for too long waiting for flow-control
	if (uart_count(&ulcd)>0){uart_transmit_lcd(&ulcd);}
    3cd6:	00 97       	sbiw	r24, 0x00	; 0
    3cd8:	09 f4       	brne	.+2      	; 0x3cdc <service_uart_buffer+0x50>
    3cda:	83 c0       	rjmp	.+262    	; 0x3de2 <service_uart_buffer+0x156>
    3cdc:	25 c0       	rjmp	.+74     	; 0x3d28 <service_uart_buffer+0x9c>
}

inline uint8_t uart_dequeue(USART_t* port){
	uint8_t idx = port_map(port);
	uint16_t oldtail;
	oldtail = uart_tail[idx];
    3cde:	ed 91       	ld	r30, X+
    3ce0:	fc 91       	ld	r31, X
    3ce2:	11 97       	sbiw	r26, 0x01	; 1
	uart_tail[idx]++;
    3ce4:	8d 91       	ld	r24, X+
    3ce6:	9c 91       	ld	r25, X
    3ce8:	11 97       	sbiw	r26, 0x01	; 1
    3cea:	01 96       	adiw	r24, 0x01	; 1
    3cec:	8d 93       	st	X+, r24
    3cee:	9c 93       	st	X, r25
    3cf0:	11 97       	sbiw	r26, 0x01	; 1
	if (uart_tail[idx] >= MAX_BUFFER_LEN){
    3cf2:	8d 91       	ld	r24, X+
    3cf4:	9c 91       	ld	r25, X
    3cf6:	11 97       	sbiw	r26, 0x01	; 1
    3cf8:	24 e0       	ldi	r18, 0x04	; 4
    3cfa:	80 30       	cpi	r24, 0x00	; 0
    3cfc:	92 07       	cpc	r25, r18
    3cfe:	18 f0       	brcs	.+6      	; 0x3d06 <service_uart_buffer+0x7a>
		uart_tail[idx] = 0;
    3d00:	1d 92       	st	X+, r1
    3d02:	1c 92       	st	X, r1
    3d04:	11 97       	sbiw	r26, 0x01	; 1
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    3d06:	e6 0f       	add	r30, r22
    3d08:	f7 1f       	adc	r31, r23
    3d0a:	80 81       	ld	r24, Z
void inline uart_transmit_lcd(USART_t* port){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0) && (lcd_flow_control == LCD_READY)){
		toSend = uart_dequeue(port);
		switch(toSend){
    3d0c:	8a 3f       	cpi	r24, 0xFA	; 250
    3d0e:	11 f0       	breq	.+4      	; 0x3d14 <service_uart_buffer+0x88>
    3d10:	8e 3f       	cpi	r24, 0xFE	; 254
    3d12:	19 f4       	brne	.+6      	; 0x3d1a <service_uart_buffer+0x8e>
			case LCD_COMMAND:
			case LCD_MACRO:
				//Header byte just describes payload -- do not send to LCD
				lcd_flow_type = toSend;
    3d14:	80 93 d5 25 	sts	0x25D5, r24
    3d18:	10 c0       	rjmp	.+32     	; 0x3d3a <service_uart_buffer+0xae>
				break;
			default:
				//Payload bytes -- send to LCD
				if (toSend == 0x0D) {lcd_flow_control = LCD_BUSY;}
    3d1a:	8d 30       	cpi	r24, 0x0D	; 13
    3d1c:	11 f4       	brne	.+4      	; 0x3d22 <service_uart_buffer+0x96>
    3d1e:	10 93 d6 25 	sts	0x25D6, r17
				port->DATA = toSend;
    3d22:	fa 01       	movw	r30, r20
    3d24:	80 83       	st	Z, r24
    3d26:	09 c0       	rjmp	.+18     	; 0x3d3a <service_uart_buffer+0xae>
}

void inline uart_transmit_lcd(USART_t* port){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0) && (lcd_flow_control == LCD_READY)){
    3d28:	40 eb       	ldi	r20, 0xB0	; 176
    3d2a:	5b e0       	ldi	r21, 0x0B	; 11
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    3d2c:	cd ed       	ldi	r28, 0xDD	; 221
    3d2e:	d1 e3       	ldi	r29, 0x31	; 49
    3d30:	a9 ee       	ldi	r26, 0xE9	; 233
    3d32:	bd e3       	ldi	r27, 0x3D	; 61
		uart_tail[idx] = 0;
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    3d34:	63 ee       	ldi	r22, 0xE3	; 227
    3d36:	71 e3       	ldi	r23, 0x31	; 49
				//Header byte just describes payload -- do not send to LCD
				lcd_flow_type = toSend;
				break;
			default:
				//Payload bytes -- send to LCD
				if (toSend == 0x0D) {lcd_flow_control = LCD_BUSY;}
    3d38:	1e e4       	ldi	r17, 0x4E	; 78
}

void inline uart_transmit_lcd(USART_t* port){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0) && (lcd_flow_control == LCD_READY)){
    3d3a:	fa 01       	movw	r30, r20
    3d3c:	81 81       	ldd	r24, Z+1	; 0x01
    3d3e:	85 ff       	sbrs	r24, 5
    3d40:	20 c0       	rjmp	.+64     	; 0x3d82 <service_uart_buffer+0xf6>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    3d42:	88 81       	ld	r24, Y
    3d44:	99 81       	ldd	r25, Y+1	; 0x01
    3d46:	2d 91       	ld	r18, X+
    3d48:	3c 91       	ld	r19, X
    3d4a:	11 97       	sbiw	r26, 0x01	; 1
    3d4c:	82 17       	cp	r24, r18
    3d4e:	93 07       	cpc	r25, r19
    3d50:	40 f0       	brcs	.+16     	; 0x3d62 <service_uart_buffer+0xd6>
		return (uart_head[idx] - uart_tail[idx]);
    3d52:	88 81       	ld	r24, Y
    3d54:	99 81       	ldd	r25, Y+1	; 0x01
    3d56:	2d 91       	ld	r18, X+
    3d58:	3c 91       	ld	r19, X
    3d5a:	11 97       	sbiw	r26, 0x01	; 1
    3d5c:	82 1b       	sub	r24, r18
    3d5e:	93 0b       	sbc	r25, r19
    3d60:	09 c0       	rjmp	.+18     	; 0x3d74 <service_uart_buffer+0xe8>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    3d62:	88 81       	ld	r24, Y
    3d64:	99 81       	ldd	r25, Y+1	; 0x01
    3d66:	2d 91       	ld	r18, X+
    3d68:	3c 91       	ld	r19, X
    3d6a:	11 97       	sbiw	r26, 0x01	; 1
    3d6c:	80 50       	subi	r24, 0x00	; 0
    3d6e:	9c 4f       	sbci	r25, 0xFC	; 252
    3d70:	82 1b       	sub	r24, r18
    3d72:	93 0b       	sbc	r25, r19
}

void inline uart_transmit_lcd(USART_t* port){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0) && (lcd_flow_control == LCD_READY)){
    3d74:	00 97       	sbiw	r24, 0x00	; 0
    3d76:	29 f0       	breq	.+10     	; 0x3d82 <service_uart_buffer+0xf6>
    3d78:	80 91 d6 25 	lds	r24, 0x25D6
    3d7c:	82 35       	cpi	r24, 0x52	; 82
    3d7e:	09 f4       	brne	.+2      	; 0x3d82 <service_uart_buffer+0xf6>
    3d80:	ae cf       	rjmp	.-164    	; 0x3cde <service_uart_buffer+0x52>
				if (toSend == 0x0D) {lcd_flow_control = LCD_BUSY;}
				port->DATA = toSend;
				break;
		}				
	}
	uart_txbuffer_disable(port); //implemented this way to prevent periodic stalls that happen when uart_txbuffer isn't disabled quickly enough
    3d82:	80 eb       	ldi	r24, 0xB0	; 176
    3d84:	9b e0       	ldi	r25, 0x0B	; 11
    3d86:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <uart_txbuffer_disable>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    3d8a:	20 91 dd 31 	lds	r18, 0x31DD
    3d8e:	30 91 de 31 	lds	r19, 0x31DE
    3d92:	80 91 e9 3d 	lds	r24, 0x3DE9
    3d96:	90 91 ea 3d 	lds	r25, 0x3DEA
    3d9a:	28 17       	cp	r18, r24
    3d9c:	39 07       	cpc	r19, r25
    3d9e:	58 f0       	brcs	.+22     	; 0x3db6 <service_uart_buffer+0x12a>
		return (uart_head[idx] - uart_tail[idx]);
    3da0:	80 91 dd 31 	lds	r24, 0x31DD
    3da4:	90 91 de 31 	lds	r25, 0x31DE
    3da8:	20 91 e9 3d 	lds	r18, 0x3DE9
    3dac:	30 91 ea 3d 	lds	r19, 0x3DEA
    3db0:	82 1b       	sub	r24, r18
    3db2:	93 0b       	sbc	r25, r19
    3db4:	0c c0       	rjmp	.+24     	; 0x3dce <service_uart_buffer+0x142>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    3db6:	80 91 dd 31 	lds	r24, 0x31DD
    3dba:	90 91 de 31 	lds	r25, 0x31DE
    3dbe:	20 91 e9 3d 	lds	r18, 0x3DE9
    3dc2:	30 91 ea 3d 	lds	r19, 0x3DEA
    3dc6:	80 50       	subi	r24, 0x00	; 0
    3dc8:	9c 4f       	sbci	r25, 0xFC	; 252
    3dca:	82 1b       	sub	r24, r18
    3dcc:	93 0b       	sbc	r25, r19
				port->DATA = toSend;
				break;
		}				
	}
	uart_txbuffer_disable(port); //implemented this way to prevent periodic stalls that happen when uart_txbuffer isn't disabled quickly enough
	if ((uart_count(port)>0) && (lcd_flow_control == LCD_READY)){ //...something is waiting to go out
    3dce:	00 97       	sbiw	r24, 0x00	; 0
    3dd0:	41 f0       	breq	.+16     	; 0x3de2 <service_uart_buffer+0x156>
    3dd2:	80 91 d6 25 	lds	r24, 0x25D6
    3dd6:	82 35       	cpi	r24, 0x52	; 82
    3dd8:	21 f4       	brne	.+8      	; 0x3de2 <service_uart_buffer+0x156>
		uart_txbuffer_enable(port);	
    3dda:	80 eb       	ldi	r24, 0xB0	; 176
    3ddc:	9b e0       	ldi	r25, 0x0B	; 11
    3dde:	0e 94 ce 10 	call	0x219c	; 0x219c <uart_txbuffer_enable>
}

inline void service_uart_buffer(){
	//Resume transmission attempt if outgoing data still pending -- we do this so we can don't block the CPU for too long waiting for flow-control
	if (uart_count(&ulcd)>0){uart_transmit_lcd(&ulcd);}
}
    3de2:	df 91       	pop	r29
    3de4:	cf 91       	pop	r28
    3de6:	1f 91       	pop	r17
    3de8:	08 95       	ret

00003dea <led_on>:
    3dea:	81 30       	cpi	r24, 0x01	; 1
    3dec:	61 f0       	breq	.+24     	; 0x3e06 <led_on+0x1c>
    3dee:	81 30       	cpi	r24, 0x01	; 1
    3df0:	18 f0       	brcs	.+6      	; 0x3df8 <led_on+0xe>
    3df2:	82 30       	cpi	r24, 0x02	; 2
    3df4:	a9 f4       	brne	.+42     	; 0x3e20 <led_on+0x36>
    3df6:	0e c0       	rjmp	.+28     	; 0x3e14 <led_on+0x2a>
    3df8:	8f ef       	ldi	r24, 0xFF	; 255
    3dfa:	90 e0       	ldi	r25, 0x00	; 0
    3dfc:	e0 e0       	ldi	r30, 0x00	; 0
    3dfe:	fb e0       	ldi	r31, 0x0B	; 11
    3e00:	80 af       	sts	0x70, r24
    3e02:	91 af       	sts	0x71, r25
    3e04:	08 95       	ret
    3e06:	8f ef       	ldi	r24, 0xFF	; 255
    3e08:	90 e0       	ldi	r25, 0x00	; 0
    3e0a:	e0 e0       	ldi	r30, 0x00	; 0
    3e0c:	fb e0       	ldi	r31, 0x0B	; 11
    3e0e:	82 af       	sts	0x72, r24
    3e10:	93 af       	sts	0x73, r25
    3e12:	08 95       	ret
    3e14:	8f ef       	ldi	r24, 0xFF	; 255
    3e16:	90 e0       	ldi	r25, 0x00	; 0
    3e18:	80 93 3e 0b 	sts	0x0B3E, r24
    3e1c:	90 93 3f 0b 	sts	0x0B3F, r25
    3e20:	08 95       	ret

00003e22 <led_off>:
    3e22:	81 30       	cpi	r24, 0x01	; 1
    3e24:	51 f0       	breq	.+20     	; 0x3e3a <led_off+0x18>
    3e26:	81 30       	cpi	r24, 0x01	; 1
    3e28:	18 f0       	brcs	.+6      	; 0x3e30 <led_off+0xe>
    3e2a:	82 30       	cpi	r24, 0x02	; 2
    3e2c:	79 f4       	brne	.+30     	; 0x3e4c <led_off+0x2a>
    3e2e:	0a c0       	rjmp	.+20     	; 0x3e44 <led_off+0x22>
    3e30:	e0 e0       	ldi	r30, 0x00	; 0
    3e32:	fb e0       	ldi	r31, 0x0B	; 11
    3e34:	10 ae       	sts	0xb0, r17
    3e36:	11 ae       	sts	0xb1, r17
    3e38:	08 95       	ret
    3e3a:	e0 e0       	ldi	r30, 0x00	; 0
    3e3c:	fb e0       	ldi	r31, 0x0B	; 11
    3e3e:	12 ae       	sts	0xb2, r17
    3e40:	13 ae       	sts	0xb3, r17
    3e42:	08 95       	ret
    3e44:	10 92 3e 0b 	sts	0x0B3E, r1
    3e48:	10 92 3f 0b 	sts	0x0B3F, r1
    3e4c:	08 95       	ret

00003e4e <led_dim>:
    3e4e:	81 30       	cpi	r24, 0x01	; 1
    3e50:	59 f0       	breq	.+22     	; 0x3e68 <led_dim+0x1a>
    3e52:	81 30       	cpi	r24, 0x01	; 1
    3e54:	18 f0       	brcs	.+6      	; 0x3e5c <led_dim+0xe>
    3e56:	82 30       	cpi	r24, 0x02	; 2
    3e58:	91 f4       	brne	.+36     	; 0x3e7e <led_dim+0x30>
    3e5a:	0c c0       	rjmp	.+24     	; 0x3e74 <led_dim+0x26>
    3e5c:	70 e0       	ldi	r23, 0x00	; 0
    3e5e:	e0 e0       	ldi	r30, 0x00	; 0
    3e60:	fb e0       	ldi	r31, 0x0B	; 11
    3e62:	60 af       	sts	0x70, r22
    3e64:	71 af       	sts	0x71, r23
    3e66:	08 95       	ret
    3e68:	70 e0       	ldi	r23, 0x00	; 0
    3e6a:	e0 e0       	ldi	r30, 0x00	; 0
    3e6c:	fb e0       	ldi	r31, 0x0B	; 11
    3e6e:	62 af       	sts	0x72, r22
    3e70:	73 af       	sts	0x73, r23
    3e72:	08 95       	ret
    3e74:	70 e0       	ldi	r23, 0x00	; 0
    3e76:	60 93 3e 0b 	sts	0x0B3E, r22
    3e7a:	70 93 3f 0b 	sts	0x0B3F, r23
    3e7e:	08 95       	ret

00003e80 <led_toggle>:
    3e80:	81 30       	cpi	r24, 0x01	; 1
    3e82:	59 f0       	breq	.+22     	; 0x3e9a <led_toggle+0x1a>
    3e84:	81 30       	cpi	r24, 0x01	; 1
    3e86:	18 f0       	brcs	.+6      	; 0x3e8e <led_toggle+0xe>
    3e88:	82 30       	cpi	r24, 0x02	; 2
    3e8a:	91 f4       	brne	.+36     	; 0x3eb0 <led_toggle+0x30>
    3e8c:	0c c0       	rjmp	.+24     	; 0x3ea6 <led_toggle+0x26>
    3e8e:	e0 e0       	ldi	r30, 0x00	; 0
    3e90:	fb e0       	ldi	r31, 0x0B	; 11
    3e92:	80 a5       	lds	r24, 0x60
    3e94:	80 95       	com	r24
    3e96:	80 a7       	lds	r24, 0x70
    3e98:	08 95       	ret
    3e9a:	e0 e0       	ldi	r30, 0x00	; 0
    3e9c:	fb e0       	ldi	r31, 0x0B	; 11
    3e9e:	82 a5       	lds	r24, 0x62
    3ea0:	80 95       	com	r24
    3ea2:	82 a7       	lds	r24, 0x72
    3ea4:	08 95       	ret
    3ea6:	e0 e0       	ldi	r30, 0x00	; 0
    3ea8:	fb e0       	ldi	r31, 0x0B	; 11
    3eaa:	86 a5       	lds	r24, 0x66
    3eac:	80 95       	com	r24
    3eae:	86 a7       	lds	r24, 0x76
    3eb0:	08 95       	ret

00003eb2 <audio_volume>:
    3eb2:	90 e0       	ldi	r25, 0x00	; 0
    3eb4:	e0 e0       	ldi	r30, 0x00	; 0
    3eb6:	fb e0       	ldi	r31, 0x0B	; 11
    3eb8:	84 af       	sts	0x74, r24
    3eba:	95 af       	sts	0x75, r25
    3ebc:	08 95       	ret

00003ebe <init_ui>:
    3ebe:	cf 93       	push	r28
    3ec0:	df 93       	push	r29
    3ec2:	e0 ea       	ldi	r30, 0xA0	; 160
    3ec4:	f6 e0       	ldi	r31, 0x06	; 6
    3ec6:	8f e0       	ldi	r24, 0x0F	; 15
    3ec8:	81 83       	std	Z+1, r24	; 0x01
    3eca:	80 e4       	ldi	r24, 0x40	; 64
    3ecc:	80 8b       	std	Z+16, r24	; 0x10
    3ece:	81 8b       	std	Z+17, r24	; 0x11
    3ed0:	83 8b       	std	Z+19, r24	; 0x13
    3ed2:	c0 e0       	ldi	r28, 0x00	; 0
    3ed4:	db e0       	ldi	r29, 0x0B	; 11
    3ed6:	87 e0       	ldi	r24, 0x07	; 7
    3ed8:	88 83       	st	Y, r24
    3eda:	83 ef       	ldi	r24, 0xF3	; 243
    3edc:	89 83       	std	Y+1, r24	; 0x01
    3ede:	8f ef       	ldi	r24, 0xFF	; 255
    3ee0:	90 e0       	ldi	r25, 0x00	; 0
    3ee2:	8e a3       	lds	r24, 0x5e
    3ee4:	9f a3       	lds	r25, 0x5f
    3ee6:	80 e0       	ldi	r24, 0x00	; 0
    3ee8:	0e 94 59 1f 	call	0x3eb2	; 0x3eb2 <audio_volume>
    3eec:	18 ae       	sts	0xb8, r17
    3eee:	19 ae       	sts	0xb9, r17
    3ef0:	1a ae       	sts	0xba, r17
    3ef2:	1b ae       	sts	0xbb, r17
    3ef4:	10 92 3e 0b 	sts	0x0B3E, r1
    3ef8:	10 92 3f 0b 	sts	0x0B3F, r1
    3efc:	df 91       	pop	r29
    3efe:	cf 91       	pop	r28
    3f00:	08 95       	ret

00003f02 <_audio_beep>:
    3f02:	80 91 f0 3d 	lds	r24, 0x3DF0
    3f06:	81 50       	subi	r24, 0x01	; 1
    3f08:	80 93 f0 3d 	sts	0x3DF0, r24
    3f0c:	85 e2       	ldi	r24, 0x25	; 37
    3f0e:	80 93 46 21 	sts	0x2146, r24
    3f12:	85 e0       	ldi	r24, 0x05	; 5
    3f14:	80 93 f1 3d 	sts	0x3DF1, r24
    3f18:	80 91 ef 3d 	lds	r24, 0x3DEF
    3f1c:	0e 94 59 1f 	call	0x3eb2	; 0x3eb2 <audio_volume>
    3f20:	08 95       	ret

00003f22 <audio_beep>:
    3f22:	88 23       	and	r24, r24
    3f24:	49 f0       	breq	.+18     	; 0x3f38 <audio_beep+0x16>
    3f26:	80 93 f0 3d 	sts	0x3DF0, r24
    3f2a:	61 15       	cp	r22, r1
    3f2c:	71 05       	cpc	r23, r1
    3f2e:	21 f0       	breq	.+8      	; 0x3f38 <audio_beep+0x16>
    3f30:	60 93 ef 3d 	sts	0x3DEF, r22
    3f34:	0e 94 81 1f 	call	0x3f02	; 0x3f02 <_audio_beep>
    3f38:	08 95       	ret

00003f3a <service_audio>:
    3f3a:	80 91 46 21 	lds	r24, 0x2146
    3f3e:	85 32       	cpi	r24, 0x25	; 37
    3f40:	19 f0       	breq	.+6      	; 0x3f48 <service_audio+0xe>
    3f42:	86 32       	cpi	r24, 0x26	; 38
    3f44:	19 f5       	brne	.+70     	; 0x3f8c <service_audio+0x52>
    3f46:	18 c0       	rjmp	.+48     	; 0x3f78 <service_audio+0x3e>
    3f48:	80 91 f1 3d 	lds	r24, 0x3DF1
    3f4c:	81 50       	subi	r24, 0x01	; 1
    3f4e:	80 93 f1 3d 	sts	0x3DF1, r24
    3f52:	88 23       	and	r24, r24
    3f54:	f1 f4       	brne	.+60     	; 0x3f92 <service_audio+0x58>
    3f56:	0e 94 59 1f 	call	0x3eb2	; 0x3eb2 <audio_volume>
    3f5a:	80 91 f0 3d 	lds	r24, 0x3DF0
    3f5e:	88 23       	and	r24, r24
    3f60:	21 f4       	brne	.+8      	; 0x3f6a <service_audio+0x30>
    3f62:	84 e2       	ldi	r24, 0x24	; 36
    3f64:	80 93 46 21 	sts	0x2146, r24
    3f68:	08 95       	ret
    3f6a:	86 e2       	ldi	r24, 0x26	; 38
    3f6c:	80 93 46 21 	sts	0x2146, r24
    3f70:	82 e3       	ldi	r24, 0x32	; 50
    3f72:	80 93 f1 3d 	sts	0x3DF1, r24
    3f76:	08 95       	ret
    3f78:	80 91 f1 3d 	lds	r24, 0x3DF1
    3f7c:	81 50       	subi	r24, 0x01	; 1
    3f7e:	80 93 f1 3d 	sts	0x3DF1, r24
    3f82:	88 23       	and	r24, r24
    3f84:	31 f4       	brne	.+12     	; 0x3f92 <service_audio+0x58>
    3f86:	0e 94 81 1f 	call	0x3f02	; 0x3f02 <_audio_beep>
    3f8a:	08 95       	ret
    3f8c:	80 e0       	ldi	r24, 0x00	; 0
    3f8e:	0e 94 59 1f 	call	0x3eb2	; 0x3eb2 <audio_volume>
    3f92:	08 95       	ret

00003f94 <__fixsfsi>:
    3f94:	04 d0       	rcall	.+8      	; 0x3f9e <__fixunssfsi>
    3f96:	68 94       	set
    3f98:	b1 11       	cpse	r27, r1
    3f9a:	8d c0       	rjmp	.+282    	; 0x40b6 <__fp_szero>
    3f9c:	08 95       	ret

00003f9e <__fixunssfsi>:
    3f9e:	70 d0       	rcall	.+224    	; 0x4080 <__fp_splitA>
    3fa0:	88 f0       	brcs	.+34     	; 0x3fc4 <__fixunssfsi+0x26>
    3fa2:	9f 57       	subi	r25, 0x7F	; 127
    3fa4:	90 f0       	brcs	.+36     	; 0x3fca <__fixunssfsi+0x2c>
    3fa6:	b9 2f       	mov	r27, r25
    3fa8:	99 27       	eor	r25, r25
    3faa:	b7 51       	subi	r27, 0x17	; 23
    3fac:	a0 f0       	brcs	.+40     	; 0x3fd6 <__fixunssfsi+0x38>
    3fae:	d1 f0       	breq	.+52     	; 0x3fe4 <__fixunssfsi+0x46>
    3fb0:	66 0f       	add	r22, r22
    3fb2:	77 1f       	adc	r23, r23
    3fb4:	88 1f       	adc	r24, r24
    3fb6:	99 1f       	adc	r25, r25
    3fb8:	1a f0       	brmi	.+6      	; 0x3fc0 <__fixunssfsi+0x22>
    3fba:	ba 95       	dec	r27
    3fbc:	c9 f7       	brne	.-14     	; 0x3fb0 <__fixunssfsi+0x12>
    3fbe:	12 c0       	rjmp	.+36     	; 0x3fe4 <__fixunssfsi+0x46>
    3fc0:	b1 30       	cpi	r27, 0x01	; 1
    3fc2:	81 f0       	breq	.+32     	; 0x3fe4 <__fixunssfsi+0x46>
    3fc4:	77 d0       	rcall	.+238    	; 0x40b4 <__fp_zero>
    3fc6:	b1 e0       	ldi	r27, 0x01	; 1
    3fc8:	08 95       	ret
    3fca:	74 c0       	rjmp	.+232    	; 0x40b4 <__fp_zero>
    3fcc:	67 2f       	mov	r22, r23
    3fce:	78 2f       	mov	r23, r24
    3fd0:	88 27       	eor	r24, r24
    3fd2:	b8 5f       	subi	r27, 0xF8	; 248
    3fd4:	39 f0       	breq	.+14     	; 0x3fe4 <__fixunssfsi+0x46>
    3fd6:	b9 3f       	cpi	r27, 0xF9	; 249
    3fd8:	cc f3       	brlt	.-14     	; 0x3fcc <__fixunssfsi+0x2e>
    3fda:	86 95       	lsr	r24
    3fdc:	77 95       	ror	r23
    3fde:	67 95       	ror	r22
    3fe0:	b3 95       	inc	r27
    3fe2:	d9 f7       	brne	.-10     	; 0x3fda <__fixunssfsi+0x3c>
    3fe4:	3e f4       	brtc	.+14     	; 0x3ff4 <__fixunssfsi+0x56>
    3fe6:	90 95       	com	r25
    3fe8:	80 95       	com	r24
    3fea:	70 95       	com	r23
    3fec:	61 95       	neg	r22
    3fee:	7f 4f       	sbci	r23, 0xFF	; 255
    3ff0:	8f 4f       	sbci	r24, 0xFF	; 255
    3ff2:	9f 4f       	sbci	r25, 0xFF	; 255
    3ff4:	08 95       	ret

00003ff6 <__floatunsisf>:
    3ff6:	e8 94       	clt
    3ff8:	09 c0       	rjmp	.+18     	; 0x400c <__stack+0xd>

00003ffa <__floatsisf>:
    3ffa:	97 fb       	bst	r25, 7
    3ffc:	3e f4       	brtc	.+14     	; 0x400c <__stack+0xd>
    3ffe:	90 95       	com	r25
    4000:	80 95       	com	r24
    4002:	70 95       	com	r23
    4004:	61 95       	neg	r22
    4006:	7f 4f       	sbci	r23, 0xFF	; 255
    4008:	8f 4f       	sbci	r24, 0xFF	; 255
    400a:	9f 4f       	sbci	r25, 0xFF	; 255
    400c:	99 23       	and	r25, r25
    400e:	a9 f0       	breq	.+42     	; 0x403a <__stack+0x3b>
    4010:	f9 2f       	mov	r31, r25
    4012:	96 e9       	ldi	r25, 0x96	; 150
    4014:	bb 27       	eor	r27, r27
    4016:	93 95       	inc	r25
    4018:	f6 95       	lsr	r31
    401a:	87 95       	ror	r24
    401c:	77 95       	ror	r23
    401e:	67 95       	ror	r22
    4020:	b7 95       	ror	r27
    4022:	f1 11       	cpse	r31, r1
    4024:	f8 cf       	rjmp	.-16     	; 0x4016 <__stack+0x17>
    4026:	fa f4       	brpl	.+62     	; 0x4066 <__stack+0x67>
    4028:	bb 0f       	add	r27, r27
    402a:	11 f4       	brne	.+4      	; 0x4030 <__stack+0x31>
    402c:	60 ff       	sbrs	r22, 0
    402e:	1b c0       	rjmp	.+54     	; 0x4066 <__stack+0x67>
    4030:	6f 5f       	subi	r22, 0xFF	; 255
    4032:	7f 4f       	sbci	r23, 0xFF	; 255
    4034:	8f 4f       	sbci	r24, 0xFF	; 255
    4036:	9f 4f       	sbci	r25, 0xFF	; 255
    4038:	16 c0       	rjmp	.+44     	; 0x4066 <__stack+0x67>
    403a:	88 23       	and	r24, r24
    403c:	11 f0       	breq	.+4      	; 0x4042 <__stack+0x43>
    403e:	96 e9       	ldi	r25, 0x96	; 150
    4040:	11 c0       	rjmp	.+34     	; 0x4064 <__stack+0x65>
    4042:	77 23       	and	r23, r23
    4044:	21 f0       	breq	.+8      	; 0x404e <__stack+0x4f>
    4046:	9e e8       	ldi	r25, 0x8E	; 142
    4048:	87 2f       	mov	r24, r23
    404a:	76 2f       	mov	r23, r22
    404c:	05 c0       	rjmp	.+10     	; 0x4058 <__stack+0x59>
    404e:	66 23       	and	r22, r22
    4050:	71 f0       	breq	.+28     	; 0x406e <__stack+0x6f>
    4052:	96 e8       	ldi	r25, 0x86	; 134
    4054:	86 2f       	mov	r24, r22
    4056:	70 e0       	ldi	r23, 0x00	; 0
    4058:	60 e0       	ldi	r22, 0x00	; 0
    405a:	2a f0       	brmi	.+10     	; 0x4066 <__stack+0x67>
    405c:	9a 95       	dec	r25
    405e:	66 0f       	add	r22, r22
    4060:	77 1f       	adc	r23, r23
    4062:	88 1f       	adc	r24, r24
    4064:	da f7       	brpl	.-10     	; 0x405c <__stack+0x5d>
    4066:	88 0f       	add	r24, r24
    4068:	96 95       	lsr	r25
    406a:	87 95       	ror	r24
    406c:	97 f9       	bld	r25, 7
    406e:	08 95       	ret

00004070 <__fp_split3>:
    4070:	57 fd       	sbrc	r21, 7
    4072:	90 58       	subi	r25, 0x80	; 128
    4074:	44 0f       	add	r20, r20
    4076:	55 1f       	adc	r21, r21
    4078:	59 f0       	breq	.+22     	; 0x4090 <__fp_splitA+0x10>
    407a:	5f 3f       	cpi	r21, 0xFF	; 255
    407c:	71 f0       	breq	.+28     	; 0x409a <__fp_splitA+0x1a>
    407e:	47 95       	ror	r20

00004080 <__fp_splitA>:
    4080:	88 0f       	add	r24, r24
    4082:	97 fb       	bst	r25, 7
    4084:	99 1f       	adc	r25, r25
    4086:	61 f0       	breq	.+24     	; 0x40a0 <__fp_splitA+0x20>
    4088:	9f 3f       	cpi	r25, 0xFF	; 255
    408a:	79 f0       	breq	.+30     	; 0x40aa <__fp_splitA+0x2a>
    408c:	87 95       	ror	r24
    408e:	08 95       	ret
    4090:	12 16       	cp	r1, r18
    4092:	13 06       	cpc	r1, r19
    4094:	14 06       	cpc	r1, r20
    4096:	55 1f       	adc	r21, r21
    4098:	f2 cf       	rjmp	.-28     	; 0x407e <__fp_split3+0xe>
    409a:	46 95       	lsr	r20
    409c:	f1 df       	rcall	.-30     	; 0x4080 <__fp_splitA>
    409e:	08 c0       	rjmp	.+16     	; 0x40b0 <__fp_splitA+0x30>
    40a0:	16 16       	cp	r1, r22
    40a2:	17 06       	cpc	r1, r23
    40a4:	18 06       	cpc	r1, r24
    40a6:	99 1f       	adc	r25, r25
    40a8:	f1 cf       	rjmp	.-30     	; 0x408c <__fp_splitA+0xc>
    40aa:	86 95       	lsr	r24
    40ac:	71 05       	cpc	r23, r1
    40ae:	61 05       	cpc	r22, r1
    40b0:	08 94       	sec
    40b2:	08 95       	ret

000040b4 <__fp_zero>:
    40b4:	e8 94       	clt

000040b6 <__fp_szero>:
    40b6:	bb 27       	eor	r27, r27
    40b8:	66 27       	eor	r22, r22
    40ba:	77 27       	eor	r23, r23
    40bc:	cb 01       	movw	r24, r22
    40be:	97 f9       	bld	r25, 7
    40c0:	08 95       	ret

000040c2 <__mulsf3>:
    40c2:	0b d0       	rcall	.+22     	; 0x40da <__mulsf3x>
    40c4:	78 c0       	rjmp	.+240    	; 0x41b6 <__fp_round>
    40c6:	69 d0       	rcall	.+210    	; 0x419a <__fp_pscA>
    40c8:	28 f0       	brcs	.+10     	; 0x40d4 <__mulsf3+0x12>
    40ca:	6e d0       	rcall	.+220    	; 0x41a8 <__fp_pscB>
    40cc:	18 f0       	brcs	.+6      	; 0x40d4 <__mulsf3+0x12>
    40ce:	95 23       	and	r25, r21
    40d0:	09 f0       	breq	.+2      	; 0x40d4 <__mulsf3+0x12>
    40d2:	5a c0       	rjmp	.+180    	; 0x4188 <__fp_inf>
    40d4:	5f c0       	rjmp	.+190    	; 0x4194 <__fp_nan>
    40d6:	11 24       	eor	r1, r1
    40d8:	ee cf       	rjmp	.-36     	; 0x40b6 <__fp_szero>

000040da <__mulsf3x>:
    40da:	ca df       	rcall	.-108    	; 0x4070 <__fp_split3>
    40dc:	a0 f3       	brcs	.-24     	; 0x40c6 <__mulsf3+0x4>

000040de <__mulsf3_pse>:
    40de:	95 9f       	mul	r25, r21
    40e0:	d1 f3       	breq	.-12     	; 0x40d6 <__mulsf3+0x14>
    40e2:	95 0f       	add	r25, r21
    40e4:	50 e0       	ldi	r21, 0x00	; 0
    40e6:	55 1f       	adc	r21, r21
    40e8:	62 9f       	mul	r22, r18
    40ea:	f0 01       	movw	r30, r0
    40ec:	72 9f       	mul	r23, r18
    40ee:	bb 27       	eor	r27, r27
    40f0:	f0 0d       	add	r31, r0
    40f2:	b1 1d       	adc	r27, r1
    40f4:	63 9f       	mul	r22, r19
    40f6:	aa 27       	eor	r26, r26
    40f8:	f0 0d       	add	r31, r0
    40fa:	b1 1d       	adc	r27, r1
    40fc:	aa 1f       	adc	r26, r26
    40fe:	64 9f       	mul	r22, r20
    4100:	66 27       	eor	r22, r22
    4102:	b0 0d       	add	r27, r0
    4104:	a1 1d       	adc	r26, r1
    4106:	66 1f       	adc	r22, r22
    4108:	82 9f       	mul	r24, r18
    410a:	22 27       	eor	r18, r18
    410c:	b0 0d       	add	r27, r0
    410e:	a1 1d       	adc	r26, r1
    4110:	62 1f       	adc	r22, r18
    4112:	73 9f       	mul	r23, r19
    4114:	b0 0d       	add	r27, r0
    4116:	a1 1d       	adc	r26, r1
    4118:	62 1f       	adc	r22, r18
    411a:	83 9f       	mul	r24, r19
    411c:	a0 0d       	add	r26, r0
    411e:	61 1d       	adc	r22, r1
    4120:	22 1f       	adc	r18, r18
    4122:	74 9f       	mul	r23, r20
    4124:	33 27       	eor	r19, r19
    4126:	a0 0d       	add	r26, r0
    4128:	61 1d       	adc	r22, r1
    412a:	23 1f       	adc	r18, r19
    412c:	84 9f       	mul	r24, r20
    412e:	60 0d       	add	r22, r0
    4130:	21 1d       	adc	r18, r1
    4132:	82 2f       	mov	r24, r18
    4134:	76 2f       	mov	r23, r22
    4136:	6a 2f       	mov	r22, r26
    4138:	11 24       	eor	r1, r1
    413a:	9f 57       	subi	r25, 0x7F	; 127
    413c:	50 40       	sbci	r21, 0x00	; 0
    413e:	8a f0       	brmi	.+34     	; 0x4162 <__mulsf3_pse+0x84>
    4140:	e1 f0       	breq	.+56     	; 0x417a <__mulsf3_pse+0x9c>
    4142:	88 23       	and	r24, r24
    4144:	4a f0       	brmi	.+18     	; 0x4158 <__mulsf3_pse+0x7a>
    4146:	ee 0f       	add	r30, r30
    4148:	ff 1f       	adc	r31, r31
    414a:	bb 1f       	adc	r27, r27
    414c:	66 1f       	adc	r22, r22
    414e:	77 1f       	adc	r23, r23
    4150:	88 1f       	adc	r24, r24
    4152:	91 50       	subi	r25, 0x01	; 1
    4154:	50 40       	sbci	r21, 0x00	; 0
    4156:	a9 f7       	brne	.-22     	; 0x4142 <__mulsf3_pse+0x64>
    4158:	9e 3f       	cpi	r25, 0xFE	; 254
    415a:	51 05       	cpc	r21, r1
    415c:	70 f0       	brcs	.+28     	; 0x417a <__mulsf3_pse+0x9c>
    415e:	14 c0       	rjmp	.+40     	; 0x4188 <__fp_inf>
    4160:	aa cf       	rjmp	.-172    	; 0x40b6 <__fp_szero>
    4162:	5f 3f       	cpi	r21, 0xFF	; 255
    4164:	ec f3       	brlt	.-6      	; 0x4160 <__mulsf3_pse+0x82>
    4166:	98 3e       	cpi	r25, 0xE8	; 232
    4168:	dc f3       	brlt	.-10     	; 0x4160 <__mulsf3_pse+0x82>
    416a:	86 95       	lsr	r24
    416c:	77 95       	ror	r23
    416e:	67 95       	ror	r22
    4170:	b7 95       	ror	r27
    4172:	f7 95       	ror	r31
    4174:	e7 95       	ror	r30
    4176:	9f 5f       	subi	r25, 0xFF	; 255
    4178:	c1 f7       	brne	.-16     	; 0x416a <__mulsf3_pse+0x8c>
    417a:	fe 2b       	or	r31, r30
    417c:	88 0f       	add	r24, r24
    417e:	91 1d       	adc	r25, r1
    4180:	96 95       	lsr	r25
    4182:	87 95       	ror	r24
    4184:	97 f9       	bld	r25, 7
    4186:	08 95       	ret

00004188 <__fp_inf>:
    4188:	97 f9       	bld	r25, 7
    418a:	9f 67       	ori	r25, 0x7F	; 127
    418c:	80 e8       	ldi	r24, 0x80	; 128
    418e:	70 e0       	ldi	r23, 0x00	; 0
    4190:	60 e0       	ldi	r22, 0x00	; 0
    4192:	08 95       	ret

00004194 <__fp_nan>:
    4194:	9f ef       	ldi	r25, 0xFF	; 255
    4196:	80 ec       	ldi	r24, 0xC0	; 192
    4198:	08 95       	ret

0000419a <__fp_pscA>:
    419a:	00 24       	eor	r0, r0
    419c:	0a 94       	dec	r0
    419e:	16 16       	cp	r1, r22
    41a0:	17 06       	cpc	r1, r23
    41a2:	18 06       	cpc	r1, r24
    41a4:	09 06       	cpc	r0, r25
    41a6:	08 95       	ret

000041a8 <__fp_pscB>:
    41a8:	00 24       	eor	r0, r0
    41aa:	0a 94       	dec	r0
    41ac:	12 16       	cp	r1, r18
    41ae:	13 06       	cpc	r1, r19
    41b0:	14 06       	cpc	r1, r20
    41b2:	05 06       	cpc	r0, r21
    41b4:	08 95       	ret

000041b6 <__fp_round>:
    41b6:	09 2e       	mov	r0, r25
    41b8:	03 94       	inc	r0
    41ba:	00 0c       	add	r0, r0
    41bc:	11 f4       	brne	.+4      	; 0x41c2 <__fp_round+0xc>
    41be:	88 23       	and	r24, r24
    41c0:	52 f0       	brmi	.+20     	; 0x41d6 <__fp_round+0x20>
    41c2:	bb 0f       	add	r27, r27
    41c4:	40 f4       	brcc	.+16     	; 0x41d6 <__fp_round+0x20>
    41c6:	bf 2b       	or	r27, r31
    41c8:	11 f4       	brne	.+4      	; 0x41ce <__fp_round+0x18>
    41ca:	60 ff       	sbrs	r22, 0
    41cc:	04 c0       	rjmp	.+8      	; 0x41d6 <__fp_round+0x20>
    41ce:	6f 5f       	subi	r22, 0xFF	; 255
    41d0:	7f 4f       	sbci	r23, 0xFF	; 255
    41d2:	8f 4f       	sbci	r24, 0xFF	; 255
    41d4:	9f 4f       	sbci	r25, 0xFF	; 255
    41d6:	08 95       	ret

000041d8 <utoa>:
    41d8:	fb 01       	movw	r30, r22
    41da:	9f 01       	movw	r18, r30
    41dc:	42 30       	cpi	r20, 0x02	; 2
    41de:	74 f0       	brlt	.+28     	; 0x41fc <utoa+0x24>
    41e0:	45 32       	cpi	r20, 0x25	; 37
    41e2:	64 f4       	brge	.+24     	; 0x41fc <utoa+0x24>
    41e4:	64 2f       	mov	r22, r20
    41e6:	77 27       	eor	r23, r23
    41e8:	0e 94 12 21 	call	0x4224	; 0x4224 <__udivmodhi4>
    41ec:	80 5d       	subi	r24, 0xD0	; 208
    41ee:	8a 33       	cpi	r24, 0x3A	; 58
    41f0:	0c f0       	brlt	.+2      	; 0x41f4 <utoa+0x1c>
    41f2:	89 5d       	subi	r24, 0xD9	; 217
    41f4:	81 93       	st	Z+, r24
    41f6:	cb 01       	movw	r24, r22
    41f8:	00 97       	sbiw	r24, 0x00	; 0
    41fa:	a1 f7       	brne	.-24     	; 0x41e4 <utoa+0xc>
    41fc:	10 82       	st	Z, r1
    41fe:	c9 01       	movw	r24, r18
    4200:	0c 94 02 21 	jmp	0x4204	; 0x4204 <strrev>

00004204 <strrev>:
    4204:	dc 01       	movw	r26, r24
    4206:	fc 01       	movw	r30, r24
    4208:	67 2f       	mov	r22, r23
    420a:	71 91       	ld	r23, Z+
    420c:	77 23       	and	r23, r23
    420e:	e1 f7       	brne	.-8      	; 0x4208 <strrev+0x4>
    4210:	32 97       	sbiw	r30, 0x02	; 2
    4212:	04 c0       	rjmp	.+8      	; 0x421c <strrev+0x18>
    4214:	7c 91       	ld	r23, X
    4216:	6d 93       	st	X+, r22
    4218:	70 83       	st	Z, r23
    421a:	62 91       	ld	r22, -Z
    421c:	ae 17       	cp	r26, r30
    421e:	bf 07       	cpc	r27, r31
    4220:	c8 f3       	brcs	.-14     	; 0x4214 <strrev+0x10>
    4222:	08 95       	ret

00004224 <__udivmodhi4>:
    4224:	aa 1b       	sub	r26, r26
    4226:	bb 1b       	sub	r27, r27
    4228:	51 e1       	ldi	r21, 0x11	; 17
    422a:	07 c0       	rjmp	.+14     	; 0x423a <__udivmodhi4_ep>

0000422c <__udivmodhi4_loop>:
    422c:	aa 1f       	adc	r26, r26
    422e:	bb 1f       	adc	r27, r27
    4230:	a6 17       	cp	r26, r22
    4232:	b7 07       	cpc	r27, r23
    4234:	10 f0       	brcs	.+4      	; 0x423a <__udivmodhi4_ep>
    4236:	a6 1b       	sub	r26, r22
    4238:	b7 0b       	sbc	r27, r23

0000423a <__udivmodhi4_ep>:
    423a:	88 1f       	adc	r24, r24
    423c:	99 1f       	adc	r25, r25
    423e:	5a 95       	dec	r21
    4240:	a9 f7       	brne	.-22     	; 0x422c <__udivmodhi4_loop>
    4242:	80 95       	com	r24
    4244:	90 95       	com	r25
    4246:	bc 01       	movw	r22, r24
    4248:	cd 01       	movw	r24, r26
    424a:	08 95       	ret

0000424c <_exit>:
    424c:	f8 94       	cli

0000424e <__stop_program>:
    424e:	ff cf       	rjmp	.-2      	; 0x424e <__stop_program>
