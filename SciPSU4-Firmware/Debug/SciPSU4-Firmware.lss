
SciPSU4-Firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000065c2  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000232  00802000  000065c2  00006676  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00001cdd  00802232  00802232  000068a8  2**0
                  ALLOC
  3 .eeprom       00000011  00810000  00810000  000068a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         00002790  00000000  00000000  000068bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      00000a1e  00000000  00000000  0000904c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 00000260  00000000  00000000  00009a70  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00007b8d  00000000  00000000  00009cd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014cd  00000000  00000000  0001185d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000283b  00000000  00000000  00012d2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000011a0  00000000  00000000  00015568  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000176d  00000000  00000000  00016708  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000413b  00000000  00000000  00017e75  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000858  00000000  00000000  0001bfb0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__ctors_end>
       4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
       8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
       c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      10:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      14:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      18:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      1c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      20:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      24:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      28:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      2c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      30:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      34:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      38:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      3c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      40:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      44:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      48:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      4c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      50:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      54:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      58:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      5c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      60:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      64:	0c 94 6f 1b 	jmp	0x36de	; 0x36de <__vector_25>
      68:	0c 94 02 1d 	jmp	0x3a04	; 0x3a04 <__vector_26>
      6c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      70:	0c 94 dd 1b 	jmp	0x37ba	; 0x37ba <__vector_28>
      74:	0c 94 5f 1c 	jmp	0x38be	; 0x38be <__vector_29>
      78:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      7c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      80:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      84:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      88:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      8c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      90:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      94:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      98:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      9c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      a0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      a4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      a8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      ac:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      b0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      b4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      b8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      bc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      c0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      c4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      c8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      cc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      d0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      d4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      d8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      dc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      e0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      e4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      e8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      ec:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      f0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      f4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      f8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      fc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     100:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     104:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     108:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     10c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     110:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     114:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     118:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     11c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     120:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     124:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     128:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     12c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     130:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     134:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     138:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     13c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     140:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     144:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     148:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     14c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     150:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     154:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     158:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     15c:	0c 94 22 14 	jmp	0x2844	; 0x2844 <__vector_87>
     160:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     164:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     168:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     16c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     170:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     174:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     178:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     17c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     180:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     184:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     188:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     18c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     190:	0c 94 09 16 	jmp	0x2c12	; 0x2c12 <__vector_100>
     194:	0c 94 71 16 	jmp	0x2ce2	; 0x2ce2 <__vector_101>
     198:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     19c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1a0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1a4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1a8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1ac:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1b0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1b4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1b8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1bc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1c0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1c4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1c8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1cc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1d0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1d4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1d8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1dc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1e0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1e4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1e8:	0c 94 71 22 	jmp	0x44e2	; 0x44e2 <__vector_122>
     1ec:	0c 94 9f 20 	jmp	0x413e	; 0x413e <__vector_123>
     1f0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>

000001f4 <__ctors_end>:
     1f4:	11 24       	eor	r1, r1
     1f6:	1f be       	out	0x3f, r1	; 63
     1f8:	cf ef       	ldi	r28, 0xFF	; 255
     1fa:	df e3       	ldi	r29, 0x3F	; 63
     1fc:	de bf       	out	0x3e, r29	; 62
     1fe:	cd bf       	out	0x3d, r28	; 61
     200:	00 e0       	ldi	r16, 0x00	; 0
     202:	0c bf       	out	0x3c, r16	; 60
     204:	18 be       	out	0x38, r1	; 56
     206:	19 be       	out	0x39, r1	; 57
     208:	1a be       	out	0x3a, r1	; 58
     20a:	1b be       	out	0x3b, r1	; 59

0000020c <__do_copy_data>:
     20c:	12 e2       	ldi	r17, 0x22	; 34
     20e:	a0 e0       	ldi	r26, 0x00	; 0
     210:	b0 e2       	ldi	r27, 0x20	; 32
     212:	e2 ec       	ldi	r30, 0xC2	; 194
     214:	f5 e6       	ldi	r31, 0x65	; 101
     216:	00 e0       	ldi	r16, 0x00	; 0
     218:	0b bf       	out	0x3b, r16	; 59
     21a:	02 c0       	rjmp	.+4      	; 0x220 <__do_copy_data+0x14>
     21c:	07 90       	elpm	r0, Z+
     21e:	0d 92       	st	X+, r0
     220:	a2 33       	cpi	r26, 0x32	; 50
     222:	b1 07       	cpc	r27, r17
     224:	d9 f7       	brne	.-10     	; 0x21c <__do_copy_data+0x10>

00000226 <__do_clear_bss>:
     226:	1f e3       	ldi	r17, 0x3F	; 63
     228:	a2 e3       	ldi	r26, 0x32	; 50
     22a:	b2 e2       	ldi	r27, 0x22	; 34
     22c:	01 c0       	rjmp	.+2      	; 0x230 <.do_clear_bss_start>

0000022e <.do_clear_bss_loop>:
     22e:	1d 92       	st	X+, r1

00000230 <.do_clear_bss_start>:
     230:	af 30       	cpi	r26, 0x0F	; 15
     232:	b1 07       	cpc	r27, r17
     234:	e1 f7       	brne	.-8      	; 0x22e <.do_clear_bss_loop>
     236:	0e 94 48 15 	call	0x2a90	; 0x2a90 <main>
     23a:	0c 94 df 32 	jmp	0x65be	; 0x65be <_exit>

0000023e <__bad_interrupt>:
     23e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000242 <adc_read_cal_byte>:

///http://www.bostonandroid.com/manuals/xmega-precision-adc-howto.html
uint8_t adc_read_cal_byte( uint8_t index ){
	uint8_t result;
	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
     242:	aa ec       	ldi	r26, 0xCA	; 202
     244:	b1 e0       	ldi	r27, 0x01	; 1
     246:	92 e0       	ldi	r25, 0x02	; 2
     248:	9c 93       	st	X, r25
	result = pgm_read_byte(index);
     24a:	e8 2f       	mov	r30, r24
     24c:	f0 e0       	ldi	r31, 0x00	; 0
     24e:	84 91       	lpm	r24, Z
	/* Clean up NVM Command register. */
	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
     250:	1c 92       	st	X, r1
	return( result );
}
     252:	08 95       	ret

00000254 <adc_bank_select>:
//#############################################################
//## ADCs -- OPERATION
//#############################################################

void adc_bank_select(uint8_t which){
	if(which % 2){
     254:	80 ff       	sbrs	r24, 0
     256:	10 c0       	rjmp	.+32     	; 0x278 <adc_bank_select+0x24>
		ADCA.CH0.MUXCTRL = B8(00000000); //CH0 converts from PA0
     258:	e0 e0       	ldi	r30, 0x00	; 0
     25a:	f2 e0       	ldi	r31, 0x02	; 2
     25c:	11 a2       	lds	r17, 0x91
		ADCA.CH1.MUXCTRL = B8(00001000); //CH1 converts from PA1
     25e:	28 e0       	ldi	r18, 0x08	; 8
     260:	21 a7       	lds	r18, 0x71
		ADCA.CH2.MUXCTRL = B8(00010000); //CH2 converts from PA2
     262:	90 e1       	ldi	r25, 0x10	; 16
     264:	91 ab       	sts	0x51, r25
		ADCA.CH3.MUXCTRL = B8(00011000); //CH3 converts from PA3
     266:	88 e1       	ldi	r24, 0x18	; 24
     268:	81 af       	sts	0x71, r24
		ADCB.CH0.MUXCTRL = B8(00000000); //CH0 converts from PB0
     26a:	e0 e4       	ldi	r30, 0x40	; 64
     26c:	f2 e0       	ldi	r31, 0x02	; 2
     26e:	11 a2       	lds	r17, 0x91
		ADCB.CH1.MUXCTRL = B8(00001000); //CH1 converts from PB1
     270:	21 a7       	lds	r18, 0x71
		ADCB.CH2.MUXCTRL = B8(00010000); //CH2 converts from PB2
     272:	91 ab       	sts	0x51, r25
		ADCB.CH3.MUXCTRL = B8(00011000); //CH3 converts from PB3
     274:	81 af       	sts	0x71, r24
     276:	08 95       	ret
	}
	else {
		ADCA.CH0.MUXCTRL = B8(00100000); //CH0 converts from PA4
     278:	e0 e0       	ldi	r30, 0x00	; 0
     27a:	f2 e0       	ldi	r31, 0x02	; 2
     27c:	30 e2       	ldi	r19, 0x20	; 32
     27e:	31 a3       	lds	r19, 0x51
		ADCA.CH1.MUXCTRL = B8(00101000); //CH1 converts from PA5
     280:	28 e2       	ldi	r18, 0x28	; 40
     282:	21 a7       	lds	r18, 0x71
		ADCA.CH2.MUXCTRL = B8(00110000); //CH2 converts from PA6
     284:	90 e3       	ldi	r25, 0x30	; 48
     286:	91 ab       	sts	0x51, r25
		ADCA.CH3.MUXCTRL = B8(00111000); //CH3 converts from PA7
     288:	88 e3       	ldi	r24, 0x38	; 56
     28a:	81 af       	sts	0x71, r24
		ADCB.CH0.MUXCTRL = B8(00100000); //CH0 converts from PB4
     28c:	e0 e4       	ldi	r30, 0x40	; 64
     28e:	f2 e0       	ldi	r31, 0x02	; 2
     290:	31 a3       	lds	r19, 0x51
		ADCB.CH1.MUXCTRL = B8(00101000); //CH1 converts from PB5
     292:	21 a7       	lds	r18, 0x71
		ADCB.CH2.MUXCTRL = B8(00110000); //CH2 converts from PB6
     294:	91 ab       	sts	0x51, r25
		ADCB.CH3.MUXCTRL = B8(00111000); //CH3 converts from PB7	
     296:	81 af       	sts	0x71, r24
     298:	08 95       	ret

0000029a <adc_convert>:
	}
}	

void adc_convert(){
	ADCA.CTRLA |= B8(00111100); //Start conversions on all four channels
     29a:	e0 e0       	ldi	r30, 0x00	; 0
     29c:	f2 e0       	ldi	r31, 0x02	; 2
     29e:	80 81       	ld	r24, Z
     2a0:	8c 63       	ori	r24, 0x3C	; 60
     2a2:	80 83       	st	Z, r24
	ADCB.CTRLA |= B8(00111100); //Start conversions on all four channels
     2a4:	e0 e4       	ldi	r30, 0x40	; 64
     2a6:	f2 e0       	ldi	r31, 0x02	; 2
     2a8:	80 81       	ld	r24, Z
     2aa:	8c 63       	ori	r24, 0x3C	; 60
     2ac:	80 83       	st	Z, r24
}
     2ae:	08 95       	ret

000002b0 <init_adc>:

//#############################################################
//## ADCs -- INITIALIZATION
//#############################################################

void init_adc(){	
     2b0:	cf 92       	push	r12
     2b2:	df 92       	push	r13
     2b4:	ef 92       	push	r14
     2b6:	ff 92       	push	r15
     2b8:	0f 93       	push	r16
     2ba:	1f 93       	push	r17
     2bc:	cf 93       	push	r28
     2be:	df 93       	push	r29
	//ADC A
	ADCA.CALL = adc_read_cal_byte( offsetof(NVM_PROD_SIGNATURES_t, ADCACAL0) );
     2c0:	80 e2       	ldi	r24, 0x20	; 32
     2c2:	0e 94 21 01 	call	0x242	; 0x242 <adc_read_cal_byte>
     2c6:	c0 e0       	ldi	r28, 0x00	; 0
     2c8:	d2 e0       	ldi	r29, 0x02	; 2
     2ca:	8c 87       	std	Y+12, r24	; 0x0c
	ADCA.CALH = adc_read_cal_byte( offsetof(NVM_PROD_SIGNATURES_t, ADCACAL1) );
     2cc:	81 e2       	ldi	r24, 0x21	; 33
     2ce:	0e 94 21 01 	call	0x242	; 0x242 <adc_read_cal_byte>
     2d2:	8d 87       	std	Y+13, r24	; 0x0d
	ADCA.PRESCALER = B8(00000111); //ADC clock = Peripheral clock / 512 (maximum resolution/accuracy)
     2d4:	0f 2e       	mov	r0, r31
     2d6:	f7 e0       	ldi	r31, 0x07	; 7
     2d8:	ef 2e       	mov	r14, r31
     2da:	f0 2d       	mov	r31, r0
     2dc:	ec 82       	std	Y+4, r14	; 0x04
	ADCA.REFCTRL = B8(00010011); //Use AVCC/1.6 = 2.063V as reference (highest allowed); Enable BandGap Reference and Temperature Sensor (internal)
     2de:	0f 2e       	mov	r0, r31
     2e0:	f3 e1       	ldi	r31, 0x13	; 19
     2e2:	df 2e       	mov	r13, r31
     2e4:	f0 2d       	mov	r31, r0
     2e6:	da 82       	std	Y+2, r13	; 0x02
	ADCA.CTRLB = B8(00000110); //12bit-left adjusted; One-shot conversion; unsigned mode;
     2e8:	0f 2e       	mov	r0, r31
     2ea:	f6 e0       	ldi	r31, 0x06	; 6
     2ec:	cf 2e       	mov	r12, r31
     2ee:	f0 2d       	mov	r31, r0
     2f0:	c9 82       	std	Y+1, r12	; 0x01
	ADCA.CTRLA = B8(00000001); //Enable ADC;
     2f2:	ff 24       	eor	r15, r15
     2f4:	f3 94       	inc	r15
     2f6:	f8 82       	st	Y, r15
	ADCA.CH0.CTRL = B8(00000001); //Single ended input mode; No gain
     2f8:	f8 a2       	lds	r31, 0x98
	ADCA.CH1.CTRL = B8(00000001); //Single ended input mode; No gain
     2fa:	f8 a6       	lds	r31, 0xb8
	ADCA.CH2.CTRL = B8(00000001); //Single ended input mode; No gain
     2fc:	f8 aa       	sts	0x98, r31
	ADCA.CH3.CTRL = B8(00000001); //Single ended input mode; No gain
     2fe:	f8 ae       	sts	0xb8, r31
	
	//ADC B
	ADCB.CALL = adc_read_cal_byte( offsetof(NVM_PROD_SIGNATURES_t, ADCBCAL0) );
     300:	84 e2       	ldi	r24, 0x24	; 36
     302:	0e 94 21 01 	call	0x242	; 0x242 <adc_read_cal_byte>
     306:	00 e4       	ldi	r16, 0x40	; 64
     308:	12 e0       	ldi	r17, 0x02	; 2
     30a:	f8 01       	movw	r30, r16
     30c:	84 87       	std	Z+12, r24	; 0x0c
	ADCB.CALH = adc_read_cal_byte( offsetof(NVM_PROD_SIGNATURES_t, ADCBCAL1) );
     30e:	85 e2       	ldi	r24, 0x25	; 37
     310:	0e 94 21 01 	call	0x242	; 0x242 <adc_read_cal_byte>
     314:	f8 01       	movw	r30, r16
     316:	85 87       	std	Z+13, r24	; 0x0d
	ADCB.PRESCALER = B8(00000111); //ADC clock = Peripheral clock / 512 (maximum resolution/accuracy)
     318:	e4 82       	std	Z+4, r14	; 0x04
	ADCB.REFCTRL = B8(00010011); //Use AVCC/1.6 = 2.063V as reference (highest allowed); Enable BandGap Reference and Temperature Sensor (internal)
     31a:	d2 82       	std	Z+2, r13	; 0x02
	ADCB.CTRLB = B8(00000110); //12bit-left adjusted; One-shot conversion; unsigned mode;
     31c:	c1 82       	std	Z+1, r12	; 0x01
	ADCB.CTRLA = B8(00000001); //Enable ADC;
     31e:	f0 82       	st	Z, r15
	ADCB.CH0.CTRL = B8(00000001); //Single ended input mode; No gain
     320:	f0 a2       	lds	r31, 0x90
	ADCB.CH1.CTRL = B8(00000001); //Single ended input mode; No gain
     322:	f0 a6       	lds	r31, 0xb0
	ADCB.CH2.CTRL = B8(00000001); //Single ended input mode; No gain
     324:	f0 aa       	sts	0x90, r31
	ADCB.CH3.CTRL = B8(00000001); //Single ended input mode; No gain
     326:	f0 ae       	sts	0xb0, r31
	
	//STATE
	adc_bank = 0;
     328:	10 92 bc 26 	sts	0x26BC, r1
	adc_head = 0;
     32c:	10 92 b9 26 	sts	0x26B9, r1
	adc_bank_select(adc_bank);
     330:	80 e0       	ldi	r24, 0x00	; 0
     332:	0e 94 2a 01 	call	0x254	; 0x254 <adc_bank_select>
	
	//FLUSH
	ADCA.CTRLA |= 0x02;
     336:	88 81       	ld	r24, Y
     338:	82 60       	ori	r24, 0x02	; 2
     33a:	88 83       	st	Y, r24
	ADCB.CTRLB |= 0x02;
     33c:	f8 01       	movw	r30, r16
     33e:	81 81       	ldd	r24, Z+1	; 0x01
     340:	82 60       	ori	r24, 0x02	; 2
     342:	81 83       	std	Z+1, r24	; 0x01
	adc_convert();
     344:	0e 94 4d 01 	call	0x29a	; 0x29a <adc_convert>
}
     348:	df 91       	pop	r29
     34a:	cf 91       	pop	r28
     34c:	1f 91       	pop	r17
     34e:	0f 91       	pop	r16
     350:	ff 90       	pop	r15
     352:	ef 90       	pop	r14
     354:	df 90       	pop	r13
     356:	cf 90       	pop	r12
     358:	08 95       	ret

0000035a <adc_ftoa>:
//#############################################################
//## ADCs -- DATA PROCESSING
//#############################################################

//Float-to-ASCII: uses scaler to shift position, does not include fractional component, null-terminates result, handles pos & neg numbers
void adc_ftoa(float x, uint16_t scaler, char* result){
     35a:	cf 92       	push	r12
     35c:	df 92       	push	r13
     35e:	ef 92       	push	r14
     360:	ff 92       	push	r15
     362:	cf 93       	push	r28
     364:	df 93       	push	r29
     366:	6b 01       	movw	r12, r22
     368:	7c 01       	movw	r14, r24
     36a:	e9 01       	movw	r28, r18
	x = x * scaler;
     36c:	ba 01       	movw	r22, r20
     36e:	80 e0       	ldi	r24, 0x00	; 0
     370:	90 e0       	ldi	r25, 0x00	; 0
     372:	0e 94 18 31 	call	0x6230	; 0x6230 <__floatunsisf>
     376:	a7 01       	movw	r20, r14
     378:	96 01       	movw	r18, r12
     37a:	0e 94 ca 31 	call	0x6394	; 0x6394 <__mulsf3>
	utoa((int)x, result, 10);
     37e:	0e 94 e7 30 	call	0x61ce	; 0x61ce <__fixsfsi>
     382:	dc 01       	movw	r26, r24
     384:	cb 01       	movw	r24, r22
     386:	be 01       	movw	r22, r28
     388:	4a e0       	ldi	r20, 0x0A	; 10
     38a:	50 e0       	ldi	r21, 0x00	; 0
     38c:	0e 94 53 32 	call	0x64a6	; 0x64a6 <utoa>
}
     390:	df 91       	pop	r29
     392:	cf 91       	pop	r28
     394:	ff 90       	pop	r15
     396:	ef 90       	pop	r14
     398:	df 90       	pop	r13
     39a:	cf 90       	pop	r12
     39c:	08 95       	ret

0000039e <adc_data>:

///result = char[6] = 15324\0 --> 15.324 V or A (don't forget string terminator byte)
void adc_data(uint8_t channel_num, uint8_t measurement_type, char* result){
     39e:	ef 92       	push	r14
     3a0:	ff 92       	push	r15
     3a2:	0f 93       	push	r16
     3a4:	1f 93       	push	r17
     3a6:	cf 93       	push	r28
     3a8:	df 93       	push	r29
     3aa:	7a 01       	movw	r14, r20
		uint16_t summation = 0;
		float voltage;
		
	//Average
		for (uint8_t i=0;i<ADC_NUM_CONVERSIONS;i++){
			summation += adc_results[channel_num][i];
     3ac:	a8 2f       	mov	r26, r24
     3ae:	b0 e0       	ldi	r27, 0x00	; 0
	x = x * scaler;
	utoa((int)x, result, 10);
}

///result = char[6] = 15324\0 --> 15.324 V or A (don't forget string terminator byte)
void adc_data(uint8_t channel_num, uint8_t measurement_type, char* result){
     3b0:	ad 01       	movw	r20, r26
     3b2:	42 95       	swap	r20
     3b4:	52 95       	swap	r21
     3b6:	50 7f       	andi	r21, 0xF0	; 240
     3b8:	54 27       	eor	r21, r20
     3ba:	40 7f       	andi	r20, 0xF0	; 240
     3bc:	54 27       	eor	r21, r20
     3be:	fa 01       	movw	r30, r20
     3c0:	e7 54       	subi	r30, 0x47	; 71
     3c2:	fa 4d       	sbci	r31, 0xDA	; 218
     3c4:	47 53       	subi	r20, 0x37	; 55
     3c6:	5a 4d       	sbci	r21, 0xDA	; 218
	uint16_t current_offset;
	
	//Init
		uint16_t summation = 0;
     3c8:	80 e0       	ldi	r24, 0x00	; 0
     3ca:	90 e0       	ldi	r25, 0x00	; 0
		float voltage;
		
	//Average
		for (uint8_t i=0;i<ADC_NUM_CONVERSIONS;i++){
			summation += adc_results[channel_num][i];
     3cc:	21 91       	ld	r18, Z+
     3ce:	31 91       	ld	r19, Z+
     3d0:	82 0f       	add	r24, r18
     3d2:	93 1f       	adc	r25, r19
	//Init
		uint16_t summation = 0;
		float voltage;
		
	//Average
		for (uint8_t i=0;i<ADC_NUM_CONVERSIONS;i++){
     3d4:	e4 17       	cp	r30, r20
     3d6:	f5 07       	cpc	r31, r21
     3d8:	c9 f7       	brne	.-14     	; 0x3cc <adc_data+0x2e>
			summation += adc_results[channel_num][i];
		}
		summation = summation >> 3; //divide by 8
     3da:	96 95       	lsr	r25
     3dc:	87 95       	ror	r24
     3de:	96 95       	lsr	r25
     3e0:	87 95       	ror	r24
     3e2:	96 95       	lsr	r25
     3e4:	87 95       	ror	r24
		
	//Offset
		switch (measurement_type){
     3e6:	68 36       	cpi	r22, 0x68	; 104
     3e8:	51 f0       	breq	.+20     	; 0x3fe <adc_data+0x60>
     3ea:	6a 36       	cpi	r22, 0x6A	; 106
     3ec:	71 f0       	breq	.+28     	; 0x40a <adc_data+0x6c>
     3ee:	67 36       	cpi	r22, 0x67	; 103
     3f0:	e1 f4       	brne	.+56     	; 0x42a <adc_data+0x8c>
			case VOLTAGE_POS:
				if(summation<CODE_ZERO){summation = 0;}
     3f2:	81 3a       	cpi	r24, 0xA1	; 161
     3f4:	91 05       	cpc	r25, r1
     3f6:	10 f1       	brcs	.+68     	; 0x43c <adc_data+0x9e>
				else{summation -= CODE_ZERO;}
     3f8:	81 5a       	subi	r24, 0xA1	; 161
     3fa:	90 40       	sbci	r25, 0x00	; 0
     3fc:	21 c0       	rjmp	.+66     	; 0x440 <adc_data+0xa2>
				break;
			case VOLTAGE_NEG:
				if(summation<VOLTAGE_NEG_OFFSET){summation = 0;}
     3fe:	84 3b       	cpi	r24, 0xB4	; 180
     400:	91 05       	cpc	r25, r1
     402:	88 f0       	brcs	.+34     	; 0x426 <adc_data+0x88>
				else{summation -= VOLTAGE_NEG_OFFSET;}
     404:	84 5b       	subi	r24, 0xB4	; 180
     406:	90 40       	sbci	r25, 0x00	; 0
     408:	32 c0       	rjmp	.+100    	; 0x46e <adc_data+0xd0>
				break;
			case CURRENT_HI_RES:
				current_offset = adc_current_offset[(channel_num-1)>>1];
     40a:	11 97       	sbiw	r26, 0x01	; 1
     40c:	ae 7f       	andi	r26, 0xFE	; 254
     40e:	a4 5c       	subi	r26, 0xC4	; 196
     410:	bd 4d       	sbci	r27, 0xDD	; 221
     412:	2d 91       	ld	r18, X+
     414:	3c 91       	ld	r19, X
     416:	11 97       	sbiw	r26, 0x01	; 1
				if(summation<current_offset){summation=0;}
     418:	82 17       	cp	r24, r18
     41a:	93 07       	cpc	r25, r19
     41c:	08 f4       	brcc	.+2      	; 0x420 <adc_data+0x82>
     41e:	5a c0       	rjmp	.+180    	; 0x4d4 <adc_data+0x136>
				else{summation -= current_offset;}
     420:	82 1b       	sub	r24, r18
     422:	93 0b       	sbc	r25, r19
     424:	59 c0       	rjmp	.+178    	; 0x4d8 <adc_data+0x13a>
			case VOLTAGE_POS:
				if(summation<CODE_ZERO){summation = 0;}
				else{summation -= CODE_ZERO;}
				break;
			case VOLTAGE_NEG:
				if(summation<VOLTAGE_NEG_OFFSET){summation = 0;}
     426:	80 e0       	ldi	r24, 0x00	; 0
     428:	90 e0       	ldi	r25, 0x00	; 0
				//TODO: add scaler for the low-res mode
				break;
		}
		
	//Format & Return
		switch (measurement_type){
     42a:	68 36       	cpi	r22, 0x68	; 104
     42c:	01 f1       	breq	.+64     	; 0x46e <adc_data+0xd0>
     42e:	6a 36       	cpi	r22, 0x6A	; 106
     430:	09 f4       	brne	.+2      	; 0x434 <adc_data+0x96>
     432:	52 c0       	rjmp	.+164    	; 0x4d8 <adc_data+0x13a>
     434:	67 36       	cpi	r22, 0x67	; 103
     436:	09 f0       	breq	.+2      	; 0x43a <adc_data+0x9c>
     438:	5f c0       	rjmp	.+190    	; 0x4f8 <adc_data+0x15a>
     43a:	02 c0       	rjmp	.+4      	; 0x440 <adc_data+0xa2>
		summation = summation >> 3; //divide by 8
		
	//Offset
		switch (measurement_type){
			case VOLTAGE_POS:
				if(summation<CODE_ZERO){summation = 0;}
     43c:	80 e0       	ldi	r24, 0x00	; 0
     43e:	90 e0       	ldi	r25, 0x00	; 0
		}
		
	//Format & Return
		switch (measurement_type){
			case VOLTAGE_POS:
				voltage = (float)summation * CODE_TO_VOLTS * VOLTAGE_DESCALE_FACTOR;
     440:	bc 01       	movw	r22, r24
     442:	80 e0       	ldi	r24, 0x00	; 0
     444:	90 e0       	ldi	r25, 0x00	; 0
     446:	0e 94 18 31 	call	0x6230	; 0x6230 <__floatunsisf>
     44a:	27 e9       	ldi	r18, 0x97	; 151
     44c:	38 ea       	ldi	r19, 0xA8	; 168
     44e:	4f ef       	ldi	r20, 0xFF	; 255
     450:	59 e3       	ldi	r21, 0x39	; 57
     452:	0e 94 ca 31 	call	0x6394	; 0x6394 <__mulsf3>
     456:	25 e8       	ldi	r18, 0x85	; 133
     458:	3b ee       	ldi	r19, 0xEB	; 235
     45a:	41 e5       	ldi	r20, 0x51	; 81
     45c:	51 e4       	ldi	r21, 0x41	; 65
     45e:	0e 94 ca 31 	call	0x6394	; 0x6394 <__mulsf3>
				adc_ftoa(voltage, 100, result);
     462:	44 e6       	ldi	r20, 0x64	; 100
     464:	50 e0       	ldi	r21, 0x00	; 0
     466:	97 01       	movw	r18, r14
     468:	0e 94 ad 01 	call	0x35a	; 0x35a <adc_ftoa>
				return;
     46c:	45 c0       	rjmp	.+138    	; 0x4f8 <adc_data+0x15a>
			case VOLTAGE_NEG:
				voltage = (float)summation * CODE_TO_VOLTS * VOLTAGE_DESCALE_FACTOR;
     46e:	bc 01       	movw	r22, r24
     470:	80 e0       	ldi	r24, 0x00	; 0
     472:	90 e0       	ldi	r25, 0x00	; 0
     474:	0e 94 18 31 	call	0x6230	; 0x6230 <__floatunsisf>
     478:	27 e9       	ldi	r18, 0x97	; 151
     47a:	38 ea       	ldi	r19, 0xA8	; 168
     47c:	4f ef       	ldi	r20, 0xFF	; 255
     47e:	59 e3       	ldi	r21, 0x39	; 57
     480:	0e 94 ca 31 	call	0x6394	; 0x6394 <__mulsf3>
     484:	25 e8       	ldi	r18, 0x85	; 133
     486:	3b ee       	ldi	r19, 0xEB	; 235
     488:	41 e5       	ldi	r20, 0x51	; 81
     48a:	51 e4       	ldi	r21, 0x41	; 65
     48c:	0e 94 ca 31 	call	0x6394	; 0x6394 <__mulsf3>
     490:	06 2f       	mov	r16, r22
     492:	17 2f       	mov	r17, r23
     494:	d8 2f       	mov	r29, r24
     496:	c9 2f       	mov	r28, r25
				if (voltage < 2.2) voltage = 0; //blank anything inside the amp offset (can't actually offset this because it adds huge error to the linear fit)
     498:	86 2f       	mov	r24, r22
     49a:	91 2f       	mov	r25, r17
     49c:	ad 2f       	mov	r26, r29
     49e:	bc 2f       	mov	r27, r28
     4a0:	bc 01       	movw	r22, r24
     4a2:	cd 01       	movw	r24, r26
     4a4:	2d ec       	ldi	r18, 0xCD	; 205
     4a6:	3c ec       	ldi	r19, 0xCC	; 204
     4a8:	4c e0       	ldi	r20, 0x0C	; 12
     4aa:	50 e4       	ldi	r21, 0x40	; 64
     4ac:	0e 94 7b 30 	call	0x60f6	; 0x60f6 <__cmpsf2>
     4b0:	88 23       	and	r24, r24
     4b2:	24 f4       	brge	.+8      	; 0x4bc <adc_data+0x11e>
     4b4:	00 e0       	ldi	r16, 0x00	; 0
     4b6:	10 e0       	ldi	r17, 0x00	; 0
     4b8:	d0 e0       	ldi	r29, 0x00	; 0
     4ba:	c0 e0       	ldi	r28, 0x00	; 0
				adc_ftoa(voltage, 100, result);
     4bc:	80 2f       	mov	r24, r16
     4be:	91 2f       	mov	r25, r17
     4c0:	ad 2f       	mov	r26, r29
     4c2:	bc 2f       	mov	r27, r28
     4c4:	bc 01       	movw	r22, r24
     4c6:	cd 01       	movw	r24, r26
     4c8:	44 e6       	ldi	r20, 0x64	; 100
     4ca:	50 e0       	ldi	r21, 0x00	; 0
     4cc:	97 01       	movw	r18, r14
     4ce:	0e 94 ad 01 	call	0x35a	; 0x35a <adc_ftoa>
				return;
     4d2:	12 c0       	rjmp	.+36     	; 0x4f8 <adc_data+0x15a>
				if(summation<VOLTAGE_NEG_OFFSET){summation = 0;}
				else{summation -= VOLTAGE_NEG_OFFSET;}
				break;
			case CURRENT_HI_RES:
				current_offset = adc_current_offset[(channel_num-1)>>1];
				if(summation<current_offset){summation=0;}
     4d4:	80 e0       	ldi	r24, 0x00	; 0
     4d6:	90 e0       	ldi	r25, 0x00	; 0
				voltage = (float)summation * CODE_TO_VOLTS * VOLTAGE_DESCALE_FACTOR;
				if (voltage < 2.2) voltage = 0; //blank anything inside the amp offset (can't actually offset this because it adds huge error to the linear fit)
				adc_ftoa(voltage, 100, result);
				return;
			case CURRENT_HI_RES:
				adc_ftoa((float)summation * CODE_TO_AMPS, 1000, result);
     4d8:	bc 01       	movw	r22, r24
     4da:	80 e0       	ldi	r24, 0x00	; 0
     4dc:	90 e0       	ldi	r25, 0x00	; 0
     4de:	0e 94 18 31 	call	0x6230	; 0x6230 <__floatunsisf>
     4e2:	23 e7       	ldi	r18, 0x73	; 115
     4e4:	30 e3       	ldi	r19, 0x30	; 48
     4e6:	4b e1       	ldi	r20, 0x1B	; 27
     4e8:	5a e3       	ldi	r21, 0x3A	; 58
     4ea:	0e 94 ca 31 	call	0x6394	; 0x6394 <__mulsf3>
     4ee:	48 ee       	ldi	r20, 0xE8	; 232
     4f0:	53 e0       	ldi	r21, 0x03	; 3
     4f2:	97 01       	movw	r18, r14
     4f4:	0e 94 ad 01 	call	0x35a	; 0x35a <adc_ftoa>
				return;
			case CURRENT_LO_RES:
				//TODO: add scaler for the low-res mode
				return;
		}
}
     4f8:	df 91       	pop	r29
     4fa:	cf 91       	pop	r28
     4fc:	1f 91       	pop	r17
     4fe:	0f 91       	pop	r16
     500:	ff 90       	pop	r15
     502:	ef 90       	pop	r14
     504:	08 95       	ret

00000506 <adc_max>:

//Returns the maximum value seen in the buffer for the specified channel
uint16_t adc_max(uint8_t channel_num){
	uint16_t maxValue = 0;
	for(uint8_t i=0;i<ADC_NUM_CONVERSIONS;i++){
		if (adc_results[channel_num][i]>maxValue){maxValue=adc_results[channel_num][i];};
     506:	48 2f       	mov	r20, r24
     508:	50 e0       	ldi	r21, 0x00	; 0
				return;
		}
}

//Returns the maximum value seen in the buffer for the specified channel
uint16_t adc_max(uint8_t channel_num){
     50a:	42 95       	swap	r20
     50c:	52 95       	swap	r21
     50e:	50 7f       	andi	r21, 0xF0	; 240
     510:	54 27       	eor	r21, r20
     512:	40 7f       	andi	r20, 0xF0	; 240
     514:	54 27       	eor	r21, r20
     516:	fa 01       	movw	r30, r20
     518:	e7 54       	subi	r30, 0x47	; 71
     51a:	fa 4d       	sbci	r31, 0xDA	; 218
     51c:	47 53       	subi	r20, 0x37	; 55
     51e:	5a 4d       	sbci	r21, 0xDA	; 218
	uint16_t maxValue = 0;
     520:	20 e0       	ldi	r18, 0x00	; 0
     522:	30 e0       	ldi	r19, 0x00	; 0
	for(uint8_t i=0;i<ADC_NUM_CONVERSIONS;i++){
		if (adc_results[channel_num][i]>maxValue){maxValue=adc_results[channel_num][i];};
     524:	81 91       	ld	r24, Z+
     526:	91 91       	ld	r25, Z+
     528:	28 17       	cp	r18, r24
     52a:	39 07       	cpc	r19, r25
     52c:	08 f4       	brcc	.+2      	; 0x530 <adc_max+0x2a>
     52e:	9c 01       	movw	r18, r24
}

//Returns the maximum value seen in the buffer for the specified channel
uint16_t adc_max(uint8_t channel_num){
	uint16_t maxValue = 0;
	for(uint8_t i=0;i<ADC_NUM_CONVERSIONS;i++){
     530:	e4 17       	cp	r30, r20
     532:	f5 07       	cpc	r31, r21
     534:	b9 f7       	brne	.-18     	; 0x524 <adc_max+0x1e>
		if (adc_results[channel_num][i]>maxValue){maxValue=adc_results[channel_num][i];};
	}		
	return maxValue;
}
     536:	82 2f       	mov	r24, r18
     538:	93 2f       	mov	r25, r19
     53a:	08 95       	ret

0000053c <adjust>:
//## ADCs -- SERVICE
//#############################################################

uint16_t adjust(uint16_t theValue){
	uint16_t working = theValue;
	working = theValue >> 4;
     53c:	92 95       	swap	r25
     53e:	82 95       	swap	r24
     540:	8f 70       	andi	r24, 0x0F	; 15
     542:	89 27       	eor	r24, r25
     544:	9f 70       	andi	r25, 0x0F	; 15
     546:	89 27       	eor	r24, r25
	if (working < CODE_ZERO){working = CODE_ZERO;}; //clip on overflow
     548:	81 3a       	cpi	r24, 0xA1	; 161
     54a:	91 05       	cpc	r25, r1
     54c:	10 f4       	brcc	.+4      	; 0x552 <adjust+0x16>
     54e:	81 ea       	ldi	r24, 0xA1	; 161
     550:	90 e0       	ldi	r25, 0x00	; 0
	return working;
}
     552:	08 95       	ret

00000554 <service_adc>:

// Implemented with polling for conversion complete
void service_adc(){	
     554:	df 92       	push	r13
     556:	ef 92       	push	r14
     558:	ff 92       	push	r15
     55a:	0f 93       	push	r16
     55c:	1f 93       	push	r17
     55e:	cf 93       	push	r28
     560:	df 93       	push	r29
	//Did all conversions complete?
	if ((ADCA.INTFLAGS == 0x0F) && (ADCB.INTFLAGS == 0x0F)){
     562:	e0 e0       	ldi	r30, 0x00	; 0
     564:	f2 e0       	ldi	r31, 0x02	; 2
     566:	86 81       	ldd	r24, Z+6	; 0x06
     568:	8f 30       	cpi	r24, 0x0F	; 15
     56a:	09 f0       	breq	.+2      	; 0x56e <service_adc+0x1a>
     56c:	16 c1       	rjmp	.+556    	; 0x79a <service_adc+0x246>
     56e:	e0 e4       	ldi	r30, 0x40	; 64
     570:	f2 e0       	ldi	r31, 0x02	; 2
     572:	86 81       	ldd	r24, Z+6	; 0x06
     574:	8f 30       	cpi	r24, 0x0F	; 15
     576:	09 f0       	breq	.+2      	; 0x57a <service_adc+0x26>
     578:	10 c1       	rjmp	.+544    	; 0x79a <service_adc+0x246>
		//Write Results
		if(adc_bank % 2){
     57a:	80 91 bc 26 	lds	r24, 0x26BC
     57e:	80 ff       	sbrs	r24, 0
     580:	71 c0       	rjmp	.+226    	; 0x664 <service_adc+0x110>
			//lower bank
			adc_results[0][adc_head] = adjust(ADCA.CH0RES); //PSU Channel A
     582:	00 91 b9 26 	lds	r16, 0x26B9
     586:	10 e0       	ldi	r17, 0x00	; 0
     588:	c0 e0       	ldi	r28, 0x00	; 0
     58a:	d2 e0       	ldi	r29, 0x02	; 2
     58c:	88 89       	ldd	r24, Y+16	; 0x10
     58e:	99 89       	ldd	r25, Y+17	; 0x11
     590:	0e 94 9e 02 	call	0x53c	; 0x53c <adjust>
     594:	0f 2e       	mov	r0, r31
     596:	f9 eb       	ldi	r31, 0xB9	; 185
     598:	ef 2e       	mov	r14, r31
     59a:	f5 e2       	ldi	r31, 0x25	; 37
     59c:	ff 2e       	mov	r15, r31
     59e:	f0 2d       	mov	r31, r0
     5a0:	f8 01       	movw	r30, r16
     5a2:	ee 0f       	add	r30, r30
     5a4:	ff 1f       	adc	r31, r31
     5a6:	ee 0d       	add	r30, r14
     5a8:	ff 1d       	adc	r31, r15
     5aa:	80 83       	st	Z, r24
     5ac:	91 83       	std	Z+1, r25	; 0x01
			adc_results[1][adc_head] = adjust(ADCA.CH1RES);
     5ae:	8a 89       	ldd	r24, Y+18	; 0x12
     5b0:	9b 89       	ldd	r25, Y+19	; 0x13
     5b2:	0e 94 9e 02 	call	0x53c	; 0x53c <adjust>
     5b6:	f8 01       	movw	r30, r16
     5b8:	38 96       	adiw	r30, 0x08	; 8
     5ba:	ee 0f       	add	r30, r30
     5bc:	ff 1f       	adc	r31, r31
     5be:	ee 0d       	add	r30, r14
     5c0:	ff 1d       	adc	r31, r15
     5c2:	80 83       	st	Z, r24
     5c4:	91 83       	std	Z+1, r25	; 0x01
			adc_results[2][adc_head] = adjust(ADCA.CH2RES);
     5c6:	8c 89       	ldd	r24, Y+20	; 0x14
     5c8:	9d 89       	ldd	r25, Y+21	; 0x15
     5ca:	0e 94 9e 02 	call	0x53c	; 0x53c <adjust>
     5ce:	f8 01       	movw	r30, r16
     5d0:	70 96       	adiw	r30, 0x10	; 16
     5d2:	ee 0f       	add	r30, r30
     5d4:	ff 1f       	adc	r31, r31
     5d6:	ee 0d       	add	r30, r14
     5d8:	ff 1d       	adc	r31, r15
     5da:	80 83       	st	Z, r24
     5dc:	91 83       	std	Z+1, r25	; 0x01
			adc_results[3][adc_head] = adjust(ADCA.CH3RES);
     5de:	8e 89       	ldd	r24, Y+22	; 0x16
     5e0:	9f 89       	ldd	r25, Y+23	; 0x17
     5e2:	0e 94 9e 02 	call	0x53c	; 0x53c <adjust>
     5e6:	f8 01       	movw	r30, r16
     5e8:	78 96       	adiw	r30, 0x18	; 24
     5ea:	ee 0f       	add	r30, r30
     5ec:	ff 1f       	adc	r31, r31
     5ee:	ee 0d       	add	r30, r14
     5f0:	ff 1d       	adc	r31, r15
     5f2:	80 83       	st	Z, r24
     5f4:	91 83       	std	Z+1, r25	; 0x01
			adc_results[8][adc_head] = adjust(ADCB.CH0.RES); //PSU Channel C
     5f6:	c0 e4       	ldi	r28, 0x40	; 64
     5f8:	d2 e0       	ldi	r29, 0x02	; 2
     5fa:	8c a1       	lds	r24, 0x4c
     5fc:	9d a1       	lds	r25, 0x4d
     5fe:	0e 94 9e 02 	call	0x53c	; 0x53c <adjust>
     602:	f8 01       	movw	r30, r16
     604:	e0 5c       	subi	r30, 0xC0	; 192
     606:	ff 4f       	sbci	r31, 0xFF	; 255
     608:	ee 0f       	add	r30, r30
     60a:	ff 1f       	adc	r31, r31
     60c:	ee 0d       	add	r30, r14
     60e:	ff 1d       	adc	r31, r15
     610:	80 83       	st	Z, r24
     612:	91 83       	std	Z+1, r25	; 0x01
			adc_results[9][adc_head] = adjust(ADCB.CH1.RES);
     614:	8c a5       	lds	r24, 0x6c
     616:	9d a5       	lds	r25, 0x6d
     618:	0e 94 9e 02 	call	0x53c	; 0x53c <adjust>
     61c:	f8 01       	movw	r30, r16
     61e:	e8 5b       	subi	r30, 0xB8	; 184
     620:	ff 4f       	sbci	r31, 0xFF	; 255
     622:	ee 0f       	add	r30, r30
     624:	ff 1f       	adc	r31, r31
     626:	ee 0d       	add	r30, r14
     628:	ff 1d       	adc	r31, r15
     62a:	80 83       	st	Z, r24
     62c:	91 83       	std	Z+1, r25	; 0x01
			adc_results[10][adc_head] = adjust(ADCB.CH2.RES);
     62e:	8c a9       	sts	0x4c, r24
     630:	9d a9       	sts	0x4d, r25
     632:	0e 94 9e 02 	call	0x53c	; 0x53c <adjust>
     636:	f8 01       	movw	r30, r16
     638:	e0 5b       	subi	r30, 0xB0	; 176
     63a:	ff 4f       	sbci	r31, 0xFF	; 255
     63c:	ee 0f       	add	r30, r30
     63e:	ff 1f       	adc	r31, r31
     640:	ee 0d       	add	r30, r14
     642:	ff 1d       	adc	r31, r15
     644:	80 83       	st	Z, r24
     646:	91 83       	std	Z+1, r25	; 0x01
			adc_results[11][adc_head] = adjust(ADCB.CH3.RES);
     648:	8c ad       	sts	0x6c, r24
     64a:	9d ad       	sts	0x6d, r25
     64c:	0e 94 9e 02 	call	0x53c	; 0x53c <adjust>
     650:	08 5a       	subi	r16, 0xA8	; 168
     652:	1f 4f       	sbci	r17, 0xFF	; 255
     654:	00 0f       	add	r16, r16
     656:	11 1f       	adc	r17, r17
     658:	e0 0e       	add	r14, r16
     65a:	f1 1e       	adc	r15, r17
     65c:	f7 01       	movw	r30, r14
     65e:	80 83       	st	Z, r24
     660:	91 83       	std	Z+1, r25	; 0x01
     662:	7a c0       	rjmp	.+244    	; 0x758 <service_adc+0x204>
		}
		else {
			//upper bank
			adc_results[4][adc_head] = adjust(ADCA.CH0.RES); //PSU Channel B
     664:	d0 90 b9 26 	lds	r13, 0x26B9
     668:	0d 2d       	mov	r16, r13
     66a:	10 e0       	ldi	r17, 0x00	; 0
     66c:	c0 e0       	ldi	r28, 0x00	; 0
     66e:	d2 e0       	ldi	r29, 0x02	; 2
     670:	8c a1       	lds	r24, 0x4c
     672:	9d a1       	lds	r25, 0x4d
     674:	0e 94 9e 02 	call	0x53c	; 0x53c <adjust>
     678:	f8 01       	movw	r30, r16
     67a:	b0 96       	adiw	r30, 0x20	; 32
     67c:	0f 2e       	mov	r0, r31
     67e:	f9 eb       	ldi	r31, 0xB9	; 185
     680:	ef 2e       	mov	r14, r31
     682:	f5 e2       	ldi	r31, 0x25	; 37
     684:	ff 2e       	mov	r15, r31
     686:	f0 2d       	mov	r31, r0
     688:	ee 0f       	add	r30, r30
     68a:	ff 1f       	adc	r31, r31
     68c:	ee 0d       	add	r30, r14
     68e:	ff 1d       	adc	r31, r15
     690:	80 83       	st	Z, r24
     692:	91 83       	std	Z+1, r25	; 0x01
			adc_results[5][adc_head] = adjust(ADCA.CH1.RES);
     694:	8c a5       	lds	r24, 0x6c
     696:	9d a5       	lds	r25, 0x6d
     698:	0e 94 9e 02 	call	0x53c	; 0x53c <adjust>
     69c:	f8 01       	movw	r30, r16
     69e:	b8 96       	adiw	r30, 0x28	; 40
     6a0:	ee 0f       	add	r30, r30
     6a2:	ff 1f       	adc	r31, r31
     6a4:	ee 0d       	add	r30, r14
     6a6:	ff 1d       	adc	r31, r15
     6a8:	80 83       	st	Z, r24
     6aa:	91 83       	std	Z+1, r25	; 0x01
			adc_results[6][adc_head] = adjust(ADCA.CH2.RES);
     6ac:	8c a9       	sts	0x4c, r24
     6ae:	9d a9       	sts	0x4d, r25
     6b0:	0e 94 9e 02 	call	0x53c	; 0x53c <adjust>
     6b4:	f8 01       	movw	r30, r16
     6b6:	f0 96       	adiw	r30, 0x30	; 48
     6b8:	ee 0f       	add	r30, r30
     6ba:	ff 1f       	adc	r31, r31
     6bc:	ee 0d       	add	r30, r14
     6be:	ff 1d       	adc	r31, r15
     6c0:	80 83       	st	Z, r24
     6c2:	91 83       	std	Z+1, r25	; 0x01
			adc_results[7][adc_head] = adjust(ADCA.CH3.RES);
     6c4:	8c ad       	sts	0x6c, r24
     6c6:	9d ad       	sts	0x6d, r25
     6c8:	0e 94 9e 02 	call	0x53c	; 0x53c <adjust>
     6cc:	f8 01       	movw	r30, r16
     6ce:	f8 96       	adiw	r30, 0x38	; 56
     6d0:	ee 0f       	add	r30, r30
     6d2:	ff 1f       	adc	r31, r31
     6d4:	ee 0d       	add	r30, r14
     6d6:	ff 1d       	adc	r31, r15
     6d8:	80 83       	st	Z, r24
     6da:	91 83       	std	Z+1, r25	; 0x01
			adc_results[12][adc_head] = adjust(ADCB.CH0.RES); //PSU Channel D
     6dc:	c0 e4       	ldi	r28, 0x40	; 64
     6de:	d2 e0       	ldi	r29, 0x02	; 2
     6e0:	8c a1       	lds	r24, 0x4c
     6e2:	9d a1       	lds	r25, 0x4d
     6e4:	0e 94 9e 02 	call	0x53c	; 0x53c <adjust>
     6e8:	f8 01       	movw	r30, r16
     6ea:	e0 5a       	subi	r30, 0xA0	; 160
     6ec:	ff 4f       	sbci	r31, 0xFF	; 255
     6ee:	ee 0f       	add	r30, r30
     6f0:	ff 1f       	adc	r31, r31
     6f2:	ee 0d       	add	r30, r14
     6f4:	ff 1d       	adc	r31, r15
     6f6:	80 83       	st	Z, r24
     6f8:	91 83       	std	Z+1, r25	; 0x01
			adc_results[13][adc_head] = adjust(ADCB.CH1RES);
     6fa:	8a 89       	ldd	r24, Y+18	; 0x12
     6fc:	9b 89       	ldd	r25, Y+19	; 0x13
     6fe:	0e 94 9e 02 	call	0x53c	; 0x53c <adjust>
     702:	f8 01       	movw	r30, r16
     704:	e8 59       	subi	r30, 0x98	; 152
     706:	ff 4f       	sbci	r31, 0xFF	; 255
     708:	ee 0f       	add	r30, r30
     70a:	ff 1f       	adc	r31, r31
     70c:	ee 0d       	add	r30, r14
     70e:	ff 1d       	adc	r31, r15
     710:	80 83       	st	Z, r24
     712:	91 83       	std	Z+1, r25	; 0x01
			adc_results[14][adc_head] = adjust(ADCB.CH2RES);
     714:	8c 89       	ldd	r24, Y+20	; 0x14
     716:	9d 89       	ldd	r25, Y+21	; 0x15
     718:	0e 94 9e 02 	call	0x53c	; 0x53c <adjust>
     71c:	f8 01       	movw	r30, r16
     71e:	e0 59       	subi	r30, 0x90	; 144
     720:	ff 4f       	sbci	r31, 0xFF	; 255
     722:	ee 0f       	add	r30, r30
     724:	ff 1f       	adc	r31, r31
     726:	ee 0d       	add	r30, r14
     728:	ff 1d       	adc	r31, r15
     72a:	80 83       	st	Z, r24
     72c:	91 83       	std	Z+1, r25	; 0x01
			adc_results[15][adc_head] = adjust(ADCB.CH3RES);
     72e:	8e 89       	ldd	r24, Y+22	; 0x16
     730:	9f 89       	ldd	r25, Y+23	; 0x17
     732:	0e 94 9e 02 	call	0x53c	; 0x53c <adjust>
     736:	08 58       	subi	r16, 0x88	; 136
     738:	1f 4f       	sbci	r17, 0xFF	; 255
     73a:	00 0f       	add	r16, r16
     73c:	11 1f       	adc	r17, r17
     73e:	e0 0e       	add	r14, r16
     740:	f1 1e       	adc	r15, r17
     742:	f7 01       	movw	r30, r14
     744:	80 83       	st	Z, r24
     746:	91 83       	std	Z+1, r25	; 0x01
			
			//next column
			adc_head++;
     748:	8d 2d       	mov	r24, r13
     74a:	8f 5f       	subi	r24, 0xFF	; 255
     74c:	80 93 b9 26 	sts	0x26B9, r24
			if (adc_head >= ADC_NUM_CONVERSIONS){adc_head=0;}
     750:	88 30       	cpi	r24, 0x08	; 8
     752:	10 f0       	brcs	.+4      	; 0x758 <service_adc+0x204>
     754:	10 92 b9 26 	sts	0x26B9, r1
		}
		
		//Clear Flags to Reset ADC
		ADCA.INTFLAGS = 0x0F;
     758:	8f e0       	ldi	r24, 0x0F	; 15
     75a:	e0 e0       	ldi	r30, 0x00	; 0
     75c:	f2 e0       	ldi	r31, 0x02	; 2
     75e:	86 83       	std	Z+6, r24	; 0x06
		ADCB.INTFLAGS = 0x0F;
     760:	e0 e4       	ldi	r30, 0x40	; 64
     762:	f2 e0       	ldi	r31, 0x02	; 2
     764:	86 83       	std	Z+6, r24	; 0x06
		
		//Toggle Channel Bank
		adc_bank++;
     766:	80 91 bc 26 	lds	r24, 0x26BC
     76a:	8f 5f       	subi	r24, 0xFF	; 255
     76c:	80 93 bc 26 	sts	0x26BC, r24
		adc_bank_select(adc_bank);
     770:	0e 94 2a 01 	call	0x254	; 0x254 <adc_bank_select>
		
		//Start Next Round of Conversions
		adc_convert();
     774:	0e 94 4d 01 	call	0x29a	; 0x29a <adc_convert>
		
		//Auto-calibrate Current Offsets (when output is disabled)
		if(STATE_power_output == DISABLE){
     778:	80 91 ab 25 	lds	r24, 0x25AB
     77c:	89 32       	cpi	r24, 0x29	; 41
     77e:	69 f4       	brne	.+26     	; 0x79a <service_adc+0x246>
     780:	cc e3       	ldi	r28, 0x3C	; 60
     782:	d2 e2       	ldi	r29, 0x22	; 34
     784:	00 e0       	ldi	r16, 0x00	; 0
			for(uint8_t i=0;i<(ADC_NUM_CHANNELS>>1);i++){
				adc_current_offset[i] = adc_max((i<<1)+1);
     786:	80 2f       	mov	r24, r16
     788:	88 0f       	add	r24, r24
     78a:	8f 5f       	subi	r24, 0xFF	; 255
     78c:	0e 94 83 02 	call	0x506	; 0x506 <adc_max>
     790:	89 93       	st	Y+, r24
     792:	99 93       	st	Y+, r25
		//Start Next Round of Conversions
		adc_convert();
		
		//Auto-calibrate Current Offsets (when output is disabled)
		if(STATE_power_output == DISABLE){
			for(uint8_t i=0;i<(ADC_NUM_CHANNELS>>1);i++){
     794:	0f 5f       	subi	r16, 0xFF	; 255
     796:	08 30       	cpi	r16, 0x08	; 8
     798:	b1 f7       	brne	.-20     	; 0x786 <service_adc+0x232>
				adc_current_offset[i] = adc_max((i<<1)+1);
			}			
		}
	}
}
     79a:	df 91       	pop	r29
     79c:	cf 91       	pop	r28
     79e:	1f 91       	pop	r17
     7a0:	0f 91       	pop	r16
     7a2:	ff 90       	pop	r15
     7a4:	ef 90       	pop	r14
     7a6:	df 90       	pop	r13
     7a8:	08 95       	ret

000007aa <brain_debug>:
void brain_debug(){
	static uint8_t c = 0;
	//uart_enqueue_string(&uctrl, "0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789----100---012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789---<200---012345678901234567890123456789---250>---ABCDEFGHIJ");

	//Channel values (from ADC)
	if (STATE_menu == MENU_CONSOLE){
     7aa:	80 91 a5 25 	lds	r24, 0x25A5
     7ae:	82 32       	cpi	r24, 0x22	; 34
     7b0:	89 f4       	brne	.+34     	; 0x7d4 <brain_debug+0x2a>
		c++;
     7b2:	80 91 32 22 	lds	r24, 0x2232
     7b6:	8f 5f       	subi	r24, 0xFF	; 255
     7b8:	80 93 32 22 	sts	0x2232, r24
		if(c%2){lcd_console_write("Hello World...");}
     7bc:	80 ff       	sbrs	r24, 0
     7be:	05 c0       	rjmp	.+10     	; 0x7ca <brain_debug+0x20>
     7c0:	80 e0       	ldi	r24, 0x00	; 0
     7c2:	90 e2       	ldi	r25, 0x20	; 32
     7c4:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <lcd_console_write>
     7c8:	08 95       	ret
		else{lcd_console_write("No! I refuse!");}
     7ca:	8f e0       	ldi	r24, 0x0F	; 15
     7cc:	90 e2       	ldi	r25, 0x20	; 32
     7ce:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <lcd_console_write>
     7d2:	08 95       	ret
	}
	else {		
		lcd_command("75 1 1234");
     7d4:	8d e1       	ldi	r24, 0x1D	; 29
     7d6:	90 e2       	ldi	r25, 0x20	; 32
     7d8:	0e 94 86 0b 	call	0x170c	; 0x170c <lcd_command>
		lcd_command("75 11 5678");
     7dc:	87 e2       	ldi	r24, 0x27	; 39
     7de:	90 e2       	ldi	r25, 0x20	; 32
     7e0:	0e 94 86 0b 	call	0x170c	; 0x170c <lcd_command>
		lcd_command("75 2 8765");
     7e4:	82 e3       	ldi	r24, 0x32	; 50
     7e6:	90 e2       	ldi	r25, 0x20	; 32
     7e8:	0e 94 86 0b 	call	0x170c	; 0x170c <lcd_command>
		lcd_command("75 21 4321");
     7ec:	8c e3       	ldi	r24, 0x3C	; 60
     7ee:	90 e2       	ldi	r25, 0x20	; 32
     7f0:	0e 94 86 0b 	call	0x170c	; 0x170c <lcd_command>
     7f4:	08 95       	ret

000007f6 <brain_power_reset>:
}


//Safe and reset all channels (all disabled, master off)
void brain_power_reset(){
	STATE_power_channels = 0;
     7f6:	10 92 a4 25 	sts	0x25A4, r1
	STATE_power_output = DISABLE;
     7fa:	89 e2       	ldi	r24, 0x29	; 41
     7fc:	80 93 ab 25 	sts	0x25AB, r24
	pwr_main_off(CHANNEL_ALL); //Actually shutoff power
     800:	8a e3       	ldi	r24, 0x3A	; 58
     802:	0e 94 e1 14 	call	0x29c2	; 0x29c2 <pwr_main_off>
	fp_led_disable(CHANNEL_M); //Update LED display to indicate this
     806:	85 e0       	ldi	r24, 0x05	; 5
     808:	0e 94 8a 09 	call	0x1314	; 0x1314 <fp_led_disable>
}
     80c:	08 95       	ret

0000080e <init_brain>:
//#############################################################
//## INITIALIZATION ROUTINE
//#############################################################

void init_brain(){
	brain_power_reset();
     80e:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <brain_power_reset>
	STATE_menu = MENU_STARTUP;
     812:	8f e1       	ldi	r24, 0x1F	; 31
     814:	80 93 a5 25 	sts	0x25A5, r24
}
     818:	08 95       	ret

0000081a <brain_menu_output>:
}

//=================
//== OUTPUT Menu
void brain_menu_output(){
	STATE_menu = MENU_OUTPUT;
     81a:	80 e2       	ldi	r24, 0x20	; 32
     81c:	80 93 a5 25 	sts	0x25A5, r24
	lcd_command("31 M_OUT");
     820:	87 e4       	ldi	r24, 0x47	; 71
     822:	90 e2       	ldi	r25, 0x20	; 32
     824:	0e 94 86 0b 	call	0x170c	; 0x170c <lcd_command>
}
     828:	08 95       	ret

0000082a <brain_menu_output_detail>:

void brain_menu_output_detail(uint8_t which_detail){
     82a:	cf 93       	push	r28
     82c:	c8 2f       	mov	r28, r24
	audio_beep(BRAIN_BEEPS, BRAIN_VOLUME);
     82e:	81 e0       	ldi	r24, 0x01	; 1
     830:	64 e6       	ldi	r22, 0x64	; 100
     832:	70 e0       	ldi	r23, 0x00	; 0
     834:	0e 94 42 30 	call	0x6084	; 0x6084 <audio_beep>
	switch(which_detail){
     838:	cf 30       	cpi	r28, 0x0F	; 15
     83a:	19 f0       	breq	.+6      	; 0x842 <brain_menu_output_detail+0x18>
     83c:	c0 31       	cpi	r28, 0x10	; 16
     83e:	01 f5       	brne	.+64     	; 0x880 <brain_menu_output_detail+0x56>
     840:	10 c0       	rjmp	.+32     	; 0x862 <brain_menu_output_detail+0x38>
		case LCD_TOUCH_OPEN_DETAIL_AB:
			STATE_menu = MENU_DETAIL_AB;
     842:	83 e2       	ldi	r24, 0x23	; 35
     844:	80 93 a5 25 	sts	0x25A5, r24
			lcd_command("31 M_DETAIL");
     848:	80 e5       	ldi	r24, 0x50	; 80
     84a:	90 e2       	ldi	r25, 0x20	; 32
     84c:	0e 94 86 0b 	call	0x170c	; 0x170c <lcd_command>
			lcd_command("88 58 A");
     850:	8c e5       	ldi	r24, 0x5C	; 92
     852:	90 e2       	ldi	r25, 0x20	; 32
     854:	0e 94 86 0b 	call	0x170c	; 0x170c <lcd_command>
			lcd_command("88 59 B");
     858:	84 e6       	ldi	r24, 0x64	; 100
     85a:	90 e2       	ldi	r25, 0x20	; 32
     85c:	0e 94 86 0b 	call	0x170c	; 0x170c <lcd_command>
			break;
     860:	0f c0       	rjmp	.+30     	; 0x880 <brain_menu_output_detail+0x56>
		case LCD_TOUCH_OPEN_DETAIL_CD:
			STATE_menu = MENU_DETAIL_CD;
     862:	84 e2       	ldi	r24, 0x24	; 36
     864:	80 93 a5 25 	sts	0x25A5, r24
			lcd_command("31 M_DETAIL");
     868:	80 e5       	ldi	r24, 0x50	; 80
     86a:	90 e2       	ldi	r25, 0x20	; 32
     86c:	0e 94 86 0b 	call	0x170c	; 0x170c <lcd_command>
			lcd_command("88 58 C");
     870:	8c e6       	ldi	r24, 0x6C	; 108
     872:	90 e2       	ldi	r25, 0x20	; 32
     874:	0e 94 86 0b 	call	0x170c	; 0x170c <lcd_command>
			lcd_command("88 59 D");
     878:	84 e7       	ldi	r24, 0x74	; 116
     87a:	90 e2       	ldi	r25, 0x20	; 32
     87c:	0e 94 86 0b 	call	0x170c	; 0x170c <lcd_command>
			break;
	}
}
     880:	cf 91       	pop	r28
     882:	08 95       	ret

00000884 <brain_menu_control>:

//=================
//== CONTROL Menu

void brain_menu_control(){
	STATE_menu = MENU_CONTROL;
     884:	81 e2       	ldi	r24, 0x21	; 33
     886:	80 93 a5 25 	sts	0x25A5, r24
	lcd_command("31 M_CTRL");
     88a:	8c e7       	ldi	r24, 0x7C	; 124
     88c:	90 e2       	ldi	r25, 0x20	; 32
     88e:	0e 94 86 0b 	call	0x170c	; 0x170c <lcd_command>
}
     892:	08 95       	ret

00000894 <brain_menu_control_dial>:

void brain_menu_control_dial(uint8_t which_channel){
     894:	cf 93       	push	r28
     896:	c8 2f       	mov	r28, r24
	audio_beep(BRAIN_BEEPS, BRAIN_VOLUME);
     898:	81 e0       	ldi	r24, 0x01	; 1
     89a:	64 e6       	ldi	r22, 0x64	; 100
     89c:	70 e0       	ldi	r23, 0x00	; 0
     89e:	0e 94 42 30 	call	0x6084	; 0x6084 <audio_beep>
	lcd_command("31 M_DIAL");
     8a2:	86 e8       	ldi	r24, 0x86	; 134
     8a4:	90 e2       	ldi	r25, 0x20	; 32
     8a6:	0e 94 86 0b 	call	0x170c	; 0x170c <lcd_command>
	pwr_adj_channel_dirty = 0xFF; //mark all channels dirty (so load initial values)
     8aa:	8f ef       	ldi	r24, 0xFF	; 255
     8ac:	80 93 e3 26 	sts	0x26E3, r24
	switch(which_channel){
     8b0:	c2 31       	cpi	r28, 0x12	; 18
     8b2:	91 f0       	breq	.+36     	; 0x8d8 <brain_menu_control_dial+0x44>
     8b4:	c3 31       	cpi	r28, 0x13	; 19
     8b6:	18 f4       	brcc	.+6      	; 0x8be <brain_menu_control_dial+0x2a>
     8b8:	c1 31       	cpi	r28, 0x11	; 17
     8ba:	29 f5       	brne	.+74     	; 0x906 <brain_menu_control_dial+0x72>
     8bc:	05 c0       	rjmp	.+10     	; 0x8c8 <brain_menu_control_dial+0x34>
     8be:	c3 31       	cpi	r28, 0x13	; 19
     8c0:	99 f0       	breq	.+38     	; 0x8e8 <brain_menu_control_dial+0x54>
     8c2:	c4 31       	cpi	r28, 0x14	; 20
     8c4:	01 f5       	brne	.+64     	; 0x906 <brain_menu_control_dial+0x72>
     8c6:	18 c0       	rjmp	.+48     	; 0x8f8 <brain_menu_control_dial+0x64>
		case LCD_TOUCH_ROW_A:
			STATE_menu = MENU_DIAL_A;
     8c8:	85 e2       	ldi	r24, 0x25	; 37
     8ca:	80 93 a5 25 	sts	0x25A5, r24
			lcd_command("88 90 A");
     8ce:	80 e9       	ldi	r24, 0x90	; 144
     8d0:	90 e2       	ldi	r25, 0x20	; 32
     8d2:	0e 94 86 0b 	call	0x170c	; 0x170c <lcd_command>
			break;
     8d6:	17 c0       	rjmp	.+46     	; 0x906 <brain_menu_control_dial+0x72>
		case LCD_TOUCH_ROW_B:
			STATE_menu = MENU_DIAL_B;
     8d8:	86 e2       	ldi	r24, 0x26	; 38
     8da:	80 93 a5 25 	sts	0x25A5, r24
			lcd_command("88 90 B");
     8de:	88 e9       	ldi	r24, 0x98	; 152
     8e0:	90 e2       	ldi	r25, 0x20	; 32
     8e2:	0e 94 86 0b 	call	0x170c	; 0x170c <lcd_command>
			break;
     8e6:	0f c0       	rjmp	.+30     	; 0x906 <brain_menu_control_dial+0x72>
		case LCD_TOUCH_ROW_C:
			STATE_menu = MENU_DIAL_C;
     8e8:	87 e2       	ldi	r24, 0x27	; 39
     8ea:	80 93 a5 25 	sts	0x25A5, r24
			lcd_command("88 90 C");
     8ee:	80 ea       	ldi	r24, 0xA0	; 160
     8f0:	90 e2       	ldi	r25, 0x20	; 32
     8f2:	0e 94 86 0b 	call	0x170c	; 0x170c <lcd_command>
			break;
     8f6:	07 c0       	rjmp	.+14     	; 0x906 <brain_menu_control_dial+0x72>
		case LCD_TOUCH_ROW_D:
			STATE_menu = MENU_DIAL_D;
     8f8:	88 e2       	ldi	r24, 0x28	; 40
     8fa:	80 93 a5 25 	sts	0x25A5, r24
			lcd_command("88 90 D");
     8fe:	88 ea       	ldi	r24, 0xA8	; 168
     900:	90 e2       	ldi	r25, 0x20	; 32
     902:	0e 94 86 0b 	call	0x170c	; 0x170c <lcd_command>
			break;
	}
}
     906:	cf 91       	pop	r28
     908:	08 95       	ret

0000090a <brain_menu_control_dial_select>:

void brain_menu_control_dial_select(uint8_t which_one){
     90a:	cf 93       	push	r28
     90c:	c8 2f       	mov	r28, r24
	//Announce
	audio_beep(BRAIN_BEEPS, BRAIN_VOLUME);
     90e:	81 e0       	ldi	r24, 0x01	; 1
     910:	64 e6       	ldi	r22, 0x64	; 100
     912:	70 e0       	ldi	r23, 0x00	; 0
     914:	0e 94 42 30 	call	0x6084	; 0x6084 <audio_beep>
	//Update Stat
	pwr_adj_left_right = which_one;
     918:	c0 93 ce 26 	sts	0x26CE, r28
	//Update Display
	switch(which_one){
     91c:	c1 36       	cpi	r28, 0x61	; 97
     91e:	19 f0       	breq	.+6      	; 0x926 <brain_menu_control_dial_select+0x1c>
     920:	c2 36       	cpi	r28, 0x62	; 98
     922:	51 f4       	brne	.+20     	; 0x938 <brain_menu_control_dial_select+0x2e>
     924:	05 c0       	rjmp	.+10     	; 0x930 <brain_menu_control_dial_select+0x26>
		case LCD_TOUCH_LEFT:
			lcd_command("31 L_SEL");
     926:	80 eb       	ldi	r24, 0xB0	; 176
     928:	90 e2       	ldi	r25, 0x20	; 32
     92a:	0e 94 86 0b 	call	0x170c	; 0x170c <lcd_command>
			break;
     92e:	04 c0       	rjmp	.+8      	; 0x938 <brain_menu_control_dial_select+0x2e>
		case LCD_TOUCH_RIGHT:
			lcd_command("31 R_SEL");
     930:	89 eb       	ldi	r24, 0xB9	; 185
     932:	90 e2       	ldi	r25, 0x20	; 32
     934:	0e 94 86 0b 	call	0x170c	; 0x170c <lcd_command>
			break;
	}
}
     938:	cf 91       	pop	r28
     93a:	08 95       	ret

0000093c <brain_menu_console>:

//=================
//== CONSOLE Menu

void brain_menu_console(){
	STATE_menu = MENU_CONSOLE;
     93c:	82 e2       	ldi	r24, 0x22	; 34
     93e:	80 93 a5 25 	sts	0x25A5, r24
	lcd_command("31 M_CON");
     942:	82 ec       	ldi	r24, 0xC2	; 194
     944:	90 e2       	ldi	r25, 0x20	; 32
     946:	0e 94 86 0b 	call	0x170c	; 0x170c <lcd_command>
}
     94a:	08 95       	ret

0000094c <brain_menu_update>:

//Update channel enabled indicators
void brain_menu_update(){
	if ((STATE_menu == MENU_OUTPUT) || (STATE_menu == MENU_CONTROL)) {
     94c:	80 91 a5 25 	lds	r24, 0x25A5
     950:	80 52       	subi	r24, 0x20	; 32
     952:	82 30       	cpi	r24, 0x02	; 2
     954:	08 f0       	brcs	.+2      	; 0x958 <brain_menu_update+0xc>
     956:	54 c0       	rjmp	.+168    	; 0xa00 <brain_menu_update+0xb4>
		if ((STATE_power_channels & _BV(0)) == 0){lcd_a(LCD_DISABLED);}
     958:	80 91 a4 25 	lds	r24, 0x25A4
     95c:	80 fd       	sbrc	r24, 0
     95e:	04 c0       	rjmp	.+8      	; 0x968 <brain_menu_update+0x1c>
     960:	81 e2       	ldi	r24, 0x21	; 33
     962:	0e 94 06 0c 	call	0x180c	; 0x180c <lcd_a>
     966:	0d c0       	rjmp	.+26     	; 0x982 <brain_menu_update+0x36>
		else {
			if (STATE_power_output == DISABLE){lcd_a(LCD_STANDBY);}
     968:	80 91 ab 25 	lds	r24, 0x25AB
     96c:	89 32       	cpi	r24, 0x29	; 41
     96e:	21 f4       	brne	.+8      	; 0x978 <brain_menu_update+0x2c>
     970:	80 e2       	ldi	r24, 0x20	; 32
     972:	0e 94 06 0c 	call	0x180c	; 0x180c <lcd_a>
     976:	05 c0       	rjmp	.+10     	; 0x982 <brain_menu_update+0x36>
			else if (STATE_power_output == ENABLE){lcd_a(LCD_ENABLED);}
     978:	8a 32       	cpi	r24, 0x2A	; 42
     97a:	19 f4       	brne	.+6      	; 0x982 <brain_menu_update+0x36>
     97c:	8f e1       	ldi	r24, 0x1F	; 31
     97e:	0e 94 06 0c 	call	0x180c	; 0x180c <lcd_a>
		}	
				
		if ((STATE_power_channels & _BV(1)) == 0){lcd_b(LCD_DISABLED);}
     982:	80 91 a4 25 	lds	r24, 0x25A4
     986:	81 fd       	sbrc	r24, 1
     988:	04 c0       	rjmp	.+8      	; 0x992 <brain_menu_update+0x46>
     98a:	81 e2       	ldi	r24, 0x21	; 33
     98c:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <lcd_b>
     990:	0d c0       	rjmp	.+26     	; 0x9ac <brain_menu_update+0x60>
		else {
			if (STATE_power_output == DISABLE){lcd_b(LCD_STANDBY);}
     992:	80 91 ab 25 	lds	r24, 0x25AB
     996:	89 32       	cpi	r24, 0x29	; 41
     998:	21 f4       	brne	.+8      	; 0x9a2 <brain_menu_update+0x56>
     99a:	80 e2       	ldi	r24, 0x20	; 32
     99c:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <lcd_b>
     9a0:	05 c0       	rjmp	.+10     	; 0x9ac <brain_menu_update+0x60>
			else if (STATE_power_output == ENABLE){lcd_b(LCD_ENABLED);}
     9a2:	8a 32       	cpi	r24, 0x2A	; 42
     9a4:	19 f4       	brne	.+6      	; 0x9ac <brain_menu_update+0x60>
     9a6:	8f e1       	ldi	r24, 0x1F	; 31
     9a8:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <lcd_b>
		}	

		if ((STATE_power_channels & _BV(2)) == 0){lcd_c(LCD_DISABLED);}
     9ac:	80 91 a4 25 	lds	r24, 0x25A4
     9b0:	82 fd       	sbrc	r24, 2
     9b2:	04 c0       	rjmp	.+8      	; 0x9bc <brain_menu_update+0x70>
     9b4:	81 e2       	ldi	r24, 0x21	; 33
     9b6:	0e 94 de 0b 	call	0x17bc	; 0x17bc <lcd_c>
     9ba:	0d c0       	rjmp	.+26     	; 0x9d6 <brain_menu_update+0x8a>
		else {
			if (STATE_power_output == DISABLE){lcd_c(LCD_STANDBY);}
     9bc:	80 91 ab 25 	lds	r24, 0x25AB
     9c0:	89 32       	cpi	r24, 0x29	; 41
     9c2:	21 f4       	brne	.+8      	; 0x9cc <brain_menu_update+0x80>
     9c4:	80 e2       	ldi	r24, 0x20	; 32
     9c6:	0e 94 de 0b 	call	0x17bc	; 0x17bc <lcd_c>
     9ca:	05 c0       	rjmp	.+10     	; 0x9d6 <brain_menu_update+0x8a>
			else if (STATE_power_output == ENABLE){lcd_c(LCD_ENABLED);}
     9cc:	8a 32       	cpi	r24, 0x2A	; 42
     9ce:	19 f4       	brne	.+6      	; 0x9d6 <brain_menu_update+0x8a>
     9d0:	8f e1       	ldi	r24, 0x1F	; 31
     9d2:	0e 94 de 0b 	call	0x17bc	; 0x17bc <lcd_c>
		}

		if ((STATE_power_channels & _BV(3)) == 0){lcd_d(LCD_DISABLED);}
     9d6:	80 91 a4 25 	lds	r24, 0x25A4
     9da:	83 fd       	sbrc	r24, 3
     9dc:	04 c0       	rjmp	.+8      	; 0x9e6 <brain_menu_update+0x9a>
     9de:	81 e2       	ldi	r24, 0x21	; 33
     9e0:	0e 94 ca 0b 	call	0x1794	; 0x1794 <lcd_d>
     9e4:	08 95       	ret
		else {
			if (STATE_power_output == DISABLE){lcd_d(LCD_STANDBY);}
     9e6:	80 91 ab 25 	lds	r24, 0x25AB
     9ea:	89 32       	cpi	r24, 0x29	; 41
     9ec:	21 f4       	brne	.+8      	; 0x9f6 <brain_menu_update+0xaa>
     9ee:	80 e2       	ldi	r24, 0x20	; 32
     9f0:	0e 94 ca 0b 	call	0x1794	; 0x1794 <lcd_d>
     9f4:	08 95       	ret
			else if (STATE_power_output == ENABLE){lcd_d(LCD_ENABLED);}
     9f6:	8a 32       	cpi	r24, 0x2A	; 42
     9f8:	19 f4       	brne	.+6      	; 0xa00 <brain_menu_update+0xb4>
     9fa:	8f e1       	ldi	r24, 0x1F	; 31
     9fc:	0e 94 ca 0b 	call	0x1794	; 0x1794 <lcd_d>
     a00:	08 95       	ret

00000a02 <brain_menu_load>:

void brain_button_pressed(){
	if (STATE_menu == MENU_STARTUP){brain_rotary_change(0);}
}

void brain_menu_load(uint8_t which_menu){
     a02:	cf 93       	push	r28
     a04:	c8 2f       	mov	r28, r24
	//Announce!
	audio_beep(BRAIN_BEEPS, BRAIN_VOLUME);
     a06:	81 e0       	ldi	r24, 0x01	; 1
     a08:	64 e6       	ldi	r22, 0x64	; 100
     a0a:	70 e0       	ldi	r23, 0x00	; 0
     a0c:	0e 94 42 30 	call	0x6084	; 0x6084 <audio_beep>
	
	//Reset LCD state for menu change (no need to update screen with old stuff)
	init_uart_buffer(&ulcd); //flush outgoing buffer
     a10:	80 eb       	ldi	r24, 0xB0	; 176
     a12:	9b e0       	ldi	r25, 0x0B	; 11
     a14:	0e 94 09 2d 	call	0x5a12	; 0x5a12 <init_uart_buffer>
	lcd_flow_control = LCD_READY; //clear any current transmissions
     a18:	82 e5       	ldi	r24, 0x52	; 82
     a1a:	80 93 e2 26 	sts	0x26E2, r24
	lcd_last_touch_command = LCD_TOUCH_NONE; //clear out any latent touch actions
     a1e:	85 e1       	ldi	r24, 0x15	; 21
     a20:	80 93 d0 26 	sts	0x26D0, r24
	lcd_command(""); //send \r to flush any existing partially transmitted commands
     a24:	8b ec       	ldi	r24, 0xCB	; 203
     a26:	90 e2       	ldi	r25, 0x20	; 32
     a28:	0e 94 86 0b 	call	0x170c	; 0x170c <lcd_command>
	
	switch (which_menu){
     a2c:	c0 32       	cpi	r28, 0x20	; 32
     a2e:	69 f0       	breq	.+26     	; 0xa4a <brain_menu_load+0x48>
     a30:	c1 32       	cpi	r28, 0x21	; 33
     a32:	18 f4       	brcc	.+6      	; 0xa3a <brain_menu_load+0x38>
     a34:	cf 31       	cpi	r28, 0x1F	; 31
     a36:	89 f4       	brne	.+34     	; 0xa5a <brain_menu_load+0x58>
     a38:	05 c0       	rjmp	.+10     	; 0xa44 <brain_menu_load+0x42>
     a3a:	c1 32       	cpi	r28, 0x21	; 33
     a3c:	49 f0       	breq	.+18     	; 0xa50 <brain_menu_load+0x4e>
     a3e:	c2 32       	cpi	r28, 0x22	; 34
     a40:	61 f4       	brne	.+24     	; 0xa5a <brain_menu_load+0x58>
     a42:	09 c0       	rjmp	.+18     	; 0xa56 <brain_menu_load+0x54>
		case MENU_STARTUP:
			brain_menu_output();
     a44:	0e 94 0d 04 	call	0x81a	; 0x81a <brain_menu_output>
			break;
     a48:	08 c0       	rjmp	.+16     	; 0xa5a <brain_menu_load+0x58>
		case MENU_OUTPUT:
			brain_menu_output();
     a4a:	0e 94 0d 04 	call	0x81a	; 0x81a <brain_menu_output>
			break;
     a4e:	05 c0       	rjmp	.+10     	; 0xa5a <brain_menu_load+0x58>
		case MENU_CONTROL:
			brain_menu_control();
     a50:	0e 94 42 04 	call	0x884	; 0x884 <brain_menu_control>
			break;
     a54:	02 c0       	rjmp	.+4      	; 0xa5a <brain_menu_load+0x58>
		case MENU_CONSOLE:
			brain_menu_console();
     a56:	0e 94 9e 04 	call	0x93c	; 0x93c <brain_menu_console>
			break;
	}
	brain_menu_update(); //Update channel indicators
     a5a:	0e 94 a6 04 	call	0x94c	; 0x94c <brain_menu_update>
}
     a5e:	cf 91       	pop	r28
     a60:	08 95       	ret

00000a62 <brain_rotary_change>:

//When the user turns the rotary dial...
void brain_rotary_change(uint8_t which_way){
     a62:	68 2f       	mov	r22, r24
	switch (STATE_menu){
     a64:	80 91 a5 25 	lds	r24, 0x25A5
     a68:	82 32       	cpi	r24, 0x22	; 34
     a6a:	c1 f1       	breq	.+112    	; 0xadc <brain_rotary_change+0x7a>
     a6c:	83 32       	cpi	r24, 0x23	; 35
     a6e:	40 f4       	brcc	.+16     	; 0xa80 <brain_rotary_change+0x1e>
     a70:	80 32       	cpi	r24, 0x20	; 32
     a72:	d1 f0       	breq	.+52     	; 0xaa8 <brain_rotary_change+0x46>
     a74:	81 32       	cpi	r24, 0x21	; 33
     a76:	28 f5       	brcc	.+74     	; 0xac2 <brain_rotary_change+0x60>
     a78:	8f 31       	cpi	r24, 0x1F	; 31
     a7a:	09 f0       	breq	.+2      	; 0xa7e <brain_rotary_change+0x1c>
     a7c:	77 c0       	rjmp	.+238    	; 0xb6c <brain_rotary_change+0x10a>
     a7e:	10 c0       	rjmp	.+32     	; 0xaa0 <brain_rotary_change+0x3e>
     a80:	86 32       	cpi	r24, 0x26	; 38
     a82:	09 f4       	brne	.+2      	; 0xa86 <brain_rotary_change+0x24>
     a84:	47 c0       	rjmp	.+142    	; 0xb14 <brain_rotary_change+0xb2>
     a86:	87 32       	cpi	r24, 0x27	; 39
     a88:	20 f4       	brcc	.+8      	; 0xa92 <brain_rotary_change+0x30>
     a8a:	85 32       	cpi	r24, 0x25	; 37
     a8c:	09 f0       	breq	.+2      	; 0xa90 <brain_rotary_change+0x2e>
     a8e:	6e c0       	rjmp	.+220    	; 0xb6c <brain_rotary_change+0x10a>
     a90:	32 c0       	rjmp	.+100    	; 0xaf6 <brain_rotary_change+0x94>
     a92:	87 32       	cpi	r24, 0x27	; 39
     a94:	09 f4       	brne	.+2      	; 0xa98 <brain_rotary_change+0x36>
     a96:	4d c0       	rjmp	.+154    	; 0xb32 <brain_rotary_change+0xd0>
     a98:	88 32       	cpi	r24, 0x28	; 40
     a9a:	09 f0       	breq	.+2      	; 0xa9e <brain_rotary_change+0x3c>
     a9c:	67 c0       	rjmp	.+206    	; 0xb6c <brain_rotary_change+0x10a>
     a9e:	58 c0       	rjmp	.+176    	; 0xb50 <brain_rotary_change+0xee>
		case MENU_STARTUP:
			brain_menu_load(MENU_OUTPUT);
     aa0:	80 e2       	ldi	r24, 0x20	; 32
     aa2:	0e 94 01 05 	call	0xa02	; 0xa02 <brain_menu_load>
			break;
     aa6:	08 95       	ret
		case MENU_OUTPUT:
			if (which_way == QUAD_DOWN){brain_menu_load(MENU_CONTROL);}
     aa8:	6e 32       	cpi	r22, 0x2E	; 46
     aaa:	21 f4       	brne	.+8      	; 0xab4 <brain_rotary_change+0x52>
     aac:	81 e2       	ldi	r24, 0x21	; 33
     aae:	0e 94 01 05 	call	0xa02	; 0xa02 <brain_menu_load>
     ab2:	08 95       	ret
			if (which_way == QUAD_UP){brain_menu_load(MENU_CONSOLE);}
     ab4:	6d 32       	cpi	r22, 0x2D	; 45
     ab6:	09 f0       	breq	.+2      	; 0xaba <brain_rotary_change+0x58>
     ab8:	59 c0       	rjmp	.+178    	; 0xb6c <brain_rotary_change+0x10a>
     aba:	82 e2       	ldi	r24, 0x22	; 34
     abc:	0e 94 01 05 	call	0xa02	; 0xa02 <brain_menu_load>
     ac0:	08 95       	ret
			break;
		case MENU_CONTROL:
			if (which_way == QUAD_DOWN){brain_menu_load(MENU_CONSOLE);}
     ac2:	6e 32       	cpi	r22, 0x2E	; 46
     ac4:	21 f4       	brne	.+8      	; 0xace <brain_rotary_change+0x6c>
     ac6:	82 e2       	ldi	r24, 0x22	; 34
     ac8:	0e 94 01 05 	call	0xa02	; 0xa02 <brain_menu_load>
     acc:	08 95       	ret
			if (which_way == QUAD_UP){brain_menu_load(MENU_OUTPUT);}
     ace:	6d 32       	cpi	r22, 0x2D	; 45
     ad0:	09 f0       	breq	.+2      	; 0xad4 <brain_rotary_change+0x72>
     ad2:	4c c0       	rjmp	.+152    	; 0xb6c <brain_rotary_change+0x10a>
     ad4:	80 e2       	ldi	r24, 0x20	; 32
     ad6:	0e 94 01 05 	call	0xa02	; 0xa02 <brain_menu_load>
     ada:	08 95       	ret
			break;
		case MENU_CONSOLE:
			if (which_way == QUAD_DOWN){brain_menu_load(MENU_OUTPUT);}
     adc:	6e 32       	cpi	r22, 0x2E	; 46
     ade:	21 f4       	brne	.+8      	; 0xae8 <brain_rotary_change+0x86>
     ae0:	80 e2       	ldi	r24, 0x20	; 32
     ae2:	0e 94 01 05 	call	0xa02	; 0xa02 <brain_menu_load>
     ae6:	08 95       	ret
			if (which_way == QUAD_UP){brain_menu_load(MENU_CONTROL);}
     ae8:	6d 32       	cpi	r22, 0x2D	; 45
     aea:	09 f0       	breq	.+2      	; 0xaee <brain_rotary_change+0x8c>
     aec:	3f c0       	rjmp	.+126    	; 0xb6c <brain_rotary_change+0x10a>
     aee:	81 e2       	ldi	r24, 0x21	; 33
     af0:	0e 94 01 05 	call	0xa02	; 0xa02 <brain_menu_load>
     af4:	08 95       	ret
			break;
		case MENU_DIAL_A:
			switch(pwr_adj_left_right){
     af6:	80 91 ce 26 	lds	r24, 0x26CE
     afa:	81 36       	cpi	r24, 0x61	; 97
     afc:	19 f0       	breq	.+6      	; 0xb04 <brain_rotary_change+0xa2>
     afe:	82 36       	cpi	r24, 0x62	; 98
     b00:	a9 f5       	brne	.+106    	; 0xb6c <brain_rotary_change+0x10a>
     b02:	04 c0       	rjmp	.+8      	; 0xb0c <brain_rotary_change+0xaa>
			case LCD_TOUCH_LEFT:					
				pwr_adj_change_increment(0, which_way);
     b04:	80 e0       	ldi	r24, 0x00	; 0
     b06:	0e 94 7b 13 	call	0x26f6	; 0x26f6 <pwr_adj_change_increment>
				break;
     b0a:	08 95       	ret
			case LCD_TOUCH_RIGHT:
				pwr_adj_change_increment(1, which_way);
     b0c:	81 e0       	ldi	r24, 0x01	; 1
     b0e:	0e 94 7b 13 	call	0x26f6	; 0x26f6 <pwr_adj_change_increment>
				break;
     b12:	08 95       	ret
			}
			break;
		case MENU_DIAL_B:
			switch(pwr_adj_left_right){
     b14:	80 91 ce 26 	lds	r24, 0x26CE
     b18:	81 36       	cpi	r24, 0x61	; 97
     b1a:	19 f0       	breq	.+6      	; 0xb22 <brain_rotary_change+0xc0>
     b1c:	82 36       	cpi	r24, 0x62	; 98
     b1e:	31 f5       	brne	.+76     	; 0xb6c <brain_rotary_change+0x10a>
     b20:	04 c0       	rjmp	.+8      	; 0xb2a <brain_rotary_change+0xc8>
			case LCD_TOUCH_LEFT:
				pwr_adj_change_increment(2, which_way);
     b22:	82 e0       	ldi	r24, 0x02	; 2
     b24:	0e 94 7b 13 	call	0x26f6	; 0x26f6 <pwr_adj_change_increment>
				break;
     b28:	08 95       	ret
			case LCD_TOUCH_RIGHT:
				pwr_adj_change_increment(3, which_way);
     b2a:	83 e0       	ldi	r24, 0x03	; 3
     b2c:	0e 94 7b 13 	call	0x26f6	; 0x26f6 <pwr_adj_change_increment>
				break;
     b30:	08 95       	ret
			}
			break;
		case MENU_DIAL_C:
			switch(pwr_adj_left_right){
     b32:	80 91 ce 26 	lds	r24, 0x26CE
     b36:	81 36       	cpi	r24, 0x61	; 97
     b38:	19 f0       	breq	.+6      	; 0xb40 <brain_rotary_change+0xde>
     b3a:	82 36       	cpi	r24, 0x62	; 98
     b3c:	b9 f4       	brne	.+46     	; 0xb6c <brain_rotary_change+0x10a>
     b3e:	04 c0       	rjmp	.+8      	; 0xb48 <brain_rotary_change+0xe6>
			case LCD_TOUCH_LEFT:
				pwr_adj_change_increment(4, which_way);
     b40:	84 e0       	ldi	r24, 0x04	; 4
     b42:	0e 94 7b 13 	call	0x26f6	; 0x26f6 <pwr_adj_change_increment>
				break;
     b46:	08 95       	ret
			case LCD_TOUCH_RIGHT:
				pwr_adj_change_increment(5, which_way);
     b48:	85 e0       	ldi	r24, 0x05	; 5
     b4a:	0e 94 7b 13 	call	0x26f6	; 0x26f6 <pwr_adj_change_increment>
				break;
     b4e:	08 95       	ret
			}
			break;
		case MENU_DIAL_D:
			switch(pwr_adj_left_right){
     b50:	80 91 ce 26 	lds	r24, 0x26CE
     b54:	81 36       	cpi	r24, 0x61	; 97
     b56:	19 f0       	breq	.+6      	; 0xb5e <brain_rotary_change+0xfc>
     b58:	82 36       	cpi	r24, 0x62	; 98
     b5a:	41 f4       	brne	.+16     	; 0xb6c <brain_rotary_change+0x10a>
     b5c:	04 c0       	rjmp	.+8      	; 0xb66 <brain_rotary_change+0x104>
			case LCD_TOUCH_LEFT:
				pwr_adj_change_increment(6, which_way);
     b5e:	86 e0       	ldi	r24, 0x06	; 6
     b60:	0e 94 7b 13 	call	0x26f6	; 0x26f6 <pwr_adj_change_increment>
				break;
     b64:	08 95       	ret
			case LCD_TOUCH_RIGHT:
				pwr_adj_change_increment(7, which_way);
     b66:	87 e0       	ldi	r24, 0x07	; 7
     b68:	0e 94 7b 13 	call	0x26f6	; 0x26f6 <pwr_adj_change_increment>
     b6c:	08 95       	ret

00000b6e <brain_button_pressed>:
	//Update LCD
	brain_menu_update();
}	

void brain_button_pressed(){
	if (STATE_menu == MENU_STARTUP){brain_rotary_change(0);}
     b6e:	80 91 a5 25 	lds	r24, 0x25A5
     b72:	8f 31       	cpi	r24, 0x1F	; 31
     b74:	19 f4       	brne	.+6      	; 0xb7c <brain_button_pressed+0xe>
     b76:	80 e0       	ldi	r24, 0x00	; 0
     b78:	0e 94 31 05 	call	0xa62	; 0xa62 <brain_rotary_change>
     b7c:	08 95       	ret

00000b7e <brain_power_master>:
	brain_menu_update();
}

void brain_power_master(){
	//Go to STANDBY (DISABLE)
	if (STATE_power_output == ENABLE){
     b7e:	80 91 ab 25 	lds	r24, 0x25AB
     b82:	8a 32       	cpi	r24, 0x2A	; 42
     b84:	89 f4       	brne	.+34     	; 0xba8 <brain_power_master+0x2a>
			STATE_power_output = DISABLE;
     b86:	89 e2       	ldi	r24, 0x29	; 41
     b88:	80 93 ab 25 	sts	0x25AB, r24
			pwr_main_off(CHANNEL_ALL);
     b8c:	8a e3       	ldi	r24, 0x3A	; 58
     b8e:	0e 94 e1 14 	call	0x29c2	; 0x29c2 <pwr_main_off>
			pwr_adj_off(CHANNEL_ALL);
     b92:	8a e3       	ldi	r24, 0x3A	; 58
     b94:	0e 94 24 13 	call	0x2648	; 0x2648 <pwr_adj_off>
			fp_led_disable(CHANNEL_M);		
     b98:	85 e0       	ldi	r24, 0x05	; 5
     b9a:	0e 94 8a 09 	call	0x1314	; 0x1314 <fp_led_disable>
			PORTH.OUTCLR = _BV(0); //xxx -- Toggle 5V Control output with master	
     b9e:	81 e0       	ldi	r24, 0x01	; 1
     ba0:	e0 ee       	ldi	r30, 0xE0	; 224
     ba2:	f6 e0       	ldi	r31, 0x06	; 6
     ba4:	86 83       	std	Z+6, r24	; 0x06
     ba6:	12 c0       	rjmp	.+36     	; 0xbcc <brain_power_master+0x4e>
	}
	
	//Enable OUTPUT! (ENABLE)
	else {	
		if (STATE_power_output == DISABLE){
     ba8:	89 32       	cpi	r24, 0x29	; 41
     baa:	81 f4       	brne	.+32     	; 0xbcc <brain_power_master+0x4e>
			STATE_power_output = ENABLE;
     bac:	8a e2       	ldi	r24, 0x2A	; 42
     bae:	80 93 ab 25 	sts	0x25AB, r24
			pwr_main_on(CHANNEL_RESTORE);
     bb2:	8c e3       	ldi	r24, 0x3C	; 60
     bb4:	0e 94 ab 14 	call	0x2956	; 0x2956 <pwr_main_on>
			pwr_adj_on(CHANNEL_RESTORE);
     bb8:	8c e3       	ldi	r24, 0x3C	; 60
     bba:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <pwr_adj_on>
			fp_led_enable(CHANNEL_M);
     bbe:	85 e0       	ldi	r24, 0x05	; 5
     bc0:	0e 94 5e 09 	call	0x12bc	; 0x12bc <fp_led_enable>
			PORTH.OUTSET = _BV(0); //xxx -- Toggle 5V Control output with master
     bc4:	81 e0       	ldi	r24, 0x01	; 1
     bc6:	e0 ee       	ldi	r30, 0xE0	; 224
     bc8:	f6 e0       	ldi	r31, 0x06	; 6
     bca:	85 83       	std	Z+5, r24	; 0x05
		}			
	}
	
	//Update LCD
	brain_menu_update();
     bcc:	0e 94 a6 04 	call	0x94c	; 0x94c <brain_menu_update>
}	
     bd0:	08 95       	ret

00000bd2 <brain_power_on>:
	fp_led_disable(which);
	//Update LCD
	brain_menu_update();
}

void brain_power_on(uint8_t which){
     bd2:	cf 93       	push	r28
     bd4:	c8 2f       	mov	r28, r24
	//Update state
	STATE_power_channels |= _BV(which);
     bd6:	81 e0       	ldi	r24, 0x01	; 1
     bd8:	90 e0       	ldi	r25, 0x00	; 0
     bda:	0c 2e       	mov	r0, r28
     bdc:	02 c0       	rjmp	.+4      	; 0xbe2 <brain_power_on+0x10>
     bde:	88 0f       	add	r24, r24
     be0:	99 1f       	adc	r25, r25
     be2:	0a 94       	dec	r0
     be4:	e2 f7       	brpl	.-8      	; 0xbde <brain_power_on+0xc>
     be6:	90 91 a4 25 	lds	r25, 0x25A4
     bea:	89 2b       	or	r24, r25
     bec:	80 93 a4 25 	sts	0x25A4, r24
	//Channel enabled
	fp_led_enable(which);
     bf0:	8c 2f       	mov	r24, r28
     bf2:	0e 94 5e 09 	call	0x12bc	; 0x12bc <fp_led_enable>
	if (STATE_power_output == ENABLE) {pwr_main_on(which); pwr_adj_on(which);}
     bf6:	80 91 ab 25 	lds	r24, 0x25AB
     bfa:	8a 32       	cpi	r24, 0x2A	; 42
     bfc:	31 f4       	brne	.+12     	; 0xc0a <brain_power_on+0x38>
     bfe:	8c 2f       	mov	r24, r28
     c00:	0e 94 ab 14 	call	0x2956	; 0x2956 <pwr_main_on>
     c04:	8c 2f       	mov	r24, r28
     c06:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <pwr_adj_on>
	if (STATE_power_output == DISABLE) {}	
	//Update LCD
	brain_menu_update();
     c0a:	0e 94 a6 04 	call	0x94c	; 0x94c <brain_menu_update>
}
     c0e:	cf 91       	pop	r28
     c10:	08 95       	ret

00000c12 <brain_power_off>:
		else {
			brain_power_off(which);
		}	
}

void brain_power_off(uint8_t which){
     c12:	cf 93       	push	r28
     c14:	c8 2f       	mov	r28, r24
	//Update state
	STATE_power_channels &= ~_BV(which);
     c16:	81 e0       	ldi	r24, 0x01	; 1
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	0c 2e       	mov	r0, r28
     c1c:	02 c0       	rjmp	.+4      	; 0xc22 <brain_power_off+0x10>
     c1e:	88 0f       	add	r24, r24
     c20:	99 1f       	adc	r25, r25
     c22:	0a 94       	dec	r0
     c24:	e2 f7       	brpl	.-8      	; 0xc1e <brain_power_off+0xc>
     c26:	80 95       	com	r24
     c28:	90 91 a4 25 	lds	r25, 0x25A4
     c2c:	89 23       	and	r24, r25
     c2e:	80 93 a4 25 	sts	0x25A4, r24
	//Channel disabled
	pwr_main_off(which);
     c32:	8c 2f       	mov	r24, r28
     c34:	0e 94 e1 14 	call	0x29c2	; 0x29c2 <pwr_main_off>
	pwr_adj_off(which);
     c38:	8c 2f       	mov	r24, r28
     c3a:	0e 94 24 13 	call	0x2648	; 0x2648 <pwr_adj_off>
	fp_led_disable(which);
     c3e:	8c 2f       	mov	r24, r28
     c40:	0e 94 8a 09 	call	0x1314	; 0x1314 <fp_led_disable>
	//Update LCD
	brain_menu_update();
     c44:	0e 94 a6 04 	call	0x94c	; 0x94c <brain_menu_update>
}
     c48:	cf 91       	pop	r28
     c4a:	08 95       	ret

00000c4c <brain_power>:
//Toggle power state and effect the new behavior
//Toggle adjustable and fixed channels together
void brain_power(uint8_t which){
	//Detect and then do the opposite (e.g. toggle state)
	//Channel disabled
		if ((STATE_power_channels & _BV(which))==0){		
     c4c:	20 91 a4 25 	lds	r18, 0x25A4
     c50:	30 e0       	ldi	r19, 0x00	; 0
     c52:	08 2e       	mov	r0, r24
     c54:	02 c0       	rjmp	.+4      	; 0xc5a <brain_power+0xe>
     c56:	35 95       	asr	r19
     c58:	27 95       	ror	r18
     c5a:	0a 94       	dec	r0
     c5c:	e2 f7       	brpl	.-8      	; 0xc56 <brain_power+0xa>
     c5e:	20 fd       	sbrc	r18, 0
     c60:	03 c0       	rjmp	.+6      	; 0xc68 <brain_power+0x1c>
			brain_power_on(which);
     c62:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <brain_power_on>
     c66:	08 95       	ret
		}	
	//Channel enabled
		else {
			brain_power_off(which);
     c68:	0e 94 09 06 	call	0xc12	; 0xc12 <brain_power_off>
     c6c:	08 95       	ret

00000c6e <service_brain>:

//#############################################################
//## SERVICE ROUTINE
//#############################################################

void service_brain(){
     c6e:	cf 93       	push	r28
     c70:	df 93       	push	r29
     c72:	cd b7       	in	r28, 0x3d	; 61
     c74:	de b7       	in	r29, 0x3e	; 62
     c76:	2c 97       	sbiw	r28, 0x0c	; 12
     c78:	cd bf       	out	0x3d, r28	; 61
     c7a:	de bf       	out	0x3e, r29	; 62
	static uint16_t menu_update_counter = 0;
	char meter_value[12];
	//Decide when to update Power output measurements
	menu_update_counter++;
     c7c:	80 91 33 22 	lds	r24, 0x2233
     c80:	90 91 34 22 	lds	r25, 0x2234
     c84:	01 96       	adiw	r24, 0x01	; 1
     c86:	80 93 33 22 	sts	0x2233, r24
     c8a:	90 93 34 22 	sts	0x2234, r25
	if (menu_update_counter >= 500){
     c8e:	21 e0       	ldi	r18, 0x01	; 1
     c90:	84 3f       	cpi	r24, 0xF4	; 244
     c92:	92 07       	cpc	r25, r18
     c94:	08 f4       	brcc	.+2      	; 0xc98 <service_brain+0x2a>
     c96:	c8 c2       	rjmp	.+1424   	; 0x1228 <service_brain+0x5ba>
		menu_update_counter = 0;
     c98:	10 92 33 22 	sts	0x2233, r1
     c9c:	10 92 34 22 	sts	0x2234, r1
		switch(STATE_menu){
     ca0:	80 91 a5 25 	lds	r24, 0x25A5
     ca4:	84 32       	cpi	r24, 0x24	; 36
     ca6:	09 f4       	brne	.+2      	; 0xcaa <service_brain+0x3c>
     ca8:	fb c0       	rjmp	.+502    	; 0xea0 <service_brain+0x232>
     caa:	85 32       	cpi	r24, 0x25	; 37
     cac:	50 f4       	brcc	.+20     	; 0xcc2 <service_brain+0x54>
     cae:	81 32       	cpi	r24, 0x21	; 33
     cb0:	09 f4       	brne	.+2      	; 0xcb4 <service_brain+0x46>
     cb2:	67 c1       	rjmp	.+718    	; 0xf82 <service_brain+0x314>
     cb4:	83 32       	cpi	r24, 0x23	; 35
     cb6:	09 f4       	brne	.+2      	; 0xcba <service_brain+0x4c>
     cb8:	82 c0       	rjmp	.+260    	; 0xdbe <service_brain+0x150>
     cba:	80 32       	cpi	r24, 0x20	; 32
     cbc:	09 f0       	breq	.+2      	; 0xcc0 <service_brain+0x52>
     cbe:	b4 c2       	rjmp	.+1384   	; 0x1228 <service_brain+0x5ba>
     cc0:	0d c0       	rjmp	.+26     	; 0xcdc <service_brain+0x6e>
     cc2:	86 32       	cpi	r24, 0x26	; 38
     cc4:	09 f4       	brne	.+2      	; 0xcc8 <service_brain+0x5a>
     cc6:	04 c2       	rjmp	.+1032   	; 0x10d0 <service_brain+0x462>
     cc8:	86 32       	cpi	r24, 0x26	; 38
     cca:	08 f4       	brcc	.+2      	; 0xcce <service_brain+0x60>
     ccc:	c3 c1       	rjmp	.+902    	; 0x1054 <service_brain+0x3e6>
     cce:	87 32       	cpi	r24, 0x27	; 39
     cd0:	09 f4       	brne	.+2      	; 0xcd4 <service_brain+0x66>
     cd2:	38 c2       	rjmp	.+1136   	; 0x1144 <service_brain+0x4d6>
     cd4:	88 32       	cpi	r24, 0x28	; 40
     cd6:	09 f0       	breq	.+2      	; 0xcda <service_brain+0x6c>
     cd8:	a7 c2       	rjmp	.+1358   	; 0x1228 <service_brain+0x5ba>
     cda:	6e c2       	rjmp	.+1244   	; 0x11b8 <service_brain+0x54a>
			case MENU_OUTPUT:
				adc_data(0, VOLTAGE_POS, meter_value); //A V+
     cdc:	80 e0       	ldi	r24, 0x00	; 0
     cde:	67 e6       	ldi	r22, 0x67	; 103
     ce0:	ae 01       	movw	r20, r28
     ce2:	4f 5f       	subi	r20, 0xFF	; 255
     ce4:	5f 4f       	sbci	r21, 0xFF	; 255
     ce6:	0e 94 cf 01 	call	0x39e	; 0x39e <adc_data>
				lcd_update("75 1 ", meter_value);
     cea:	8c ec       	ldi	r24, 0xCC	; 204
     cec:	90 e2       	ldi	r25, 0x20	; 32
     cee:	be 01       	movw	r22, r28
     cf0:	6f 5f       	subi	r22, 0xFF	; 255
     cf2:	7f 4f       	sbci	r23, 0xFF	; 255
     cf4:	0e 94 1a 0c 	call	0x1834	; 0x1834 <lcd_update>
				adc_data(1, CURRENT_HI_RES, meter_value); //A I+
     cf8:	81 e0       	ldi	r24, 0x01	; 1
     cfa:	6a e6       	ldi	r22, 0x6A	; 106
     cfc:	ae 01       	movw	r20, r28
     cfe:	4f 5f       	subi	r20, 0xFF	; 255
     d00:	5f 4f       	sbci	r21, 0xFF	; 255
     d02:	0e 94 cf 01 	call	0x39e	; 0x39e <adc_data>
				lcd_update("75 11 ", meter_value);
     d06:	82 ed       	ldi	r24, 0xD2	; 210
     d08:	90 e2       	ldi	r25, 0x20	; 32
     d0a:	be 01       	movw	r22, r28
     d0c:	6f 5f       	subi	r22, 0xFF	; 255
     d0e:	7f 4f       	sbci	r23, 0xFF	; 255
     d10:	0e 94 1a 0c 	call	0x1834	; 0x1834 <lcd_update>
				adc_data(4, VOLTAGE_POS, meter_value); //B V+
     d14:	84 e0       	ldi	r24, 0x04	; 4
     d16:	67 e6       	ldi	r22, 0x67	; 103
     d18:	ae 01       	movw	r20, r28
     d1a:	4f 5f       	subi	r20, 0xFF	; 255
     d1c:	5f 4f       	sbci	r21, 0xFF	; 255
     d1e:	0e 94 cf 01 	call	0x39e	; 0x39e <adc_data>
				lcd_update("75 2 ", meter_value);
     d22:	89 ed       	ldi	r24, 0xD9	; 217
     d24:	90 e2       	ldi	r25, 0x20	; 32
     d26:	be 01       	movw	r22, r28
     d28:	6f 5f       	subi	r22, 0xFF	; 255
     d2a:	7f 4f       	sbci	r23, 0xFF	; 255
     d2c:	0e 94 1a 0c 	call	0x1834	; 0x1834 <lcd_update>
				adc_data(5, CURRENT_HI_RES, meter_value); //B I+
     d30:	85 e0       	ldi	r24, 0x05	; 5
     d32:	6a e6       	ldi	r22, 0x6A	; 106
     d34:	ae 01       	movw	r20, r28
     d36:	4f 5f       	subi	r20, 0xFF	; 255
     d38:	5f 4f       	sbci	r21, 0xFF	; 255
     d3a:	0e 94 cf 01 	call	0x39e	; 0x39e <adc_data>
				lcd_update("75 21 ", meter_value);
     d3e:	8f ed       	ldi	r24, 0xDF	; 223
     d40:	90 e2       	ldi	r25, 0x20	; 32
     d42:	be 01       	movw	r22, r28
     d44:	6f 5f       	subi	r22, 0xFF	; 255
     d46:	7f 4f       	sbci	r23, 0xFF	; 255
     d48:	0e 94 1a 0c 	call	0x1834	; 0x1834 <lcd_update>
				adc_data(8, VOLTAGE_POS, meter_value); //C V+
     d4c:	88 e0       	ldi	r24, 0x08	; 8
     d4e:	67 e6       	ldi	r22, 0x67	; 103
     d50:	ae 01       	movw	r20, r28
     d52:	4f 5f       	subi	r20, 0xFF	; 255
     d54:	5f 4f       	sbci	r21, 0xFF	; 255
     d56:	0e 94 cf 01 	call	0x39e	; 0x39e <adc_data>
				lcd_update("75 3 ", meter_value);
     d5a:	86 ee       	ldi	r24, 0xE6	; 230
     d5c:	90 e2       	ldi	r25, 0x20	; 32
     d5e:	be 01       	movw	r22, r28
     d60:	6f 5f       	subi	r22, 0xFF	; 255
     d62:	7f 4f       	sbci	r23, 0xFF	; 255
     d64:	0e 94 1a 0c 	call	0x1834	; 0x1834 <lcd_update>
				adc_data(9, CURRENT_HI_RES, meter_value); //C I+
     d68:	89 e0       	ldi	r24, 0x09	; 9
     d6a:	6a e6       	ldi	r22, 0x6A	; 106
     d6c:	ae 01       	movw	r20, r28
     d6e:	4f 5f       	subi	r20, 0xFF	; 255
     d70:	5f 4f       	sbci	r21, 0xFF	; 255
     d72:	0e 94 cf 01 	call	0x39e	; 0x39e <adc_data>
				lcd_update("75 31 ", meter_value);
     d76:	8c ee       	ldi	r24, 0xEC	; 236
     d78:	90 e2       	ldi	r25, 0x20	; 32
     d7a:	be 01       	movw	r22, r28
     d7c:	6f 5f       	subi	r22, 0xFF	; 255
     d7e:	7f 4f       	sbci	r23, 0xFF	; 255
     d80:	0e 94 1a 0c 	call	0x1834	; 0x1834 <lcd_update>
				adc_data(12, VOLTAGE_POS, meter_value); //D V+
     d84:	8c e0       	ldi	r24, 0x0C	; 12
     d86:	67 e6       	ldi	r22, 0x67	; 103
     d88:	ae 01       	movw	r20, r28
     d8a:	4f 5f       	subi	r20, 0xFF	; 255
     d8c:	5f 4f       	sbci	r21, 0xFF	; 255
     d8e:	0e 94 cf 01 	call	0x39e	; 0x39e <adc_data>
				lcd_update("75 4 ", meter_value);
     d92:	83 ef       	ldi	r24, 0xF3	; 243
     d94:	90 e2       	ldi	r25, 0x20	; 32
     d96:	be 01       	movw	r22, r28
     d98:	6f 5f       	subi	r22, 0xFF	; 255
     d9a:	7f 4f       	sbci	r23, 0xFF	; 255
     d9c:	0e 94 1a 0c 	call	0x1834	; 0x1834 <lcd_update>
				adc_data(13, CURRENT_HI_RES, meter_value); //D I+
     da0:	8d e0       	ldi	r24, 0x0D	; 13
     da2:	6a e6       	ldi	r22, 0x6A	; 106
     da4:	ae 01       	movw	r20, r28
     da6:	4f 5f       	subi	r20, 0xFF	; 255
     da8:	5f 4f       	sbci	r21, 0xFF	; 255
     daa:	0e 94 cf 01 	call	0x39e	; 0x39e <adc_data>
				lcd_update("75 41 ", meter_value);
     dae:	89 ef       	ldi	r24, 0xF9	; 249
     db0:	90 e2       	ldi	r25, 0x20	; 32
     db2:	be 01       	movw	r22, r28
     db4:	6f 5f       	subi	r22, 0xFF	; 255
     db6:	7f 4f       	sbci	r23, 0xFF	; 255
     db8:	0e 94 1a 0c 	call	0x1834	; 0x1834 <lcd_update>
				break;
     dbc:	35 c2       	rjmp	.+1130   	; 0x1228 <service_brain+0x5ba>
			case MENU_DETAIL_AB:
				adc_data(0, VOLTAGE_POS, meter_value); //A V+
     dbe:	80 e0       	ldi	r24, 0x00	; 0
     dc0:	67 e6       	ldi	r22, 0x67	; 103
     dc2:	ae 01       	movw	r20, r28
     dc4:	4f 5f       	subi	r20, 0xFF	; 255
     dc6:	5f 4f       	sbci	r21, 0xFF	; 255
     dc8:	0e 94 cf 01 	call	0x39e	; 0x39e <adc_data>
				lcd_update("75 50 ", meter_value);
     dcc:	80 e0       	ldi	r24, 0x00	; 0
     dce:	91 e2       	ldi	r25, 0x21	; 33
     dd0:	be 01       	movw	r22, r28
     dd2:	6f 5f       	subi	r22, 0xFF	; 255
     dd4:	7f 4f       	sbci	r23, 0xFF	; 255
     dd6:	0e 94 1a 0c 	call	0x1834	; 0x1834 <lcd_update>
				adc_data(1, CURRENT_HI_RES, meter_value); //A I+
     dda:	81 e0       	ldi	r24, 0x01	; 1
     ddc:	6a e6       	ldi	r22, 0x6A	; 106
     dde:	ae 01       	movw	r20, r28
     de0:	4f 5f       	subi	r20, 0xFF	; 255
     de2:	5f 4f       	sbci	r21, 0xFF	; 255
     de4:	0e 94 cf 01 	call	0x39e	; 0x39e <adc_data>
				lcd_update("75 51 ", meter_value);
     de8:	87 e0       	ldi	r24, 0x07	; 7
     dea:	91 e2       	ldi	r25, 0x21	; 33
     dec:	be 01       	movw	r22, r28
     dee:	6f 5f       	subi	r22, 0xFF	; 255
     df0:	7f 4f       	sbci	r23, 0xFF	; 255
     df2:	0e 94 1a 0c 	call	0x1834	; 0x1834 <lcd_update>
				adc_data(2, VOLTAGE_NEG, meter_value); //A V-
     df6:	82 e0       	ldi	r24, 0x02	; 2
     df8:	68 e6       	ldi	r22, 0x68	; 104
     dfa:	ae 01       	movw	r20, r28
     dfc:	4f 5f       	subi	r20, 0xFF	; 255
     dfe:	5f 4f       	sbci	r21, 0xFF	; 255
     e00:	0e 94 cf 01 	call	0x39e	; 0x39e <adc_data>
				lcd_update("75 52 -", meter_value);
     e04:	8e e0       	ldi	r24, 0x0E	; 14
     e06:	91 e2       	ldi	r25, 0x21	; 33
     e08:	be 01       	movw	r22, r28
     e0a:	6f 5f       	subi	r22, 0xFF	; 255
     e0c:	7f 4f       	sbci	r23, 0xFF	; 255
     e0e:	0e 94 1a 0c 	call	0x1834	; 0x1834 <lcd_update>
				adc_data(3, CURRENT_HI_RES, meter_value); //A I-
     e12:	83 e0       	ldi	r24, 0x03	; 3
     e14:	6a e6       	ldi	r22, 0x6A	; 106
     e16:	ae 01       	movw	r20, r28
     e18:	4f 5f       	subi	r20, 0xFF	; 255
     e1a:	5f 4f       	sbci	r21, 0xFF	; 255
     e1c:	0e 94 cf 01 	call	0x39e	; 0x39e <adc_data>
				lcd_update("75 53 -", meter_value);
     e20:	86 e1       	ldi	r24, 0x16	; 22
     e22:	91 e2       	ldi	r25, 0x21	; 33
     e24:	be 01       	movw	r22, r28
     e26:	6f 5f       	subi	r22, 0xFF	; 255
     e28:	7f 4f       	sbci	r23, 0xFF	; 255
     e2a:	0e 94 1a 0c 	call	0x1834	; 0x1834 <lcd_update>
				adc_data(4, VOLTAGE_POS, meter_value); //B V+
     e2e:	84 e0       	ldi	r24, 0x04	; 4
     e30:	67 e6       	ldi	r22, 0x67	; 103
     e32:	ae 01       	movw	r20, r28
     e34:	4f 5f       	subi	r20, 0xFF	; 255
     e36:	5f 4f       	sbci	r21, 0xFF	; 255
     e38:	0e 94 cf 01 	call	0x39e	; 0x39e <adc_data>
				lcd_update("75 54 ", meter_value);
     e3c:	8e e1       	ldi	r24, 0x1E	; 30
     e3e:	91 e2       	ldi	r25, 0x21	; 33
     e40:	be 01       	movw	r22, r28
     e42:	6f 5f       	subi	r22, 0xFF	; 255
     e44:	7f 4f       	sbci	r23, 0xFF	; 255
     e46:	0e 94 1a 0c 	call	0x1834	; 0x1834 <lcd_update>
				adc_data(5, CURRENT_HI_RES, meter_value); //B I+
     e4a:	85 e0       	ldi	r24, 0x05	; 5
     e4c:	6a e6       	ldi	r22, 0x6A	; 106
     e4e:	ae 01       	movw	r20, r28
     e50:	4f 5f       	subi	r20, 0xFF	; 255
     e52:	5f 4f       	sbci	r21, 0xFF	; 255
     e54:	0e 94 cf 01 	call	0x39e	; 0x39e <adc_data>
				lcd_update("75 55 ", meter_value);
     e58:	85 e2       	ldi	r24, 0x25	; 37
     e5a:	91 e2       	ldi	r25, 0x21	; 33
     e5c:	be 01       	movw	r22, r28
     e5e:	6f 5f       	subi	r22, 0xFF	; 255
     e60:	7f 4f       	sbci	r23, 0xFF	; 255
     e62:	0e 94 1a 0c 	call	0x1834	; 0x1834 <lcd_update>
				adc_data(6, VOLTAGE_NEG, meter_value); //B V-
     e66:	86 e0       	ldi	r24, 0x06	; 6
     e68:	68 e6       	ldi	r22, 0x68	; 104
     e6a:	ae 01       	movw	r20, r28
     e6c:	4f 5f       	subi	r20, 0xFF	; 255
     e6e:	5f 4f       	sbci	r21, 0xFF	; 255
     e70:	0e 94 cf 01 	call	0x39e	; 0x39e <adc_data>
				lcd_update("75 56 -", meter_value);
     e74:	8c e2       	ldi	r24, 0x2C	; 44
     e76:	91 e2       	ldi	r25, 0x21	; 33
     e78:	be 01       	movw	r22, r28
     e7a:	6f 5f       	subi	r22, 0xFF	; 255
     e7c:	7f 4f       	sbci	r23, 0xFF	; 255
     e7e:	0e 94 1a 0c 	call	0x1834	; 0x1834 <lcd_update>
				adc_data(7, CURRENT_HI_RES, meter_value); //B I-
     e82:	87 e0       	ldi	r24, 0x07	; 7
     e84:	6a e6       	ldi	r22, 0x6A	; 106
     e86:	ae 01       	movw	r20, r28
     e88:	4f 5f       	subi	r20, 0xFF	; 255
     e8a:	5f 4f       	sbci	r21, 0xFF	; 255
     e8c:	0e 94 cf 01 	call	0x39e	; 0x39e <adc_data>
				lcd_update("75 57 -", meter_value);
     e90:	84 e3       	ldi	r24, 0x34	; 52
     e92:	91 e2       	ldi	r25, 0x21	; 33
     e94:	be 01       	movw	r22, r28
     e96:	6f 5f       	subi	r22, 0xFF	; 255
     e98:	7f 4f       	sbci	r23, 0xFF	; 255
     e9a:	0e 94 1a 0c 	call	0x1834	; 0x1834 <lcd_update>
				break;
     e9e:	c4 c1       	rjmp	.+904    	; 0x1228 <service_brain+0x5ba>
			case MENU_DETAIL_CD:
				adc_data(8, VOLTAGE_POS, meter_value); //C V+
     ea0:	88 e0       	ldi	r24, 0x08	; 8
     ea2:	67 e6       	ldi	r22, 0x67	; 103
     ea4:	ae 01       	movw	r20, r28
     ea6:	4f 5f       	subi	r20, 0xFF	; 255
     ea8:	5f 4f       	sbci	r21, 0xFF	; 255
     eaa:	0e 94 cf 01 	call	0x39e	; 0x39e <adc_data>
				lcd_update("75 50 ", meter_value);
     eae:	80 e0       	ldi	r24, 0x00	; 0
     eb0:	91 e2       	ldi	r25, 0x21	; 33
     eb2:	be 01       	movw	r22, r28
     eb4:	6f 5f       	subi	r22, 0xFF	; 255
     eb6:	7f 4f       	sbci	r23, 0xFF	; 255
     eb8:	0e 94 1a 0c 	call	0x1834	; 0x1834 <lcd_update>
				adc_data(9, CURRENT_HI_RES, meter_value); //C I+
     ebc:	89 e0       	ldi	r24, 0x09	; 9
     ebe:	6a e6       	ldi	r22, 0x6A	; 106
     ec0:	ae 01       	movw	r20, r28
     ec2:	4f 5f       	subi	r20, 0xFF	; 255
     ec4:	5f 4f       	sbci	r21, 0xFF	; 255
     ec6:	0e 94 cf 01 	call	0x39e	; 0x39e <adc_data>
				lcd_update("75 51 ", meter_value);
     eca:	87 e0       	ldi	r24, 0x07	; 7
     ecc:	91 e2       	ldi	r25, 0x21	; 33
     ece:	be 01       	movw	r22, r28
     ed0:	6f 5f       	subi	r22, 0xFF	; 255
     ed2:	7f 4f       	sbci	r23, 0xFF	; 255
     ed4:	0e 94 1a 0c 	call	0x1834	; 0x1834 <lcd_update>
				adc_data(10, VOLTAGE_NEG, meter_value); //C V-
     ed8:	8a e0       	ldi	r24, 0x0A	; 10
     eda:	68 e6       	ldi	r22, 0x68	; 104
     edc:	ae 01       	movw	r20, r28
     ede:	4f 5f       	subi	r20, 0xFF	; 255
     ee0:	5f 4f       	sbci	r21, 0xFF	; 255
     ee2:	0e 94 cf 01 	call	0x39e	; 0x39e <adc_data>
				lcd_update("75 52 -", meter_value);
     ee6:	8e e0       	ldi	r24, 0x0E	; 14
     ee8:	91 e2       	ldi	r25, 0x21	; 33
     eea:	be 01       	movw	r22, r28
     eec:	6f 5f       	subi	r22, 0xFF	; 255
     eee:	7f 4f       	sbci	r23, 0xFF	; 255
     ef0:	0e 94 1a 0c 	call	0x1834	; 0x1834 <lcd_update>
				adc_data(11, CURRENT_HI_RES, meter_value); //C I-
     ef4:	8b e0       	ldi	r24, 0x0B	; 11
     ef6:	6a e6       	ldi	r22, 0x6A	; 106
     ef8:	ae 01       	movw	r20, r28
     efa:	4f 5f       	subi	r20, 0xFF	; 255
     efc:	5f 4f       	sbci	r21, 0xFF	; 255
     efe:	0e 94 cf 01 	call	0x39e	; 0x39e <adc_data>
				lcd_update("75 53 -", meter_value);
     f02:	86 e1       	ldi	r24, 0x16	; 22
     f04:	91 e2       	ldi	r25, 0x21	; 33
     f06:	be 01       	movw	r22, r28
     f08:	6f 5f       	subi	r22, 0xFF	; 255
     f0a:	7f 4f       	sbci	r23, 0xFF	; 255
     f0c:	0e 94 1a 0c 	call	0x1834	; 0x1834 <lcd_update>
				adc_data(12, VOLTAGE_POS, meter_value); //D V+
     f10:	8c e0       	ldi	r24, 0x0C	; 12
     f12:	67 e6       	ldi	r22, 0x67	; 103
     f14:	ae 01       	movw	r20, r28
     f16:	4f 5f       	subi	r20, 0xFF	; 255
     f18:	5f 4f       	sbci	r21, 0xFF	; 255
     f1a:	0e 94 cf 01 	call	0x39e	; 0x39e <adc_data>
				lcd_update("75 54 ", meter_value);
     f1e:	8e e1       	ldi	r24, 0x1E	; 30
     f20:	91 e2       	ldi	r25, 0x21	; 33
     f22:	be 01       	movw	r22, r28
     f24:	6f 5f       	subi	r22, 0xFF	; 255
     f26:	7f 4f       	sbci	r23, 0xFF	; 255
     f28:	0e 94 1a 0c 	call	0x1834	; 0x1834 <lcd_update>
				adc_data(13, CURRENT_HI_RES, meter_value); //D I+
     f2c:	8d e0       	ldi	r24, 0x0D	; 13
     f2e:	6a e6       	ldi	r22, 0x6A	; 106
     f30:	ae 01       	movw	r20, r28
     f32:	4f 5f       	subi	r20, 0xFF	; 255
     f34:	5f 4f       	sbci	r21, 0xFF	; 255
     f36:	0e 94 cf 01 	call	0x39e	; 0x39e <adc_data>
				lcd_update("75 55 ", meter_value);
     f3a:	85 e2       	ldi	r24, 0x25	; 37
     f3c:	91 e2       	ldi	r25, 0x21	; 33
     f3e:	be 01       	movw	r22, r28
     f40:	6f 5f       	subi	r22, 0xFF	; 255
     f42:	7f 4f       	sbci	r23, 0xFF	; 255
     f44:	0e 94 1a 0c 	call	0x1834	; 0x1834 <lcd_update>
				adc_data(14, VOLTAGE_NEG, meter_value); //D V-
     f48:	8e e0       	ldi	r24, 0x0E	; 14
     f4a:	68 e6       	ldi	r22, 0x68	; 104
     f4c:	ae 01       	movw	r20, r28
     f4e:	4f 5f       	subi	r20, 0xFF	; 255
     f50:	5f 4f       	sbci	r21, 0xFF	; 255
     f52:	0e 94 cf 01 	call	0x39e	; 0x39e <adc_data>
				lcd_update("75 56 -", meter_value);
     f56:	8c e2       	ldi	r24, 0x2C	; 44
     f58:	91 e2       	ldi	r25, 0x21	; 33
     f5a:	be 01       	movw	r22, r28
     f5c:	6f 5f       	subi	r22, 0xFF	; 255
     f5e:	7f 4f       	sbci	r23, 0xFF	; 255
     f60:	0e 94 1a 0c 	call	0x1834	; 0x1834 <lcd_update>
				adc_data(15, CURRENT_HI_RES, meter_value); //D I-
     f64:	8f e0       	ldi	r24, 0x0F	; 15
     f66:	6a e6       	ldi	r22, 0x6A	; 106
     f68:	ae 01       	movw	r20, r28
     f6a:	4f 5f       	subi	r20, 0xFF	; 255
     f6c:	5f 4f       	sbci	r21, 0xFF	; 255
     f6e:	0e 94 cf 01 	call	0x39e	; 0x39e <adc_data>
				lcd_update("75 57 -", meter_value);
     f72:	84 e3       	ldi	r24, 0x34	; 52
     f74:	91 e2       	ldi	r25, 0x21	; 33
     f76:	be 01       	movw	r22, r28
     f78:	6f 5f       	subi	r22, 0xFF	; 255
     f7a:	7f 4f       	sbci	r23, 0xFF	; 255
     f7c:	0e 94 1a 0c 	call	0x1834	; 0x1834 <lcd_update>
				break;
     f80:	53 c1       	rjmp	.+678    	; 0x1228 <service_brain+0x5ba>
			case MENU_CONTROL:
				pwr_adj_data(0, meter_value);
     f82:	80 e0       	ldi	r24, 0x00	; 0
     f84:	be 01       	movw	r22, r28
     f86:	6f 5f       	subi	r22, 0xFF	; 255
     f88:	7f 4f       	sbci	r23, 0xFF	; 255
     f8a:	0e 94 d8 13 	call	0x27b0	; 0x27b0 <pwr_adj_data>
				lcd_update("75 1 ", meter_value);
     f8e:	8c ec       	ldi	r24, 0xCC	; 204
     f90:	90 e2       	ldi	r25, 0x20	; 32
     f92:	be 01       	movw	r22, r28
     f94:	6f 5f       	subi	r22, 0xFF	; 255
     f96:	7f 4f       	sbci	r23, 0xFF	; 255
     f98:	0e 94 1a 0c 	call	0x1834	; 0x1834 <lcd_update>
				pwr_adj_data(1, meter_value);
     f9c:	81 e0       	ldi	r24, 0x01	; 1
     f9e:	be 01       	movw	r22, r28
     fa0:	6f 5f       	subi	r22, 0xFF	; 255
     fa2:	7f 4f       	sbci	r23, 0xFF	; 255
     fa4:	0e 94 d8 13 	call	0x27b0	; 0x27b0 <pwr_adj_data>
				lcd_update("75 11 ", meter_value);
     fa8:	82 ed       	ldi	r24, 0xD2	; 210
     faa:	90 e2       	ldi	r25, 0x20	; 32
     fac:	be 01       	movw	r22, r28
     fae:	6f 5f       	subi	r22, 0xFF	; 255
     fb0:	7f 4f       	sbci	r23, 0xFF	; 255
     fb2:	0e 94 1a 0c 	call	0x1834	; 0x1834 <lcd_update>
				pwr_adj_data(2, meter_value);
     fb6:	82 e0       	ldi	r24, 0x02	; 2
     fb8:	be 01       	movw	r22, r28
     fba:	6f 5f       	subi	r22, 0xFF	; 255
     fbc:	7f 4f       	sbci	r23, 0xFF	; 255
     fbe:	0e 94 d8 13 	call	0x27b0	; 0x27b0 <pwr_adj_data>
				lcd_update("75 2 ", meter_value);
     fc2:	89 ed       	ldi	r24, 0xD9	; 217
     fc4:	90 e2       	ldi	r25, 0x20	; 32
     fc6:	be 01       	movw	r22, r28
     fc8:	6f 5f       	subi	r22, 0xFF	; 255
     fca:	7f 4f       	sbci	r23, 0xFF	; 255
     fcc:	0e 94 1a 0c 	call	0x1834	; 0x1834 <lcd_update>
				pwr_adj_data(3, meter_value);
     fd0:	83 e0       	ldi	r24, 0x03	; 3
     fd2:	be 01       	movw	r22, r28
     fd4:	6f 5f       	subi	r22, 0xFF	; 255
     fd6:	7f 4f       	sbci	r23, 0xFF	; 255
     fd8:	0e 94 d8 13 	call	0x27b0	; 0x27b0 <pwr_adj_data>
				lcd_update("75 21 ", meter_value);
     fdc:	8f ed       	ldi	r24, 0xDF	; 223
     fde:	90 e2       	ldi	r25, 0x20	; 32
     fe0:	be 01       	movw	r22, r28
     fe2:	6f 5f       	subi	r22, 0xFF	; 255
     fe4:	7f 4f       	sbci	r23, 0xFF	; 255
     fe6:	0e 94 1a 0c 	call	0x1834	; 0x1834 <lcd_update>
				pwr_adj_data(4, meter_value);
     fea:	84 e0       	ldi	r24, 0x04	; 4
     fec:	be 01       	movw	r22, r28
     fee:	6f 5f       	subi	r22, 0xFF	; 255
     ff0:	7f 4f       	sbci	r23, 0xFF	; 255
     ff2:	0e 94 d8 13 	call	0x27b0	; 0x27b0 <pwr_adj_data>
				lcd_update("75 3 ", meter_value);
     ff6:	86 ee       	ldi	r24, 0xE6	; 230
     ff8:	90 e2       	ldi	r25, 0x20	; 32
     ffa:	be 01       	movw	r22, r28
     ffc:	6f 5f       	subi	r22, 0xFF	; 255
     ffe:	7f 4f       	sbci	r23, 0xFF	; 255
    1000:	0e 94 1a 0c 	call	0x1834	; 0x1834 <lcd_update>
				pwr_adj_data(5, meter_value);
    1004:	85 e0       	ldi	r24, 0x05	; 5
    1006:	be 01       	movw	r22, r28
    1008:	6f 5f       	subi	r22, 0xFF	; 255
    100a:	7f 4f       	sbci	r23, 0xFF	; 255
    100c:	0e 94 d8 13 	call	0x27b0	; 0x27b0 <pwr_adj_data>
				lcd_update("75 31 ", meter_value);
    1010:	8c ee       	ldi	r24, 0xEC	; 236
    1012:	90 e2       	ldi	r25, 0x20	; 32
    1014:	be 01       	movw	r22, r28
    1016:	6f 5f       	subi	r22, 0xFF	; 255
    1018:	7f 4f       	sbci	r23, 0xFF	; 255
    101a:	0e 94 1a 0c 	call	0x1834	; 0x1834 <lcd_update>
				pwr_adj_data(6, meter_value);
    101e:	86 e0       	ldi	r24, 0x06	; 6
    1020:	be 01       	movw	r22, r28
    1022:	6f 5f       	subi	r22, 0xFF	; 255
    1024:	7f 4f       	sbci	r23, 0xFF	; 255
    1026:	0e 94 d8 13 	call	0x27b0	; 0x27b0 <pwr_adj_data>
				lcd_update("75 4 ", meter_value);
    102a:	83 ef       	ldi	r24, 0xF3	; 243
    102c:	90 e2       	ldi	r25, 0x20	; 32
    102e:	be 01       	movw	r22, r28
    1030:	6f 5f       	subi	r22, 0xFF	; 255
    1032:	7f 4f       	sbci	r23, 0xFF	; 255
    1034:	0e 94 1a 0c 	call	0x1834	; 0x1834 <lcd_update>
				pwr_adj_data(7, meter_value);
    1038:	87 e0       	ldi	r24, 0x07	; 7
    103a:	be 01       	movw	r22, r28
    103c:	6f 5f       	subi	r22, 0xFF	; 255
    103e:	7f 4f       	sbci	r23, 0xFF	; 255
    1040:	0e 94 d8 13 	call	0x27b0	; 0x27b0 <pwr_adj_data>
				lcd_update("75 41 ", meter_value);
    1044:	89 ef       	ldi	r24, 0xF9	; 249
    1046:	90 e2       	ldi	r25, 0x20	; 32
    1048:	be 01       	movw	r22, r28
    104a:	6f 5f       	subi	r22, 0xFF	; 255
    104c:	7f 4f       	sbci	r23, 0xFF	; 255
    104e:	0e 94 1a 0c 	call	0x1834	; 0x1834 <lcd_update>
				break;
    1052:	ea c0       	rjmp	.+468    	; 0x1228 <service_brain+0x5ba>
			case MENU_DIAL_A:
				if ((pwr_adj_channel_dirty & B8(00000011)) > 0){
    1054:	80 91 e3 26 	lds	r24, 0x26E3
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	83 70       	andi	r24, 0x03	; 3
    105c:	90 70       	andi	r25, 0x00	; 0
    105e:	18 16       	cp	r1, r24
    1060:	19 06       	cpc	r1, r25
    1062:	0c f0       	brlt	.+2      	; 0x1066 <service_brain+0x3f8>
    1064:	e1 c0       	rjmp	.+450    	; 0x1228 <service_brain+0x5ba>
					//Control Inputs
					pwr_adj_control(0, meter_value);
    1066:	80 e0       	ldi	r24, 0x00	; 0
    1068:	be 01       	movw	r22, r28
    106a:	6f 5f       	subi	r22, 0xFF	; 255
    106c:	7f 4f       	sbci	r23, 0xFF	; 255
    106e:	0e 94 15 14 	call	0x282a	; 0x282a <pwr_adj_control>
					lcd_update("75 94 ", meter_value);
    1072:	8c e3       	ldi	r24, 0x3C	; 60
    1074:	91 e2       	ldi	r25, 0x21	; 33
    1076:	be 01       	movw	r22, r28
    1078:	6f 5f       	subi	r22, 0xFF	; 255
    107a:	7f 4f       	sbci	r23, 0xFF	; 255
    107c:	0e 94 1a 0c 	call	0x1834	; 0x1834 <lcd_update>
					pwr_adj_control(1, meter_value);
    1080:	81 e0       	ldi	r24, 0x01	; 1
    1082:	be 01       	movw	r22, r28
    1084:	6f 5f       	subi	r22, 0xFF	; 255
    1086:	7f 4f       	sbci	r23, 0xFF	; 255
    1088:	0e 94 15 14 	call	0x282a	; 0x282a <pwr_adj_control>
					lcd_update("75 95 ", meter_value);
    108c:	83 e4       	ldi	r24, 0x43	; 67
    108e:	91 e2       	ldi	r25, 0x21	; 33
    1090:	be 01       	movw	r22, r28
    1092:	6f 5f       	subi	r22, 0xFF	; 255
    1094:	7f 4f       	sbci	r23, 0xFF	; 255
    1096:	0e 94 1a 0c 	call	0x1834	; 0x1834 <lcd_update>
					//Voltage Monitors
					pwr_adj_data(0, meter_value);
    109a:	80 e0       	ldi	r24, 0x00	; 0
    109c:	be 01       	movw	r22, r28
    109e:	6f 5f       	subi	r22, 0xFF	; 255
    10a0:	7f 4f       	sbci	r23, 0xFF	; 255
    10a2:	0e 94 d8 13 	call	0x27b0	; 0x27b0 <pwr_adj_data>
					lcd_update("75 92 ", meter_value);
    10a6:	8a e4       	ldi	r24, 0x4A	; 74
    10a8:	91 e2       	ldi	r25, 0x21	; 33
    10aa:	be 01       	movw	r22, r28
    10ac:	6f 5f       	subi	r22, 0xFF	; 255
    10ae:	7f 4f       	sbci	r23, 0xFF	; 255
    10b0:	0e 94 1a 0c 	call	0x1834	; 0x1834 <lcd_update>
					pwr_adj_data(1, meter_value);
    10b4:	81 e0       	ldi	r24, 0x01	; 1
    10b6:	be 01       	movw	r22, r28
    10b8:	6f 5f       	subi	r22, 0xFF	; 255
    10ba:	7f 4f       	sbci	r23, 0xFF	; 255
    10bc:	0e 94 d8 13 	call	0x27b0	; 0x27b0 <pwr_adj_data>
					lcd_update("75 93 ", meter_value);
    10c0:	81 e5       	ldi	r24, 0x51	; 81
    10c2:	91 e2       	ldi	r25, 0x21	; 33
    10c4:	be 01       	movw	r22, r28
    10c6:	6f 5f       	subi	r22, 0xFF	; 255
    10c8:	7f 4f       	sbci	r23, 0xFF	; 255
    10ca:	0e 94 1a 0c 	call	0x1834	; 0x1834 <lcd_update>
    10ce:	ac c0       	rjmp	.+344    	; 0x1228 <service_brain+0x5ba>
				}					
				break;
			case MENU_DIAL_B:
				if ((pwr_adj_channel_dirty & B8(00001100)) > 0){
    10d0:	80 91 e3 26 	lds	r24, 0x26E3
    10d4:	8c 70       	andi	r24, 0x0C	; 12
    10d6:	09 f4       	brne	.+2      	; 0x10da <service_brain+0x46c>
    10d8:	a7 c0       	rjmp	.+334    	; 0x1228 <service_brain+0x5ba>
					//Control Inputs
					pwr_adj_control(2, meter_value);
    10da:	82 e0       	ldi	r24, 0x02	; 2
    10dc:	be 01       	movw	r22, r28
    10de:	6f 5f       	subi	r22, 0xFF	; 255
    10e0:	7f 4f       	sbci	r23, 0xFF	; 255
    10e2:	0e 94 15 14 	call	0x282a	; 0x282a <pwr_adj_control>
					lcd_update("75 94 ", meter_value);
    10e6:	8c e3       	ldi	r24, 0x3C	; 60
    10e8:	91 e2       	ldi	r25, 0x21	; 33
    10ea:	be 01       	movw	r22, r28
    10ec:	6f 5f       	subi	r22, 0xFF	; 255
    10ee:	7f 4f       	sbci	r23, 0xFF	; 255
    10f0:	0e 94 1a 0c 	call	0x1834	; 0x1834 <lcd_update>
					pwr_adj_control(3, meter_value);
    10f4:	83 e0       	ldi	r24, 0x03	; 3
    10f6:	be 01       	movw	r22, r28
    10f8:	6f 5f       	subi	r22, 0xFF	; 255
    10fa:	7f 4f       	sbci	r23, 0xFF	; 255
    10fc:	0e 94 15 14 	call	0x282a	; 0x282a <pwr_adj_control>
					lcd_update("75 95 ", meter_value);
    1100:	83 e4       	ldi	r24, 0x43	; 67
    1102:	91 e2       	ldi	r25, 0x21	; 33
    1104:	be 01       	movw	r22, r28
    1106:	6f 5f       	subi	r22, 0xFF	; 255
    1108:	7f 4f       	sbci	r23, 0xFF	; 255
    110a:	0e 94 1a 0c 	call	0x1834	; 0x1834 <lcd_update>
					//Voltage Monitors
					pwr_adj_data(2, meter_value);
    110e:	82 e0       	ldi	r24, 0x02	; 2
    1110:	be 01       	movw	r22, r28
    1112:	6f 5f       	subi	r22, 0xFF	; 255
    1114:	7f 4f       	sbci	r23, 0xFF	; 255
    1116:	0e 94 d8 13 	call	0x27b0	; 0x27b0 <pwr_adj_data>
					lcd_update("75 92 ", meter_value);
    111a:	8a e4       	ldi	r24, 0x4A	; 74
    111c:	91 e2       	ldi	r25, 0x21	; 33
    111e:	be 01       	movw	r22, r28
    1120:	6f 5f       	subi	r22, 0xFF	; 255
    1122:	7f 4f       	sbci	r23, 0xFF	; 255
    1124:	0e 94 1a 0c 	call	0x1834	; 0x1834 <lcd_update>
					pwr_adj_data(3, meter_value);
    1128:	83 e0       	ldi	r24, 0x03	; 3
    112a:	be 01       	movw	r22, r28
    112c:	6f 5f       	subi	r22, 0xFF	; 255
    112e:	7f 4f       	sbci	r23, 0xFF	; 255
    1130:	0e 94 d8 13 	call	0x27b0	; 0x27b0 <pwr_adj_data>
					lcd_update("75 93 ", meter_value);
    1134:	81 e5       	ldi	r24, 0x51	; 81
    1136:	91 e2       	ldi	r25, 0x21	; 33
    1138:	be 01       	movw	r22, r28
    113a:	6f 5f       	subi	r22, 0xFF	; 255
    113c:	7f 4f       	sbci	r23, 0xFF	; 255
    113e:	0e 94 1a 0c 	call	0x1834	; 0x1834 <lcd_update>
    1142:	72 c0       	rjmp	.+228    	; 0x1228 <service_brain+0x5ba>
				}
				break;
			case MENU_DIAL_C:
				if ((pwr_adj_channel_dirty & B8(00110000)) > 0){
    1144:	80 91 e3 26 	lds	r24, 0x26E3
    1148:	80 73       	andi	r24, 0x30	; 48
    114a:	09 f4       	brne	.+2      	; 0x114e <service_brain+0x4e0>
    114c:	6d c0       	rjmp	.+218    	; 0x1228 <service_brain+0x5ba>
					//Control Inputs
					pwr_adj_control(4, meter_value);
    114e:	84 e0       	ldi	r24, 0x04	; 4
    1150:	be 01       	movw	r22, r28
    1152:	6f 5f       	subi	r22, 0xFF	; 255
    1154:	7f 4f       	sbci	r23, 0xFF	; 255
    1156:	0e 94 15 14 	call	0x282a	; 0x282a <pwr_adj_control>
					lcd_update("75 94 ", meter_value);
    115a:	8c e3       	ldi	r24, 0x3C	; 60
    115c:	91 e2       	ldi	r25, 0x21	; 33
    115e:	be 01       	movw	r22, r28
    1160:	6f 5f       	subi	r22, 0xFF	; 255
    1162:	7f 4f       	sbci	r23, 0xFF	; 255
    1164:	0e 94 1a 0c 	call	0x1834	; 0x1834 <lcd_update>
					pwr_adj_control(5, meter_value);
    1168:	85 e0       	ldi	r24, 0x05	; 5
    116a:	be 01       	movw	r22, r28
    116c:	6f 5f       	subi	r22, 0xFF	; 255
    116e:	7f 4f       	sbci	r23, 0xFF	; 255
    1170:	0e 94 15 14 	call	0x282a	; 0x282a <pwr_adj_control>
					lcd_update("75 95 ", meter_value);
    1174:	83 e4       	ldi	r24, 0x43	; 67
    1176:	91 e2       	ldi	r25, 0x21	; 33
    1178:	be 01       	movw	r22, r28
    117a:	6f 5f       	subi	r22, 0xFF	; 255
    117c:	7f 4f       	sbci	r23, 0xFF	; 255
    117e:	0e 94 1a 0c 	call	0x1834	; 0x1834 <lcd_update>
					//Voltage Monitors
					pwr_adj_data(4, meter_value);
    1182:	84 e0       	ldi	r24, 0x04	; 4
    1184:	be 01       	movw	r22, r28
    1186:	6f 5f       	subi	r22, 0xFF	; 255
    1188:	7f 4f       	sbci	r23, 0xFF	; 255
    118a:	0e 94 d8 13 	call	0x27b0	; 0x27b0 <pwr_adj_data>
					lcd_update("75 92 ", meter_value);
    118e:	8a e4       	ldi	r24, 0x4A	; 74
    1190:	91 e2       	ldi	r25, 0x21	; 33
    1192:	be 01       	movw	r22, r28
    1194:	6f 5f       	subi	r22, 0xFF	; 255
    1196:	7f 4f       	sbci	r23, 0xFF	; 255
    1198:	0e 94 1a 0c 	call	0x1834	; 0x1834 <lcd_update>
					pwr_adj_data(5, meter_value);
    119c:	85 e0       	ldi	r24, 0x05	; 5
    119e:	be 01       	movw	r22, r28
    11a0:	6f 5f       	subi	r22, 0xFF	; 255
    11a2:	7f 4f       	sbci	r23, 0xFF	; 255
    11a4:	0e 94 d8 13 	call	0x27b0	; 0x27b0 <pwr_adj_data>
					lcd_update("75 93 ", meter_value);
    11a8:	81 e5       	ldi	r24, 0x51	; 81
    11aa:	91 e2       	ldi	r25, 0x21	; 33
    11ac:	be 01       	movw	r22, r28
    11ae:	6f 5f       	subi	r22, 0xFF	; 255
    11b0:	7f 4f       	sbci	r23, 0xFF	; 255
    11b2:	0e 94 1a 0c 	call	0x1834	; 0x1834 <lcd_update>
    11b6:	38 c0       	rjmp	.+112    	; 0x1228 <service_brain+0x5ba>
				}
				break;
			case MENU_DIAL_D:
				if ((pwr_adj_channel_dirty & B8(11000000)) > 0){
    11b8:	80 91 e3 26 	lds	r24, 0x26E3
    11bc:	80 7c       	andi	r24, 0xC0	; 192
    11be:	a1 f1       	breq	.+104    	; 0x1228 <service_brain+0x5ba>
					//Control Inputs
					pwr_adj_control(6, meter_value);
    11c0:	86 e0       	ldi	r24, 0x06	; 6
    11c2:	be 01       	movw	r22, r28
    11c4:	6f 5f       	subi	r22, 0xFF	; 255
    11c6:	7f 4f       	sbci	r23, 0xFF	; 255
    11c8:	0e 94 15 14 	call	0x282a	; 0x282a <pwr_adj_control>
					lcd_update("75 94 ", meter_value);
    11cc:	8c e3       	ldi	r24, 0x3C	; 60
    11ce:	91 e2       	ldi	r25, 0x21	; 33
    11d0:	be 01       	movw	r22, r28
    11d2:	6f 5f       	subi	r22, 0xFF	; 255
    11d4:	7f 4f       	sbci	r23, 0xFF	; 255
    11d6:	0e 94 1a 0c 	call	0x1834	; 0x1834 <lcd_update>
					pwr_adj_control(7, meter_value);
    11da:	87 e0       	ldi	r24, 0x07	; 7
    11dc:	be 01       	movw	r22, r28
    11de:	6f 5f       	subi	r22, 0xFF	; 255
    11e0:	7f 4f       	sbci	r23, 0xFF	; 255
    11e2:	0e 94 15 14 	call	0x282a	; 0x282a <pwr_adj_control>
					lcd_update("75 95 ", meter_value);
    11e6:	83 e4       	ldi	r24, 0x43	; 67
    11e8:	91 e2       	ldi	r25, 0x21	; 33
    11ea:	be 01       	movw	r22, r28
    11ec:	6f 5f       	subi	r22, 0xFF	; 255
    11ee:	7f 4f       	sbci	r23, 0xFF	; 255
    11f0:	0e 94 1a 0c 	call	0x1834	; 0x1834 <lcd_update>
					//Voltage Monitors
					pwr_adj_data(6, meter_value);
    11f4:	86 e0       	ldi	r24, 0x06	; 6
    11f6:	be 01       	movw	r22, r28
    11f8:	6f 5f       	subi	r22, 0xFF	; 255
    11fa:	7f 4f       	sbci	r23, 0xFF	; 255
    11fc:	0e 94 d8 13 	call	0x27b0	; 0x27b0 <pwr_adj_data>
					lcd_update("75 92 ", meter_value);
    1200:	8a e4       	ldi	r24, 0x4A	; 74
    1202:	91 e2       	ldi	r25, 0x21	; 33
    1204:	be 01       	movw	r22, r28
    1206:	6f 5f       	subi	r22, 0xFF	; 255
    1208:	7f 4f       	sbci	r23, 0xFF	; 255
    120a:	0e 94 1a 0c 	call	0x1834	; 0x1834 <lcd_update>
					pwr_adj_data(7, meter_value);
    120e:	87 e0       	ldi	r24, 0x07	; 7
    1210:	be 01       	movw	r22, r28
    1212:	6f 5f       	subi	r22, 0xFF	; 255
    1214:	7f 4f       	sbci	r23, 0xFF	; 255
    1216:	0e 94 d8 13 	call	0x27b0	; 0x27b0 <pwr_adj_data>
					lcd_update("75 93 ", meter_value);
    121a:	81 e5       	ldi	r24, 0x51	; 81
    121c:	91 e2       	ldi	r25, 0x21	; 33
    121e:	be 01       	movw	r22, r28
    1220:	6f 5f       	subi	r22, 0xFF	; 255
    1222:	7f 4f       	sbci	r23, 0xFF	; 255
    1224:	0e 94 1a 0c 	call	0x1834	; 0x1834 <lcd_update>
				}
				break;
		}	
	}
}
    1228:	2c 96       	adiw	r28, 0x0c	; 12
    122a:	cd bf       	out	0x3d, r28	; 61
    122c:	de bf       	out	0x3e, r29	; 62
    122e:	df 91       	pop	r29
    1230:	cf 91       	pop	r28
    1232:	08 95       	ret

00001234 <eeprom_save>:
//#############################################################
//## API
//#############################################################

void eeprom_save(){
	eeprom_write_byte(&nv_STATE_power_channels, STATE_power_channels);
    1234:	80 e0       	ldi	r24, 0x00	; 0
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	60 91 a4 25 	lds	r22, 0x25A4
    123c:	0e 94 8f 32 	call	0x651e	; 0x651e <__eewr_byte_x128a1>
	eeprom_write_block((void*)&pwr_adj_values, (void*)&nv_pwr_adj_values, PWR_ADJ_NUM_CHANNELS*2); //multiple size by 2 since uint16_t = 2 bytes
    1240:	84 ee       	ldi	r24, 0xE4	; 228
    1242:	96 e2       	ldi	r25, 0x26	; 38
    1244:	61 e0       	ldi	r22, 0x01	; 1
    1246:	70 e0       	ldi	r23, 0x00	; 0
    1248:	40 e1       	ldi	r20, 0x10	; 16
    124a:	50 e0       	ldi	r21, 0x00	; 0
    124c:	0e 94 85 32 	call	0x650a	; 0x650a <__eewr_block_x128a1>
}
    1250:	08 95       	ret

00001252 <eeprom_restore>:

void eeprom_restore(){
	STATE_power_channels = eeprom_read_byte(&nv_STATE_power_channels);
    1252:	80 e0       	ldi	r24, 0x00	; 0
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	0e 94 75 32 	call	0x64ea	; 0x64ea <__eerd_byte_x128a1>
    125a:	80 93 a4 25 	sts	0x25A4, r24
	eeprom_read_block((void*)&pwr_adj_values, (void*)&nv_pwr_adj_values, PWR_ADJ_NUM_CHANNELS*2);
    125e:	84 ee       	ldi	r24, 0xE4	; 228
    1260:	96 e2       	ldi	r25, 0x26	; 38
    1262:	61 e0       	ldi	r22, 0x01	; 1
    1264:	70 e0       	ldi	r23, 0x00	; 0
    1266:	40 e1       	ldi	r20, 0x10	; 16
    1268:	50 e0       	ldi	r21, 0x00	; 0
    126a:	0e 94 69 32 	call	0x64d2	; 0x64d2 <__eerd_block_x128a1>
}
    126e:	08 95       	ret

00001270 <init_eeprom>:
//#############################################################
//## Initialization
//#############################################################

void init_eeprom(){
	eeprom_restore();
    1270:	0e 94 29 09 	call	0x1252	; 0x1252 <eeprom_restore>
}
    1274:	08 95       	ret

00001276 <eeprom_read>:
	eeprom_read_block((void*)&pwr_adj_values, (void*)&nv_pwr_adj_values, PWR_ADJ_NUM_CHANNELS*2);
}

//mostly for debugging
uint8_t eeprom_read(){
	return eeprom_read_byte(&nv_STATE_power_channels);
    1276:	80 e0       	ldi	r24, 0x00	; 0
    1278:	90 e0       	ldi	r25, 0x00	; 0
    127a:	0e 94 75 32 	call	0x64ea	; 0x64ea <__eerd_byte_x128a1>
}
    127e:	08 95       	ret

00001280 <service_eeprom>:
//#############################################################

//2ms Service Loop -- Call once every 2ms
void service_eeprom(){
	
}
    1280:	08 95       	ret

00001282 <init_fp>:
		PK6: Rotary Channel A
		PK7: Rotary Channel B
				
	*/
	//LED's
	PORTJ.PIN1CTRL = B8(01000000); //invert pin logic
    1282:	e0 e0       	ldi	r30, 0x00	; 0
    1284:	f7 e0       	ldi	r31, 0x07	; 7
    1286:	80 e4       	ldi	r24, 0x40	; 64
    1288:	81 8b       	std	Z+17, r24	; 0x11
	PORTJ.PIN2CTRL = B8(01000000); //invert pin logic
    128a:	82 8b       	std	Z+18, r24	; 0x12
	PORTJ.PIN3CTRL = B8(01000000); //invert pin logic
    128c:	83 8b       	std	Z+19, r24	; 0x13
	PORTJ.PIN4CTRL = B8(01000000); //invert pin logic
    128e:	84 8b       	std	Z+20, r24	; 0x14
	PORTJ.OUTCLR = B8(00011110); //pins to low (LED's off, remember: inverted!)	
    1290:	8e e1       	ldi	r24, 0x1E	; 30
    1292:	86 83       	std	Z+6, r24	; 0x06
	PORTJ.DIRSET = B8(00011110); //pins to output	
    1294:	81 83       	std	Z+1, r24	; 0x01
	
	fp_channel_mask = 0x00;
    1296:	10 92 d1 26 	sts	0x26D1, r1
	
	//Switches
	//	SciPSU FP switches have hardware pull-up and hardware debounce
	PORTK.DIRCLR = B8(00111111); //This is the default condition, but just to be safe
    129a:	8f e3       	ldi	r24, 0x3F	; 63
    129c:	e0 e2       	ldi	r30, 0x20	; 32
    129e:	f7 e0       	ldi	r31, 0x07	; 7
    12a0:	82 83       	std	Z+2, r24	; 0x02
	fp_rot_status = RELEASED; fp_master_status = RELEASED;
    12a2:	89 e2       	ldi	r24, 0x29	; 41
    12a4:	80 93 cb 26 	sts	0x26CB, r24
    12a8:	80 93 c8 26 	sts	0x26C8, r24
	
	//Button state (open switch = 1, ergo...)
	fp_button_time0 = 0xFF;
    12ac:	8f ef       	ldi	r24, 0xFF	; 255
    12ae:	80 93 e0 26 	sts	0x26E0, r24
	fp_button_time1 = 0xFF;
    12b2:	80 93 cd 26 	sts	0x26CD, r24
	fp_button_time2 = 0xFF;
    12b6:	80 93 c7 26 	sts	0x26C7, r24
}
    12ba:	08 95       	ret

000012bc <fp_led_enable>:
//## LEDs
//#############################################################

// Uses generic defines for channel (see main.h)
void fp_led_enable(uint8_t which){
	switch(which){
    12bc:	82 30       	cpi	r24, 0x02	; 2
    12be:	b1 f0       	breq	.+44     	; 0x12ec <fp_led_enable+0x30>
    12c0:	83 30       	cpi	r24, 0x03	; 3
    12c2:	28 f4       	brcc	.+10     	; 0x12ce <fp_led_enable+0x12>
    12c4:	88 23       	and	r24, r24
    12c6:	41 f0       	breq	.+16     	; 0x12d8 <fp_led_enable+0x1c>
    12c8:	81 30       	cpi	r24, 0x01	; 1
    12ca:	19 f5       	brne	.+70     	; 0x1312 <fp_led_enable+0x56>
    12cc:	0a c0       	rjmp	.+20     	; 0x12e2 <fp_led_enable+0x26>
    12ce:	83 30       	cpi	r24, 0x03	; 3
    12d0:	91 f0       	breq	.+36     	; 0x12f6 <fp_led_enable+0x3a>
    12d2:	85 30       	cpi	r24, 0x05	; 5
    12d4:	f1 f4       	brne	.+60     	; 0x1312 <fp_led_enable+0x56>
    12d6:	14 c0       	rjmp	.+40     	; 0x1300 <fp_led_enable+0x44>
		case CHANNEL_A:
			PORTJ.OUTSET = B8(00000010); //PJ1
    12d8:	82 e0       	ldi	r24, 0x02	; 2
    12da:	e0 e0       	ldi	r30, 0x00	; 0
    12dc:	f7 e0       	ldi	r31, 0x07	; 7
    12de:	85 83       	std	Z+5, r24	; 0x05
			break;
    12e0:	08 95       	ret
		case CHANNEL_B:
			PORTJ.OUTSET = B8(00000100); //PJ2
    12e2:	84 e0       	ldi	r24, 0x04	; 4
    12e4:	e0 e0       	ldi	r30, 0x00	; 0
    12e6:	f7 e0       	ldi	r31, 0x07	; 7
    12e8:	85 83       	std	Z+5, r24	; 0x05
			break;
    12ea:	08 95       	ret
		case CHANNEL_C:
			PORTJ.OUTSET = B8(00001000); //PJ3
    12ec:	88 e0       	ldi	r24, 0x08	; 8
    12ee:	e0 e0       	ldi	r30, 0x00	; 0
    12f0:	f7 e0       	ldi	r31, 0x07	; 7
    12f2:	85 83       	std	Z+5, r24	; 0x05
			break;
    12f4:	08 95       	ret
		case CHANNEL_D:
			PORTJ.OUTSET = B8(00010000); //PJ4
    12f6:	80 e1       	ldi	r24, 0x10	; 16
    12f8:	e0 e0       	ldi	r30, 0x00	; 0
    12fa:	f7 e0       	ldi	r31, 0x07	; 7
    12fc:	85 83       	std	Z+5, r24	; 0x05
			break;			
    12fe:	08 95       	ret
		case CHANNEL_M:
			PORTJ.OUTSET = STATE_power_channels << 1; //left shift 1 to move [0-3] state to [1-4] pin locations
    1300:	80 91 a4 25 	lds	r24, 0x25A4
    1304:	88 0f       	add	r24, r24
    1306:	e0 e0       	ldi	r30, 0x00	; 0
    1308:	f7 e0       	ldi	r31, 0x07	; 7
    130a:	85 83       	std	Z+5, r24	; 0x05
			led_on(LED_3); //Master LED is dimmable so its over in the ui.h module
    130c:	82 e0       	ldi	r24, 0x02	; 2
    130e:	0e 94 a6 2f 	call	0x5f4c	; 0x5f4c <led_on>
    1312:	08 95       	ret

00001314 <fp_led_disable>:
			break;
	}
}

void fp_led_disable(uint8_t which){
	switch(which){
    1314:	82 30       	cpi	r24, 0x02	; 2
    1316:	b1 f0       	breq	.+44     	; 0x1344 <fp_led_disable+0x30>
    1318:	83 30       	cpi	r24, 0x03	; 3
    131a:	28 f4       	brcc	.+10     	; 0x1326 <fp_led_disable+0x12>
    131c:	88 23       	and	r24, r24
    131e:	41 f0       	breq	.+16     	; 0x1330 <fp_led_disable+0x1c>
    1320:	81 30       	cpi	r24, 0x01	; 1
    1322:	09 f5       	brne	.+66     	; 0x1366 <fp_led_disable+0x52>
    1324:	0a c0       	rjmp	.+20     	; 0x133a <fp_led_disable+0x26>
    1326:	83 30       	cpi	r24, 0x03	; 3
    1328:	91 f0       	breq	.+36     	; 0x134e <fp_led_disable+0x3a>
    132a:	85 30       	cpi	r24, 0x05	; 5
    132c:	e1 f4       	brne	.+56     	; 0x1366 <fp_led_disable+0x52>
    132e:	14 c0       	rjmp	.+40     	; 0x1358 <fp_led_disable+0x44>
		case CHANNEL_A:
			PORTJ.OUTCLR = B8(00000010); //PJ1
    1330:	82 e0       	ldi	r24, 0x02	; 2
    1332:	e0 e0       	ldi	r30, 0x00	; 0
    1334:	f7 e0       	ldi	r31, 0x07	; 7
    1336:	86 83       	std	Z+6, r24	; 0x06
			break;
    1338:	08 95       	ret
		case CHANNEL_B:
			PORTJ.OUTCLR = B8(00000100); //PJ2
    133a:	84 e0       	ldi	r24, 0x04	; 4
    133c:	e0 e0       	ldi	r30, 0x00	; 0
    133e:	f7 e0       	ldi	r31, 0x07	; 7
    1340:	86 83       	std	Z+6, r24	; 0x06
			break;
    1342:	08 95       	ret
		case CHANNEL_C:
			PORTJ.OUTCLR = B8(00001000); //PJ3
    1344:	88 e0       	ldi	r24, 0x08	; 8
    1346:	e0 e0       	ldi	r30, 0x00	; 0
    1348:	f7 e0       	ldi	r31, 0x07	; 7
    134a:	86 83       	std	Z+6, r24	; 0x06
			break;
    134c:	08 95       	ret
		case CHANNEL_D:
			PORTJ.OUTCLR = B8(00010000); //PJ4
    134e:	80 e1       	ldi	r24, 0x10	; 16
    1350:	e0 e0       	ldi	r30, 0x00	; 0
    1352:	f7 e0       	ldi	r31, 0x07	; 7
    1354:	86 83       	std	Z+6, r24	; 0x06
			break;
    1356:	08 95       	ret
		case CHANNEL_M:
			fp_counter = 0; fp_counter2 = 0; fp_updown = 1;
    1358:	10 92 cc 26 	sts	0x26CC, r1
    135c:	10 92 d3 26 	sts	0x26D3, r1
    1360:	81 e0       	ldi	r24, 0x01	; 1
    1362:	80 93 d4 26 	sts	0x26D4, r24
    1366:	08 95       	ret

00001368 <_fp_read_switches>:
//#############################################################

//t0 = most recent --> t2 = oldest values
void _fp_read_switches(){
	//rotate
	fp_button_time2 = fp_button_time1;
    1368:	80 91 cd 26 	lds	r24, 0x26CD
    136c:	80 93 c7 26 	sts	0x26C7, r24
	fp_button_time1 = fp_button_time0;
    1370:	80 91 e0 26 	lds	r24, 0x26E0
    1374:	80 93 cd 26 	sts	0x26CD, r24
	fp_button_time0 = PORTK.IN;
    1378:	e0 e2       	ldi	r30, 0x20	; 32
    137a:	f7 e0       	ldi	r31, 0x07	; 7
    137c:	80 85       	ldd	r24, Z+8	; 0x08
    137e:	80 93 e0 26 	sts	0x26E0, r24
}
    1382:	08 95       	ret

00001384 <_fp_switch_pressed>:

//Button was pressed
void _fp_switch_pressed(uint8_t which){
    1384:	cf 93       	push	r28
    1386:	c8 2f       	mov	r28, r24
	audio_beep(1, 10);
    1388:	81 e0       	ldi	r24, 0x01	; 1
    138a:	6a e0       	ldi	r22, 0x0A	; 10
    138c:	70 e0       	ldi	r23, 0x00	; 0
    138e:	0e 94 42 30 	call	0x6084	; 0x6084 <audio_beep>
	brain_button_pressed();
    1392:	0e 94 b7 05 	call	0xb6e	; 0xb6e <brain_button_pressed>
	switch(which){
    1396:	c2 30       	cpi	r28, 0x02	; 2
    1398:	b1 f0       	breq	.+44     	; 0x13c6 <_fp_switch_pressed+0x42>
    139a:	c3 30       	cpi	r28, 0x03	; 3
    139c:	28 f4       	brcc	.+10     	; 0x13a8 <_fp_switch_pressed+0x24>
    139e:	cc 23       	and	r28, r28
    13a0:	51 f0       	breq	.+20     	; 0x13b6 <_fp_switch_pressed+0x32>
    13a2:	c1 30       	cpi	r28, 0x01	; 1
    13a4:	39 f5       	brne	.+78     	; 0x13f4 <_fp_switch_pressed+0x70>
    13a6:	0b c0       	rjmp	.+22     	; 0x13be <_fp_switch_pressed+0x3a>
    13a8:	c4 30       	cpi	r28, 0x04	; 4
    13aa:	a9 f0       	breq	.+42     	; 0x13d6 <_fp_switch_pressed+0x52>
    13ac:	c4 30       	cpi	r28, 0x04	; 4
    13ae:	78 f0       	brcs	.+30     	; 0x13ce <_fp_switch_pressed+0x4a>
    13b0:	c5 30       	cpi	r28, 0x05	; 5
    13b2:	01 f5       	brne	.+64     	; 0x13f4 <_fp_switch_pressed+0x70>
    13b4:	18 c0       	rjmp	.+48     	; 0x13e6 <_fp_switch_pressed+0x62>
		case FP_SWITCH_A:
			brain_power(CHANNEL_A);			
    13b6:	80 e0       	ldi	r24, 0x00	; 0
    13b8:	0e 94 26 06 	call	0xc4c	; 0xc4c <brain_power>
			break;
    13bc:	1b c0       	rjmp	.+54     	; 0x13f4 <_fp_switch_pressed+0x70>
		case FP_SWITCH_B:
			brain_power(CHANNEL_B);
    13be:	81 e0       	ldi	r24, 0x01	; 1
    13c0:	0e 94 26 06 	call	0xc4c	; 0xc4c <brain_power>
			break;
    13c4:	17 c0       	rjmp	.+46     	; 0x13f4 <_fp_switch_pressed+0x70>
		case FP_SWITCH_C:
			brain_power(CHANNEL_C);
    13c6:	82 e0       	ldi	r24, 0x02	; 2
    13c8:	0e 94 26 06 	call	0xc4c	; 0xc4c <brain_power>
			break;
    13cc:	13 c0       	rjmp	.+38     	; 0x13f4 <_fp_switch_pressed+0x70>
		case FP_SWITCH_D:
			brain_power(CHANNEL_D);
    13ce:	83 e0       	ldi	r24, 0x03	; 3
    13d0:	0e 94 26 06 	call	0xc4c	; 0xc4c <brain_power>
			break;
    13d4:	0f c0       	rjmp	.+30     	; 0x13f4 <_fp_switch_pressed+0x70>
		case FP_SWITCH_M:
			fp_press_counter = 0;
    13d6:	10 92 de 26 	sts	0x26DE, r1
    13da:	10 92 df 26 	sts	0x26DF, r1
			fp_master_status = PRESSED;
    13de:	8a e2       	ldi	r24, 0x2A	; 42
    13e0:	80 93 c8 26 	sts	0x26C8, r24
			break;
    13e4:	07 c0       	rjmp	.+14     	; 0x13f4 <_fp_switch_pressed+0x70>
		case FP_SWITCH_R:
			fp_press_counter = 0;
    13e6:	10 92 de 26 	sts	0x26DE, r1
    13ea:	10 92 df 26 	sts	0x26DF, r1
			fp_rot_status = PRESSED;
    13ee:	8a e2       	ldi	r24, 0x2A	; 42
    13f0:	80 93 cb 26 	sts	0x26CB, r24
			break;		
	}
}
    13f4:	cf 91       	pop	r28
    13f6:	08 95       	ret

000013f8 <_fp_switch_released>:

//Button was released
void _fp_switch_released(uint8_t which){
	switch(which){
    13f8:	84 30       	cpi	r24, 0x04	; 4
    13fa:	19 f0       	breq	.+6      	; 0x1402 <_fp_switch_released+0xa>
    13fc:	85 30       	cpi	r24, 0x05	; 5
    13fe:	59 f5       	brne	.+86     	; 0x1456 <_fp_switch_released+0x5e>
    1400:	15 c0       	rjmp	.+42     	; 0x142c <_fp_switch_released+0x34>
		case FP_SWITCH_C:
			break;
		case FP_SWITCH_D:
			break;
		case FP_SWITCH_M:
			fp_master_status = RELEASED;
    1402:	89 e2       	ldi	r24, 0x29	; 41
    1404:	80 93 c8 26 	sts	0x26C8, r24
			if (fp_press_counter > EEPROM_HOLD_TO_SAVE_TIME){
    1408:	80 91 de 26 	lds	r24, 0x26DE
    140c:	90 91 df 26 	lds	r25, 0x26DF
    1410:	23 e0       	ldi	r18, 0x03	; 3
    1412:	89 3e       	cpi	r24, 0xE9	; 233
    1414:	92 07       	cpc	r25, r18
    1416:	38 f0       	brcs	.+14     	; 0x1426 <_fp_switch_released+0x2e>
				//Reboot LCD logic
				lcd_reboot();
    1418:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <lcd_reboot>
				fp_press_counter = 0;
    141c:	10 92 de 26 	sts	0x26DE, r1
    1420:	10 92 df 26 	sts	0x26DF, r1
    1424:	08 95       	ret
			}
			else {
				brain_power_master();
    1426:	0e 94 bf 05 	call	0xb7e	; 0xb7e <brain_power_master>
    142a:	08 95       	ret
			}
			break;
		case FP_SWITCH_R:
			fp_rot_status = RELEASED;
    142c:	89 e2       	ldi	r24, 0x29	; 41
    142e:	80 93 cb 26 	sts	0x26CB, r24
			//Write to disk logic (save to non-volatile memory)
			if	((STATE_menu == MENU_CONTROL) && (fp_press_counter>EEPROM_HOLD_TO_SAVE_TIME)){
    1432:	80 91 a5 25 	lds	r24, 0x25A5
    1436:	81 32       	cpi	r24, 0x21	; 33
    1438:	71 f4       	brne	.+28     	; 0x1456 <_fp_switch_released+0x5e>
    143a:	80 91 de 26 	lds	r24, 0x26DE
    143e:	90 91 df 26 	lds	r25, 0x26DF
    1442:	23 e0       	ldi	r18, 0x03	; 3
    1444:	89 3e       	cpi	r24, 0xE9	; 233
    1446:	92 07       	cpc	r25, r18
    1448:	30 f0       	brcs	.+12     	; 0x1456 <_fp_switch_released+0x5e>
				eeprom_save(); 
    144a:	0e 94 1a 09 	call	0x1234	; 0x1234 <eeprom_save>
				fp_press_counter = 0;
    144e:	10 92 de 26 	sts	0x26DE, r1
    1452:	10 92 df 26 	sts	0x26DF, r1
    1456:	08 95       	ret

00001458 <_process_switch>:
			break;
	}
}

void _process_switch(uint8_t current, uint8_t change, uint8_t which){
	if ((current & _BV(which)) != 0) {return;} //unstable -- wait for things to settle
    1458:	28 2f       	mov	r18, r24
    145a:	30 e0       	ldi	r19, 0x00	; 0
    145c:	04 2e       	mov	r0, r20
    145e:	02 c0       	rjmp	.+4      	; 0x1464 <_process_switch+0xc>
    1460:	35 95       	asr	r19
    1462:	27 95       	ror	r18
    1464:	0a 94       	dec	r0
    1466:	e2 f7       	brpl	.-8      	; 0x1460 <_process_switch+0x8>
    1468:	20 fd       	sbrc	r18, 0
    146a:	1b c0       	rjmp	.+54     	; 0x14a2 <_process_switch+0x4a>
	if ((change & _BV(which)) == 0){return;} //no change
    146c:	70 e0       	ldi	r23, 0x00	; 0
    146e:	04 2e       	mov	r0, r20
    1470:	02 c0       	rjmp	.+4      	; 0x1476 <_process_switch+0x1e>
    1472:	75 95       	asr	r23
    1474:	67 95       	ror	r22
    1476:	0a 94       	dec	r0
    1478:	e2 f7       	brpl	.-8      	; 0x1472 <_process_switch+0x1a>
    147a:	60 ff       	sbrs	r22, 0
    147c:	12 c0       	rjmp	.+36     	; 0x14a2 <_process_switch+0x4a>
	//Pin has been changed!
	if ((fp_button_time0 & _BV(which)) == 0){_fp_switch_pressed(which);}
    147e:	20 91 e0 26 	lds	r18, 0x26E0
    1482:	30 e0       	ldi	r19, 0x00	; 0
    1484:	04 2e       	mov	r0, r20
    1486:	02 c0       	rjmp	.+4      	; 0x148c <_process_switch+0x34>
    1488:	35 95       	asr	r19
    148a:	27 95       	ror	r18
    148c:	0a 94       	dec	r0
    148e:	e2 f7       	brpl	.-8      	; 0x1488 <_process_switch+0x30>
    1490:	20 fd       	sbrc	r18, 0
    1492:	04 c0       	rjmp	.+8      	; 0x149c <_process_switch+0x44>
    1494:	84 2f       	mov	r24, r20
    1496:	0e 94 c2 09 	call	0x1384	; 0x1384 <_fp_switch_pressed>
    149a:	08 95       	ret
	else {_fp_switch_released(which);}
    149c:	84 2f       	mov	r24, r20
    149e:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <_fp_switch_released>
    14a2:	08 95       	ret

000014a4 <_fp_process_switches>:
	
}

void _fp_process_switches(){
    14a4:	cf 93       	push	r28
    14a6:	df 93       	push	r29
	//Debounce Logic
	uint8_t current = fp_button_time0 ^ fp_button_time1;
    14a8:	80 91 cd 26 	lds	r24, 0x26CD
    14ac:	c0 91 e0 26 	lds	r28, 0x26E0
    14b0:	c8 27       	eor	r28, r24
	uint8_t change = fp_button_time1 ^ fp_button_time2;
    14b2:	d0 91 c7 26 	lds	r29, 0x26C7
    14b6:	d8 27       	eor	r29, r24
	
	//EEPROM Logic
	if (fp_rot_status == PRESSED){
    14b8:	80 91 cb 26 	lds	r24, 0x26CB
    14bc:	8a 32       	cpi	r24, 0x2A	; 42
    14be:	b1 f4       	brne	.+44     	; 0x14ec <_fp_process_switches+0x48>
		fp_press_counter++;
    14c0:	80 91 de 26 	lds	r24, 0x26DE
    14c4:	90 91 df 26 	lds	r25, 0x26DF
    14c8:	01 96       	adiw	r24, 0x01	; 1
    14ca:	80 93 de 26 	sts	0x26DE, r24
    14ce:	90 93 df 26 	sts	0x26DF, r25
		if ((STATE_menu == MENU_CONTROL) && (fp_press_counter > EEPROM_HOLD_TO_SAVE_TIME)){
    14d2:	20 91 a5 25 	lds	r18, 0x25A5
    14d6:	21 32       	cpi	r18, 0x21	; 33
    14d8:	49 f4       	brne	.+18     	; 0x14ec <_fp_process_switches+0x48>
    14da:	23 e0       	ldi	r18, 0x03	; 3
    14dc:	89 3e       	cpi	r24, 0xE9	; 233
    14de:	92 07       	cpc	r25, r18
    14e0:	28 f0       	brcs	.+10     	; 0x14ec <_fp_process_switches+0x48>
			audio_beep(BRAIN_BEEPS, BRAIN_VOLUME);
    14e2:	81 e0       	ldi	r24, 0x01	; 1
    14e4:	64 e6       	ldi	r22, 0x64	; 100
    14e6:	70 e0       	ldi	r23, 0x00	; 0
    14e8:	0e 94 42 30 	call	0x6084	; 0x6084 <audio_beep>
		}
	}
	
	if (fp_master_status == PRESSED){
    14ec:	80 91 c8 26 	lds	r24, 0x26C8
    14f0:	8a 32       	cpi	r24, 0x2A	; 42
    14f2:	91 f4       	brne	.+36     	; 0x1518 <_fp_process_switches+0x74>
		fp_press_counter++;
    14f4:	80 91 de 26 	lds	r24, 0x26DE
    14f8:	90 91 df 26 	lds	r25, 0x26DF
    14fc:	01 96       	adiw	r24, 0x01	; 1
    14fe:	80 93 de 26 	sts	0x26DE, r24
    1502:	90 93 df 26 	sts	0x26DF, r25
		if (fp_press_counter == EEPROM_HOLD_TO_SAVE_TIME){
    1506:	23 e0       	ldi	r18, 0x03	; 3
    1508:	88 3e       	cpi	r24, 0xE8	; 232
    150a:	92 07       	cpc	r25, r18
    150c:	29 f4       	brne	.+10     	; 0x1518 <_fp_process_switches+0x74>
			audio_beep(BRAIN_BEEPS, BRAIN_VOLUME);
    150e:	81 e0       	ldi	r24, 0x01	; 1
    1510:	64 e6       	ldi	r22, 0x64	; 100
    1512:	70 e0       	ldi	r23, 0x00	; 0
    1514:	0e 94 42 30 	call	0x6084	; 0x6084 <audio_beep>
		}
	}
		
	//Switch Logic
	_process_switch(current, change, FP_SWITCH_A);
    1518:	8c 2f       	mov	r24, r28
    151a:	6d 2f       	mov	r22, r29
    151c:	40 e0       	ldi	r20, 0x00	; 0
    151e:	0e 94 2c 0a 	call	0x1458	; 0x1458 <_process_switch>
	_process_switch(current, change, FP_SWITCH_B);
    1522:	8c 2f       	mov	r24, r28
    1524:	6d 2f       	mov	r22, r29
    1526:	41 e0       	ldi	r20, 0x01	; 1
    1528:	0e 94 2c 0a 	call	0x1458	; 0x1458 <_process_switch>
	_process_switch(current, change, FP_SWITCH_C);
    152c:	8c 2f       	mov	r24, r28
    152e:	6d 2f       	mov	r22, r29
    1530:	42 e0       	ldi	r20, 0x02	; 2
    1532:	0e 94 2c 0a 	call	0x1458	; 0x1458 <_process_switch>
	_process_switch(current, change, FP_SWITCH_D);
    1536:	8c 2f       	mov	r24, r28
    1538:	6d 2f       	mov	r22, r29
    153a:	43 e0       	ldi	r20, 0x03	; 3
    153c:	0e 94 2c 0a 	call	0x1458	; 0x1458 <_process_switch>
	_process_switch(current, change, FP_SWITCH_M);
    1540:	8c 2f       	mov	r24, r28
    1542:	6d 2f       	mov	r22, r29
    1544:	44 e0       	ldi	r20, 0x04	; 4
    1546:	0e 94 2c 0a 	call	0x1458	; 0x1458 <_process_switch>
	_process_switch(current, change, FP_SWITCH_R);
    154a:	8c 2f       	mov	r24, r28
    154c:	6d 2f       	mov	r22, r29
    154e:	45 e0       	ldi	r20, 0x05	; 5
    1550:	0e 94 2c 0a 	call	0x1458	; 0x1458 <_process_switch>
}
    1554:	df 91       	pop	r29
    1556:	cf 91       	pop	r28
    1558:	08 95       	ret

0000155a <_fp_process_rotary>:

void _fp_process_rotary(){
	static int16_t blanking_counter = -1;
	
	//Software blank rotary dial in menu navigation mode
	if ((STATE_menu == MENU_STARTUP) || (STATE_menu == MENU_OUTPUT) || (STATE_menu == MENU_CONTROL) || (STATE_menu == MENU_CONSOLE)) {
    155a:	80 91 a5 25 	lds	r24, 0x25A5
    155e:	8f 51       	subi	r24, 0x1F	; 31
    1560:	84 30       	cpi	r24, 0x04	; 4
    1562:	a8 f5       	brcc	.+106    	; 0x15ce <_fp_process_rotary+0x74>
		if (blanking_counter >= 0){
    1564:	80 91 58 21 	lds	r24, 0x2158
    1568:	90 91 59 21 	lds	r25, 0x2159
    156c:	99 23       	and	r25, r25
    156e:	c4 f0       	brlt	.+48     	; 0x15a0 <_fp_process_rotary+0x46>
			blanking_counter++;
    1570:	01 96       	adiw	r24, 0x01	; 1
    1572:	80 93 58 21 	sts	0x2158, r24
    1576:	90 93 59 21 	sts	0x2159, r25
			quad_up(); quad_down(); //clear state changes during blanking period
    157a:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <quad_up>
    157e:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <quad_down>
			if (blanking_counter > 500){blanking_counter = -1;}
    1582:	80 91 58 21 	lds	r24, 0x2158
    1586:	90 91 59 21 	lds	r25, 0x2159
    158a:	21 e0       	ldi	r18, 0x01	; 1
    158c:	85 3f       	cpi	r24, 0xF5	; 245
    158e:	92 07       	cpc	r25, r18
    1590:	64 f1       	brlt	.+88     	; 0x15ea <_fp_process_rotary+0x90>
    1592:	8f ef       	ldi	r24, 0xFF	; 255
    1594:	9f ef       	ldi	r25, 0xFF	; 255
    1596:	80 93 58 21 	sts	0x2158, r24
    159a:	90 93 59 21 	sts	0x2159, r25
    159e:	08 95       	ret
		}
		else {
			if (quad_up()) {blanking_counter = 0; brain_rotary_change(QUAD_UP);}
    15a0:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <quad_up>
    15a4:	88 23       	and	r24, r24
    15a6:	39 f0       	breq	.+14     	; 0x15b6 <_fp_process_rotary+0x5c>
    15a8:	10 92 58 21 	sts	0x2158, r1
    15ac:	10 92 59 21 	sts	0x2159, r1
    15b0:	8d e2       	ldi	r24, 0x2D	; 45
    15b2:	0e 94 31 05 	call	0xa62	; 0xa62 <brain_rotary_change>
			if (quad_down()) {blanking_counter = 0; brain_rotary_change(QUAD_DOWN);}
    15b6:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <quad_down>
    15ba:	88 23       	and	r24, r24
    15bc:	b1 f0       	breq	.+44     	; 0x15ea <_fp_process_rotary+0x90>
    15be:	10 92 58 21 	sts	0x2158, r1
    15c2:	10 92 59 21 	sts	0x2159, r1
    15c6:	8e e2       	ldi	r24, 0x2E	; 46
    15c8:	0e 94 31 05 	call	0xa62	; 0xa62 <brain_rotary_change>
    15cc:	08 95       	ret
		}		
	}
	//Use full dial resolution in adjustment mode
	else {
		if (quad_up()) {brain_rotary_change(QUAD_UP);}
    15ce:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <quad_up>
    15d2:	88 23       	and	r24, r24
    15d4:	19 f0       	breq	.+6      	; 0x15dc <_fp_process_rotary+0x82>
    15d6:	8d e2       	ldi	r24, 0x2D	; 45
    15d8:	0e 94 31 05 	call	0xa62	; 0xa62 <brain_rotary_change>
		if (quad_down()) {brain_rotary_change(QUAD_DOWN);}
    15dc:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <quad_down>
    15e0:	88 23       	and	r24, r24
    15e2:	19 f0       	breq	.+6      	; 0x15ea <_fp_process_rotary+0x90>
    15e4:	8e e2       	ldi	r24, 0x2E	; 46
    15e6:	0e 94 31 05 	call	0xa62	; 0xa62 <brain_rotary_change>
    15ea:	08 95       	ret

000015ec <service_fp>:
//## SERVICE ROUTINE
//#############################################################

void service_fp(){	
	
	uint8_t fp_channel_mask = STATE_power_channels << 1;
    15ec:	90 91 a4 25 	lds	r25, 0x25A4
	//LEDs
	if (STATE_power_output == DISABLE){
    15f0:	80 91 ab 25 	lds	r24, 0x25AB
    15f4:	89 32       	cpi	r24, 0x29	; 41
    15f6:	09 f0       	breq	.+2      	; 0x15fa <service_fp+0xe>
    15f8:	43 c0       	rjmp	.+134    	; 0x1680 <service_fp+0x94>
//## SERVICE ROUTINE
//#############################################################

void service_fp(){	
	
	uint8_t fp_channel_mask = STATE_power_channels << 1;
    15fa:	99 0f       	add	r25, r25
	//LEDs
	if (STATE_power_output == DISABLE){
				
		//Channel LED's			
		if (fp_counter == 0) {PORTJ.OUTSET = fp_channel_mask;} 
    15fc:	80 91 cc 26 	lds	r24, 0x26CC
    1600:	88 23       	and	r24, r24
    1602:	39 f4       	brne	.+14     	; 0x1612 <service_fp+0x26>
    1604:	e0 e0       	ldi	r30, 0x00	; 0
    1606:	f7 e0       	ldi	r31, 0x07	; 7
    1608:	95 83       	std	Z+5, r25	; 0x05
		if (fp_counter == FP_ON_LENGTH) {PORTJ.OUTCLR = fp_channel_mask;}
		fp_counter++;
    160a:	8f 5f       	subi	r24, 0xFF	; 255
    160c:	80 93 cc 26 	sts	0x26CC, r24
    1610:	10 c0       	rjmp	.+32     	; 0x1632 <service_fp+0x46>
	//LEDs
	if (STATE_power_output == DISABLE){
				
		//Channel LED's			
		if (fp_counter == 0) {PORTJ.OUTSET = fp_channel_mask;} 
		if (fp_counter == FP_ON_LENGTH) {PORTJ.OUTCLR = fp_channel_mask;}
    1612:	81 30       	cpi	r24, 0x01	; 1
    1614:	39 f4       	brne	.+14     	; 0x1624 <service_fp+0x38>
    1616:	e0 e0       	ldi	r30, 0x00	; 0
    1618:	f7 e0       	ldi	r31, 0x07	; 7
    161a:	96 83       	std	Z+6, r25	; 0x06
		fp_counter++;
    161c:	82 e0       	ldi	r24, 0x02	; 2
    161e:	80 93 cc 26 	sts	0x26CC, r24
    1622:	07 c0       	rjmp	.+14     	; 0x1632 <service_fp+0x46>
    1624:	8f 5f       	subi	r24, 0xFF	; 255
    1626:	80 93 cc 26 	sts	0x26CC, r24
		if (fp_counter >= FP_ON_LENGTH + FP_OFF_LENGTH) {fp_counter = 0;}
    162a:	8b 30       	cpi	r24, 0x0B	; 11
    162c:	10 f0       	brcs	.+4      	; 0x1632 <service_fp+0x46>
    162e:	10 92 cc 26 	sts	0x26CC, r1
			
		//Master LED
		fp_counter2 += fp_updown;
    1632:	80 91 d4 26 	lds	r24, 0x26D4
    1636:	60 91 d3 26 	lds	r22, 0x26D3
    163a:	68 0f       	add	r22, r24
    163c:	60 93 d3 26 	sts	0x26D3, r22
		if (fp_counter2 < 128) {
    1640:	66 23       	and	r22, r22
    1642:	34 f0       	brlt	.+12     	; 0x1650 <service_fp+0x64>
			if (fp_counter2 % 2 == 0){
    1644:	60 fd       	sbrc	r22, 0
    1646:	12 c0       	rjmp	.+36     	; 0x166c <service_fp+0x80>
				led_dim(LED_3, fp_counter2);
    1648:	82 e0       	ldi	r24, 0x02	; 2
    164a:	0e 94 d8 2f 	call	0x5fb0	; 0x5fb0 <led_dim>
    164e:	0e c0       	rjmp	.+28     	; 0x166c <service_fp+0x80>
			}
		}
		else {
			if (fp_updown > 0) {fp_counter2 += 2;}
    1650:	88 23       	and	r24, r24
    1652:	21 f0       	breq	.+8      	; 0x165c <service_fp+0x70>
    1654:	6e 5f       	subi	r22, 0xFE	; 254
    1656:	60 93 d3 26 	sts	0x26D3, r22
    165a:	03 c0       	rjmp	.+6      	; 0x1662 <service_fp+0x76>
			else {fp_counter2 += 2;}
    165c:	6e 5f       	subi	r22, 0xFE	; 254
    165e:	60 93 d3 26 	sts	0x26D3, r22
			led_dim(LED_3, fp_counter2);
    1662:	82 e0       	ldi	r24, 0x02	; 2
    1664:	60 91 d3 26 	lds	r22, 0x26D3
    1668:	0e 94 d8 2f 	call	0x5fb0	; 0x5fb0 <led_dim>
		}			
		if ((fp_counter2 >= 255) || (fp_counter2 <= 0)) {
    166c:	80 91 d3 26 	lds	r24, 0x26D3
    1670:	81 50       	subi	r24, 0x01	; 1
    1672:	8e 3f       	cpi	r24, 0xFE	; 254
    1674:	28 f0       	brcs	.+10     	; 0x1680 <service_fp+0x94>
			fp_updown = -1 * fp_updown;
    1676:	80 91 d4 26 	lds	r24, 0x26D4
    167a:	81 95       	neg	r24
    167c:	80 93 d4 26 	sts	0x26D4, r24
		}
	}
	//SWITCHes
	_fp_read_switches();
    1680:	0e 94 b4 09 	call	0x1368	; 0x1368 <_fp_read_switches>
	_fp_process_switches();
    1684:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <_fp_process_switches>
	_fp_process_rotary();
    1688:	0e 94 ad 0a 	call	0x155a	; 0x155a <_fp_process_rotary>
}
    168c:	08 95       	ret

0000168e <init_lcd>:
//#############################################################
//## INITIALIZATION ROUTINE
//#############################################################

void init_lcd(){
	lcd_flow_control = LCD_BUSY; //Wait for LCD to bootup -- queue all commands prior to start
    168e:	8e e4       	ldi	r24, 0x4E	; 78
    1690:	80 93 e2 26 	sts	0x26E2, r24
	lcd_flow_reboot = LCD_ENABLED;
    1694:	8f e1       	ldi	r24, 0x1F	; 31
    1696:	80 93 ca 26 	sts	0x26CA, r24
}
    169a:	08 95       	ret

0000169c <lcd_reboot_state>:

void lcd_reboot_state(){
	//flush command buffer
	uart_rxbuffer_disable(&ulcd);
    169c:	80 eb       	ldi	r24, 0xB0	; 176
    169e:	9b e0       	ldi	r25, 0x0B	; 11
    16a0:	0e 94 50 1c 	call	0x38a0	; 0x38a0 <uart_rxbuffer_disable>
	uart_txbuffer_disable(&ulcd);
    16a4:	80 eb       	ldi	r24, 0xB0	; 176
    16a6:	9b e0       	ldi	r25, 0x0B	; 11
    16a8:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <uart_txbuffer_disable>
	init_uart_obuffer(&ulcd);
    16ac:	80 eb       	ldi	r24, 0xB0	; 176
    16ae:	9b e0       	ldi	r25, 0x0B	; 11
    16b0:	0e 94 8c 25 	call	0x4b18	; 0x4b18 <init_uart_obuffer>
	init_uart_ibuffer(&ulcd);
    16b4:	80 eb       	ldi	r24, 0xB0	; 176
    16b6:	9b e0       	ldi	r25, 0x0B	; 11
    16b8:	0e 94 e8 2c 	call	0x59d0	; 0x59d0 <init_uart_ibuffer>
	uart_rxbuffer_enable(&ulcd);
    16bc:	80 eb       	ldi	r24, 0xB0	; 176
    16be:	9b e0       	ldi	r25, 0x0B	; 11
    16c0:	0e 94 4b 1c 	call	0x3896	; 0x3896 <uart_rxbuffer_enable>
	uart_txbuffer_enable(&ulcd);
    16c4:	80 eb       	ldi	r24, 0xB0	; 176
    16c6:	9b e0       	ldi	r25, 0x0B	; 11
    16c8:	0e 94 55 1c 	call	0x38aa	; 0x38aa <uart_txbuffer_enable>
	lcd_flow_control = LCD_READY; //unlock if stuck
    16cc:	82 e5       	ldi	r24, 0x52	; 82
    16ce:	80 93 e2 26 	sts	0x26E2, r24
	//state recovery
	lcd_flow_reboot = LCD_REBOOT; //suppress normal output from OS (dropped silently)
    16d2:	81 e9       	ldi	r24, 0x91	; 145
    16d4:	80 93 ca 26 	sts	0x26CA, r24
	//transmit flush to LCD
	uart_enqueue_string(&ulcd, "\r"); //transmit \r to terminate anything currently in the buffer
    16d8:	80 eb       	ldi	r24, 0xB0	; 176
    16da:	9b e0       	ldi	r25, 0x0B	; 11
    16dc:	6a e5       	ldi	r22, 0x5A	; 90
    16de:	71 e2       	ldi	r23, 0x21	; 33
    16e0:	0e 94 f4 25 	call	0x4be8	; 0x4be8 <uart_enqueue_string>
}
    16e4:	08 95       	ret

000016e6 <lcd_reboot>:
	
//Reboot the LCD completely (return to splash screen)
void lcd_reboot(){
	lcd_reboot_state();
    16e6:	0e 94 4e 0b 	call	0x169c	; 0x169c <lcd_reboot_state>
	//send reboot commands
	uart_enqueue_string(&ulcd, "RESET\r");
    16ea:	80 eb       	ldi	r24, 0xB0	; 176
    16ec:	9b e0       	ldi	r25, 0x0B	; 11
    16ee:	6c e5       	ldi	r22, 0x5C	; 92
    16f0:	71 e2       	ldi	r23, 0x21	; 33
    16f2:	0e 94 f4 25 	call	0x4be8	; 0x4be8 <uart_enqueue_string>
	//state recovery
	lcd_flow_reboot = LCD_REBOOT;
    16f6:	81 e9       	ldi	r24, 0x91	; 145
    16f8:	80 93 ca 26 	sts	0x26CA, r24
}
    16fc:	08 95       	ret

000016fe <lcd_recover>:

//Recover from LCD error (restore to last used main menu screen)
void lcd_recover(){
	lcd_reboot_state();
    16fe:	0e 94 4e 0b 	call	0x169c	; 0x169c <lcd_reboot_state>
	brain_menu_load(STATE_menu);
    1702:	80 91 a5 25 	lds	r24, 0x25A5
    1706:	0e 94 01 05 	call	0xa02	; 0xa02 <brain_menu_load>
}
    170a:	08 95       	ret

0000170c <lcd_command>:
//#############################################################
//## API
//#############################################################

//Only supports RUN (capital) and 31 (PLAY command as number) for detecting macros
void lcd_command(char* theCommand){
    170c:	cf 93       	push	r28
    170e:	df 93       	push	r29
    1710:	ec 01       	movw	r28, r24
	if ((lcd_flow_reboot == LCD_ENABLED)&&(uart_count(&ulcd)<MAX_BUFFER_LEN-100)){
    1712:	80 91 ca 26 	lds	r24, 0x26CA
    1716:	8f 31       	cpi	r24, 0x1F	; 31
    1718:	91 f4       	brne	.+36     	; 0x173e <lcd_command+0x32>
    171a:	80 eb       	ldi	r24, 0xB0	; 176
    171c:	9b e0       	ldi	r25, 0x0B	; 11
    171e:	0e 94 ad 25 	call	0x4b5a	; 0x4b5a <uart_count>
    1722:	23 e0       	ldi	r18, 0x03	; 3
    1724:	8c 39       	cpi	r24, 0x9C	; 156
    1726:	92 07       	cpc	r25, r18
    1728:	50 f4       	brcc	.+20     	; 0x173e <lcd_command+0x32>
		uart_enqueue_string(&ulcd, theCommand); //the command
    172a:	80 eb       	ldi	r24, 0xB0	; 176
    172c:	9b e0       	ldi	r25, 0x0B	; 11
    172e:	be 01       	movw	r22, r28
    1730:	0e 94 f4 25 	call	0x4be8	; 0x4be8 <uart_enqueue_string>
		uart_enqueue(&ulcd, 0x0D); //command terminator
    1734:	80 eb       	ldi	r24, 0xB0	; 176
    1736:	9b e0       	ldi	r25, 0x0B	; 11
    1738:	6d e0       	ldi	r22, 0x0D	; 13
    173a:	0e 94 7a 29 	call	0x52f4	; 0x52f4 <uart_enqueue>
	}		
}
    173e:	df 91       	pop	r29
    1740:	cf 91       	pop	r28
    1742:	08 95       	ret

00001744 <_lcd_bubble>:
	lcd_command("COLOR BLUE");
	lcd_command("BOX 30 30 F");
}

void _lcd_bubble(uint8_t mode){
	switch(mode){
    1744:	8f 31       	cpi	r24, 0x1F	; 31
    1746:	19 f0       	breq	.+6      	; 0x174e <_lcd_bubble+0xa>
    1748:	80 32       	cpi	r24, 0x20	; 32
    174a:	51 f4       	brne	.+20     	; 0x1760 <_lcd_bubble+0x1c>
    174c:	05 c0       	rjmp	.+10     	; 0x1758 <_lcd_bubble+0x14>
		case LCD_ENABLED:
		lcd_command("COLOR 69");
    174e:	83 e6       	ldi	r24, 0x63	; 99
    1750:	91 e2       	ldi	r25, 0x21	; 33
    1752:	0e 94 86 0b 	call	0x170c	; 0x170c <lcd_command>
		break;
    1756:	04 c0       	rjmp	.+8      	; 0x1760 <_lcd_bubble+0x1c>
		case LCD_STANDBY:
		lcd_command("COLOR 16");
    1758:	8c e6       	ldi	r24, 0x6C	; 108
    175a:	91 e2       	ldi	r25, 0x21	; 33
    175c:	0e 94 86 0b 	call	0x170c	; 0x170c <lcd_command>
		break;
	}
	lcd_command("CIRCLE 10 F");
    1760:	85 e7       	ldi	r24, 0x75	; 117
    1762:	91 e2       	ldi	r25, 0x21	; 33
    1764:	0e 94 86 0b 	call	0x170c	; 0x170c <lcd_command>
	lcd_command("COLOR WHITE");
    1768:	81 e8       	ldi	r24, 0x81	; 129
    176a:	91 e2       	ldi	r25, 0x21	; 33
    176c:	0e 94 86 0b 	call	0x170c	; 0x170c <lcd_command>
	lcd_command("CIRCLE 10");
    1770:	8d e8       	ldi	r24, 0x8D	; 141
    1772:	91 e2       	ldi	r25, 0x21	; 33
    1774:	0e 94 86 0b 	call	0x170c	; 0x170c <lcd_command>
	lcd_command("ARC 8 125 145");
    1778:	87 e9       	ldi	r24, 0x97	; 151
    177a:	91 e2       	ldi	r25, 0x21	; 33
    177c:	0e 94 86 0b 	call	0x170c	; 0x170c <lcd_command>
}
    1780:	08 95       	ret

00001782 <_lcd_no_bubble>:
//#############################################################
//## SCREENS: OUTPUT STATUS
//#############################################################

void _lcd_no_bubble(){
	lcd_command("COLOR BLUE");
    1782:	85 ea       	ldi	r24, 0xA5	; 165
    1784:	91 e2       	ldi	r25, 0x21	; 33
    1786:	0e 94 86 0b 	call	0x170c	; 0x170c <lcd_command>
	lcd_command("BOX 30 30 F");
    178a:	80 eb       	ldi	r24, 0xB0	; 176
    178c:	91 e2       	ldi	r25, 0x21	; 33
    178e:	0e 94 86 0b 	call	0x170c	; 0x170c <lcd_command>
}
    1792:	08 95       	ret

00001794 <lcd_d>:
		lcd_command("XY 380 161");
		_lcd_bubble(mode);
	}
}

void lcd_d(uint8_t mode){
    1794:	cf 93       	push	r28
    1796:	c8 2f       	mov	r28, r24
	if (mode == LCD_DISABLED){
    1798:	81 32       	cpi	r24, 0x21	; 33
    179a:	39 f4       	brne	.+14     	; 0x17aa <lcd_d+0x16>
		lcd_command("XY 365 199");
    179c:	8c eb       	ldi	r24, 0xBC	; 188
    179e:	91 e2       	ldi	r25, 0x21	; 33
    17a0:	0e 94 86 0b 	call	0x170c	; 0x170c <lcd_command>
		_lcd_no_bubble();
    17a4:	0e 94 c1 0b 	call	0x1782	; 0x1782 <_lcd_no_bubble>
    17a8:	07 c0       	rjmp	.+14     	; 0x17b8 <lcd_d+0x24>
	}
	else {
		lcd_command("XY 380 209");
    17aa:	87 ec       	ldi	r24, 0xC7	; 199
    17ac:	91 e2       	ldi	r25, 0x21	; 33
    17ae:	0e 94 86 0b 	call	0x170c	; 0x170c <lcd_command>
		_lcd_bubble(mode);
    17b2:	8c 2f       	mov	r24, r28
    17b4:	0e 94 a2 0b 	call	0x1744	; 0x1744 <_lcd_bubble>
	}
}
    17b8:	cf 91       	pop	r28
    17ba:	08 95       	ret

000017bc <lcd_c>:
		lcd_command("XY 380 113");
		_lcd_bubble(mode);
	}
}

void lcd_c(uint8_t mode){
    17bc:	cf 93       	push	r28
    17be:	c8 2f       	mov	r28, r24
	if (mode == LCD_DISABLED){
    17c0:	81 32       	cpi	r24, 0x21	; 33
    17c2:	39 f4       	brne	.+14     	; 0x17d2 <lcd_c+0x16>
		lcd_command("XY 365 151");
    17c4:	82 ed       	ldi	r24, 0xD2	; 210
    17c6:	91 e2       	ldi	r25, 0x21	; 33
    17c8:	0e 94 86 0b 	call	0x170c	; 0x170c <lcd_command>
		_lcd_no_bubble();
    17cc:	0e 94 c1 0b 	call	0x1782	; 0x1782 <_lcd_no_bubble>
    17d0:	07 c0       	rjmp	.+14     	; 0x17e0 <lcd_c+0x24>
	}
	else {
		lcd_command("XY 380 161");
    17d2:	8d ed       	ldi	r24, 0xDD	; 221
    17d4:	91 e2       	ldi	r25, 0x21	; 33
    17d6:	0e 94 86 0b 	call	0x170c	; 0x170c <lcd_command>
		_lcd_bubble(mode);
    17da:	8c 2f       	mov	r24, r28
    17dc:	0e 94 a2 0b 	call	0x1744	; 0x1744 <_lcd_bubble>
	}
}
    17e0:	cf 91       	pop	r28
    17e2:	08 95       	ret

000017e4 <lcd_b>:
		lcd_command("XY 380 65");
		_lcd_bubble(mode);
	}		
}

void lcd_b(uint8_t mode){
    17e4:	cf 93       	push	r28
    17e6:	c8 2f       	mov	r28, r24
	if (mode == LCD_DISABLED){
    17e8:	81 32       	cpi	r24, 0x21	; 33
    17ea:	39 f4       	brne	.+14     	; 0x17fa <lcd_b+0x16>
		lcd_command("XY 365 103");
    17ec:	88 ee       	ldi	r24, 0xE8	; 232
    17ee:	91 e2       	ldi	r25, 0x21	; 33
    17f0:	0e 94 86 0b 	call	0x170c	; 0x170c <lcd_command>
		_lcd_no_bubble();
    17f4:	0e 94 c1 0b 	call	0x1782	; 0x1782 <_lcd_no_bubble>
    17f8:	07 c0       	rjmp	.+14     	; 0x1808 <lcd_b+0x24>
	}
	else {
		lcd_command("XY 380 113");
    17fa:	83 ef       	ldi	r24, 0xF3	; 243
    17fc:	91 e2       	ldi	r25, 0x21	; 33
    17fe:	0e 94 86 0b 	call	0x170c	; 0x170c <lcd_command>
		_lcd_bubble(mode);
    1802:	8c 2f       	mov	r24, r28
    1804:	0e 94 a2 0b 	call	0x1744	; 0x1744 <_lcd_bubble>
	}
}
    1808:	cf 91       	pop	r28
    180a:	08 95       	ret

0000180c <lcd_a>:
	lcd_command("COLOR WHITE");
	lcd_command("CIRCLE 10");
	lcd_command("ARC 8 125 145");
}

void lcd_a(uint8_t mode){
    180c:	cf 93       	push	r28
    180e:	c8 2f       	mov	r28, r24
	if (mode == LCD_DISABLED){
    1810:	81 32       	cpi	r24, 0x21	; 33
    1812:	39 f4       	brne	.+14     	; 0x1822 <lcd_a+0x16>
		lcd_command("XY 365 55");
    1814:	8e ef       	ldi	r24, 0xFE	; 254
    1816:	91 e2       	ldi	r25, 0x21	; 33
    1818:	0e 94 86 0b 	call	0x170c	; 0x170c <lcd_command>
		_lcd_no_bubble();		
    181c:	0e 94 c1 0b 	call	0x1782	; 0x1782 <_lcd_no_bubble>
    1820:	07 c0       	rjmp	.+14     	; 0x1830 <lcd_a+0x24>
	}
	else {
		lcd_command("XY 380 65");
    1822:	88 e0       	ldi	r24, 0x08	; 8
    1824:	92 e2       	ldi	r25, 0x22	; 34
    1826:	0e 94 86 0b 	call	0x170c	; 0x170c <lcd_command>
		_lcd_bubble(mode);
    182a:	8c 2f       	mov	r24, r28
    182c:	0e 94 a2 0b 	call	0x1744	; 0x1744 <_lcd_bubble>
	}		
}
    1830:	cf 91       	pop	r28
    1832:	08 95       	ret

00001834 <lcd_update>:

//Don't forget to end theCommand with a SPACE!
//--it's that way to support negation
//--Positive example: "75 1 "
//--Negative example: "75 1 -" 
void lcd_update(char* theCommand, char* theValue){
    1834:	0f 93       	push	r16
    1836:	1f 93       	push	r17
    1838:	cf 93       	push	r28
    183a:	df 93       	push	r29
    183c:	ec 01       	movw	r28, r24
    183e:	8b 01       	movw	r16, r22
	if ((lcd_flow_reboot == LCD_ENABLED)&&(uart_count(&ulcd)<MAX_BUFFER_LEN-100)){
    1840:	80 91 ca 26 	lds	r24, 0x26CA
    1844:	8f 31       	cpi	r24, 0x1F	; 31
    1846:	b9 f4       	brne	.+46     	; 0x1876 <lcd_update+0x42>
    1848:	80 eb       	ldi	r24, 0xB0	; 176
    184a:	9b e0       	ldi	r25, 0x0B	; 11
    184c:	0e 94 ad 25 	call	0x4b5a	; 0x4b5a <uart_count>
    1850:	23 e0       	ldi	r18, 0x03	; 3
    1852:	8c 39       	cpi	r24, 0x9C	; 156
    1854:	92 07       	cpc	r25, r18
    1856:	78 f4       	brcc	.+30     	; 0x1876 <lcd_update+0x42>
		uart_enqueue_string(&ulcd, theCommand);
    1858:	80 eb       	ldi	r24, 0xB0	; 176
    185a:	9b e0       	ldi	r25, 0x0B	; 11
    185c:	be 01       	movw	r22, r28
    185e:	0e 94 f4 25 	call	0x4be8	; 0x4be8 <uart_enqueue_string>
		uart_enqueue_string(&ulcd, theValue);
    1862:	80 eb       	ldi	r24, 0xB0	; 176
    1864:	9b e0       	ldi	r25, 0x0B	; 11
    1866:	b8 01       	movw	r22, r16
    1868:	0e 94 f4 25 	call	0x4be8	; 0x4be8 <uart_enqueue_string>
		uart_enqueue(&ulcd, 0x0D); //command terminator
    186c:	80 eb       	ldi	r24, 0xB0	; 176
    186e:	9b e0       	ldi	r25, 0x0B	; 11
    1870:	6d e0       	ldi	r22, 0x0D	; 13
    1872:	0e 94 7a 29 	call	0x52f4	; 0x52f4 <uart_enqueue>
	}	
}
    1876:	df 91       	pop	r29
    1878:	cf 91       	pop	r28
    187a:	1f 91       	pop	r17
    187c:	0f 91       	pop	r16
    187e:	08 95       	ret

00001880 <service_lcd>:

void service_lcd(){	
	static uint16_t decimator = 0;

	//Flow control indicator
	if (lcd_flow_control != LCD_READY){led_on(LED_1);}
    1880:	80 91 e2 26 	lds	r24, 0x26E2
    1884:	82 35       	cpi	r24, 0x52	; 82
    1886:	21 f0       	breq	.+8      	; 0x1890 <service_lcd+0x10>
    1888:	81 e0       	ldi	r24, 0x01	; 1
    188a:	0e 94 a6 2f 	call	0x5f4c	; 0x5f4c <led_on>
    188e:	03 c0       	rjmp	.+6      	; 0x1896 <service_lcd+0x16>
	else {led_off(LED_1);}
    1890:	81 e0       	ldi	r24, 0x01	; 1
    1892:	0e 94 c2 2f 	call	0x5f84	; 0x5f84 <led_off>
	
	//Reboot logic
	switch(lcd_flow_reboot){
    1896:	80 91 ca 26 	lds	r24, 0x26CA
    189a:	80 39       	cpi	r24, 0x90	; 144
    189c:	51 f0       	breq	.+20     	; 0x18b2 <service_lcd+0x32>
    189e:	81 39       	cpi	r24, 0x91	; 145
    18a0:	f1 f4       	brne	.+60     	; 0x18de <service_lcd+0x5e>
		case LCD_ENABLED:
			//for efficiency test this case first (since it is normal case)
			break;
		case LCD_REBOOT:
			decimator = 0;
    18a2:	10 92 35 22 	sts	0x2235, r1
    18a6:	10 92 36 22 	sts	0x2236, r1
			lcd_flow_reboot = LCD_BOOTING;
    18aa:	80 e9       	ldi	r24, 0x90	; 144
    18ac:	80 93 ca 26 	sts	0x26CA, r24
			break;
    18b0:	16 c0       	rjmp	.+44     	; 0x18de <service_lcd+0x5e>
		case LCD_BOOTING:
			decimator++;
    18b2:	80 91 35 22 	lds	r24, 0x2235
    18b6:	90 91 36 22 	lds	r25, 0x2236
    18ba:	01 96       	adiw	r24, 0x01	; 1
    18bc:	80 93 35 22 	sts	0x2235, r24
    18c0:	90 93 36 22 	sts	0x2236, r25
			if (decimator >= 4999){
    18c4:	23 e1       	ldi	r18, 0x13	; 19
    18c6:	87 38       	cpi	r24, 0x87	; 135
    18c8:	92 07       	cpc	r25, r18
    18ca:	48 f0       	brcs	.+18     	; 0x18de <service_lcd+0x5e>
				decimator = 0;
    18cc:	10 92 35 22 	sts	0x2235, r1
    18d0:	10 92 36 22 	sts	0x2236, r1
				lcd_flow_reboot = LCD_ENABLED;
    18d4:	8f e1       	ldi	r24, 0x1F	; 31
    18d6:	80 93 ca 26 	sts	0x26CA, r24
				STATE_menu = MENU_STARTUP;
    18da:	80 93 a5 25 	sts	0x25A5, r24
			}
			break;
	}
	
	//Command processing logic
	if(lcd_flow_control == LCD_DONE_COMMAND) {lcd_flow_control = LCD_READY;}
    18de:	80 91 e2 26 	lds	r24, 0x26E2
    18e2:	8f 34       	cpi	r24, 0x4F	; 79
    18e4:	19 f4       	brne	.+6      	; 0x18ec <service_lcd+0x6c>
    18e6:	82 e5       	ldi	r24, 0x52	; 82
    18e8:	80 93 e2 26 	sts	0x26E2, r24
	
	//Boot up logic (show start screen and let LCD bootup so commands are understood)
	if (decimator < 5000) {decimator++;}
    18ec:	80 91 35 22 	lds	r24, 0x2235
    18f0:	90 91 36 22 	lds	r25, 0x2236
    18f4:	23 e1       	ldi	r18, 0x13	; 19
    18f6:	88 38       	cpi	r24, 0x88	; 136
    18f8:	92 07       	cpc	r25, r18
    18fa:	30 f4       	brcc	.+12     	; 0x1908 <service_lcd+0x88>
    18fc:	01 96       	adiw	r24, 0x01	; 1
    18fe:	80 93 35 22 	sts	0x2235, r24
    1902:	90 93 36 22 	sts	0x2236, r25
    1906:	08 95       	ret
	else if (decimator == 5000) {lcd_flow_control = LCD_READY; decimator = 9000;}
    1908:	23 e1       	ldi	r18, 0x13	; 19
    190a:	88 38       	cpi	r24, 0x88	; 136
    190c:	92 07       	cpc	r25, r18
    190e:	49 f4       	brne	.+18     	; 0x1922 <service_lcd+0xa2>
    1910:	82 e5       	ldi	r24, 0x52	; 82
    1912:	80 93 e2 26 	sts	0x26E2, r24
    1916:	88 e2       	ldi	r24, 0x28	; 40
    1918:	93 e2       	ldi	r25, 0x23	; 35
    191a:	80 93 35 22 	sts	0x2235, r24
    191e:	90 93 36 22 	sts	0x2236, r25
    1922:	08 95       	ret

00001924 <init_lcd_console>:

//#############################################################
//## INITIALIZATION ROUTINE
//#############################################################

void init_lcd_console(){
    1924:	ec e4       	ldi	r30, 0x4C	; 76
    1926:	f2 e2       	ldi	r31, 0x22	; 34
    1928:	af eb       	ldi	r26, 0xBF	; 191
    192a:	b6 e2       	ldi	r27, 0x26	; 38
    192c:	84 ea       	ldi	r24, 0xA4	; 164
    192e:	95 e2       	ldi	r25, 0x25	; 37
	char* line_buffer;
	//Load the command bytes into the console buffer
	for(uint8_t i=0;i<LCD_CONSOLE_NUM_ROWS;i++){
		line_buffer = lcd_console[i];
		line_buffer[0] = '8'; line_buffer[1]='8'; line_buffer[2]=' '; line_buffer[4]=' '; line_buffer[5]='"'; line_buffer[6]='"';		
    1930:	48 e3       	ldi	r20, 0x38	; 56
    1932:	30 e2       	ldi	r19, 0x20	; 32
    1934:	22 e2       	ldi	r18, 0x22	; 34
    1936:	40 83       	st	Z, r20
    1938:	41 83       	std	Z+1, r20	; 0x01
    193a:	32 83       	std	Z+2, r19	; 0x02
    193c:	34 83       	std	Z+4, r19	; 0x04
    193e:	25 83       	std	Z+5, r18	; 0x05
    1940:	26 83       	std	Z+6, r18	; 0x06
		lcd_buffer_dirty[i] = false;
    1942:	1d 92       	st	X+, r1
    1944:	e5 59       	subi	r30, 0x95	; 149
    1946:	ff 4f       	sbci	r31, 0xFF	; 255
//#############################################################

void init_lcd_console(){
	char* line_buffer;
	//Load the command bytes into the console buffer
	for(uint8_t i=0;i<LCD_CONSOLE_NUM_ROWS;i++){
    1948:	e8 17       	cp	r30, r24
    194a:	f9 07       	cpc	r31, r25
    194c:	a1 f7       	brne	.-24     	; 0x1936 <init_lcd_console+0x12>
		line_buffer = lcd_console[i];
		line_buffer[0] = '8'; line_buffer[1]='8'; line_buffer[2]=' '; line_buffer[4]=' '; line_buffer[5]='"'; line_buffer[6]='"';		
		lcd_buffer_dirty[i] = false;
	}
	//Init state
	lcd_console_head = 0;
    194e:	10 92 be 26 	sts	0x26BE, r1
	STATE_lcd_console = LCD_CONSOLE_STATE_IDLE;
    1952:	86 e1       	ldi	r24, 0x16	; 22
    1954:	80 93 bb 26 	sts	0x26BB, r24
	lcd_console_set_value[4] = 0; //add string termination character
    1958:	10 92 aa 25 	sts	0x25AA, r1
	lcd_console_incoming_byte[0] = '>';
    195c:	8e e3       	ldi	r24, 0x3E	; 62
    195e:	80 93 38 22 	sts	0x2238, r24
	lcd_console_incoming_byte[1] = ' ';
    1962:	80 e2       	ldi	r24, 0x20	; 32
    1964:	80 93 39 22 	sts	0x2239, r24
	lcd_console_incoming_byte[3] = 0;
    1968:	10 92 3b 22 	sts	0x223B, r1
}	
    196c:	08 95       	ret

0000196e <lcd_console_pwr_adj>:

/*
	Map channel, dial to channel number
*/
uint8_t lcd_console_pwr_adj(uint8_t channel, uint8_t command){
	switch(channel){
    196e:	81 30       	cpi	r24, 0x01	; 1
    1970:	81 f0       	breq	.+32     	; 0x1992 <lcd_console_pwr_adj+0x24>
    1972:	81 30       	cpi	r24, 0x01	; 1
    1974:	28 f0       	brcs	.+10     	; 0x1980 <lcd_console_pwr_adj+0x12>
    1976:	82 30       	cpi	r24, 0x02	; 2
    1978:	a9 f0       	breq	.+42     	; 0x19a4 <lcd_console_pwr_adj+0x36>
    197a:	83 30       	cpi	r24, 0x03	; 3
    197c:	29 f5       	brne	.+74     	; 0x19c8 <lcd_console_pwr_adj+0x5a>
    197e:	1b c0       	rjmp	.+54     	; 0x19b6 <lcd_console_pwr_adj+0x48>
		case CHANNEL_A:
			switch(command){
    1980:	66 35       	cpi	r22, 0x56	; 86
    1982:	19 f0       	breq	.+6      	; 0x198a <lcd_console_pwr_adj+0x1c>
    1984:	67 35       	cpi	r22, 0x57	; 87
    1986:	19 f4       	brne	.+6      	; 0x198e <lcd_console_pwr_adj+0x20>
    1988:	21 c0       	rjmp	.+66     	; 0x19cc <lcd_console_pwr_adj+0x5e>
				case LCD_CONSOLE_CMD_ADJUST_MAX:
					return 0;
    198a:	80 e0       	ldi	r24, 0x00	; 0
    198c:	08 95       	ret
				return 7;
				break;
			}
			break;
	}
	return 0; //SHOULD NEVER REACH HERE
    198e:	80 e0       	ldi	r24, 0x00	; 0
    1990:	08 95       	ret
					return 1;
				break;
			}
			break;
		case CHANNEL_B:
			switch(command){
    1992:	66 35       	cpi	r22, 0x56	; 86
    1994:	19 f0       	breq	.+6      	; 0x199c <lcd_console_pwr_adj+0x2e>
    1996:	67 35       	cpi	r22, 0x57	; 87
    1998:	19 f4       	brne	.+6      	; 0x19a0 <lcd_console_pwr_adj+0x32>
    199a:	1a c0       	rjmp	.+52     	; 0x19d0 <lcd_console_pwr_adj+0x62>
				case LCD_CONSOLE_CMD_ADJUST_MAX:
				return 2;
    199c:	82 e0       	ldi	r24, 0x02	; 2
    199e:	08 95       	ret
				return 7;
				break;
			}
			break;
	}
	return 0; //SHOULD NEVER REACH HERE
    19a0:	80 e0       	ldi	r24, 0x00	; 0
    19a2:	08 95       	ret
				return 3;
				break;
			}
			break;
		case CHANNEL_C:
			switch(command){
    19a4:	66 35       	cpi	r22, 0x56	; 86
    19a6:	19 f0       	breq	.+6      	; 0x19ae <lcd_console_pwr_adj+0x40>
    19a8:	67 35       	cpi	r22, 0x57	; 87
    19aa:	19 f4       	brne	.+6      	; 0x19b2 <lcd_console_pwr_adj+0x44>
    19ac:	13 c0       	rjmp	.+38     	; 0x19d4 <lcd_console_pwr_adj+0x66>
				case LCD_CONSOLE_CMD_ADJUST_MAX:
				return 4;
    19ae:	84 e0       	ldi	r24, 0x04	; 4
    19b0:	08 95       	ret
				return 7;
				break;
			}
			break;
	}
	return 0; //SHOULD NEVER REACH HERE
    19b2:	80 e0       	ldi	r24, 0x00	; 0
    19b4:	08 95       	ret
				return 5;
				break;
			}
			break;
		case CHANNEL_D:
			switch(command){
    19b6:	66 35       	cpi	r22, 0x56	; 86
    19b8:	19 f0       	breq	.+6      	; 0x19c0 <lcd_console_pwr_adj+0x52>
    19ba:	67 35       	cpi	r22, 0x57	; 87
    19bc:	19 f4       	brne	.+6      	; 0x19c4 <lcd_console_pwr_adj+0x56>
    19be:	0c c0       	rjmp	.+24     	; 0x19d8 <lcd_console_pwr_adj+0x6a>
				case LCD_CONSOLE_CMD_ADJUST_MAX:
				return 6;
    19c0:	86 e0       	ldi	r24, 0x06	; 6
    19c2:	08 95       	ret
				return 7;
				break;
			}
			break;
	}
	return 0; //SHOULD NEVER REACH HERE
    19c4:	80 e0       	ldi	r24, 0x00	; 0
    19c6:	08 95       	ret
    19c8:	80 e0       	ldi	r24, 0x00	; 0
    19ca:	08 95       	ret
			switch(command){
				case LCD_CONSOLE_CMD_ADJUST_MAX:
					return 0;
				break;
				case LCD_CONSOLE_CMD_ADJUST_SET:
					return 1;
    19cc:	81 e0       	ldi	r24, 0x01	; 1
    19ce:	08 95       	ret
			switch(command){
				case LCD_CONSOLE_CMD_ADJUST_MAX:
				return 2;
				break;
				case LCD_CONSOLE_CMD_ADJUST_SET:
				return 3;
    19d0:	83 e0       	ldi	r24, 0x03	; 3
    19d2:	08 95       	ret
			switch(command){
				case LCD_CONSOLE_CMD_ADJUST_MAX:
				return 4;
				break;
				case LCD_CONSOLE_CMD_ADJUST_SET:
				return 5;
    19d4:	85 e0       	ldi	r24, 0x05	; 5
    19d6:	08 95       	ret
			switch(command){
				case LCD_CONSOLE_CMD_ADJUST_MAX:
				return 6;
				break;
				case LCD_CONSOLE_CMD_ADJUST_SET:
				return 7;
    19d8:	87 e0       	ldi	r24, 0x07	; 7
				break;
			}
			break;
	}
	return 0; //SHOULD NEVER REACH HERE
}
    19da:	08 95       	ret

000019dc <lcd_console_pwr_adj_set>:

//#############################################################
//## HOST API SUPPORT FUNCTIONS
//#############################################################

void lcd_console_pwr_adj_set(){
    19dc:	cf 93       	push	r28
    19de:	df 93       	push	r29
	uint16_t new_value;
	//ASCII to uint10_t (0-1023)
	new_value = (uint16_t)atoi(lcd_console_set_value);
    19e0:	86 ea       	ldi	r24, 0xA6	; 166
    19e2:	95 e2       	ldi	r25, 0x25	; 37
    19e4:	0e 94 2d 32 	call	0x645a	; 0x645a <atoi>
    19e8:	ec 01       	movw	r28, r24
	//Change Dial
	pwr_adj_change(lcd_console_pwr_adj(lcd_console_channel, lcd_console_command), new_value);
    19ea:	80 91 b8 25 	lds	r24, 0x25B8
    19ee:	60 91 bd 26 	lds	r22, 0x26BD
    19f2:	0e 94 b7 0c 	call	0x196e	; 0x196e <lcd_console_pwr_adj>
    19f6:	be 01       	movw	r22, r28
    19f8:	0e 94 4b 13 	call	0x2696	; 0x2696 <pwr_adj_change>
}
    19fc:	df 91       	pop	r29
    19fe:	cf 91       	pop	r28
    1a00:	08 95       	ret

00001a02 <lcd_console_meter>:
/*
	Retrieve the current meter reading value (voltage or current)
	--returns value via lcd_console_meter_value
*/
void lcd_console_meter(uint8_t channel, uint8_t side){
	switch(channel){
    1a02:	81 30       	cpi	r24, 0x01	; 1
    1a04:	09 f4       	brne	.+2      	; 0x1a08 <lcd_console_meter+0x6>
    1a06:	49 c0       	rjmp	.+146    	; 0x1a9a <lcd_console_meter+0x98>
    1a08:	81 30       	cpi	r24, 0x01	; 1
    1a0a:	38 f0       	brcs	.+14     	; 0x1a1a <lcd_console_meter+0x18>
    1a0c:	82 30       	cpi	r24, 0x02	; 2
    1a0e:	09 f4       	brne	.+2      	; 0x1a12 <lcd_console_meter+0x10>
    1a10:	84 c0       	rjmp	.+264    	; 0x1b1a <lcd_console_meter+0x118>
    1a12:	83 30       	cpi	r24, 0x03	; 3
    1a14:	09 f0       	breq	.+2      	; 0x1a18 <lcd_console_meter+0x16>
    1a16:	fb c0       	rjmp	.+502    	; 0x1c0e <lcd_console_meter+0x20c>
    1a18:	c0 c0       	rjmp	.+384    	; 0x1b9a <lcd_console_meter+0x198>
		case CHANNEL_A:
			switch(side){
    1a1a:	64 35       	cpi	r22, 0x54	; 84
    1a1c:	21 f0       	breq	.+8      	; 0x1a26 <lcd_console_meter+0x24>
    1a1e:	65 35       	cpi	r22, 0x55	; 85
    1a20:	09 f0       	breq	.+2      	; 0x1a24 <lcd_console_meter+0x22>
    1a22:	f5 c0       	rjmp	.+490    	; 0x1c0e <lcd_console_meter+0x20c>
    1a24:	1d c0       	rjmp	.+58     	; 0x1a60 <lcd_console_meter+0x5e>
				case LCD_CONSOLE_CMD_MAIN_POS:
					switch(lcd_console_value_1){
    1a26:	80 91 ba 26 	lds	r24, 0x26BA
    1a2a:	86 35       	cpi	r24, 0x56	; 86
    1a2c:	59 f0       	breq	.+22     	; 0x1a44 <lcd_console_meter+0x42>
    1a2e:	87 35       	cpi	r24, 0x57	; 87
    1a30:	20 f4       	brcc	.+8      	; 0x1a3a <lcd_console_meter+0x38>
    1a32:	89 34       	cpi	r24, 0x49	; 73
    1a34:	09 f0       	breq	.+2      	; 0x1a38 <lcd_console_meter+0x36>
    1a36:	eb c0       	rjmp	.+470    	; 0x1c0e <lcd_console_meter+0x20c>
    1a38:	0c c0       	rjmp	.+24     	; 0x1a52 <lcd_console_meter+0x50>
    1a3a:	89 36       	cpi	r24, 0x69	; 105
    1a3c:	51 f0       	breq	.+20     	; 0x1a52 <lcd_console_meter+0x50>
    1a3e:	86 37       	cpi	r24, 0x76	; 118
    1a40:	09 f0       	breq	.+2      	; 0x1a44 <lcd_console_meter+0x42>
    1a42:	e5 c0       	rjmp	.+458    	; 0x1c0e <lcd_console_meter+0x20c>
						case 'v':
						case 'V':
							adc_data(0, VOLTAGE_POS, lcd_console_meter_value); //A V+
    1a44:	80 e0       	ldi	r24, 0x00	; 0
    1a46:	67 e6       	ldi	r22, 0x67	; 103
    1a48:	4c ea       	ldi	r20, 0xAC	; 172
    1a4a:	55 e2       	ldi	r21, 0x25	; 37
    1a4c:	0e 94 cf 01 	call	0x39e	; 0x39e <adc_data>
						break;
    1a50:	08 95       	ret
						case 'i':
						case 'I':
							adc_data(1, CURRENT_HI_RES, lcd_console_meter_value); //A I+
    1a52:	81 e0       	ldi	r24, 0x01	; 1
    1a54:	6a e6       	ldi	r22, 0x6A	; 106
    1a56:	4c ea       	ldi	r20, 0xAC	; 172
    1a58:	55 e2       	ldi	r21, 0x25	; 37
    1a5a:	0e 94 cf 01 	call	0x39e	; 0x39e <adc_data>
						break;
    1a5e:	08 95       	ret
					}//Pos: V or I
				break;
				case LCD_CONSOLE_CMD_MAIN_NEG:
					switch(lcd_console_value_1){
    1a60:	80 91 ba 26 	lds	r24, 0x26BA
    1a64:	86 35       	cpi	r24, 0x56	; 86
    1a66:	59 f0       	breq	.+22     	; 0x1a7e <lcd_console_meter+0x7c>
    1a68:	87 35       	cpi	r24, 0x57	; 87
    1a6a:	20 f4       	brcc	.+8      	; 0x1a74 <lcd_console_meter+0x72>
    1a6c:	89 34       	cpi	r24, 0x49	; 73
    1a6e:	09 f0       	breq	.+2      	; 0x1a72 <lcd_console_meter+0x70>
    1a70:	ce c0       	rjmp	.+412    	; 0x1c0e <lcd_console_meter+0x20c>
    1a72:	0c c0       	rjmp	.+24     	; 0x1a8c <lcd_console_meter+0x8a>
    1a74:	89 36       	cpi	r24, 0x69	; 105
    1a76:	51 f0       	breq	.+20     	; 0x1a8c <lcd_console_meter+0x8a>
    1a78:	86 37       	cpi	r24, 0x76	; 118
    1a7a:	09 f0       	breq	.+2      	; 0x1a7e <lcd_console_meter+0x7c>
    1a7c:	c8 c0       	rjmp	.+400    	; 0x1c0e <lcd_console_meter+0x20c>
						case 'v':
						case 'V':
							adc_data(2, VOLTAGE_NEG, lcd_console_meter_value); //A V-
    1a7e:	82 e0       	ldi	r24, 0x02	; 2
    1a80:	68 e6       	ldi	r22, 0x68	; 104
    1a82:	4c ea       	ldi	r20, 0xAC	; 172
    1a84:	55 e2       	ldi	r21, 0x25	; 37
    1a86:	0e 94 cf 01 	call	0x39e	; 0x39e <adc_data>
						break;
    1a8a:	08 95       	ret
						case 'i':
						case 'I':
							adc_data(3, CURRENT_HI_RES, lcd_console_meter_value); //A I-
    1a8c:	83 e0       	ldi	r24, 0x03	; 3
    1a8e:	6a e6       	ldi	r22, 0x6A	; 106
    1a90:	4c ea       	ldi	r20, 0xAC	; 172
    1a92:	55 e2       	ldi	r21, 0x25	; 37
    1a94:	0e 94 cf 01 	call	0x39e	; 0x39e <adc_data>
						break;
    1a98:	08 95       	ret
				break;
			}//side		
		break; //Channel A
		
		case CHANNEL_B:
			switch(side){
    1a9a:	64 35       	cpi	r22, 0x54	; 84
    1a9c:	21 f0       	breq	.+8      	; 0x1aa6 <lcd_console_meter+0xa4>
    1a9e:	65 35       	cpi	r22, 0x55	; 85
    1aa0:	09 f0       	breq	.+2      	; 0x1aa4 <lcd_console_meter+0xa2>
    1aa2:	b5 c0       	rjmp	.+362    	; 0x1c0e <lcd_console_meter+0x20c>
    1aa4:	1d c0       	rjmp	.+58     	; 0x1ae0 <lcd_console_meter+0xde>
				case LCD_CONSOLE_CMD_MAIN_POS:
				switch(lcd_console_value_1){
    1aa6:	80 91 ba 26 	lds	r24, 0x26BA
    1aaa:	86 35       	cpi	r24, 0x56	; 86
    1aac:	59 f0       	breq	.+22     	; 0x1ac4 <lcd_console_meter+0xc2>
    1aae:	87 35       	cpi	r24, 0x57	; 87
    1ab0:	20 f4       	brcc	.+8      	; 0x1aba <lcd_console_meter+0xb8>
    1ab2:	89 34       	cpi	r24, 0x49	; 73
    1ab4:	09 f0       	breq	.+2      	; 0x1ab8 <lcd_console_meter+0xb6>
    1ab6:	ab c0       	rjmp	.+342    	; 0x1c0e <lcd_console_meter+0x20c>
    1ab8:	0c c0       	rjmp	.+24     	; 0x1ad2 <lcd_console_meter+0xd0>
    1aba:	89 36       	cpi	r24, 0x69	; 105
    1abc:	51 f0       	breq	.+20     	; 0x1ad2 <lcd_console_meter+0xd0>
    1abe:	86 37       	cpi	r24, 0x76	; 118
    1ac0:	09 f0       	breq	.+2      	; 0x1ac4 <lcd_console_meter+0xc2>
    1ac2:	a5 c0       	rjmp	.+330    	; 0x1c0e <lcd_console_meter+0x20c>
					case 'v':
					case 'V':
					adc_data(4, VOLTAGE_POS, lcd_console_meter_value); //B V+
    1ac4:	84 e0       	ldi	r24, 0x04	; 4
    1ac6:	67 e6       	ldi	r22, 0x67	; 103
    1ac8:	4c ea       	ldi	r20, 0xAC	; 172
    1aca:	55 e2       	ldi	r21, 0x25	; 37
    1acc:	0e 94 cf 01 	call	0x39e	; 0x39e <adc_data>
					break;
    1ad0:	08 95       	ret
					case 'i':
					case 'I':
						adc_data(5, CURRENT_HI_RES, lcd_console_meter_value); //B I+
    1ad2:	85 e0       	ldi	r24, 0x05	; 5
    1ad4:	6a e6       	ldi	r22, 0x6A	; 106
    1ad6:	4c ea       	ldi	r20, 0xAC	; 172
    1ad8:	55 e2       	ldi	r21, 0x25	; 37
    1ada:	0e 94 cf 01 	call	0x39e	; 0x39e <adc_data>
					break;
    1ade:	08 95       	ret
				}//Pos: V or I
				break;
				case LCD_CONSOLE_CMD_MAIN_NEG:
				switch(lcd_console_value_1){
    1ae0:	80 91 ba 26 	lds	r24, 0x26BA
    1ae4:	86 35       	cpi	r24, 0x56	; 86
    1ae6:	59 f0       	breq	.+22     	; 0x1afe <lcd_console_meter+0xfc>
    1ae8:	87 35       	cpi	r24, 0x57	; 87
    1aea:	20 f4       	brcc	.+8      	; 0x1af4 <lcd_console_meter+0xf2>
    1aec:	89 34       	cpi	r24, 0x49	; 73
    1aee:	09 f0       	breq	.+2      	; 0x1af2 <lcd_console_meter+0xf0>
    1af0:	8e c0       	rjmp	.+284    	; 0x1c0e <lcd_console_meter+0x20c>
    1af2:	0c c0       	rjmp	.+24     	; 0x1b0c <lcd_console_meter+0x10a>
    1af4:	89 36       	cpi	r24, 0x69	; 105
    1af6:	51 f0       	breq	.+20     	; 0x1b0c <lcd_console_meter+0x10a>
    1af8:	86 37       	cpi	r24, 0x76	; 118
    1afa:	09 f0       	breq	.+2      	; 0x1afe <lcd_console_meter+0xfc>
    1afc:	88 c0       	rjmp	.+272    	; 0x1c0e <lcd_console_meter+0x20c>
					case 'v':
					case 'V':
						adc_data(6, VOLTAGE_NEG, lcd_console_meter_value); //B V-
    1afe:	86 e0       	ldi	r24, 0x06	; 6
    1b00:	68 e6       	ldi	r22, 0x68	; 104
    1b02:	4c ea       	ldi	r20, 0xAC	; 172
    1b04:	55 e2       	ldi	r21, 0x25	; 37
    1b06:	0e 94 cf 01 	call	0x39e	; 0x39e <adc_data>
					break;
    1b0a:	08 95       	ret
					case 'i':
					case 'I':
						adc_data(7, CURRENT_HI_RES, lcd_console_meter_value); //B I-
    1b0c:	87 e0       	ldi	r24, 0x07	; 7
    1b0e:	6a e6       	ldi	r22, 0x6A	; 106
    1b10:	4c ea       	ldi	r20, 0xAC	; 172
    1b12:	55 e2       	ldi	r21, 0x25	; 37
    1b14:	0e 94 cf 01 	call	0x39e	; 0x39e <adc_data>
					break;
    1b18:	08 95       	ret
				break;
			}//side
		break; //Channel B
		
		case CHANNEL_C:
			switch(side){
    1b1a:	64 35       	cpi	r22, 0x54	; 84
    1b1c:	21 f0       	breq	.+8      	; 0x1b26 <lcd_console_meter+0x124>
    1b1e:	65 35       	cpi	r22, 0x55	; 85
    1b20:	09 f0       	breq	.+2      	; 0x1b24 <lcd_console_meter+0x122>
    1b22:	75 c0       	rjmp	.+234    	; 0x1c0e <lcd_console_meter+0x20c>
    1b24:	1d c0       	rjmp	.+58     	; 0x1b60 <lcd_console_meter+0x15e>
				case LCD_CONSOLE_CMD_MAIN_POS:
				switch(lcd_console_value_1){
    1b26:	80 91 ba 26 	lds	r24, 0x26BA
    1b2a:	86 35       	cpi	r24, 0x56	; 86
    1b2c:	59 f0       	breq	.+22     	; 0x1b44 <lcd_console_meter+0x142>
    1b2e:	87 35       	cpi	r24, 0x57	; 87
    1b30:	20 f4       	brcc	.+8      	; 0x1b3a <lcd_console_meter+0x138>
    1b32:	89 34       	cpi	r24, 0x49	; 73
    1b34:	09 f0       	breq	.+2      	; 0x1b38 <lcd_console_meter+0x136>
    1b36:	6b c0       	rjmp	.+214    	; 0x1c0e <lcd_console_meter+0x20c>
    1b38:	0c c0       	rjmp	.+24     	; 0x1b52 <lcd_console_meter+0x150>
    1b3a:	89 36       	cpi	r24, 0x69	; 105
    1b3c:	51 f0       	breq	.+20     	; 0x1b52 <lcd_console_meter+0x150>
    1b3e:	86 37       	cpi	r24, 0x76	; 118
    1b40:	09 f0       	breq	.+2      	; 0x1b44 <lcd_console_meter+0x142>
    1b42:	65 c0       	rjmp	.+202    	; 0x1c0e <lcd_console_meter+0x20c>
					case 'v':
					case 'V':
						adc_data(8, VOLTAGE_POS, lcd_console_meter_value); //C V+
    1b44:	88 e0       	ldi	r24, 0x08	; 8
    1b46:	67 e6       	ldi	r22, 0x67	; 103
    1b48:	4c ea       	ldi	r20, 0xAC	; 172
    1b4a:	55 e2       	ldi	r21, 0x25	; 37
    1b4c:	0e 94 cf 01 	call	0x39e	; 0x39e <adc_data>
					break;
    1b50:	08 95       	ret
					case 'i':
					case 'I':
						adc_data(9, CURRENT_HI_RES, lcd_console_meter_value); //C I+
    1b52:	89 e0       	ldi	r24, 0x09	; 9
    1b54:	6a e6       	ldi	r22, 0x6A	; 106
    1b56:	4c ea       	ldi	r20, 0xAC	; 172
    1b58:	55 e2       	ldi	r21, 0x25	; 37
    1b5a:	0e 94 cf 01 	call	0x39e	; 0x39e <adc_data>
					break;
    1b5e:	08 95       	ret
				}//Pos: V or I
				break;
				case LCD_CONSOLE_CMD_MAIN_NEG:
				switch(lcd_console_value_1){
    1b60:	80 91 ba 26 	lds	r24, 0x26BA
    1b64:	86 35       	cpi	r24, 0x56	; 86
    1b66:	59 f0       	breq	.+22     	; 0x1b7e <lcd_console_meter+0x17c>
    1b68:	87 35       	cpi	r24, 0x57	; 87
    1b6a:	20 f4       	brcc	.+8      	; 0x1b74 <lcd_console_meter+0x172>
    1b6c:	89 34       	cpi	r24, 0x49	; 73
    1b6e:	09 f0       	breq	.+2      	; 0x1b72 <lcd_console_meter+0x170>
    1b70:	4e c0       	rjmp	.+156    	; 0x1c0e <lcd_console_meter+0x20c>
    1b72:	0c c0       	rjmp	.+24     	; 0x1b8c <lcd_console_meter+0x18a>
    1b74:	89 36       	cpi	r24, 0x69	; 105
    1b76:	51 f0       	breq	.+20     	; 0x1b8c <lcd_console_meter+0x18a>
    1b78:	86 37       	cpi	r24, 0x76	; 118
    1b7a:	09 f0       	breq	.+2      	; 0x1b7e <lcd_console_meter+0x17c>
    1b7c:	48 c0       	rjmp	.+144    	; 0x1c0e <lcd_console_meter+0x20c>
					case 'v':
					case 'V':
						adc_data(10, VOLTAGE_NEG, lcd_console_meter_value); //C V-
    1b7e:	8a e0       	ldi	r24, 0x0A	; 10
    1b80:	68 e6       	ldi	r22, 0x68	; 104
    1b82:	4c ea       	ldi	r20, 0xAC	; 172
    1b84:	55 e2       	ldi	r21, 0x25	; 37
    1b86:	0e 94 cf 01 	call	0x39e	; 0x39e <adc_data>
					break;
    1b8a:	08 95       	ret
					case 'i':
					case 'I':
						adc_data(11, CURRENT_HI_RES, lcd_console_meter_value); //C I-
    1b8c:	8b e0       	ldi	r24, 0x0B	; 11
    1b8e:	6a e6       	ldi	r22, 0x6A	; 106
    1b90:	4c ea       	ldi	r20, 0xAC	; 172
    1b92:	55 e2       	ldi	r21, 0x25	; 37
    1b94:	0e 94 cf 01 	call	0x39e	; 0x39e <adc_data>
					break;
    1b98:	08 95       	ret
				break;
			}//side
		break; //Channel C
		
		case CHANNEL_D:
		switch(side){
    1b9a:	64 35       	cpi	r22, 0x54	; 84
    1b9c:	19 f0       	breq	.+6      	; 0x1ba4 <lcd_console_meter+0x1a2>
    1b9e:	65 35       	cpi	r22, 0x55	; 85
    1ba0:	b1 f5       	brne	.+108    	; 0x1c0e <lcd_console_meter+0x20c>
    1ba2:	1b c0       	rjmp	.+54     	; 0x1bda <lcd_console_meter+0x1d8>
			case LCD_CONSOLE_CMD_MAIN_POS:
			switch(lcd_console_value_1){
    1ba4:	80 91 ba 26 	lds	r24, 0x26BA
    1ba8:	86 35       	cpi	r24, 0x56	; 86
    1baa:	49 f0       	breq	.+18     	; 0x1bbe <lcd_console_meter+0x1bc>
    1bac:	87 35       	cpi	r24, 0x57	; 87
    1bae:	18 f4       	brcc	.+6      	; 0x1bb6 <lcd_console_meter+0x1b4>
    1bb0:	89 34       	cpi	r24, 0x49	; 73
    1bb2:	69 f5       	brne	.+90     	; 0x1c0e <lcd_console_meter+0x20c>
    1bb4:	0b c0       	rjmp	.+22     	; 0x1bcc <lcd_console_meter+0x1ca>
    1bb6:	89 36       	cpi	r24, 0x69	; 105
    1bb8:	49 f0       	breq	.+18     	; 0x1bcc <lcd_console_meter+0x1ca>
    1bba:	86 37       	cpi	r24, 0x76	; 118
    1bbc:	41 f5       	brne	.+80     	; 0x1c0e <lcd_console_meter+0x20c>
				case 'v':
				case 'V':
					adc_data(12, VOLTAGE_POS, lcd_console_meter_value); //D V+
    1bbe:	8c e0       	ldi	r24, 0x0C	; 12
    1bc0:	67 e6       	ldi	r22, 0x67	; 103
    1bc2:	4c ea       	ldi	r20, 0xAC	; 172
    1bc4:	55 e2       	ldi	r21, 0x25	; 37
    1bc6:	0e 94 cf 01 	call	0x39e	; 0x39e <adc_data>
				break;
    1bca:	08 95       	ret
				case 'i':
				case 'I':
					adc_data(13, CURRENT_HI_RES, lcd_console_meter_value); //D I+
    1bcc:	8d e0       	ldi	r24, 0x0D	; 13
    1bce:	6a e6       	ldi	r22, 0x6A	; 106
    1bd0:	4c ea       	ldi	r20, 0xAC	; 172
    1bd2:	55 e2       	ldi	r21, 0x25	; 37
    1bd4:	0e 94 cf 01 	call	0x39e	; 0x39e <adc_data>
				break;
    1bd8:	08 95       	ret
			}//Pos: V or I
			break;
			case LCD_CONSOLE_CMD_MAIN_NEG:
			switch(lcd_console_value_1){
    1bda:	80 91 ba 26 	lds	r24, 0x26BA
    1bde:	86 35       	cpi	r24, 0x56	; 86
    1be0:	49 f0       	breq	.+18     	; 0x1bf4 <lcd_console_meter+0x1f2>
    1be2:	87 35       	cpi	r24, 0x57	; 87
    1be4:	18 f4       	brcc	.+6      	; 0x1bec <lcd_console_meter+0x1ea>
    1be6:	89 34       	cpi	r24, 0x49	; 73
    1be8:	91 f4       	brne	.+36     	; 0x1c0e <lcd_console_meter+0x20c>
    1bea:	0b c0       	rjmp	.+22     	; 0x1c02 <lcd_console_meter+0x200>
    1bec:	89 36       	cpi	r24, 0x69	; 105
    1bee:	49 f0       	breq	.+18     	; 0x1c02 <lcd_console_meter+0x200>
    1bf0:	86 37       	cpi	r24, 0x76	; 118
    1bf2:	69 f4       	brne	.+26     	; 0x1c0e <lcd_console_meter+0x20c>
				case 'v':
				case 'V':
					adc_data(14, VOLTAGE_NEG, lcd_console_meter_value); //D V-
    1bf4:	8e e0       	ldi	r24, 0x0E	; 14
    1bf6:	68 e6       	ldi	r22, 0x68	; 104
    1bf8:	4c ea       	ldi	r20, 0xAC	; 172
    1bfa:	55 e2       	ldi	r21, 0x25	; 37
    1bfc:	0e 94 cf 01 	call	0x39e	; 0x39e <adc_data>
				break;
    1c00:	08 95       	ret
				case 'i':
				case 'I':
					adc_data(15, CURRENT_HI_RES, lcd_console_meter_value); //D I-
    1c02:	8f e0       	ldi	r24, 0x0F	; 15
    1c04:	6a e6       	ldi	r22, 0x6A	; 106
    1c06:	4c ea       	ldi	r20, 0xAC	; 172
    1c08:	55 e2       	ldi	r21, 0x25	; 37
    1c0a:	0e 94 cf 01 	call	0x39e	; 0x39e <adc_data>
    1c0e:	08 95       	ret

00001c10 <lcd_console_write>:

//#############################################################
//## SCREENS: CONSOLE
//#############################################################

void lcd_console_write(char* theString){
    1c10:	ef 92       	push	r14
    1c12:	ff 92       	push	r15
    1c14:	0f 93       	push	r16
    1c16:	1f 93       	push	r17
    1c18:	cf 93       	push	r28
    1c1a:	df 93       	push	r29
    1c1c:	8c 01       	movw	r16, r24
	int8_t head = (int8_t)lcd_console_head;
    1c1e:	70 91 be 26 	lds	r23, 0x26BE
    1c22:	67 2f       	mov	r22, r23
	char* line_buffer = lcd_console[lcd_console_head];
    1c24:	27 2f       	mov	r18, r23
    1c26:	30 e0       	ldi	r19, 0x00	; 0
    1c28:	8b e6       	ldi	r24, 0x6B	; 107
    1c2a:	90 e0       	ldi	r25, 0x00	; 0
    1c2c:	28 9f       	mul	r18, r24
    1c2e:	a0 01       	movw	r20, r0
    1c30:	29 9f       	mul	r18, r25
    1c32:	50 0d       	add	r21, r0
    1c34:	38 9f       	mul	r19, r24
    1c36:	50 0d       	add	r21, r0
    1c38:	11 24       	eor	r1, r1
    1c3a:	0f 2e       	mov	r0, r31
    1c3c:	fc e4       	ldi	r31, 0x4C	; 76
    1c3e:	ef 2e       	mov	r14, r31
    1c40:	f2 e2       	ldi	r31, 0x22	; 34
    1c42:	ff 2e       	mov	r15, r31
    1c44:	f0 2d       	mov	r31, r0
    1c46:	e4 0e       	add	r14, r20
    1c48:	f5 1e       	adc	r15, r21
    1c4a:	a1 e3       	ldi	r26, 0x31	; 49
	//Destination
	for(uint8_t i=0;i<LCD_CONSOLE_NUM_ROWS;i++){
		lcd_console[head][3] = 0x31 + i; //id of static control (Row) to write to 
    1c4c:	4c e4       	ldi	r20, 0x4C	; 76
    1c4e:	52 e2       	ldi	r21, 0x22	; 34
    1c50:	eb e6       	ldi	r30, 0x6B	; 107
    1c52:	f0 e0       	ldi	r31, 0x00	; 0
    1c54:	86 2f       	mov	r24, r22
    1c56:	99 27       	eor	r25, r25
    1c58:	87 fd       	sbrc	r24, 7
    1c5a:	90 95       	com	r25
    1c5c:	8e 9f       	mul	r24, r30
    1c5e:	90 01       	movw	r18, r0
    1c60:	8f 9f       	mul	r24, r31
    1c62:	30 0d       	add	r19, r0
    1c64:	9e 9f       	mul	r25, r30
    1c66:	30 0d       	add	r19, r0
    1c68:	11 24       	eor	r1, r1
    1c6a:	24 0f       	add	r18, r20
    1c6c:	35 1f       	adc	r19, r21
    1c6e:	e9 01       	movw	r28, r18
    1c70:	ab 83       	std	Y+3, r26	; 0x03
		head--;
    1c72:	61 50       	subi	r22, 0x01	; 1
		if(head < 0){head = LCD_CONSOLE_NUM_ROWS-1;}
    1c74:	0a f4       	brpl	.+2      	; 0x1c78 <lcd_console_write+0x68>
    1c76:	67 e0       	ldi	r22, 0x07	; 7
    1c78:	af 5f       	subi	r26, 0xFF	; 255

void lcd_console_write(char* theString){
	int8_t head = (int8_t)lcd_console_head;
	char* line_buffer = lcd_console[lcd_console_head];
	//Destination
	for(uint8_t i=0;i<LCD_CONSOLE_NUM_ROWS;i++){
    1c7a:	a9 33       	cpi	r26, 0x39	; 57
    1c7c:	59 f7       	brne	.-42     	; 0x1c54 <lcd_console_write+0x44>
		head--;
		if(head < 0){head = LCD_CONSOLE_NUM_ROWS-1;}
	}	
	//Content
	for (uint8_t i=0; i<LCD_CONSOLE_NUM_COLS; i++){
		if (theString[i] == 0){
    1c7e:	f8 01       	movw	r30, r16
    1c80:	80 81       	ld	r24, Z
    1c82:	88 23       	and	r24, r24
    1c84:	99 f5       	brne	.+102    	; 0x1cec <lcd_console_write+0xdc>
    1c86:	05 c0       	rjmp	.+10     	; 0x1c92 <lcd_console_write+0x82>
    1c88:	94 2f       	mov	r25, r20
    1c8a:	81 91       	ld	r24, Z+
    1c8c:	88 23       	and	r24, r24
    1c8e:	21 f5       	brne	.+72     	; 0x1cd8 <lcd_console_write+0xc8>
    1c90:	03 c0       	rjmp	.+6      	; 0x1c98 <lcd_console_write+0x88>
    1c92:	40 e0       	ldi	r20, 0x00	; 0
    1c94:	50 e0       	ldi	r21, 0x00	; 0
    1c96:	90 e0       	ldi	r25, 0x00	; 0
			line_buffer[6+i] = '"';
    1c98:	f7 01       	movw	r30, r14
    1c9a:	e9 0f       	add	r30, r25
    1c9c:	f1 1d       	adc	r31, r1
    1c9e:	82 e2       	ldi	r24, 0x22	; 34
    1ca0:	86 83       	std	Z+6, r24	; 0x06
			line_buffer[6+i+1] = 0;
    1ca2:	e7 01       	movw	r28, r14
    1ca4:	c4 0f       	add	r28, r20
    1ca6:	d5 1f       	adc	r29, r21
    1ca8:	1f 82       	std	Y+7, r1	; 0x07
			break;
		}
		line_buffer[6+i] = theString[i];
	}
	//Dirty all rows (so all rows get printed to screen)
	for (uint8_t i=0; i<LCD_CONSOLE_NUM_ROWS; i++){lcd_buffer_dirty[i] = true;}	
    1caa:	81 e0       	ldi	r24, 0x01	; 1
    1cac:	80 93 bf 26 	sts	0x26BF, r24
    1cb0:	80 93 c0 26 	sts	0x26C0, r24
    1cb4:	80 93 c1 26 	sts	0x26C1, r24
    1cb8:	80 93 c2 26 	sts	0x26C2, r24
    1cbc:	80 93 c3 26 	sts	0x26C3, r24
    1cc0:	80 93 c4 26 	sts	0x26C4, r24
    1cc4:	80 93 c5 26 	sts	0x26C5, r24
    1cc8:	80 93 c6 26 	sts	0x26C6, r24
	//Move row pointer
	lcd_console_head++;
    1ccc:	7f 5f       	subi	r23, 0xFF	; 255
    1cce:	70 93 be 26 	sts	0x26BE, r23
	if (lcd_console_head >= LCD_CONSOLE_NUM_ROWS){lcd_console_head = 0;}
    1cd2:	78 30       	cpi	r23, 0x08	; 8
    1cd4:	40 f4       	brcc	.+16     	; 0x1ce6 <lcd_console_write+0xd6>
    1cd6:	13 c0       	rjmp	.+38     	; 0x1cfe <lcd_console_write+0xee>
		if (theString[i] == 0){
			line_buffer[6+i] = '"';
			line_buffer[6+i+1] = 0;
			break;
		}
		line_buffer[6+i] = theString[i];
    1cd8:	8d 93       	st	X+, r24
    1cda:	4f 5f       	subi	r20, 0xFF	; 255
    1cdc:	5f 4f       	sbci	r21, 0xFF	; 255
		lcd_console[head][3] = 0x31 + i; //id of static control (Row) to write to 
		head--;
		if(head < 0){head = LCD_CONSOLE_NUM_ROWS-1;}
	}	
	//Content
	for (uint8_t i=0; i<LCD_CONSOLE_NUM_COLS; i++){
    1cde:	44 36       	cpi	r20, 0x64	; 100
    1ce0:	51 05       	cpc	r21, r1
    1ce2:	91 f6       	brne	.-92     	; 0x1c88 <lcd_console_write+0x78>
    1ce4:	e2 cf       	rjmp	.-60     	; 0x1caa <lcd_console_write+0x9a>
	}
	//Dirty all rows (so all rows get printed to screen)
	for (uint8_t i=0; i<LCD_CONSOLE_NUM_ROWS; i++){lcd_buffer_dirty[i] = true;}	
	//Move row pointer
	lcd_console_head++;
	if (lcd_console_head >= LCD_CONSOLE_NUM_ROWS){lcd_console_head = 0;}
    1ce6:	10 92 be 26 	sts	0x26BE, r1
    1cea:	09 c0       	rjmp	.+18     	; 0x1cfe <lcd_console_write+0xee>
		if (theString[i] == 0){
			line_buffer[6+i] = '"';
			line_buffer[6+i+1] = 0;
			break;
		}
		line_buffer[6+i] = theString[i];
    1cec:	e7 01       	movw	r28, r14
    1cee:	8e 83       	std	Y+6, r24	; 0x06

//#############################################################
//## SCREENS: CONSOLE
//#############################################################

void lcd_console_write(char* theString){
    1cf0:	f8 01       	movw	r30, r16
    1cf2:	31 96       	adiw	r30, 0x01	; 1
    1cf4:	d7 01       	movw	r26, r14
    1cf6:	17 96       	adiw	r26, 0x07	; 7
    1cf8:	41 e0       	ldi	r20, 0x01	; 1
    1cfa:	50 e0       	ldi	r21, 0x00	; 0
    1cfc:	c5 cf       	rjmp	.-118    	; 0x1c88 <lcd_console_write+0x78>
	//Dirty all rows (so all rows get printed to screen)
	for (uint8_t i=0; i<LCD_CONSOLE_NUM_ROWS; i++){lcd_buffer_dirty[i] = true;}	
	//Move row pointer
	lcd_console_head++;
	if (lcd_console_head >= LCD_CONSOLE_NUM_ROWS){lcd_console_head = 0;}
}
    1cfe:	df 91       	pop	r29
    1d00:	cf 91       	pop	r28
    1d02:	1f 91       	pop	r17
    1d04:	0f 91       	pop	r16
    1d06:	ff 90       	pop	r15
    1d08:	ef 90       	pop	r14
    1d0a:	08 95       	ret

00001d0c <lcd_console_write_byte>:

/*
	Prints console prompt followed by this byte
*/
void lcd_console_write_byte(uint8_t theByte){
	lcd_console_incoming_byte[2] = theByte;
    1d0c:	80 93 3a 22 	sts	0x223A, r24
	lcd_console_write(lcd_console_incoming_byte);
    1d10:	88 e3       	ldi	r24, 0x38	; 56
    1d12:	92 e2       	ldi	r25, 0x22	; 34
    1d14:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <lcd_console_write>
}	
    1d18:	08 95       	ret

00001d1a <service_lcd_console>:
//#############################################################
//## SERVICE ROUTINE
//#############################################################

//Used to refresh the console
void service_lcd_console(){
    1d1a:	2f 92       	push	r2
    1d1c:	3f 92       	push	r3
    1d1e:	4f 92       	push	r4
    1d20:	5f 92       	push	r5
    1d22:	6f 92       	push	r6
    1d24:	7f 92       	push	r7
    1d26:	8f 92       	push	r8
    1d28:	9f 92       	push	r9
    1d2a:	af 92       	push	r10
    1d2c:	bf 92       	push	r11
    1d2e:	cf 92       	push	r12
    1d30:	df 92       	push	r13
    1d32:	ef 92       	push	r14
    1d34:	ff 92       	push	r15
    1d36:	0f 93       	push	r16
    1d38:	1f 93       	push	r17
    1d3a:	cf 93       	push	r28
    1d3c:	df 93       	push	r29
				case '9':
					STATE_lcd_console = LCD_CONSOLE_STATE_VALUE_N3;
					lcd_console_set_value[1] = incoming;
					break;
				case 0x0D:
					lcd_console_set_value[1] = 0; //terminate string
    1d3e:	0f 2e       	mov	r0, r31
    1d40:	f7 ea       	ldi	r31, 0xA7	; 167
    1d42:	af 2e       	mov	r10, r31
    1d44:	f5 e2       	ldi	r31, 0x25	; 37
    1d46:	bf 2e       	mov	r11, r31
    1d48:	f0 2d       	mov	r31, r0
					lcd_console_pwr_adj_set();
					STATE_lcd_console = LCD_CONSOLE_STATE_IDLE;
    1d4a:	d6 e1       	ldi	r29, 0x16	; 22
					break;
				default:
					//RESET ON ERROR
					lcd_console_write("Bad Command");
    1d4c:	02 e1       	ldi	r16, 0x12	; 18
    1d4e:	12 e2       	ldi	r17, 0x22	; 34
				case '5':
				case '6':
				case '7':
				case '8':
				case '9':
					STATE_lcd_console = LCD_CONSOLE_STATE_VALUE_N3;
    1d50:	0f 2e       	mov	r0, r31
    1d52:	fb e1       	ldi	r31, 0x1B	; 27
    1d54:	cf 2e       	mov	r12, r31
    1d56:	f0 2d       	mov	r31, r0
				case '9':
					STATE_lcd_console = LCD_CONSOLE_STATE_TERMINATOR_N;
					lcd_console_set_value[3] = incoming;
					break;
				case 0x0D:
					lcd_console_set_value[3] = 0; //terminate string
    1d58:	0f 2e       	mov	r0, r31
    1d5a:	f9 ea       	ldi	r31, 0xA9	; 169
    1d5c:	8f 2e       	mov	r8, r31
    1d5e:	f5 e2       	ldi	r31, 0x25	; 37
    1d60:	9f 2e       	mov	r9, r31
    1d62:	f0 2d       	mov	r31, r0
				case '5':
				case '6':
				case '7':
				case '8':
				case '9':
					STATE_lcd_console = LCD_CONSOLE_STATE_TERMINATOR_N;
    1d64:	0f 2e       	mov	r0, r31
    1d66:	fe e1       	ldi	r31, 0x1E	; 30
    1d68:	7f 2e       	mov	r7, r31
    1d6a:	f0 2d       	mov	r31, r0
				case '9':
					STATE_lcd_console = LCD_CONSOLE_STATE_VALUE_N4;
					lcd_console_set_value[2] = incoming;
					break;
				case 0x0D:
					lcd_console_set_value[2] = 0; //terminate string
    1d6c:	0f 2e       	mov	r0, r31
    1d6e:	f8 ea       	ldi	r31, 0xA8	; 168
    1d70:	4f 2e       	mov	r4, r31
    1d72:	f5 e2       	ldi	r31, 0x25	; 37
    1d74:	5f 2e       	mov	r5, r31
    1d76:	f0 2d       	mov	r31, r0
				case '5':
				case '6':
				case '7':
				case '8':
				case '9':
					STATE_lcd_console = LCD_CONSOLE_STATE_VALUE_N4;
    1d78:	0f 2e       	mov	r0, r31
    1d7a:	fc e1       	ldi	r31, 0x1C	; 28
    1d7c:	6f 2e       	mov	r6, r31
    1d7e:	f0 2d       	mov	r31, r0
							case 'i':
							case 'I':
								STATE_lcd_console = LCD_CONSOLE_STATE_IDLE;
								//Report current or voltage on selected channel
								lcd_console_meter(lcd_console_channel, lcd_console_command);
								uart_enqueue_string(&uctrl, lcd_console_meter_value);
    1d80:	0f 2e       	mov	r0, r31
    1d82:	fc ea       	ldi	r31, 0xAC	; 172
    1d84:	2f 2e       	mov	r2, r31
    1d86:	f5 e2       	ldi	r31, 0x25	; 37
    1d88:	3f 2e       	mov	r3, r31
    1d8a:	f0 2d       	mov	r31, r0
			
			case LCD_CONSOLE_STATE_COMMAND:
				switch(incoming){
					case 'z':
					case 'Z':
						STATE_lcd_console = LCD_CONSOLE_STATE_VALUE_1;
    1d8c:	0f 2e       	mov	r0, r31
    1d8e:	f8 e1       	ldi	r31, 0x18	; 24
    1d90:	df 2e       	mov	r13, r31
    1d92:	f0 2d       	mov	r31, r0
					case '6':
					case '7':
					case '8':
					case '9':
						STATE_lcd_console = LCD_CONSOLE_STATE_VALUE_N2;
						lcd_console_set_value[0] = incoming;
    1d94:	0f 2e       	mov	r0, r31
    1d96:	f6 ea       	ldi	r31, 0xA6	; 166
    1d98:	ef 2e       	mov	r14, r31
    1d9a:	f5 e2       	ldi	r31, 0x25	; 37
    1d9c:	ff 2e       	mov	r15, r31
    1d9e:	f0 2d       	mov	r31, r0
//#############################################################

//Used to refresh the console
void service_lcd_console(){
	//Process command buffer
	while (uart_icount(&uctrl) > 0){
    1da0:	6a c1       	rjmp	.+724    	; 0x2076 <service_lcd_console+0x35c>
		uint8_t incoming = uart_idequeue(&uctrl);
    1da2:	80 ea       	ldi	r24, 0xA0	; 160
    1da4:	98 e0       	ldi	r25, 0x08	; 8
    1da6:	0e 94 a7 2d 	call	0x5b4e	; 0x5b4e <uart_idequeue>
    1daa:	c8 2f       	mov	r28, r24
		lcd_console_write_byte(incoming);
    1dac:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <lcd_console_write_byte>
		switch(STATE_lcd_console){
    1db0:	80 91 bb 26 	lds	r24, 0x26BB
    1db4:	8a 31       	cpi	r24, 0x1A	; 26
    1db6:	09 f4       	brne	.+2      	; 0x1dba <service_lcd_console+0xa0>
    1db8:	c2 c0       	rjmp	.+388    	; 0x1f3e <service_lcd_console+0x224>
    1dba:	8b 31       	cpi	r24, 0x1B	; 27
    1dbc:	80 f4       	brcc	.+32     	; 0x1dde <service_lcd_console+0xc4>
    1dbe:	87 31       	cpi	r24, 0x17	; 23
    1dc0:	09 f4       	brne	.+2      	; 0x1dc4 <service_lcd_console+0xaa>
    1dc2:	4f c0       	rjmp	.+158    	; 0x1e62 <service_lcd_console+0x148>
    1dc4:	88 31       	cpi	r24, 0x18	; 24
    1dc6:	20 f4       	brcc	.+8      	; 0x1dd0 <service_lcd_console+0xb6>
    1dc8:	86 31       	cpi	r24, 0x16	; 22
    1dca:	09 f0       	breq	.+2      	; 0x1dce <service_lcd_console+0xb4>
    1dcc:	54 c1       	rjmp	.+680    	; 0x2076 <service_lcd_console+0x35c>
    1dce:	14 c0       	rjmp	.+40     	; 0x1df8 <service_lcd_console+0xde>
    1dd0:	88 31       	cpi	r24, 0x18	; 24
    1dd2:	09 f4       	brne	.+2      	; 0x1dd6 <service_lcd_console+0xbc>
    1dd4:	89 c0       	rjmp	.+274    	; 0x1ee8 <service_lcd_console+0x1ce>
    1dd6:	89 31       	cpi	r24, 0x19	; 25
    1dd8:	09 f0       	breq	.+2      	; 0x1ddc <service_lcd_console+0xc2>
    1dda:	4d c1       	rjmp	.+666    	; 0x2076 <service_lcd_console+0x35c>
    1ddc:	a0 c0       	rjmp	.+320    	; 0x1f1e <service_lcd_console+0x204>
    1dde:	8c 31       	cpi	r24, 0x1C	; 28
    1de0:	09 f4       	brne	.+2      	; 0x1de4 <service_lcd_console+0xca>
    1de2:	e1 c0       	rjmp	.+450    	; 0x1fa6 <service_lcd_console+0x28c>
    1de4:	8c 31       	cpi	r24, 0x1C	; 28
    1de6:	08 f4       	brcc	.+2      	; 0x1dea <service_lcd_console+0xd0>
    1de8:	c4 c0       	rjmp	.+392    	; 0x1f72 <service_lcd_console+0x258>
    1dea:	8d 31       	cpi	r24, 0x1D	; 29
    1dec:	09 f4       	brne	.+2      	; 0x1df0 <service_lcd_console+0xd6>
    1dee:	00 c1       	rjmp	.+512    	; 0x1ff0 <service_lcd_console+0x2d6>
    1df0:	8e 31       	cpi	r24, 0x1E	; 30
    1df2:	09 f0       	breq	.+2      	; 0x1df6 <service_lcd_console+0xdc>
    1df4:	40 c1       	rjmp	.+640    	; 0x2076 <service_lcd_console+0x35c>
    1df6:	f1 c0       	rjmp	.+482    	; 0x1fda <service_lcd_console+0x2c0>
			
			case LCD_CONSOLE_STATE_IDLE:
				switch(incoming){
    1df8:	c4 34       	cpi	r28, 0x44	; 68
    1dfa:	61 f1       	breq	.+88     	; 0x1e54 <service_lcd_console+0x13a>
    1dfc:	c5 34       	cpi	r28, 0x45	; 69
    1dfe:	40 f4       	brcc	.+16     	; 0x1e10 <service_lcd_console+0xf6>
    1e00:	c2 34       	cpi	r28, 0x42	; 66
    1e02:	d1 f0       	breq	.+52     	; 0x1e38 <service_lcd_console+0x11e>
    1e04:	c3 34       	cpi	r28, 0x43	; 67
    1e06:	f8 f4       	brcc	.+62     	; 0x1e46 <service_lcd_console+0x12c>
    1e08:	c1 34       	cpi	r28, 0x41	; 65
    1e0a:	09 f0       	breq	.+2      	; 0x1e0e <service_lcd_console+0xf4>
    1e0c:	34 c1       	rjmp	.+616    	; 0x2076 <service_lcd_console+0x35c>
    1e0e:	0e c0       	rjmp	.+28     	; 0x1e2c <service_lcd_console+0x112>
    1e10:	c2 36       	cpi	r28, 0x62	; 98
    1e12:	91 f0       	breq	.+36     	; 0x1e38 <service_lcd_console+0x11e>
    1e14:	c3 36       	cpi	r28, 0x63	; 99
    1e16:	20 f4       	brcc	.+8      	; 0x1e20 <service_lcd_console+0x106>
    1e18:	c1 36       	cpi	r28, 0x61	; 97
    1e1a:	09 f0       	breq	.+2      	; 0x1e1e <service_lcd_console+0x104>
    1e1c:	2c c1       	rjmp	.+600    	; 0x2076 <service_lcd_console+0x35c>
    1e1e:	06 c0       	rjmp	.+12     	; 0x1e2c <service_lcd_console+0x112>
    1e20:	c3 36       	cpi	r28, 0x63	; 99
    1e22:	89 f0       	breq	.+34     	; 0x1e46 <service_lcd_console+0x12c>
    1e24:	c4 36       	cpi	r28, 0x64	; 100
    1e26:	09 f0       	breq	.+2      	; 0x1e2a <service_lcd_console+0x110>
    1e28:	26 c1       	rjmp	.+588    	; 0x2076 <service_lcd_console+0x35c>
    1e2a:	14 c0       	rjmp	.+40     	; 0x1e54 <service_lcd_console+0x13a>
					case 'a':
					case 'A':
						STATE_lcd_console = LCD_CONSOLE_STATE_COMMAND;
    1e2c:	87 e1       	ldi	r24, 0x17	; 23
    1e2e:	80 93 bb 26 	sts	0x26BB, r24
						lcd_console_channel = CHANNEL_A;
    1e32:	10 92 b8 25 	sts	0x25B8, r1
						break;
    1e36:	1f c1       	rjmp	.+574    	; 0x2076 <service_lcd_console+0x35c>
					case 'b':
					case 'B':
						STATE_lcd_console = LCD_CONSOLE_STATE_COMMAND;
    1e38:	87 e1       	ldi	r24, 0x17	; 23
    1e3a:	80 93 bb 26 	sts	0x26BB, r24
						lcd_console_channel = CHANNEL_B;
    1e3e:	81 e0       	ldi	r24, 0x01	; 1
    1e40:	80 93 b8 25 	sts	0x25B8, r24
						break;
    1e44:	18 c1       	rjmp	.+560    	; 0x2076 <service_lcd_console+0x35c>
					case 'c':
					case 'C':
						STATE_lcd_console = LCD_CONSOLE_STATE_COMMAND;
    1e46:	87 e1       	ldi	r24, 0x17	; 23
    1e48:	80 93 bb 26 	sts	0x26BB, r24
						lcd_console_channel = CHANNEL_C;
    1e4c:	82 e0       	ldi	r24, 0x02	; 2
    1e4e:	80 93 b8 25 	sts	0x25B8, r24
						break;
    1e52:	11 c1       	rjmp	.+546    	; 0x2076 <service_lcd_console+0x35c>
					case 'd':
					case 'D':
						STATE_lcd_console = LCD_CONSOLE_STATE_COMMAND;
    1e54:	87 e1       	ldi	r24, 0x17	; 23
    1e56:	80 93 bb 26 	sts	0x26BB, r24
						lcd_console_channel = CHANNEL_D;
    1e5a:	83 e0       	ldi	r24, 0x03	; 3
    1e5c:	80 93 b8 25 	sts	0x25B8, r24
					break;
    1e60:	0a c1       	rjmp	.+532    	; 0x2076 <service_lcd_console+0x35c>
				}
			break;
			
			case LCD_CONSOLE_STATE_COMMAND:
				switch(incoming){
    1e62:	ca 35       	cpi	r28, 0x5A	; 90
    1e64:	d9 f0       	breq	.+54     	; 0x1e9c <service_lcd_console+0x182>
    1e66:	cb 35       	cpi	r28, 0x5B	; 91
    1e68:	60 f4       	brcc	.+24     	; 0x1e82 <service_lcd_console+0x168>
    1e6a:	ce 34       	cpi	r28, 0x4E	; 78
    1e6c:	19 f1       	breq	.+70     	; 0x1eb4 <service_lcd_console+0x19a>
    1e6e:	cf 34       	cpi	r28, 0x4F	; 79
    1e70:	18 f4       	brcc	.+6      	; 0x1e78 <service_lcd_console+0x15e>
    1e72:	cd 34       	cpi	r28, 0x4D	; 77
    1e74:	99 f5       	brne	.+102    	; 0x1edc <service_lcd_console+0x1c2>
    1e76:	24 c0       	rjmp	.+72     	; 0x1ec0 <service_lcd_console+0x1a6>
    1e78:	c0 35       	cpi	r28, 0x50	; 80
    1e7a:	b1 f0       	breq	.+44     	; 0x1ea8 <service_lcd_console+0x18e>
    1e7c:	c3 35       	cpi	r28, 0x53	; 83
    1e7e:	71 f5       	brne	.+92     	; 0x1edc <service_lcd_console+0x1c2>
    1e80:	26 c0       	rjmp	.+76     	; 0x1ece <service_lcd_console+0x1b4>
    1e82:	c0 37       	cpi	r28, 0x70	; 112
    1e84:	89 f0       	breq	.+34     	; 0x1ea8 <service_lcd_console+0x18e>
    1e86:	c1 37       	cpi	r28, 0x71	; 113
    1e88:	28 f4       	brcc	.+10     	; 0x1e94 <service_lcd_console+0x17a>
    1e8a:	cd 36       	cpi	r28, 0x6D	; 109
    1e8c:	c9 f0       	breq	.+50     	; 0x1ec0 <service_lcd_console+0x1a6>
    1e8e:	ce 36       	cpi	r28, 0x6E	; 110
    1e90:	29 f5       	brne	.+74     	; 0x1edc <service_lcd_console+0x1c2>
    1e92:	10 c0       	rjmp	.+32     	; 0x1eb4 <service_lcd_console+0x19a>
    1e94:	c3 37       	cpi	r28, 0x73	; 115
    1e96:	d9 f0       	breq	.+54     	; 0x1ece <service_lcd_console+0x1b4>
    1e98:	ca 37       	cpi	r28, 0x7A	; 122
    1e9a:	01 f5       	brne	.+64     	; 0x1edc <service_lcd_console+0x1c2>
					case 'z':
					case 'Z':
						STATE_lcd_console = LCD_CONSOLE_STATE_VALUE_1;
    1e9c:	d0 92 bb 26 	sts	0x26BB, r13
						lcd_console_command = LCD_CONSOLE_CMD_RELAY;
    1ea0:	83 e5       	ldi	r24, 0x53	; 83
    1ea2:	80 93 bd 26 	sts	0x26BD, r24
						break;
    1ea6:	e7 c0       	rjmp	.+462    	; 0x2076 <service_lcd_console+0x35c>
					case 'p':
					case 'P':
						STATE_lcd_console = LCD_CONSOLE_STATE_VALUE_1;
    1ea8:	d0 92 bb 26 	sts	0x26BB, r13
						lcd_console_command = LCD_CONSOLE_CMD_MAIN_POS;
    1eac:	84 e5       	ldi	r24, 0x54	; 84
    1eae:	80 93 bd 26 	sts	0x26BD, r24
						break;
    1eb2:	e1 c0       	rjmp	.+450    	; 0x2076 <service_lcd_console+0x35c>
					case 'n':
					case 'N':
						STATE_lcd_console = LCD_CONSOLE_STATE_VALUE_1;
    1eb4:	d0 92 bb 26 	sts	0x26BB, r13
						lcd_console_command = LCD_CONSOLE_CMD_MAIN_NEG;
    1eb8:	85 e5       	ldi	r24, 0x55	; 85
    1eba:	80 93 bd 26 	sts	0x26BD, r24
						break;
    1ebe:	db c0       	rjmp	.+438    	; 0x2076 <service_lcd_console+0x35c>
					case 'm':
					case 'M':
						STATE_lcd_console = LCD_CONSOLE_STATE_VALUE_N;
    1ec0:	89 e1       	ldi	r24, 0x19	; 25
    1ec2:	80 93 bb 26 	sts	0x26BB, r24
						lcd_console_command = LCD_CONSOLE_CMD_ADJUST_MAX;
    1ec6:	86 e5       	ldi	r24, 0x56	; 86
    1ec8:	80 93 bd 26 	sts	0x26BD, r24
						break;
    1ecc:	d4 c0       	rjmp	.+424    	; 0x2076 <service_lcd_console+0x35c>
					case 's':
					case 'S':
						STATE_lcd_console = LCD_CONSOLE_STATE_VALUE_N;
    1ece:	89 e1       	ldi	r24, 0x19	; 25
    1ed0:	80 93 bb 26 	sts	0x26BB, r24
						lcd_console_command = LCD_CONSOLE_CMD_ADJUST_SET;
    1ed4:	87 e5       	ldi	r24, 0x57	; 87
    1ed6:	80 93 bd 26 	sts	0x26BD, r24
						break;
    1eda:	cd c0       	rjmp	.+410    	; 0x2076 <service_lcd_console+0x35c>
					default:
						//RESET ON ERROR
						lcd_console_write("Bad Command");
    1edc:	c8 01       	movw	r24, r16
    1ede:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <lcd_console_write>
						STATE_lcd_console = LCD_CONSOLE_STATE_IDLE;
    1ee2:	d0 93 bb 26 	sts	0x26BB, r29
    1ee6:	c7 c0       	rjmp	.+398    	; 0x2076 <service_lcd_console+0x35c>
				}
			break;
			
			case LCD_CONSOLE_STATE_VALUE_1:
				switch(incoming){
    1ee8:	c9 34       	cpi	r28, 0x49	; 73
    1eea:	69 f0       	breq	.+26     	; 0x1f06 <service_lcd_console+0x1ec>
    1eec:	ca 34       	cpi	r28, 0x4A	; 74
    1eee:	28 f4       	brcc	.+10     	; 0x1efa <service_lcd_console+0x1e0>
    1ef0:	8c 2f       	mov	r24, r28
    1ef2:	80 53       	subi	r24, 0x30	; 48
    1ef4:	82 30       	cpi	r24, 0x02	; 2
    1ef6:	68 f4       	brcc	.+26     	; 0x1f12 <service_lcd_console+0x1f8>
    1ef8:	06 c0       	rjmp	.+12     	; 0x1f06 <service_lcd_console+0x1ec>
    1efa:	c9 36       	cpi	r28, 0x69	; 105
    1efc:	21 f0       	breq	.+8      	; 0x1f06 <service_lcd_console+0x1ec>
    1efe:	c6 37       	cpi	r28, 0x76	; 118
    1f00:	11 f0       	breq	.+4      	; 0x1f06 <service_lcd_console+0x1ec>
    1f02:	c6 35       	cpi	r28, 0x56	; 86
    1f04:	31 f4       	brne	.+12     	; 0x1f12 <service_lcd_console+0x1f8>
					case '0':
					case 'v':
					case 'V':
					case 'i':
					case 'I':
						STATE_lcd_console = LCD_CONSOLE_STATE_TERMINATOR_1;
    1f06:	8d e1       	ldi	r24, 0x1D	; 29
    1f08:	80 93 bb 26 	sts	0x26BB, r24
						lcd_console_value_1 = incoming;
    1f0c:	c0 93 ba 26 	sts	0x26BA, r28
						break;
    1f10:	b2 c0       	rjmp	.+356    	; 0x2076 <service_lcd_console+0x35c>
					default:
						//RESET ON ERROR
						lcd_console_write("Bad Command");
    1f12:	c8 01       	movw	r24, r16
    1f14:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <lcd_console_write>
						STATE_lcd_console = LCD_CONSOLE_STATE_IDLE;
    1f18:	d0 93 bb 26 	sts	0x26BB, r29
    1f1c:	ac c0       	rjmp	.+344    	; 0x2076 <service_lcd_console+0x35c>
				}
			break;
			
			case LCD_CONSOLE_STATE_VALUE_N:
				switch(incoming){
    1f1e:	8c 2f       	mov	r24, r28
    1f20:	80 53       	subi	r24, 0x30	; 48
    1f22:	8a 30       	cpi	r24, 0x0A	; 10
    1f24:	30 f4       	brcc	.+12     	; 0x1f32 <service_lcd_console+0x218>
					case '5':
					case '6':
					case '7':
					case '8':
					case '9':
						STATE_lcd_console = LCD_CONSOLE_STATE_VALUE_N2;
    1f26:	8a e1       	ldi	r24, 0x1A	; 26
    1f28:	80 93 bb 26 	sts	0x26BB, r24
						lcd_console_set_value[0] = incoming;
    1f2c:	f7 01       	movw	r30, r14
    1f2e:	c0 83       	st	Z, r28
						break;
    1f30:	a2 c0       	rjmp	.+324    	; 0x2076 <service_lcd_console+0x35c>
					default:
						//RESET ON ERROR
						lcd_console_write("Bad Command");
    1f32:	c8 01       	movw	r24, r16
    1f34:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <lcd_console_write>
						STATE_lcd_console = LCD_CONSOLE_STATE_IDLE;
    1f38:	d0 93 bb 26 	sts	0x26BB, r29
    1f3c:	9c c0       	rjmp	.+312    	; 0x2076 <service_lcd_console+0x35c>
				}
			break;
			
			case LCD_CONSOLE_STATE_VALUE_N2:
			switch(incoming){
    1f3e:	cd 30       	cpi	r28, 0x0D	; 13
    1f40:	59 f0       	breq	.+22     	; 0x1f58 <service_lcd_console+0x23e>
    1f42:	cd 30       	cpi	r28, 0x0D	; 13
    1f44:	80 f0       	brcs	.+32     	; 0x1f66 <service_lcd_console+0x24c>
    1f46:	8c 2f       	mov	r24, r28
    1f48:	80 53       	subi	r24, 0x30	; 48
    1f4a:	8a 30       	cpi	r24, 0x0A	; 10
    1f4c:	60 f4       	brcc	.+24     	; 0x1f66 <service_lcd_console+0x24c>
				case '5':
				case '6':
				case '7':
				case '8':
				case '9':
					STATE_lcd_console = LCD_CONSOLE_STATE_VALUE_N3;
    1f4e:	c0 92 bb 26 	sts	0x26BB, r12
					lcd_console_set_value[1] = incoming;
    1f52:	f5 01       	movw	r30, r10
    1f54:	c0 83       	st	Z, r28
					break;
    1f56:	8f c0       	rjmp	.+286    	; 0x2076 <service_lcd_console+0x35c>
				case 0x0D:
					lcd_console_set_value[1] = 0; //terminate string
    1f58:	f5 01       	movw	r30, r10
    1f5a:	10 82       	st	Z, r1
					lcd_console_pwr_adj_set();
    1f5c:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <lcd_console_pwr_adj_set>
					STATE_lcd_console = LCD_CONSOLE_STATE_IDLE;
    1f60:	d0 93 bb 26 	sts	0x26BB, r29
					break;
    1f64:	88 c0       	rjmp	.+272    	; 0x2076 <service_lcd_console+0x35c>
				default:
					//RESET ON ERROR
					lcd_console_write("Bad Command");
    1f66:	c8 01       	movw	r24, r16
    1f68:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <lcd_console_write>
					STATE_lcd_console = LCD_CONSOLE_STATE_IDLE;
    1f6c:	d0 93 bb 26 	sts	0x26BB, r29
    1f70:	82 c0       	rjmp	.+260    	; 0x2076 <service_lcd_console+0x35c>
			}
			break;
			
			case LCD_CONSOLE_STATE_VALUE_N3:
			switch(incoming){
    1f72:	cd 30       	cpi	r28, 0x0D	; 13
    1f74:	59 f0       	breq	.+22     	; 0x1f8c <service_lcd_console+0x272>
    1f76:	cd 30       	cpi	r28, 0x0D	; 13
    1f78:	80 f0       	brcs	.+32     	; 0x1f9a <service_lcd_console+0x280>
    1f7a:	8c 2f       	mov	r24, r28
    1f7c:	80 53       	subi	r24, 0x30	; 48
    1f7e:	8a 30       	cpi	r24, 0x0A	; 10
    1f80:	60 f4       	brcc	.+24     	; 0x1f9a <service_lcd_console+0x280>
				case '5':
				case '6':
				case '7':
				case '8':
				case '9':
					STATE_lcd_console = LCD_CONSOLE_STATE_VALUE_N4;
    1f82:	60 92 bb 26 	sts	0x26BB, r6
					lcd_console_set_value[2] = incoming;
    1f86:	f2 01       	movw	r30, r4
    1f88:	c0 83       	st	Z, r28
					break;
    1f8a:	75 c0       	rjmp	.+234    	; 0x2076 <service_lcd_console+0x35c>
				case 0x0D:
					lcd_console_set_value[2] = 0; //terminate string
    1f8c:	f2 01       	movw	r30, r4
    1f8e:	10 82       	st	Z, r1
					lcd_console_pwr_adj_set();
    1f90:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <lcd_console_pwr_adj_set>
					STATE_lcd_console = LCD_CONSOLE_STATE_IDLE;
    1f94:	d0 93 bb 26 	sts	0x26BB, r29
					break;
    1f98:	6e c0       	rjmp	.+220    	; 0x2076 <service_lcd_console+0x35c>
				default:
					//RESET ON ERROR
					lcd_console_write("Bad Command");
    1f9a:	c8 01       	movw	r24, r16
    1f9c:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <lcd_console_write>
					STATE_lcd_console = LCD_CONSOLE_STATE_IDLE;
    1fa0:	d0 93 bb 26 	sts	0x26BB, r29
    1fa4:	68 c0       	rjmp	.+208    	; 0x2076 <service_lcd_console+0x35c>
			}
			break;
			
			case LCD_CONSOLE_STATE_VALUE_N4:
			switch(incoming){
    1fa6:	cd 30       	cpi	r28, 0x0D	; 13
    1fa8:	59 f0       	breq	.+22     	; 0x1fc0 <service_lcd_console+0x2a6>
    1faa:	cd 30       	cpi	r28, 0x0D	; 13
    1fac:	80 f0       	brcs	.+32     	; 0x1fce <service_lcd_console+0x2b4>
    1fae:	8c 2f       	mov	r24, r28
    1fb0:	80 53       	subi	r24, 0x30	; 48
    1fb2:	8a 30       	cpi	r24, 0x0A	; 10
    1fb4:	60 f4       	brcc	.+24     	; 0x1fce <service_lcd_console+0x2b4>
				case '5':
				case '6':
				case '7':
				case '8':
				case '9':
					STATE_lcd_console = LCD_CONSOLE_STATE_TERMINATOR_N;
    1fb6:	70 92 bb 26 	sts	0x26BB, r7
					lcd_console_set_value[3] = incoming;
    1fba:	f4 01       	movw	r30, r8
    1fbc:	c0 83       	st	Z, r28
					break;
    1fbe:	5b c0       	rjmp	.+182    	; 0x2076 <service_lcd_console+0x35c>
				case 0x0D:
					lcd_console_set_value[3] = 0; //terminate string
    1fc0:	f4 01       	movw	r30, r8
    1fc2:	10 82       	st	Z, r1
					lcd_console_pwr_adj_set();
    1fc4:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <lcd_console_pwr_adj_set>
					STATE_lcd_console = LCD_CONSOLE_STATE_IDLE;
    1fc8:	d0 93 bb 26 	sts	0x26BB, r29
				break;
    1fcc:	54 c0       	rjmp	.+168    	; 0x2076 <service_lcd_console+0x35c>
				default:
					//RESET ON ERROR
					lcd_console_write("Bad Command");
    1fce:	c8 01       	movw	r24, r16
    1fd0:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <lcd_console_write>
					STATE_lcd_console = LCD_CONSOLE_STATE_IDLE;
    1fd4:	d0 93 bb 26 	sts	0x26BB, r29
    1fd8:	4e c0       	rjmp	.+156    	; 0x2076 <service_lcd_console+0x35c>
			}
			break;
			
			case LCD_CONSOLE_STATE_TERMINATOR_N:
				switch(incoming){
    1fda:	cd 30       	cpi	r28, 0x0D	; 13
    1fdc:	19 f4       	brne	.+6      	; 0x1fe4 <service_lcd_console+0x2ca>
					case 0x0D:
						lcd_console_pwr_adj_set();
    1fde:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <lcd_console_pwr_adj_set>
						break;
    1fe2:	03 c0       	rjmp	.+6      	; 0x1fea <service_lcd_console+0x2d0>
					default:
						//RESET ON ERROR
						lcd_console_write("Bad Command");
    1fe4:	c8 01       	movw	r24, r16
    1fe6:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <lcd_console_write>
				}
				STATE_lcd_console = LCD_CONSOLE_STATE_IDLE;
    1fea:	d0 93 bb 26 	sts	0x26BB, r29
			break;
    1fee:	43 c0       	rjmp	.+134    	; 0x2076 <service_lcd_console+0x35c>
			
			case LCD_CONSOLE_STATE_TERMINATOR_1:
				switch(incoming){
    1ff0:	cd 30       	cpi	r28, 0x0D	; 13
    1ff2:	e1 f5       	brne	.+120    	; 0x206c <service_lcd_console+0x352>
					case 0x0D:
						switch(lcd_console_value_1){
    1ff4:	80 91 ba 26 	lds	r24, 0x26BA
    1ff8:	89 34       	cpi	r24, 0x49	; 73
    1ffa:	21 f1       	breq	.+72     	; 0x2044 <service_lcd_console+0x32a>
    1ffc:	8a 34       	cpi	r24, 0x4A	; 74
    1ffe:	28 f4       	brcc	.+10     	; 0x200a <service_lcd_console+0x2f0>
    2000:	80 33       	cpi	r24, 0x30	; 48
    2002:	a9 f0       	breq	.+42     	; 0x202e <service_lcd_console+0x314>
    2004:	81 33       	cpi	r24, 0x31	; 49
    2006:	61 f5       	brne	.+88     	; 0x2060 <service_lcd_console+0x346>
    2008:	07 c0       	rjmp	.+14     	; 0x2018 <service_lcd_console+0x2fe>
    200a:	89 36       	cpi	r24, 0x69	; 105
    200c:	d9 f0       	breq	.+54     	; 0x2044 <service_lcd_console+0x32a>
    200e:	86 37       	cpi	r24, 0x76	; 118
    2010:	c9 f0       	breq	.+50     	; 0x2044 <service_lcd_console+0x32a>
    2012:	86 35       	cpi	r24, 0x56	; 86
    2014:	29 f5       	brne	.+74     	; 0x2060 <service_lcd_console+0x346>
    2016:	16 c0       	rjmp	.+44     	; 0x2044 <service_lcd_console+0x32a>
							case '1':
								STATE_lcd_console = LCD_CONSOLE_STATE_IDLE;
    2018:	d0 93 bb 26 	sts	0x26BB, r29
								brain_power_on(lcd_console_channel);
    201c:	80 91 b8 25 	lds	r24, 0x25B8
    2020:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <brain_power_on>
								lcd_console_write("POWER ON");
    2024:	8e e1       	ldi	r24, 0x1E	; 30
    2026:	92 e2       	ldi	r25, 0x22	; 34
    2028:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <lcd_console_write>
								break;
    202c:	24 c0       	rjmp	.+72     	; 0x2076 <service_lcd_console+0x35c>
							case '0':
								STATE_lcd_console = LCD_CONSOLE_STATE_IDLE;
    202e:	d0 93 bb 26 	sts	0x26BB, r29
								brain_power_off(lcd_console_channel);
    2032:	80 91 b8 25 	lds	r24, 0x25B8
    2036:	0e 94 09 06 	call	0xc12	; 0xc12 <brain_power_off>
								lcd_console_write("POWER OFF");
    203a:	87 e2       	ldi	r24, 0x27	; 39
    203c:	92 e2       	ldi	r25, 0x22	; 34
    203e:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <lcd_console_write>
								break;
    2042:	19 c0       	rjmp	.+50     	; 0x2076 <service_lcd_console+0x35c>
							case 'v':
							case 'V':
							case 'i':
							case 'I':
								STATE_lcd_console = LCD_CONSOLE_STATE_IDLE;
    2044:	d0 93 bb 26 	sts	0x26BB, r29
								//Report current or voltage on selected channel
								lcd_console_meter(lcd_console_channel, lcd_console_command);
    2048:	80 91 b8 25 	lds	r24, 0x25B8
    204c:	60 91 bd 26 	lds	r22, 0x26BD
    2050:	0e 94 01 0d 	call	0x1a02	; 0x1a02 <lcd_console_meter>
								uart_enqueue_string(&uctrl, lcd_console_meter_value);
    2054:	80 ea       	ldi	r24, 0xA0	; 160
    2056:	98 e0       	ldi	r25, 0x08	; 8
    2058:	b1 01       	movw	r22, r2
    205a:	0e 94 f4 25 	call	0x4be8	; 0x4be8 <uart_enqueue_string>
								break;
    205e:	0b c0       	rjmp	.+22     	; 0x2076 <service_lcd_console+0x35c>
							default:
								//RESET ON ERROR
								lcd_console_write("Bad Command");
    2060:	c8 01       	movw	r24, r16
    2062:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <lcd_console_write>
								STATE_lcd_console = LCD_CONSOLE_STATE_IDLE;
    2066:	d0 93 bb 26 	sts	0x26BB, r29
    206a:	05 c0       	rjmp	.+10     	; 0x2076 <service_lcd_console+0x35c>
						}
						break;
					default:
						//RESET ON ERROR
						lcd_console_write("Bad Command");
    206c:	c8 01       	movw	r24, r16
    206e:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <lcd_console_write>
						STATE_lcd_console = LCD_CONSOLE_STATE_IDLE;
    2072:	d0 93 bb 26 	sts	0x26BB, r29
//#############################################################

//Used to refresh the console
void service_lcd_console(){
	//Process command buffer
	while (uart_icount(&uctrl) > 0){
    2076:	80 ea       	ldi	r24, 0xA0	; 160
    2078:	98 e0       	ldi	r25, 0x08	; 8
    207a:	0e 94 27 2d 	call	0x5a4e	; 0x5a4e <uart_icount>
    207e:	00 97       	sbiw	r24, 0x00	; 0
    2080:	09 f0       	breq	.+2      	; 0x2084 <service_lcd_console+0x36a>
    2082:	8f ce       	rjmp	.-738    	; 0x1da2 <service_lcd_console+0x88>
	}
	
	//Update console display if in CONSOLE MENU
	static uint8_t next_row_to_output = 0;
	uint8_t num_rows_output = 0;
	if (STATE_menu != MENU_CONSOLE){return;}
    2084:	80 91 a5 25 	lds	r24, 0x25A5
    2088:	82 32       	cpi	r24, 0x22	; 34
    208a:	b1 f5       	brne	.+108    	; 0x20f8 <service_lcd_console+0x3de>
    208c:	c9 e0       	ldi	r28, 0x09	; 9
	while((uart_count(&ulcd) < 512)&&(num_rows_output<LCD_CONSOLE_NUM_ROWS)){
		if(lcd_buffer_dirty[next_row_to_output]){
    208e:	0f eb       	ldi	r16, 0xBF	; 191
    2090:	16 e2       	ldi	r17, 0x26	; 38
			lcd_command(lcd_console[next_row_to_output]);
    2092:	0f 2e       	mov	r0, r31
    2094:	fb e6       	ldi	r31, 0x6B	; 107
    2096:	ef 2e       	mov	r14, r31
    2098:	ff 24       	eor	r15, r15
    209a:	f0 2d       	mov	r31, r0
    209c:	23 c0       	rjmp	.+70     	; 0x20e4 <service_lcd_console+0x3ca>
	//Update console display if in CONSOLE MENU
	static uint8_t next_row_to_output = 0;
	uint8_t num_rows_output = 0;
	if (STATE_menu != MENU_CONSOLE){return;}
	while((uart_count(&ulcd) < 512)&&(num_rows_output<LCD_CONSOLE_NUM_ROWS)){
		if(lcd_buffer_dirty[next_row_to_output]){
    209e:	20 91 37 22 	lds	r18, 0x2237
    20a2:	f8 01       	movw	r30, r16
    20a4:	e2 0f       	add	r30, r18
    20a6:	f1 1d       	adc	r31, r1
    20a8:	80 81       	ld	r24, Z
    20aa:	88 23       	and	r24, r24
    20ac:	91 f0       	breq	.+36     	; 0x20d2 <service_lcd_console+0x3b8>
			lcd_command(lcd_console[next_row_to_output]);
    20ae:	30 e0       	ldi	r19, 0x00	; 0
    20b0:	2e 9d       	mul	r18, r14
    20b2:	c0 01       	movw	r24, r0
    20b4:	2f 9d       	mul	r18, r15
    20b6:	90 0d       	add	r25, r0
    20b8:	3e 9d       	mul	r19, r14
    20ba:	90 0d       	add	r25, r0
    20bc:	11 24       	eor	r1, r1
    20be:	84 5b       	subi	r24, 0xB4	; 180
    20c0:	9d 4d       	sbci	r25, 0xDD	; 221
    20c2:	0e 94 86 0b 	call	0x170c	; 0x170c <lcd_command>
			lcd_buffer_dirty[next_row_to_output] = false;
    20c6:	80 91 37 22 	lds	r24, 0x2237
    20ca:	f8 01       	movw	r30, r16
    20cc:	e8 0f       	add	r30, r24
    20ce:	f1 1d       	adc	r31, r1
    20d0:	10 82       	st	Z, r1
		}
		next_row_to_output++; num_rows_output++;
    20d2:	80 91 37 22 	lds	r24, 0x2237
    20d6:	8f 5f       	subi	r24, 0xFF	; 255
    20d8:	80 93 37 22 	sts	0x2237, r24
		if(next_row_to_output>=LCD_CONSOLE_NUM_ROWS){next_row_to_output=0;}
    20dc:	88 30       	cpi	r24, 0x08	; 8
    20de:	10 f0       	brcs	.+4      	; 0x20e4 <service_lcd_console+0x3ca>
    20e0:	10 92 37 22 	sts	0x2237, r1
	
	//Update console display if in CONSOLE MENU
	static uint8_t next_row_to_output = 0;
	uint8_t num_rows_output = 0;
	if (STATE_menu != MENU_CONSOLE){return;}
	while((uart_count(&ulcd) < 512)&&(num_rows_output<LCD_CONSOLE_NUM_ROWS)){
    20e4:	80 eb       	ldi	r24, 0xB0	; 176
    20e6:	9b e0       	ldi	r25, 0x0B	; 11
    20e8:	0e 94 ad 25 	call	0x4b5a	; 0x4b5a <uart_count>
    20ec:	f2 e0       	ldi	r31, 0x02	; 2
    20ee:	80 30       	cpi	r24, 0x00	; 0
    20f0:	9f 07       	cpc	r25, r31
    20f2:	10 f4       	brcc	.+4      	; 0x20f8 <service_lcd_console+0x3de>
    20f4:	c1 50       	subi	r28, 0x01	; 1
    20f6:	99 f6       	brne	.-90     	; 0x209e <service_lcd_console+0x384>
			lcd_buffer_dirty[next_row_to_output] = false;
		}
		next_row_to_output++; num_rows_output++;
		if(next_row_to_output>=LCD_CONSOLE_NUM_ROWS){next_row_to_output=0;}
	}
}
    20f8:	df 91       	pop	r29
    20fa:	cf 91       	pop	r28
    20fc:	1f 91       	pop	r17
    20fe:	0f 91       	pop	r16
    2100:	ff 90       	pop	r15
    2102:	ef 90       	pop	r14
    2104:	df 90       	pop	r13
    2106:	cf 90       	pop	r12
    2108:	bf 90       	pop	r11
    210a:	af 90       	pop	r10
    210c:	9f 90       	pop	r9
    210e:	8f 90       	pop	r8
    2110:	7f 90       	pop	r7
    2112:	6f 90       	pop	r6
    2114:	5f 90       	pop	r5
    2116:	4f 90       	pop	r4
    2118:	3f 90       	pop	r3
    211a:	2f 90       	pop	r2
    211c:	08 95       	ret

0000211e <init_lcd_touch>:
//#############################################################
//## INITIALIZATION ROUTINE
//#############################################################

void init_lcd_touch(){
	lcd_last_touch_command = LCD_TOUCH_NONE;
    211e:	85 e1       	ldi	r24, 0x15	; 21
    2120:	80 93 d0 26 	sts	0x26D0, r24
	lcd_touch_buffer[LCD_TOUCH_BUFFER_LEN] = 0; //string termination to help with debug printing of the buffer	
    2124:	10 92 dd 26 	sts	0x26DD, r1
}
    2128:	08 95       	ret

0000212a <lcd_get_touch>:
//#############################################################

/// Returns the code for the last thing touched by user
/** Clears the touch history on read*/
uint8_t lcd_get_touch(){
	uint8_t last = lcd_last_touch_command;
    212a:	80 91 d0 26 	lds	r24, 0x26D0
	lcd_last_touch_command = LCD_TOUCH_NONE;
    212e:	95 e1       	ldi	r25, 0x15	; 21
    2130:	90 93 d0 26 	sts	0x26D0, r25
	return last;
}
    2134:	08 95       	ret

00002136 <lcd_set_touch>:
	
void lcd_set_touch(uint8_t latest){
	//Rotate buffer
	for (uint8_t i=0;i<LCD_TOUCH_BUFFER_LEN-1;i++){lcd_touch_buffer[LCD_TOUCH_BUFFER_LEN-1-i] = lcd_touch_buffer[LCD_TOUCH_BUFFER_LEN-2-i];}
    2136:	2b ed       	ldi	r18, 0xDB	; 219
    2138:	36 e2       	ldi	r19, 0x26	; 38
    213a:	90 91 db 26 	lds	r25, 0x26DB
    213e:	90 93 dc 26 	sts	0x26DC, r25
    2142:	d9 01       	movw	r26, r18
    2144:	9e 91       	ld	r25, -X
    2146:	90 93 db 26 	sts	0x26DB, r25
    214a:	f9 01       	movw	r30, r18
    214c:	32 97       	sbiw	r30, 0x02	; 2
    214e:	90 81       	ld	r25, Z
    2150:	9c 93       	st	X, r25
    2152:	d9 01       	movw	r26, r18
    2154:	13 97       	sbiw	r26, 0x03	; 3
    2156:	9c 91       	ld	r25, X
    2158:	90 83       	st	Z, r25
    215a:	f9 01       	movw	r30, r18
    215c:	34 97       	sbiw	r30, 0x04	; 4
    215e:	90 81       	ld	r25, Z
    2160:	9c 93       	st	X, r25
	//Add to front (0-index)
	lcd_touch_buffer[0] = latest;
    2162:	80 83       	st	Z, r24

	//Analyze (remember reverse order)

	//Top Menu Navigation
		if ((lcd_touch_buffer[0]==0x0D)&&(lcd_touch_buffer[1]=='2')&&(lcd_touch_buffer[2]=='1')&&(lcd_touch_buffer[3]=='P')&&(lcd_touch_buffer[4]=='Z')&&(lcd_touch_buffer[5]=='T')){lcd_last_touch_command=LCD_TOUCH_OUTPUT;return;}
    2164:	80 81       	ld	r24, Z
    2166:	8d 30       	cpi	r24, 0x0D	; 13
    2168:	c1 f4       	brne	.+48     	; 0x219a <lcd_set_touch+0x64>
    216a:	80 91 d8 26 	lds	r24, 0x26D8
    216e:	82 33       	cpi	r24, 0x32	; 50
    2170:	a1 f4       	brne	.+40     	; 0x219a <lcd_set_touch+0x64>
    2172:	80 91 d9 26 	lds	r24, 0x26D9
    2176:	81 33       	cpi	r24, 0x31	; 49
    2178:	81 f4       	brne	.+32     	; 0x219a <lcd_set_touch+0x64>
    217a:	80 91 da 26 	lds	r24, 0x26DA
    217e:	80 35       	cpi	r24, 0x50	; 80
    2180:	61 f4       	brne	.+24     	; 0x219a <lcd_set_touch+0x64>
    2182:	80 91 db 26 	lds	r24, 0x26DB
    2186:	8a 35       	cpi	r24, 0x5A	; 90
    2188:	41 f4       	brne	.+16     	; 0x219a <lcd_set_touch+0x64>
    218a:	80 91 dc 26 	lds	r24, 0x26DC
    218e:	84 35       	cpi	r24, 0x54	; 84
    2190:	21 f4       	brne	.+8      	; 0x219a <lcd_set_touch+0x64>
    2192:	8c e0       	ldi	r24, 0x0C	; 12
    2194:	80 93 d0 26 	sts	0x26D0, r24
    2198:	08 95       	ret
		if ((lcd_touch_buffer[0]==0x0D)&&(lcd_touch_buffer[1]=='3')&&(lcd_touch_buffer[2]=='1')&&(lcd_touch_buffer[3]=='P')&&(lcd_touch_buffer[4]=='Z')&&(lcd_touch_buffer[5]=='T')){lcd_last_touch_command=LCD_TOUCH_CONTROL;return;}
    219a:	80 91 d7 26 	lds	r24, 0x26D7
    219e:	8d 30       	cpi	r24, 0x0D	; 13
    21a0:	c1 f4       	brne	.+48     	; 0x21d2 <lcd_set_touch+0x9c>
    21a2:	80 91 d8 26 	lds	r24, 0x26D8
    21a6:	83 33       	cpi	r24, 0x33	; 51
    21a8:	a1 f4       	brne	.+40     	; 0x21d2 <lcd_set_touch+0x9c>
    21aa:	80 91 d9 26 	lds	r24, 0x26D9
    21ae:	81 33       	cpi	r24, 0x31	; 49
    21b0:	81 f4       	brne	.+32     	; 0x21d2 <lcd_set_touch+0x9c>
    21b2:	80 91 da 26 	lds	r24, 0x26DA
    21b6:	80 35       	cpi	r24, 0x50	; 80
    21b8:	61 f4       	brne	.+24     	; 0x21d2 <lcd_set_touch+0x9c>
    21ba:	80 91 db 26 	lds	r24, 0x26DB
    21be:	8a 35       	cpi	r24, 0x5A	; 90
    21c0:	41 f4       	brne	.+16     	; 0x21d2 <lcd_set_touch+0x9c>
    21c2:	80 91 dc 26 	lds	r24, 0x26DC
    21c6:	84 35       	cpi	r24, 0x54	; 84
    21c8:	21 f4       	brne	.+8      	; 0x21d2 <lcd_set_touch+0x9c>
    21ca:	8d e0       	ldi	r24, 0x0D	; 13
    21cc:	80 93 d0 26 	sts	0x26D0, r24
    21d0:	08 95       	ret
		if ((lcd_touch_buffer[0]==0x0D)&&(lcd_touch_buffer[1]=='4')&&(lcd_touch_buffer[2]=='1')&&(lcd_touch_buffer[3]=='P')&&(lcd_touch_buffer[4]=='Z')&&(lcd_touch_buffer[5]=='T')){lcd_last_touch_command=LCD_TOUCH_CONSOLE;return;}
    21d2:	80 91 d7 26 	lds	r24, 0x26D7
    21d6:	8d 30       	cpi	r24, 0x0D	; 13
    21d8:	c1 f4       	brne	.+48     	; 0x220a <lcd_set_touch+0xd4>
    21da:	80 91 d8 26 	lds	r24, 0x26D8
    21de:	84 33       	cpi	r24, 0x34	; 52
    21e0:	a1 f4       	brne	.+40     	; 0x220a <lcd_set_touch+0xd4>
    21e2:	80 91 d9 26 	lds	r24, 0x26D9
    21e6:	81 33       	cpi	r24, 0x31	; 49
    21e8:	81 f4       	brne	.+32     	; 0x220a <lcd_set_touch+0xd4>
    21ea:	80 91 da 26 	lds	r24, 0x26DA
    21ee:	80 35       	cpi	r24, 0x50	; 80
    21f0:	61 f4       	brne	.+24     	; 0x220a <lcd_set_touch+0xd4>
    21f2:	80 91 db 26 	lds	r24, 0x26DB
    21f6:	8a 35       	cpi	r24, 0x5A	; 90
    21f8:	41 f4       	brne	.+16     	; 0x220a <lcd_set_touch+0xd4>
    21fa:	80 91 dc 26 	lds	r24, 0x26DC
    21fe:	84 35       	cpi	r24, 0x54	; 84
    2200:	21 f4       	brne	.+8      	; 0x220a <lcd_set_touch+0xd4>
    2202:	8e e0       	ldi	r24, 0x0E	; 14
    2204:	80 93 d0 26 	sts	0x26D0, r24
    2208:	08 95       	ret
	//Control Screen		
		if ((lcd_touch_buffer[0]==0x0D)&&(lcd_touch_buffer[1]=='7')&&(lcd_touch_buffer[2]=='1')&&(lcd_touch_buffer[3]=='P')&&(lcd_touch_buffer[4]=='Z')&&(lcd_touch_buffer[5]=='T')){lcd_last_touch_command=LCD_TOUCH_ROW_A;return;}
    220a:	80 91 d7 26 	lds	r24, 0x26D7
    220e:	8d 30       	cpi	r24, 0x0D	; 13
    2210:	c1 f4       	brne	.+48     	; 0x2242 <lcd_set_touch+0x10c>
    2212:	80 91 d8 26 	lds	r24, 0x26D8
    2216:	87 33       	cpi	r24, 0x37	; 55
    2218:	a1 f4       	brne	.+40     	; 0x2242 <lcd_set_touch+0x10c>
    221a:	80 91 d9 26 	lds	r24, 0x26D9
    221e:	81 33       	cpi	r24, 0x31	; 49
    2220:	81 f4       	brne	.+32     	; 0x2242 <lcd_set_touch+0x10c>
    2222:	80 91 da 26 	lds	r24, 0x26DA
    2226:	80 35       	cpi	r24, 0x50	; 80
    2228:	61 f4       	brne	.+24     	; 0x2242 <lcd_set_touch+0x10c>
    222a:	80 91 db 26 	lds	r24, 0x26DB
    222e:	8a 35       	cpi	r24, 0x5A	; 90
    2230:	41 f4       	brne	.+16     	; 0x2242 <lcd_set_touch+0x10c>
    2232:	80 91 dc 26 	lds	r24, 0x26DC
    2236:	84 35       	cpi	r24, 0x54	; 84
    2238:	21 f4       	brne	.+8      	; 0x2242 <lcd_set_touch+0x10c>
    223a:	81 e1       	ldi	r24, 0x11	; 17
    223c:	80 93 d0 26 	sts	0x26D0, r24
    2240:	08 95       	ret
		if ((lcd_touch_buffer[0]==0x0D)&&(lcd_touch_buffer[1]=='8')&&(lcd_touch_buffer[2]=='1')&&(lcd_touch_buffer[3]=='P')&&(lcd_touch_buffer[4]=='Z')&&(lcd_touch_buffer[5]=='T')){lcd_last_touch_command=LCD_TOUCH_ROW_B;return;}
    2242:	80 91 d7 26 	lds	r24, 0x26D7
    2246:	8d 30       	cpi	r24, 0x0D	; 13
    2248:	c1 f4       	brne	.+48     	; 0x227a <lcd_set_touch+0x144>
    224a:	80 91 d8 26 	lds	r24, 0x26D8
    224e:	88 33       	cpi	r24, 0x38	; 56
    2250:	a1 f4       	brne	.+40     	; 0x227a <lcd_set_touch+0x144>
    2252:	80 91 d9 26 	lds	r24, 0x26D9
    2256:	81 33       	cpi	r24, 0x31	; 49
    2258:	81 f4       	brne	.+32     	; 0x227a <lcd_set_touch+0x144>
    225a:	80 91 da 26 	lds	r24, 0x26DA
    225e:	80 35       	cpi	r24, 0x50	; 80
    2260:	61 f4       	brne	.+24     	; 0x227a <lcd_set_touch+0x144>
    2262:	80 91 db 26 	lds	r24, 0x26DB
    2266:	8a 35       	cpi	r24, 0x5A	; 90
    2268:	41 f4       	brne	.+16     	; 0x227a <lcd_set_touch+0x144>
    226a:	80 91 dc 26 	lds	r24, 0x26DC
    226e:	84 35       	cpi	r24, 0x54	; 84
    2270:	21 f4       	brne	.+8      	; 0x227a <lcd_set_touch+0x144>
    2272:	82 e1       	ldi	r24, 0x12	; 18
    2274:	80 93 d0 26 	sts	0x26D0, r24
    2278:	08 95       	ret
		if ((lcd_touch_buffer[0]==0x0D)&&(lcd_touch_buffer[1]=='9')&&(lcd_touch_buffer[2]=='1')&&(lcd_touch_buffer[3]=='P')&&(lcd_touch_buffer[4]=='Z')&&(lcd_touch_buffer[5]=='T')){lcd_last_touch_command=LCD_TOUCH_ROW_C;return;}
    227a:	80 91 d7 26 	lds	r24, 0x26D7
    227e:	8d 30       	cpi	r24, 0x0D	; 13
    2280:	c1 f4       	brne	.+48     	; 0x22b2 <lcd_set_touch+0x17c>
    2282:	80 91 d8 26 	lds	r24, 0x26D8
    2286:	89 33       	cpi	r24, 0x39	; 57
    2288:	a1 f4       	brne	.+40     	; 0x22b2 <lcd_set_touch+0x17c>
    228a:	80 91 d9 26 	lds	r24, 0x26D9
    228e:	81 33       	cpi	r24, 0x31	; 49
    2290:	81 f4       	brne	.+32     	; 0x22b2 <lcd_set_touch+0x17c>
    2292:	80 91 da 26 	lds	r24, 0x26DA
    2296:	80 35       	cpi	r24, 0x50	; 80
    2298:	61 f4       	brne	.+24     	; 0x22b2 <lcd_set_touch+0x17c>
    229a:	80 91 db 26 	lds	r24, 0x26DB
    229e:	8a 35       	cpi	r24, 0x5A	; 90
    22a0:	41 f4       	brne	.+16     	; 0x22b2 <lcd_set_touch+0x17c>
    22a2:	80 91 dc 26 	lds	r24, 0x26DC
    22a6:	84 35       	cpi	r24, 0x54	; 84
    22a8:	21 f4       	brne	.+8      	; 0x22b2 <lcd_set_touch+0x17c>
    22aa:	83 e1       	ldi	r24, 0x13	; 19
    22ac:	80 93 d0 26 	sts	0x26D0, r24
    22b0:	08 95       	ret
		if ((lcd_touch_buffer[0]==0x0D)&&(lcd_touch_buffer[1]=='0')&&(lcd_touch_buffer[2]=='2')&&(lcd_touch_buffer[3]=='P')&&(lcd_touch_buffer[4]=='Z')&&(lcd_touch_buffer[5]=='T')){lcd_last_touch_command=LCD_TOUCH_ROW_D;return;}
    22b2:	80 91 d7 26 	lds	r24, 0x26D7
    22b6:	8d 30       	cpi	r24, 0x0D	; 13
    22b8:	c1 f4       	brne	.+48     	; 0x22ea <lcd_set_touch+0x1b4>
    22ba:	80 91 d8 26 	lds	r24, 0x26D8
    22be:	80 33       	cpi	r24, 0x30	; 48
    22c0:	a1 f4       	brne	.+40     	; 0x22ea <lcd_set_touch+0x1b4>
    22c2:	80 91 d9 26 	lds	r24, 0x26D9
    22c6:	82 33       	cpi	r24, 0x32	; 50
    22c8:	81 f4       	brne	.+32     	; 0x22ea <lcd_set_touch+0x1b4>
    22ca:	80 91 da 26 	lds	r24, 0x26DA
    22ce:	80 35       	cpi	r24, 0x50	; 80
    22d0:	61 f4       	brne	.+24     	; 0x22ea <lcd_set_touch+0x1b4>
    22d2:	80 91 db 26 	lds	r24, 0x26DB
    22d6:	8a 35       	cpi	r24, 0x5A	; 90
    22d8:	41 f4       	brne	.+16     	; 0x22ea <lcd_set_touch+0x1b4>
    22da:	80 91 dc 26 	lds	r24, 0x26DC
    22de:	84 35       	cpi	r24, 0x54	; 84
    22e0:	21 f4       	brne	.+8      	; 0x22ea <lcd_set_touch+0x1b4>
    22e2:	84 e1       	ldi	r24, 0x14	; 20
    22e4:	80 93 d0 26 	sts	0x26D0, r24
    22e8:	08 95       	ret
	//Control Dialog Window
		if ((lcd_touch_buffer[0]==0x0D)&&(lcd_touch_buffer[1]=='6')&&(lcd_touch_buffer[2]=='9')&&(lcd_touch_buffer[3]=='P')&&(lcd_touch_buffer[4]=='Z')&&(lcd_touch_buffer[5]=='T')){lcd_last_touch_command=LCD_TOUCH_CLOSE_DIAL;return;}
    22ea:	80 91 d7 26 	lds	r24, 0x26D7
    22ee:	8d 30       	cpi	r24, 0x0D	; 13
    22f0:	c1 f4       	brne	.+48     	; 0x2322 <lcd_set_touch+0x1ec>
    22f2:	80 91 d8 26 	lds	r24, 0x26D8
    22f6:	86 33       	cpi	r24, 0x36	; 54
    22f8:	a1 f4       	brne	.+40     	; 0x2322 <lcd_set_touch+0x1ec>
    22fa:	80 91 d9 26 	lds	r24, 0x26D9
    22fe:	89 33       	cpi	r24, 0x39	; 57
    2300:	81 f4       	brne	.+32     	; 0x2322 <lcd_set_touch+0x1ec>
    2302:	80 91 da 26 	lds	r24, 0x26DA
    2306:	80 35       	cpi	r24, 0x50	; 80
    2308:	61 f4       	brne	.+24     	; 0x2322 <lcd_set_touch+0x1ec>
    230a:	80 91 db 26 	lds	r24, 0x26DB
    230e:	8a 35       	cpi	r24, 0x5A	; 90
    2310:	41 f4       	brne	.+16     	; 0x2322 <lcd_set_touch+0x1ec>
    2312:	80 91 dc 26 	lds	r24, 0x26DC
    2316:	84 35       	cpi	r24, 0x54	; 84
    2318:	21 f4       	brne	.+8      	; 0x2322 <lcd_set_touch+0x1ec>
    231a:	80 e6       	ldi	r24, 0x60	; 96
    231c:	80 93 d0 26 	sts	0x26D0, r24
    2320:	08 95       	ret
		if ((lcd_touch_buffer[0]==0x0D)&&(lcd_touch_buffer[1]=='7')&&(lcd_touch_buffer[2]=='9')&&(lcd_touch_buffer[3]=='P')&&(lcd_touch_buffer[4]=='Z')&&(lcd_touch_buffer[5]=='T')){lcd_last_touch_command=LCD_TOUCH_LEFT;return;}
    2322:	80 91 d7 26 	lds	r24, 0x26D7
    2326:	8d 30       	cpi	r24, 0x0D	; 13
    2328:	c1 f4       	brne	.+48     	; 0x235a <lcd_set_touch+0x224>
    232a:	80 91 d8 26 	lds	r24, 0x26D8
    232e:	87 33       	cpi	r24, 0x37	; 55
    2330:	a1 f4       	brne	.+40     	; 0x235a <lcd_set_touch+0x224>
    2332:	80 91 d9 26 	lds	r24, 0x26D9
    2336:	89 33       	cpi	r24, 0x39	; 57
    2338:	81 f4       	brne	.+32     	; 0x235a <lcd_set_touch+0x224>
    233a:	80 91 da 26 	lds	r24, 0x26DA
    233e:	80 35       	cpi	r24, 0x50	; 80
    2340:	61 f4       	brne	.+24     	; 0x235a <lcd_set_touch+0x224>
    2342:	80 91 db 26 	lds	r24, 0x26DB
    2346:	8a 35       	cpi	r24, 0x5A	; 90
    2348:	41 f4       	brne	.+16     	; 0x235a <lcd_set_touch+0x224>
    234a:	80 91 dc 26 	lds	r24, 0x26DC
    234e:	84 35       	cpi	r24, 0x54	; 84
    2350:	21 f4       	brne	.+8      	; 0x235a <lcd_set_touch+0x224>
    2352:	81 e6       	ldi	r24, 0x61	; 97
    2354:	80 93 d0 26 	sts	0x26D0, r24
    2358:	08 95       	ret
		if ((lcd_touch_buffer[0]==0x0D)&&(lcd_touch_buffer[1]=='8')&&(lcd_touch_buffer[2]=='9')&&(lcd_touch_buffer[3]=='P')&&(lcd_touch_buffer[4]=='Z')&&(lcd_touch_buffer[5]=='T')){lcd_last_touch_command=LCD_TOUCH_RIGHT;return;}
    235a:	80 91 d7 26 	lds	r24, 0x26D7
    235e:	8d 30       	cpi	r24, 0x0D	; 13
    2360:	c1 f4       	brne	.+48     	; 0x2392 <lcd_set_touch+0x25c>
    2362:	80 91 d8 26 	lds	r24, 0x26D8
    2366:	88 33       	cpi	r24, 0x38	; 56
    2368:	a1 f4       	brne	.+40     	; 0x2392 <lcd_set_touch+0x25c>
    236a:	80 91 d9 26 	lds	r24, 0x26D9
    236e:	89 33       	cpi	r24, 0x39	; 57
    2370:	81 f4       	brne	.+32     	; 0x2392 <lcd_set_touch+0x25c>
    2372:	80 91 da 26 	lds	r24, 0x26DA
    2376:	80 35       	cpi	r24, 0x50	; 80
    2378:	61 f4       	brne	.+24     	; 0x2392 <lcd_set_touch+0x25c>
    237a:	80 91 db 26 	lds	r24, 0x26DB
    237e:	8a 35       	cpi	r24, 0x5A	; 90
    2380:	41 f4       	brne	.+16     	; 0x2392 <lcd_set_touch+0x25c>
    2382:	80 91 dc 26 	lds	r24, 0x26DC
    2386:	84 35       	cpi	r24, 0x54	; 84
    2388:	21 f4       	brne	.+8      	; 0x2392 <lcd_set_touch+0x25c>
    238a:	82 e6       	ldi	r24, 0x62	; 98
    238c:	80 93 d0 26 	sts	0x26D0, r24
    2390:	08 95       	ret
	//Output Screen
		if ((lcd_touch_buffer[0]==0x0D)&&(lcd_touch_buffer[1]=='9')&&(lcd_touch_buffer[2]=='9')&&(lcd_touch_buffer[3]=='P')&&(lcd_touch_buffer[4]=='Z')&&(lcd_touch_buffer[5]=='T')){lcd_last_touch_command=LCD_TOUCH_CLOSE_DETAIL;return;}
    2392:	80 91 d7 26 	lds	r24, 0x26D7
    2396:	8d 30       	cpi	r24, 0x0D	; 13
    2398:	c1 f4       	brne	.+48     	; 0x23ca <lcd_set_touch+0x294>
    239a:	80 91 d8 26 	lds	r24, 0x26D8
    239e:	89 33       	cpi	r24, 0x39	; 57
    23a0:	a1 f4       	brne	.+40     	; 0x23ca <lcd_set_touch+0x294>
    23a2:	80 91 d9 26 	lds	r24, 0x26D9
    23a6:	89 33       	cpi	r24, 0x39	; 57
    23a8:	81 f4       	brne	.+32     	; 0x23ca <lcd_set_touch+0x294>
    23aa:	80 91 da 26 	lds	r24, 0x26DA
    23ae:	80 35       	cpi	r24, 0x50	; 80
    23b0:	61 f4       	brne	.+24     	; 0x23ca <lcd_set_touch+0x294>
    23b2:	80 91 db 26 	lds	r24, 0x26DB
    23b6:	8a 35       	cpi	r24, 0x5A	; 90
    23b8:	41 f4       	brne	.+16     	; 0x23ca <lcd_set_touch+0x294>
    23ba:	80 91 dc 26 	lds	r24, 0x26DC
    23be:	84 35       	cpi	r24, 0x54	; 84
    23c0:	21 f4       	brne	.+8      	; 0x23ca <lcd_set_touch+0x294>
    23c2:	83 e6       	ldi	r24, 0x63	; 99
    23c4:	80 93 d0 26 	sts	0x26D0, r24
    23c8:	08 95       	ret
		if ((lcd_touch_buffer[0]==0x0D)&&(lcd_touch_buffer[1]=='5')&&(lcd_touch_buffer[2]=='1')&&(lcd_touch_buffer[3]=='P')&&(lcd_touch_buffer[4]=='Z')&&(lcd_touch_buffer[5]=='T')){lcd_last_touch_command=LCD_TOUCH_OPEN_DETAIL_AB;return;}
    23ca:	80 91 d7 26 	lds	r24, 0x26D7
    23ce:	8d 30       	cpi	r24, 0x0D	; 13
    23d0:	c1 f4       	brne	.+48     	; 0x2402 <lcd_set_touch+0x2cc>
    23d2:	80 91 d8 26 	lds	r24, 0x26D8
    23d6:	85 33       	cpi	r24, 0x35	; 53
    23d8:	a1 f4       	brne	.+40     	; 0x2402 <lcd_set_touch+0x2cc>
    23da:	80 91 d9 26 	lds	r24, 0x26D9
    23de:	81 33       	cpi	r24, 0x31	; 49
    23e0:	81 f4       	brne	.+32     	; 0x2402 <lcd_set_touch+0x2cc>
    23e2:	80 91 da 26 	lds	r24, 0x26DA
    23e6:	80 35       	cpi	r24, 0x50	; 80
    23e8:	61 f4       	brne	.+24     	; 0x2402 <lcd_set_touch+0x2cc>
    23ea:	80 91 db 26 	lds	r24, 0x26DB
    23ee:	8a 35       	cpi	r24, 0x5A	; 90
    23f0:	41 f4       	brne	.+16     	; 0x2402 <lcd_set_touch+0x2cc>
    23f2:	80 91 dc 26 	lds	r24, 0x26DC
    23f6:	84 35       	cpi	r24, 0x54	; 84
    23f8:	21 f4       	brne	.+8      	; 0x2402 <lcd_set_touch+0x2cc>
    23fa:	8f e0       	ldi	r24, 0x0F	; 15
    23fc:	80 93 d0 26 	sts	0x26D0, r24
    2400:	08 95       	ret
		if ((lcd_touch_buffer[0]==0x0D)&&(lcd_touch_buffer[1]=='6')&&(lcd_touch_buffer[2]=='1')&&(lcd_touch_buffer[3]=='P')&&(lcd_touch_buffer[4]=='Z')&&(lcd_touch_buffer[5]=='T')){lcd_last_touch_command=LCD_TOUCH_OPEN_DETAIL_CD;return;}
    2402:	80 91 d7 26 	lds	r24, 0x26D7
    2406:	8d 30       	cpi	r24, 0x0D	; 13
    2408:	b9 f4       	brne	.+46     	; 0x2438 <lcd_set_touch+0x302>
    240a:	80 91 d8 26 	lds	r24, 0x26D8
    240e:	86 33       	cpi	r24, 0x36	; 54
    2410:	99 f4       	brne	.+38     	; 0x2438 <lcd_set_touch+0x302>
    2412:	80 91 d9 26 	lds	r24, 0x26D9
    2416:	81 33       	cpi	r24, 0x31	; 49
    2418:	79 f4       	brne	.+30     	; 0x2438 <lcd_set_touch+0x302>
    241a:	80 91 da 26 	lds	r24, 0x26DA
    241e:	80 35       	cpi	r24, 0x50	; 80
    2420:	59 f4       	brne	.+22     	; 0x2438 <lcd_set_touch+0x302>
    2422:	80 91 db 26 	lds	r24, 0x26DB
    2426:	8a 35       	cpi	r24, 0x5A	; 90
    2428:	39 f4       	brne	.+14     	; 0x2438 <lcd_set_touch+0x302>
    242a:	80 91 dc 26 	lds	r24, 0x26DC
    242e:	84 35       	cpi	r24, 0x54	; 84
    2430:	19 f4       	brne	.+6      	; 0x2438 <lcd_set_touch+0x302>
    2432:	80 e1       	ldi	r24, 0x10	; 16
    2434:	80 93 d0 26 	sts	0x26D0, r24
    2438:	08 95       	ret

0000243a <service_lcd_touch>:
//## SERVICE ROUTINE
//#############################################################

//Used to refresh the console
void service_lcd_touch(){
	if (lcd_last_touch_command==LCD_TOUCH_NONE) return; //exit if nothing has been pressed
    243a:	80 91 d0 26 	lds	r24, 0x26D0
    243e:	85 31       	cpi	r24, 0x15	; 21
    2440:	09 f4       	brne	.+2      	; 0x2444 <service_lcd_touch+0xa>
    2442:	59 c0       	rjmp	.+178    	; 0x24f6 <service_lcd_touch+0xbc>
	switch(lcd_get_touch()){
    2444:	0e 94 95 10 	call	0x212a	; 0x212a <lcd_get_touch>
    2448:	82 31       	cpi	r24, 0x12	; 18
    244a:	91 f1       	breq	.+100    	; 0x24b0 <service_lcd_touch+0x76>
    244c:	83 31       	cpi	r24, 0x13	; 19
    244e:	80 f4       	brcc	.+32     	; 0x2470 <service_lcd_touch+0x36>
    2450:	8e 30       	cpi	r24, 0x0E	; 14
    2452:	31 f1       	breq	.+76     	; 0x24a0 <service_lcd_touch+0x66>
    2454:	8f 30       	cpi	r24, 0x0F	; 15
    2456:	30 f4       	brcc	.+12     	; 0x2464 <service_lcd_touch+0x2a>
    2458:	8c 30       	cpi	r24, 0x0C	; 12
    245a:	d1 f0       	breq	.+52     	; 0x2490 <service_lcd_touch+0x56>
    245c:	8d 30       	cpi	r24, 0x0D	; 13
    245e:	09 f0       	breq	.+2      	; 0x2462 <service_lcd_touch+0x28>
    2460:	4a c0       	rjmp	.+148    	; 0x24f6 <service_lcd_touch+0xbc>
    2462:	1a c0       	rjmp	.+52     	; 0x2498 <service_lcd_touch+0x5e>
    2464:	80 31       	cpi	r24, 0x10	; 16
    2466:	09 f4       	brne	.+2      	; 0x246a <service_lcd_touch+0x30>
    2468:	43 c0       	rjmp	.+134    	; 0x24f0 <service_lcd_touch+0xb6>
    246a:	81 31       	cpi	r24, 0x11	; 17
    246c:	e8 f4       	brcc	.+58     	; 0x24a8 <service_lcd_touch+0x6e>
    246e:	3c c0       	rjmp	.+120    	; 0x24e8 <service_lcd_touch+0xae>
    2470:	80 36       	cpi	r24, 0x60	; 96
    2472:	91 f1       	breq	.+100    	; 0x24d8 <service_lcd_touch+0x9e>
    2474:	81 36       	cpi	r24, 0x61	; 97
    2476:	28 f4       	brcc	.+10     	; 0x2482 <service_lcd_touch+0x48>
    2478:	83 31       	cpi	r24, 0x13	; 19
    247a:	f1 f0       	breq	.+60     	; 0x24b8 <service_lcd_touch+0x7e>
    247c:	84 31       	cpi	r24, 0x14	; 20
    247e:	d9 f5       	brne	.+118    	; 0x24f6 <service_lcd_touch+0xbc>
    2480:	1f c0       	rjmp	.+62     	; 0x24c0 <service_lcd_touch+0x86>
    2482:	82 36       	cpi	r24, 0x62	; 98
    2484:	29 f1       	breq	.+74     	; 0x24d0 <service_lcd_touch+0x96>
    2486:	82 36       	cpi	r24, 0x62	; 98
    2488:	f8 f0       	brcs	.+62     	; 0x24c8 <service_lcd_touch+0x8e>
    248a:	83 36       	cpi	r24, 0x63	; 99
    248c:	a1 f5       	brne	.+104    	; 0x24f6 <service_lcd_touch+0xbc>
    248e:	28 c0       	rjmp	.+80     	; 0x24e0 <service_lcd_touch+0xa6>
		
		//MENU NAVIGATION
		case LCD_TOUCH_OUTPUT:
			brain_menu_load(MENU_OUTPUT);
    2490:	80 e2       	ldi	r24, 0x20	; 32
    2492:	0e 94 01 05 	call	0xa02	; 0xa02 <brain_menu_load>
			break;
    2496:	08 95       	ret
		case LCD_TOUCH_CONTROL:
			brain_menu_load(MENU_CONTROL);
    2498:	81 e2       	ldi	r24, 0x21	; 33
    249a:	0e 94 01 05 	call	0xa02	; 0xa02 <brain_menu_load>
			break;
    249e:	08 95       	ret
		case LCD_TOUCH_CONSOLE:
			brain_menu_load(MENU_CONSOLE);
    24a0:	82 e2       	ldi	r24, 0x22	; 34
    24a2:	0e 94 01 05 	call	0xa02	; 0xa02 <brain_menu_load>
			break;
    24a6:	08 95       	ret
			
		//CONTROL MENU
		case LCD_TOUCH_ROW_A:
			brain_menu_control_dial(LCD_TOUCH_ROW_A);
    24a8:	81 e1       	ldi	r24, 0x11	; 17
    24aa:	0e 94 4a 04 	call	0x894	; 0x894 <brain_menu_control_dial>
			break;
    24ae:	08 95       	ret
		case LCD_TOUCH_ROW_B:
			brain_menu_control_dial(LCD_TOUCH_ROW_B);
    24b0:	82 e1       	ldi	r24, 0x12	; 18
    24b2:	0e 94 4a 04 	call	0x894	; 0x894 <brain_menu_control_dial>
			break;
    24b6:	08 95       	ret
		case LCD_TOUCH_ROW_C:
			brain_menu_control_dial(LCD_TOUCH_ROW_C);
    24b8:	83 e1       	ldi	r24, 0x13	; 19
    24ba:	0e 94 4a 04 	call	0x894	; 0x894 <brain_menu_control_dial>
			break;
    24be:	08 95       	ret
		case LCD_TOUCH_ROW_D:
			brain_menu_control_dial(LCD_TOUCH_ROW_D);
    24c0:	84 e1       	ldi	r24, 0x14	; 20
    24c2:	0e 94 4a 04 	call	0x894	; 0x894 <brain_menu_control_dial>
			break;
    24c6:	08 95       	ret
		
		//CONTROL DIALOG WINDOW
		case LCD_TOUCH_LEFT:
			brain_menu_control_dial_select(LCD_TOUCH_LEFT);
    24c8:	81 e6       	ldi	r24, 0x61	; 97
    24ca:	0e 94 85 04 	call	0x90a	; 0x90a <brain_menu_control_dial_select>
			break;
    24ce:	08 95       	ret
		case LCD_TOUCH_RIGHT:
			brain_menu_control_dial_select(LCD_TOUCH_RIGHT);
    24d0:	82 e6       	ldi	r24, 0x62	; 98
    24d2:	0e 94 85 04 	call	0x90a	; 0x90a <brain_menu_control_dial_select>
			break;
    24d6:	08 95       	ret
		case LCD_TOUCH_CLOSE_DIAL:
			brain_menu_load(MENU_CONTROL);
    24d8:	81 e2       	ldi	r24, 0x21	; 33
    24da:	0e 94 01 05 	call	0xa02	; 0xa02 <brain_menu_load>
			break;
    24de:	08 95       	ret
		
		//OUTPUT MENU
		case LCD_TOUCH_CLOSE_DETAIL:
			brain_menu_load(MENU_OUTPUT);
    24e0:	80 e2       	ldi	r24, 0x20	; 32
    24e2:	0e 94 01 05 	call	0xa02	; 0xa02 <brain_menu_load>
			break;
    24e6:	08 95       	ret
		case LCD_TOUCH_OPEN_DETAIL_AB:
			brain_menu_output_detail(LCD_TOUCH_OPEN_DETAIL_AB);
    24e8:	8f e0       	ldi	r24, 0x0F	; 15
    24ea:	0e 94 15 04 	call	0x82a	; 0x82a <brain_menu_output_detail>
			break;
    24ee:	08 95       	ret
		case LCD_TOUCH_OPEN_DETAIL_CD:
			brain_menu_output_detail(LCD_TOUCH_OPEN_DETAIL_CD);
    24f0:	80 e1       	ldi	r24, 0x10	; 16
    24f2:	0e 94 15 04 	call	0x82a	; 0x82a <brain_menu_output_detail>
    24f6:	08 95       	ret

000024f8 <init_pwr_adjust>:
//## INITIALIZATION ROUTINE
//#############################################################

void init_pwr_adjust(){
	//Enable lines
	PORTH.OUTCLR = 0x00;
    24f8:	e0 ee       	ldi	r30, 0xE0	; 224
    24fa:	f6 e0       	ldi	r31, 0x06	; 6
    24fc:	16 82       	std	Z+6, r1	; 0x06
	PORTH.DIRSET = B8(00011111); //ADJ Outputs & 5V fixed output to out direction
    24fe:	8f e1       	ldi	r24, 0x1F	; 31
    2500:	81 83       	std	Z+1, r24	; 0x01
	
	//Chip Select lines
	PORTD.OUTSET = B8(00011111); //set all output pins high prior to enabling output (deselect SPI peripherals)
    2502:	e0 e6       	ldi	r30, 0x60	; 96
    2504:	f6 e0       	ldi	r31, 0x06	; 6
    2506:	85 83       	std	Z+5, r24	; 0x05
	PORTD.DIRSET = B8(11111011); //ADJ_CS, TC_CS, SPI_MOSI, SPI_CLOCK to outputs	
    2508:	8b ef       	ldi	r24, 0xFB	; 251
    250a:	81 83       	std	Z+1, r24	; 0x01
		--Master reads on the rising clock edge
		--Clock idles HIGH
		--Shifted MSB-first 
		--Max clock = 7MHz
	*/
	SPID.CTRL = B8(11011101); //2X Clock (with 16x prescale) = 1/8 System Frequency = 4MHz; Master Mode; Clock idle high; Master sample on rising edge
    250c:	e0 ec       	ldi	r30, 0xC0	; 192
    250e:	f9 e0       	ldi	r31, 0x09	; 9
    2510:	8d ed       	ldi	r24, 0xDD	; 221
    2512:	80 83       	st	Z, r24
	SPID.INTCTRL = 2; //medium priority interrupt
    2514:	82 e0       	ldi	r24, 0x02	; 2
    2516:	81 83       	std	Z+1, r24	; 0x01
	
	pwr_adj_spi_state = PWR_ADJ_SPI_IDLE;
    2518:	10 92 e1 26 	sts	0x26E1, r1
	pwr_adj_send_channels = 0x00;
    251c:	10 92 c9 26 	sts	0x26C9, r1
	pwr_adj_channel_dirty = 0x00;
    2520:	10 92 e3 26 	sts	0x26E3, r1
	pwr_adj_left_right = LCD_TOUCH_LEFT;
    2524:	81 e6       	ldi	r24, 0x61	; 97
    2526:	80 93 ce 26 	sts	0x26CE, r24
}
    252a:	08 95       	ret

0000252c <pwr_adj_spi_send>:
	}
}	
	
void pwr_adj_spi_send(uint8_t channel_num){
	//STATE
	pwr_adj_spi_state = PWR_ADJ_SPI_COMMAND;
    252c:	91 e0       	ldi	r25, 0x01	; 1
    252e:	90 93 e1 26 	sts	0x26E1, r25
	pwr_adj_channel_num_in_progress = channel_num;
    2532:	80 93 cf 26 	sts	0x26CF, r24
	
	//CHIP SELECT
	switch(channel_num){
    2536:	84 30       	cpi	r24, 0x04	; 4
    2538:	18 f4       	brcc	.+6      	; 0x2540 <pwr_adj_spi_send+0x14>
    253a:	82 30       	cpi	r24, 0x02	; 2
    253c:	58 f4       	brcc	.+22     	; 0x2554 <pwr_adj_spi_send+0x28>
    253e:	05 c0       	rjmp	.+10     	; 0x254a <pwr_adj_spi_send+0x1e>
    2540:	86 30       	cpi	r24, 0x06	; 6
    2542:	68 f0       	brcs	.+26     	; 0x255e <pwr_adj_spi_send+0x32>
    2544:	88 30       	cpi	r24, 0x08	; 8
    2546:	a0 f4       	brcc	.+40     	; 0x2570 <pwr_adj_spi_send+0x44>
    2548:	0f c0       	rjmp	.+30     	; 0x2568 <pwr_adj_spi_send+0x3c>
	case 0:
	case 1:
		PORTD.OUTCLR = _BV(0); //CS low, start transmitting
    254a:	91 e0       	ldi	r25, 0x01	; 1
    254c:	e0 e6       	ldi	r30, 0x60	; 96
    254e:	f6 e0       	ldi	r31, 0x06	; 6
    2550:	96 83       	std	Z+6, r25	; 0x06
		break;
    2552:	0e c0       	rjmp	.+28     	; 0x2570 <pwr_adj_spi_send+0x44>
	case 2:
	case 3:
		PORTD.OUTCLR = _BV(1); //CS low, start transmitting
    2554:	92 e0       	ldi	r25, 0x02	; 2
    2556:	e0 e6       	ldi	r30, 0x60	; 96
    2558:	f6 e0       	ldi	r31, 0x06	; 6
    255a:	96 83       	std	Z+6, r25	; 0x06
		break;
    255c:	09 c0       	rjmp	.+18     	; 0x2570 <pwr_adj_spi_send+0x44>
	case 4:
	case 5:
		PORTD.OUTCLR = _BV(2); //CS low, start transmitting
    255e:	94 e0       	ldi	r25, 0x04	; 4
    2560:	e0 e6       	ldi	r30, 0x60	; 96
    2562:	f6 e0       	ldi	r31, 0x06	; 6
    2564:	96 83       	std	Z+6, r25	; 0x06
		break;
    2566:	04 c0       	rjmp	.+8      	; 0x2570 <pwr_adj_spi_send+0x44>
	case 6:
	case 7:
		PORTD.OUTCLR = _BV(3); //CS low, start transmitting
    2568:	98 e0       	ldi	r25, 0x08	; 8
    256a:	e0 e6       	ldi	r30, 0x60	; 96
    256c:	f6 e0       	ldi	r31, 0x06	; 6
    256e:	96 83       	std	Z+6, r25	; 0x06
		break;
	}
	
	//SEND COMMAND BYTE
	if(channel_num % 2){
    2570:	80 ff       	sbrs	r24, 0
    2572:	05 c0       	rjmp	.+10     	; 0x257e <pwr_adj_spi_send+0x52>
		//channel_num = 1,3,5,7 (0 == false in C)
		SPID.DATA = MAX5494_SET2;
    2574:	82 e0       	ldi	r24, 0x02	; 2
    2576:	e0 ec       	ldi	r30, 0xC0	; 192
    2578:	f9 e0       	ldi	r31, 0x09	; 9
    257a:	83 83       	std	Z+3, r24	; 0x03
    257c:	08 95       	ret
	} 
	else {
		SPID.DATA = MAX5494_SET1;
    257e:	81 e0       	ldi	r24, 0x01	; 1
    2580:	e0 ec       	ldi	r30, 0xC0	; 192
    2582:	f9 e0       	ldi	r31, 0x09	; 9
    2584:	83 83       	std	Z+3, r24	; 0x03
    2586:	08 95       	ret

00002588 <_pwr_adj_next>:
//#############################################################
//## SPI LOW-LEVEL FUNCTIONS
//#############################################################

void _pwr_adj_next(){
	pwr_adj_send_channels &= ~_BV(pwr_adj_channel_num_in_progress); //clear channel we just finished sending
    2588:	61 e0       	ldi	r22, 0x01	; 1
    258a:	70 e0       	ldi	r23, 0x00	; 0
    258c:	00 90 cf 26 	lds	r0, 0x26CF
    2590:	02 c0       	rjmp	.+4      	; 0x2596 <_pwr_adj_next+0xe>
    2592:	66 0f       	add	r22, r22
    2594:	77 1f       	adc	r23, r23
    2596:	0a 94       	dec	r0
    2598:	e2 f7       	brpl	.-8      	; 0x2592 <_pwr_adj_next+0xa>
    259a:	60 95       	com	r22
    259c:	80 91 c9 26 	lds	r24, 0x26C9
    25a0:	68 23       	and	r22, r24
    25a2:	60 93 c9 26 	sts	0x26C9, r22
	if (pwr_adj_send_channels > 0){
    25a6:	66 23       	and	r22, r22
    25a8:	f1 f0       	breq	.+60     	; 0x25e6 <_pwr_adj_next+0x5e>
		//Some other channels need to be sent
		for(uint8_t i=0;i<PWR_ADJ_NUM_CHANNELS;i++){
			if((pwr_adj_send_channels & _BV(i)) > 0){
    25aa:	70 e0       	ldi	r23, 0x00	; 0
    25ac:	60 fd       	sbrc	r22, 0
    25ae:	12 c0       	rjmp	.+36     	; 0x25d4 <_pwr_adj_next+0x4c>
    25b0:	21 e0       	ldi	r18, 0x01	; 1
    25b2:	30 e0       	ldi	r19, 0x00	; 0
    25b4:	e1 e0       	ldi	r30, 0x01	; 1
    25b6:	f0 e0       	ldi	r31, 0x00	; 0
    25b8:	82 2f       	mov	r24, r18
    25ba:	af 01       	movw	r20, r30
    25bc:	02 2e       	mov	r0, r18
    25be:	02 c0       	rjmp	.+4      	; 0x25c4 <_pwr_adj_next+0x3c>
    25c0:	44 0f       	add	r20, r20
    25c2:	55 1f       	adc	r21, r21
    25c4:	0a 94       	dec	r0
    25c6:	e2 f7       	brpl	.-8      	; 0x25c0 <_pwr_adj_next+0x38>
    25c8:	46 23       	and	r20, r22
    25ca:	57 23       	and	r21, r23
    25cc:	14 16       	cp	r1, r20
    25ce:	15 06       	cpc	r1, r21
    25d0:	2c f4       	brge	.+10     	; 0x25dc <_pwr_adj_next+0x54>
    25d2:	01 c0       	rjmp	.+2      	; 0x25d6 <_pwr_adj_next+0x4e>
    25d4:	80 e0       	ldi	r24, 0x00	; 0
				pwr_adj_spi_send(i);
    25d6:	0e 94 96 12 	call	0x252c	; 0x252c <pwr_adj_spi_send>
				return; //exit for
    25da:	08 95       	ret
    25dc:	2f 5f       	subi	r18, 0xFF	; 255
    25de:	3f 4f       	sbci	r19, 0xFF	; 255

void _pwr_adj_next(){
	pwr_adj_send_channels &= ~_BV(pwr_adj_channel_num_in_progress); //clear channel we just finished sending
	if (pwr_adj_send_channels > 0){
		//Some other channels need to be sent
		for(uint8_t i=0;i<PWR_ADJ_NUM_CHANNELS;i++){
    25e0:	28 30       	cpi	r18, 0x08	; 8
    25e2:	31 05       	cpc	r19, r1
    25e4:	49 f7       	brne	.-46     	; 0x25b8 <_pwr_adj_next+0x30>
    25e6:	08 95       	ret

000025e8 <pwr_adj_on>:
//#############################################################
//## API
//#############################################################

void pwr_adj_on(uint8_t channel){
	switch(channel){
    25e8:	82 30       	cpi	r24, 0x02	; 2
    25ea:	c1 f0       	breq	.+48     	; 0x261c <pwr_adj_on+0x34>
    25ec:	83 30       	cpi	r24, 0x03	; 3
    25ee:	28 f4       	brcc	.+10     	; 0x25fa <pwr_adj_on+0x12>
    25f0:	88 23       	and	r24, r24
    25f2:	51 f0       	breq	.+20     	; 0x2608 <pwr_adj_on+0x20>
    25f4:	81 30       	cpi	r24, 0x01	; 1
    25f6:	39 f5       	brne	.+78     	; 0x2646 <pwr_adj_on+0x5e>
    25f8:	0c c0       	rjmp	.+24     	; 0x2612 <pwr_adj_on+0x2a>
    25fa:	8a 33       	cpi	r24, 0x3A	; 58
    25fc:	c9 f0       	breq	.+50     	; 0x2630 <pwr_adj_on+0x48>
    25fe:	8c 33       	cpi	r24, 0x3C	; 60
    2600:	e1 f0       	breq	.+56     	; 0x263a <pwr_adj_on+0x52>
    2602:	83 30       	cpi	r24, 0x03	; 3
    2604:	01 f5       	brne	.+64     	; 0x2646 <pwr_adj_on+0x5e>
    2606:	0f c0       	rjmp	.+30     	; 0x2626 <pwr_adj_on+0x3e>
		case CHANNEL_A:
			PORTH.OUTSET = _BV(1);
    2608:	82 e0       	ldi	r24, 0x02	; 2
    260a:	e0 ee       	ldi	r30, 0xE0	; 224
    260c:	f6 e0       	ldi	r31, 0x06	; 6
    260e:	85 83       	std	Z+5, r24	; 0x05
			break;
    2610:	08 95       	ret
		case CHANNEL_B:
			PORTH.OUTSET = _BV(2);
    2612:	84 e0       	ldi	r24, 0x04	; 4
    2614:	e0 ee       	ldi	r30, 0xE0	; 224
    2616:	f6 e0       	ldi	r31, 0x06	; 6
    2618:	85 83       	std	Z+5, r24	; 0x05
			break;
    261a:	08 95       	ret
		case CHANNEL_C:
			PORTH.OUTSET = _BV(3);
    261c:	88 e0       	ldi	r24, 0x08	; 8
    261e:	e0 ee       	ldi	r30, 0xE0	; 224
    2620:	f6 e0       	ldi	r31, 0x06	; 6
    2622:	85 83       	std	Z+5, r24	; 0x05
			break;
    2624:	08 95       	ret
		case CHANNEL_D:
			PORTH.OUTSET = _BV(4);
    2626:	80 e1       	ldi	r24, 0x10	; 16
    2628:	e0 ee       	ldi	r30, 0xE0	; 224
    262a:	f6 e0       	ldi	r31, 0x06	; 6
    262c:	85 83       	std	Z+5, r24	; 0x05
			break;
    262e:	08 95       	ret
		case CHANNEL_ALL:
			PORTH.OUTSET = B8(00011110);
    2630:	8e e1       	ldi	r24, 0x1E	; 30
    2632:	e0 ee       	ldi	r30, 0xE0	; 224
    2634:	f6 e0       	ldi	r31, 0x06	; 6
    2636:	85 83       	std	Z+5, r24	; 0x05
			break;
    2638:	08 95       	ret
		case CHANNEL_RESTORE:
			PORTH.OUTSET = STATE_power_channels << 1; //[000DCBA0] align to port
    263a:	80 91 a4 25 	lds	r24, 0x25A4
    263e:	88 0f       	add	r24, r24
    2640:	e0 ee       	ldi	r30, 0xE0	; 224
    2642:	f6 e0       	ldi	r31, 0x06	; 6
    2644:	85 83       	std	Z+5, r24	; 0x05
    2646:	08 95       	ret

00002648 <pwr_adj_off>:
			break;
	}
}
void pwr_adj_off(uint8_t channel){
	switch(channel){
    2648:	82 30       	cpi	r24, 0x02	; 2
    264a:	b1 f0       	breq	.+44     	; 0x2678 <pwr_adj_off+0x30>
    264c:	83 30       	cpi	r24, 0x03	; 3
    264e:	28 f4       	brcc	.+10     	; 0x265a <pwr_adj_off+0x12>
    2650:	88 23       	and	r24, r24
    2652:	41 f0       	breq	.+16     	; 0x2664 <pwr_adj_off+0x1c>
    2654:	81 30       	cpi	r24, 0x01	; 1
    2656:	f1 f4       	brne	.+60     	; 0x2694 <pwr_adj_off+0x4c>
    2658:	0a c0       	rjmp	.+20     	; 0x266e <pwr_adj_off+0x26>
    265a:	83 30       	cpi	r24, 0x03	; 3
    265c:	91 f0       	breq	.+36     	; 0x2682 <pwr_adj_off+0x3a>
    265e:	8a 33       	cpi	r24, 0x3A	; 58
    2660:	c9 f4       	brne	.+50     	; 0x2694 <pwr_adj_off+0x4c>
    2662:	14 c0       	rjmp	.+40     	; 0x268c <pwr_adj_off+0x44>
		case CHANNEL_A:
			PORTH.OUTCLR = _BV(1);
    2664:	82 e0       	ldi	r24, 0x02	; 2
    2666:	e0 ee       	ldi	r30, 0xE0	; 224
    2668:	f6 e0       	ldi	r31, 0x06	; 6
    266a:	86 83       	std	Z+6, r24	; 0x06
			break;
    266c:	08 95       	ret
		case CHANNEL_B:
			PORTH.OUTCLR = _BV(2);
    266e:	84 e0       	ldi	r24, 0x04	; 4
    2670:	e0 ee       	ldi	r30, 0xE0	; 224
    2672:	f6 e0       	ldi	r31, 0x06	; 6
    2674:	86 83       	std	Z+6, r24	; 0x06
			break;
    2676:	08 95       	ret
		case CHANNEL_C:
			PORTH.OUTCLR = _BV(3);
    2678:	88 e0       	ldi	r24, 0x08	; 8
    267a:	e0 ee       	ldi	r30, 0xE0	; 224
    267c:	f6 e0       	ldi	r31, 0x06	; 6
    267e:	86 83       	std	Z+6, r24	; 0x06
			break;
    2680:	08 95       	ret
		case CHANNEL_D:
			PORTH.OUTCLR = _BV(4);
    2682:	80 e1       	ldi	r24, 0x10	; 16
    2684:	e0 ee       	ldi	r30, 0xE0	; 224
    2686:	f6 e0       	ldi	r31, 0x06	; 6
    2688:	86 83       	std	Z+6, r24	; 0x06
			break;
    268a:	08 95       	ret
		case CHANNEL_ALL:
			PORTH.OUTCLR = B8(00011110);
    268c:	8e e1       	ldi	r24, 0x1E	; 30
    268e:	e0 ee       	ldi	r30, 0xE0	; 224
    2690:	f6 e0       	ldi	r31, 0x06	; 6
    2692:	86 83       	std	Z+6, r24	; 0x06
    2694:	08 95       	ret

00002696 <pwr_adj_change>:
	}
}

//Will drop (ignore) this value change request if in the middle of writing a different value to the channel
void pwr_adj_change(uint8_t channel_num, uint16_t new_value){
	if ((pwr_adj_spi_state == PWR_ADJ_SPI_IDLE) || (pwr_adj_channel_num_in_progress != channel_num)){
    2696:	90 91 e1 26 	lds	r25, 0x26E1
    269a:	99 23       	and	r25, r25
    269c:	21 f0       	breq	.+8      	; 0x26a6 <pwr_adj_change+0x10>
    269e:	20 91 cf 26 	lds	r18, 0x26CF
    26a2:	28 17       	cp	r18, r24
    26a4:	39 f1       	breq	.+78     	; 0x26f4 <pwr_adj_change+0x5e>
		pwr_adj_channel_dirty |= _BV(channel_num); //mark this channel for update to screen
    26a6:	e8 2f       	mov	r30, r24
    26a8:	f0 e0       	ldi	r31, 0x00	; 0
    26aa:	21 e0       	ldi	r18, 0x01	; 1
    26ac:	30 e0       	ldi	r19, 0x00	; 0
    26ae:	08 2e       	mov	r0, r24
    26b0:	02 c0       	rjmp	.+4      	; 0x26b6 <pwr_adj_change+0x20>
    26b2:	22 0f       	add	r18, r18
    26b4:	33 1f       	adc	r19, r19
    26b6:	0a 94       	dec	r0
    26b8:	e2 f7       	brpl	.-8      	; 0x26b2 <pwr_adj_change+0x1c>
    26ba:	42 2f       	mov	r20, r18
    26bc:	20 91 e3 26 	lds	r18, 0x26E3
    26c0:	24 2b       	or	r18, r20
    26c2:	20 93 e3 26 	sts	0x26E3, r18
		if (new_value >= 1024){new_value = 1023;} //sanity check
		pwr_adj_values[channel_num] = new_value; //buffer value
    26c6:	ee 0f       	add	r30, r30
    26c8:	ff 1f       	adc	r31, r31
    26ca:	ec 51       	subi	r30, 0x1C	; 28
    26cc:	f9 4d       	sbci	r31, 0xD9	; 217
    26ce:	26 2f       	mov	r18, r22
    26d0:	37 2f       	mov	r19, r23
    26d2:	54 e0       	ldi	r21, 0x04	; 4
    26d4:	20 30       	cpi	r18, 0x00	; 0
    26d6:	35 07       	cpc	r19, r21
    26d8:	10 f0       	brcs	.+4      	; 0x26de <pwr_adj_change+0x48>
    26da:	2f ef       	ldi	r18, 0xFF	; 255
    26dc:	33 e0       	ldi	r19, 0x03	; 3
    26de:	20 83       	st	Z, r18
    26e0:	31 83       	std	Z+1, r19	; 0x01
		pwr_adj_send_channels |= _BV(channel_num); //flag channel for transmission
    26e2:	20 91 c9 26 	lds	r18, 0x26C9
    26e6:	42 2b       	or	r20, r18
    26e8:	40 93 c9 26 	sts	0x26C9, r20
		if (pwr_adj_spi_state == PWR_ADJ_SPI_IDLE){pwr_adj_spi_send(channel_num);}
    26ec:	99 23       	and	r25, r25
    26ee:	11 f4       	brne	.+4      	; 0x26f4 <pwr_adj_change+0x5e>
    26f0:	0e 94 96 12 	call	0x252c	; 0x252c <pwr_adj_spi_send>
    26f4:	08 95       	ret

000026f6 <pwr_adj_change_increment>:
	}	
}

//QUAD_DOWN = CLOCKWISE, ergo it is more natural to make this INCREASE the counters
void pwr_adj_change_increment(uint8_t channel_num, uint8_t which_way){
	if ((which_way == QUAD_DOWN) && (pwr_adj_values[channel_num]<1024)) pwr_adj_values[channel_num]++;
    26f6:	6e 32       	cpi	r22, 0x2E	; 46
    26f8:	b9 f4       	brne	.+46     	; 0x2728 <pwr_adj_change_increment+0x32>
    26fa:	28 2f       	mov	r18, r24
    26fc:	30 e0       	ldi	r19, 0x00	; 0
    26fe:	f9 01       	movw	r30, r18
    2700:	ee 0f       	add	r30, r30
    2702:	ff 1f       	adc	r31, r31
    2704:	ec 51       	subi	r30, 0x1C	; 28
    2706:	f9 4d       	sbci	r31, 0xD9	; 217
    2708:	40 81       	ld	r20, Z
    270a:	51 81       	ldd	r21, Z+1	; 0x01
    270c:	94 e0       	ldi	r25, 0x04	; 4
    270e:	40 30       	cpi	r20, 0x00	; 0
    2710:	59 07       	cpc	r21, r25
    2712:	08 f5       	brcc	.+66     	; 0x2756 <pwr_adj_change_increment+0x60>
    2714:	f9 01       	movw	r30, r18
    2716:	ee 0f       	add	r30, r30
    2718:	ff 1f       	adc	r31, r31
    271a:	ec 51       	subi	r30, 0x1C	; 28
    271c:	f9 4d       	sbci	r31, 0xD9	; 217
    271e:	4f 5f       	subi	r20, 0xFF	; 255
    2720:	5f 4f       	sbci	r21, 0xFF	; 255
    2722:	40 83       	st	Z, r20
    2724:	51 83       	std	Z+1, r21	; 0x01
    2726:	17 c0       	rjmp	.+46     	; 0x2756 <pwr_adj_change_increment+0x60>
	if ((which_way == QUAD_UP) && (pwr_adj_values[channel_num]>0)) pwr_adj_values[channel_num]--;
    2728:	6d 32       	cpi	r22, 0x2D	; 45
    272a:	a9 f4       	brne	.+42     	; 0x2756 <pwr_adj_change_increment+0x60>
    272c:	28 2f       	mov	r18, r24
    272e:	30 e0       	ldi	r19, 0x00	; 0
    2730:	f9 01       	movw	r30, r18
    2732:	ee 0f       	add	r30, r30
    2734:	ff 1f       	adc	r31, r31
    2736:	ec 51       	subi	r30, 0x1C	; 28
    2738:	f9 4d       	sbci	r31, 0xD9	; 217
    273a:	40 81       	ld	r20, Z
    273c:	51 81       	ldd	r21, Z+1	; 0x01
    273e:	41 15       	cp	r20, r1
    2740:	51 05       	cpc	r21, r1
    2742:	49 f0       	breq	.+18     	; 0x2756 <pwr_adj_change_increment+0x60>
    2744:	f9 01       	movw	r30, r18
    2746:	ee 0f       	add	r30, r30
    2748:	ff 1f       	adc	r31, r31
    274a:	ec 51       	subi	r30, 0x1C	; 28
    274c:	f9 4d       	sbci	r31, 0xD9	; 217
    274e:	41 50       	subi	r20, 0x01	; 1
    2750:	50 40       	sbci	r21, 0x00	; 0
    2752:	40 83       	st	Z, r20
    2754:	51 83       	std	Z+1, r21	; 0x01
	pwr_adj_change(channel_num, pwr_adj_values[channel_num]);
    2756:	e8 2f       	mov	r30, r24
    2758:	f0 e0       	ldi	r31, 0x00	; 0
    275a:	ee 0f       	add	r30, r30
    275c:	ff 1f       	adc	r31, r31
    275e:	ec 51       	subi	r30, 0x1C	; 28
    2760:	f9 4d       	sbci	r31, 0xD9	; 217
    2762:	60 81       	ld	r22, Z
    2764:	71 81       	ldd	r23, Z+1	; 0x01
    2766:	0e 94 4b 13 	call	0x2696	; 0x2696 <pwr_adj_change>
}
    276a:	08 95       	ret

0000276c <pwr_adj_touch_dial>:
//#############################################################
//## SELECTION AND TOUCH PANEL
//#############################################################

inline void pwr_adj_touch_dial(uint8_t which_one){
	pwr_adj_left_right = which_one;
    276c:	80 93 ce 26 	sts	0x26CE, r24
}
    2770:	08 95       	ret

00002772 <_pwr_adj_data>:
//## DISPLAY ROUTINES
//#############################################################

//Calculate the output for the first voltage divider
float _pwr_adj_data(uint8_t channel_num){
	return PWR_ADJ_SUPPLY_VOLTAGE * (float)pwr_adj_values[channel_num]/1023;
    2772:	e8 2f       	mov	r30, r24
    2774:	f0 e0       	ldi	r31, 0x00	; 0
    2776:	ee 0f       	add	r30, r30
    2778:	ff 1f       	adc	r31, r31
    277a:	ec 51       	subi	r30, 0x1C	; 28
    277c:	f9 4d       	sbci	r31, 0xD9	; 217
    277e:	60 81       	ld	r22, Z
    2780:	71 81       	ldd	r23, Z+1	; 0x01
    2782:	80 e0       	ldi	r24, 0x00	; 0
    2784:	90 e0       	ldi	r25, 0x00	; 0
    2786:	0e 94 18 31 	call	0x6230	; 0x6230 <__floatunsisf>
    278a:	20 e0       	ldi	r18, 0x00	; 0
    278c:	30 e0       	ldi	r19, 0x00	; 0
    278e:	40 ea       	ldi	r20, 0xA0	; 160
    2790:	50 e4       	ldi	r21, 0x40	; 64
    2792:	0e 94 ca 31 	call	0x6394	; 0x6394 <__mulsf3>
    2796:	20 e0       	ldi	r18, 0x00	; 0
    2798:	30 ec       	ldi	r19, 0xC0	; 192
    279a:	4f e7       	ldi	r20, 0x7F	; 127
    279c:	54 e4       	ldi	r21, 0x44	; 68
    279e:	0e 94 7f 30 	call	0x60fe	; 0x60fe <__divsf3>
}
    27a2:	46 2f       	mov	r20, r22
    27a4:	57 2f       	mov	r21, r23
    27a6:	68 2f       	mov	r22, r24
    27a8:	79 2f       	mov	r23, r25
    27aa:	cb 01       	movw	r24, r22
    27ac:	ba 01       	movw	r22, r20
    27ae:	08 95       	ret

000027b0 <pwr_adj_data>:

void pwr_adj_data(uint8_t channel_num, char* result){
    27b0:	cf 92       	push	r12
    27b2:	df 92       	push	r13
    27b4:	ef 92       	push	r14
    27b6:	ff 92       	push	r15
    27b8:	1f 93       	push	r17
    27ba:	cf 93       	push	r28
    27bc:	df 93       	push	r29
    27be:	18 2f       	mov	r17, r24
    27c0:	eb 01       	movw	r28, r22
	if ((channel_num % 2)==0){
    27c2:	80 fd       	sbrc	r24, 0
    27c4:	08 c0       	rjmp	.+16     	; 0x27d6 <pwr_adj_data+0x26>
		//channel_num is 0,2,4,etc...
		adc_ftoa(_pwr_adj_data(channel_num), 1000, result);
    27c6:	0e 94 b9 13 	call	0x2772	; 0x2772 <_pwr_adj_data>
    27ca:	48 ee       	ldi	r20, 0xE8	; 232
    27cc:	53 e0       	ldi	r21, 0x03	; 3
    27ce:	9e 01       	movw	r18, r28
    27d0:	0e 94 ad 01 	call	0x35a	; 0x35a <adc_ftoa>
    27d4:	22 c0       	rjmp	.+68     	; 0x281a <pwr_adj_data+0x6a>
	}
	else{
		//channel_num is 1,3,5,etc...
		adc_ftoa(_pwr_adj_data(channel_num-1)*(float)pwr_adj_values[channel_num]/1023, 1000, result);		
    27d6:	81 50       	subi	r24, 0x01	; 1
    27d8:	0e 94 b9 13 	call	0x2772	; 0x2772 <_pwr_adj_data>
    27dc:	6b 01       	movw	r12, r22
    27de:	7c 01       	movw	r14, r24
    27e0:	e1 2f       	mov	r30, r17
    27e2:	f0 e0       	ldi	r31, 0x00	; 0
    27e4:	ee 0f       	add	r30, r30
    27e6:	ff 1f       	adc	r31, r31
    27e8:	ec 51       	subi	r30, 0x1C	; 28
    27ea:	f9 4d       	sbci	r31, 0xD9	; 217
    27ec:	60 81       	ld	r22, Z
    27ee:	71 81       	ldd	r23, Z+1	; 0x01
    27f0:	80 e0       	ldi	r24, 0x00	; 0
    27f2:	90 e0       	ldi	r25, 0x00	; 0
    27f4:	0e 94 18 31 	call	0x6230	; 0x6230 <__floatunsisf>
    27f8:	9b 01       	movw	r18, r22
    27fa:	ac 01       	movw	r20, r24
    27fc:	c7 01       	movw	r24, r14
    27fe:	b6 01       	movw	r22, r12
    2800:	0e 94 ca 31 	call	0x6394	; 0x6394 <__mulsf3>
    2804:	20 e0       	ldi	r18, 0x00	; 0
    2806:	30 ec       	ldi	r19, 0xC0	; 192
    2808:	4f e7       	ldi	r20, 0x7F	; 127
    280a:	54 e4       	ldi	r21, 0x44	; 68
    280c:	0e 94 7f 30 	call	0x60fe	; 0x60fe <__divsf3>
    2810:	48 ee       	ldi	r20, 0xE8	; 232
    2812:	53 e0       	ldi	r21, 0x03	; 3
    2814:	9e 01       	movw	r18, r28
    2816:	0e 94 ad 01 	call	0x35a	; 0x35a <adc_ftoa>
	}
}	
    281a:	df 91       	pop	r29
    281c:	cf 91       	pop	r28
    281e:	1f 91       	pop	r17
    2820:	ff 90       	pop	r15
    2822:	ef 90       	pop	r14
    2824:	df 90       	pop	r13
    2826:	cf 90       	pop	r12
    2828:	08 95       	ret

0000282a <pwr_adj_control>:

void pwr_adj_control(uint8_t channel_num, char* result){
	utoa(pwr_adj_values[channel_num], result, 10);
    282a:	e8 2f       	mov	r30, r24
    282c:	f0 e0       	ldi	r31, 0x00	; 0
    282e:	ee 0f       	add	r30, r30
    2830:	ff 1f       	adc	r31, r31
    2832:	ec 51       	subi	r30, 0x1C	; 28
    2834:	f9 4d       	sbci	r31, 0xD9	; 217
    2836:	80 81       	ld	r24, Z
    2838:	91 81       	ldd	r25, Z+1	; 0x01
    283a:	4a e0       	ldi	r20, 0x0A	; 10
    283c:	50 e0       	ldi	r21, 0x00	; 0
    283e:	0e 94 53 32 	call	0x64a6	; 0x64a6 <utoa>
}
    2842:	08 95       	ret

00002844 <__vector_87>:

//#############################################################
//## SERVICE ROUTINES
//#############################################################

ISR(SPID_INT_vect){
    2844:	1f 92       	push	r1
    2846:	0f 92       	push	r0
    2848:	0f b6       	in	r0, 0x3f	; 63
    284a:	0f 92       	push	r0
    284c:	08 b6       	in	r0, 0x38	; 56
    284e:	0f 92       	push	r0
    2850:	09 b6       	in	r0, 0x39	; 57
    2852:	0f 92       	push	r0
    2854:	0b b6       	in	r0, 0x3b	; 59
    2856:	0f 92       	push	r0
    2858:	11 24       	eor	r1, r1
    285a:	2f 93       	push	r18
    285c:	3f 93       	push	r19
    285e:	4f 93       	push	r20
    2860:	5f 93       	push	r21
    2862:	6f 93       	push	r22
    2864:	7f 93       	push	r23
    2866:	8f 93       	push	r24
    2868:	9f 93       	push	r25
    286a:	af 93       	push	r26
    286c:	bf 93       	push	r27
    286e:	ef 93       	push	r30
    2870:	ff 93       	push	r31
	led_on(LED_1);
    2872:	81 e0       	ldi	r24, 0x01	; 1
    2874:	0e 94 a6 2f 	call	0x5f4c	; 0x5f4c <led_on>
	switch(pwr_adj_spi_state){
    2878:	80 91 e1 26 	lds	r24, 0x26E1
    287c:	82 30       	cpi	r24, 0x02	; 2
    287e:	c9 f0       	breq	.+50     	; 0x28b2 <__vector_87+0x6e>
    2880:	83 30       	cpi	r24, 0x03	; 3
    2882:	39 f1       	breq	.+78     	; 0x28d2 <__vector_87+0x8e>
    2884:	81 30       	cpi	r24, 0x01	; 1
    2886:	09 f0       	breq	.+2      	; 0x288a <__vector_87+0x46>
    2888:	47 c0       	rjmp	.+142    	; 0x2918 <__vector_87+0xd4>
		case PWR_ADJ_SPI_COMMAND:
			//finished sending first byte... send next
			pwr_adj_spi_state = PWR_ADJ_SPI_DATAH;
    288a:	82 e0       	ldi	r24, 0x02	; 2
    288c:	80 93 e1 26 	sts	0x26E1, r24
			SPID.DATA = (uint8_t)(pwr_adj_values[pwr_adj_channel_num_in_progress] >> 2); //extract the 8 MSb's from the 10-bit number
    2890:	e0 91 cf 26 	lds	r30, 0x26CF
    2894:	f0 e0       	ldi	r31, 0x00	; 0
    2896:	ee 0f       	add	r30, r30
    2898:	ff 1f       	adc	r31, r31
    289a:	ec 51       	subi	r30, 0x1C	; 28
    289c:	f9 4d       	sbci	r31, 0xD9	; 217
    289e:	80 81       	ld	r24, Z
    28a0:	91 81       	ldd	r25, Z+1	; 0x01
    28a2:	96 95       	lsr	r25
    28a4:	87 95       	ror	r24
    28a6:	96 95       	lsr	r25
    28a8:	87 95       	ror	r24
    28aa:	e0 ec       	ldi	r30, 0xC0	; 192
    28ac:	f9 e0       	ldi	r31, 0x09	; 9
    28ae:	83 83       	std	Z+3, r24	; 0x03
			break;
    28b0:	33 c0       	rjmp	.+102    	; 0x2918 <__vector_87+0xd4>
		case PWR_ADJ_SPI_DATAH:
			//finished sending second byte... send next
			pwr_adj_spi_state = PWR_ADJ_SPI_DATAL;
    28b2:	83 e0       	ldi	r24, 0x03	; 3
    28b4:	80 93 e1 26 	sts	0x26E1, r24
			SPID.DATA = (uint8_t)(pwr_adj_values[pwr_adj_channel_num_in_progress]) & B8(00000011); //extract the 2 LSb's from the 10-bit number
    28b8:	e0 91 cf 26 	lds	r30, 0x26CF
    28bc:	f0 e0       	ldi	r31, 0x00	; 0
    28be:	ee 0f       	add	r30, r30
    28c0:	ff 1f       	adc	r31, r31
    28c2:	ec 51       	subi	r30, 0x1C	; 28
    28c4:	f9 4d       	sbci	r31, 0xD9	; 217
    28c6:	80 81       	ld	r24, Z
    28c8:	83 70       	andi	r24, 0x03	; 3
    28ca:	e0 ec       	ldi	r30, 0xC0	; 192
    28cc:	f9 e0       	ldi	r31, 0x09	; 9
    28ce:	83 83       	std	Z+3, r24	; 0x03
			break;
    28d0:	23 c0       	rjmp	.+70     	; 0x2918 <__vector_87+0xd4>
		case PWR_ADJ_SPI_DATAL:
			//finished sending third byte... all done!
			//DESELECT
			switch(pwr_adj_channel_num_in_progress){
    28d2:	80 91 cf 26 	lds	r24, 0x26CF
    28d6:	84 30       	cpi	r24, 0x04	; 4
    28d8:	18 f4       	brcc	.+6      	; 0x28e0 <__vector_87+0x9c>
    28da:	82 30       	cpi	r24, 0x02	; 2
    28dc:	58 f4       	brcc	.+22     	; 0x28f4 <__vector_87+0xb0>
    28de:	05 c0       	rjmp	.+10     	; 0x28ea <__vector_87+0xa6>
    28e0:	86 30       	cpi	r24, 0x06	; 6
    28e2:	68 f0       	brcs	.+26     	; 0x28fe <__vector_87+0xba>
    28e4:	88 30       	cpi	r24, 0x08	; 8
    28e6:	a0 f4       	brcc	.+40     	; 0x2910 <__vector_87+0xcc>
    28e8:	0f c0       	rjmp	.+30     	; 0x2908 <__vector_87+0xc4>
				case 0:
				case 1:
				PORTD.OUTSET = _BV(0); //CS high, done transmitting
    28ea:	81 e0       	ldi	r24, 0x01	; 1
    28ec:	e0 e6       	ldi	r30, 0x60	; 96
    28ee:	f6 e0       	ldi	r31, 0x06	; 6
    28f0:	85 83       	std	Z+5, r24	; 0x05
				break;
    28f2:	0e c0       	rjmp	.+28     	; 0x2910 <__vector_87+0xcc>
				case 2:
				case 3:
				PORTD.OUTSET = _BV(1); //CS high, done transmitting
    28f4:	82 e0       	ldi	r24, 0x02	; 2
    28f6:	e0 e6       	ldi	r30, 0x60	; 96
    28f8:	f6 e0       	ldi	r31, 0x06	; 6
    28fa:	85 83       	std	Z+5, r24	; 0x05
				break;
    28fc:	09 c0       	rjmp	.+18     	; 0x2910 <__vector_87+0xcc>
				case 4:
				case 5:
				PORTD.OUTSET = _BV(2); //CS high, done transmitting
    28fe:	84 e0       	ldi	r24, 0x04	; 4
    2900:	e0 e6       	ldi	r30, 0x60	; 96
    2902:	f6 e0       	ldi	r31, 0x06	; 6
    2904:	85 83       	std	Z+5, r24	; 0x05
				break;
    2906:	04 c0       	rjmp	.+8      	; 0x2910 <__vector_87+0xcc>
				case 6:
				case 7:
				PORTD.OUTSET = _BV(3); //CS high, done transmitting
    2908:	88 e0       	ldi	r24, 0x08	; 8
    290a:	e0 e6       	ldi	r30, 0x60	; 96
    290c:	f6 e0       	ldi	r31, 0x06	; 6
    290e:	85 83       	std	Z+5, r24	; 0x05
				break;
			}
			//Select Next Channel
			pwr_adj_spi_state = PWR_ADJ_SPI_IDLE;
    2910:	10 92 e1 26 	sts	0x26E1, r1
			_pwr_adj_next();
    2914:	0e 94 c4 12 	call	0x2588	; 0x2588 <_pwr_adj_next>
		case PWR_ADJ_SPI_IDLE:
		default:
			//do nothing
			break;
	}
}
    2918:	ff 91       	pop	r31
    291a:	ef 91       	pop	r30
    291c:	bf 91       	pop	r27
    291e:	af 91       	pop	r26
    2920:	9f 91       	pop	r25
    2922:	8f 91       	pop	r24
    2924:	7f 91       	pop	r23
    2926:	6f 91       	pop	r22
    2928:	5f 91       	pop	r21
    292a:	4f 91       	pop	r20
    292c:	3f 91       	pop	r19
    292e:	2f 91       	pop	r18
    2930:	0f 90       	pop	r0
    2932:	0b be       	out	0x3b, r0	; 59
    2934:	0f 90       	pop	r0
    2936:	09 be       	out	0x39, r0	; 57
    2938:	0f 90       	pop	r0
    293a:	08 be       	out	0x38, r0	; 56
    293c:	0f 90       	pop	r0
    293e:	0f be       	out	0x3f, r0	; 63
    2940:	0f 90       	pop	r0
    2942:	1f 90       	pop	r1
    2944:	18 95       	reti

00002946 <service_pwr_adjust>:

void service_pwr_adjust(){	
	
}
    2946:	08 95       	ret

00002948 <init_pwr_main>:

//Handles control of the main power channels

void init_pwr_main(){
	//LED's are located at PF0 (Lower) and PF1 (Upper)
	PORTC.DIRSET = B8(00110011); //pins 0,1,4,5 to output
    2948:	e0 e4       	ldi	r30, 0x40	; 64
    294a:	f6 e0       	ldi	r31, 0x06	; 6
    294c:	83 e3       	ldi	r24, 0x33	; 51
    294e:	81 83       	std	Z+1, r24	; 0x01
	PORTC.OUTCLR = B8(00110011); //pins 0,1,4,5 to low output value (off)
    2950:	86 83       	std	Z+6, r24	; 0x06
		break;
		case CHANNEL_D:
		PORTC.OUTCLR = B8(00100000);
		break;
		case CHANNEL_ALL:
		PORTC.OUTCLR = B8(00110011);
    2952:	86 83       	std	Z+6, r24	; 0x06
void init_pwr_main(){
	//LED's are located at PF0 (Lower) and PF1 (Upper)
	PORTC.DIRSET = B8(00110011); //pins 0,1,4,5 to output
	PORTC.OUTCLR = B8(00110011); //pins 0,1,4,5 to low output value (off)
	pwr_main_off(CHANNEL_ALL);				
}
    2954:	08 95       	ret

00002956 <pwr_main_on>:
//## OUTPUT MUTE
//#############################################################

void inline pwr_main_on(uint8_t which){
	uint8_t mask;
	switch(which){
    2956:	82 30       	cpi	r24, 0x02	; 2
    2958:	c1 f0       	breq	.+48     	; 0x298a <pwr_main_on+0x34>
    295a:	83 30       	cpi	r24, 0x03	; 3
    295c:	28 f4       	brcc	.+10     	; 0x2968 <pwr_main_on+0x12>
    295e:	88 23       	and	r24, r24
    2960:	51 f0       	breq	.+20     	; 0x2976 <pwr_main_on+0x20>
    2962:	81 30       	cpi	r24, 0x01	; 1
    2964:	69 f5       	brne	.+90     	; 0x29c0 <pwr_main_on+0x6a>
    2966:	0c c0       	rjmp	.+24     	; 0x2980 <pwr_main_on+0x2a>
    2968:	8a 33       	cpi	r24, 0x3A	; 58
    296a:	c9 f0       	breq	.+50     	; 0x299e <pwr_main_on+0x48>
    296c:	8c 33       	cpi	r24, 0x3C	; 60
    296e:	e1 f0       	breq	.+56     	; 0x29a8 <pwr_main_on+0x52>
    2970:	83 30       	cpi	r24, 0x03	; 3
    2972:	31 f5       	brne	.+76     	; 0x29c0 <pwr_main_on+0x6a>
    2974:	0f c0       	rjmp	.+30     	; 0x2994 <pwr_main_on+0x3e>
		case CHANNEL_A:
			PORTC.OUTSET = B8(00000001);
    2976:	81 e0       	ldi	r24, 0x01	; 1
    2978:	e0 e4       	ldi	r30, 0x40	; 64
    297a:	f6 e0       	ldi	r31, 0x06	; 6
    297c:	85 83       	std	Z+5, r24	; 0x05
			break;
    297e:	08 95       	ret
		case CHANNEL_B:
			PORTC.OUTSET = B8(00000010);
    2980:	82 e0       	ldi	r24, 0x02	; 2
    2982:	e0 e4       	ldi	r30, 0x40	; 64
    2984:	f6 e0       	ldi	r31, 0x06	; 6
    2986:	85 83       	std	Z+5, r24	; 0x05
			break;
    2988:	08 95       	ret
		case CHANNEL_C:
			PORTC.OUTSET = B8(00010000);
    298a:	80 e1       	ldi	r24, 0x10	; 16
    298c:	e0 e4       	ldi	r30, 0x40	; 64
    298e:	f6 e0       	ldi	r31, 0x06	; 6
    2990:	85 83       	std	Z+5, r24	; 0x05
			break;
    2992:	08 95       	ret
		case CHANNEL_D:
			PORTC.OUTSET = B8(00100000);
    2994:	80 e2       	ldi	r24, 0x20	; 32
    2996:	e0 e4       	ldi	r30, 0x40	; 64
    2998:	f6 e0       	ldi	r31, 0x06	; 6
    299a:	85 83       	std	Z+5, r24	; 0x05
			break;
    299c:	08 95       	ret
		case CHANNEL_ALL:
			PORTC.OUTSET = B8(00110011);
    299e:	83 e3       	ldi	r24, 0x33	; 51
    29a0:	e0 e4       	ldi	r30, 0x40	; 64
    29a2:	f6 e0       	ldi	r31, 0x06	; 6
    29a4:	85 83       	std	Z+5, r24	; 0x05
			break;
    29a6:	08 95       	ret
		case CHANNEL_RESTORE:
			mask = STATE_power_channels >> 2; //[000000DC] remove lower channels
    29a8:	80 91 a4 25 	lds	r24, 0x25A4
    29ac:	98 2f       	mov	r25, r24
    29ae:	96 95       	lsr	r25
    29b0:	96 95       	lsr	r25
			mask = mask << 4; //[00DC0000] position upper channels
    29b2:	92 95       	swap	r25
    29b4:	90 7f       	andi	r25, 0xF0	; 240
			mask |= (STATE_power_channels & B8(00000011)); //[00DC00BA] merge in lower channels
    29b6:	83 70       	andi	r24, 0x03	; 3
    29b8:	89 2b       	or	r24, r25
			PORTC.OUTSET = mask;
    29ba:	e0 e4       	ldi	r30, 0x40	; 64
    29bc:	f6 e0       	ldi	r31, 0x06	; 6
    29be:	85 83       	std	Z+5, r24	; 0x05
    29c0:	08 95       	ret

000029c2 <pwr_main_off>:
			break;
	}
}

void inline pwr_main_off(uint8_t which){
	switch(which){
    29c2:	82 30       	cpi	r24, 0x02	; 2
    29c4:	b1 f0       	breq	.+44     	; 0x29f2 <pwr_main_off+0x30>
    29c6:	83 30       	cpi	r24, 0x03	; 3
    29c8:	28 f4       	brcc	.+10     	; 0x29d4 <pwr_main_off+0x12>
    29ca:	88 23       	and	r24, r24
    29cc:	41 f0       	breq	.+16     	; 0x29de <pwr_main_off+0x1c>
    29ce:	81 30       	cpi	r24, 0x01	; 1
    29d0:	f1 f4       	brne	.+60     	; 0x2a0e <pwr_main_off+0x4c>
    29d2:	0a c0       	rjmp	.+20     	; 0x29e8 <pwr_main_off+0x26>
    29d4:	83 30       	cpi	r24, 0x03	; 3
    29d6:	91 f0       	breq	.+36     	; 0x29fc <pwr_main_off+0x3a>
    29d8:	8a 33       	cpi	r24, 0x3A	; 58
    29da:	c9 f4       	brne	.+50     	; 0x2a0e <pwr_main_off+0x4c>
    29dc:	14 c0       	rjmp	.+40     	; 0x2a06 <pwr_main_off+0x44>
		case CHANNEL_A:
		PORTC.OUTCLR = B8(00000001);
    29de:	81 e0       	ldi	r24, 0x01	; 1
    29e0:	e0 e4       	ldi	r30, 0x40	; 64
    29e2:	f6 e0       	ldi	r31, 0x06	; 6
    29e4:	86 83       	std	Z+6, r24	; 0x06
		break;
    29e6:	08 95       	ret
		case CHANNEL_B:
		PORTC.OUTCLR = B8(00000010);
    29e8:	82 e0       	ldi	r24, 0x02	; 2
    29ea:	e0 e4       	ldi	r30, 0x40	; 64
    29ec:	f6 e0       	ldi	r31, 0x06	; 6
    29ee:	86 83       	std	Z+6, r24	; 0x06
		break;
    29f0:	08 95       	ret
		case CHANNEL_C:
		PORTC.OUTCLR = B8(00010000);
    29f2:	80 e1       	ldi	r24, 0x10	; 16
    29f4:	e0 e4       	ldi	r30, 0x40	; 64
    29f6:	f6 e0       	ldi	r31, 0x06	; 6
    29f8:	86 83       	std	Z+6, r24	; 0x06
		break;
    29fa:	08 95       	ret
		case CHANNEL_D:
		PORTC.OUTCLR = B8(00100000);
    29fc:	80 e2       	ldi	r24, 0x20	; 32
    29fe:	e0 e4       	ldi	r30, 0x40	; 64
    2a00:	f6 e0       	ldi	r31, 0x06	; 6
    2a02:	86 83       	std	Z+6, r24	; 0x06
		break;
    2a04:	08 95       	ret
		case CHANNEL_ALL:
		PORTC.OUTCLR = B8(00110011);
    2a06:	83 e3       	ldi	r24, 0x33	; 51
    2a08:	e0 e4       	ldi	r30, 0x40	; 64
    2a0a:	f6 e0       	ldi	r31, 0x06	; 6
    2a0c:	86 83       	std	Z+6, r24	; 0x06
    2a0e:	08 95       	ret

00002a10 <service_pwr_main>:
		break;
	}
}

void service_pwr_main(){
}
    2a10:	08 95       	ret

00002a12 <init_rtos_clock_external>:
#include "quadrature.h"
#include "eeprom.h"

int init_rtos_clock_external(void){
	//Boot up and configure oscillator
	OSC.XOSCCTRL = B8(00100010); //enable external 32kHz Xtal using low-power (e.g. low-swing) mode
    2a12:	e0 e5       	ldi	r30, 0x50	; 80
    2a14:	f0 e0       	ldi	r31, 0x00	; 0
    2a16:	82 e2       	ldi	r24, 0x22	; 34
    2a18:	82 83       	std	Z+2, r24	; 0x02
	OSC.CTRL = B8(00001011); //enable 32M-RC & External Xtal -- also "enable" 2M-RC since its already running b/c we booted from it and can't actually disable it until we switch sources
    2a1a:	8b e0       	ldi	r24, 0x0B	; 11
    2a1c:	80 83       	st	Z, r24
	//Wait for stability
	led_on(LED_0);
    2a1e:	80 e0       	ldi	r24, 0x00	; 0
    2a20:	0e 94 a6 2f 	call	0x5f4c	; 0x5f4c <led_on>
	//This is actually tricky sequencing because we boot from the 2MHz internal RC so previous write to OSC.CTRL was ineffective at shutting down the 2M-RC so OSC.STATUS will still reflect that it is running
	while(OSC.STATUS != B8(00001011)); //stall for external xtal and 32M-RC stability
    2a24:	e0 e5       	ldi	r30, 0x50	; 80
    2a26:	f0 e0       	ldi	r31, 0x00	; 0
    2a28:	81 81       	ldd	r24, Z+1	; 0x01
    2a2a:	8b 30       	cpi	r24, 0x0B	; 11
    2a2c:	e9 f7       	brne	.-6      	; 0x2a28 <init_rtos_clock_external+0x16>
	led_off(LED_0);
    2a2e:	80 e0       	ldi	r24, 0x00	; 0
    2a30:	0e 94 c2 2f 	call	0x5f84	; 0x5f84 <led_off>
	//Configure
	OSC.DFLLCTRL = B8(00000010); //use external xtal for 32M-RC calibration
    2a34:	e0 e5       	ldi	r30, 0x50	; 80
    2a36:	f0 e0       	ldi	r31, 0x00	; 0
    2a38:	82 e0       	ldi	r24, 0x02	; 2
    2a3a:	86 83       	std	Z+6, r24	; 0x06
	DFLLRC32M.CTRL = B8(00000001); //enable Xtal calibration of internal 32MHz RC oscillator
    2a3c:	81 e0       	ldi	r24, 0x01	; 1
    2a3e:	80 93 60 00 	sts	0x0060, r24
	//Switch system clock over to stable RC oscillator
	//Switch to 32M-RC as system clock source and disable the 2M-RC that we booted from.
	//----REQUIRES CONFIGURATION PROTECTION REGISTER
	CCP = CCP_IOREG_gc; //disable change protection for IO register
    2a42:	98 ed       	ldi	r25, 0xD8	; 216
    2a44:	94 bf       	out	0x34, r25	; 52
	CLK.CTRL = CLK_SCLKSEL_RC32M_gc;
    2a46:	80 93 40 00 	sts	0x0040, r24
	OSC.CTRL = B8(00001010); //re-execute this write -- this will shutdown the 2M-RC since we are no longer running from it.
    2a4a:	8a e0       	ldi	r24, 0x0A	; 10
    2a4c:	80 83       	st	Z, r24
	//Now running live at 32MHz
	return 0;
}
    2a4e:	80 e0       	ldi	r24, 0x00	; 0
    2a50:	90 e0       	ldi	r25, 0x00	; 0
    2a52:	08 95       	ret

00002a54 <init_rtos_clock_internal>:

int init_rtos_clock_internal(void){
	//Boot up and configure oscillator
	OSC.CTRL = B8(00000111); //enable 32M-RC & INTERNAL 32kHz -- also "enable" 2M-RC since its already running b/c we booted from it and can't actually disable it until we switch sources
    2a54:	87 e0       	ldi	r24, 0x07	; 7
    2a56:	80 93 50 00 	sts	0x0050, r24
	//Wait for stability
	led_on(LED_0);
    2a5a:	80 e0       	ldi	r24, 0x00	; 0
    2a5c:	0e 94 a6 2f 	call	0x5f4c	; 0x5f4c <led_on>
	//This is actually tricky sequencing because we boot from the 2MHz internal RC so previous write to OSC.CTRL was ineffective at shutting down the 2M-RC so OSC.STATUS will still reflect that it is running
	while(OSC.STATUS != B8(00000111)); //stall for INTERNAL 32k-RC and 32MHz-RC stability
    2a60:	e0 e5       	ldi	r30, 0x50	; 80
    2a62:	f0 e0       	ldi	r31, 0x00	; 0
    2a64:	81 81       	ldd	r24, Z+1	; 0x01
    2a66:	87 30       	cpi	r24, 0x07	; 7
    2a68:	e9 f7       	brne	.-6      	; 0x2a64 <init_rtos_clock_internal+0x10>
	led_off(LED_0);
    2a6a:	80 e0       	ldi	r24, 0x00	; 0
    2a6c:	0e 94 c2 2f 	call	0x5f84	; 0x5f84 <led_off>
	//Configure
	OSC.DFLLCTRL = B8(00000010); //use external xtal for 32M-RC calibration
    2a70:	e0 e5       	ldi	r30, 0x50	; 80
    2a72:	f0 e0       	ldi	r31, 0x00	; 0
    2a74:	82 e0       	ldi	r24, 0x02	; 2
    2a76:	86 83       	std	Z+6, r24	; 0x06
	DFLLRC32M.CTRL = B8(00000001); //enable Xtal calibration of internal 32MHz RC oscillator
    2a78:	81 e0       	ldi	r24, 0x01	; 1
    2a7a:	80 93 60 00 	sts	0x0060, r24
	//Switch system clock over to stable RC oscillator
	//Switch to 32M-RC as system clock source and disable the 2M-RC that we booted from.
	//----REQUIRES CONFIGURATION PROTECTION REGISTER
	CCP = CCP_IOREG_gc; //disable change protection for IO register
    2a7e:	98 ed       	ldi	r25, 0xD8	; 216
    2a80:	94 bf       	out	0x34, r25	; 52
	CLK.CTRL = CLK_SCLKSEL_RC32M_gc;
    2a82:	80 93 40 00 	sts	0x0040, r24
	OSC.CTRL = B8(00001010); //re-execute this write -- this will shutdown the 2M-RC since we are no longer running from it.
    2a86:	8a e0       	ldi	r24, 0x0A	; 10
    2a88:	80 83       	st	Z, r24
	//Now running live at 32MHz
	return 0;
}
    2a8a:	80 e0       	ldi	r24, 0x00	; 0
    2a8c:	90 e0       	ldi	r25, 0x00	; 0
    2a8e:	08 95       	ret

00002a90 <main>:
	//[BLINK ALIVE]
	uint8_t blah;
	int8_t updown;

	//[LED's, Button, & Switches]
	init_ui(); //init LED's first so that they are available for debugging
    2a90:	0e 94 10 30 	call	0x6020	; 0x6020 <init_ui>
	init_fp(); //init Front Panel LED's and Switches so that they are available for debugging
    2a94:	0e 94 41 09 	call	0x1282	; 0x1282 <init_fp>
	init_quadrature(); //init quadrature decoder for front panel rotary encoder
    2a98:	0e 94 cb 15 	call	0x2b96	; 0x2b96 <init_quadrature>
	
	//[CPU CLOCK]
	init_rtos_clock_internal();
    2a9c:	0e 94 2a 15 	call	0x2a54	; 0x2a54 <init_rtos_clock_internal>

	//[LCD]
	init_lcd();
    2aa0:	0e 94 47 0b 	call	0x168e	; 0x168e <init_lcd>
	init_lcd_console();
    2aa4:	0e 94 92 0c 	call	0x1924	; 0x1924 <init_lcd_console>
	init_lcd_touch();
    2aa8:	0e 94 8f 10 	call	0x211e	; 0x211e <init_lcd_touch>

	//[UARTs]
	init_uart(&uctrl, BAUD_115200);
    2aac:	80 ea       	ldi	r24, 0xA0	; 160
    2aae:	98 e0       	ldi	r25, 0x08	; 8
    2ab0:	60 e0       	ldi	r22, 0x00	; 0
    2ab2:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <init_uart>
	init_uart(&udata, BAUD_115200);
    2ab6:	80 eb       	ldi	r24, 0xB0	; 176
    2ab8:	98 e0       	ldi	r25, 0x08	; 8
    2aba:	60 e0       	ldi	r22, 0x00	; 0
    2abc:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <init_uart>
	init_uart(&ulcd, BAUD_115200);
    2ac0:	80 eb       	ldi	r24, 0xB0	; 176
    2ac2:	9b e0       	ldi	r25, 0x0B	; 11
    2ac4:	60 e0       	ldi	r22, 0x00	; 0
    2ac6:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <init_uart>
	init_uart_buffers();
    2aca:	0e 94 1a 2d 	call	0x5a34	; 0x5a34 <init_uart_buffers>
	
	//[ADC]
	init_adc();		
    2ace:	0e 94 58 01 	call	0x2b0	; 0x2b0 <init_adc>

	//[POWER PATH]
	init_pwr_main();
    2ad2:	0e 94 a4 14 	call	0x2948	; 0x2948 <init_pwr_main>
	init_pwr_adjust();
    2ad6:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <init_pwr_adjust>

	//[BRAIN]
	init_brain();
    2ada:	0e 94 07 04 	call	0x80e	; 0x80e <init_brain>
	
	//[EEPROM] -- do this last
	init_eeprom();
    2ade:	0e 94 38 09 	call	0x1270	; 0x1270 <init_eeprom>
		
	//[Realtime Loop Timer]
	//Use PortC's T/C0
	TCC0.CTRLA = 0x07; //Start the timer; Div1024 operation = 32M/1024 = 31250
    2ae2:	e0 e0       	ldi	r30, 0x00	; 0
    2ae4:	f8 e0       	ldi	r31, 0x08	; 8
    2ae6:	87 e0       	ldi	r24, 0x07	; 7
    2ae8:	80 83       	st	Z, r24
	TCC0.PER = 62; //2ms Loop Time
    2aea:	8e e3       	ldi	r24, 0x3E	; 62
    2aec:	90 e0       	ldi	r25, 0x00	; 0
    2aee:	86 a3       	lds	r24, 0x56
    2af0:	97 a3       	lds	r25, 0x57

	//[PMIC (Interrupt Controller)]
	PMIC.CTRL = B8(10000111); //enable all three interrupt levels (lowest one with round-robin)
    2af2:	87 e8       	ldi	r24, 0x87	; 135
    2af4:	e0 ea       	ldi	r30, 0xA0	; 160
    2af6:	f0 e0       	ldi	r31, 0x00	; 0
    2af8:	82 83       	std	Z+2, r24	; 0x02
	sei(); //ENABLE INTERRUPTS AND GO LIVE!
    2afa:	78 94       	sei

	//[RTOS START!]
	blah = 1;
	updown = 1;
	led_off(LED_0);
    2afc:	80 e0       	ldi	r24, 0x00	; 0
    2afe:	0e 94 c2 2f 	call	0x5f84	; 0x5f84 <led_off>
	led_off(LED_1);
    2b02:	81 e0       	ldi	r24, 0x01	; 1
    2b04:	0e 94 c2 2f 	call	0x5f84	; 0x5f84 <led_off>
	audio_beep(2, 100);
    2b08:	82 e0       	ldi	r24, 0x02	; 2
    2b0a:	64 e6       	ldi	r22, 0x64	; 100
    2b0c:	70 e0       	ldi	r23, 0x00	; 0
    2b0e:	0e 94 42 30 	call	0x6084	; 0x6084 <audio_beep>
	PORTE.DIRSET = B8(00000011); //PE0, PE1 to output pin for loop timer
    2b12:	e0 e8       	ldi	r30, 0x80	; 128
    2b14:	f6 e0       	ldi	r31, 0x06	; 6
    2b16:	83 e0       	ldi	r24, 0x03	; 3
    2b18:	81 83       	std	Z+1, r24	; 0x01

	while(1){
		PORTE.OUTSET = 0x02; //Set PE1 on start of loop and lower after work is done.
    2b1a:	82 e0       	ldi	r24, 0x02	; 2
    2b1c:	85 83       	std	Z+5, r24	; 0x05
		//Blink alive
		led_dim(LED_0, blah);	
    2b1e:	80 e0       	ldi	r24, 0x00	; 0
    2b20:	61 e0       	ldi	r22, 0x01	; 1
    2b22:	0e 94 d8 2f 	call	0x5fb0	; 0x5fb0 <led_dim>
		blah += updown;
    2b26:	12 e0       	ldi	r17, 0x02	; 2
	PMIC.CTRL = B8(10000111); //enable all three interrupt levels (lowest one with round-robin)
	sei(); //ENABLE INTERRUPTS AND GO LIVE!

	//[RTOS START!]
	blah = 1;
	updown = 1;
    2b28:	01 e0       	ldi	r16, 0x01	; 1
		led_dim(LED_0, blah);	
		blah += updown;
		if ((blah == 255) || (blah == 0)) {
			updown = -1 * updown;
		}
		PORTE.OUTTGL = 0x01; //wiggle pin to indicate loop timing
    2b2a:	0f 2e       	mov	r0, r31
    2b2c:	f0 e8       	ldi	r31, 0x80	; 128
    2b2e:	ef 2e       	mov	r14, r31
    2b30:	f6 e0       	ldi	r31, 0x06	; 6
    2b32:	ff 2e       	mov	r15, r31
    2b34:	f0 2d       	mov	r31, r0
    2b36:	cc 24       	eor	r12, r12
    2b38:	c3 94       	inc	r12
    2b3a:	bc 2c       	mov	r11, r12
		service_lcd_console();
		service_lcd_touch();
		service_pwr_adjust();
		
		//Wait out RTOS loop
		PORTE.OUTCLR = 0x02; //Indicate work for this cycle has finished on PE1
    2b3c:	dd 24       	eor	r13, r13
    2b3e:	68 94       	set
    2b40:	d1 f8       	bld	r13, 1
		while((TCC0.INTFLAGS & _BV(0)) != 0x01); //Wait for the loop time to expire
    2b42:	c0 e0       	ldi	r28, 0x00	; 0
    2b44:	d8 e0       	ldi	r29, 0x08	; 8
    2b46:	01 c0       	rjmp	.+2      	; 0x2b4a <main+0xba>
		PORTE.OUTSET = 0x02; //Set PE1 on start of loop and lower after work is done.
		//Blink alive
		led_dim(LED_0, blah);	
		blah += updown;
		if ((blah == 255) || (blah == 0)) {
			updown = -1 * updown;
    2b48:	01 95       	neg	r16
		}
		PORTE.OUTTGL = 0x01; //wiggle pin to indicate loop timing
    2b4a:	f7 01       	movw	r30, r14
    2b4c:	b7 82       	std	Z+7, r11	; 0x07
		
		//Call services
		service_audio();
    2b4e:	0e 94 4e 30 	call	0x609c	; 0x609c <service_audio>
		service_fp();
    2b52:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <service_fp>
		service_adc();
    2b56:	0e 94 aa 02 	call	0x554	; 0x554 <service_adc>
		service_brain();	
    2b5a:	0e 94 37 06 	call	0xc6e	; 0xc6e <service_brain>
		service_uart_buffer();
    2b5e:	0e 94 e0 2d 	call	0x5bc0	; 0x5bc0 <service_uart_buffer>
		service_lcd();
    2b62:	0e 94 40 0c 	call	0x1880	; 0x1880 <service_lcd>
		service_lcd_console();
    2b66:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <service_lcd_console>
		service_lcd_touch();
    2b6a:	0e 94 1d 12 	call	0x243a	; 0x243a <service_lcd_touch>
		service_pwr_adjust();
    2b6e:	0e 94 a3 14 	call	0x2946	; 0x2946 <service_pwr_adjust>
		
		//Wait out RTOS loop
		PORTE.OUTCLR = 0x02; //Indicate work for this cycle has finished on PE1
    2b72:	f7 01       	movw	r30, r14
    2b74:	d6 82       	std	Z+6, r13	; 0x06
		while((TCC0.INTFLAGS & _BV(0)) != 0x01); //Wait for the loop time to expire
    2b76:	8c 85       	ldd	r24, Y+12	; 0x0c
    2b78:	80 ff       	sbrs	r24, 0
    2b7a:	fd cf       	rjmp	.-6      	; 0x2b76 <main+0xe6>
		TCC0.INTFLAGS = 0x01; //Clear the interrupt flag
    2b7c:	cc 86       	std	Y+12, r12	; 0x0c
	led_off(LED_1);
	audio_beep(2, 100);
	PORTE.DIRSET = B8(00000011); //PE0, PE1 to output pin for loop timer

	while(1){
		PORTE.OUTSET = 0x02; //Set PE1 on start of loop and lower after work is done.
    2b7e:	f7 01       	movw	r30, r14
    2b80:	d5 82       	std	Z+5, r13	; 0x05
		//Blink alive
		led_dim(LED_0, blah);	
    2b82:	80 e0       	ldi	r24, 0x00	; 0
    2b84:	61 2f       	mov	r22, r17
    2b86:	0e 94 d8 2f 	call	0x5fb0	; 0x5fb0 <led_dim>
		blah += updown;
    2b8a:	10 0f       	add	r17, r16
		if ((blah == 255) || (blah == 0)) {
    2b8c:	81 2f       	mov	r24, r17
    2b8e:	81 50       	subi	r24, 0x01	; 1
    2b90:	8e 3f       	cpi	r24, 0xFE	; 254
    2b92:	d0 f6       	brcc	.-76     	; 0x2b48 <main+0xb8>
    2b94:	da cf       	rjmp	.-76     	; 0x2b4a <main+0xba>

00002b96 <init_quadrature>:
		============		
		PK6: Rotary Channel A
		PK7: Rotary Channel B
	*/
	//	SciPSU FP switches have hardware pull-up and hardware debounce
	PORTK.DIRCLR = B8(11000000); //This is the default condition, but just to be safe
    2b96:	e0 e2       	ldi	r30, 0x20	; 32
    2b98:	f7 e0       	ldi	r31, 0x07	; 7
    2b9a:	80 ec       	ldi	r24, 0xC0	; 192
    2b9c:	82 83       	std	Z+2, r24	; 0x02
	PORTK.INT0MASK = B8(01000000); //Enable PORTK.Interrupt0 channel for PK6 
    2b9e:	80 e4       	ldi	r24, 0x40	; 64
    2ba0:	82 87       	std	Z+10, r24	; 0x0a
	PORTK.INT1MASK = B8(10000000); //Enable PORTK.Interrupt1 channel for PK7 
    2ba2:	80 e8       	ldi	r24, 0x80	; 128
    2ba4:	83 87       	std	Z+11, r24	; 0x0b
	PORTK.INTCTRL = B8(00001111); //interrupt 0 & 1 channels set to highest priority
    2ba6:	8f e0       	ldi	r24, 0x0F	; 15
    2ba8:	81 87       	std	Z+9, r24	; 0x09
	//Setup initial edge look directions -- need to enable global interrupts shortly after doing this (so init the quadrature module last in main.c)
	if ((PORTK.IN & _BV(6)) == 0){PORTK.PIN6CTRL = RISING_EDGE;} 
    2baa:	80 85       	ldd	r24, Z+8	; 0x08
    2bac:	86 fd       	sbrc	r24, 6
    2bae:	03 c0       	rjmp	.+6      	; 0x2bb6 <init_quadrature+0x20>
    2bb0:	89 e9       	ldi	r24, 0x99	; 153
    2bb2:	86 8b       	std	Z+22, r24	; 0x16
    2bb4:	04 c0       	rjmp	.+8      	; 0x2bbe <init_quadrature+0x28>
	else {PORTK.PIN6CTRL = FALLING_EDGE;}
    2bb6:	8a e9       	ldi	r24, 0x9A	; 154
    2bb8:	e0 e2       	ldi	r30, 0x20	; 32
    2bba:	f7 e0       	ldi	r31, 0x07	; 7
    2bbc:	86 8b       	std	Z+22, r24	; 0x16
	if ((PORTK.IN & _BV(7)) == 0){PORTK.PIN7CTRL = RISING_EDGE;}
    2bbe:	e0 e2       	ldi	r30, 0x20	; 32
    2bc0:	f7 e0       	ldi	r31, 0x07	; 7
    2bc2:	80 85       	ldd	r24, Z+8	; 0x08
    2bc4:	88 23       	and	r24, r24
    2bc6:	1c f0       	brlt	.+6      	; 0x2bce <init_quadrature+0x38>
    2bc8:	89 e9       	ldi	r24, 0x99	; 153
    2bca:	87 8b       	std	Z+23, r24	; 0x17
    2bcc:	04 c0       	rjmp	.+8      	; 0x2bd6 <init_quadrature+0x40>
	else {PORTK.PIN7CTRL = FALLING_EDGE;}
    2bce:	8a e9       	ldi	r24, 0x9A	; 154
    2bd0:	e0 e2       	ldi	r30, 0x20	; 32
    2bd2:	f7 e0       	ldi	r31, 0x07	; 7
    2bd4:	87 8b       	std	Z+23, r24	; 0x17
		
	quad_count = 0;
    2bd6:	10 92 d5 26 	sts	0x26D5, r1
    2bda:	10 92 d6 26 	sts	0x26D6, r1
	quad_state = QUAD_IDLE;
    2bde:	8c e2       	ldi	r24, 0x2C	; 44
    2be0:	80 93 d2 26 	sts	0x26D2, r24
	
}
    2be4:	08 95       	ret

00002be6 <quad_up>:

/// Reports if the quadrature encoded control has moved up since the last time this function was called.
/* SIDE EFFECT: modifies internal state. If you call this twice, only the first call will report true.*/
boolean quad_up(){
	if (quad_state == QUAD_UP){quad_state = QUAD_IDLE; return true;}
    2be6:	80 91 d2 26 	lds	r24, 0x26D2
    2bea:	8d 32       	cpi	r24, 0x2D	; 45
    2bec:	29 f4       	brne	.+10     	; 0x2bf8 <quad_up+0x12>
    2bee:	8c e2       	ldi	r24, 0x2C	; 44
    2bf0:	80 93 d2 26 	sts	0x26D2, r24
    2bf4:	81 e0       	ldi	r24, 0x01	; 1
    2bf6:	08 95       	ret
	return false;
    2bf8:	80 e0       	ldi	r24, 0x00	; 0
}
    2bfa:	08 95       	ret

00002bfc <quad_down>:

/// Reports if the quadrature encoded control has moved down since the last time this function was called.
/* SIDE EFFECT: modifies internal state. If you call this twice, only the first call will report true.*/
boolean quad_down(){
if (quad_state == QUAD_DOWN){quad_state = QUAD_IDLE; return true;}
    2bfc:	80 91 d2 26 	lds	r24, 0x26D2
    2c00:	8e 32       	cpi	r24, 0x2E	; 46
    2c02:	29 f4       	brne	.+10     	; 0x2c0e <quad_down+0x12>
    2c04:	8c e2       	ldi	r24, 0x2C	; 44
    2c06:	80 93 d2 26 	sts	0x26D2, r24
    2c0a:	81 e0       	ldi	r24, 0x01	; 1
    2c0c:	08 95       	ret
return false;
    2c0e:	80 e0       	ldi	r24, 0x00	; 0
}
    2c10:	08 95       	ret

00002c12 <__vector_100>:
//#############################################################
//## ROTARY CONTROL
//#############################################################

///Interrupt Service Routine (ISR) for quadrature encoder Channel A (PORTK Int0; PK6)
ISR(PORTK_INT0_vect){
    2c12:	1f 92       	push	r1
    2c14:	0f 92       	push	r0
    2c16:	0f b6       	in	r0, 0x3f	; 63
    2c18:	0f 92       	push	r0
    2c1a:	08 b6       	in	r0, 0x38	; 56
    2c1c:	0f 92       	push	r0
    2c1e:	0b b6       	in	r0, 0x3b	; 59
    2c20:	0f 92       	push	r0
    2c22:	11 24       	eor	r1, r1
    2c24:	8f 93       	push	r24
    2c26:	9f 93       	push	r25
    2c28:	ef 93       	push	r30
    2c2a:	ff 93       	push	r31
	if (PORTK.PIN6CTRL == FALLING_EDGE){
    2c2c:	e0 e2       	ldi	r30, 0x20	; 32
    2c2e:	f7 e0       	ldi	r31, 0x07	; 7
    2c30:	86 89       	ldd	r24, Z+22	; 0x16
    2c32:	8a 39       	cpi	r24, 0x9A	; 154
    2c34:	01 f5       	brne	.+64     	; 0x2c76 <__vector_100+0x64>
		//Detected FALLING edge on channel A
		if ((PORTK.IN & _BV(7)) == 0){
    2c36:	80 85       	ldd	r24, Z+8	; 0x08
    2c38:	88 23       	and	r24, r24
    2c3a:	6c f0       	brlt	.+26     	; 0x2c56 <__vector_100+0x44>
			//if channel A is falling and channel B is low, direction = DOWN
			quad_count--;
    2c3c:	80 91 d5 26 	lds	r24, 0x26D5
    2c40:	90 91 d6 26 	lds	r25, 0x26D6
    2c44:	01 97       	sbiw	r24, 0x01	; 1
    2c46:	80 93 d5 26 	sts	0x26D5, r24
    2c4a:	90 93 d6 26 	sts	0x26D6, r25
			quad_state = QUAD_DOWN;
    2c4e:	8e e2       	ldi	r24, 0x2E	; 46
    2c50:	80 93 d2 26 	sts	0x26D2, r24
    2c54:	0c c0       	rjmp	.+24     	; 0x2c6e <__vector_100+0x5c>
		}
		else{
			//if channel A is falling and channel B is high, direction = UP
			quad_count++;
    2c56:	80 91 d5 26 	lds	r24, 0x26D5
    2c5a:	90 91 d6 26 	lds	r25, 0x26D6
    2c5e:	01 96       	adiw	r24, 0x01	; 1
    2c60:	80 93 d5 26 	sts	0x26D5, r24
    2c64:	90 93 d6 26 	sts	0x26D6, r25
			quad_state = QUAD_UP;
    2c68:	8d e2       	ldi	r24, 0x2D	; 45
    2c6a:	80 93 d2 26 	sts	0x26D2, r24
		}
		//Now, look for rising edge
		PORTK.PIN6CTRL = RISING_EDGE;
    2c6e:	89 e9       	ldi	r24, 0x99	; 153
    2c70:	e0 e2       	ldi	r30, 0x20	; 32
    2c72:	f7 e0       	ldi	r31, 0x07	; 7
    2c74:	86 8b       	std	Z+22, r24	; 0x16
	}
	if (PORTK.PIN6CTRL == RISING_EDGE){
    2c76:	e0 e2       	ldi	r30, 0x20	; 32
    2c78:	f7 e0       	ldi	r31, 0x07	; 7
    2c7a:	86 89       	ldd	r24, Z+22	; 0x16
    2c7c:	89 39       	cpi	r24, 0x99	; 153
    2c7e:	01 f5       	brne	.+64     	; 0x2cc0 <__vector_100+0xae>
		//Detected RISING edge on channel A
		if ((PORTK.IN & _BV(7)) == 0){
    2c80:	80 85       	ldd	r24, Z+8	; 0x08
    2c82:	88 23       	and	r24, r24
    2c84:	6c f0       	brlt	.+26     	; 0x2ca0 <__vector_100+0x8e>
			//if channel A is rising and channel B is low, direction = UP
			quad_count++;
    2c86:	80 91 d5 26 	lds	r24, 0x26D5
    2c8a:	90 91 d6 26 	lds	r25, 0x26D6
    2c8e:	01 96       	adiw	r24, 0x01	; 1
    2c90:	80 93 d5 26 	sts	0x26D5, r24
    2c94:	90 93 d6 26 	sts	0x26D6, r25
			quad_state = QUAD_UP;
    2c98:	8d e2       	ldi	r24, 0x2D	; 45
    2c9a:	80 93 d2 26 	sts	0x26D2, r24
    2c9e:	0c c0       	rjmp	.+24     	; 0x2cb8 <__vector_100+0xa6>
		}
		else{
			//if channel A is rising and channel B is high, direction = DOWN
			quad_count--;
    2ca0:	80 91 d5 26 	lds	r24, 0x26D5
    2ca4:	90 91 d6 26 	lds	r25, 0x26D6
    2ca8:	01 97       	sbiw	r24, 0x01	; 1
    2caa:	80 93 d5 26 	sts	0x26D5, r24
    2cae:	90 93 d6 26 	sts	0x26D6, r25
			quad_state = QUAD_DOWN;
    2cb2:	8e e2       	ldi	r24, 0x2E	; 46
    2cb4:	80 93 d2 26 	sts	0x26D2, r24
		}
		//Now, look for falling edge
		PORTK.PIN6CTRL = FALLING_EDGE;
    2cb8:	8a e9       	ldi	r24, 0x9A	; 154
    2cba:	e0 e2       	ldi	r30, 0x20	; 32
    2cbc:	f7 e0       	ldi	r31, 0x07	; 7
    2cbe:	86 8b       	std	Z+22, r24	; 0x16
	}
	PORTK.INTFLAGS = B8(00000001); //clear interrupt flag just in case
    2cc0:	81 e0       	ldi	r24, 0x01	; 1
    2cc2:	e0 e2       	ldi	r30, 0x20	; 32
    2cc4:	f7 e0       	ldi	r31, 0x07	; 7
    2cc6:	84 87       	std	Z+12, r24	; 0x0c
}
    2cc8:	ff 91       	pop	r31
    2cca:	ef 91       	pop	r30
    2ccc:	9f 91       	pop	r25
    2cce:	8f 91       	pop	r24
    2cd0:	0f 90       	pop	r0
    2cd2:	0b be       	out	0x3b, r0	; 59
    2cd4:	0f 90       	pop	r0
    2cd6:	08 be       	out	0x38, r0	; 56
    2cd8:	0f 90       	pop	r0
    2cda:	0f be       	out	0x3f, r0	; 63
    2cdc:	0f 90       	pop	r0
    2cde:	1f 90       	pop	r1
    2ce0:	18 95       	reti

00002ce2 <__vector_101>:

///Interrupt Service Routine (ISR) for quadrature encoder Channel B (PORTK Int1; PK7)
ISR(PORTK_INT1_vect){
    2ce2:	1f 92       	push	r1
    2ce4:	0f 92       	push	r0
    2ce6:	0f b6       	in	r0, 0x3f	; 63
    2ce8:	0f 92       	push	r0
    2cea:	08 b6       	in	r0, 0x38	; 56
    2cec:	0f 92       	push	r0
    2cee:	0b b6       	in	r0, 0x3b	; 59
    2cf0:	0f 92       	push	r0
    2cf2:	11 24       	eor	r1, r1
    2cf4:	8f 93       	push	r24
    2cf6:	9f 93       	push	r25
    2cf8:	ef 93       	push	r30
    2cfa:	ff 93       	push	r31
	if (PORTK.PIN7CTRL == FALLING_EDGE){
    2cfc:	e0 e2       	ldi	r30, 0x20	; 32
    2cfe:	f7 e0       	ldi	r31, 0x07	; 7
    2d00:	87 89       	ldd	r24, Z+23	; 0x17
    2d02:	8a 39       	cpi	r24, 0x9A	; 154
    2d04:	01 f5       	brne	.+64     	; 0x2d46 <__vector_101+0x64>
		//Detected FALLING edge on channel A
		if ((PORTK.IN & _BV(6)) == 0){
    2d06:	80 85       	ldd	r24, Z+8	; 0x08
    2d08:	86 fd       	sbrc	r24, 6
    2d0a:	0d c0       	rjmp	.+26     	; 0x2d26 <__vector_101+0x44>
			//if channel B is falling and channel A is low, direction = UP
			quad_count++;
    2d0c:	80 91 d5 26 	lds	r24, 0x26D5
    2d10:	90 91 d6 26 	lds	r25, 0x26D6
    2d14:	01 96       	adiw	r24, 0x01	; 1
    2d16:	80 93 d5 26 	sts	0x26D5, r24
    2d1a:	90 93 d6 26 	sts	0x26D6, r25
			quad_state = QUAD_UP;
    2d1e:	8d e2       	ldi	r24, 0x2D	; 45
    2d20:	80 93 d2 26 	sts	0x26D2, r24
    2d24:	0c c0       	rjmp	.+24     	; 0x2d3e <__vector_101+0x5c>
		}
		else{
			//if channel B is falling and channel A is high, direction = DOWN
			quad_count--;
    2d26:	80 91 d5 26 	lds	r24, 0x26D5
    2d2a:	90 91 d6 26 	lds	r25, 0x26D6
    2d2e:	01 97       	sbiw	r24, 0x01	; 1
    2d30:	80 93 d5 26 	sts	0x26D5, r24
    2d34:	90 93 d6 26 	sts	0x26D6, r25
			quad_state = QUAD_DOWN;
    2d38:	8e e2       	ldi	r24, 0x2E	; 46
    2d3a:	80 93 d2 26 	sts	0x26D2, r24
		}
		//Now, look for rising edge
		PORTK.PIN7CTRL = RISING_EDGE;
    2d3e:	89 e9       	ldi	r24, 0x99	; 153
    2d40:	e0 e2       	ldi	r30, 0x20	; 32
    2d42:	f7 e0       	ldi	r31, 0x07	; 7
    2d44:	87 8b       	std	Z+23, r24	; 0x17
	}
	if (PORTK.PIN7CTRL == RISING_EDGE){
    2d46:	e0 e2       	ldi	r30, 0x20	; 32
    2d48:	f7 e0       	ldi	r31, 0x07	; 7
    2d4a:	87 89       	ldd	r24, Z+23	; 0x17
    2d4c:	89 39       	cpi	r24, 0x99	; 153
    2d4e:	01 f5       	brne	.+64     	; 0x2d90 <__vector_101+0xae>
		//Detected RISING edge on channel B
		if ((PORTK.IN & _BV(6)) == 0){
    2d50:	80 85       	ldd	r24, Z+8	; 0x08
    2d52:	86 fd       	sbrc	r24, 6
    2d54:	0d c0       	rjmp	.+26     	; 0x2d70 <__vector_101+0x8e>
			//if channel B is rising and channel A is low, direction = DOWN
			quad_count--;
    2d56:	80 91 d5 26 	lds	r24, 0x26D5
    2d5a:	90 91 d6 26 	lds	r25, 0x26D6
    2d5e:	01 97       	sbiw	r24, 0x01	; 1
    2d60:	80 93 d5 26 	sts	0x26D5, r24
    2d64:	90 93 d6 26 	sts	0x26D6, r25
			quad_state = QUAD_DOWN;
    2d68:	8e e2       	ldi	r24, 0x2E	; 46
    2d6a:	80 93 d2 26 	sts	0x26D2, r24
    2d6e:	0c c0       	rjmp	.+24     	; 0x2d88 <__vector_101+0xa6>
		}
		else{
			//if channel B is rising and channel A is high, direction = UP
			quad_count++;
    2d70:	80 91 d5 26 	lds	r24, 0x26D5
    2d74:	90 91 d6 26 	lds	r25, 0x26D6
    2d78:	01 96       	adiw	r24, 0x01	; 1
    2d7a:	80 93 d5 26 	sts	0x26D5, r24
    2d7e:	90 93 d6 26 	sts	0x26D6, r25
			quad_state = QUAD_UP;
    2d82:	8d e2       	ldi	r24, 0x2D	; 45
    2d84:	80 93 d2 26 	sts	0x26D2, r24
		}
		//Now, look for falling edge
		PORTK.PIN7CTRL = FALLING_EDGE;
    2d88:	8a e9       	ldi	r24, 0x9A	; 154
    2d8a:	e0 e2       	ldi	r30, 0x20	; 32
    2d8c:	f7 e0       	ldi	r31, 0x07	; 7
    2d8e:	87 8b       	std	Z+23, r24	; 0x17
	}
	PORTK.INTFLAGS = B8(00000010); //clear interrupt flag just in case
    2d90:	82 e0       	ldi	r24, 0x02	; 2
    2d92:	e0 e2       	ldi	r30, 0x20	; 32
    2d94:	f7 e0       	ldi	r31, 0x07	; 7
    2d96:	84 87       	std	Z+12, r24	; 0x0c
}
    2d98:	ff 91       	pop	r31
    2d9a:	ef 91       	pop	r30
    2d9c:	9f 91       	pop	r25
    2d9e:	8f 91       	pop	r24
    2da0:	0f 90       	pop	r0
    2da2:	0b be       	out	0x3b, r0	; 59
    2da4:	0f 90       	pop	r0
    2da6:	08 be       	out	0x38, r0	; 56
    2da8:	0f 90       	pop	r0
    2daa:	0f be       	out	0x3f, r0	; 63
    2dac:	0f 90       	pop	r0
    2dae:	1f 90       	pop	r1
    2db0:	18 95       	reti

00002db2 <service_quadrature>:
//## SERVICE ROUTINE
//#############################################################

void service_quadrature(){	
	
}
    2db2:	08 95       	ret

00002db4 <init_thermal>:
 */ 


void init_thermal(){
	//FANS are located at PF4 (Fan0) and PF5 (Fan1)
	PORTF.DIRSET = 0x30; //pins 4 and 5 to output
    2db4:	e0 ea       	ldi	r30, 0xA0	; 160
    2db6:	f6 e0       	ldi	r31, 0x06	; 6
    2db8:	80 e3       	ldi	r24, 0x30	; 48
    2dba:	81 83       	std	Z+1, r24	; 0x01
	PORTF.OUTSET &= B8(11001111); //pins 4 and 5 to low (off)
    2dbc:	85 81       	ldd	r24, Z+5	; 0x05
    2dbe:	8f 7c       	andi	r24, 0xCF	; 207
    2dc0:	85 83       	std	Z+5, r24	; 0x05
		
	TCF1.CTRLA = 0x07; //enable; div1024
    2dc2:	e0 e4       	ldi	r30, 0x40	; 64
    2dc4:	fb e0       	ldi	r31, 0x0B	; 11
    2dc6:	87 e0       	ldi	r24, 0x07	; 7
    2dc8:	80 83       	st	Z, r24
	TCF1.CTRLB = 0x13; //Output Channel A enable; Single-slope PWM
    2dca:	83 e1       	ldi	r24, 0x13	; 19
    2dcc:	81 83       	std	Z+1, r24	; 0x01
	TCF1.PER = 0x00FF; //Set the top of the counter to basically force 8 bit operation; we do this for speed when calling dimming functions in the future
    2dce:	8f ef       	ldi	r24, 0xFF	; 255
    2dd0:	90 e0       	ldi	r25, 0x00	; 0
    2dd2:	86 a3       	lds	r24, 0x56
    2dd4:	97 a3       	lds	r25, 0x57
	TCF1.CCA = 0x0010; //Default to off-level brightness
    2dd6:	80 e1       	ldi	r24, 0x10	; 16
    2dd8:	90 e0       	ldi	r25, 0x00	; 0
    2dda:	80 a7       	lds	r24, 0x70
    2ddc:	91 a7       	lds	r25, 0x71
}
    2dde:	08 95       	ret

00002de0 <init_uart>:
//= INITIALIZATION ROUTINES
//==================================

//Select which uart to initialize from the list of defined constants in the io.h
//Pass in Baud rate from a list of defined constants
void init_uart(USART_t* which, uint8_t baud_rate){
    2de0:	fc 01       	movw	r30, r24
	//Config the PORT
		if (&(*which) == &USARTC0){
    2de2:	88 e0       	ldi	r24, 0x08	; 8
    2de4:	e0 3a       	cpi	r30, 0xA0	; 160
    2de6:	f8 07       	cpc	r31, r24
    2de8:	51 f4       	brne	.+20     	; 0x2dfe <init_uart+0x1e>
			PORTC.DIRSET = B8(00001000); //TX pin as output
    2dea:	a0 e4       	ldi	r26, 0x40	; 64
    2dec:	b6 e0       	ldi	r27, 0x06	; 6
    2dee:	88 e0       	ldi	r24, 0x08	; 8
    2df0:	11 96       	adiw	r26, 0x01	; 1
    2df2:	8c 93       	st	X, r24
    2df4:	11 97       	sbiw	r26, 0x01	; 1
			PORTC.OUTSET = B8(00001000); //TX initial output value is high
    2df6:	15 96       	adiw	r26, 0x05	; 5
    2df8:	8c 93       	st	X, r24
    2dfa:	15 97       	sbiw	r26, 0x05	; 5
    2dfc:	61 c0       	rjmp	.+194    	; 0x2ec0 <init_uart+0xe0>
		}
		else if (&(*which) == &USARTC1) {
    2dfe:	88 e0       	ldi	r24, 0x08	; 8
    2e00:	e0 3b       	cpi	r30, 0xB0	; 176
    2e02:	f8 07       	cpc	r31, r24
    2e04:	51 f4       	brne	.+20     	; 0x2e1a <init_uart+0x3a>
			PORTC.DIRSET = B8(10000000); //TX pin as output
    2e06:	a0 e4       	ldi	r26, 0x40	; 64
    2e08:	b6 e0       	ldi	r27, 0x06	; 6
    2e0a:	80 e8       	ldi	r24, 0x80	; 128
    2e0c:	11 96       	adiw	r26, 0x01	; 1
    2e0e:	8c 93       	st	X, r24
    2e10:	11 97       	sbiw	r26, 0x01	; 1
			PORTC.OUTSET = B8(10000000); //TX initial output value is high
    2e12:	15 96       	adiw	r26, 0x05	; 5
    2e14:	8c 93       	st	X, r24
    2e16:	15 97       	sbiw	r26, 0x05	; 5
    2e18:	53 c0       	rjmp	.+166    	; 0x2ec0 <init_uart+0xe0>
		}
		else if (&(*which) == &USARTD0) {
    2e1a:	89 e0       	ldi	r24, 0x09	; 9
    2e1c:	e0 3a       	cpi	r30, 0xA0	; 160
    2e1e:	f8 07       	cpc	r31, r24
    2e20:	51 f4       	brne	.+20     	; 0x2e36 <init_uart+0x56>
			PORTD.DIRSET = B8(00001000); //TX pin as output
    2e22:	a0 e6       	ldi	r26, 0x60	; 96
    2e24:	b6 e0       	ldi	r27, 0x06	; 6
    2e26:	88 e0       	ldi	r24, 0x08	; 8
    2e28:	11 96       	adiw	r26, 0x01	; 1
    2e2a:	8c 93       	st	X, r24
    2e2c:	11 97       	sbiw	r26, 0x01	; 1
			PORTD.OUTSET = B8(00001000); //TX initial output value is high
    2e2e:	15 96       	adiw	r26, 0x05	; 5
    2e30:	8c 93       	st	X, r24
    2e32:	15 97       	sbiw	r26, 0x05	; 5
    2e34:	45 c0       	rjmp	.+138    	; 0x2ec0 <init_uart+0xe0>
		}	
		else if (&(*which) == &USARTD1) {
    2e36:	89 e0       	ldi	r24, 0x09	; 9
    2e38:	e0 3b       	cpi	r30, 0xB0	; 176
    2e3a:	f8 07       	cpc	r31, r24
    2e3c:	51 f4       	brne	.+20     	; 0x2e52 <init_uart+0x72>
			PORTD.DIRSET = B8(10000000); //TX pin as output
    2e3e:	a0 e6       	ldi	r26, 0x60	; 96
    2e40:	b6 e0       	ldi	r27, 0x06	; 6
    2e42:	80 e8       	ldi	r24, 0x80	; 128
    2e44:	11 96       	adiw	r26, 0x01	; 1
    2e46:	8c 93       	st	X, r24
    2e48:	11 97       	sbiw	r26, 0x01	; 1
			PORTD.OUTSET = B8(10000000); //TX initial output value is high
    2e4a:	15 96       	adiw	r26, 0x05	; 5
    2e4c:	8c 93       	st	X, r24
    2e4e:	15 97       	sbiw	r26, 0x05	; 5
    2e50:	37 c0       	rjmp	.+110    	; 0x2ec0 <init_uart+0xe0>
		}
		else if (&(*which) == &USARTE0) {
    2e52:	8a e0       	ldi	r24, 0x0A	; 10
    2e54:	e0 3a       	cpi	r30, 0xA0	; 160
    2e56:	f8 07       	cpc	r31, r24
    2e58:	51 f4       	brne	.+20     	; 0x2e6e <init_uart+0x8e>
			PORTE.DIRSET = B8(00001000); //TX pin as output
    2e5a:	a0 e8       	ldi	r26, 0x80	; 128
    2e5c:	b6 e0       	ldi	r27, 0x06	; 6
    2e5e:	88 e0       	ldi	r24, 0x08	; 8
    2e60:	11 96       	adiw	r26, 0x01	; 1
    2e62:	8c 93       	st	X, r24
    2e64:	11 97       	sbiw	r26, 0x01	; 1
			PORTE.OUTSET = B8(00001000); //TX initial output value is high
    2e66:	15 96       	adiw	r26, 0x05	; 5
    2e68:	8c 93       	st	X, r24
    2e6a:	15 97       	sbiw	r26, 0x05	; 5
    2e6c:	29 c0       	rjmp	.+82     	; 0x2ec0 <init_uart+0xe0>
		}
		else if (&(*which) == &USARTE1) {
    2e6e:	8a e0       	ldi	r24, 0x0A	; 10
    2e70:	e0 3b       	cpi	r30, 0xB0	; 176
    2e72:	f8 07       	cpc	r31, r24
    2e74:	51 f4       	brne	.+20     	; 0x2e8a <init_uart+0xaa>
			PORTE.DIRSET = B8(10000000); //TX pin as output
    2e76:	a0 e8       	ldi	r26, 0x80	; 128
    2e78:	b6 e0       	ldi	r27, 0x06	; 6
    2e7a:	80 e8       	ldi	r24, 0x80	; 128
    2e7c:	11 96       	adiw	r26, 0x01	; 1
    2e7e:	8c 93       	st	X, r24
    2e80:	11 97       	sbiw	r26, 0x01	; 1
			PORTE.OUTSET = B8(10000000); //TX initial output value is high
    2e82:	15 96       	adiw	r26, 0x05	; 5
    2e84:	8c 93       	st	X, r24
    2e86:	15 97       	sbiw	r26, 0x05	; 5
    2e88:	1b c0       	rjmp	.+54     	; 0x2ec0 <init_uart+0xe0>
		}
		else if (&(*which) == &USARTF0) {
    2e8a:	8b e0       	ldi	r24, 0x0B	; 11
    2e8c:	e0 3a       	cpi	r30, 0xA0	; 160
    2e8e:	f8 07       	cpc	r31, r24
    2e90:	51 f4       	brne	.+20     	; 0x2ea6 <init_uart+0xc6>
			PORTF.DIRSET = B8(00001000); //TX pin as output
    2e92:	a0 ea       	ldi	r26, 0xA0	; 160
    2e94:	b6 e0       	ldi	r27, 0x06	; 6
    2e96:	88 e0       	ldi	r24, 0x08	; 8
    2e98:	11 96       	adiw	r26, 0x01	; 1
    2e9a:	8c 93       	st	X, r24
    2e9c:	11 97       	sbiw	r26, 0x01	; 1
			PORTF.OUTSET = B8(00001000); //TX initial output value is high
    2e9e:	15 96       	adiw	r26, 0x05	; 5
    2ea0:	8c 93       	st	X, r24
    2ea2:	15 97       	sbiw	r26, 0x05	; 5
    2ea4:	0d c0       	rjmp	.+26     	; 0x2ec0 <init_uart+0xe0>
		}
		else if (&(*which) == &USARTF1) {
    2ea6:	8b e0       	ldi	r24, 0x0B	; 11
    2ea8:	e0 3b       	cpi	r30, 0xB0	; 176
    2eaa:	f8 07       	cpc	r31, r24
    2eac:	49 f4       	brne	.+18     	; 0x2ec0 <init_uart+0xe0>
			PORTF.DIRSET = B8(10000000); //TX pin as output
    2eae:	a0 ea       	ldi	r26, 0xA0	; 160
    2eb0:	b6 e0       	ldi	r27, 0x06	; 6
    2eb2:	80 e8       	ldi	r24, 0x80	; 128
    2eb4:	11 96       	adiw	r26, 0x01	; 1
    2eb6:	8c 93       	st	X, r24
    2eb8:	11 97       	sbiw	r26, 0x01	; 1
			PORTF.OUTSET = B8(10000000); //TX initial output value is high
    2eba:	15 96       	adiw	r26, 0x05	; 5
    2ebc:	8c 93       	st	X, r24
    2ebe:	15 97       	sbiw	r26, 0x05	; 5
		}
		else {
		}
	//Set baud rate
		switch(baud_rate){
    2ec0:	61 30       	cpi	r22, 0x01	; 1
    2ec2:	39 f0       	breq	.+14     	; 0x2ed2 <init_uart+0xf2>
    2ec4:	62 30       	cpi	r22, 0x02	; 2
    2ec6:	51 f4       	brne	.+20     	; 0x2edc <init_uart+0xfc>
		case BAUD_38400:
			//BSEL = 0xCC5; BSCALE = -6; error = 0.01%
			which->BAUDCTRLB = 0xAC;
    2ec8:	8c ea       	ldi	r24, 0xAC	; 172
    2eca:	87 83       	std	Z+7, r24	; 0x07
			which->BAUDCTRLA = 0xC5;
    2ecc:	85 ec       	ldi	r24, 0xC5	; 197
    2ece:	86 83       	std	Z+6, r24	; 0x06
			break;
    2ed0:	09 c0       	rjmp	.+18     	; 0x2ee4 <init_uart+0x104>
		case BAUD_57600:
			//BSEL = 0x86E; BSCALE = -6; error = 0.01%
			which->BAUDCTRLB = 0xA8;
    2ed2:	88 ea       	ldi	r24, 0xA8	; 168
    2ed4:	87 83       	std	Z+7, r24	; 0x07
			which->BAUDCTRLA = 0x6E;
    2ed6:	8e e6       	ldi	r24, 0x6E	; 110
    2ed8:	86 83       	std	Z+6, r24	; 0x06
			break;
    2eda:	04 c0       	rjmp	.+8      	; 0x2ee4 <init_uart+0x104>
		case BAUD_115200:
		default:
			//BSEL = 0x417; BSCALE = -6; error = 0.01%
			//BSEL = 0x453; BSCALE = -6; fbaud = 115.212k @ 32MHz
			which->BAUDCTRLB = 0xA4; //write to BAUDCTRLB first, updated on write to A
    2edc:	84 ea       	ldi	r24, 0xA4	; 164
    2ede:	87 83       	std	Z+7, r24	; 0x07
			which->BAUDCTRLA = 0x32; //0x17; = 8.44uS = 118kHz		
    2ee0:	82 e3       	ldi	r24, 0x32	; 50
    2ee2:	86 83       	std	Z+6, r24	; 0x06
		}
	//Config USART Module
		which->CTRLA = 0x00; //Current driver does not enable any interrupts
    2ee4:	13 82       	std	Z+3, r1	; 0x03
		which->CTRLB = B8(00011000); //Enable Rx and TX; Do not use double speed mode
    2ee6:	88 e1       	ldi	r24, 0x18	; 24
    2ee8:	84 83       	std	Z+4, r24	; 0x04
		which->CTRLC = B8(00000011); //uart Mode; Use N-8-1 frame configuration
    2eea:	83 e0       	ldi	r24, 0x03	; 3
    2eec:	85 83       	std	Z+5, r24	; 0x05
	//
}
    2eee:	08 95       	ret

00002ef0 <uart_send_byte>:
//= DISPLAY (BLOCKING) FUNCTIONS
//==================================


//Sends one byte; Spin-lock until UART is ready to transmit (BE CAREFUL!)
void uart_send_byte( USART_t* which, unsigned char dataB){
    2ef0:	fc 01       	movw	r30, r24
	while((which->STATUS & USART_DREIF_bm) == 0x00); //wait until the transmit buffer is ready to receive new data (DREIF flag is 1 when empty)
    2ef2:	81 81       	ldd	r24, Z+1	; 0x01
    2ef4:	85 ff       	sbrs	r24, 5
    2ef6:	fd cf       	rjmp	.-6      	; 0x2ef2 <uart_send_byte+0x2>
	which->DATA = dataB;	
    2ef8:	60 83       	st	Z, r22
}
    2efa:	08 95       	ret

00002efc <uart_send_string>:

//Sends an entire string (blocking)
void uart_send_string(USART_t* which, char* theString){
    2efc:	cf 92       	push	r12
    2efe:	df 92       	push	r13
    2f00:	ef 92       	push	r14
    2f02:	ff 92       	push	r15
    2f04:	0f 93       	push	r16
    2f06:	1f 93       	push	r17
    2f08:	cf 93       	push	r28
    2f0a:	df 93       	push	r29
    2f0c:	6c 01       	movw	r12, r24
	uint16_t length = (uint16_t)strlen(theString);
    2f0e:	e6 2f       	mov	r30, r22
    2f10:	f7 2f       	mov	r31, r23
    2f12:	ef 01       	movw	r28, r30
    2f14:	09 90       	ld	r0, Y+
    2f16:	00 20       	and	r0, r0
    2f18:	e9 f7       	brne	.-6      	; 0x2f14 <uart_send_string+0x18>
    2f1a:	21 97       	sbiw	r28, 0x01	; 1
    2f1c:	ce 1b       	sub	r28, r30
    2f1e:	df 0b       	sbc	r29, r31
	for (uint16_t i=0; i<length; i++){uart_send_byte(which, theString[i]);}	
    2f20:	79 f0       	breq	.+30     	; 0x2f40 <uart_send_string+0x44>
    2f22:	e6 2e       	mov	r14, r22
    2f24:	f7 2e       	mov	r15, r23
    2f26:	00 e0       	ldi	r16, 0x00	; 0
    2f28:	10 e0       	ldi	r17, 0x00	; 0
    2f2a:	f7 01       	movw	r30, r14
    2f2c:	61 91       	ld	r22, Z+
    2f2e:	7f 01       	movw	r14, r30
    2f30:	c6 01       	movw	r24, r12
    2f32:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <uart_send_byte>
    2f36:	0f 5f       	subi	r16, 0xFF	; 255
    2f38:	1f 4f       	sbci	r17, 0xFF	; 255
    2f3a:	0c 17       	cp	r16, r28
    2f3c:	1d 07       	cpc	r17, r29
    2f3e:	a9 f7       	brne	.-22     	; 0x2f2a <uart_send_string+0x2e>
}
    2f40:	df 91       	pop	r29
    2f42:	cf 91       	pop	r28
    2f44:	1f 91       	pop	r17
    2f46:	0f 91       	pop	r16
    2f48:	ff 90       	pop	r15
    2f4a:	ef 90       	pop	r14
    2f4c:	df 90       	pop	r13
    2f4e:	cf 90       	pop	r12
    2f50:	08 95       	ret

00002f52 <uart_send_BIN4>:
	
//Most Significant Bit first
void uart_send_BIN4(USART_t* which, uint8_t lowb){
    2f52:	cf 93       	push	r28
    2f54:	df 93       	push	r29
    2f56:	ec 01       	movw	r28, r24
	switch(lowb){
    2f58:	67 30       	cpi	r22, 0x07	; 7
    2f5a:	09 f4       	brne	.+2      	; 0x2f5e <uart_send_BIN4+0xc>
    2f5c:	9d c0       	rjmp	.+314    	; 0x3098 <uart_send_BIN4+0x146>
    2f5e:	68 30       	cpi	r22, 0x08	; 8
    2f60:	90 f4       	brcc	.+36     	; 0x2f86 <uart_send_BIN4+0x34>
    2f62:	63 30       	cpi	r22, 0x03	; 3
    2f64:	09 f4       	brne	.+2      	; 0x2f68 <uart_send_BIN4+0x16>
    2f66:	58 c0       	rjmp	.+176    	; 0x3018 <uart_send_BIN4+0xc6>
    2f68:	64 30       	cpi	r22, 0x04	; 4
    2f6a:	30 f4       	brcc	.+12     	; 0x2f78 <uart_send_BIN4+0x26>
    2f6c:	61 30       	cpi	r22, 0x01	; 1
    2f6e:	a1 f1       	breq	.+104    	; 0x2fd8 <uart_send_BIN4+0x86>
    2f70:	62 30       	cpi	r22, 0x02	; 2
    2f72:	08 f0       	brcs	.+2      	; 0x2f76 <uart_send_BIN4+0x24>
    2f74:	41 c0       	rjmp	.+130    	; 0x2ff8 <uart_send_BIN4+0xa6>
    2f76:	20 c0       	rjmp	.+64     	; 0x2fb8 <uart_send_BIN4+0x66>
    2f78:	65 30       	cpi	r22, 0x05	; 5
    2f7a:	09 f4       	brne	.+2      	; 0x2f7e <uart_send_BIN4+0x2c>
    2f7c:	6d c0       	rjmp	.+218    	; 0x3058 <uart_send_BIN4+0x106>
    2f7e:	66 30       	cpi	r22, 0x06	; 6
    2f80:	08 f0       	brcs	.+2      	; 0x2f84 <uart_send_BIN4+0x32>
    2f82:	7a c0       	rjmp	.+244    	; 0x3078 <uart_send_BIN4+0x126>
    2f84:	59 c0       	rjmp	.+178    	; 0x3038 <uart_send_BIN4+0xe6>
    2f86:	6b 30       	cpi	r22, 0x0B	; 11
    2f88:	09 f4       	brne	.+2      	; 0x2f8c <uart_send_BIN4+0x3a>
    2f8a:	c6 c0       	rjmp	.+396    	; 0x3118 <uart_send_BIN4+0x1c6>
    2f8c:	6c 30       	cpi	r22, 0x0C	; 12
    2f8e:	38 f4       	brcc	.+14     	; 0x2f9e <uart_send_BIN4+0x4c>
    2f90:	69 30       	cpi	r22, 0x09	; 9
    2f92:	09 f4       	brne	.+2      	; 0x2f96 <uart_send_BIN4+0x44>
    2f94:	a1 c0       	rjmp	.+322    	; 0x30d8 <uart_send_BIN4+0x186>
    2f96:	6a 30       	cpi	r22, 0x0A	; 10
    2f98:	08 f0       	brcs	.+2      	; 0x2f9c <uart_send_BIN4+0x4a>
    2f9a:	ae c0       	rjmp	.+348    	; 0x30f8 <uart_send_BIN4+0x1a6>
    2f9c:	8d c0       	rjmp	.+282    	; 0x30b8 <uart_send_BIN4+0x166>
    2f9e:	6d 30       	cpi	r22, 0x0D	; 13
    2fa0:	09 f4       	brne	.+2      	; 0x2fa4 <uart_send_BIN4+0x52>
    2fa2:	da c0       	rjmp	.+436    	; 0x3158 <uart_send_BIN4+0x206>
    2fa4:	6d 30       	cpi	r22, 0x0D	; 13
    2fa6:	08 f4       	brcc	.+2      	; 0x2faa <uart_send_BIN4+0x58>
    2fa8:	c7 c0       	rjmp	.+398    	; 0x3138 <uart_send_BIN4+0x1e6>
    2faa:	6e 30       	cpi	r22, 0x0E	; 14
    2fac:	09 f4       	brne	.+2      	; 0x2fb0 <uart_send_BIN4+0x5e>
    2fae:	e4 c0       	rjmp	.+456    	; 0x3178 <uart_send_BIN4+0x226>
    2fb0:	6f 30       	cpi	r22, 0x0F	; 15
    2fb2:	09 f0       	breq	.+2      	; 0x2fb6 <uart_send_BIN4+0x64>
    2fb4:	00 c1       	rjmp	.+512    	; 0x31b6 <uart_send_BIN4+0x264>
    2fb6:	f0 c0       	rjmp	.+480    	; 0x3198 <uart_send_BIN4+0x246>
	case(0):
		uart_send_byte(which,'0');
    2fb8:	60 e3       	ldi	r22, 0x30	; 48
    2fba:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <uart_send_byte>
		uart_send_byte(which,'0');
    2fbe:	ce 01       	movw	r24, r28
    2fc0:	60 e3       	ldi	r22, 0x30	; 48
    2fc2:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <uart_send_byte>
		uart_send_byte(which,'0');
    2fc6:	ce 01       	movw	r24, r28
    2fc8:	60 e3       	ldi	r22, 0x30	; 48
    2fca:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <uart_send_byte>
		uart_send_byte(which,'0');
    2fce:	ce 01       	movw	r24, r28
    2fd0:	60 e3       	ldi	r22, 0x30	; 48
    2fd2:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <uart_send_byte>
		break;
    2fd6:	ef c0       	rjmp	.+478    	; 0x31b6 <uart_send_BIN4+0x264>
	case(1):
		uart_send_byte(which,'0');
    2fd8:	60 e3       	ldi	r22, 0x30	; 48
    2fda:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <uart_send_byte>
		uart_send_byte(which,'0');
    2fde:	ce 01       	movw	r24, r28
    2fe0:	60 e3       	ldi	r22, 0x30	; 48
    2fe2:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <uart_send_byte>
		uart_send_byte(which,'0');
    2fe6:	ce 01       	movw	r24, r28
    2fe8:	60 e3       	ldi	r22, 0x30	; 48
    2fea:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <uart_send_byte>
		uart_send_byte(which,'1');
    2fee:	ce 01       	movw	r24, r28
    2ff0:	61 e3       	ldi	r22, 0x31	; 49
    2ff2:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <uart_send_byte>
		break;
    2ff6:	df c0       	rjmp	.+446    	; 0x31b6 <uart_send_BIN4+0x264>
	case(2):
		uart_send_byte(which,'0');
    2ff8:	60 e3       	ldi	r22, 0x30	; 48
    2ffa:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <uart_send_byte>
		uart_send_byte(which,'0');
    2ffe:	ce 01       	movw	r24, r28
    3000:	60 e3       	ldi	r22, 0x30	; 48
    3002:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <uart_send_byte>
		uart_send_byte(which,'1');
    3006:	ce 01       	movw	r24, r28
    3008:	61 e3       	ldi	r22, 0x31	; 49
    300a:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <uart_send_byte>
		uart_send_byte(which,'0');
    300e:	ce 01       	movw	r24, r28
    3010:	60 e3       	ldi	r22, 0x30	; 48
    3012:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <uart_send_byte>
		break;
    3016:	cf c0       	rjmp	.+414    	; 0x31b6 <uart_send_BIN4+0x264>
	case(3):
		uart_send_byte(which,'0');
    3018:	60 e3       	ldi	r22, 0x30	; 48
    301a:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <uart_send_byte>
		uart_send_byte(which,'0');
    301e:	ce 01       	movw	r24, r28
    3020:	60 e3       	ldi	r22, 0x30	; 48
    3022:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <uart_send_byte>
		uart_send_byte(which,'1');
    3026:	ce 01       	movw	r24, r28
    3028:	61 e3       	ldi	r22, 0x31	; 49
    302a:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <uart_send_byte>
		uart_send_byte(which,'1');
    302e:	ce 01       	movw	r24, r28
    3030:	61 e3       	ldi	r22, 0x31	; 49
    3032:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <uart_send_byte>
		break;
    3036:	bf c0       	rjmp	.+382    	; 0x31b6 <uart_send_BIN4+0x264>
	case(4):
		uart_send_byte(which,'0');
    3038:	60 e3       	ldi	r22, 0x30	; 48
    303a:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <uart_send_byte>
		uart_send_byte(which,'1');
    303e:	ce 01       	movw	r24, r28
    3040:	61 e3       	ldi	r22, 0x31	; 49
    3042:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <uart_send_byte>
		uart_send_byte(which,'0');
    3046:	ce 01       	movw	r24, r28
    3048:	60 e3       	ldi	r22, 0x30	; 48
    304a:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <uart_send_byte>
		uart_send_byte(which,'0');
    304e:	ce 01       	movw	r24, r28
    3050:	60 e3       	ldi	r22, 0x30	; 48
    3052:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <uart_send_byte>
		break;
    3056:	af c0       	rjmp	.+350    	; 0x31b6 <uart_send_BIN4+0x264>
	case(5):
		uart_send_byte(which,'0');
    3058:	60 e3       	ldi	r22, 0x30	; 48
    305a:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <uart_send_byte>
		uart_send_byte(which,'1');
    305e:	ce 01       	movw	r24, r28
    3060:	61 e3       	ldi	r22, 0x31	; 49
    3062:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <uart_send_byte>
		uart_send_byte(which,'0');
    3066:	ce 01       	movw	r24, r28
    3068:	60 e3       	ldi	r22, 0x30	; 48
    306a:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <uart_send_byte>
		uart_send_byte(which,'1');
    306e:	ce 01       	movw	r24, r28
    3070:	61 e3       	ldi	r22, 0x31	; 49
    3072:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <uart_send_byte>
		break;
    3076:	9f c0       	rjmp	.+318    	; 0x31b6 <uart_send_BIN4+0x264>
	case(6):
		uart_send_byte(which,'0');
    3078:	60 e3       	ldi	r22, 0x30	; 48
    307a:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <uart_send_byte>
		uart_send_byte(which,'1');
    307e:	ce 01       	movw	r24, r28
    3080:	61 e3       	ldi	r22, 0x31	; 49
    3082:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <uart_send_byte>
		uart_send_byte(which,'1');
    3086:	ce 01       	movw	r24, r28
    3088:	61 e3       	ldi	r22, 0x31	; 49
    308a:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <uart_send_byte>
		uart_send_byte(which,'0');
    308e:	ce 01       	movw	r24, r28
    3090:	60 e3       	ldi	r22, 0x30	; 48
    3092:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <uart_send_byte>
		break;
    3096:	8f c0       	rjmp	.+286    	; 0x31b6 <uart_send_BIN4+0x264>
	case(7):
		uart_send_byte(which,'0');
    3098:	60 e3       	ldi	r22, 0x30	; 48
    309a:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <uart_send_byte>
		uart_send_byte(which,'1');
    309e:	ce 01       	movw	r24, r28
    30a0:	61 e3       	ldi	r22, 0x31	; 49
    30a2:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <uart_send_byte>
		uart_send_byte(which,'1');
    30a6:	ce 01       	movw	r24, r28
    30a8:	61 e3       	ldi	r22, 0x31	; 49
    30aa:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <uart_send_byte>
		uart_send_byte(which,'1');
    30ae:	ce 01       	movw	r24, r28
    30b0:	61 e3       	ldi	r22, 0x31	; 49
    30b2:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <uart_send_byte>
		break;
    30b6:	7f c0       	rjmp	.+254    	; 0x31b6 <uart_send_BIN4+0x264>
	case(8):
		uart_send_byte(which,'1');
    30b8:	61 e3       	ldi	r22, 0x31	; 49
    30ba:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <uart_send_byte>
		uart_send_byte(which,'0');
    30be:	ce 01       	movw	r24, r28
    30c0:	60 e3       	ldi	r22, 0x30	; 48
    30c2:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <uart_send_byte>
		uart_send_byte(which,'0');
    30c6:	ce 01       	movw	r24, r28
    30c8:	60 e3       	ldi	r22, 0x30	; 48
    30ca:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <uart_send_byte>
		uart_send_byte(which,'0');
    30ce:	ce 01       	movw	r24, r28
    30d0:	60 e3       	ldi	r22, 0x30	; 48
    30d2:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <uart_send_byte>
		break;
    30d6:	6f c0       	rjmp	.+222    	; 0x31b6 <uart_send_BIN4+0x264>
	case(9):
		uart_send_byte(which,'1');
    30d8:	61 e3       	ldi	r22, 0x31	; 49
    30da:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <uart_send_byte>
		uart_send_byte(which,'0');
    30de:	ce 01       	movw	r24, r28
    30e0:	60 e3       	ldi	r22, 0x30	; 48
    30e2:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <uart_send_byte>
		uart_send_byte(which,'0');
    30e6:	ce 01       	movw	r24, r28
    30e8:	60 e3       	ldi	r22, 0x30	; 48
    30ea:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <uart_send_byte>
		uart_send_byte(which,'1');
    30ee:	ce 01       	movw	r24, r28
    30f0:	61 e3       	ldi	r22, 0x31	; 49
    30f2:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <uart_send_byte>
		break;
    30f6:	5f c0       	rjmp	.+190    	; 0x31b6 <uart_send_BIN4+0x264>
	case(10):
		uart_send_byte(which,'1');
    30f8:	61 e3       	ldi	r22, 0x31	; 49
    30fa:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <uart_send_byte>
		uart_send_byte(which,'0');
    30fe:	ce 01       	movw	r24, r28
    3100:	60 e3       	ldi	r22, 0x30	; 48
    3102:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <uart_send_byte>
		uart_send_byte(which,'1');
    3106:	ce 01       	movw	r24, r28
    3108:	61 e3       	ldi	r22, 0x31	; 49
    310a:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <uart_send_byte>
		uart_send_byte(which,'0');
    310e:	ce 01       	movw	r24, r28
    3110:	60 e3       	ldi	r22, 0x30	; 48
    3112:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <uart_send_byte>
		break;
    3116:	4f c0       	rjmp	.+158    	; 0x31b6 <uart_send_BIN4+0x264>
	case(11):
		uart_send_byte(which,'1');
    3118:	61 e3       	ldi	r22, 0x31	; 49
    311a:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <uart_send_byte>
		uart_send_byte(which,'0');
    311e:	ce 01       	movw	r24, r28
    3120:	60 e3       	ldi	r22, 0x30	; 48
    3122:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <uart_send_byte>
		uart_send_byte(which,'1');
    3126:	ce 01       	movw	r24, r28
    3128:	61 e3       	ldi	r22, 0x31	; 49
    312a:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <uart_send_byte>
		uart_send_byte(which,'1');
    312e:	ce 01       	movw	r24, r28
    3130:	61 e3       	ldi	r22, 0x31	; 49
    3132:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <uart_send_byte>
		break;
    3136:	3f c0       	rjmp	.+126    	; 0x31b6 <uart_send_BIN4+0x264>
	case(12):
		uart_send_byte(which,'1');
    3138:	61 e3       	ldi	r22, 0x31	; 49
    313a:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <uart_send_byte>
		uart_send_byte(which,'1');
    313e:	ce 01       	movw	r24, r28
    3140:	61 e3       	ldi	r22, 0x31	; 49
    3142:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <uart_send_byte>
		uart_send_byte(which,'0');
    3146:	ce 01       	movw	r24, r28
    3148:	60 e3       	ldi	r22, 0x30	; 48
    314a:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <uart_send_byte>
		uart_send_byte(which,'0');
    314e:	ce 01       	movw	r24, r28
    3150:	60 e3       	ldi	r22, 0x30	; 48
    3152:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <uart_send_byte>
		break;
    3156:	2f c0       	rjmp	.+94     	; 0x31b6 <uart_send_BIN4+0x264>
	case(13):
		uart_send_byte(which,'1');
    3158:	61 e3       	ldi	r22, 0x31	; 49
    315a:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <uart_send_byte>
		uart_send_byte(which,'1');
    315e:	ce 01       	movw	r24, r28
    3160:	61 e3       	ldi	r22, 0x31	; 49
    3162:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <uart_send_byte>
		uart_send_byte(which,'0');
    3166:	ce 01       	movw	r24, r28
    3168:	60 e3       	ldi	r22, 0x30	; 48
    316a:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <uart_send_byte>
		uart_send_byte(which,'1');
    316e:	ce 01       	movw	r24, r28
    3170:	61 e3       	ldi	r22, 0x31	; 49
    3172:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <uart_send_byte>
		break;
    3176:	1f c0       	rjmp	.+62     	; 0x31b6 <uart_send_BIN4+0x264>
	case(14):
		uart_send_byte(which,'1');
    3178:	61 e3       	ldi	r22, 0x31	; 49
    317a:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <uart_send_byte>
		uart_send_byte(which,'1');
    317e:	ce 01       	movw	r24, r28
    3180:	61 e3       	ldi	r22, 0x31	; 49
    3182:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <uart_send_byte>
		uart_send_byte(which,'1');
    3186:	ce 01       	movw	r24, r28
    3188:	61 e3       	ldi	r22, 0x31	; 49
    318a:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <uart_send_byte>
		uart_send_byte(which,'0');
    318e:	ce 01       	movw	r24, r28
    3190:	60 e3       	ldi	r22, 0x30	; 48
    3192:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <uart_send_byte>
		break;
    3196:	0f c0       	rjmp	.+30     	; 0x31b6 <uart_send_BIN4+0x264>
	case(15):
		uart_send_byte(which,'1');
    3198:	61 e3       	ldi	r22, 0x31	; 49
    319a:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <uart_send_byte>
		uart_send_byte(which,'1');
    319e:	ce 01       	movw	r24, r28
    31a0:	61 e3       	ldi	r22, 0x31	; 49
    31a2:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <uart_send_byte>
		uart_send_byte(which,'1');
    31a6:	ce 01       	movw	r24, r28
    31a8:	61 e3       	ldi	r22, 0x31	; 49
    31aa:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <uart_send_byte>
		uart_send_byte(which,'1');
    31ae:	ce 01       	movw	r24, r28
    31b0:	61 e3       	ldi	r22, 0x31	; 49
    31b2:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <uart_send_byte>
		break;
	}	
}
    31b6:	df 91       	pop	r29
    31b8:	cf 91       	pop	r28
    31ba:	08 95       	ret

000031bc <uart_send_BIN8>:

//Sends out tosend as ASCII text in 'b01101010' format
void uart_send_BIN8(USART_t* which, uint8_t lowb){
    31bc:	1f 93       	push	r17
    31be:	cf 93       	push	r28
    31c0:	df 93       	push	r29
    31c2:	ec 01       	movw	r28, r24
    31c4:	16 2f       	mov	r17, r22
	uart_send_byte(which,'b');
    31c6:	62 e6       	ldi	r22, 0x62	; 98
    31c8:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <uart_send_byte>
	uart_send_BIN4(which, lowb>>4);
    31cc:	61 2f       	mov	r22, r17
    31ce:	62 95       	swap	r22
    31d0:	6f 70       	andi	r22, 0x0F	; 15
    31d2:	ce 01       	movw	r24, r28
    31d4:	0e 94 a9 17 	call	0x2f52	; 0x2f52 <uart_send_BIN4>
	uart_send_BIN4(which, lowb & 0x0F);
    31d8:	61 2f       	mov	r22, r17
    31da:	6f 70       	andi	r22, 0x0F	; 15
    31dc:	ce 01       	movw	r24, r28
    31de:	0e 94 a9 17 	call	0x2f52	; 0x2f52 <uart_send_BIN4>
}
    31e2:	df 91       	pop	r29
    31e4:	cf 91       	pop	r28
    31e6:	1f 91       	pop	r17
    31e8:	08 95       	ret

000031ea <uart_send_HEX4>:
	
void uart_send_HEX4(USART_t* which, uint8_t lowb){
	switch(lowb){
    31ea:	67 30       	cpi	r22, 0x07	; 7
    31ec:	09 f4       	brne	.+2      	; 0x31f0 <uart_send_HEX4+0x6>
    31ee:	3f c0       	rjmp	.+126    	; 0x326e <uart_send_HEX4+0x84>
    31f0:	68 30       	cpi	r22, 0x08	; 8
    31f2:	70 f4       	brcc	.+28     	; 0x3210 <uart_send_HEX4+0x26>
    31f4:	63 30       	cpi	r22, 0x03	; 3
    31f6:	59 f1       	breq	.+86     	; 0x324e <uart_send_HEX4+0x64>
    31f8:	64 30       	cpi	r22, 0x04	; 4
    31fa:	28 f4       	brcc	.+10     	; 0x3206 <uart_send_HEX4+0x1c>
    31fc:	61 30       	cpi	r22, 0x01	; 1
    31fe:	f9 f0       	breq	.+62     	; 0x323e <uart_send_HEX4+0x54>
    3200:	62 30       	cpi	r22, 0x02	; 2
    3202:	08 f5       	brcc	.+66     	; 0x3246 <uart_send_HEX4+0x5c>
    3204:	18 c0       	rjmp	.+48     	; 0x3236 <uart_send_HEX4+0x4c>
    3206:	65 30       	cpi	r22, 0x05	; 5
    3208:	51 f1       	breq	.+84     	; 0x325e <uart_send_HEX4+0x74>
    320a:	66 30       	cpi	r22, 0x06	; 6
    320c:	60 f5       	brcc	.+88     	; 0x3266 <uart_send_HEX4+0x7c>
    320e:	23 c0       	rjmp	.+70     	; 0x3256 <uart_send_HEX4+0x6c>
    3210:	6b 30       	cpi	r22, 0x0B	; 11
    3212:	e9 f1       	breq	.+122    	; 0x328e <uart_send_HEX4+0xa4>
    3214:	6c 30       	cpi	r22, 0x0C	; 12
    3216:	28 f4       	brcc	.+10     	; 0x3222 <uart_send_HEX4+0x38>
    3218:	69 30       	cpi	r22, 0x09	; 9
    321a:	89 f1       	breq	.+98     	; 0x327e <uart_send_HEX4+0x94>
    321c:	6a 30       	cpi	r22, 0x0A	; 10
    321e:	98 f5       	brcc	.+102    	; 0x3286 <uart_send_HEX4+0x9c>
    3220:	2a c0       	rjmp	.+84     	; 0x3276 <uart_send_HEX4+0x8c>
    3222:	6d 30       	cpi	r22, 0x0D	; 13
    3224:	e1 f1       	breq	.+120    	; 0x329e <uart_send_HEX4+0xb4>
    3226:	6d 30       	cpi	r22, 0x0D	; 13
    3228:	b0 f1       	brcs	.+108    	; 0x3296 <uart_send_HEX4+0xac>
    322a:	6e 30       	cpi	r22, 0x0E	; 14
    322c:	e1 f1       	breq	.+120    	; 0x32a6 <uart_send_HEX4+0xbc>
    322e:	6f 30       	cpi	r22, 0x0F	; 15
    3230:	09 f0       	breq	.+2      	; 0x3234 <uart_send_HEX4+0x4a>
    3232:	40 c0       	rjmp	.+128    	; 0x32b4 <uart_send_HEX4+0xca>
    3234:	3c c0       	rjmp	.+120    	; 0x32ae <uart_send_HEX4+0xc4>
	case(0):
		uart_send_byte( which, '0');
    3236:	60 e3       	ldi	r22, 0x30	; 48
    3238:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <uart_send_byte>
		break;
    323c:	08 95       	ret
	case(1):
		uart_send_byte( which, '1');
    323e:	61 e3       	ldi	r22, 0x31	; 49
    3240:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <uart_send_byte>
		break;
    3244:	08 95       	ret
	case(2):
		uart_send_byte( which, '2');
    3246:	62 e3       	ldi	r22, 0x32	; 50
    3248:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <uart_send_byte>
		break;
    324c:	08 95       	ret
	case(3):
		uart_send_byte( which, '3');
    324e:	63 e3       	ldi	r22, 0x33	; 51
    3250:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <uart_send_byte>
		break;
    3254:	08 95       	ret
	case(4):
		uart_send_byte( which, '4');
    3256:	64 e3       	ldi	r22, 0x34	; 52
    3258:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <uart_send_byte>
		break;
    325c:	08 95       	ret
	case(5):
		uart_send_byte( which, '5');
    325e:	65 e3       	ldi	r22, 0x35	; 53
    3260:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <uart_send_byte>
		break;
    3264:	08 95       	ret
	case(6):
		uart_send_byte( which, '6');
    3266:	66 e3       	ldi	r22, 0x36	; 54
    3268:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <uart_send_byte>
		break;
    326c:	08 95       	ret
	case(7):
		uart_send_byte( which, '7');
    326e:	67 e3       	ldi	r22, 0x37	; 55
    3270:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <uart_send_byte>
		break;
    3274:	08 95       	ret
	case(8):
		uart_send_byte( which, '8');
    3276:	68 e3       	ldi	r22, 0x38	; 56
    3278:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <uart_send_byte>
		break;
    327c:	08 95       	ret
	case(9):
		uart_send_byte( which, '9');
    327e:	69 e3       	ldi	r22, 0x39	; 57
    3280:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <uart_send_byte>
		break;
    3284:	08 95       	ret
	case(10):
		uart_send_byte( which, 'A');
    3286:	61 e4       	ldi	r22, 0x41	; 65
    3288:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <uart_send_byte>
		break;
    328c:	08 95       	ret
	case(11):
		uart_send_byte( which, 'B');
    328e:	62 e4       	ldi	r22, 0x42	; 66
    3290:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <uart_send_byte>
		break;
    3294:	08 95       	ret
	case(12):
		uart_send_byte( which, 'C');
    3296:	63 e4       	ldi	r22, 0x43	; 67
    3298:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <uart_send_byte>
		break;
    329c:	08 95       	ret
	case(13):
		uart_send_byte( which, 'D');
    329e:	64 e4       	ldi	r22, 0x44	; 68
    32a0:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <uart_send_byte>
		break;
    32a4:	08 95       	ret
	case(14):
		uart_send_byte( which, 'E');
    32a6:	65 e4       	ldi	r22, 0x45	; 69
    32a8:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <uart_send_byte>
		break;
    32ac:	08 95       	ret
	case(15):
		uart_send_byte( which, 'F');
    32ae:	66 e4       	ldi	r22, 0x46	; 70
    32b0:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <uart_send_byte>
    32b4:	08 95       	ret

000032b6 <uart_send_HEX8>:
		break;
	}	
}

void uart_send_HEX8(USART_t* which, uint8_t lowb){
    32b6:	1f 93       	push	r17
    32b8:	cf 93       	push	r28
    32ba:	df 93       	push	r29
    32bc:	ec 01       	movw	r28, r24
    32be:	16 2f       	mov	r17, r22
	uart_send_HEX4(which, lowb>>4);
    32c0:	62 95       	swap	r22
    32c2:	6f 70       	andi	r22, 0x0F	; 15
    32c4:	0e 94 f5 18 	call	0x31ea	; 0x31ea <uart_send_HEX4>
	uart_send_HEX4(which, lowb & 0x0F);
    32c8:	61 2f       	mov	r22, r17
    32ca:	6f 70       	andi	r22, 0x0F	; 15
    32cc:	ce 01       	movw	r24, r28
    32ce:	0e 94 f5 18 	call	0x31ea	; 0x31ea <uart_send_HEX4>
}
    32d2:	df 91       	pop	r29
    32d4:	cf 91       	pop	r28
    32d6:	1f 91       	pop	r17
    32d8:	08 95       	ret

000032da <uart_send_HEX16b>:

void uart_send_HEX16b(USART_t* which, uint8_t highb, uint8_t lowb){
    32da:	1f 93       	push	r17
    32dc:	cf 93       	push	r28
    32de:	df 93       	push	r29
    32e0:	ec 01       	movw	r28, r24
    32e2:	14 2f       	mov	r17, r20
	uart_send_HEX8(which, highb);
    32e4:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <uart_send_HEX8>
	uart_send_HEX8(which, lowb);
    32e8:	ce 01       	movw	r24, r28
    32ea:	61 2f       	mov	r22, r17
    32ec:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <uart_send_HEX8>
}
    32f0:	df 91       	pop	r29
    32f2:	cf 91       	pop	r28
    32f4:	1f 91       	pop	r17
    32f6:	08 95       	ret

000032f8 <uart_send_HEX16>:

void uart_send_HEX16(USART_t* which, uint16_t highb){
    32f8:	1f 93       	push	r17
    32fa:	cf 93       	push	r28
    32fc:	df 93       	push	r29
    32fe:	ec 01       	movw	r28, r24
    3300:	16 2f       	mov	r17, r22
    3302:	67 2f       	mov	r22, r23
	uint8_t blah;
	blah = (uint8_t)(highb>>8);
	uart_send_HEX8(which, blah);
    3304:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <uart_send_HEX8>
	blah = (uint8_t)(highb & 0x00FF);
	uart_send_HEX8(which, blah);
    3308:	ce 01       	movw	r24, r28
    330a:	61 2f       	mov	r22, r17
    330c:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <uart_send_HEX8>
}
    3310:	df 91       	pop	r29
    3312:	cf 91       	pop	r28
    3314:	1f 91       	pop	r17
    3316:	08 95       	ret

00003318 <uart_enq_BIN4>:
//== The Queue-based versions (NON-BLOCKING) of the display functions ==
//======================================================================


//Most Significant Bit first
void uart_enq_BIN4(USART_t* which, uint8_t lowb){
    3318:	cf 93       	push	r28
    331a:	df 93       	push	r29
    331c:	ec 01       	movw	r28, r24
	switch(lowb){
    331e:	67 30       	cpi	r22, 0x07	; 7
    3320:	09 f4       	brne	.+2      	; 0x3324 <uart_enq_BIN4+0xc>
    3322:	9d c0       	rjmp	.+314    	; 0x345e <uart_enq_BIN4+0x146>
    3324:	68 30       	cpi	r22, 0x08	; 8
    3326:	90 f4       	brcc	.+36     	; 0x334c <uart_enq_BIN4+0x34>
    3328:	63 30       	cpi	r22, 0x03	; 3
    332a:	09 f4       	brne	.+2      	; 0x332e <uart_enq_BIN4+0x16>
    332c:	58 c0       	rjmp	.+176    	; 0x33de <uart_enq_BIN4+0xc6>
    332e:	64 30       	cpi	r22, 0x04	; 4
    3330:	30 f4       	brcc	.+12     	; 0x333e <uart_enq_BIN4+0x26>
    3332:	61 30       	cpi	r22, 0x01	; 1
    3334:	a1 f1       	breq	.+104    	; 0x339e <uart_enq_BIN4+0x86>
    3336:	62 30       	cpi	r22, 0x02	; 2
    3338:	08 f0       	brcs	.+2      	; 0x333c <uart_enq_BIN4+0x24>
    333a:	41 c0       	rjmp	.+130    	; 0x33be <uart_enq_BIN4+0xa6>
    333c:	20 c0       	rjmp	.+64     	; 0x337e <uart_enq_BIN4+0x66>
    333e:	65 30       	cpi	r22, 0x05	; 5
    3340:	09 f4       	brne	.+2      	; 0x3344 <uart_enq_BIN4+0x2c>
    3342:	6d c0       	rjmp	.+218    	; 0x341e <uart_enq_BIN4+0x106>
    3344:	66 30       	cpi	r22, 0x06	; 6
    3346:	08 f0       	brcs	.+2      	; 0x334a <uart_enq_BIN4+0x32>
    3348:	7a c0       	rjmp	.+244    	; 0x343e <uart_enq_BIN4+0x126>
    334a:	59 c0       	rjmp	.+178    	; 0x33fe <uart_enq_BIN4+0xe6>
    334c:	6b 30       	cpi	r22, 0x0B	; 11
    334e:	09 f4       	brne	.+2      	; 0x3352 <uart_enq_BIN4+0x3a>
    3350:	c6 c0       	rjmp	.+396    	; 0x34de <uart_enq_BIN4+0x1c6>
    3352:	6c 30       	cpi	r22, 0x0C	; 12
    3354:	38 f4       	brcc	.+14     	; 0x3364 <uart_enq_BIN4+0x4c>
    3356:	69 30       	cpi	r22, 0x09	; 9
    3358:	09 f4       	brne	.+2      	; 0x335c <uart_enq_BIN4+0x44>
    335a:	a1 c0       	rjmp	.+322    	; 0x349e <uart_enq_BIN4+0x186>
    335c:	6a 30       	cpi	r22, 0x0A	; 10
    335e:	08 f0       	brcs	.+2      	; 0x3362 <uart_enq_BIN4+0x4a>
    3360:	ae c0       	rjmp	.+348    	; 0x34be <uart_enq_BIN4+0x1a6>
    3362:	8d c0       	rjmp	.+282    	; 0x347e <uart_enq_BIN4+0x166>
    3364:	6d 30       	cpi	r22, 0x0D	; 13
    3366:	09 f4       	brne	.+2      	; 0x336a <uart_enq_BIN4+0x52>
    3368:	da c0       	rjmp	.+436    	; 0x351e <uart_enq_BIN4+0x206>
    336a:	6d 30       	cpi	r22, 0x0D	; 13
    336c:	08 f4       	brcc	.+2      	; 0x3370 <uart_enq_BIN4+0x58>
    336e:	c7 c0       	rjmp	.+398    	; 0x34fe <uart_enq_BIN4+0x1e6>
    3370:	6e 30       	cpi	r22, 0x0E	; 14
    3372:	09 f4       	brne	.+2      	; 0x3376 <uart_enq_BIN4+0x5e>
    3374:	e4 c0       	rjmp	.+456    	; 0x353e <uart_enq_BIN4+0x226>
    3376:	6f 30       	cpi	r22, 0x0F	; 15
    3378:	09 f0       	breq	.+2      	; 0x337c <uart_enq_BIN4+0x64>
    337a:	00 c1       	rjmp	.+512    	; 0x357c <uart_enq_BIN4+0x264>
    337c:	f0 c0       	rjmp	.+480    	; 0x355e <uart_enq_BIN4+0x246>
	case(0):
		uart_enqueue(which, '0');
    337e:	60 e3       	ldi	r22, 0x30	; 48
    3380:	0e 94 7a 29 	call	0x52f4	; 0x52f4 <uart_enqueue>
		uart_enqueue(which, '0');
    3384:	ce 01       	movw	r24, r28
    3386:	60 e3       	ldi	r22, 0x30	; 48
    3388:	0e 94 7a 29 	call	0x52f4	; 0x52f4 <uart_enqueue>
		uart_enqueue(which, '0');
    338c:	ce 01       	movw	r24, r28
    338e:	60 e3       	ldi	r22, 0x30	; 48
    3390:	0e 94 7a 29 	call	0x52f4	; 0x52f4 <uart_enqueue>
		uart_enqueue(which, '0');
    3394:	ce 01       	movw	r24, r28
    3396:	60 e3       	ldi	r22, 0x30	; 48
    3398:	0e 94 7a 29 	call	0x52f4	; 0x52f4 <uart_enqueue>
		break;
    339c:	ef c0       	rjmp	.+478    	; 0x357c <uart_enq_BIN4+0x264>
	case(1):
		uart_enqueue(which, '0');
    339e:	60 e3       	ldi	r22, 0x30	; 48
    33a0:	0e 94 7a 29 	call	0x52f4	; 0x52f4 <uart_enqueue>
		uart_enqueue(which, '0');
    33a4:	ce 01       	movw	r24, r28
    33a6:	60 e3       	ldi	r22, 0x30	; 48
    33a8:	0e 94 7a 29 	call	0x52f4	; 0x52f4 <uart_enqueue>
		uart_enqueue(which, '0');
    33ac:	ce 01       	movw	r24, r28
    33ae:	60 e3       	ldi	r22, 0x30	; 48
    33b0:	0e 94 7a 29 	call	0x52f4	; 0x52f4 <uart_enqueue>
		uart_enqueue(which, '1');
    33b4:	ce 01       	movw	r24, r28
    33b6:	61 e3       	ldi	r22, 0x31	; 49
    33b8:	0e 94 7a 29 	call	0x52f4	; 0x52f4 <uart_enqueue>
		break;
    33bc:	df c0       	rjmp	.+446    	; 0x357c <uart_enq_BIN4+0x264>
	case(2):
		uart_enqueue(which, '0');
    33be:	60 e3       	ldi	r22, 0x30	; 48
    33c0:	0e 94 7a 29 	call	0x52f4	; 0x52f4 <uart_enqueue>
		uart_enqueue(which, '0');
    33c4:	ce 01       	movw	r24, r28
    33c6:	60 e3       	ldi	r22, 0x30	; 48
    33c8:	0e 94 7a 29 	call	0x52f4	; 0x52f4 <uart_enqueue>
		uart_enqueue(which, '1');
    33cc:	ce 01       	movw	r24, r28
    33ce:	61 e3       	ldi	r22, 0x31	; 49
    33d0:	0e 94 7a 29 	call	0x52f4	; 0x52f4 <uart_enqueue>
		uart_enqueue(which, '0');
    33d4:	ce 01       	movw	r24, r28
    33d6:	60 e3       	ldi	r22, 0x30	; 48
    33d8:	0e 94 7a 29 	call	0x52f4	; 0x52f4 <uart_enqueue>
		break;
    33dc:	cf c0       	rjmp	.+414    	; 0x357c <uart_enq_BIN4+0x264>
	case(3):
		uart_enqueue(which, '0');
    33de:	60 e3       	ldi	r22, 0x30	; 48
    33e0:	0e 94 7a 29 	call	0x52f4	; 0x52f4 <uart_enqueue>
		uart_enqueue(which, '0');
    33e4:	ce 01       	movw	r24, r28
    33e6:	60 e3       	ldi	r22, 0x30	; 48
    33e8:	0e 94 7a 29 	call	0x52f4	; 0x52f4 <uart_enqueue>
		uart_enqueue(which, '1');
    33ec:	ce 01       	movw	r24, r28
    33ee:	61 e3       	ldi	r22, 0x31	; 49
    33f0:	0e 94 7a 29 	call	0x52f4	; 0x52f4 <uart_enqueue>
		uart_enqueue(which, '1');
    33f4:	ce 01       	movw	r24, r28
    33f6:	61 e3       	ldi	r22, 0x31	; 49
    33f8:	0e 94 7a 29 	call	0x52f4	; 0x52f4 <uart_enqueue>
		break;
    33fc:	bf c0       	rjmp	.+382    	; 0x357c <uart_enq_BIN4+0x264>
	case(4):
		uart_enqueue(which, '0');
    33fe:	60 e3       	ldi	r22, 0x30	; 48
    3400:	0e 94 7a 29 	call	0x52f4	; 0x52f4 <uart_enqueue>
		uart_enqueue(which, '1');
    3404:	ce 01       	movw	r24, r28
    3406:	61 e3       	ldi	r22, 0x31	; 49
    3408:	0e 94 7a 29 	call	0x52f4	; 0x52f4 <uart_enqueue>
		uart_enqueue(which, '0');
    340c:	ce 01       	movw	r24, r28
    340e:	60 e3       	ldi	r22, 0x30	; 48
    3410:	0e 94 7a 29 	call	0x52f4	; 0x52f4 <uart_enqueue>
		uart_enqueue(which, '0');
    3414:	ce 01       	movw	r24, r28
    3416:	60 e3       	ldi	r22, 0x30	; 48
    3418:	0e 94 7a 29 	call	0x52f4	; 0x52f4 <uart_enqueue>
		break;
    341c:	af c0       	rjmp	.+350    	; 0x357c <uart_enq_BIN4+0x264>
	case(5):
		uart_enqueue(which, '0');
    341e:	60 e3       	ldi	r22, 0x30	; 48
    3420:	0e 94 7a 29 	call	0x52f4	; 0x52f4 <uart_enqueue>
		uart_enqueue(which, '1');
    3424:	ce 01       	movw	r24, r28
    3426:	61 e3       	ldi	r22, 0x31	; 49
    3428:	0e 94 7a 29 	call	0x52f4	; 0x52f4 <uart_enqueue>
		uart_enqueue(which, '0');
    342c:	ce 01       	movw	r24, r28
    342e:	60 e3       	ldi	r22, 0x30	; 48
    3430:	0e 94 7a 29 	call	0x52f4	; 0x52f4 <uart_enqueue>
		uart_enqueue(which, '1');
    3434:	ce 01       	movw	r24, r28
    3436:	61 e3       	ldi	r22, 0x31	; 49
    3438:	0e 94 7a 29 	call	0x52f4	; 0x52f4 <uart_enqueue>
		break;
    343c:	9f c0       	rjmp	.+318    	; 0x357c <uart_enq_BIN4+0x264>
	case(6):
		uart_enqueue(which, '0');
    343e:	60 e3       	ldi	r22, 0x30	; 48
    3440:	0e 94 7a 29 	call	0x52f4	; 0x52f4 <uart_enqueue>
		uart_enqueue(which, '1');
    3444:	ce 01       	movw	r24, r28
    3446:	61 e3       	ldi	r22, 0x31	; 49
    3448:	0e 94 7a 29 	call	0x52f4	; 0x52f4 <uart_enqueue>
		uart_enqueue(which, '1');
    344c:	ce 01       	movw	r24, r28
    344e:	61 e3       	ldi	r22, 0x31	; 49
    3450:	0e 94 7a 29 	call	0x52f4	; 0x52f4 <uart_enqueue>
		uart_enqueue(which, '0');
    3454:	ce 01       	movw	r24, r28
    3456:	60 e3       	ldi	r22, 0x30	; 48
    3458:	0e 94 7a 29 	call	0x52f4	; 0x52f4 <uart_enqueue>
		break;
    345c:	8f c0       	rjmp	.+286    	; 0x357c <uart_enq_BIN4+0x264>
	case(7):
		uart_enqueue(which, '0');
    345e:	60 e3       	ldi	r22, 0x30	; 48
    3460:	0e 94 7a 29 	call	0x52f4	; 0x52f4 <uart_enqueue>
		uart_enqueue(which, '1');
    3464:	ce 01       	movw	r24, r28
    3466:	61 e3       	ldi	r22, 0x31	; 49
    3468:	0e 94 7a 29 	call	0x52f4	; 0x52f4 <uart_enqueue>
		uart_enqueue(which, '1');
    346c:	ce 01       	movw	r24, r28
    346e:	61 e3       	ldi	r22, 0x31	; 49
    3470:	0e 94 7a 29 	call	0x52f4	; 0x52f4 <uart_enqueue>
		uart_enqueue(which, '1');
    3474:	ce 01       	movw	r24, r28
    3476:	61 e3       	ldi	r22, 0x31	; 49
    3478:	0e 94 7a 29 	call	0x52f4	; 0x52f4 <uart_enqueue>
		break;
    347c:	7f c0       	rjmp	.+254    	; 0x357c <uart_enq_BIN4+0x264>
	case(8):
		uart_enqueue(which, '1');
    347e:	61 e3       	ldi	r22, 0x31	; 49
    3480:	0e 94 7a 29 	call	0x52f4	; 0x52f4 <uart_enqueue>
		uart_enqueue(which, '0');
    3484:	ce 01       	movw	r24, r28
    3486:	60 e3       	ldi	r22, 0x30	; 48
    3488:	0e 94 7a 29 	call	0x52f4	; 0x52f4 <uart_enqueue>
		uart_enqueue(which, '0');
    348c:	ce 01       	movw	r24, r28
    348e:	60 e3       	ldi	r22, 0x30	; 48
    3490:	0e 94 7a 29 	call	0x52f4	; 0x52f4 <uart_enqueue>
		uart_enqueue(which, '0');
    3494:	ce 01       	movw	r24, r28
    3496:	60 e3       	ldi	r22, 0x30	; 48
    3498:	0e 94 7a 29 	call	0x52f4	; 0x52f4 <uart_enqueue>
		break;
    349c:	6f c0       	rjmp	.+222    	; 0x357c <uart_enq_BIN4+0x264>
	case(9):
		uart_enqueue(which, '1');
    349e:	61 e3       	ldi	r22, 0x31	; 49
    34a0:	0e 94 7a 29 	call	0x52f4	; 0x52f4 <uart_enqueue>
		uart_enqueue(which, '0');
    34a4:	ce 01       	movw	r24, r28
    34a6:	60 e3       	ldi	r22, 0x30	; 48
    34a8:	0e 94 7a 29 	call	0x52f4	; 0x52f4 <uart_enqueue>
		uart_enqueue(which, '0');
    34ac:	ce 01       	movw	r24, r28
    34ae:	60 e3       	ldi	r22, 0x30	; 48
    34b0:	0e 94 7a 29 	call	0x52f4	; 0x52f4 <uart_enqueue>
		uart_enqueue(which, '1');
    34b4:	ce 01       	movw	r24, r28
    34b6:	61 e3       	ldi	r22, 0x31	; 49
    34b8:	0e 94 7a 29 	call	0x52f4	; 0x52f4 <uart_enqueue>
		break;
    34bc:	5f c0       	rjmp	.+190    	; 0x357c <uart_enq_BIN4+0x264>
	case(10):
		uart_enqueue(which, '1');
    34be:	61 e3       	ldi	r22, 0x31	; 49
    34c0:	0e 94 7a 29 	call	0x52f4	; 0x52f4 <uart_enqueue>
		uart_enqueue(which, '0');
    34c4:	ce 01       	movw	r24, r28
    34c6:	60 e3       	ldi	r22, 0x30	; 48
    34c8:	0e 94 7a 29 	call	0x52f4	; 0x52f4 <uart_enqueue>
		uart_enqueue(which, '1');
    34cc:	ce 01       	movw	r24, r28
    34ce:	61 e3       	ldi	r22, 0x31	; 49
    34d0:	0e 94 7a 29 	call	0x52f4	; 0x52f4 <uart_enqueue>
		uart_enqueue(which, '0');
    34d4:	ce 01       	movw	r24, r28
    34d6:	60 e3       	ldi	r22, 0x30	; 48
    34d8:	0e 94 7a 29 	call	0x52f4	; 0x52f4 <uart_enqueue>
		break;
    34dc:	4f c0       	rjmp	.+158    	; 0x357c <uart_enq_BIN4+0x264>
	case(11):
		uart_enqueue(which, '1');
    34de:	61 e3       	ldi	r22, 0x31	; 49
    34e0:	0e 94 7a 29 	call	0x52f4	; 0x52f4 <uart_enqueue>
		uart_enqueue(which, '0');
    34e4:	ce 01       	movw	r24, r28
    34e6:	60 e3       	ldi	r22, 0x30	; 48
    34e8:	0e 94 7a 29 	call	0x52f4	; 0x52f4 <uart_enqueue>
		uart_enqueue(which, '1');
    34ec:	ce 01       	movw	r24, r28
    34ee:	61 e3       	ldi	r22, 0x31	; 49
    34f0:	0e 94 7a 29 	call	0x52f4	; 0x52f4 <uart_enqueue>
		uart_enqueue(which, '1');
    34f4:	ce 01       	movw	r24, r28
    34f6:	61 e3       	ldi	r22, 0x31	; 49
    34f8:	0e 94 7a 29 	call	0x52f4	; 0x52f4 <uart_enqueue>
		break;
    34fc:	3f c0       	rjmp	.+126    	; 0x357c <uart_enq_BIN4+0x264>
	case(12):
		uart_enqueue(which, '1');
    34fe:	61 e3       	ldi	r22, 0x31	; 49
    3500:	0e 94 7a 29 	call	0x52f4	; 0x52f4 <uart_enqueue>
		uart_enqueue(which, '1');
    3504:	ce 01       	movw	r24, r28
    3506:	61 e3       	ldi	r22, 0x31	; 49
    3508:	0e 94 7a 29 	call	0x52f4	; 0x52f4 <uart_enqueue>
		uart_enqueue(which, '0');
    350c:	ce 01       	movw	r24, r28
    350e:	60 e3       	ldi	r22, 0x30	; 48
    3510:	0e 94 7a 29 	call	0x52f4	; 0x52f4 <uart_enqueue>
		uart_enqueue(which, '0');
    3514:	ce 01       	movw	r24, r28
    3516:	60 e3       	ldi	r22, 0x30	; 48
    3518:	0e 94 7a 29 	call	0x52f4	; 0x52f4 <uart_enqueue>
		break;
    351c:	2f c0       	rjmp	.+94     	; 0x357c <uart_enq_BIN4+0x264>
	case(13):
		uart_enqueue(which, '1');
    351e:	61 e3       	ldi	r22, 0x31	; 49
    3520:	0e 94 7a 29 	call	0x52f4	; 0x52f4 <uart_enqueue>
		uart_enqueue(which, '1');
    3524:	ce 01       	movw	r24, r28
    3526:	61 e3       	ldi	r22, 0x31	; 49
    3528:	0e 94 7a 29 	call	0x52f4	; 0x52f4 <uart_enqueue>
		uart_enqueue(which, '0');
    352c:	ce 01       	movw	r24, r28
    352e:	60 e3       	ldi	r22, 0x30	; 48
    3530:	0e 94 7a 29 	call	0x52f4	; 0x52f4 <uart_enqueue>
		uart_enqueue(which, '1');
    3534:	ce 01       	movw	r24, r28
    3536:	61 e3       	ldi	r22, 0x31	; 49
    3538:	0e 94 7a 29 	call	0x52f4	; 0x52f4 <uart_enqueue>
		break;
    353c:	1f c0       	rjmp	.+62     	; 0x357c <uart_enq_BIN4+0x264>
	case(14):
		uart_enqueue(which, '1');
    353e:	61 e3       	ldi	r22, 0x31	; 49
    3540:	0e 94 7a 29 	call	0x52f4	; 0x52f4 <uart_enqueue>
		uart_enqueue(which, '1');
    3544:	ce 01       	movw	r24, r28
    3546:	61 e3       	ldi	r22, 0x31	; 49
    3548:	0e 94 7a 29 	call	0x52f4	; 0x52f4 <uart_enqueue>
		uart_enqueue(which, '1');
    354c:	ce 01       	movw	r24, r28
    354e:	61 e3       	ldi	r22, 0x31	; 49
    3550:	0e 94 7a 29 	call	0x52f4	; 0x52f4 <uart_enqueue>
		uart_enqueue(which, '0');
    3554:	ce 01       	movw	r24, r28
    3556:	60 e3       	ldi	r22, 0x30	; 48
    3558:	0e 94 7a 29 	call	0x52f4	; 0x52f4 <uart_enqueue>
		break;
    355c:	0f c0       	rjmp	.+30     	; 0x357c <uart_enq_BIN4+0x264>
	case(15):
		uart_enqueue(which, '1');
    355e:	61 e3       	ldi	r22, 0x31	; 49
    3560:	0e 94 7a 29 	call	0x52f4	; 0x52f4 <uart_enqueue>
		uart_enqueue(which, '1');
    3564:	ce 01       	movw	r24, r28
    3566:	61 e3       	ldi	r22, 0x31	; 49
    3568:	0e 94 7a 29 	call	0x52f4	; 0x52f4 <uart_enqueue>
		uart_enqueue(which, '1');
    356c:	ce 01       	movw	r24, r28
    356e:	61 e3       	ldi	r22, 0x31	; 49
    3570:	0e 94 7a 29 	call	0x52f4	; 0x52f4 <uart_enqueue>
		uart_enqueue(which, '1');
    3574:	ce 01       	movw	r24, r28
    3576:	61 e3       	ldi	r22, 0x31	; 49
    3578:	0e 94 7a 29 	call	0x52f4	; 0x52f4 <uart_enqueue>
		break;
	}	
}
    357c:	df 91       	pop	r29
    357e:	cf 91       	pop	r28
    3580:	08 95       	ret

00003582 <uart_enq_BIN8>:

//enqs out toenq as ASCII text in 'b01101010' format
void uart_enq_BIN8(USART_t* which, uint8_t lowb){
    3582:	1f 93       	push	r17
    3584:	cf 93       	push	r28
    3586:	df 93       	push	r29
    3588:	ec 01       	movw	r28, r24
    358a:	16 2f       	mov	r17, r22
	uart_enqueue(which, 'b');
    358c:	62 e6       	ldi	r22, 0x62	; 98
    358e:	0e 94 7a 29 	call	0x52f4	; 0x52f4 <uart_enqueue>
	uart_enq_BIN4(which, lowb>>4);
    3592:	61 2f       	mov	r22, r17
    3594:	62 95       	swap	r22
    3596:	6f 70       	andi	r22, 0x0F	; 15
    3598:	ce 01       	movw	r24, r28
    359a:	0e 94 8c 19 	call	0x3318	; 0x3318 <uart_enq_BIN4>
	uart_enq_BIN4(which, lowb & 0x0F);
    359e:	61 2f       	mov	r22, r17
    35a0:	6f 70       	andi	r22, 0x0F	; 15
    35a2:	ce 01       	movw	r24, r28
    35a4:	0e 94 8c 19 	call	0x3318	; 0x3318 <uart_enq_BIN4>
}
    35a8:	df 91       	pop	r29
    35aa:	cf 91       	pop	r28
    35ac:	1f 91       	pop	r17
    35ae:	08 95       	ret

000035b0 <uart_enq_HEX4>:
	

void uart_enq_HEX4(USART_t* which, uint8_t lowb){
	switch(lowb){
    35b0:	67 30       	cpi	r22, 0x07	; 7
    35b2:	09 f4       	brne	.+2      	; 0x35b6 <uart_enq_HEX4+0x6>
    35b4:	3f c0       	rjmp	.+126    	; 0x3634 <uart_enq_HEX4+0x84>
    35b6:	68 30       	cpi	r22, 0x08	; 8
    35b8:	70 f4       	brcc	.+28     	; 0x35d6 <uart_enq_HEX4+0x26>
    35ba:	63 30       	cpi	r22, 0x03	; 3
    35bc:	59 f1       	breq	.+86     	; 0x3614 <uart_enq_HEX4+0x64>
    35be:	64 30       	cpi	r22, 0x04	; 4
    35c0:	28 f4       	brcc	.+10     	; 0x35cc <uart_enq_HEX4+0x1c>
    35c2:	61 30       	cpi	r22, 0x01	; 1
    35c4:	f9 f0       	breq	.+62     	; 0x3604 <uart_enq_HEX4+0x54>
    35c6:	62 30       	cpi	r22, 0x02	; 2
    35c8:	08 f5       	brcc	.+66     	; 0x360c <uart_enq_HEX4+0x5c>
    35ca:	18 c0       	rjmp	.+48     	; 0x35fc <uart_enq_HEX4+0x4c>
    35cc:	65 30       	cpi	r22, 0x05	; 5
    35ce:	51 f1       	breq	.+84     	; 0x3624 <uart_enq_HEX4+0x74>
    35d0:	66 30       	cpi	r22, 0x06	; 6
    35d2:	60 f5       	brcc	.+88     	; 0x362c <uart_enq_HEX4+0x7c>
    35d4:	23 c0       	rjmp	.+70     	; 0x361c <uart_enq_HEX4+0x6c>
    35d6:	6b 30       	cpi	r22, 0x0B	; 11
    35d8:	e9 f1       	breq	.+122    	; 0x3654 <uart_enq_HEX4+0xa4>
    35da:	6c 30       	cpi	r22, 0x0C	; 12
    35dc:	28 f4       	brcc	.+10     	; 0x35e8 <uart_enq_HEX4+0x38>
    35de:	69 30       	cpi	r22, 0x09	; 9
    35e0:	89 f1       	breq	.+98     	; 0x3644 <uart_enq_HEX4+0x94>
    35e2:	6a 30       	cpi	r22, 0x0A	; 10
    35e4:	98 f5       	brcc	.+102    	; 0x364c <uart_enq_HEX4+0x9c>
    35e6:	2a c0       	rjmp	.+84     	; 0x363c <uart_enq_HEX4+0x8c>
    35e8:	6d 30       	cpi	r22, 0x0D	; 13
    35ea:	e1 f1       	breq	.+120    	; 0x3664 <uart_enq_HEX4+0xb4>
    35ec:	6d 30       	cpi	r22, 0x0D	; 13
    35ee:	b0 f1       	brcs	.+108    	; 0x365c <uart_enq_HEX4+0xac>
    35f0:	6e 30       	cpi	r22, 0x0E	; 14
    35f2:	e1 f1       	breq	.+120    	; 0x366c <uart_enq_HEX4+0xbc>
    35f4:	6f 30       	cpi	r22, 0x0F	; 15
    35f6:	09 f0       	breq	.+2      	; 0x35fa <uart_enq_HEX4+0x4a>
    35f8:	40 c0       	rjmp	.+128    	; 0x367a <uart_enq_HEX4+0xca>
    35fa:	3c c0       	rjmp	.+120    	; 0x3674 <uart_enq_HEX4+0xc4>
	case(0):
		uart_enqueue(which,  '0');
    35fc:	60 e3       	ldi	r22, 0x30	; 48
    35fe:	0e 94 7a 29 	call	0x52f4	; 0x52f4 <uart_enqueue>
		break;
    3602:	08 95       	ret
	case(1):
		uart_enqueue(which,  '1');
    3604:	61 e3       	ldi	r22, 0x31	; 49
    3606:	0e 94 7a 29 	call	0x52f4	; 0x52f4 <uart_enqueue>
		break;
    360a:	08 95       	ret
	case(2):
		uart_enqueue(which,  '2');
    360c:	62 e3       	ldi	r22, 0x32	; 50
    360e:	0e 94 7a 29 	call	0x52f4	; 0x52f4 <uart_enqueue>
		break;
    3612:	08 95       	ret
	case(3):
		uart_enqueue(which,  '3');
    3614:	63 e3       	ldi	r22, 0x33	; 51
    3616:	0e 94 7a 29 	call	0x52f4	; 0x52f4 <uart_enqueue>
		break;
    361a:	08 95       	ret
	case(4):
		uart_enqueue(which,  '4');
    361c:	64 e3       	ldi	r22, 0x34	; 52
    361e:	0e 94 7a 29 	call	0x52f4	; 0x52f4 <uart_enqueue>
		break;
    3622:	08 95       	ret
	case(5):
		uart_enqueue(which,  '5');
    3624:	65 e3       	ldi	r22, 0x35	; 53
    3626:	0e 94 7a 29 	call	0x52f4	; 0x52f4 <uart_enqueue>
		break;
    362a:	08 95       	ret
	case(6):
		uart_enqueue(which,  '6');
    362c:	66 e3       	ldi	r22, 0x36	; 54
    362e:	0e 94 7a 29 	call	0x52f4	; 0x52f4 <uart_enqueue>
		break;
    3632:	08 95       	ret
	case(7):
		uart_enqueue(which,  '7');
    3634:	67 e3       	ldi	r22, 0x37	; 55
    3636:	0e 94 7a 29 	call	0x52f4	; 0x52f4 <uart_enqueue>
		break;
    363a:	08 95       	ret
	case(8):
		uart_enqueue(which,  '8');
    363c:	68 e3       	ldi	r22, 0x38	; 56
    363e:	0e 94 7a 29 	call	0x52f4	; 0x52f4 <uart_enqueue>
		break;
    3642:	08 95       	ret
	case(9):
		uart_enqueue(which,  '9');
    3644:	69 e3       	ldi	r22, 0x39	; 57
    3646:	0e 94 7a 29 	call	0x52f4	; 0x52f4 <uart_enqueue>
		break;
    364a:	08 95       	ret
	case(10):
		uart_enqueue(which,  'A');
    364c:	61 e4       	ldi	r22, 0x41	; 65
    364e:	0e 94 7a 29 	call	0x52f4	; 0x52f4 <uart_enqueue>
		break;
    3652:	08 95       	ret
	case(11):
		uart_enqueue(which,  'B');
    3654:	62 e4       	ldi	r22, 0x42	; 66
    3656:	0e 94 7a 29 	call	0x52f4	; 0x52f4 <uart_enqueue>
		break;
    365a:	08 95       	ret
	case(12):
		uart_enqueue(which,  'C');
    365c:	63 e4       	ldi	r22, 0x43	; 67
    365e:	0e 94 7a 29 	call	0x52f4	; 0x52f4 <uart_enqueue>
		break;
    3662:	08 95       	ret
	case(13):
		uart_enqueue(which,  'D');
    3664:	64 e4       	ldi	r22, 0x44	; 68
    3666:	0e 94 7a 29 	call	0x52f4	; 0x52f4 <uart_enqueue>
		break;
    366a:	08 95       	ret
	case(14):
		uart_enqueue(which,  'E');
    366c:	65 e4       	ldi	r22, 0x45	; 69
    366e:	0e 94 7a 29 	call	0x52f4	; 0x52f4 <uart_enqueue>
		break;
    3672:	08 95       	ret
	case(15):
		uart_enqueue(which,  'F');
    3674:	66 e4       	ldi	r22, 0x46	; 70
    3676:	0e 94 7a 29 	call	0x52f4	; 0x52f4 <uart_enqueue>
    367a:	08 95       	ret

0000367c <uart_enq_HEX8>:
		break;
	}	
}

void uart_enq_HEX8(USART_t* which, uint8_t lowb){
    367c:	1f 93       	push	r17
    367e:	cf 93       	push	r28
    3680:	df 93       	push	r29
    3682:	ec 01       	movw	r28, r24
    3684:	16 2f       	mov	r17, r22
	uart_enq_HEX4(which, lowb>>4);
    3686:	62 95       	swap	r22
    3688:	6f 70       	andi	r22, 0x0F	; 15
    368a:	0e 94 d8 1a 	call	0x35b0	; 0x35b0 <uart_enq_HEX4>
	uart_enq_HEX4(which, lowb & 0x0F);
    368e:	61 2f       	mov	r22, r17
    3690:	6f 70       	andi	r22, 0x0F	; 15
    3692:	ce 01       	movw	r24, r28
    3694:	0e 94 d8 1a 	call	0x35b0	; 0x35b0 <uart_enq_HEX4>
}
    3698:	df 91       	pop	r29
    369a:	cf 91       	pop	r28
    369c:	1f 91       	pop	r17
    369e:	08 95       	ret

000036a0 <uart_enq_HEX16b>:

void uart_enq_HEX16b(USART_t* which, uint8_t highb, uint8_t lowb){
    36a0:	1f 93       	push	r17
    36a2:	cf 93       	push	r28
    36a4:	df 93       	push	r29
    36a6:	ec 01       	movw	r28, r24
    36a8:	14 2f       	mov	r17, r20
	uart_enq_HEX8(which, highb);
    36aa:	0e 94 3e 1b 	call	0x367c	; 0x367c <uart_enq_HEX8>
	uart_enq_HEX8(which, lowb);
    36ae:	ce 01       	movw	r24, r28
    36b0:	61 2f       	mov	r22, r17
    36b2:	0e 94 3e 1b 	call	0x367c	; 0x367c <uart_enq_HEX8>
}
    36b6:	df 91       	pop	r29
    36b8:	cf 91       	pop	r28
    36ba:	1f 91       	pop	r17
    36bc:	08 95       	ret

000036be <uart_enq_HEX16>:

void uart_enq_HEX16(USART_t* which, uint16_t highb){
    36be:	1f 93       	push	r17
    36c0:	cf 93       	push	r28
    36c2:	df 93       	push	r29
    36c4:	ec 01       	movw	r28, r24
    36c6:	16 2f       	mov	r17, r22
    36c8:	67 2f       	mov	r22, r23
	uint8_t blah;
	blah = (uint8_t)(highb>>8);
	uart_enq_HEX8(which, blah);
    36ca:	0e 94 3e 1b 	call	0x367c	; 0x367c <uart_enq_HEX8>
	blah = (uint8_t)(highb & 0x00FF);
	uart_enq_HEX8(which, blah);
    36ce:	ce 01       	movw	r24, r28
    36d0:	61 2f       	mov	r22, r17
    36d2:	0e 94 3e 1b 	call	0x367c	; 0x367c <uart_enq_HEX8>
}
    36d6:	df 91       	pop	r29
    36d8:	cf 91       	pop	r28
    36da:	1f 91       	pop	r17
    36dc:	08 95       	ret

000036de <__vector_25>:
//************************************************************************
//************************************************************************

//Must correspond to definitions in uart.h
ISR(USARTC0_DRE_vect) {uart_transmit(&uctrl);}//TX Interrupt
ISR(USARTC0_RXC_vect) {uart_receive(&uctrl);} //RX Interrupt
    36de:	1f 92       	push	r1
    36e0:	0f 92       	push	r0
    36e2:	0f b6       	in	r0, 0x3f	; 63
    36e4:	0f 92       	push	r0
    36e6:	08 b6       	in	r0, 0x38	; 56
    36e8:	0f 92       	push	r0
    36ea:	09 b6       	in	r0, 0x39	; 57
    36ec:	0f 92       	push	r0
    36ee:	0a b6       	in	r0, 0x3a	; 58
    36f0:	0f 92       	push	r0
    36f2:	0b b6       	in	r0, 0x3b	; 59
    36f4:	0f 92       	push	r0
    36f6:	11 24       	eor	r1, r1
    36f8:	2f 93       	push	r18
    36fa:	3f 93       	push	r19
    36fc:	4f 93       	push	r20
    36fe:	5f 93       	push	r21
    3700:	8f 93       	push	r24
    3702:	9f 93       	push	r25
    3704:	af 93       	push	r26
    3706:	bf 93       	push	r27
    3708:	cf 93       	push	r28
    370a:	df 93       	push	r29
    370c:	ef 93       	push	r30
    370e:	ff 93       	push	r31
//= RECEPTION ENGINE (ISR BASED)
//==================================

void inline uart_receive(USART_t* port){
	//keep receiving until data register is empty or incoming queue is full
	while (((port->STATUS & _BV(7)) == B8(10000000)) && (uart_icount(port) < MAX_IBUFFER_LEN)){		
    3710:	c0 ea       	ldi	r28, 0xA0	; 160
    3712:	d8 e0       	ldi	r29, 0x08	; 8
	uart_itail[idx] = 0;
}

inline uint16_t uart_icount(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_ihead[idx] >= uart_itail[idx]){	
    3714:	e2 e0       	ldi	r30, 0x02	; 2
    3716:	ff e3       	ldi	r31, 0x3F	; 63
    3718:	46 ef       	ldi	r20, 0xF6	; 246
    371a:	56 e2       	ldi	r21, 0x26	; 38
    371c:	13 c0       	rjmp	.+38     	; 0x3744 <__vector_25+0x66>
//==================================

void inline uart_receive(USART_t* port){
	//keep receiving until data register is empty or incoming queue is full
	while (((port->STATUS & _BV(7)) == B8(10000000)) && (uart_icount(port) < MAX_IBUFFER_LEN)){		
		uart_ienqueue(port, port->DATA);
    371e:	88 81       	ld	r24, Y
	}
}

inline void uart_ienqueue(USART_t* port, uint8_t datain){
	uint8_t idx = port_map(port);
	uart_ibuffer[idx][uart_ihead[idx]] = datain;
    3720:	a0 81       	ld	r26, Z
    3722:	b1 81       	ldd	r27, Z+1	; 0x01
    3724:	a6 50       	subi	r26, 0x06	; 6
    3726:	b5 4d       	sbci	r27, 0xD5	; 213
    3728:	8c 93       	st	X, r24
	uart_ihead[idx]++;
    372a:	80 81       	ld	r24, Z
    372c:	91 81       	ldd	r25, Z+1	; 0x01
    372e:	01 96       	adiw	r24, 0x01	; 1
    3730:	80 83       	st	Z, r24
    3732:	91 83       	std	Z+1, r25	; 0x01
	if (uart_ihead[idx] >= MAX_IBUFFER_LEN){
    3734:	80 81       	ld	r24, Z
    3736:	91 81       	ldd	r25, Z+1	; 0x01
    3738:	24 e0       	ldi	r18, 0x04	; 4
    373a:	80 30       	cpi	r24, 0x00	; 0
    373c:	92 07       	cpc	r25, r18
    373e:	10 f0       	brcs	.+4      	; 0x3744 <__vector_25+0x66>
		uart_ihead[idx] = 0;
    3740:	10 82       	st	Z, r1
    3742:	11 82       	std	Z+1, r1	; 0x01
//= RECEPTION ENGINE (ISR BASED)
//==================================

void inline uart_receive(USART_t* port){
	//keep receiving until data register is empty or incoming queue is full
	while (((port->STATUS & _BV(7)) == B8(10000000)) && (uart_icount(port) < MAX_IBUFFER_LEN)){		
    3744:	89 81       	ldd	r24, Y+1	; 0x01
    3746:	88 23       	and	r24, r24
    3748:	fc f4       	brge	.+62     	; 0x3788 <__vector_25+0xaa>
	uart_itail[idx] = 0;
}

inline uint16_t uart_icount(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_ihead[idx] >= uart_itail[idx]){	
    374a:	80 81       	ld	r24, Z
    374c:	91 81       	ldd	r25, Z+1	; 0x01
    374e:	da 01       	movw	r26, r20
    3750:	2d 91       	ld	r18, X+
    3752:	3c 91       	ld	r19, X
    3754:	11 97       	sbiw	r26, 0x01	; 1
    3756:	82 17       	cp	r24, r18
    3758:	93 07       	cpc	r25, r19
    375a:	40 f0       	brcs	.+16     	; 0x376c <__vector_25+0x8e>
		return (uart_ihead[idx] - uart_itail[idx]);
    375c:	80 81       	ld	r24, Z
    375e:	91 81       	ldd	r25, Z+1	; 0x01
    3760:	2d 91       	ld	r18, X+
    3762:	3c 91       	ld	r19, X
    3764:	11 97       	sbiw	r26, 0x01	; 1
    3766:	82 1b       	sub	r24, r18
    3768:	93 0b       	sbc	r25, r19
    376a:	0a c0       	rjmp	.+20     	; 0x3780 <__vector_25+0xa2>
	}
	else {
		return ((MAX_IBUFFER_LEN-uart_itail[idx])+uart_ihead[idx]);
    376c:	80 81       	ld	r24, Z
    376e:	91 81       	ldd	r25, Z+1	; 0x01
    3770:	da 01       	movw	r26, r20
    3772:	2d 91       	ld	r18, X+
    3774:	3c 91       	ld	r19, X
    3776:	11 97       	sbiw	r26, 0x01	; 1
    3778:	80 50       	subi	r24, 0x00	; 0
    377a:	9c 4f       	sbci	r25, 0xFC	; 252
    377c:	82 1b       	sub	r24, r18
    377e:	93 0b       	sbc	r25, r19
//= RECEPTION ENGINE (ISR BASED)
//==================================

void inline uart_receive(USART_t* port){
	//keep receiving until data register is empty or incoming queue is full
	while (((port->STATUS & _BV(7)) == B8(10000000)) && (uart_icount(port) < MAX_IBUFFER_LEN)){		
    3780:	b4 e0       	ldi	r27, 0x04	; 4
    3782:	80 30       	cpi	r24, 0x00	; 0
    3784:	9b 07       	cpc	r25, r27
    3786:	58 f2       	brcs	.-106    	; 0x371e <__vector_25+0x40>
//************************************************************************
//************************************************************************

//Must correspond to definitions in uart.h
ISR(USARTC0_DRE_vect) {uart_transmit(&uctrl);}//TX Interrupt
ISR(USARTC0_RXC_vect) {uart_receive(&uctrl);} //RX Interrupt
    3788:	ff 91       	pop	r31
    378a:	ef 91       	pop	r30
    378c:	df 91       	pop	r29
    378e:	cf 91       	pop	r28
    3790:	bf 91       	pop	r27
    3792:	af 91       	pop	r26
    3794:	9f 91       	pop	r25
    3796:	8f 91       	pop	r24
    3798:	5f 91       	pop	r21
    379a:	4f 91       	pop	r20
    379c:	3f 91       	pop	r19
    379e:	2f 91       	pop	r18
    37a0:	0f 90       	pop	r0
    37a2:	0b be       	out	0x3b, r0	; 59
    37a4:	0f 90       	pop	r0
    37a6:	0a be       	out	0x3a, r0	; 58
    37a8:	0f 90       	pop	r0
    37aa:	09 be       	out	0x39, r0	; 57
    37ac:	0f 90       	pop	r0
    37ae:	08 be       	out	0x38, r0	; 56
    37b0:	0f 90       	pop	r0
    37b2:	0f be       	out	0x3f, r0	; 63
    37b4:	0f 90       	pop	r0
    37b6:	1f 90       	pop	r1
    37b8:	18 95       	reti

000037ba <__vector_28>:
ISR(USARTC1_DRE_vect) {uart_transmit(&udata);}//TX Interrupt
ISR(USARTC1_RXC_vect) {uart_receive(&udata);} //RX Interrupt
    37ba:	1f 92       	push	r1
    37bc:	0f 92       	push	r0
    37be:	0f b6       	in	r0, 0x3f	; 63
    37c0:	0f 92       	push	r0
    37c2:	08 b6       	in	r0, 0x38	; 56
    37c4:	0f 92       	push	r0
    37c6:	09 b6       	in	r0, 0x39	; 57
    37c8:	0f 92       	push	r0
    37ca:	0a b6       	in	r0, 0x3a	; 58
    37cc:	0f 92       	push	r0
    37ce:	0b b6       	in	r0, 0x3b	; 59
    37d0:	0f 92       	push	r0
    37d2:	11 24       	eor	r1, r1
    37d4:	2f 93       	push	r18
    37d6:	3f 93       	push	r19
    37d8:	4f 93       	push	r20
    37da:	5f 93       	push	r21
    37dc:	8f 93       	push	r24
    37de:	9f 93       	push	r25
    37e0:	af 93       	push	r26
    37e2:	bf 93       	push	r27
    37e4:	cf 93       	push	r28
    37e6:	df 93       	push	r29
    37e8:	ef 93       	push	r30
    37ea:	ff 93       	push	r31
//= RECEPTION ENGINE (ISR BASED)
//==================================

void inline uart_receive(USART_t* port){
	//keep receiving until data register is empty or incoming queue is full
	while (((port->STATUS & _BV(7)) == B8(10000000)) && (uart_icount(port) < MAX_IBUFFER_LEN)){		
    37ec:	c0 eb       	ldi	r28, 0xB0	; 176
    37ee:	d8 e0       	ldi	r29, 0x08	; 8
	uart_itail[idx] = 0;
}

inline uint16_t uart_icount(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_ihead[idx] >= uart_itail[idx]){	
    37f0:	e4 e0       	ldi	r30, 0x04	; 4
    37f2:	ff e3       	ldi	r31, 0x3F	; 63
    37f4:	48 ef       	ldi	r20, 0xF8	; 248
    37f6:	56 e2       	ldi	r21, 0x26	; 38
    37f8:	13 c0       	rjmp	.+38     	; 0x3820 <__vector_28+0x66>
//==================================

void inline uart_receive(USART_t* port){
	//keep receiving until data register is empty or incoming queue is full
	while (((port->STATUS & _BV(7)) == B8(10000000)) && (uart_icount(port) < MAX_IBUFFER_LEN)){		
		uart_ienqueue(port, port->DATA);
    37fa:	88 81       	ld	r24, Y
	}
}

inline void uart_ienqueue(USART_t* port, uint8_t datain){
	uint8_t idx = port_map(port);
	uart_ibuffer[idx][uart_ihead[idx]] = datain;
    37fc:	a0 81       	ld	r26, Z
    37fe:	b1 81       	ldd	r27, Z+1	; 0x01
    3800:	a6 50       	subi	r26, 0x06	; 6
    3802:	b1 4d       	sbci	r27, 0xD1	; 209
    3804:	8c 93       	st	X, r24
	uart_ihead[idx]++;
    3806:	80 81       	ld	r24, Z
    3808:	91 81       	ldd	r25, Z+1	; 0x01
    380a:	01 96       	adiw	r24, 0x01	; 1
    380c:	80 83       	st	Z, r24
    380e:	91 83       	std	Z+1, r25	; 0x01
	if (uart_ihead[idx] >= MAX_IBUFFER_LEN){
    3810:	80 81       	ld	r24, Z
    3812:	91 81       	ldd	r25, Z+1	; 0x01
    3814:	24 e0       	ldi	r18, 0x04	; 4
    3816:	80 30       	cpi	r24, 0x00	; 0
    3818:	92 07       	cpc	r25, r18
    381a:	10 f0       	brcs	.+4      	; 0x3820 <__vector_28+0x66>
		uart_ihead[idx] = 0;
    381c:	10 82       	st	Z, r1
    381e:	11 82       	std	Z+1, r1	; 0x01
//= RECEPTION ENGINE (ISR BASED)
//==================================

void inline uart_receive(USART_t* port){
	//keep receiving until data register is empty or incoming queue is full
	while (((port->STATUS & _BV(7)) == B8(10000000)) && (uart_icount(port) < MAX_IBUFFER_LEN)){		
    3820:	89 81       	ldd	r24, Y+1	; 0x01
    3822:	88 23       	and	r24, r24
    3824:	fc f4       	brge	.+62     	; 0x3864 <__vector_28+0xaa>
	uart_itail[idx] = 0;
}

inline uint16_t uart_icount(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_ihead[idx] >= uart_itail[idx]){	
    3826:	80 81       	ld	r24, Z
    3828:	91 81       	ldd	r25, Z+1	; 0x01
    382a:	da 01       	movw	r26, r20
    382c:	2d 91       	ld	r18, X+
    382e:	3c 91       	ld	r19, X
    3830:	11 97       	sbiw	r26, 0x01	; 1
    3832:	82 17       	cp	r24, r18
    3834:	93 07       	cpc	r25, r19
    3836:	40 f0       	brcs	.+16     	; 0x3848 <__vector_28+0x8e>
		return (uart_ihead[idx] - uart_itail[idx]);
    3838:	80 81       	ld	r24, Z
    383a:	91 81       	ldd	r25, Z+1	; 0x01
    383c:	2d 91       	ld	r18, X+
    383e:	3c 91       	ld	r19, X
    3840:	11 97       	sbiw	r26, 0x01	; 1
    3842:	82 1b       	sub	r24, r18
    3844:	93 0b       	sbc	r25, r19
    3846:	0a c0       	rjmp	.+20     	; 0x385c <__vector_28+0xa2>
	}
	else {
		return ((MAX_IBUFFER_LEN-uart_itail[idx])+uart_ihead[idx]);
    3848:	80 81       	ld	r24, Z
    384a:	91 81       	ldd	r25, Z+1	; 0x01
    384c:	da 01       	movw	r26, r20
    384e:	2d 91       	ld	r18, X+
    3850:	3c 91       	ld	r19, X
    3852:	11 97       	sbiw	r26, 0x01	; 1
    3854:	80 50       	subi	r24, 0x00	; 0
    3856:	9c 4f       	sbci	r25, 0xFC	; 252
    3858:	82 1b       	sub	r24, r18
    385a:	93 0b       	sbc	r25, r19
//= RECEPTION ENGINE (ISR BASED)
//==================================

void inline uart_receive(USART_t* port){
	//keep receiving until data register is empty or incoming queue is full
	while (((port->STATUS & _BV(7)) == B8(10000000)) && (uart_icount(port) < MAX_IBUFFER_LEN)){		
    385c:	b4 e0       	ldi	r27, 0x04	; 4
    385e:	80 30       	cpi	r24, 0x00	; 0
    3860:	9b 07       	cpc	r25, r27
    3862:	58 f2       	brcs	.-106    	; 0x37fa <__vector_28+0x40>

//Must correspond to definitions in uart.h
ISR(USARTC0_DRE_vect) {uart_transmit(&uctrl);}//TX Interrupt
ISR(USARTC0_RXC_vect) {uart_receive(&uctrl);} //RX Interrupt
ISR(USARTC1_DRE_vect) {uart_transmit(&udata);}//TX Interrupt
ISR(USARTC1_RXC_vect) {uart_receive(&udata);} //RX Interrupt
    3864:	ff 91       	pop	r31
    3866:	ef 91       	pop	r30
    3868:	df 91       	pop	r29
    386a:	cf 91       	pop	r28
    386c:	bf 91       	pop	r27
    386e:	af 91       	pop	r26
    3870:	9f 91       	pop	r25
    3872:	8f 91       	pop	r24
    3874:	5f 91       	pop	r21
    3876:	4f 91       	pop	r20
    3878:	3f 91       	pop	r19
    387a:	2f 91       	pop	r18
    387c:	0f 90       	pop	r0
    387e:	0b be       	out	0x3b, r0	; 59
    3880:	0f 90       	pop	r0
    3882:	0a be       	out	0x3a, r0	; 58
    3884:	0f 90       	pop	r0
    3886:	09 be       	out	0x39, r0	; 57
    3888:	0f 90       	pop	r0
    388a:	08 be       	out	0x38, r0	; 56
    388c:	0f 90       	pop	r0
    388e:	0f be       	out	0x3f, r0	; 63
    3890:	0f 90       	pop	r0
    3892:	1f 90       	pop	r1
    3894:	18 95       	reti

00003896 <uart_rxbuffer_enable>:
		uart_rxbuffer_enable(port);
		uart_txbuffer_enable(port);
}

//Enable Receive Complete (high priority) -- so incoming is always handled first
void uart_rxbuffer_enable(USART_t* port){
    3896:	fc 01       	movw	r30, r24
	port->CTRLA = (port->CTRLA | B8(00110000));	//Set the Data Register Empty Interrupt to Medium Priority (timer needs to be higher!)
    3898:	83 81       	ldd	r24, Z+3	; 0x03
    389a:	80 63       	ori	r24, 0x30	; 48
    389c:	83 83       	std	Z+3, r24	; 0x03
}
    389e:	08 95       	ret

000038a0 <uart_rxbuffer_disable>:

void uart_rxbuffer_disable(USART_t* port){
    38a0:	fc 01       	movw	r30, r24
	port->CTRLA = (port->CTRLA & B8(11001111));	//Disable the Data Register Empty Interrupt
    38a2:	83 81       	ldd	r24, Z+3	; 0x03
    38a4:	8f 7c       	andi	r24, 0xCF	; 207
    38a6:	83 83       	std	Z+3, r24	; 0x03
}
    38a8:	08 95       	ret

000038aa <uart_txbuffer_enable>:

//Enable Transmit Ready (med priority) 
void uart_txbuffer_enable(USART_t* port){
    38aa:	fc 01       	movw	r30, r24
	port->CTRLA = (port->CTRLA | B8(00000010));	//Set the Data Register Empty Interrupt to Medium Priority (timer needs to be higher!)
    38ac:	83 81       	ldd	r24, Z+3	; 0x03
    38ae:	82 60       	ori	r24, 0x02	; 2
    38b0:	83 83       	std	Z+3, r24	; 0x03
}
    38b2:	08 95       	ret

000038b4 <uart_txbuffer_disable>:

void uart_txbuffer_disable(USART_t* port){
    38b4:	fc 01       	movw	r30, r24
	port->CTRLA = (port->CTRLA & B8(11111100));	//Disable the Data Register Empty Interrupt
    38b6:	83 81       	ldd	r24, Z+3	; 0x03
    38b8:	8c 7f       	andi	r24, 0xFC	; 252
    38ba:	83 83       	std	Z+3, r24	; 0x03
}
    38bc:	08 95       	ret

000038be <__vector_29>:
//************************************************************************

//Must correspond to definitions in uart.h
ISR(USARTC0_DRE_vect) {uart_transmit(&uctrl);}//TX Interrupt
ISR(USARTC0_RXC_vect) {uart_receive(&uctrl);} //RX Interrupt
ISR(USARTC1_DRE_vect) {uart_transmit(&udata);}//TX Interrupt
    38be:	1f 92       	push	r1
    38c0:	0f 92       	push	r0
    38c2:	0f b6       	in	r0, 0x3f	; 63
    38c4:	0f 92       	push	r0
    38c6:	08 b6       	in	r0, 0x38	; 56
    38c8:	0f 92       	push	r0
    38ca:	09 b6       	in	r0, 0x39	; 57
    38cc:	0f 92       	push	r0
    38ce:	0a b6       	in	r0, 0x3a	; 58
    38d0:	0f 92       	push	r0
    38d2:	0b b6       	in	r0, 0x3b	; 59
    38d4:	0f 92       	push	r0
    38d6:	11 24       	eor	r1, r1
    38d8:	2f 93       	push	r18
    38da:	3f 93       	push	r19
    38dc:	4f 93       	push	r20
    38de:	5f 93       	push	r21
    38e0:	6f 93       	push	r22
    38e2:	7f 93       	push	r23
    38e4:	8f 93       	push	r24
    38e6:	9f 93       	push	r25
    38e8:	af 93       	push	r26
    38ea:	bf 93       	push	r27
    38ec:	cf 93       	push	r28
    38ee:	df 93       	push	r29
    38f0:	ef 93       	push	r30
    38f2:	ff 93       	push	r31
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    38f4:	e0 eb       	ldi	r30, 0xB0	; 176
    38f6:	f8 e0       	ldi	r31, 0x08	; 8
    38f8:	81 81       	ldd	r24, Z+1	; 0x01
    38fa:	85 fd       	sbrc	r24, 5
    38fc:	1a c0       	rjmp	.+52     	; 0x3932 <__vector_29+0x74>
    38fe:	3a c0       	rjmp	.+116    	; 0x3974 <__vector_29+0xb6>
}

inline uint8_t uart_dequeue(USART_t* port){
	uint8_t idx = port_map(port);
	uint16_t oldtail;
	oldtail = uart_tail[idx];
    3900:	20 81       	ld	r18, Z
    3902:	31 81       	ldd	r19, Z+1	; 0x01
	uart_tail[idx]++;
    3904:	80 81       	ld	r24, Z
    3906:	91 81       	ldd	r25, Z+1	; 0x01
    3908:	01 96       	adiw	r24, 0x01	; 1
    390a:	80 83       	st	Z, r24
    390c:	91 83       	std	Z+1, r25	; 0x01
	if (uart_tail[idx] >= MAX_BUFFER_LEN){
    390e:	80 81       	ld	r24, Z
    3910:	91 81       	ldd	r25, Z+1	; 0x01
    3912:	44 e0       	ldi	r20, 0x04	; 4
    3914:	80 30       	cpi	r24, 0x00	; 0
    3916:	94 07       	cpc	r25, r20
    3918:	10 f0       	brcs	.+4      	; 0x391e <__vector_29+0x60>
		uart_tail[idx] = 0;
    391a:	10 82       	st	Z, r1
    391c:	11 82       	std	Z+1, r1	; 0x01
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    391e:	20 50       	subi	r18, 0x00	; 0
    3920:	35 4c       	sbci	r19, 0xC5	; 197
    3922:	e9 01       	movw	r28, r18
    3924:	88 81       	ld	r24, Y
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
    3926:	eb 01       	movw	r28, r22
    3928:	88 83       	st	Y, r24
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    392a:	89 81       	ldd	r24, Y+1	; 0x01
    392c:	85 fd       	sbrc	r24, 5
    392e:	07 c0       	rjmp	.+14     	; 0x393e <__vector_29+0x80>
    3930:	21 c0       	rjmp	.+66     	; 0x3974 <__vector_29+0xb6>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    3932:	ae ef       	ldi	r26, 0xFE	; 254
    3934:	b2 e3       	ldi	r27, 0x32	; 50
    3936:	ea e0       	ldi	r30, 0x0A	; 10
    3938:	ff e3       	ldi	r31, 0x3F	; 63
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
    393a:	60 eb       	ldi	r22, 0xB0	; 176
    393c:	78 e0       	ldi	r23, 0x08	; 8
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    393e:	8d 91       	ld	r24, X+
    3940:	9c 91       	ld	r25, X
    3942:	11 97       	sbiw	r26, 0x01	; 1
    3944:	20 81       	ld	r18, Z
    3946:	31 81       	ldd	r19, Z+1	; 0x01
    3948:	82 17       	cp	r24, r18
    394a:	93 07       	cpc	r25, r19
    394c:	40 f0       	brcs	.+16     	; 0x395e <__vector_29+0xa0>
		return (uart_head[idx] - uart_tail[idx]);
    394e:	8d 91       	ld	r24, X+
    3950:	9c 91       	ld	r25, X
    3952:	11 97       	sbiw	r26, 0x01	; 1
    3954:	20 81       	ld	r18, Z
    3956:	31 81       	ldd	r19, Z+1	; 0x01
    3958:	82 1b       	sub	r24, r18
    395a:	93 0b       	sbc	r25, r19
    395c:	09 c0       	rjmp	.+18     	; 0x3970 <__vector_29+0xb2>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    395e:	8d 91       	ld	r24, X+
    3960:	9c 91       	ld	r25, X
    3962:	11 97       	sbiw	r26, 0x01	; 1
    3964:	20 81       	ld	r18, Z
    3966:	31 81       	ldd	r19, Z+1	; 0x01
    3968:	80 50       	subi	r24, 0x00	; 0
    396a:	9c 4f       	sbci	r25, 0xFC	; 252
    396c:	82 1b       	sub	r24, r18
    396e:	93 0b       	sbc	r25, r19
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    3970:	00 97       	sbiw	r24, 0x00	; 0
    3972:	31 f6       	brne	.-116    	; 0x3900 <__vector_29+0x42>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    3974:	20 91 fe 32 	lds	r18, 0x32FE
    3978:	30 91 ff 32 	lds	r19, 0x32FF
    397c:	80 91 0a 3f 	lds	r24, 0x3F0A
    3980:	90 91 0b 3f 	lds	r25, 0x3F0B
    3984:	28 17       	cp	r18, r24
    3986:	39 07       	cpc	r19, r25
    3988:	58 f0       	brcs	.+22     	; 0x39a0 <__vector_29+0xe2>
		return (uart_head[idx] - uart_tail[idx]);
    398a:	80 91 fe 32 	lds	r24, 0x32FE
    398e:	90 91 ff 32 	lds	r25, 0x32FF
    3992:	20 91 0a 3f 	lds	r18, 0x3F0A
    3996:	30 91 0b 3f 	lds	r19, 0x3F0B
    399a:	82 1b       	sub	r24, r18
    399c:	93 0b       	sbc	r25, r19
    399e:	0c c0       	rjmp	.+24     	; 0x39b8 <__vector_29+0xfa>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    39a0:	80 91 fe 32 	lds	r24, 0x32FE
    39a4:	90 91 ff 32 	lds	r25, 0x32FF
    39a8:	20 91 0a 3f 	lds	r18, 0x3F0A
    39ac:	30 91 0b 3f 	lds	r19, 0x3F0B
    39b0:	80 50       	subi	r24, 0x00	; 0
    39b2:	9c 4f       	sbci	r25, 0xFC	; 252
    39b4:	82 1b       	sub	r24, r18
    39b6:	93 0b       	sbc	r25, r19
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
	}
	//disable the tx outgoing hardware buffer ready interrupt if we have nothing more to put in it.
	if(uart_count(port)>0) uart_txbuffer_enable(port);
    39b8:	00 97       	sbiw	r24, 0x00	; 0
    39ba:	29 f0       	breq	.+10     	; 0x39c6 <__vector_29+0x108>
    39bc:	80 eb       	ldi	r24, 0xB0	; 176
    39be:	98 e0       	ldi	r25, 0x08	; 8
    39c0:	0e 94 55 1c 	call	0x38aa	; 0x38aa <uart_txbuffer_enable>
    39c4:	04 c0       	rjmp	.+8      	; 0x39ce <__vector_29+0x110>
	else uart_txbuffer_disable(port);
    39c6:	80 eb       	ldi	r24, 0xB0	; 176
    39c8:	98 e0       	ldi	r25, 0x08	; 8
    39ca:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <uart_txbuffer_disable>
//************************************************************************

//Must correspond to definitions in uart.h
ISR(USARTC0_DRE_vect) {uart_transmit(&uctrl);}//TX Interrupt
ISR(USARTC0_RXC_vect) {uart_receive(&uctrl);} //RX Interrupt
ISR(USARTC1_DRE_vect) {uart_transmit(&udata);}//TX Interrupt
    39ce:	ff 91       	pop	r31
    39d0:	ef 91       	pop	r30
    39d2:	df 91       	pop	r29
    39d4:	cf 91       	pop	r28
    39d6:	bf 91       	pop	r27
    39d8:	af 91       	pop	r26
    39da:	9f 91       	pop	r25
    39dc:	8f 91       	pop	r24
    39de:	7f 91       	pop	r23
    39e0:	6f 91       	pop	r22
    39e2:	5f 91       	pop	r21
    39e4:	4f 91       	pop	r20
    39e6:	3f 91       	pop	r19
    39e8:	2f 91       	pop	r18
    39ea:	0f 90       	pop	r0
    39ec:	0b be       	out	0x3b, r0	; 59
    39ee:	0f 90       	pop	r0
    39f0:	0a be       	out	0x3a, r0	; 58
    39f2:	0f 90       	pop	r0
    39f4:	09 be       	out	0x39, r0	; 57
    39f6:	0f 90       	pop	r0
    39f8:	08 be       	out	0x38, r0	; 56
    39fa:	0f 90       	pop	r0
    39fc:	0f be       	out	0x3f, r0	; 63
    39fe:	0f 90       	pop	r0
    3a00:	1f 90       	pop	r1
    3a02:	18 95       	reti

00003a04 <__vector_26>:
//** [PORT SPECIFIC CODE]
//************************************************************************
//************************************************************************

//Must correspond to definitions in uart.h
ISR(USARTC0_DRE_vect) {uart_transmit(&uctrl);}//TX Interrupt
    3a04:	1f 92       	push	r1
    3a06:	0f 92       	push	r0
    3a08:	0f b6       	in	r0, 0x3f	; 63
    3a0a:	0f 92       	push	r0
    3a0c:	08 b6       	in	r0, 0x38	; 56
    3a0e:	0f 92       	push	r0
    3a10:	09 b6       	in	r0, 0x39	; 57
    3a12:	0f 92       	push	r0
    3a14:	0a b6       	in	r0, 0x3a	; 58
    3a16:	0f 92       	push	r0
    3a18:	0b b6       	in	r0, 0x3b	; 59
    3a1a:	0f 92       	push	r0
    3a1c:	11 24       	eor	r1, r1
    3a1e:	2f 93       	push	r18
    3a20:	3f 93       	push	r19
    3a22:	4f 93       	push	r20
    3a24:	5f 93       	push	r21
    3a26:	6f 93       	push	r22
    3a28:	7f 93       	push	r23
    3a2a:	8f 93       	push	r24
    3a2c:	9f 93       	push	r25
    3a2e:	af 93       	push	r26
    3a30:	bf 93       	push	r27
    3a32:	cf 93       	push	r28
    3a34:	df 93       	push	r29
    3a36:	ef 93       	push	r30
    3a38:	ff 93       	push	r31
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    3a3a:	e0 ea       	ldi	r30, 0xA0	; 160
    3a3c:	f8 e0       	ldi	r31, 0x08	; 8
    3a3e:	81 81       	ldd	r24, Z+1	; 0x01
    3a40:	85 fd       	sbrc	r24, 5
    3a42:	1a c0       	rjmp	.+52     	; 0x3a78 <__vector_26+0x74>
    3a44:	3a c0       	rjmp	.+116    	; 0x3aba <__vector_26+0xb6>
}

inline uint8_t uart_dequeue(USART_t* port){
	uint8_t idx = port_map(port);
	uint16_t oldtail;
	oldtail = uart_tail[idx];
    3a46:	20 81       	ld	r18, Z
    3a48:	31 81       	ldd	r19, Z+1	; 0x01
	uart_tail[idx]++;
    3a4a:	80 81       	ld	r24, Z
    3a4c:	91 81       	ldd	r25, Z+1	; 0x01
    3a4e:	01 96       	adiw	r24, 0x01	; 1
    3a50:	80 83       	st	Z, r24
    3a52:	91 83       	std	Z+1, r25	; 0x01
	if (uart_tail[idx] >= MAX_BUFFER_LEN){
    3a54:	80 81       	ld	r24, Z
    3a56:	91 81       	ldd	r25, Z+1	; 0x01
    3a58:	44 e0       	ldi	r20, 0x04	; 4
    3a5a:	80 30       	cpi	r24, 0x00	; 0
    3a5c:	94 07       	cpc	r25, r20
    3a5e:	10 f0       	brcs	.+4      	; 0x3a64 <__vector_26+0x60>
		uart_tail[idx] = 0;
    3a60:	10 82       	st	Z, r1
    3a62:	11 82       	std	Z+1, r1	; 0x01
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    3a64:	20 50       	subi	r18, 0x00	; 0
    3a66:	39 4c       	sbci	r19, 0xC9	; 201
    3a68:	e9 01       	movw	r28, r18
    3a6a:	88 81       	ld	r24, Y
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
    3a6c:	eb 01       	movw	r28, r22
    3a6e:	88 83       	st	Y, r24
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    3a70:	89 81       	ldd	r24, Y+1	; 0x01
    3a72:	85 fd       	sbrc	r24, 5
    3a74:	07 c0       	rjmp	.+14     	; 0x3a84 <__vector_26+0x80>
    3a76:	21 c0       	rjmp	.+66     	; 0x3aba <__vector_26+0xb6>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    3a78:	ac ef       	ldi	r26, 0xFC	; 252
    3a7a:	b2 e3       	ldi	r27, 0x32	; 50
    3a7c:	e8 e0       	ldi	r30, 0x08	; 8
    3a7e:	ff e3       	ldi	r31, 0x3F	; 63
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
    3a80:	60 ea       	ldi	r22, 0xA0	; 160
    3a82:	78 e0       	ldi	r23, 0x08	; 8
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    3a84:	8d 91       	ld	r24, X+
    3a86:	9c 91       	ld	r25, X
    3a88:	11 97       	sbiw	r26, 0x01	; 1
    3a8a:	20 81       	ld	r18, Z
    3a8c:	31 81       	ldd	r19, Z+1	; 0x01
    3a8e:	82 17       	cp	r24, r18
    3a90:	93 07       	cpc	r25, r19
    3a92:	40 f0       	brcs	.+16     	; 0x3aa4 <__vector_26+0xa0>
		return (uart_head[idx] - uart_tail[idx]);
    3a94:	8d 91       	ld	r24, X+
    3a96:	9c 91       	ld	r25, X
    3a98:	11 97       	sbiw	r26, 0x01	; 1
    3a9a:	20 81       	ld	r18, Z
    3a9c:	31 81       	ldd	r19, Z+1	; 0x01
    3a9e:	82 1b       	sub	r24, r18
    3aa0:	93 0b       	sbc	r25, r19
    3aa2:	09 c0       	rjmp	.+18     	; 0x3ab6 <__vector_26+0xb2>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    3aa4:	8d 91       	ld	r24, X+
    3aa6:	9c 91       	ld	r25, X
    3aa8:	11 97       	sbiw	r26, 0x01	; 1
    3aaa:	20 81       	ld	r18, Z
    3aac:	31 81       	ldd	r19, Z+1	; 0x01
    3aae:	80 50       	subi	r24, 0x00	; 0
    3ab0:	9c 4f       	sbci	r25, 0xFC	; 252
    3ab2:	82 1b       	sub	r24, r18
    3ab4:	93 0b       	sbc	r25, r19
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    3ab6:	00 97       	sbiw	r24, 0x00	; 0
    3ab8:	31 f6       	brne	.-116    	; 0x3a46 <__vector_26+0x42>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    3aba:	20 91 fc 32 	lds	r18, 0x32FC
    3abe:	30 91 fd 32 	lds	r19, 0x32FD
    3ac2:	80 91 08 3f 	lds	r24, 0x3F08
    3ac6:	90 91 09 3f 	lds	r25, 0x3F09
    3aca:	28 17       	cp	r18, r24
    3acc:	39 07       	cpc	r19, r25
    3ace:	58 f0       	brcs	.+22     	; 0x3ae6 <__vector_26+0xe2>
		return (uart_head[idx] - uart_tail[idx]);
    3ad0:	80 91 fc 32 	lds	r24, 0x32FC
    3ad4:	90 91 fd 32 	lds	r25, 0x32FD
    3ad8:	20 91 08 3f 	lds	r18, 0x3F08
    3adc:	30 91 09 3f 	lds	r19, 0x3F09
    3ae0:	82 1b       	sub	r24, r18
    3ae2:	93 0b       	sbc	r25, r19
    3ae4:	0c c0       	rjmp	.+24     	; 0x3afe <__vector_26+0xfa>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    3ae6:	80 91 fc 32 	lds	r24, 0x32FC
    3aea:	90 91 fd 32 	lds	r25, 0x32FD
    3aee:	20 91 08 3f 	lds	r18, 0x3F08
    3af2:	30 91 09 3f 	lds	r19, 0x3F09
    3af6:	80 50       	subi	r24, 0x00	; 0
    3af8:	9c 4f       	sbci	r25, 0xFC	; 252
    3afa:	82 1b       	sub	r24, r18
    3afc:	93 0b       	sbc	r25, r19
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
	}
	//disable the tx outgoing hardware buffer ready interrupt if we have nothing more to put in it.
	if(uart_count(port)>0) uart_txbuffer_enable(port);
    3afe:	00 97       	sbiw	r24, 0x00	; 0
    3b00:	29 f0       	breq	.+10     	; 0x3b0c <__vector_26+0x108>
    3b02:	80 ea       	ldi	r24, 0xA0	; 160
    3b04:	98 e0       	ldi	r25, 0x08	; 8
    3b06:	0e 94 55 1c 	call	0x38aa	; 0x38aa <uart_txbuffer_enable>
    3b0a:	04 c0       	rjmp	.+8      	; 0x3b14 <__vector_26+0x110>
	else uart_txbuffer_disable(port);
    3b0c:	80 ea       	ldi	r24, 0xA0	; 160
    3b0e:	98 e0       	ldi	r25, 0x08	; 8
    3b10:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <uart_txbuffer_disable>
//** [PORT SPECIFIC CODE]
//************************************************************************
//************************************************************************

//Must correspond to definitions in uart.h
ISR(USARTC0_DRE_vect) {uart_transmit(&uctrl);}//TX Interrupt
    3b14:	ff 91       	pop	r31
    3b16:	ef 91       	pop	r30
    3b18:	df 91       	pop	r29
    3b1a:	cf 91       	pop	r28
    3b1c:	bf 91       	pop	r27
    3b1e:	af 91       	pop	r26
    3b20:	9f 91       	pop	r25
    3b22:	8f 91       	pop	r24
    3b24:	7f 91       	pop	r23
    3b26:	6f 91       	pop	r22
    3b28:	5f 91       	pop	r21
    3b2a:	4f 91       	pop	r20
    3b2c:	3f 91       	pop	r19
    3b2e:	2f 91       	pop	r18
    3b30:	0f 90       	pop	r0
    3b32:	0b be       	out	0x3b, r0	; 59
    3b34:	0f 90       	pop	r0
    3b36:	0a be       	out	0x3a, r0	; 58
    3b38:	0f 90       	pop	r0
    3b3a:	09 be       	out	0x39, r0	; 57
    3b3c:	0f 90       	pop	r0
    3b3e:	08 be       	out	0x38, r0	; 56
    3b40:	0f 90       	pop	r0
    3b42:	0f be       	out	0x3f, r0	; 63
    3b44:	0f 90       	pop	r0
    3b46:	1f 90       	pop	r1
    3b48:	18 95       	reti

00003b4a <uart_transmit>:
//==================================

//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
    3b4a:	0f 93       	push	r16
    3b4c:	1f 93       	push	r17
    3b4e:	cf 93       	push	r28
    3b50:	df 93       	push	r29
    3b52:	dc 01       	movw	r26, r24
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    3b54:	11 96       	adiw	r26, 0x01	; 1
    3b56:	8c 91       	ld	r24, X
    3b58:	11 97       	sbiw	r26, 0x01	; 1
    3b5a:	85 fd       	sbrc	r24, 5
    3b5c:	42 c0       	rjmp	.+132    	; 0x3be2 <uart_transmit+0x98>
    3b5e:	91 c0       	rjmp	.+290    	; 0x3c82 <uart_transmit+0x138>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    3b60:	2b e0       	ldi	r18, 0x0B	; 11
    3b62:	a0 3b       	cpi	r26, 0xB0	; 176
    3b64:	b2 07       	cpc	r27, r18
    3b66:	51 f0       	breq	.+20     	; 0x3b7c <uart_transmit+0x32>
	if (port == &uctrl) {return 1;}
    3b68:	38 e0       	ldi	r19, 0x08	; 8
    3b6a:	a0 3a       	cpi	r26, 0xA0	; 160
    3b6c:	b3 07       	cpc	r27, r19
    3b6e:	41 f0       	breq	.+16     	; 0x3b80 <uart_transmit+0x36>
	if (port == &udata) {return 2;}
    3b70:	88 e0       	ldi	r24, 0x08	; 8
    3b72:	a0 3b       	cpi	r26, 0xB0	; 176
    3b74:	b8 07       	cpc	r27, r24
    3b76:	31 f4       	brne	.+12     	; 0x3b84 <uart_transmit+0x3a>
    3b78:	22 e0       	ldi	r18, 0x02	; 2
    3b7a:	05 c0       	rjmp	.+10     	; 0x3b86 <uart_transmit+0x3c>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    3b7c:	20 e0       	ldi	r18, 0x00	; 0
    3b7e:	03 c0       	rjmp	.+6      	; 0x3b86 <uart_transmit+0x3c>
	if (port == &uctrl) {return 1;}
    3b80:	21 e0       	ldi	r18, 0x01	; 1
    3b82:	01 c0       	rjmp	.+2      	; 0x3b86 <uart_transmit+0x3c>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    3b84:	20 e0       	ldi	r18, 0x00	; 0
}

inline uint8_t uart_dequeue(USART_t* port){
	uint8_t idx = port_map(port);
	uint16_t oldtail;
	oldtail = uart_tail[idx];
    3b86:	30 e0       	ldi	r19, 0x00	; 0
    3b88:	c9 01       	movw	r24, r18
    3b8a:	88 0f       	add	r24, r24
    3b8c:	99 1f       	adc	r25, r25
    3b8e:	fb 01       	movw	r30, r22
    3b90:	e8 0f       	add	r30, r24
    3b92:	f9 1f       	adc	r31, r25
    3b94:	40 81       	ld	r20, Z
    3b96:	51 81       	ldd	r21, Z+1	; 0x01
	uart_tail[idx]++;
    3b98:	80 81       	ld	r24, Z
    3b9a:	91 81       	ldd	r25, Z+1	; 0x01
    3b9c:	01 96       	adiw	r24, 0x01	; 1
    3b9e:	80 83       	st	Z, r24
    3ba0:	91 83       	std	Z+1, r25	; 0x01
	if (uart_tail[idx] >= MAX_BUFFER_LEN){
    3ba2:	80 81       	ld	r24, Z
    3ba4:	91 81       	ldd	r25, Z+1	; 0x01
    3ba6:	e4 e0       	ldi	r30, 0x04	; 4
    3ba8:	80 30       	cpi	r24, 0x00	; 0
    3baa:	9e 07       	cpc	r25, r30
    3bac:	40 f0       	brcs	.+16     	; 0x3bbe <uart_transmit+0x74>
		uart_tail[idx] = 0;
    3bae:	c9 01       	movw	r24, r18
    3bb0:	88 0f       	add	r24, r24
    3bb2:	99 1f       	adc	r25, r25
    3bb4:	86 0f       	add	r24, r22
    3bb6:	97 1f       	adc	r25, r23
    3bb8:	fc 01       	movw	r30, r24
    3bba:	10 82       	st	Z, r1
    3bbc:	11 82       	std	Z+1, r1	; 0x01
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    3bbe:	c9 01       	movw	r24, r18
    3bc0:	98 2f       	mov	r25, r24
    3bc2:	88 27       	eor	r24, r24
    3bc4:	99 0f       	add	r25, r25
    3bc6:	99 0f       	add	r25, r25
    3bc8:	84 0f       	add	r24, r20
    3bca:	95 1f       	adc	r25, r21
    3bcc:	f8 01       	movw	r30, r16
    3bce:	e8 0f       	add	r30, r24
    3bd0:	f9 1f       	adc	r31, r25
    3bd2:	80 81       	ld	r24, Z
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
    3bd4:	8c 93       	st	X, r24
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    3bd6:	11 96       	adiw	r26, 0x01	; 1
    3bd8:	8c 91       	ld	r24, X
    3bda:	11 97       	sbiw	r26, 0x01	; 1
    3bdc:	85 fd       	sbrc	r24, 5
    3bde:	07 c0       	rjmp	.+14     	; 0x3bee <uart_transmit+0xa4>
    3be0:	50 c0       	rjmp	.+160    	; 0x3c82 <uart_transmit+0x138>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    3be2:	ca ef       	ldi	r28, 0xFA	; 250
    3be4:	d2 e3       	ldi	r29, 0x32	; 50
    3be6:	66 e0       	ldi	r22, 0x06	; 6
    3be8:	7f e3       	ldi	r23, 0x3F	; 63
		uart_tail[idx] = 0;
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    3bea:	00 e0       	ldi	r16, 0x00	; 0
    3bec:	13 e3       	ldi	r17, 0x33	; 51
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    3bee:	fb e0       	ldi	r31, 0x0B	; 11
    3bf0:	a0 3b       	cpi	r26, 0xB0	; 176
    3bf2:	bf 07       	cpc	r27, r31
    3bf4:	51 f0       	breq	.+20     	; 0x3c0a <uart_transmit+0xc0>
	if (port == &uctrl) {return 1;}
    3bf6:	28 e0       	ldi	r18, 0x08	; 8
    3bf8:	a0 3a       	cpi	r26, 0xA0	; 160
    3bfa:	b2 07       	cpc	r27, r18
    3bfc:	41 f0       	breq	.+16     	; 0x3c0e <uart_transmit+0xc4>
	if (port == &udata) {return 2;}
    3bfe:	38 e0       	ldi	r19, 0x08	; 8
    3c00:	a0 3b       	cpi	r26, 0xB0	; 176
    3c02:	b3 07       	cpc	r27, r19
    3c04:	31 f4       	brne	.+12     	; 0x3c12 <uart_transmit+0xc8>
    3c06:	22 e0       	ldi	r18, 0x02	; 2
    3c08:	05 c0       	rjmp	.+10     	; 0x3c14 <uart_transmit+0xca>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    3c0a:	20 e0       	ldi	r18, 0x00	; 0
    3c0c:	03 c0       	rjmp	.+6      	; 0x3c14 <uart_transmit+0xca>
	if (port == &uctrl) {return 1;}
    3c0e:	21 e0       	ldi	r18, 0x01	; 1
    3c10:	01 c0       	rjmp	.+2      	; 0x3c14 <uart_transmit+0xca>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    3c12:	20 e0       	ldi	r18, 0x00	; 0
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    3c14:	30 e0       	ldi	r19, 0x00	; 0
    3c16:	c9 01       	movw	r24, r18
    3c18:	88 0f       	add	r24, r24
    3c1a:	99 1f       	adc	r25, r25
    3c1c:	fe 01       	movw	r30, r28
    3c1e:	e8 0f       	add	r30, r24
    3c20:	f9 1f       	adc	r31, r25
    3c22:	40 81       	ld	r20, Z
    3c24:	51 81       	ldd	r21, Z+1	; 0x01
    3c26:	fb 01       	movw	r30, r22
    3c28:	e8 0f       	add	r30, r24
    3c2a:	f9 1f       	adc	r31, r25
    3c2c:	80 81       	ld	r24, Z
    3c2e:	91 81       	ldd	r25, Z+1	; 0x01
    3c30:	48 17       	cp	r20, r24
    3c32:	59 07       	cpc	r21, r25
    3c34:	88 f0       	brcs	.+34     	; 0x3c58 <uart_transmit+0x10e>
		return (uart_head[idx] - uart_tail[idx]);
    3c36:	22 0f       	add	r18, r18
    3c38:	33 1f       	adc	r19, r19
    3c3a:	fe 01       	movw	r30, r28
    3c3c:	e2 0f       	add	r30, r18
    3c3e:	f3 1f       	adc	r31, r19
    3c40:	40 81       	ld	r20, Z
    3c42:	51 81       	ldd	r21, Z+1	; 0x01
    3c44:	fb 01       	movw	r30, r22
    3c46:	e2 0f       	add	r30, r18
    3c48:	f3 1f       	adc	r31, r19
    3c4a:	80 81       	ld	r24, Z
    3c4c:	91 81       	ldd	r25, Z+1	; 0x01
    3c4e:	fa 01       	movw	r30, r20
    3c50:	e8 1b       	sub	r30, r24
    3c52:	f9 0b       	sbc	r31, r25
    3c54:	cf 01       	movw	r24, r30
    3c56:	12 c0       	rjmp	.+36     	; 0x3c7c <uart_transmit+0x132>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    3c58:	c9 01       	movw	r24, r18
    3c5a:	88 0f       	add	r24, r24
    3c5c:	99 1f       	adc	r25, r25
    3c5e:	fe 01       	movw	r30, r28
    3c60:	e8 0f       	add	r30, r24
    3c62:	f9 1f       	adc	r31, r25
    3c64:	40 81       	ld	r20, Z
    3c66:	51 81       	ldd	r21, Z+1	; 0x01
    3c68:	fb 01       	movw	r30, r22
    3c6a:	e8 0f       	add	r30, r24
    3c6c:	f9 1f       	adc	r31, r25
    3c6e:	20 81       	ld	r18, Z
    3c70:	31 81       	ldd	r19, Z+1	; 0x01
    3c72:	ca 01       	movw	r24, r20
    3c74:	80 50       	subi	r24, 0x00	; 0
    3c76:	9c 4f       	sbci	r25, 0xFC	; 252
    3c78:	82 1b       	sub	r24, r18
    3c7a:	93 0b       	sbc	r25, r19
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    3c7c:	00 97       	sbiw	r24, 0x00	; 0
    3c7e:	09 f0       	breq	.+2      	; 0x3c82 <uart_transmit+0x138>
    3c80:	6f cf       	rjmp	.-290    	; 0x3b60 <uart_transmit+0x16>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    3c82:	fb e0       	ldi	r31, 0x0B	; 11
    3c84:	a0 3b       	cpi	r26, 0xB0	; 176
    3c86:	bf 07       	cpc	r27, r31
    3c88:	51 f0       	breq	.+20     	; 0x3c9e <uart_transmit+0x154>
	if (port == &uctrl) {return 1;}
    3c8a:	28 e0       	ldi	r18, 0x08	; 8
    3c8c:	a0 3a       	cpi	r26, 0xA0	; 160
    3c8e:	b2 07       	cpc	r27, r18
    3c90:	41 f0       	breq	.+16     	; 0x3ca2 <uart_transmit+0x158>
	if (port == &udata) {return 2;}
    3c92:	38 e0       	ldi	r19, 0x08	; 8
    3c94:	a0 3b       	cpi	r26, 0xB0	; 176
    3c96:	b3 07       	cpc	r27, r19
    3c98:	31 f4       	brne	.+12     	; 0x3ca6 <uart_transmit+0x15c>
    3c9a:	22 e0       	ldi	r18, 0x02	; 2
    3c9c:	05 c0       	rjmp	.+10     	; 0x3ca8 <uart_transmit+0x15e>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    3c9e:	20 e0       	ldi	r18, 0x00	; 0
    3ca0:	03 c0       	rjmp	.+6      	; 0x3ca8 <uart_transmit+0x15e>
	if (port == &uctrl) {return 1;}
    3ca2:	21 e0       	ldi	r18, 0x01	; 1
    3ca4:	01 c0       	rjmp	.+2      	; 0x3ca8 <uart_transmit+0x15e>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    3ca6:	20 e0       	ldi	r18, 0x00	; 0
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    3ca8:	30 e0       	ldi	r19, 0x00	; 0
    3caa:	c9 01       	movw	r24, r18
    3cac:	88 0f       	add	r24, r24
    3cae:	99 1f       	adc	r25, r25
    3cb0:	fc 01       	movw	r30, r24
    3cb2:	e6 50       	subi	r30, 0x06	; 6
    3cb4:	fd 4c       	sbci	r31, 0xCD	; 205
    3cb6:	40 81       	ld	r20, Z
    3cb8:	51 81       	ldd	r21, Z+1	; 0x01
    3cba:	8a 5f       	subi	r24, 0xFA	; 250
    3cbc:	90 4c       	sbci	r25, 0xC0	; 192
    3cbe:	fc 01       	movw	r30, r24
    3cc0:	80 81       	ld	r24, Z
    3cc2:	91 81       	ldd	r25, Z+1	; 0x01
    3cc4:	48 17       	cp	r20, r24
    3cc6:	59 07       	cpc	r21, r25
    3cc8:	78 f0       	brcs	.+30     	; 0x3ce8 <uart_transmit+0x19e>
		return (uart_head[idx] - uart_tail[idx]);
    3cca:	22 0f       	add	r18, r18
    3ccc:	33 1f       	adc	r19, r19
    3cce:	f9 01       	movw	r30, r18
    3cd0:	e6 50       	subi	r30, 0x06	; 6
    3cd2:	fd 4c       	sbci	r31, 0xCD	; 205
    3cd4:	40 81       	ld	r20, Z
    3cd6:	51 81       	ldd	r21, Z+1	; 0x01
    3cd8:	2a 5f       	subi	r18, 0xFA	; 250
    3cda:	30 4c       	sbci	r19, 0xC0	; 192
    3cdc:	f9 01       	movw	r30, r18
    3cde:	80 81       	ld	r24, Z
    3ce0:	91 81       	ldd	r25, Z+1	; 0x01
    3ce2:	48 1b       	sub	r20, r24
    3ce4:	59 0b       	sbc	r21, r25
    3ce6:	10 c0       	rjmp	.+32     	; 0x3d08 <uart_transmit+0x1be>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    3ce8:	22 0f       	add	r18, r18
    3cea:	33 1f       	adc	r19, r19
    3cec:	f9 01       	movw	r30, r18
    3cee:	e6 50       	subi	r30, 0x06	; 6
    3cf0:	fd 4c       	sbci	r31, 0xCD	; 205
    3cf2:	40 81       	ld	r20, Z
    3cf4:	51 81       	ldd	r21, Z+1	; 0x01
    3cf6:	2a 5f       	subi	r18, 0xFA	; 250
    3cf8:	30 4c       	sbci	r19, 0xC0	; 192
    3cfa:	f9 01       	movw	r30, r18
    3cfc:	80 81       	ld	r24, Z
    3cfe:	91 81       	ldd	r25, Z+1	; 0x01
    3d00:	40 50       	subi	r20, 0x00	; 0
    3d02:	5c 4f       	sbci	r21, 0xFC	; 252
    3d04:	48 1b       	sub	r20, r24
    3d06:	59 0b       	sbc	r21, r25
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
	}
	//disable the tx outgoing hardware buffer ready interrupt if we have nothing more to put in it.
	if(uart_count(port)>0) uart_txbuffer_enable(port);
    3d08:	41 15       	cp	r20, r1
    3d0a:	51 05       	cpc	r21, r1
    3d0c:	21 f0       	breq	.+8      	; 0x3d16 <uart_transmit+0x1cc>
    3d0e:	cd 01       	movw	r24, r26
    3d10:	0e 94 55 1c 	call	0x38aa	; 0x38aa <uart_txbuffer_enable>
    3d14:	03 c0       	rjmp	.+6      	; 0x3d1c <uart_transmit+0x1d2>
	else uart_txbuffer_disable(port);
    3d16:	cd 01       	movw	r24, r26
    3d18:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <uart_txbuffer_disable>
}
    3d1c:	df 91       	pop	r29
    3d1e:	cf 91       	pop	r28
    3d20:	1f 91       	pop	r17
    3d22:	0f 91       	pop	r16
    3d24:	08 95       	ret

00003d26 <uart_transmit_lcd>:

void inline uart_transmit_lcd(USART_t* port){
    3d26:	3f 92       	push	r3
    3d28:	4f 92       	push	r4
    3d2a:	5f 92       	push	r5
    3d2c:	6f 92       	push	r6
    3d2e:	7f 92       	push	r7
    3d30:	8f 92       	push	r8
    3d32:	9f 92       	push	r9
    3d34:	af 92       	push	r10
    3d36:	bf 92       	push	r11
    3d38:	cf 92       	push	r12
    3d3a:	df 92       	push	r13
    3d3c:	ef 92       	push	r14
    3d3e:	ff 92       	push	r15
    3d40:	0f 93       	push	r16
    3d42:	1f 93       	push	r17
    3d44:	cf 93       	push	r28
    3d46:	df 93       	push	r29
    3d48:	6c 01       	movw	r12, r24
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0) && (lcd_flow_control == LCD_READY)){
    3d4a:	fc 01       	movw	r30, r24
    3d4c:	81 81       	ldd	r24, Z+1	; 0x01
    3d4e:	85 fd       	sbrc	r24, 5
    3d50:	1d c1       	rjmp	.+570    	; 0x3f8c <uart_transmit_lcd+0x266>
    3d52:	8f c1       	rjmp	.+798    	; 0x4072 <__stack+0x73>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    3d54:	f0 eb       	ldi	r31, 0xB0	; 176
    3d56:	cf 16       	cp	r12, r31
    3d58:	fb e0       	ldi	r31, 0x0B	; 11
    3d5a:	df 06       	cpc	r13, r31
    3d5c:	61 f0       	breq	.+24     	; 0x3d76 <uart_transmit_lcd+0x50>
	if (port == &uctrl) {return 1;}
    3d5e:	20 ea       	ldi	r18, 0xA0	; 160
    3d60:	c2 16       	cp	r12, r18
    3d62:	28 e0       	ldi	r18, 0x08	; 8
    3d64:	d2 06       	cpc	r13, r18
    3d66:	49 f0       	breq	.+18     	; 0x3d7a <uart_transmit_lcd+0x54>
	if (port == &udata) {return 2;}
    3d68:	30 eb       	ldi	r19, 0xB0	; 176
    3d6a:	c3 16       	cp	r12, r19
    3d6c:	38 e0       	ldi	r19, 0x08	; 8
    3d6e:	d3 06       	cpc	r13, r19
    3d70:	31 f4       	brne	.+12     	; 0x3d7e <uart_transmit_lcd+0x58>
    3d72:	22 e0       	ldi	r18, 0x02	; 2
    3d74:	05 c0       	rjmp	.+10     	; 0x3d80 <uart_transmit_lcd+0x5a>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    3d76:	20 e0       	ldi	r18, 0x00	; 0
    3d78:	03 c0       	rjmp	.+6      	; 0x3d80 <uart_transmit_lcd+0x5a>
	if (port == &uctrl) {return 1;}
    3d7a:	21 e0       	ldi	r18, 0x01	; 1
    3d7c:	01 c0       	rjmp	.+2      	; 0x3d80 <uart_transmit_lcd+0x5a>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    3d7e:	20 e0       	ldi	r18, 0x00	; 0
}

inline uint8_t uart_dequeue(USART_t* port){
	uint8_t idx = port_map(port);
	uint16_t oldtail;
	oldtail = uart_tail[idx];
    3d80:	30 e0       	ldi	r19, 0x00	; 0
    3d82:	c9 01       	movw	r24, r18
    3d84:	88 0f       	add	r24, r24
    3d86:	99 1f       	adc	r25, r25
    3d88:	f4 01       	movw	r30, r8
    3d8a:	e8 0f       	add	r30, r24
    3d8c:	f9 1f       	adc	r31, r25
    3d8e:	40 81       	ld	r20, Z
    3d90:	51 81       	ldd	r21, Z+1	; 0x01
	uart_tail[idx]++;
    3d92:	80 81       	ld	r24, Z
    3d94:	91 81       	ldd	r25, Z+1	; 0x01
    3d96:	01 96       	adiw	r24, 0x01	; 1
    3d98:	80 83       	st	Z, r24
    3d9a:	91 83       	std	Z+1, r25	; 0x01
	if (uart_tail[idx] >= MAX_BUFFER_LEN){
    3d9c:	80 81       	ld	r24, Z
    3d9e:	91 81       	ldd	r25, Z+1	; 0x01
    3da0:	64 e0       	ldi	r22, 0x04	; 4
    3da2:	80 30       	cpi	r24, 0x00	; 0
    3da4:	96 07       	cpc	r25, r22
    3da6:	10 f0       	brcs	.+4      	; 0x3dac <uart_transmit_lcd+0x86>
		uart_tail[idx] = 0;
    3da8:	10 82       	st	Z, r1
    3daa:	11 82       	std	Z+1, r1	; 0x01
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    3dac:	c9 01       	movw	r24, r18
    3dae:	98 2f       	mov	r25, r24
    3db0:	88 27       	eor	r24, r24
    3db2:	99 0f       	add	r25, r25
    3db4:	99 0f       	add	r25, r25
    3db6:	84 0f       	add	r24, r20
    3db8:	95 1f       	adc	r25, r21
    3dba:	84 0d       	add	r24, r4
    3dbc:	95 1d       	adc	r25, r5
    3dbe:	fc 01       	movw	r30, r24
    3dc0:	b0 80       	ld	r11, Z
void inline uart_transmit_lcd(USART_t* port){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0) && (lcd_flow_control == LCD_READY)){
		toSend = uart_dequeue(port);
		if (toSend == 0x0D) {lcd_flow_control = LCD_BUSY;}
    3dc2:	fd e0       	ldi	r31, 0x0D	; 13
    3dc4:	bf 16       	cp	r11, r31
    3dc6:	11 f4       	brne	.+4      	; 0x3dcc <uart_transmit_lcd+0xa6>
    3dc8:	30 92 e2 26 	sts	0x26E2, r3
#ifndef UART_DEBUG
	uint8_t idx = port_map(port);
	
	//if (idx==0){uart_enqueue(&uctrl, datain);} //xxx
	
	uart_buffer[idx][uart_head[idx]] = datain;
    3dcc:	f8 01       	movw	r30, r16
    3dce:	80 81       	ld	r24, Z
    3dd0:	91 81       	ldd	r25, Z+1	; 0x01
    3dd2:	80 50       	subi	r24, 0x00	; 0
    3dd4:	95 4c       	sbci	r25, 0xC5	; 197
    3dd6:	fc 01       	movw	r30, r24
    3dd8:	a0 82       	st	Z, r10
	uart_head[idx]++;
    3dda:	f8 01       	movw	r30, r16
    3ddc:	80 81       	ld	r24, Z
    3dde:	91 81       	ldd	r25, Z+1	; 0x01
    3de0:	01 96       	adiw	r24, 0x01	; 1
    3de2:	80 83       	st	Z, r24
    3de4:	91 83       	std	Z+1, r25	; 0x01
	if (uart_head[idx] >= MAX_BUFFER_LEN){
    3de6:	80 81       	ld	r24, Z
    3de8:	91 81       	ldd	r25, Z+1	; 0x01
    3dea:	f4 e0       	ldi	r31, 0x04	; 4
    3dec:	80 30       	cpi	r24, 0x00	; 0
    3dee:	9f 07       	cpc	r25, r31
    3df0:	18 f0       	brcs	.+6      	; 0x3df8 <uart_transmit_lcd+0xd2>
		uart_head[idx] = 0;
    3df2:	f8 01       	movw	r30, r16
    3df4:	10 82       	st	Z, r1
    3df6:	11 82       	std	Z+1, r1	; 0x01
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    3df8:	f7 01       	movw	r30, r14
    3dfa:	81 81       	ldd	r24, Z+1	; 0x01
    3dfc:	85 fd       	sbrc	r24, 5
    3dfe:	18 c0       	rjmp	.+48     	; 0x3e30 <uart_transmit_lcd+0x10a>
    3e00:	31 c0       	rjmp	.+98     	; 0x3e64 <uart_transmit_lcd+0x13e>
}

inline uint8_t uart_dequeue(USART_t* port){
	uint8_t idx = port_map(port);
	uint16_t oldtail;
	oldtail = uart_tail[idx];
    3e02:	e8 81       	ld	r30, Y
    3e04:	f9 81       	ldd	r31, Y+1	; 0x01
	uart_tail[idx]++;
    3e06:	88 81       	ld	r24, Y
    3e08:	99 81       	ldd	r25, Y+1	; 0x01
    3e0a:	01 96       	adiw	r24, 0x01	; 1
    3e0c:	88 83       	st	Y, r24
    3e0e:	99 83       	std	Y+1, r25	; 0x01
	if (uart_tail[idx] >= MAX_BUFFER_LEN){
    3e10:	88 81       	ld	r24, Y
    3e12:	99 81       	ldd	r25, Y+1	; 0x01
    3e14:	24 e0       	ldi	r18, 0x04	; 4
    3e16:	80 30       	cpi	r24, 0x00	; 0
    3e18:	92 07       	cpc	r25, r18
    3e1a:	10 f0       	brcs	.+4      	; 0x3e20 <uart_transmit_lcd+0xfa>
		uart_tail[idx] = 0;
    3e1c:	18 82       	st	Y, r1
    3e1e:	19 82       	std	Y+1, r1	; 0x01
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    3e20:	e0 50       	subi	r30, 0x00	; 0
    3e22:	f5 4c       	sbci	r31, 0xC5	; 197
    3e24:	80 81       	ld	r24, Z
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
    3e26:	f7 01       	movw	r30, r14
    3e28:	80 83       	st	Z, r24
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    3e2a:	81 81       	ldd	r24, Z+1	; 0x01
    3e2c:	85 ff       	sbrs	r24, 5
    3e2e:	1a c0       	rjmp	.+52     	; 0x3e64 <uart_transmit_lcd+0x13e>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    3e30:	f8 01       	movw	r30, r16
    3e32:	80 81       	ld	r24, Z
    3e34:	91 81       	ldd	r25, Z+1	; 0x01
    3e36:	28 81       	ld	r18, Y
    3e38:	39 81       	ldd	r19, Y+1	; 0x01
    3e3a:	82 17       	cp	r24, r18
    3e3c:	93 07       	cpc	r25, r19
    3e3e:	38 f0       	brcs	.+14     	; 0x3e4e <uart_transmit_lcd+0x128>
		return (uart_head[idx] - uart_tail[idx]);
    3e40:	80 81       	ld	r24, Z
    3e42:	91 81       	ldd	r25, Z+1	; 0x01
    3e44:	28 81       	ld	r18, Y
    3e46:	39 81       	ldd	r19, Y+1	; 0x01
    3e48:	82 1b       	sub	r24, r18
    3e4a:	93 0b       	sbc	r25, r19
    3e4c:	09 c0       	rjmp	.+18     	; 0x3e60 <uart_transmit_lcd+0x13a>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    3e4e:	f8 01       	movw	r30, r16
    3e50:	80 81       	ld	r24, Z
    3e52:	91 81       	ldd	r25, Z+1	; 0x01
    3e54:	28 81       	ld	r18, Y
    3e56:	39 81       	ldd	r19, Y+1	; 0x01
    3e58:	80 50       	subi	r24, 0x00	; 0
    3e5a:	9c 4f       	sbci	r25, 0xFC	; 252
    3e5c:	82 1b       	sub	r24, r18
    3e5e:	93 0b       	sbc	r25, r19
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    3e60:	00 97       	sbiw	r24, 0x00	; 0
    3e62:	79 f6       	brne	.-98     	; 0x3e02 <uart_transmit_lcd+0xdc>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    3e64:	f8 01       	movw	r30, r16
    3e66:	80 81       	ld	r24, Z
    3e68:	91 81       	ldd	r25, Z+1	; 0x01
    3e6a:	28 81       	ld	r18, Y
    3e6c:	39 81       	ldd	r19, Y+1	; 0x01
    3e6e:	82 17       	cp	r24, r18
    3e70:	93 07       	cpc	r25, r19
    3e72:	38 f0       	brcs	.+14     	; 0x3e82 <uart_transmit_lcd+0x15c>
		return (uart_head[idx] - uart_tail[idx]);
    3e74:	80 81       	ld	r24, Z
    3e76:	91 81       	ldd	r25, Z+1	; 0x01
    3e78:	28 81       	ld	r18, Y
    3e7a:	39 81       	ldd	r19, Y+1	; 0x01
    3e7c:	82 1b       	sub	r24, r18
    3e7e:	93 0b       	sbc	r25, r19
    3e80:	09 c0       	rjmp	.+18     	; 0x3e94 <uart_transmit_lcd+0x16e>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    3e82:	f8 01       	movw	r30, r16
    3e84:	80 81       	ld	r24, Z
    3e86:	91 81       	ldd	r25, Z+1	; 0x01
    3e88:	28 81       	ld	r18, Y
    3e8a:	39 81       	ldd	r19, Y+1	; 0x01
    3e8c:	80 50       	subi	r24, 0x00	; 0
    3e8e:	9c 4f       	sbci	r25, 0xFC	; 252
    3e90:	82 1b       	sub	r24, r18
    3e92:	93 0b       	sbc	r25, r19
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
	}
	//disable the tx outgoing hardware buffer ready interrupt if we have nothing more to put in it.
	if(uart_count(port)>0) uart_txbuffer_enable(port);
    3e94:	00 97       	sbiw	r24, 0x00	; 0
    3e96:	21 f0       	breq	.+8      	; 0x3ea0 <uart_transmit_lcd+0x17a>
    3e98:	c7 01       	movw	r24, r14
    3e9a:	0e 94 55 1c 	call	0x38aa	; 0x38aa <uart_txbuffer_enable>
    3e9e:	03 c0       	rjmp	.+6      	; 0x3ea6 <uart_transmit_lcd+0x180>
	else uart_txbuffer_disable(port);
    3ea0:	c7 01       	movw	r24, r14
    3ea2:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <uart_txbuffer_disable>
#ifndef UART_DEBUG
	uint8_t idx = port_map(port);
	
	//if (idx==0){uart_enqueue(&uctrl, datain);} //xxx
	
	uart_buffer[idx][uart_head[idx]] = datain;
    3ea6:	f8 01       	movw	r30, r16
    3ea8:	80 81       	ld	r24, Z
    3eaa:	91 81       	ldd	r25, Z+1	; 0x01
    3eac:	80 50       	subi	r24, 0x00	; 0
    3eae:	95 4c       	sbci	r25, 0xC5	; 197
    3eb0:	fc 01       	movw	r30, r24
    3eb2:	b0 82       	st	Z, r11
	uart_head[idx]++;
    3eb4:	f8 01       	movw	r30, r16
    3eb6:	80 81       	ld	r24, Z
    3eb8:	91 81       	ldd	r25, Z+1	; 0x01
    3eba:	01 96       	adiw	r24, 0x01	; 1
    3ebc:	80 83       	st	Z, r24
    3ebe:	91 83       	std	Z+1, r25	; 0x01
	if (uart_head[idx] >= MAX_BUFFER_LEN){
    3ec0:	80 81       	ld	r24, Z
    3ec2:	91 81       	ldd	r25, Z+1	; 0x01
    3ec4:	f4 e0       	ldi	r31, 0x04	; 4
    3ec6:	80 30       	cpi	r24, 0x00	; 0
    3ec8:	9f 07       	cpc	r25, r31
    3eca:	18 f0       	brcs	.+6      	; 0x3ed2 <uart_transmit_lcd+0x1ac>
		uart_head[idx] = 0;
    3ecc:	f8 01       	movw	r30, r16
    3ece:	10 82       	st	Z, r1
    3ed0:	11 82       	std	Z+1, r1	; 0x01
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    3ed2:	f7 01       	movw	r30, r14
    3ed4:	81 81       	ldd	r24, Z+1	; 0x01
    3ed6:	85 fd       	sbrc	r24, 5
    3ed8:	18 c0       	rjmp	.+48     	; 0x3f0a <uart_transmit_lcd+0x1e4>
    3eda:	31 c0       	rjmp	.+98     	; 0x3f3e <uart_transmit_lcd+0x218>
}

inline uint8_t uart_dequeue(USART_t* port){
	uint8_t idx = port_map(port);
	uint16_t oldtail;
	oldtail = uart_tail[idx];
    3edc:	e8 81       	ld	r30, Y
    3ede:	f9 81       	ldd	r31, Y+1	; 0x01
	uart_tail[idx]++;
    3ee0:	88 81       	ld	r24, Y
    3ee2:	99 81       	ldd	r25, Y+1	; 0x01
    3ee4:	01 96       	adiw	r24, 0x01	; 1
    3ee6:	88 83       	st	Y, r24
    3ee8:	99 83       	std	Y+1, r25	; 0x01
	if (uart_tail[idx] >= MAX_BUFFER_LEN){
    3eea:	88 81       	ld	r24, Y
    3eec:	99 81       	ldd	r25, Y+1	; 0x01
    3eee:	24 e0       	ldi	r18, 0x04	; 4
    3ef0:	80 30       	cpi	r24, 0x00	; 0
    3ef2:	92 07       	cpc	r25, r18
    3ef4:	10 f0       	brcs	.+4      	; 0x3efa <uart_transmit_lcd+0x1d4>
		uart_tail[idx] = 0;
    3ef6:	18 82       	st	Y, r1
    3ef8:	19 82       	std	Y+1, r1	; 0x01
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    3efa:	e0 50       	subi	r30, 0x00	; 0
    3efc:	f5 4c       	sbci	r31, 0xC5	; 197
    3efe:	80 81       	ld	r24, Z
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
    3f00:	f7 01       	movw	r30, r14
    3f02:	80 83       	st	Z, r24
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    3f04:	81 81       	ldd	r24, Z+1	; 0x01
    3f06:	85 ff       	sbrs	r24, 5
    3f08:	1a c0       	rjmp	.+52     	; 0x3f3e <uart_transmit_lcd+0x218>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    3f0a:	f8 01       	movw	r30, r16
    3f0c:	80 81       	ld	r24, Z
    3f0e:	91 81       	ldd	r25, Z+1	; 0x01
    3f10:	28 81       	ld	r18, Y
    3f12:	39 81       	ldd	r19, Y+1	; 0x01
    3f14:	82 17       	cp	r24, r18
    3f16:	93 07       	cpc	r25, r19
    3f18:	38 f0       	brcs	.+14     	; 0x3f28 <uart_transmit_lcd+0x202>
		return (uart_head[idx] - uart_tail[idx]);
    3f1a:	80 81       	ld	r24, Z
    3f1c:	91 81       	ldd	r25, Z+1	; 0x01
    3f1e:	28 81       	ld	r18, Y
    3f20:	39 81       	ldd	r19, Y+1	; 0x01
    3f22:	82 1b       	sub	r24, r18
    3f24:	93 0b       	sbc	r25, r19
    3f26:	09 c0       	rjmp	.+18     	; 0x3f3a <uart_transmit_lcd+0x214>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    3f28:	f8 01       	movw	r30, r16
    3f2a:	80 81       	ld	r24, Z
    3f2c:	91 81       	ldd	r25, Z+1	; 0x01
    3f2e:	28 81       	ld	r18, Y
    3f30:	39 81       	ldd	r19, Y+1	; 0x01
    3f32:	80 50       	subi	r24, 0x00	; 0
    3f34:	9c 4f       	sbci	r25, 0xFC	; 252
    3f36:	82 1b       	sub	r24, r18
    3f38:	93 0b       	sbc	r25, r19
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    3f3a:	00 97       	sbiw	r24, 0x00	; 0
    3f3c:	79 f6       	brne	.-98     	; 0x3edc <uart_transmit_lcd+0x1b6>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    3f3e:	f8 01       	movw	r30, r16
    3f40:	80 81       	ld	r24, Z
    3f42:	91 81       	ldd	r25, Z+1	; 0x01
    3f44:	28 81       	ld	r18, Y
    3f46:	39 81       	ldd	r19, Y+1	; 0x01
    3f48:	82 17       	cp	r24, r18
    3f4a:	93 07       	cpc	r25, r19
    3f4c:	38 f0       	brcs	.+14     	; 0x3f5c <uart_transmit_lcd+0x236>
		return (uart_head[idx] - uart_tail[idx]);
    3f4e:	80 81       	ld	r24, Z
    3f50:	91 81       	ldd	r25, Z+1	; 0x01
    3f52:	28 81       	ld	r18, Y
    3f54:	39 81       	ldd	r19, Y+1	; 0x01
    3f56:	82 1b       	sub	r24, r18
    3f58:	93 0b       	sbc	r25, r19
    3f5a:	09 c0       	rjmp	.+18     	; 0x3f6e <uart_transmit_lcd+0x248>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    3f5c:	f8 01       	movw	r30, r16
    3f5e:	80 81       	ld	r24, Z
    3f60:	91 81       	ldd	r25, Z+1	; 0x01
    3f62:	28 81       	ld	r18, Y
    3f64:	39 81       	ldd	r19, Y+1	; 0x01
    3f66:	80 50       	subi	r24, 0x00	; 0
    3f68:	9c 4f       	sbci	r25, 0xFC	; 252
    3f6a:	82 1b       	sub	r24, r18
    3f6c:	93 0b       	sbc	r25, r19
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
	}
	//disable the tx outgoing hardware buffer ready interrupt if we have nothing more to put in it.
	if(uart_count(port)>0) uart_txbuffer_enable(port);
    3f6e:	00 97       	sbiw	r24, 0x00	; 0
    3f70:	21 f0       	breq	.+8      	; 0x3f7a <uart_transmit_lcd+0x254>
    3f72:	c7 01       	movw	r24, r14
    3f74:	0e 94 55 1c 	call	0x38aa	; 0x38aa <uart_txbuffer_enable>
    3f78:	03 c0       	rjmp	.+6      	; 0x3f80 <uart_transmit_lcd+0x25a>
	else uart_txbuffer_disable(port);
    3f7a:	c7 01       	movw	r24, r14
    3f7c:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <uart_txbuffer_disable>
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0) && (lcd_flow_control == LCD_READY)){
		toSend = uart_dequeue(port);
		if (toSend == 0x0D) {lcd_flow_control = LCD_BUSY;}
		uart_enqueue(&udata, '`'); //xxx - echo to data port
		uart_enqueue(&udata, toSend); //xxx - echo to data port
		port->DATA = toSend;
    3f80:	f6 01       	movw	r30, r12
    3f82:	b0 82       	st	Z, r11
}

void inline uart_transmit_lcd(USART_t* port){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0) && (lcd_flow_control == LCD_READY)){
    3f84:	81 81       	ldd	r24, Z+1	; 0x01
    3f86:	85 fd       	sbrc	r24, 5
    3f88:	25 c0       	rjmp	.+74     	; 0x3fd4 <uart_transmit_lcd+0x2ae>
    3f8a:	73 c0       	rjmp	.+230    	; 0x4072 <__stack+0x73>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    3f8c:	0f 2e       	mov	r0, r31
    3f8e:	fa ef       	ldi	r31, 0xFA	; 250
    3f90:	6f 2e       	mov	r6, r31
    3f92:	f2 e3       	ldi	r31, 0x32	; 50
    3f94:	7f 2e       	mov	r7, r31
    3f96:	f0 2d       	mov	r31, r0
    3f98:	0f 2e       	mov	r0, r31
    3f9a:	f6 e0       	ldi	r31, 0x06	; 6
    3f9c:	8f 2e       	mov	r8, r31
    3f9e:	ff e3       	ldi	r31, 0x3F	; 63
    3fa0:	9f 2e       	mov	r9, r31
    3fa2:	f0 2d       	mov	r31, r0
		uart_tail[idx] = 0;
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    3fa4:	0f 2e       	mov	r0, r31
    3fa6:	f0 e0       	ldi	r31, 0x00	; 0
    3fa8:	4f 2e       	mov	r4, r31
    3faa:	f3 e3       	ldi	r31, 0x33	; 51
    3fac:	5f 2e       	mov	r5, r31
    3fae:	f0 2d       	mov	r31, r0
void inline uart_transmit_lcd(USART_t* port){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0) && (lcd_flow_control == LCD_READY)){
		toSend = uart_dequeue(port);
		if (toSend == 0x0D) {lcd_flow_control = LCD_BUSY;}
    3fb0:	0f 2e       	mov	r0, r31
    3fb2:	fe e4       	ldi	r31, 0x4E	; 78
    3fb4:	3f 2e       	mov	r3, r31
    3fb6:	f0 2d       	mov	r31, r0
#ifndef UART_DEBUG
	uint8_t idx = port_map(port);
	
	//if (idx==0){uart_enqueue(&uctrl, datain);} //xxx
	
	uart_buffer[idx][uart_head[idx]] = datain;
    3fb8:	0e ef       	ldi	r16, 0xFE	; 254
    3fba:	12 e3       	ldi	r17, 0x32	; 50
    3fbc:	0f 2e       	mov	r0, r31
    3fbe:	f0 e6       	ldi	r31, 0x60	; 96
    3fc0:	af 2e       	mov	r10, r31
    3fc2:	f0 2d       	mov	r31, r0
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    3fc4:	0f 2e       	mov	r0, r31
    3fc6:	f0 eb       	ldi	r31, 0xB0	; 176
    3fc8:	ef 2e       	mov	r14, r31
    3fca:	f8 e0       	ldi	r31, 0x08	; 8
    3fcc:	ff 2e       	mov	r15, r31
    3fce:	f0 2d       	mov	r31, r0
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    3fd0:	ca e0       	ldi	r28, 0x0A	; 10
    3fd2:	df e3       	ldi	r29, 0x3F	; 63
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    3fd4:	f0 eb       	ldi	r31, 0xB0	; 176
    3fd6:	cf 16       	cp	r12, r31
    3fd8:	fb e0       	ldi	r31, 0x0B	; 11
    3fda:	df 06       	cpc	r13, r31
    3fdc:	61 f0       	breq	.+24     	; 0x3ff6 <uart_transmit_lcd+0x2d0>
	if (port == &uctrl) {return 1;}
    3fde:	20 ea       	ldi	r18, 0xA0	; 160
    3fe0:	c2 16       	cp	r12, r18
    3fe2:	28 e0       	ldi	r18, 0x08	; 8
    3fe4:	d2 06       	cpc	r13, r18
    3fe6:	49 f0       	breq	.+18     	; 0x3ffa <uart_transmit_lcd+0x2d4>
	if (port == &udata) {return 2;}
    3fe8:	30 eb       	ldi	r19, 0xB0	; 176
    3fea:	c3 16       	cp	r12, r19
    3fec:	38 e0       	ldi	r19, 0x08	; 8
    3fee:	d3 06       	cpc	r13, r19
    3ff0:	31 f4       	brne	.+12     	; 0x3ffe <uart_transmit_lcd+0x2d8>
    3ff2:	22 e0       	ldi	r18, 0x02	; 2
    3ff4:	05 c0       	rjmp	.+10     	; 0x4000 <__stack+0x1>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    3ff6:	20 e0       	ldi	r18, 0x00	; 0
    3ff8:	03 c0       	rjmp	.+6      	; 0x4000 <__stack+0x1>
	if (port == &uctrl) {return 1;}
    3ffa:	21 e0       	ldi	r18, 0x01	; 1
    3ffc:	01 c0       	rjmp	.+2      	; 0x4000 <__stack+0x1>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    3ffe:	20 e0       	ldi	r18, 0x00	; 0
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    4000:	30 e0       	ldi	r19, 0x00	; 0
    4002:	c9 01       	movw	r24, r18
    4004:	88 0f       	add	r24, r24
    4006:	99 1f       	adc	r25, r25
    4008:	f3 01       	movw	r30, r6
    400a:	e8 0f       	add	r30, r24
    400c:	f9 1f       	adc	r31, r25
    400e:	40 81       	ld	r20, Z
    4010:	51 81       	ldd	r21, Z+1	; 0x01
    4012:	f4 01       	movw	r30, r8
    4014:	e8 0f       	add	r30, r24
    4016:	f9 1f       	adc	r31, r25
    4018:	80 81       	ld	r24, Z
    401a:	91 81       	ldd	r25, Z+1	; 0x01
    401c:	48 17       	cp	r20, r24
    401e:	59 07       	cpc	r21, r25
    4020:	88 f0       	brcs	.+34     	; 0x4044 <__stack+0x45>
		return (uart_head[idx] - uart_tail[idx]);
    4022:	22 0f       	add	r18, r18
    4024:	33 1f       	adc	r19, r19
    4026:	f3 01       	movw	r30, r6
    4028:	e2 0f       	add	r30, r18
    402a:	f3 1f       	adc	r31, r19
    402c:	40 81       	ld	r20, Z
    402e:	51 81       	ldd	r21, Z+1	; 0x01
    4030:	f4 01       	movw	r30, r8
    4032:	e2 0f       	add	r30, r18
    4034:	f3 1f       	adc	r31, r19
    4036:	80 81       	ld	r24, Z
    4038:	91 81       	ldd	r25, Z+1	; 0x01
    403a:	fa 01       	movw	r30, r20
    403c:	e8 1b       	sub	r30, r24
    403e:	f9 0b       	sbc	r31, r25
    4040:	cf 01       	movw	r24, r30
    4042:	10 c0       	rjmp	.+32     	; 0x4064 <__stack+0x65>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    4044:	22 0f       	add	r18, r18
    4046:	33 1f       	adc	r19, r19
    4048:	f3 01       	movw	r30, r6
    404a:	e2 0f       	add	r30, r18
    404c:	f3 1f       	adc	r31, r19
    404e:	80 81       	ld	r24, Z
    4050:	91 81       	ldd	r25, Z+1	; 0x01
    4052:	f4 01       	movw	r30, r8
    4054:	e2 0f       	add	r30, r18
    4056:	f3 1f       	adc	r31, r19
    4058:	20 81       	ld	r18, Z
    405a:	31 81       	ldd	r19, Z+1	; 0x01
    405c:	80 50       	subi	r24, 0x00	; 0
    405e:	9c 4f       	sbci	r25, 0xFC	; 252
    4060:	82 1b       	sub	r24, r18
    4062:	93 0b       	sbc	r25, r19
}

void inline uart_transmit_lcd(USART_t* port){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0) && (lcd_flow_control == LCD_READY)){
    4064:	00 97       	sbiw	r24, 0x00	; 0
    4066:	29 f0       	breq	.+10     	; 0x4072 <__stack+0x73>
    4068:	80 91 e2 26 	lds	r24, 0x26E2
    406c:	82 35       	cpi	r24, 0x52	; 82
    406e:	09 f4       	brne	.+2      	; 0x4072 <__stack+0x73>
    4070:	71 ce       	rjmp	.-798    	; 0x3d54 <uart_transmit_lcd+0x2e>
		if (toSend == 0x0D) {lcd_flow_control = LCD_BUSY;}
		uart_enqueue(&udata, '`'); //xxx - echo to data port
		uart_enqueue(&udata, toSend); //xxx - echo to data port
		port->DATA = toSend;
	}
	uart_txbuffer_disable(port); //implemented this way to prevent periodic stalls that happen when uart_txbuffer isn't disabled quickly enough
    4072:	c6 01       	movw	r24, r12
    4074:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <uart_txbuffer_disable>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    4078:	f0 eb       	ldi	r31, 0xB0	; 176
    407a:	cf 16       	cp	r12, r31
    407c:	fb e0       	ldi	r31, 0x0B	; 11
    407e:	df 06       	cpc	r13, r31
    4080:	61 f0       	breq	.+24     	; 0x409a <__stack+0x9b>
	if (port == &uctrl) {return 1;}
    4082:	20 ea       	ldi	r18, 0xA0	; 160
    4084:	c2 16       	cp	r12, r18
    4086:	28 e0       	ldi	r18, 0x08	; 8
    4088:	d2 06       	cpc	r13, r18
    408a:	49 f0       	breq	.+18     	; 0x409e <__stack+0x9f>
	if (port == &udata) {return 2;}
    408c:	30 eb       	ldi	r19, 0xB0	; 176
    408e:	c3 16       	cp	r12, r19
    4090:	38 e0       	ldi	r19, 0x08	; 8
    4092:	d3 06       	cpc	r13, r19
    4094:	31 f4       	brne	.+12     	; 0x40a2 <__stack+0xa3>
    4096:	22 e0       	ldi	r18, 0x02	; 2
    4098:	05 c0       	rjmp	.+10     	; 0x40a4 <__stack+0xa5>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    409a:	20 e0       	ldi	r18, 0x00	; 0
    409c:	03 c0       	rjmp	.+6      	; 0x40a4 <__stack+0xa5>
	if (port == &uctrl) {return 1;}
    409e:	21 e0       	ldi	r18, 0x01	; 1
    40a0:	01 c0       	rjmp	.+2      	; 0x40a4 <__stack+0xa5>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    40a2:	20 e0       	ldi	r18, 0x00	; 0
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    40a4:	30 e0       	ldi	r19, 0x00	; 0
    40a6:	c9 01       	movw	r24, r18
    40a8:	88 0f       	add	r24, r24
    40aa:	99 1f       	adc	r25, r25
    40ac:	fc 01       	movw	r30, r24
    40ae:	e6 50       	subi	r30, 0x06	; 6
    40b0:	fd 4c       	sbci	r31, 0xCD	; 205
    40b2:	40 81       	ld	r20, Z
    40b4:	51 81       	ldd	r21, Z+1	; 0x01
    40b6:	8a 5f       	subi	r24, 0xFA	; 250
    40b8:	90 4c       	sbci	r25, 0xC0	; 192
    40ba:	fc 01       	movw	r30, r24
    40bc:	80 81       	ld	r24, Z
    40be:	91 81       	ldd	r25, Z+1	; 0x01
    40c0:	48 17       	cp	r20, r24
    40c2:	59 07       	cpc	r21, r25
    40c4:	78 f0       	brcs	.+30     	; 0x40e4 <__stack+0xe5>
		return (uart_head[idx] - uart_tail[idx]);
    40c6:	22 0f       	add	r18, r18
    40c8:	33 1f       	adc	r19, r19
    40ca:	f9 01       	movw	r30, r18
    40cc:	e6 50       	subi	r30, 0x06	; 6
    40ce:	fd 4c       	sbci	r31, 0xCD	; 205
    40d0:	80 81       	ld	r24, Z
    40d2:	91 81       	ldd	r25, Z+1	; 0x01
    40d4:	2a 5f       	subi	r18, 0xFA	; 250
    40d6:	30 4c       	sbci	r19, 0xC0	; 192
    40d8:	f9 01       	movw	r30, r18
    40da:	20 81       	ld	r18, Z
    40dc:	31 81       	ldd	r19, Z+1	; 0x01
    40de:	82 1b       	sub	r24, r18
    40e0:	93 0b       	sbc	r25, r19
    40e2:	12 c0       	rjmp	.+36     	; 0x4108 <__stack+0x109>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    40e4:	22 0f       	add	r18, r18
    40e6:	33 1f       	adc	r19, r19
    40e8:	f9 01       	movw	r30, r18
    40ea:	e6 50       	subi	r30, 0x06	; 6
    40ec:	fd 4c       	sbci	r31, 0xCD	; 205
    40ee:	40 81       	ld	r20, Z
    40f0:	51 81       	ldd	r21, Z+1	; 0x01
    40f2:	2a 5f       	subi	r18, 0xFA	; 250
    40f4:	30 4c       	sbci	r19, 0xC0	; 192
    40f6:	f9 01       	movw	r30, r18
    40f8:	80 81       	ld	r24, Z
    40fa:	91 81       	ldd	r25, Z+1	; 0x01
    40fc:	40 50       	subi	r20, 0x00	; 0
    40fe:	5c 4f       	sbci	r21, 0xFC	; 252
    4100:	9a 01       	movw	r18, r20
    4102:	28 1b       	sub	r18, r24
    4104:	39 0b       	sbc	r19, r25
    4106:	c9 01       	movw	r24, r18
		uart_enqueue(&udata, '`'); //xxx - echo to data port
		uart_enqueue(&udata, toSend); //xxx - echo to data port
		port->DATA = toSend;
	}
	uart_txbuffer_disable(port); //implemented this way to prevent periodic stalls that happen when uart_txbuffer isn't disabled quickly enough
	if ((uart_count(port)>0) && (lcd_flow_control == LCD_READY)){ //...something is waiting to go out
    4108:	00 97       	sbiw	r24, 0x00	; 0
    410a:	39 f0       	breq	.+14     	; 0x411a <__stack+0x11b>
    410c:	80 91 e2 26 	lds	r24, 0x26E2
    4110:	82 35       	cpi	r24, 0x52	; 82
    4112:	19 f4       	brne	.+6      	; 0x411a <__stack+0x11b>
		uart_txbuffer_enable(port);	
    4114:	c6 01       	movw	r24, r12
    4116:	0e 94 55 1c 	call	0x38aa	; 0x38aa <uart_txbuffer_enable>
	}	
}
    411a:	df 91       	pop	r29
    411c:	cf 91       	pop	r28
    411e:	1f 91       	pop	r17
    4120:	0f 91       	pop	r16
    4122:	ff 90       	pop	r15
    4124:	ef 90       	pop	r14
    4126:	df 90       	pop	r13
    4128:	cf 90       	pop	r12
    412a:	bf 90       	pop	r11
    412c:	af 90       	pop	r10
    412e:	9f 90       	pop	r9
    4130:	8f 90       	pop	r8
    4132:	7f 90       	pop	r7
    4134:	6f 90       	pop	r6
    4136:	5f 90       	pop	r5
    4138:	4f 90       	pop	r4
    413a:	3f 90       	pop	r3
    413c:	08 95       	ret

0000413e <__vector_123>:
//Must correspond to definitions in uart.h
ISR(USARTC0_DRE_vect) {uart_transmit(&uctrl);}//TX Interrupt
ISR(USARTC0_RXC_vect) {uart_receive(&uctrl);} //RX Interrupt
ISR(USARTC1_DRE_vect) {uart_transmit(&udata);}//TX Interrupt
ISR(USARTC1_RXC_vect) {uart_receive(&udata);} //RX Interrupt
ISR(USARTF1_DRE_vect) {uart_transmit_lcd(&ulcd);}//TX Interrupt
    413e:	1f 92       	push	r1
    4140:	0f 92       	push	r0
    4142:	0f b6       	in	r0, 0x3f	; 63
    4144:	0f 92       	push	r0
    4146:	08 b6       	in	r0, 0x38	; 56
    4148:	0f 92       	push	r0
    414a:	09 b6       	in	r0, 0x39	; 57
    414c:	0f 92       	push	r0
    414e:	0a b6       	in	r0, 0x3a	; 58
    4150:	0f 92       	push	r0
    4152:	0b b6       	in	r0, 0x3b	; 59
    4154:	0f 92       	push	r0
    4156:	11 24       	eor	r1, r1
    4158:	3f 92       	push	r3
    415a:	4f 92       	push	r4
    415c:	5f 92       	push	r5
    415e:	6f 92       	push	r6
    4160:	7f 92       	push	r7
    4162:	8f 92       	push	r8
    4164:	9f 92       	push	r9
    4166:	af 92       	push	r10
    4168:	bf 92       	push	r11
    416a:	cf 92       	push	r12
    416c:	df 92       	push	r13
    416e:	ef 92       	push	r14
    4170:	ff 92       	push	r15
    4172:	0f 93       	push	r16
    4174:	1f 93       	push	r17
    4176:	2f 93       	push	r18
    4178:	3f 93       	push	r19
    417a:	4f 93       	push	r20
    417c:	5f 93       	push	r21
    417e:	6f 93       	push	r22
    4180:	7f 93       	push	r23
    4182:	8f 93       	push	r24
    4184:	9f 93       	push	r25
    4186:	af 93       	push	r26
    4188:	bf 93       	push	r27
    418a:	cf 93       	push	r28
    418c:	df 93       	push	r29
    418e:	ef 93       	push	r30
    4190:	ff 93       	push	r31
}

void inline uart_transmit_lcd(USART_t* port){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0) && (lcd_flow_control == LCD_READY)){
    4192:	e0 eb       	ldi	r30, 0xB0	; 176
    4194:	fb e0       	ldi	r31, 0x0B	; 11
    4196:	81 81       	ldd	r24, Z+1	; 0x01
    4198:	85 fd       	sbrc	r24, 5
    419a:	fb c0       	rjmp	.+502    	; 0x4392 <__vector_123+0x254>
    419c:	48 c1       	rjmp	.+656    	; 0x442e <__vector_123+0x2f0>
}

inline uint8_t uart_dequeue(USART_t* port){
	uint8_t idx = port_map(port);
	uint16_t oldtail;
	oldtail = uart_tail[idx];
    419e:	d6 01       	movw	r26, r12
    41a0:	ed 91       	ld	r30, X+
    41a2:	fc 91       	ld	r31, X
    41a4:	11 97       	sbiw	r26, 0x01	; 1
	uart_tail[idx]++;
    41a6:	8d 91       	ld	r24, X+
    41a8:	9c 91       	ld	r25, X
    41aa:	11 97       	sbiw	r26, 0x01	; 1
    41ac:	01 96       	adiw	r24, 0x01	; 1
    41ae:	8d 93       	st	X+, r24
    41b0:	9c 93       	st	X, r25
    41b2:	11 97       	sbiw	r26, 0x01	; 1
	if (uart_tail[idx] >= MAX_BUFFER_LEN){
    41b4:	8d 91       	ld	r24, X+
    41b6:	9c 91       	ld	r25, X
    41b8:	11 97       	sbiw	r26, 0x01	; 1
    41ba:	b4 e0       	ldi	r27, 0x04	; 4
    41bc:	80 30       	cpi	r24, 0x00	; 0
    41be:	9b 07       	cpc	r25, r27
    41c0:	20 f0       	brcs	.+8      	; 0x41ca <__vector_123+0x8c>
		uart_tail[idx] = 0;
    41c2:	d6 01       	movw	r26, r12
    41c4:	1d 92       	st	X+, r1
    41c6:	1c 92       	st	X, r1
    41c8:	11 97       	sbiw	r26, 0x01	; 1
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    41ca:	e4 0d       	add	r30, r4
    41cc:	f5 1d       	adc	r31, r5
    41ce:	b0 80       	ld	r11, Z
void inline uart_transmit_lcd(USART_t* port){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0) && (lcd_flow_control == LCD_READY)){
		toSend = uart_dequeue(port);
		if (toSend == 0x0D) {lcd_flow_control = LCD_BUSY;}
    41d0:	bd e0       	ldi	r27, 0x0D	; 13
    41d2:	bb 16       	cp	r11, r27
    41d4:	11 f4       	brne	.+4      	; 0x41da <__vector_123+0x9c>
    41d6:	30 92 e2 26 	sts	0x26E2, r3
#ifndef UART_DEBUG
	uint8_t idx = port_map(port);
	
	//if (idx==0){uart_enqueue(&uctrl, datain);} //xxx
	
	uart_buffer[idx][uart_head[idx]] = datain;
    41da:	f8 01       	movw	r30, r16
    41dc:	80 81       	ld	r24, Z
    41de:	91 81       	ldd	r25, Z+1	; 0x01
    41e0:	80 50       	subi	r24, 0x00	; 0
    41e2:	95 4c       	sbci	r25, 0xC5	; 197
    41e4:	dc 01       	movw	r26, r24
    41e6:	ac 92       	st	X, r10
	uart_head[idx]++;
    41e8:	80 81       	ld	r24, Z
    41ea:	91 81       	ldd	r25, Z+1	; 0x01
    41ec:	01 96       	adiw	r24, 0x01	; 1
    41ee:	80 83       	st	Z, r24
    41f0:	91 83       	std	Z+1, r25	; 0x01
	if (uart_head[idx] >= MAX_BUFFER_LEN){
    41f2:	80 81       	ld	r24, Z
    41f4:	91 81       	ldd	r25, Z+1	; 0x01
    41f6:	b4 e0       	ldi	r27, 0x04	; 4
    41f8:	80 30       	cpi	r24, 0x00	; 0
    41fa:	9b 07       	cpc	r25, r27
    41fc:	10 f0       	brcs	.+4      	; 0x4202 <__vector_123+0xc4>
		uart_head[idx] = 0;
    41fe:	10 82       	st	Z, r1
    4200:	11 82       	std	Z+1, r1	; 0x01
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    4202:	f7 01       	movw	r30, r14
    4204:	81 81       	ldd	r24, Z+1	; 0x01
    4206:	85 fd       	sbrc	r24, 5
    4208:	1a c0       	rjmp	.+52     	; 0x423e <__vector_123+0x100>
    420a:	32 c0       	rjmp	.+100    	; 0x4270 <__vector_123+0x132>
}

inline uint8_t uart_dequeue(USART_t* port){
	uint8_t idx = port_map(port);
	uint16_t oldtail;
	oldtail = uart_tail[idx];
    420c:	e8 81       	ld	r30, Y
    420e:	f9 81       	ldd	r31, Y+1	; 0x01
	uart_tail[idx]++;
    4210:	88 81       	ld	r24, Y
    4212:	99 81       	ldd	r25, Y+1	; 0x01
    4214:	01 96       	adiw	r24, 0x01	; 1
    4216:	88 83       	st	Y, r24
    4218:	99 83       	std	Y+1, r25	; 0x01
	if (uart_tail[idx] >= MAX_BUFFER_LEN){
    421a:	88 81       	ld	r24, Y
    421c:	99 81       	ldd	r25, Y+1	; 0x01
    421e:	24 e0       	ldi	r18, 0x04	; 4
    4220:	80 30       	cpi	r24, 0x00	; 0
    4222:	92 07       	cpc	r25, r18
    4224:	10 f0       	brcs	.+4      	; 0x422a <__vector_123+0xec>
		uart_tail[idx] = 0;
    4226:	18 82       	st	Y, r1
    4228:	19 82       	std	Y+1, r1	; 0x01
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    422a:	e0 50       	subi	r30, 0x00	; 0
    422c:	f5 4c       	sbci	r31, 0xC5	; 197
    422e:	80 81       	ld	r24, Z
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
    4230:	d7 01       	movw	r26, r14
    4232:	8c 93       	st	X, r24
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    4234:	11 96       	adiw	r26, 0x01	; 1
    4236:	8c 91       	ld	r24, X
    4238:	11 97       	sbiw	r26, 0x01	; 1
    423a:	85 ff       	sbrs	r24, 5
    423c:	19 c0       	rjmp	.+50     	; 0x4270 <__vector_123+0x132>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    423e:	f8 01       	movw	r30, r16
    4240:	80 81       	ld	r24, Z
    4242:	91 81       	ldd	r25, Z+1	; 0x01
    4244:	28 81       	ld	r18, Y
    4246:	39 81       	ldd	r19, Y+1	; 0x01
    4248:	82 17       	cp	r24, r18
    424a:	93 07       	cpc	r25, r19
    424c:	38 f0       	brcs	.+14     	; 0x425c <__vector_123+0x11e>
		return (uart_head[idx] - uart_tail[idx]);
    424e:	80 81       	ld	r24, Z
    4250:	91 81       	ldd	r25, Z+1	; 0x01
    4252:	28 81       	ld	r18, Y
    4254:	39 81       	ldd	r19, Y+1	; 0x01
    4256:	82 1b       	sub	r24, r18
    4258:	93 0b       	sbc	r25, r19
    425a:	08 c0       	rjmp	.+16     	; 0x426c <__vector_123+0x12e>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    425c:	80 81       	ld	r24, Z
    425e:	91 81       	ldd	r25, Z+1	; 0x01
    4260:	28 81       	ld	r18, Y
    4262:	39 81       	ldd	r19, Y+1	; 0x01
    4264:	80 50       	subi	r24, 0x00	; 0
    4266:	9c 4f       	sbci	r25, 0xFC	; 252
    4268:	82 1b       	sub	r24, r18
    426a:	93 0b       	sbc	r25, r19
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    426c:	00 97       	sbiw	r24, 0x00	; 0
    426e:	71 f6       	brne	.-100    	; 0x420c <__vector_123+0xce>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    4270:	f8 01       	movw	r30, r16
    4272:	80 81       	ld	r24, Z
    4274:	91 81       	ldd	r25, Z+1	; 0x01
    4276:	28 81       	ld	r18, Y
    4278:	39 81       	ldd	r19, Y+1	; 0x01
    427a:	82 17       	cp	r24, r18
    427c:	93 07       	cpc	r25, r19
    427e:	38 f0       	brcs	.+14     	; 0x428e <__vector_123+0x150>
		return (uart_head[idx] - uart_tail[idx]);
    4280:	80 81       	ld	r24, Z
    4282:	91 81       	ldd	r25, Z+1	; 0x01
    4284:	28 81       	ld	r18, Y
    4286:	39 81       	ldd	r19, Y+1	; 0x01
    4288:	82 1b       	sub	r24, r18
    428a:	93 0b       	sbc	r25, r19
    428c:	08 c0       	rjmp	.+16     	; 0x429e <__vector_123+0x160>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    428e:	80 81       	ld	r24, Z
    4290:	91 81       	ldd	r25, Z+1	; 0x01
    4292:	28 81       	ld	r18, Y
    4294:	39 81       	ldd	r19, Y+1	; 0x01
    4296:	80 50       	subi	r24, 0x00	; 0
    4298:	9c 4f       	sbci	r25, 0xFC	; 252
    429a:	82 1b       	sub	r24, r18
    429c:	93 0b       	sbc	r25, r19
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
	}
	//disable the tx outgoing hardware buffer ready interrupt if we have nothing more to put in it.
	if(uart_count(port)>0) uart_txbuffer_enable(port);
    429e:	00 97       	sbiw	r24, 0x00	; 0
    42a0:	21 f0       	breq	.+8      	; 0x42aa <__vector_123+0x16c>
    42a2:	c7 01       	movw	r24, r14
    42a4:	0e 94 55 1c 	call	0x38aa	; 0x38aa <uart_txbuffer_enable>
    42a8:	03 c0       	rjmp	.+6      	; 0x42b0 <__vector_123+0x172>
	else uart_txbuffer_disable(port);
    42aa:	c7 01       	movw	r24, r14
    42ac:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <uart_txbuffer_disable>
#ifndef UART_DEBUG
	uint8_t idx = port_map(port);
	
	//if (idx==0){uart_enqueue(&uctrl, datain);} //xxx
	
	uart_buffer[idx][uart_head[idx]] = datain;
    42b0:	f8 01       	movw	r30, r16
    42b2:	80 81       	ld	r24, Z
    42b4:	91 81       	ldd	r25, Z+1	; 0x01
    42b6:	80 50       	subi	r24, 0x00	; 0
    42b8:	95 4c       	sbci	r25, 0xC5	; 197
    42ba:	dc 01       	movw	r26, r24
    42bc:	bc 92       	st	X, r11
	uart_head[idx]++;
    42be:	80 81       	ld	r24, Z
    42c0:	91 81       	ldd	r25, Z+1	; 0x01
    42c2:	01 96       	adiw	r24, 0x01	; 1
    42c4:	80 83       	st	Z, r24
    42c6:	91 83       	std	Z+1, r25	; 0x01
	if (uart_head[idx] >= MAX_BUFFER_LEN){
    42c8:	80 81       	ld	r24, Z
    42ca:	91 81       	ldd	r25, Z+1	; 0x01
    42cc:	b4 e0       	ldi	r27, 0x04	; 4
    42ce:	80 30       	cpi	r24, 0x00	; 0
    42d0:	9b 07       	cpc	r25, r27
    42d2:	10 f0       	brcs	.+4      	; 0x42d8 <__vector_123+0x19a>
		uart_head[idx] = 0;
    42d4:	10 82       	st	Z, r1
    42d6:	11 82       	std	Z+1, r1	; 0x01
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    42d8:	f7 01       	movw	r30, r14
    42da:	81 81       	ldd	r24, Z+1	; 0x01
    42dc:	85 fd       	sbrc	r24, 5
    42de:	1a c0       	rjmp	.+52     	; 0x4314 <__vector_123+0x1d6>
    42e0:	32 c0       	rjmp	.+100    	; 0x4346 <__vector_123+0x208>
}

inline uint8_t uart_dequeue(USART_t* port){
	uint8_t idx = port_map(port);
	uint16_t oldtail;
	oldtail = uart_tail[idx];
    42e2:	e8 81       	ld	r30, Y
    42e4:	f9 81       	ldd	r31, Y+1	; 0x01
	uart_tail[idx]++;
    42e6:	88 81       	ld	r24, Y
    42e8:	99 81       	ldd	r25, Y+1	; 0x01
    42ea:	01 96       	adiw	r24, 0x01	; 1
    42ec:	88 83       	st	Y, r24
    42ee:	99 83       	std	Y+1, r25	; 0x01
	if (uart_tail[idx] >= MAX_BUFFER_LEN){
    42f0:	88 81       	ld	r24, Y
    42f2:	99 81       	ldd	r25, Y+1	; 0x01
    42f4:	24 e0       	ldi	r18, 0x04	; 4
    42f6:	80 30       	cpi	r24, 0x00	; 0
    42f8:	92 07       	cpc	r25, r18
    42fa:	10 f0       	brcs	.+4      	; 0x4300 <__vector_123+0x1c2>
		uart_tail[idx] = 0;
    42fc:	18 82       	st	Y, r1
    42fe:	19 82       	std	Y+1, r1	; 0x01
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    4300:	e0 50       	subi	r30, 0x00	; 0
    4302:	f5 4c       	sbci	r31, 0xC5	; 197
    4304:	80 81       	ld	r24, Z
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
    4306:	d7 01       	movw	r26, r14
    4308:	8c 93       	st	X, r24
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    430a:	11 96       	adiw	r26, 0x01	; 1
    430c:	8c 91       	ld	r24, X
    430e:	11 97       	sbiw	r26, 0x01	; 1
    4310:	85 ff       	sbrs	r24, 5
    4312:	19 c0       	rjmp	.+50     	; 0x4346 <__vector_123+0x208>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    4314:	f8 01       	movw	r30, r16
    4316:	80 81       	ld	r24, Z
    4318:	91 81       	ldd	r25, Z+1	; 0x01
    431a:	28 81       	ld	r18, Y
    431c:	39 81       	ldd	r19, Y+1	; 0x01
    431e:	82 17       	cp	r24, r18
    4320:	93 07       	cpc	r25, r19
    4322:	38 f0       	brcs	.+14     	; 0x4332 <__vector_123+0x1f4>
		return (uart_head[idx] - uart_tail[idx]);
    4324:	80 81       	ld	r24, Z
    4326:	91 81       	ldd	r25, Z+1	; 0x01
    4328:	28 81       	ld	r18, Y
    432a:	39 81       	ldd	r19, Y+1	; 0x01
    432c:	82 1b       	sub	r24, r18
    432e:	93 0b       	sbc	r25, r19
    4330:	08 c0       	rjmp	.+16     	; 0x4342 <__vector_123+0x204>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    4332:	80 81       	ld	r24, Z
    4334:	91 81       	ldd	r25, Z+1	; 0x01
    4336:	28 81       	ld	r18, Y
    4338:	39 81       	ldd	r19, Y+1	; 0x01
    433a:	80 50       	subi	r24, 0x00	; 0
    433c:	9c 4f       	sbci	r25, 0xFC	; 252
    433e:	82 1b       	sub	r24, r18
    4340:	93 0b       	sbc	r25, r19
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    4342:	00 97       	sbiw	r24, 0x00	; 0
    4344:	71 f6       	brne	.-100    	; 0x42e2 <__vector_123+0x1a4>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    4346:	f8 01       	movw	r30, r16
    4348:	80 81       	ld	r24, Z
    434a:	91 81       	ldd	r25, Z+1	; 0x01
    434c:	28 81       	ld	r18, Y
    434e:	39 81       	ldd	r19, Y+1	; 0x01
    4350:	82 17       	cp	r24, r18
    4352:	93 07       	cpc	r25, r19
    4354:	38 f0       	brcs	.+14     	; 0x4364 <__vector_123+0x226>
		return (uart_head[idx] - uart_tail[idx]);
    4356:	80 81       	ld	r24, Z
    4358:	91 81       	ldd	r25, Z+1	; 0x01
    435a:	28 81       	ld	r18, Y
    435c:	39 81       	ldd	r19, Y+1	; 0x01
    435e:	82 1b       	sub	r24, r18
    4360:	93 0b       	sbc	r25, r19
    4362:	08 c0       	rjmp	.+16     	; 0x4374 <__vector_123+0x236>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    4364:	80 81       	ld	r24, Z
    4366:	91 81       	ldd	r25, Z+1	; 0x01
    4368:	28 81       	ld	r18, Y
    436a:	39 81       	ldd	r19, Y+1	; 0x01
    436c:	80 50       	subi	r24, 0x00	; 0
    436e:	9c 4f       	sbci	r25, 0xFC	; 252
    4370:	82 1b       	sub	r24, r18
    4372:	93 0b       	sbc	r25, r19
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
	}
	//disable the tx outgoing hardware buffer ready interrupt if we have nothing more to put in it.
	if(uart_count(port)>0) uart_txbuffer_enable(port);
    4374:	00 97       	sbiw	r24, 0x00	; 0
    4376:	21 f0       	breq	.+8      	; 0x4380 <__vector_123+0x242>
    4378:	c7 01       	movw	r24, r14
    437a:	0e 94 55 1c 	call	0x38aa	; 0x38aa <uart_txbuffer_enable>
    437e:	03 c0       	rjmp	.+6      	; 0x4386 <__vector_123+0x248>
	else uart_txbuffer_disable(port);
    4380:	c7 01       	movw	r24, r14
    4382:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <uart_txbuffer_disable>
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0) && (lcd_flow_control == LCD_READY)){
		toSend = uart_dequeue(port);
		if (toSend == 0x0D) {lcd_flow_control = LCD_BUSY;}
		uart_enqueue(&udata, '`'); //xxx - echo to data port
		uart_enqueue(&udata, toSend); //xxx - echo to data port
		port->DATA = toSend;
    4386:	f3 01       	movw	r30, r6
    4388:	b0 82       	st	Z, r11
}

void inline uart_transmit_lcd(USART_t* port){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0) && (lcd_flow_control == LCD_READY)){
    438a:	81 81       	ldd	r24, Z+1	; 0x01
    438c:	85 fd       	sbrc	r24, 5
    438e:	2b c0       	rjmp	.+86     	; 0x43e6 <__vector_123+0x2a8>
    4390:	4e c0       	rjmp	.+156    	; 0x442e <__vector_123+0x2f0>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    4392:	0f 2e       	mov	r0, r31
    4394:	fa ef       	ldi	r31, 0xFA	; 250
    4396:	8f 2e       	mov	r8, r31
    4398:	f2 e3       	ldi	r31, 0x32	; 50
    439a:	9f 2e       	mov	r9, r31
    439c:	f0 2d       	mov	r31, r0
    439e:	0f 2e       	mov	r0, r31
    43a0:	f6 e0       	ldi	r31, 0x06	; 6
    43a2:	cf 2e       	mov	r12, r31
    43a4:	ff e3       	ldi	r31, 0x3F	; 63
    43a6:	df 2e       	mov	r13, r31
    43a8:	f0 2d       	mov	r31, r0
		uart_tail[idx] = 0;
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    43aa:	0f 2e       	mov	r0, r31
    43ac:	f0 e0       	ldi	r31, 0x00	; 0
    43ae:	4f 2e       	mov	r4, r31
    43b0:	f3 e3       	ldi	r31, 0x33	; 51
    43b2:	5f 2e       	mov	r5, r31
    43b4:	f0 2d       	mov	r31, r0
void inline uart_transmit_lcd(USART_t* port){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0) && (lcd_flow_control == LCD_READY)){
		toSend = uart_dequeue(port);
		if (toSend == 0x0D) {lcd_flow_control = LCD_BUSY;}
    43b6:	0f 2e       	mov	r0, r31
    43b8:	fe e4       	ldi	r31, 0x4E	; 78
    43ba:	3f 2e       	mov	r3, r31
    43bc:	f0 2d       	mov	r31, r0
#ifndef UART_DEBUG
	uint8_t idx = port_map(port);
	
	//if (idx==0){uart_enqueue(&uctrl, datain);} //xxx
	
	uart_buffer[idx][uart_head[idx]] = datain;
    43be:	0e ef       	ldi	r16, 0xFE	; 254
    43c0:	12 e3       	ldi	r17, 0x32	; 50
    43c2:	0f 2e       	mov	r0, r31
    43c4:	f0 e6       	ldi	r31, 0x60	; 96
    43c6:	af 2e       	mov	r10, r31
    43c8:	f0 2d       	mov	r31, r0
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    43ca:	0f 2e       	mov	r0, r31
    43cc:	f0 eb       	ldi	r31, 0xB0	; 176
    43ce:	ef 2e       	mov	r14, r31
    43d0:	f8 e0       	ldi	r31, 0x08	; 8
    43d2:	ff 2e       	mov	r15, r31
    43d4:	f0 2d       	mov	r31, r0
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    43d6:	ca e0       	ldi	r28, 0x0A	; 10
    43d8:	df e3       	ldi	r29, 0x3F	; 63
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0) && (lcd_flow_control == LCD_READY)){
		toSend = uart_dequeue(port);
		if (toSend == 0x0D) {lcd_flow_control = LCD_BUSY;}
		uart_enqueue(&udata, '`'); //xxx - echo to data port
		uart_enqueue(&udata, toSend); //xxx - echo to data port
		port->DATA = toSend;
    43da:	0f 2e       	mov	r0, r31
    43dc:	f0 eb       	ldi	r31, 0xB0	; 176
    43de:	6f 2e       	mov	r6, r31
    43e0:	fb e0       	ldi	r31, 0x0B	; 11
    43e2:	7f 2e       	mov	r7, r31
    43e4:	f0 2d       	mov	r31, r0
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    43e6:	d4 01       	movw	r26, r8
    43e8:	8d 91       	ld	r24, X+
    43ea:	9c 91       	ld	r25, X
    43ec:	11 97       	sbiw	r26, 0x01	; 1
    43ee:	f6 01       	movw	r30, r12
    43f0:	20 81       	ld	r18, Z
    43f2:	31 81       	ldd	r19, Z+1	; 0x01
    43f4:	82 17       	cp	r24, r18
    43f6:	93 07       	cpc	r25, r19
    43f8:	40 f0       	brcs	.+16     	; 0x440a <__vector_123+0x2cc>
		return (uart_head[idx] - uart_tail[idx]);
    43fa:	8d 91       	ld	r24, X+
    43fc:	9c 91       	ld	r25, X
    43fe:	11 97       	sbiw	r26, 0x01	; 1
    4400:	20 81       	ld	r18, Z
    4402:	31 81       	ldd	r19, Z+1	; 0x01
    4404:	82 1b       	sub	r24, r18
    4406:	93 0b       	sbc	r25, r19
    4408:	0b c0       	rjmp	.+22     	; 0x4420 <__vector_123+0x2e2>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    440a:	d4 01       	movw	r26, r8
    440c:	8d 91       	ld	r24, X+
    440e:	9c 91       	ld	r25, X
    4410:	11 97       	sbiw	r26, 0x01	; 1
    4412:	f6 01       	movw	r30, r12
    4414:	20 81       	ld	r18, Z
    4416:	31 81       	ldd	r19, Z+1	; 0x01
    4418:	80 50       	subi	r24, 0x00	; 0
    441a:	9c 4f       	sbci	r25, 0xFC	; 252
    441c:	82 1b       	sub	r24, r18
    441e:	93 0b       	sbc	r25, r19
}

void inline uart_transmit_lcd(USART_t* port){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0) && (lcd_flow_control == LCD_READY)){
    4420:	00 97       	sbiw	r24, 0x00	; 0
    4422:	29 f0       	breq	.+10     	; 0x442e <__vector_123+0x2f0>
    4424:	80 91 e2 26 	lds	r24, 0x26E2
    4428:	82 35       	cpi	r24, 0x52	; 82
    442a:	09 f4       	brne	.+2      	; 0x442e <__vector_123+0x2f0>
    442c:	b8 ce       	rjmp	.-656    	; 0x419e <__vector_123+0x60>
		if (toSend == 0x0D) {lcd_flow_control = LCD_BUSY;}
		uart_enqueue(&udata, '`'); //xxx - echo to data port
		uart_enqueue(&udata, toSend); //xxx - echo to data port
		port->DATA = toSend;
	}
	uart_txbuffer_disable(port); //implemented this way to prevent periodic stalls that happen when uart_txbuffer isn't disabled quickly enough
    442e:	80 eb       	ldi	r24, 0xB0	; 176
    4430:	9b e0       	ldi	r25, 0x0B	; 11
    4432:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <uart_txbuffer_disable>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    4436:	20 91 fa 32 	lds	r18, 0x32FA
    443a:	30 91 fb 32 	lds	r19, 0x32FB
    443e:	80 91 06 3f 	lds	r24, 0x3F06
    4442:	90 91 07 3f 	lds	r25, 0x3F07
    4446:	28 17       	cp	r18, r24
    4448:	39 07       	cpc	r19, r25
    444a:	58 f0       	brcs	.+22     	; 0x4462 <__vector_123+0x324>
		return (uart_head[idx] - uart_tail[idx]);
    444c:	80 91 fa 32 	lds	r24, 0x32FA
    4450:	90 91 fb 32 	lds	r25, 0x32FB
    4454:	20 91 06 3f 	lds	r18, 0x3F06
    4458:	30 91 07 3f 	lds	r19, 0x3F07
    445c:	82 1b       	sub	r24, r18
    445e:	93 0b       	sbc	r25, r19
    4460:	0c c0       	rjmp	.+24     	; 0x447a <__vector_123+0x33c>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    4462:	80 91 fa 32 	lds	r24, 0x32FA
    4466:	90 91 fb 32 	lds	r25, 0x32FB
    446a:	20 91 06 3f 	lds	r18, 0x3F06
    446e:	30 91 07 3f 	lds	r19, 0x3F07
    4472:	80 50       	subi	r24, 0x00	; 0
    4474:	9c 4f       	sbci	r25, 0xFC	; 252
    4476:	82 1b       	sub	r24, r18
    4478:	93 0b       	sbc	r25, r19
		uart_enqueue(&udata, '`'); //xxx - echo to data port
		uart_enqueue(&udata, toSend); //xxx - echo to data port
		port->DATA = toSend;
	}
	uart_txbuffer_disable(port); //implemented this way to prevent periodic stalls that happen when uart_txbuffer isn't disabled quickly enough
	if ((uart_count(port)>0) && (lcd_flow_control == LCD_READY)){ //...something is waiting to go out
    447a:	00 97       	sbiw	r24, 0x00	; 0
    447c:	41 f0       	breq	.+16     	; 0x448e <__vector_123+0x350>
    447e:	80 91 e2 26 	lds	r24, 0x26E2
    4482:	82 35       	cpi	r24, 0x52	; 82
    4484:	21 f4       	brne	.+8      	; 0x448e <__vector_123+0x350>
		uart_txbuffer_enable(port);	
    4486:	80 eb       	ldi	r24, 0xB0	; 176
    4488:	9b e0       	ldi	r25, 0x0B	; 11
    448a:	0e 94 55 1c 	call	0x38aa	; 0x38aa <uart_txbuffer_enable>
//Must correspond to definitions in uart.h
ISR(USARTC0_DRE_vect) {uart_transmit(&uctrl);}//TX Interrupt
ISR(USARTC0_RXC_vect) {uart_receive(&uctrl);} //RX Interrupt
ISR(USARTC1_DRE_vect) {uart_transmit(&udata);}//TX Interrupt
ISR(USARTC1_RXC_vect) {uart_receive(&udata);} //RX Interrupt
ISR(USARTF1_DRE_vect) {uart_transmit_lcd(&ulcd);}//TX Interrupt
    448e:	ff 91       	pop	r31
    4490:	ef 91       	pop	r30
    4492:	df 91       	pop	r29
    4494:	cf 91       	pop	r28
    4496:	bf 91       	pop	r27
    4498:	af 91       	pop	r26
    449a:	9f 91       	pop	r25
    449c:	8f 91       	pop	r24
    449e:	7f 91       	pop	r23
    44a0:	6f 91       	pop	r22
    44a2:	5f 91       	pop	r21
    44a4:	4f 91       	pop	r20
    44a6:	3f 91       	pop	r19
    44a8:	2f 91       	pop	r18
    44aa:	1f 91       	pop	r17
    44ac:	0f 91       	pop	r16
    44ae:	ff 90       	pop	r15
    44b0:	ef 90       	pop	r14
    44b2:	df 90       	pop	r13
    44b4:	cf 90       	pop	r12
    44b6:	bf 90       	pop	r11
    44b8:	af 90       	pop	r10
    44ba:	9f 90       	pop	r9
    44bc:	8f 90       	pop	r8
    44be:	7f 90       	pop	r7
    44c0:	6f 90       	pop	r6
    44c2:	5f 90       	pop	r5
    44c4:	4f 90       	pop	r4
    44c6:	3f 90       	pop	r3
    44c8:	0f 90       	pop	r0
    44ca:	0b be       	out	0x3b, r0	; 59
    44cc:	0f 90       	pop	r0
    44ce:	0a be       	out	0x3a, r0	; 58
    44d0:	0f 90       	pop	r0
    44d2:	09 be       	out	0x39, r0	; 57
    44d4:	0f 90       	pop	r0
    44d6:	08 be       	out	0x38, r0	; 56
    44d8:	0f 90       	pop	r0
    44da:	0f be       	out	0x3f, r0	; 63
    44dc:	0f 90       	pop	r0
    44de:	1f 90       	pop	r1
    44e0:	18 95       	reti

000044e2 <__vector_122>:
ISR(USARTF1_RXC_vect) {uart_receive_lcd(&ulcd);} //RX Interrupt
    44e2:	1f 92       	push	r1
    44e4:	0f 92       	push	r0
    44e6:	0f b6       	in	r0, 0x3f	; 63
    44e8:	0f 92       	push	r0
    44ea:	08 b6       	in	r0, 0x38	; 56
    44ec:	0f 92       	push	r0
    44ee:	09 b6       	in	r0, 0x39	; 57
    44f0:	0f 92       	push	r0
    44f2:	0a b6       	in	r0, 0x3a	; 58
    44f4:	0f 92       	push	r0
    44f6:	0b b6       	in	r0, 0x3b	; 59
    44f8:	0f 92       	push	r0
    44fa:	11 24       	eor	r1, r1
    44fc:	4f 92       	push	r4
    44fe:	5f 92       	push	r5
    4500:	6f 92       	push	r6
    4502:	7f 92       	push	r7
    4504:	8f 92       	push	r8
    4506:	9f 92       	push	r9
    4508:	af 92       	push	r10
    450a:	bf 92       	push	r11
    450c:	cf 92       	push	r12
    450e:	df 92       	push	r13
    4510:	ef 92       	push	r14
    4512:	ff 92       	push	r15
    4514:	0f 93       	push	r16
    4516:	1f 93       	push	r17
    4518:	2f 93       	push	r18
    451a:	3f 93       	push	r19
    451c:	4f 93       	push	r20
    451e:	5f 93       	push	r21
    4520:	6f 93       	push	r22
    4522:	7f 93       	push	r23
    4524:	8f 93       	push	r24
    4526:	9f 93       	push	r25
    4528:	af 93       	push	r26
    452a:	bf 93       	push	r27
    452c:	cf 93       	push	r28
    452e:	df 93       	push	r29
    4530:	ef 93       	push	r30
    4532:	ff 93       	push	r31
}

void inline uart_receive_lcd(USART_t* port){
	uint8_t incomingByte;
	//keep receiving until data register is empty or incoming queue is full
	while (((port->STATUS & _BV(7)) == B8(10000000)) && (uart_icount(port) < MAX_IBUFFER_LEN)){
    4534:	0f 2e       	mov	r0, r31
    4536:	f0 eb       	ldi	r31, 0xB0	; 176
    4538:	8f 2e       	mov	r8, r31
    453a:	fb e0       	ldi	r31, 0x0B	; 11
    453c:	9f 2e       	mov	r9, r31
    453e:	f0 2d       	mov	r31, r0
	uart_itail[idx] = 0;
}

inline uint16_t uart_icount(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_ihead[idx] >= uart_itail[idx]){	
    4540:	0f 2e       	mov	r0, r31
    4542:	f0 e0       	ldi	r31, 0x00	; 0
    4544:	af 2e       	mov	r10, r31
    4546:	ff e3       	ldi	r31, 0x3F	; 63
    4548:	bf 2e       	mov	r11, r31
    454a:	f0 2d       	mov	r31, r0
    454c:	0f 2e       	mov	r0, r31
    454e:	f4 ef       	ldi	r31, 0xF4	; 244
    4550:	6f 2e       	mov	r6, r31
    4552:	f6 e2       	ldi	r31, 0x26	; 38
    4554:	7f 2e       	mov	r7, r31
    4556:	f0 2d       	mov	r31, r0
#ifndef UART_DEBUG
	uint8_t idx = port_map(port);
	
	//if (idx==0){uart_enqueue(&uctrl, datain);} //xxx
	
	uart_buffer[idx][uart_head[idx]] = datain;
    4558:	0e ef       	ldi	r16, 0xFE	; 254
    455a:	12 e3       	ldi	r17, 0x32	; 50
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    455c:	0f 2e       	mov	r0, r31
    455e:	f0 eb       	ldi	r31, 0xB0	; 176
    4560:	ef 2e       	mov	r14, r31
    4562:	f8 e0       	ldi	r31, 0x08	; 8
    4564:	ff 2e       	mov	r15, r31
    4566:	f0 2d       	mov	r31, r0
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    4568:	ca e0       	ldi	r28, 0x0A	; 10
    456a:	df e3       	ldi	r29, 0x3F	; 63
	uint8_t incomingByte;
	//keep receiving until data register is empty or incoming queue is full
	while (((port->STATUS & _BV(7)) == B8(10000000)) && (uart_icount(port) < MAX_IBUFFER_LEN)){
		incomingByte = port->DATA;
		uart_enqueue(&udata, incomingByte); //xxx - echo to data port
		if (incomingByte == 0x0D) {lcd_flow_control = LCD_DONE_COMMAND;}
    456c:	0f 2e       	mov	r0, r31
    456e:	ff e4       	ldi	r31, 0x4F	; 79
    4570:	cf 2e       	mov	r12, r31
    4572:	f0 2d       	mov	r31, r0
	}
}

inline void uart_ienqueue(USART_t* port, uint8_t datain){
	uint8_t idx = port_map(port);
	uart_ibuffer[idx][uart_ihead[idx]] = datain;
    4574:	0f 2e       	mov	r0, r31
    4576:	fa ef       	ldi	r31, 0xFA	; 250
    4578:	4f 2e       	mov	r4, r31
    457a:	f6 e2       	ldi	r31, 0x26	; 38
    457c:	5f 2e       	mov	r5, r31
    457e:	f0 2d       	mov	r31, r0
    4580:	8d c0       	rjmp	.+282    	; 0x469c <__vector_122+0x1ba>

void inline uart_receive_lcd(USART_t* port){
	uint8_t incomingByte;
	//keep receiving until data register is empty or incoming queue is full
	while (((port->STATUS & _BV(7)) == B8(10000000)) && (uart_icount(port) < MAX_IBUFFER_LEN)){
		incomingByte = port->DATA;
    4582:	f4 01       	movw	r30, r8
    4584:	d0 80       	ld	r13, Z
#ifndef UART_DEBUG
	uint8_t idx = port_map(port);
	
	//if (idx==0){uart_enqueue(&uctrl, datain);} //xxx
	
	uart_buffer[idx][uart_head[idx]] = datain;
    4586:	f8 01       	movw	r30, r16
    4588:	80 81       	ld	r24, Z
    458a:	91 81       	ldd	r25, Z+1	; 0x01
    458c:	80 50       	subi	r24, 0x00	; 0
    458e:	95 4c       	sbci	r25, 0xC5	; 197
    4590:	fc 01       	movw	r30, r24
    4592:	d0 82       	st	Z, r13
	uart_head[idx]++;
    4594:	f8 01       	movw	r30, r16
    4596:	80 81       	ld	r24, Z
    4598:	91 81       	ldd	r25, Z+1	; 0x01
    459a:	01 96       	adiw	r24, 0x01	; 1
    459c:	80 83       	st	Z, r24
    459e:	91 83       	std	Z+1, r25	; 0x01
	if (uart_head[idx] >= MAX_BUFFER_LEN){
    45a0:	80 81       	ld	r24, Z
    45a2:	91 81       	ldd	r25, Z+1	; 0x01
    45a4:	f4 e0       	ldi	r31, 0x04	; 4
    45a6:	80 30       	cpi	r24, 0x00	; 0
    45a8:	9f 07       	cpc	r25, r31
    45aa:	18 f0       	brcs	.+6      	; 0x45b2 <__vector_122+0xd0>
		uart_head[idx] = 0;
    45ac:	f8 01       	movw	r30, r16
    45ae:	10 82       	st	Z, r1
    45b0:	11 82       	std	Z+1, r1	; 0x01
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    45b2:	f7 01       	movw	r30, r14
    45b4:	81 81       	ldd	r24, Z+1	; 0x01
    45b6:	85 fd       	sbrc	r24, 5
    45b8:	18 c0       	rjmp	.+48     	; 0x45ea <__vector_122+0x108>
    45ba:	31 c0       	rjmp	.+98     	; 0x461e <__vector_122+0x13c>
}

inline uint8_t uart_dequeue(USART_t* port){
	uint8_t idx = port_map(port);
	uint16_t oldtail;
	oldtail = uart_tail[idx];
    45bc:	e8 81       	ld	r30, Y
    45be:	f9 81       	ldd	r31, Y+1	; 0x01
	uart_tail[idx]++;
    45c0:	88 81       	ld	r24, Y
    45c2:	99 81       	ldd	r25, Y+1	; 0x01
    45c4:	01 96       	adiw	r24, 0x01	; 1
    45c6:	88 83       	st	Y, r24
    45c8:	99 83       	std	Y+1, r25	; 0x01
	if (uart_tail[idx] >= MAX_BUFFER_LEN){
    45ca:	88 81       	ld	r24, Y
    45cc:	99 81       	ldd	r25, Y+1	; 0x01
    45ce:	24 e0       	ldi	r18, 0x04	; 4
    45d0:	80 30       	cpi	r24, 0x00	; 0
    45d2:	92 07       	cpc	r25, r18
    45d4:	10 f0       	brcs	.+4      	; 0x45da <__vector_122+0xf8>
		uart_tail[idx] = 0;
    45d6:	18 82       	st	Y, r1
    45d8:	19 82       	std	Y+1, r1	; 0x01
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    45da:	e0 50       	subi	r30, 0x00	; 0
    45dc:	f5 4c       	sbci	r31, 0xC5	; 197
    45de:	80 81       	ld	r24, Z
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
    45e0:	f7 01       	movw	r30, r14
    45e2:	80 83       	st	Z, r24
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    45e4:	81 81       	ldd	r24, Z+1	; 0x01
    45e6:	85 ff       	sbrs	r24, 5
    45e8:	1a c0       	rjmp	.+52     	; 0x461e <__vector_122+0x13c>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    45ea:	f8 01       	movw	r30, r16
    45ec:	80 81       	ld	r24, Z
    45ee:	91 81       	ldd	r25, Z+1	; 0x01
    45f0:	28 81       	ld	r18, Y
    45f2:	39 81       	ldd	r19, Y+1	; 0x01
    45f4:	82 17       	cp	r24, r18
    45f6:	93 07       	cpc	r25, r19
    45f8:	38 f0       	brcs	.+14     	; 0x4608 <__vector_122+0x126>
		return (uart_head[idx] - uart_tail[idx]);
    45fa:	80 81       	ld	r24, Z
    45fc:	91 81       	ldd	r25, Z+1	; 0x01
    45fe:	28 81       	ld	r18, Y
    4600:	39 81       	ldd	r19, Y+1	; 0x01
    4602:	82 1b       	sub	r24, r18
    4604:	93 0b       	sbc	r25, r19
    4606:	09 c0       	rjmp	.+18     	; 0x461a <__vector_122+0x138>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    4608:	f8 01       	movw	r30, r16
    460a:	80 81       	ld	r24, Z
    460c:	91 81       	ldd	r25, Z+1	; 0x01
    460e:	28 81       	ld	r18, Y
    4610:	39 81       	ldd	r19, Y+1	; 0x01
    4612:	80 50       	subi	r24, 0x00	; 0
    4614:	9c 4f       	sbci	r25, 0xFC	; 252
    4616:	82 1b       	sub	r24, r18
    4618:	93 0b       	sbc	r25, r19
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    461a:	00 97       	sbiw	r24, 0x00	; 0
    461c:	79 f6       	brne	.-98     	; 0x45bc <__vector_122+0xda>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    461e:	f8 01       	movw	r30, r16
    4620:	80 81       	ld	r24, Z
    4622:	91 81       	ldd	r25, Z+1	; 0x01
    4624:	28 81       	ld	r18, Y
    4626:	39 81       	ldd	r19, Y+1	; 0x01
    4628:	82 17       	cp	r24, r18
    462a:	93 07       	cpc	r25, r19
    462c:	38 f0       	brcs	.+14     	; 0x463c <__vector_122+0x15a>
		return (uart_head[idx] - uart_tail[idx]);
    462e:	80 81       	ld	r24, Z
    4630:	91 81       	ldd	r25, Z+1	; 0x01
    4632:	28 81       	ld	r18, Y
    4634:	39 81       	ldd	r19, Y+1	; 0x01
    4636:	82 1b       	sub	r24, r18
    4638:	93 0b       	sbc	r25, r19
    463a:	09 c0       	rjmp	.+18     	; 0x464e <__vector_122+0x16c>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    463c:	f8 01       	movw	r30, r16
    463e:	80 81       	ld	r24, Z
    4640:	91 81       	ldd	r25, Z+1	; 0x01
    4642:	28 81       	ld	r18, Y
    4644:	39 81       	ldd	r19, Y+1	; 0x01
    4646:	80 50       	subi	r24, 0x00	; 0
    4648:	9c 4f       	sbci	r25, 0xFC	; 252
    464a:	82 1b       	sub	r24, r18
    464c:	93 0b       	sbc	r25, r19
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
	}
	//disable the tx outgoing hardware buffer ready interrupt if we have nothing more to put in it.
	if(uart_count(port)>0) uart_txbuffer_enable(port);
    464e:	00 97       	sbiw	r24, 0x00	; 0
    4650:	21 f0       	breq	.+8      	; 0x465a <__vector_122+0x178>
    4652:	c7 01       	movw	r24, r14
    4654:	0e 94 55 1c 	call	0x38aa	; 0x38aa <uart_txbuffer_enable>
    4658:	03 c0       	rjmp	.+6      	; 0x4660 <__vector_122+0x17e>
	else uart_txbuffer_disable(port);
    465a:	c7 01       	movw	r24, r14
    465c:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <uart_txbuffer_disable>
	uint8_t incomingByte;
	//keep receiving until data register is empty or incoming queue is full
	while (((port->STATUS & _BV(7)) == B8(10000000)) && (uart_icount(port) < MAX_IBUFFER_LEN)){
		incomingByte = port->DATA;
		uart_enqueue(&udata, incomingByte); //xxx - echo to data port
		if (incomingByte == 0x0D) {lcd_flow_control = LCD_DONE_COMMAND;}
    4660:	fd e0       	ldi	r31, 0x0D	; 13
    4662:	df 16       	cp	r13, r31
    4664:	11 f4       	brne	.+4      	; 0x466a <__vector_122+0x188>
    4666:	c0 92 e2 26 	sts	0x26E2, r12
		lcd_set_touch(incomingByte); //write to touch-command listener
    466a:	8d 2d       	mov	r24, r13
    466c:	0e 94 9b 10 	call	0x2136	; 0x2136 <lcd_set_touch>
	}
}

inline void uart_ienqueue(USART_t* port, uint8_t datain){
	uint8_t idx = port_map(port);
	uart_ibuffer[idx][uart_ihead[idx]] = datain;
    4670:	f5 01       	movw	r30, r10
    4672:	80 81       	ld	r24, Z
    4674:	91 81       	ldd	r25, Z+1	; 0x01
    4676:	84 0d       	add	r24, r4
    4678:	95 1d       	adc	r25, r5
    467a:	fc 01       	movw	r30, r24
    467c:	d0 82       	st	Z, r13
	uart_ihead[idx]++;
    467e:	f5 01       	movw	r30, r10
    4680:	80 81       	ld	r24, Z
    4682:	91 81       	ldd	r25, Z+1	; 0x01
    4684:	01 96       	adiw	r24, 0x01	; 1
    4686:	80 83       	st	Z, r24
    4688:	91 83       	std	Z+1, r25	; 0x01
	if (uart_ihead[idx] >= MAX_IBUFFER_LEN){
    468a:	80 81       	ld	r24, Z
    468c:	91 81       	ldd	r25, Z+1	; 0x01
    468e:	f4 e0       	ldi	r31, 0x04	; 4
    4690:	80 30       	cpi	r24, 0x00	; 0
    4692:	9f 07       	cpc	r25, r31
    4694:	18 f0       	brcs	.+6      	; 0x469c <__vector_122+0x1ba>
		uart_ihead[idx] = 0;
    4696:	f5 01       	movw	r30, r10
    4698:	10 82       	st	Z, r1
    469a:	11 82       	std	Z+1, r1	; 0x01
}

void inline uart_receive_lcd(USART_t* port){
	uint8_t incomingByte;
	//keep receiving until data register is empty or incoming queue is full
	while (((port->STATUS & _BV(7)) == B8(10000000)) && (uart_icount(port) < MAX_IBUFFER_LEN)){
    469c:	f4 01       	movw	r30, r8
    469e:	81 81       	ldd	r24, Z+1	; 0x01
    46a0:	88 23       	and	r24, r24
    46a2:	0c f5       	brge	.+66     	; 0x46e6 <__vector_122+0x204>
	uart_itail[idx] = 0;
}

inline uint16_t uart_icount(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_ihead[idx] >= uart_itail[idx]){	
    46a4:	f5 01       	movw	r30, r10
    46a6:	80 81       	ld	r24, Z
    46a8:	91 81       	ldd	r25, Z+1	; 0x01
    46aa:	f3 01       	movw	r30, r6
    46ac:	20 81       	ld	r18, Z
    46ae:	31 81       	ldd	r19, Z+1	; 0x01
    46b0:	82 17       	cp	r24, r18
    46b2:	93 07       	cpc	r25, r19
    46b4:	48 f0       	brcs	.+18     	; 0x46c8 <__vector_122+0x1e6>
		return (uart_ihead[idx] - uart_itail[idx]);
    46b6:	f5 01       	movw	r30, r10
    46b8:	80 81       	ld	r24, Z
    46ba:	91 81       	ldd	r25, Z+1	; 0x01
    46bc:	f3 01       	movw	r30, r6
    46be:	20 81       	ld	r18, Z
    46c0:	31 81       	ldd	r19, Z+1	; 0x01
    46c2:	82 1b       	sub	r24, r18
    46c4:	93 0b       	sbc	r25, r19
    46c6:	0a c0       	rjmp	.+20     	; 0x46dc <__vector_122+0x1fa>
	}
	else {
		return ((MAX_IBUFFER_LEN-uart_itail[idx])+uart_ihead[idx]);
    46c8:	f5 01       	movw	r30, r10
    46ca:	80 81       	ld	r24, Z
    46cc:	91 81       	ldd	r25, Z+1	; 0x01
    46ce:	f3 01       	movw	r30, r6
    46d0:	20 81       	ld	r18, Z
    46d2:	31 81       	ldd	r19, Z+1	; 0x01
    46d4:	80 50       	subi	r24, 0x00	; 0
    46d6:	9c 4f       	sbci	r25, 0xFC	; 252
    46d8:	82 1b       	sub	r24, r18
    46da:	93 0b       	sbc	r25, r19
}

void inline uart_receive_lcd(USART_t* port){
	uint8_t incomingByte;
	//keep receiving until data register is empty or incoming queue is full
	while (((port->STATUS & _BV(7)) == B8(10000000)) && (uart_icount(port) < MAX_IBUFFER_LEN)){
    46dc:	f4 e0       	ldi	r31, 0x04	; 4
    46de:	80 30       	cpi	r24, 0x00	; 0
    46e0:	9f 07       	cpc	r25, r31
    46e2:	08 f4       	brcc	.+2      	; 0x46e6 <__vector_122+0x204>
    46e4:	4e cf       	rjmp	.-356    	; 0x4582 <__vector_122+0xa0>
ISR(USARTC0_DRE_vect) {uart_transmit(&uctrl);}//TX Interrupt
ISR(USARTC0_RXC_vect) {uart_receive(&uctrl);} //RX Interrupt
ISR(USARTC1_DRE_vect) {uart_transmit(&udata);}//TX Interrupt
ISR(USARTC1_RXC_vect) {uart_receive(&udata);} //RX Interrupt
ISR(USARTF1_DRE_vect) {uart_transmit_lcd(&ulcd);}//TX Interrupt
ISR(USARTF1_RXC_vect) {uart_receive_lcd(&ulcd);} //RX Interrupt
    46e6:	ff 91       	pop	r31
    46e8:	ef 91       	pop	r30
    46ea:	df 91       	pop	r29
    46ec:	cf 91       	pop	r28
    46ee:	bf 91       	pop	r27
    46f0:	af 91       	pop	r26
    46f2:	9f 91       	pop	r25
    46f4:	8f 91       	pop	r24
    46f6:	7f 91       	pop	r23
    46f8:	6f 91       	pop	r22
    46fa:	5f 91       	pop	r21
    46fc:	4f 91       	pop	r20
    46fe:	3f 91       	pop	r19
    4700:	2f 91       	pop	r18
    4702:	1f 91       	pop	r17
    4704:	0f 91       	pop	r16
    4706:	ff 90       	pop	r15
    4708:	ef 90       	pop	r14
    470a:	df 90       	pop	r13
    470c:	cf 90       	pop	r12
    470e:	bf 90       	pop	r11
    4710:	af 90       	pop	r10
    4712:	9f 90       	pop	r9
    4714:	8f 90       	pop	r8
    4716:	7f 90       	pop	r7
    4718:	6f 90       	pop	r6
    471a:	5f 90       	pop	r5
    471c:	4f 90       	pop	r4
    471e:	0f 90       	pop	r0
    4720:	0b be       	out	0x3b, r0	; 59
    4722:	0f 90       	pop	r0
    4724:	0a be       	out	0x3a, r0	; 58
    4726:	0f 90       	pop	r0
    4728:	09 be       	out	0x39, r0	; 57
    472a:	0f 90       	pop	r0
    472c:	08 be       	out	0x38, r0	; 56
    472e:	0f 90       	pop	r0
    4730:	0f be       	out	0x3f, r0	; 63
    4732:	0f 90       	pop	r0
    4734:	1f 90       	pop	r1
    4736:	18 95       	reti

00004738 <uart_receive>:

//==================================
//= RECEPTION ENGINE (ISR BASED)
//==================================

void inline uart_receive(USART_t* port){
    4738:	cf 92       	push	r12
    473a:	df 92       	push	r13
    473c:	ef 92       	push	r14
    473e:	ff 92       	push	r15
    4740:	0f 93       	push	r16
    4742:	1f 93       	push	r17
    4744:	cf 93       	push	r28
    4746:	df 93       	push	r29
    4748:	dc 01       	movw	r26, r24
	uart_itail[idx] = 0;
}

inline uint16_t uart_icount(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_ihead[idx] >= uart_itail[idx]){	
    474a:	0f 2e       	mov	r0, r31
    474c:	f0 e0       	ldi	r31, 0x00	; 0
    474e:	cf 2e       	mov	r12, r31
    4750:	ff e3       	ldi	r31, 0x3F	; 63
    4752:	df 2e       	mov	r13, r31
    4754:	f0 2d       	mov	r31, r0
    4756:	04 ef       	ldi	r16, 0xF4	; 244
    4758:	16 e2       	ldi	r17, 0x26	; 38
	}
}

inline void uart_ienqueue(USART_t* port, uint8_t datain){
	uint8_t idx = port_map(port);
	uart_ibuffer[idx][uart_ihead[idx]] = datain;
    475a:	0f 2e       	mov	r0, r31
    475c:	fa ef       	ldi	r31, 0xFA	; 250
    475e:	ef 2e       	mov	r14, r31
    4760:	f6 e2       	ldi	r31, 0x26	; 38
    4762:	ff 2e       	mov	r15, r31
    4764:	f0 2d       	mov	r31, r0
//= RECEPTION ENGINE (ISR BASED)
//==================================

void inline uart_receive(USART_t* port){
	//keep receiving until data register is empty or incoming queue is full
	while (((port->STATUS & _BV(7)) == B8(10000000)) && (uart_icount(port) < MAX_IBUFFER_LEN)){		
    4766:	3a c0       	rjmp	.+116    	; 0x47dc <uart_receive+0xa4>
		uart_ienqueue(port, port->DATA);
    4768:	4c 91       	ld	r20, X
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    476a:	2b e0       	ldi	r18, 0x0B	; 11
    476c:	a0 3b       	cpi	r26, 0xB0	; 176
    476e:	b2 07       	cpc	r27, r18
    4770:	51 f0       	breq	.+20     	; 0x4786 <uart_receive+0x4e>
	if (port == &uctrl) {return 1;}
    4772:	38 e0       	ldi	r19, 0x08	; 8
    4774:	a0 3a       	cpi	r26, 0xA0	; 160
    4776:	b3 07       	cpc	r27, r19
    4778:	41 f0       	breq	.+16     	; 0x478a <uart_receive+0x52>
	if (port == &udata) {return 2;}
    477a:	88 e0       	ldi	r24, 0x08	; 8
    477c:	a0 3b       	cpi	r26, 0xB0	; 176
    477e:	b8 07       	cpc	r27, r24
    4780:	31 f4       	brne	.+12     	; 0x478e <uart_receive+0x56>
    4782:	62 e0       	ldi	r22, 0x02	; 2
    4784:	05 c0       	rjmp	.+10     	; 0x4790 <uart_receive+0x58>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    4786:	60 e0       	ldi	r22, 0x00	; 0
    4788:	03 c0       	rjmp	.+6      	; 0x4790 <uart_receive+0x58>
	if (port == &uctrl) {return 1;}
    478a:	61 e0       	ldi	r22, 0x01	; 1
    478c:	01 c0       	rjmp	.+2      	; 0x4790 <uart_receive+0x58>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    478e:	60 e0       	ldi	r22, 0x00	; 0
	}
}

inline void uart_ienqueue(USART_t* port, uint8_t datain){
	uint8_t idx = port_map(port);
	uart_ibuffer[idx][uart_ihead[idx]] = datain;
    4790:	70 e0       	ldi	r23, 0x00	; 0
    4792:	cb 01       	movw	r24, r22
    4794:	88 0f       	add	r24, r24
    4796:	99 1f       	adc	r25, r25
    4798:	f6 01       	movw	r30, r12
    479a:	e8 0f       	add	r30, r24
    479c:	f9 1f       	adc	r31, r25
    479e:	20 81       	ld	r18, Z
    47a0:	31 81       	ldd	r19, Z+1	; 0x01
    47a2:	cb 01       	movw	r24, r22
    47a4:	98 2f       	mov	r25, r24
    47a6:	88 27       	eor	r24, r24
    47a8:	99 0f       	add	r25, r25
    47aa:	99 0f       	add	r25, r25
    47ac:	82 0f       	add	r24, r18
    47ae:	93 1f       	adc	r25, r19
    47b0:	8e 0d       	add	r24, r14
    47b2:	9f 1d       	adc	r25, r15
    47b4:	ec 01       	movw	r28, r24
    47b6:	48 83       	st	Y, r20
	uart_ihead[idx]++;
    47b8:	80 81       	ld	r24, Z
    47ba:	91 81       	ldd	r25, Z+1	; 0x01
    47bc:	01 96       	adiw	r24, 0x01	; 1
    47be:	80 83       	st	Z, r24
    47c0:	91 83       	std	Z+1, r25	; 0x01
	if (uart_ihead[idx] >= MAX_IBUFFER_LEN){
    47c2:	80 81       	ld	r24, Z
    47c4:	91 81       	ldd	r25, Z+1	; 0x01
    47c6:	d4 e0       	ldi	r29, 0x04	; 4
    47c8:	80 30       	cpi	r24, 0x00	; 0
    47ca:	9d 07       	cpc	r25, r29
    47cc:	38 f0       	brcs	.+14     	; 0x47dc <uart_receive+0xa4>
		uart_ihead[idx] = 0;
    47ce:	fb 01       	movw	r30, r22
    47d0:	ee 0f       	add	r30, r30
    47d2:	ff 1f       	adc	r31, r31
    47d4:	ec 0d       	add	r30, r12
    47d6:	fd 1d       	adc	r31, r13
    47d8:	10 82       	st	Z, r1
    47da:	11 82       	std	Z+1, r1	; 0x01
//= RECEPTION ENGINE (ISR BASED)
//==================================

void inline uart_receive(USART_t* port){
	//keep receiving until data register is empty or incoming queue is full
	while (((port->STATUS & _BV(7)) == B8(10000000)) && (uart_icount(port) < MAX_IBUFFER_LEN)){		
    47dc:	11 96       	adiw	r26, 0x01	; 1
    47de:	8c 91       	ld	r24, X
    47e0:	11 97       	sbiw	r26, 0x01	; 1
    47e2:	88 23       	and	r24, r24
    47e4:	0c f0       	brlt	.+2      	; 0x47e8 <uart_receive+0xb0>
    47e6:	4c c0       	rjmp	.+152    	; 0x4880 <uart_receive+0x148>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    47e8:	2b e0       	ldi	r18, 0x0B	; 11
    47ea:	a0 3b       	cpi	r26, 0xB0	; 176
    47ec:	b2 07       	cpc	r27, r18
    47ee:	51 f0       	breq	.+20     	; 0x4804 <uart_receive+0xcc>
	if (port == &uctrl) {return 1;}
    47f0:	38 e0       	ldi	r19, 0x08	; 8
    47f2:	a0 3a       	cpi	r26, 0xA0	; 160
    47f4:	b3 07       	cpc	r27, r19
    47f6:	41 f0       	breq	.+16     	; 0x4808 <uart_receive+0xd0>
	if (port == &udata) {return 2;}
    47f8:	88 e0       	ldi	r24, 0x08	; 8
    47fa:	a0 3b       	cpi	r26, 0xB0	; 176
    47fc:	b8 07       	cpc	r27, r24
    47fe:	31 f4       	brne	.+12     	; 0x480c <uart_receive+0xd4>
    4800:	22 e0       	ldi	r18, 0x02	; 2
    4802:	05 c0       	rjmp	.+10     	; 0x480e <uart_receive+0xd6>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    4804:	20 e0       	ldi	r18, 0x00	; 0
    4806:	03 c0       	rjmp	.+6      	; 0x480e <uart_receive+0xd6>
	if (port == &uctrl) {return 1;}
    4808:	21 e0       	ldi	r18, 0x01	; 1
    480a:	01 c0       	rjmp	.+2      	; 0x480e <uart_receive+0xd6>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    480c:	20 e0       	ldi	r18, 0x00	; 0
	uart_itail[idx] = 0;
}

inline uint16_t uart_icount(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_ihead[idx] >= uart_itail[idx]){	
    480e:	30 e0       	ldi	r19, 0x00	; 0
    4810:	c9 01       	movw	r24, r18
    4812:	88 0f       	add	r24, r24
    4814:	99 1f       	adc	r25, r25
    4816:	f6 01       	movw	r30, r12
    4818:	e8 0f       	add	r30, r24
    481a:	f9 1f       	adc	r31, r25
    481c:	40 81       	ld	r20, Z
    481e:	51 81       	ldd	r21, Z+1	; 0x01
    4820:	f8 01       	movw	r30, r16
    4822:	e8 0f       	add	r30, r24
    4824:	f9 1f       	adc	r31, r25
    4826:	80 81       	ld	r24, Z
    4828:	91 81       	ldd	r25, Z+1	; 0x01
    482a:	48 17       	cp	r20, r24
    482c:	59 07       	cpc	r21, r25
    482e:	88 f0       	brcs	.+34     	; 0x4852 <uart_receive+0x11a>
		return (uart_ihead[idx] - uart_itail[idx]);
    4830:	22 0f       	add	r18, r18
    4832:	33 1f       	adc	r19, r19
    4834:	f6 01       	movw	r30, r12
    4836:	e2 0f       	add	r30, r18
    4838:	f3 1f       	adc	r31, r19
    483a:	40 81       	ld	r20, Z
    483c:	51 81       	ldd	r21, Z+1	; 0x01
    483e:	f8 01       	movw	r30, r16
    4840:	e2 0f       	add	r30, r18
    4842:	f3 1f       	adc	r31, r19
    4844:	80 81       	ld	r24, Z
    4846:	91 81       	ldd	r25, Z+1	; 0x01
    4848:	ea 01       	movw	r28, r20
    484a:	c8 1b       	sub	r28, r24
    484c:	d9 0b       	sbc	r29, r25
    484e:	ce 01       	movw	r24, r28
    4850:	12 c0       	rjmp	.+36     	; 0x4876 <uart_receive+0x13e>
	}
	else {
		return ((MAX_IBUFFER_LEN-uart_itail[idx])+uart_ihead[idx]);
    4852:	c9 01       	movw	r24, r18
    4854:	88 0f       	add	r24, r24
    4856:	99 1f       	adc	r25, r25
    4858:	f6 01       	movw	r30, r12
    485a:	e8 0f       	add	r30, r24
    485c:	f9 1f       	adc	r31, r25
    485e:	40 81       	ld	r20, Z
    4860:	51 81       	ldd	r21, Z+1	; 0x01
    4862:	f8 01       	movw	r30, r16
    4864:	e8 0f       	add	r30, r24
    4866:	f9 1f       	adc	r31, r25
    4868:	20 81       	ld	r18, Z
    486a:	31 81       	ldd	r19, Z+1	; 0x01
    486c:	ca 01       	movw	r24, r20
    486e:	80 50       	subi	r24, 0x00	; 0
    4870:	9c 4f       	sbci	r25, 0xFC	; 252
    4872:	82 1b       	sub	r24, r18
    4874:	93 0b       	sbc	r25, r19
//= RECEPTION ENGINE (ISR BASED)
//==================================

void inline uart_receive(USART_t* port){
	//keep receiving until data register is empty or incoming queue is full
	while (((port->STATUS & _BV(7)) == B8(10000000)) && (uart_icount(port) < MAX_IBUFFER_LEN)){		
    4876:	d4 e0       	ldi	r29, 0x04	; 4
    4878:	80 30       	cpi	r24, 0x00	; 0
    487a:	9d 07       	cpc	r25, r29
    487c:	08 f4       	brcc	.+2      	; 0x4880 <uart_receive+0x148>
    487e:	74 cf       	rjmp	.-280    	; 0x4768 <uart_receive+0x30>
		uart_ienqueue(port, port->DATA);
	}	
}
    4880:	df 91       	pop	r29
    4882:	cf 91       	pop	r28
    4884:	1f 91       	pop	r17
    4886:	0f 91       	pop	r16
    4888:	ff 90       	pop	r15
    488a:	ef 90       	pop	r14
    488c:	df 90       	pop	r13
    488e:	cf 90       	pop	r12
    4890:	08 95       	ret

00004892 <uart_receive_lcd>:

void inline uart_receive_lcd(USART_t* port){
    4892:	4f 92       	push	r4
    4894:	5f 92       	push	r5
    4896:	6f 92       	push	r6
    4898:	7f 92       	push	r7
    489a:	8f 92       	push	r8
    489c:	9f 92       	push	r9
    489e:	af 92       	push	r10
    48a0:	bf 92       	push	r11
    48a2:	cf 92       	push	r12
    48a4:	df 92       	push	r13
    48a6:	ef 92       	push	r14
    48a8:	ff 92       	push	r15
    48aa:	0f 93       	push	r16
    48ac:	1f 93       	push	r17
    48ae:	cf 93       	push	r28
    48b0:	df 93       	push	r29
    48b2:	5c 01       	movw	r10, r24
	uart_itail[idx] = 0;
}

inline uint16_t uart_icount(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_ihead[idx] >= uart_itail[idx]){	
    48b4:	0f 2e       	mov	r0, r31
    48b6:	f0 e0       	ldi	r31, 0x00	; 0
    48b8:	8f 2e       	mov	r8, r31
    48ba:	ff e3       	ldi	r31, 0x3F	; 63
    48bc:	9f 2e       	mov	r9, r31
    48be:	f0 2d       	mov	r31, r0
    48c0:	0f 2e       	mov	r0, r31
    48c2:	f4 ef       	ldi	r31, 0xF4	; 244
    48c4:	6f 2e       	mov	r6, r31
    48c6:	f6 e2       	ldi	r31, 0x26	; 38
    48c8:	7f 2e       	mov	r7, r31
    48ca:	f0 2d       	mov	r31, r0
#ifndef UART_DEBUG
	uint8_t idx = port_map(port);
	
	//if (idx==0){uart_enqueue(&uctrl, datain);} //xxx
	
	uart_buffer[idx][uart_head[idx]] = datain;
    48cc:	0e ef       	ldi	r16, 0xFE	; 254
    48ce:	12 e3       	ldi	r17, 0x32	; 50
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    48d0:	0f 2e       	mov	r0, r31
    48d2:	f0 eb       	ldi	r31, 0xB0	; 176
    48d4:	ef 2e       	mov	r14, r31
    48d6:	f8 e0       	ldi	r31, 0x08	; 8
    48d8:	ff 2e       	mov	r15, r31
    48da:	f0 2d       	mov	r31, r0
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    48dc:	ca e0       	ldi	r28, 0x0A	; 10
    48de:	df e3       	ldi	r29, 0x3F	; 63
	uint8_t incomingByte;
	//keep receiving until data register is empty or incoming queue is full
	while (((port->STATUS & _BV(7)) == B8(10000000)) && (uart_icount(port) < MAX_IBUFFER_LEN)){
		incomingByte = port->DATA;
		uart_enqueue(&udata, incomingByte); //xxx - echo to data port
		if (incomingByte == 0x0D) {lcd_flow_control = LCD_DONE_COMMAND;}
    48e0:	0f 2e       	mov	r0, r31
    48e2:	ff e4       	ldi	r31, 0x4F	; 79
    48e4:	cf 2e       	mov	r12, r31
    48e6:	f0 2d       	mov	r31, r0
	}
}

inline void uart_ienqueue(USART_t* port, uint8_t datain){
	uint8_t idx = port_map(port);
	uart_ibuffer[idx][uart_ihead[idx]] = datain;
    48e8:	0f 2e       	mov	r0, r31
    48ea:	fa ef       	ldi	r31, 0xFA	; 250
    48ec:	4f 2e       	mov	r4, r31
    48ee:	f6 e2       	ldi	r31, 0x26	; 38
    48f0:	5f 2e       	mov	r5, r31
    48f2:	f0 2d       	mov	r31, r0
}

void inline uart_receive_lcd(USART_t* port){
	uint8_t incomingByte;
	//keep receiving until data register is empty or incoming queue is full
	while (((port->STATUS & _BV(7)) == B8(10000000)) && (uart_icount(port) < MAX_IBUFFER_LEN)){
    48f4:	ac c0       	rjmp	.+344    	; 0x4a4e <uart_receive_lcd+0x1bc>
		incomingByte = port->DATA;
    48f6:	d5 01       	movw	r26, r10
    48f8:	dc 90       	ld	r13, X
#ifndef UART_DEBUG
	uint8_t idx = port_map(port);
	
	//if (idx==0){uart_enqueue(&uctrl, datain);} //xxx
	
	uart_buffer[idx][uart_head[idx]] = datain;
    48fa:	f8 01       	movw	r30, r16
    48fc:	80 81       	ld	r24, Z
    48fe:	91 81       	ldd	r25, Z+1	; 0x01
    4900:	80 50       	subi	r24, 0x00	; 0
    4902:	95 4c       	sbci	r25, 0xC5	; 197
    4904:	dc 01       	movw	r26, r24
    4906:	dc 92       	st	X, r13
	uart_head[idx]++;
    4908:	80 81       	ld	r24, Z
    490a:	91 81       	ldd	r25, Z+1	; 0x01
    490c:	01 96       	adiw	r24, 0x01	; 1
    490e:	80 83       	st	Z, r24
    4910:	91 83       	std	Z+1, r25	; 0x01
	if (uart_head[idx] >= MAX_BUFFER_LEN){
    4912:	80 81       	ld	r24, Z
    4914:	91 81       	ldd	r25, Z+1	; 0x01
    4916:	b4 e0       	ldi	r27, 0x04	; 4
    4918:	80 30       	cpi	r24, 0x00	; 0
    491a:	9b 07       	cpc	r25, r27
    491c:	10 f0       	brcs	.+4      	; 0x4922 <uart_receive_lcd+0x90>
		uart_head[idx] = 0;
    491e:	10 82       	st	Z, r1
    4920:	11 82       	std	Z+1, r1	; 0x01
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    4922:	f7 01       	movw	r30, r14
    4924:	81 81       	ldd	r24, Z+1	; 0x01
    4926:	85 fd       	sbrc	r24, 5
    4928:	1a c0       	rjmp	.+52     	; 0x495e <uart_receive_lcd+0xcc>
    492a:	32 c0       	rjmp	.+100    	; 0x4990 <uart_receive_lcd+0xfe>
}

inline uint8_t uart_dequeue(USART_t* port){
	uint8_t idx = port_map(port);
	uint16_t oldtail;
	oldtail = uart_tail[idx];
    492c:	e8 81       	ld	r30, Y
    492e:	f9 81       	ldd	r31, Y+1	; 0x01
	uart_tail[idx]++;
    4930:	88 81       	ld	r24, Y
    4932:	99 81       	ldd	r25, Y+1	; 0x01
    4934:	01 96       	adiw	r24, 0x01	; 1
    4936:	88 83       	st	Y, r24
    4938:	99 83       	std	Y+1, r25	; 0x01
	if (uart_tail[idx] >= MAX_BUFFER_LEN){
    493a:	88 81       	ld	r24, Y
    493c:	99 81       	ldd	r25, Y+1	; 0x01
    493e:	24 e0       	ldi	r18, 0x04	; 4
    4940:	80 30       	cpi	r24, 0x00	; 0
    4942:	92 07       	cpc	r25, r18
    4944:	10 f0       	brcs	.+4      	; 0x494a <uart_receive_lcd+0xb8>
		uart_tail[idx] = 0;
    4946:	18 82       	st	Y, r1
    4948:	19 82       	std	Y+1, r1	; 0x01
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    494a:	e0 50       	subi	r30, 0x00	; 0
    494c:	f5 4c       	sbci	r31, 0xC5	; 197
    494e:	80 81       	ld	r24, Z
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
    4950:	d7 01       	movw	r26, r14
    4952:	8c 93       	st	X, r24
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    4954:	11 96       	adiw	r26, 0x01	; 1
    4956:	8c 91       	ld	r24, X
    4958:	11 97       	sbiw	r26, 0x01	; 1
    495a:	85 ff       	sbrs	r24, 5
    495c:	19 c0       	rjmp	.+50     	; 0x4990 <uart_receive_lcd+0xfe>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    495e:	f8 01       	movw	r30, r16
    4960:	80 81       	ld	r24, Z
    4962:	91 81       	ldd	r25, Z+1	; 0x01
    4964:	28 81       	ld	r18, Y
    4966:	39 81       	ldd	r19, Y+1	; 0x01
    4968:	82 17       	cp	r24, r18
    496a:	93 07       	cpc	r25, r19
    496c:	38 f0       	brcs	.+14     	; 0x497c <uart_receive_lcd+0xea>
		return (uart_head[idx] - uart_tail[idx]);
    496e:	80 81       	ld	r24, Z
    4970:	91 81       	ldd	r25, Z+1	; 0x01
    4972:	28 81       	ld	r18, Y
    4974:	39 81       	ldd	r19, Y+1	; 0x01
    4976:	82 1b       	sub	r24, r18
    4978:	93 0b       	sbc	r25, r19
    497a:	08 c0       	rjmp	.+16     	; 0x498c <uart_receive_lcd+0xfa>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    497c:	80 81       	ld	r24, Z
    497e:	91 81       	ldd	r25, Z+1	; 0x01
    4980:	28 81       	ld	r18, Y
    4982:	39 81       	ldd	r19, Y+1	; 0x01
    4984:	80 50       	subi	r24, 0x00	; 0
    4986:	9c 4f       	sbci	r25, 0xFC	; 252
    4988:	82 1b       	sub	r24, r18
    498a:	93 0b       	sbc	r25, r19
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    498c:	00 97       	sbiw	r24, 0x00	; 0
    498e:	71 f6       	brne	.-100    	; 0x492c <uart_receive_lcd+0x9a>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    4990:	f8 01       	movw	r30, r16
    4992:	80 81       	ld	r24, Z
    4994:	91 81       	ldd	r25, Z+1	; 0x01
    4996:	28 81       	ld	r18, Y
    4998:	39 81       	ldd	r19, Y+1	; 0x01
    499a:	82 17       	cp	r24, r18
    499c:	93 07       	cpc	r25, r19
    499e:	38 f0       	brcs	.+14     	; 0x49ae <uart_receive_lcd+0x11c>
		return (uart_head[idx] - uart_tail[idx]);
    49a0:	80 81       	ld	r24, Z
    49a2:	91 81       	ldd	r25, Z+1	; 0x01
    49a4:	28 81       	ld	r18, Y
    49a6:	39 81       	ldd	r19, Y+1	; 0x01
    49a8:	82 1b       	sub	r24, r18
    49aa:	93 0b       	sbc	r25, r19
    49ac:	08 c0       	rjmp	.+16     	; 0x49be <uart_receive_lcd+0x12c>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    49ae:	80 81       	ld	r24, Z
    49b0:	91 81       	ldd	r25, Z+1	; 0x01
    49b2:	28 81       	ld	r18, Y
    49b4:	39 81       	ldd	r19, Y+1	; 0x01
    49b6:	80 50       	subi	r24, 0x00	; 0
    49b8:	9c 4f       	sbci	r25, 0xFC	; 252
    49ba:	82 1b       	sub	r24, r18
    49bc:	93 0b       	sbc	r25, r19
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
	}
	//disable the tx outgoing hardware buffer ready interrupt if we have nothing more to put in it.
	if(uart_count(port)>0) uart_txbuffer_enable(port);
    49be:	00 97       	sbiw	r24, 0x00	; 0
    49c0:	21 f0       	breq	.+8      	; 0x49ca <uart_receive_lcd+0x138>
    49c2:	c7 01       	movw	r24, r14
    49c4:	0e 94 55 1c 	call	0x38aa	; 0x38aa <uart_txbuffer_enable>
    49c8:	03 c0       	rjmp	.+6      	; 0x49d0 <uart_receive_lcd+0x13e>
	else uart_txbuffer_disable(port);
    49ca:	c7 01       	movw	r24, r14
    49cc:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <uart_txbuffer_disable>
	uint8_t incomingByte;
	//keep receiving until data register is empty or incoming queue is full
	while (((port->STATUS & _BV(7)) == B8(10000000)) && (uart_icount(port) < MAX_IBUFFER_LEN)){
		incomingByte = port->DATA;
		uart_enqueue(&udata, incomingByte); //xxx - echo to data port
		if (incomingByte == 0x0D) {lcd_flow_control = LCD_DONE_COMMAND;}
    49d0:	bd e0       	ldi	r27, 0x0D	; 13
    49d2:	db 16       	cp	r13, r27
    49d4:	11 f4       	brne	.+4      	; 0x49da <uart_receive_lcd+0x148>
    49d6:	c0 92 e2 26 	sts	0x26E2, r12
		lcd_set_touch(incomingByte); //write to touch-command listener
    49da:	8d 2d       	mov	r24, r13
    49dc:	0e 94 9b 10 	call	0x2136	; 0x2136 <lcd_set_touch>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    49e0:	e0 eb       	ldi	r30, 0xB0	; 176
    49e2:	ae 16       	cp	r10, r30
    49e4:	eb e0       	ldi	r30, 0x0B	; 11
    49e6:	be 06       	cpc	r11, r30
    49e8:	61 f0       	breq	.+24     	; 0x4a02 <uart_receive_lcd+0x170>
	if (port == &uctrl) {return 1;}
    49ea:	f0 ea       	ldi	r31, 0xA0	; 160
    49ec:	af 16       	cp	r10, r31
    49ee:	f8 e0       	ldi	r31, 0x08	; 8
    49f0:	bf 06       	cpc	r11, r31
    49f2:	49 f0       	breq	.+18     	; 0x4a06 <uart_receive_lcd+0x174>
	if (port == &udata) {return 2;}
    49f4:	20 eb       	ldi	r18, 0xB0	; 176
    49f6:	a2 16       	cp	r10, r18
    49f8:	28 e0       	ldi	r18, 0x08	; 8
    49fa:	b2 06       	cpc	r11, r18
    49fc:	31 f4       	brne	.+12     	; 0x4a0a <uart_receive_lcd+0x178>
    49fe:	42 e0       	ldi	r20, 0x02	; 2
    4a00:	05 c0       	rjmp	.+10     	; 0x4a0c <uart_receive_lcd+0x17a>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    4a02:	40 e0       	ldi	r20, 0x00	; 0
    4a04:	03 c0       	rjmp	.+6      	; 0x4a0c <uart_receive_lcd+0x17a>
	if (port == &uctrl) {return 1;}
    4a06:	41 e0       	ldi	r20, 0x01	; 1
    4a08:	01 c0       	rjmp	.+2      	; 0x4a0c <uart_receive_lcd+0x17a>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    4a0a:	40 e0       	ldi	r20, 0x00	; 0
	}
}

inline void uart_ienqueue(USART_t* port, uint8_t datain){
	uint8_t idx = port_map(port);
	uart_ibuffer[idx][uart_ihead[idx]] = datain;
    4a0c:	50 e0       	ldi	r21, 0x00	; 0
    4a0e:	ca 01       	movw	r24, r20
    4a10:	88 0f       	add	r24, r24
    4a12:	99 1f       	adc	r25, r25
    4a14:	f4 01       	movw	r30, r8
    4a16:	e8 0f       	add	r30, r24
    4a18:	f9 1f       	adc	r31, r25
    4a1a:	20 81       	ld	r18, Z
    4a1c:	31 81       	ldd	r19, Z+1	; 0x01
    4a1e:	ca 01       	movw	r24, r20
    4a20:	98 2f       	mov	r25, r24
    4a22:	88 27       	eor	r24, r24
    4a24:	99 0f       	add	r25, r25
    4a26:	99 0f       	add	r25, r25
    4a28:	82 0f       	add	r24, r18
    4a2a:	93 1f       	adc	r25, r19
    4a2c:	84 0d       	add	r24, r4
    4a2e:	95 1d       	adc	r25, r5
    4a30:	dc 01       	movw	r26, r24
    4a32:	dc 92       	st	X, r13
	uart_ihead[idx]++;
    4a34:	80 81       	ld	r24, Z
    4a36:	91 81       	ldd	r25, Z+1	; 0x01
    4a38:	01 96       	adiw	r24, 0x01	; 1
    4a3a:	80 83       	st	Z, r24
    4a3c:	91 83       	std	Z+1, r25	; 0x01
	if (uart_ihead[idx] >= MAX_IBUFFER_LEN){
    4a3e:	80 81       	ld	r24, Z
    4a40:	91 81       	ldd	r25, Z+1	; 0x01
    4a42:	b4 e0       	ldi	r27, 0x04	; 4
    4a44:	80 30       	cpi	r24, 0x00	; 0
    4a46:	9b 07       	cpc	r25, r27
    4a48:	10 f0       	brcs	.+4      	; 0x4a4e <uart_receive_lcd+0x1bc>
		uart_ihead[idx] = 0;
    4a4a:	10 82       	st	Z, r1
    4a4c:	11 82       	std	Z+1, r1	; 0x01
}

void inline uart_receive_lcd(USART_t* port){
	uint8_t incomingByte;
	//keep receiving until data register is empty or incoming queue is full
	while (((port->STATUS & _BV(7)) == B8(10000000)) && (uart_icount(port) < MAX_IBUFFER_LEN)){
    4a4e:	d5 01       	movw	r26, r10
    4a50:	11 96       	adiw	r26, 0x01	; 1
    4a52:	8c 91       	ld	r24, X
    4a54:	11 97       	sbiw	r26, 0x01	; 1
    4a56:	88 23       	and	r24, r24
    4a58:	0c f0       	brlt	.+2      	; 0x4a5c <uart_receive_lcd+0x1ca>
    4a5a:	4d c0       	rjmp	.+154    	; 0x4af6 <uart_receive_lcd+0x264>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    4a5c:	b0 eb       	ldi	r27, 0xB0	; 176
    4a5e:	ab 16       	cp	r10, r27
    4a60:	bb e0       	ldi	r27, 0x0B	; 11
    4a62:	bb 06       	cpc	r11, r27
    4a64:	61 f0       	breq	.+24     	; 0x4a7e <uart_receive_lcd+0x1ec>
	if (port == &uctrl) {return 1;}
    4a66:	e0 ea       	ldi	r30, 0xA0	; 160
    4a68:	ae 16       	cp	r10, r30
    4a6a:	e8 e0       	ldi	r30, 0x08	; 8
    4a6c:	be 06       	cpc	r11, r30
    4a6e:	49 f0       	breq	.+18     	; 0x4a82 <uart_receive_lcd+0x1f0>
	if (port == &udata) {return 2;}
    4a70:	f0 eb       	ldi	r31, 0xB0	; 176
    4a72:	af 16       	cp	r10, r31
    4a74:	f8 e0       	ldi	r31, 0x08	; 8
    4a76:	bf 06       	cpc	r11, r31
    4a78:	31 f4       	brne	.+12     	; 0x4a86 <uart_receive_lcd+0x1f4>
    4a7a:	22 e0       	ldi	r18, 0x02	; 2
    4a7c:	05 c0       	rjmp	.+10     	; 0x4a88 <uart_receive_lcd+0x1f6>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    4a7e:	20 e0       	ldi	r18, 0x00	; 0
    4a80:	03 c0       	rjmp	.+6      	; 0x4a88 <uart_receive_lcd+0x1f6>
	if (port == &uctrl) {return 1;}
    4a82:	21 e0       	ldi	r18, 0x01	; 1
    4a84:	01 c0       	rjmp	.+2      	; 0x4a88 <uart_receive_lcd+0x1f6>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    4a86:	20 e0       	ldi	r18, 0x00	; 0
	uart_itail[idx] = 0;
}

inline uint16_t uart_icount(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_ihead[idx] >= uart_itail[idx]){	
    4a88:	30 e0       	ldi	r19, 0x00	; 0
    4a8a:	c9 01       	movw	r24, r18
    4a8c:	88 0f       	add	r24, r24
    4a8e:	99 1f       	adc	r25, r25
    4a90:	f4 01       	movw	r30, r8
    4a92:	e8 0f       	add	r30, r24
    4a94:	f9 1f       	adc	r31, r25
    4a96:	40 81       	ld	r20, Z
    4a98:	51 81       	ldd	r21, Z+1	; 0x01
    4a9a:	f3 01       	movw	r30, r6
    4a9c:	e8 0f       	add	r30, r24
    4a9e:	f9 1f       	adc	r31, r25
    4aa0:	80 81       	ld	r24, Z
    4aa2:	91 81       	ldd	r25, Z+1	; 0x01
    4aa4:	48 17       	cp	r20, r24
    4aa6:	59 07       	cpc	r21, r25
    4aa8:	88 f0       	brcs	.+34     	; 0x4acc <uart_receive_lcd+0x23a>
		return (uart_ihead[idx] - uart_itail[idx]);
    4aaa:	22 0f       	add	r18, r18
    4aac:	33 1f       	adc	r19, r19
    4aae:	f4 01       	movw	r30, r8
    4ab0:	e2 0f       	add	r30, r18
    4ab2:	f3 1f       	adc	r31, r19
    4ab4:	40 81       	ld	r20, Z
    4ab6:	51 81       	ldd	r21, Z+1	; 0x01
    4ab8:	f3 01       	movw	r30, r6
    4aba:	e2 0f       	add	r30, r18
    4abc:	f3 1f       	adc	r31, r19
    4abe:	80 81       	ld	r24, Z
    4ac0:	91 81       	ldd	r25, Z+1	; 0x01
    4ac2:	9a 01       	movw	r18, r20
    4ac4:	28 1b       	sub	r18, r24
    4ac6:	39 0b       	sbc	r19, r25
    4ac8:	c9 01       	movw	r24, r18
    4aca:	10 c0       	rjmp	.+32     	; 0x4aec <uart_receive_lcd+0x25a>
	}
	else {
		return ((MAX_IBUFFER_LEN-uart_itail[idx])+uart_ihead[idx]);
    4acc:	22 0f       	add	r18, r18
    4ace:	33 1f       	adc	r19, r19
    4ad0:	f4 01       	movw	r30, r8
    4ad2:	e2 0f       	add	r30, r18
    4ad4:	f3 1f       	adc	r31, r19
    4ad6:	80 81       	ld	r24, Z
    4ad8:	91 81       	ldd	r25, Z+1	; 0x01
    4ada:	f3 01       	movw	r30, r6
    4adc:	e2 0f       	add	r30, r18
    4ade:	f3 1f       	adc	r31, r19
    4ae0:	20 81       	ld	r18, Z
    4ae2:	31 81       	ldd	r19, Z+1	; 0x01
    4ae4:	80 50       	subi	r24, 0x00	; 0
    4ae6:	9c 4f       	sbci	r25, 0xFC	; 252
    4ae8:	82 1b       	sub	r24, r18
    4aea:	93 0b       	sbc	r25, r19
}

void inline uart_receive_lcd(USART_t* port){
	uint8_t incomingByte;
	//keep receiving until data register is empty or incoming queue is full
	while (((port->STATUS & _BV(7)) == B8(10000000)) && (uart_icount(port) < MAX_IBUFFER_LEN)){
    4aec:	34 e0       	ldi	r19, 0x04	; 4
    4aee:	80 30       	cpi	r24, 0x00	; 0
    4af0:	93 07       	cpc	r25, r19
    4af2:	08 f4       	brcc	.+2      	; 0x4af6 <uart_receive_lcd+0x264>
    4af4:	00 cf       	rjmp	.-512    	; 0x48f6 <uart_receive_lcd+0x64>
		uart_enqueue(&udata, incomingByte); //xxx - echo to data port
		if (incomingByte == 0x0D) {lcd_flow_control = LCD_DONE_COMMAND;}
		lcd_set_touch(incomingByte); //write to touch-command listener
		uart_ienqueue(port, incomingByte);
	}
}
    4af6:	df 91       	pop	r29
    4af8:	cf 91       	pop	r28
    4afa:	1f 91       	pop	r17
    4afc:	0f 91       	pop	r16
    4afe:	ff 90       	pop	r15
    4b00:	ef 90       	pop	r14
    4b02:	df 90       	pop	r13
    4b04:	cf 90       	pop	r12
    4b06:	bf 90       	pop	r11
    4b08:	af 90       	pop	r10
    4b0a:	9f 90       	pop	r9
    4b0c:	8f 90       	pop	r8
    4b0e:	7f 90       	pop	r7
    4b10:	6f 90       	pop	r6
    4b12:	5f 90       	pop	r5
    4b14:	4f 90       	pop	r4
    4b16:	08 95       	ret

00004b18 <init_uart_obuffer>:
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    4b18:	2b e0       	ldi	r18, 0x0B	; 11
    4b1a:	80 3b       	cpi	r24, 0xB0	; 176
    4b1c:	92 07       	cpc	r25, r18
    4b1e:	51 f0       	breq	.+20     	; 0x4b34 <init_uart_obuffer+0x1c>
	if (port == &uctrl) {return 1;}
    4b20:	e8 e0       	ldi	r30, 0x08	; 8
    4b22:	80 3a       	cpi	r24, 0xA0	; 160
    4b24:	9e 07       	cpc	r25, r30
    4b26:	41 f0       	breq	.+16     	; 0x4b38 <init_uart_obuffer+0x20>
	if (port == &udata) {return 2;}
    4b28:	f8 e0       	ldi	r31, 0x08	; 8
    4b2a:	80 3b       	cpi	r24, 0xB0	; 176
    4b2c:	9f 07       	cpc	r25, r31
    4b2e:	31 f4       	brne	.+12     	; 0x4b3c <init_uart_obuffer+0x24>
    4b30:	82 e0       	ldi	r24, 0x02	; 2
    4b32:	05 c0       	rjmp	.+10     	; 0x4b3e <init_uart_obuffer+0x26>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    4b34:	80 e0       	ldi	r24, 0x00	; 0
    4b36:	03 c0       	rjmp	.+6      	; 0x4b3e <init_uart_obuffer+0x26>
	if (port == &uctrl) {return 1;}
    4b38:	81 e0       	ldi	r24, 0x01	; 1
    4b3a:	01 c0       	rjmp	.+2      	; 0x4b3e <init_uart_obuffer+0x26>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    4b3c:	80 e0       	ldi	r24, 0x00	; 0
	No protection is provided for buffer overflow! Be careful! */
//***************************************************

void init_uart_obuffer(USART_t* port){
	uint8_t idx = port_map(port);
	uart_head[idx] = 0;
    4b3e:	90 e0       	ldi	r25, 0x00	; 0
    4b40:	88 0f       	add	r24, r24
    4b42:	99 1f       	adc	r25, r25
    4b44:	fc 01       	movw	r30, r24
    4b46:	e6 50       	subi	r30, 0x06	; 6
    4b48:	fd 4c       	sbci	r31, 0xCD	; 205
    4b4a:	10 82       	st	Z, r1
    4b4c:	11 82       	std	Z+1, r1	; 0x01
	uart_tail[idx] = 0;
    4b4e:	8a 5f       	subi	r24, 0xFA	; 250
    4b50:	90 4c       	sbci	r25, 0xC0	; 192
    4b52:	fc 01       	movw	r30, r24
    4b54:	10 82       	st	Z, r1
    4b56:	11 82       	std	Z+1, r1	; 0x01
}
    4b58:	08 95       	ret

00004b5a <uart_count>:
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    4b5a:	2b e0       	ldi	r18, 0x0B	; 11
    4b5c:	80 3b       	cpi	r24, 0xB0	; 176
    4b5e:	92 07       	cpc	r25, r18
    4b60:	51 f0       	breq	.+20     	; 0x4b76 <uart_count+0x1c>
	if (port == &uctrl) {return 1;}
    4b62:	e8 e0       	ldi	r30, 0x08	; 8
    4b64:	80 3a       	cpi	r24, 0xA0	; 160
    4b66:	9e 07       	cpc	r25, r30
    4b68:	41 f0       	breq	.+16     	; 0x4b7a <uart_count+0x20>
	if (port == &udata) {return 2;}
    4b6a:	f8 e0       	ldi	r31, 0x08	; 8
    4b6c:	80 3b       	cpi	r24, 0xB0	; 176
    4b6e:	9f 07       	cpc	r25, r31
    4b70:	31 f4       	brne	.+12     	; 0x4b7e <uart_count+0x24>
    4b72:	82 e0       	ldi	r24, 0x02	; 2
    4b74:	05 c0       	rjmp	.+10     	; 0x4b80 <uart_count+0x26>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    4b76:	80 e0       	ldi	r24, 0x00	; 0
    4b78:	03 c0       	rjmp	.+6      	; 0x4b80 <uart_count+0x26>
	if (port == &uctrl) {return 1;}
    4b7a:	81 e0       	ldi	r24, 0x01	; 1
    4b7c:	01 c0       	rjmp	.+2      	; 0x4b80 <uart_count+0x26>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    4b7e:	80 e0       	ldi	r24, 0x00	; 0
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    4b80:	90 e0       	ldi	r25, 0x00	; 0
    4b82:	9c 01       	movw	r18, r24
    4b84:	22 0f       	add	r18, r18
    4b86:	33 1f       	adc	r19, r19
    4b88:	f9 01       	movw	r30, r18
    4b8a:	e6 50       	subi	r30, 0x06	; 6
    4b8c:	fd 4c       	sbci	r31, 0xCD	; 205
    4b8e:	40 81       	ld	r20, Z
    4b90:	51 81       	ldd	r21, Z+1	; 0x01
    4b92:	2a 5f       	subi	r18, 0xFA	; 250
    4b94:	30 4c       	sbci	r19, 0xC0	; 192
    4b96:	f9 01       	movw	r30, r18
    4b98:	20 81       	ld	r18, Z
    4b9a:	31 81       	ldd	r19, Z+1	; 0x01
    4b9c:	42 17       	cp	r20, r18
    4b9e:	53 07       	cpc	r21, r19
    4ba0:	80 f0       	brcs	.+32     	; 0x4bc2 <uart_count+0x68>
		return (uart_head[idx] - uart_tail[idx]);
    4ba2:	9c 01       	movw	r18, r24
    4ba4:	22 0f       	add	r18, r18
    4ba6:	33 1f       	adc	r19, r19
    4ba8:	f9 01       	movw	r30, r18
    4baa:	e6 50       	subi	r30, 0x06	; 6
    4bac:	fd 4c       	sbci	r31, 0xCD	; 205
    4bae:	80 81       	ld	r24, Z
    4bb0:	91 81       	ldd	r25, Z+1	; 0x01
    4bb2:	2a 5f       	subi	r18, 0xFA	; 250
    4bb4:	30 4c       	sbci	r19, 0xC0	; 192
    4bb6:	f9 01       	movw	r30, r18
    4bb8:	20 81       	ld	r18, Z
    4bba:	31 81       	ldd	r19, Z+1	; 0x01
    4bbc:	82 1b       	sub	r24, r18
    4bbe:	93 0b       	sbc	r25, r19
    4bc0:	08 95       	ret
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    4bc2:	9c 01       	movw	r18, r24
    4bc4:	22 0f       	add	r18, r18
    4bc6:	33 1f       	adc	r19, r19
    4bc8:	f9 01       	movw	r30, r18
    4bca:	e6 50       	subi	r30, 0x06	; 6
    4bcc:	fd 4c       	sbci	r31, 0xCD	; 205
    4bce:	40 81       	ld	r20, Z
    4bd0:	51 81       	ldd	r21, Z+1	; 0x01
    4bd2:	2a 5f       	subi	r18, 0xFA	; 250
    4bd4:	30 4c       	sbci	r19, 0xC0	; 192
    4bd6:	f9 01       	movw	r30, r18
    4bd8:	20 81       	ld	r18, Z
    4bda:	31 81       	ldd	r19, Z+1	; 0x01
    4bdc:	ca 01       	movw	r24, r20
    4bde:	80 50       	subi	r24, 0x00	; 0
    4be0:	9c 4f       	sbci	r25, 0xFC	; 252
    4be2:	82 1b       	sub	r24, r18
    4be4:	93 0b       	sbc	r25, r19
	}
}
    4be6:	08 95       	ret

00004be8 <uart_enqueue_string>:

///Enqueue a string into the outgoing serial queue. Adds CR terminator to string.
inline void uart_enqueue_string(USART_t* port, char* string_in){
    4be8:	2f 92       	push	r2
    4bea:	3f 92       	push	r3
    4bec:	4f 92       	push	r4
    4bee:	5f 92       	push	r5
    4bf0:	6f 92       	push	r6
    4bf2:	7f 92       	push	r7
    4bf4:	8f 92       	push	r8
    4bf6:	9f 92       	push	r9
    4bf8:	af 92       	push	r10
    4bfa:	bf 92       	push	r11
    4bfc:	cf 92       	push	r12
    4bfe:	df 92       	push	r13
    4c00:	ef 92       	push	r14
    4c02:	ff 92       	push	r15
    4c04:	0f 93       	push	r16
    4c06:	1f 93       	push	r17
    4c08:	cf 93       	push	r28
    4c0a:	df 93       	push	r29
    4c0c:	00 d0       	rcall	.+0      	; 0x4c0e <uart_enqueue_string+0x26>
    4c0e:	0f 92       	push	r0
    4c10:	cd b7       	in	r28, 0x3d	; 61
    4c12:	de b7       	in	r29, 0x3e	; 62
    4c14:	6c 01       	movw	r12, r24
	uint16_t length = (uint16_t)strlen(string_in);
    4c16:	26 2f       	mov	r18, r22
    4c18:	37 2f       	mov	r19, r23
    4c1a:	d9 01       	movw	r26, r18
    4c1c:	0d 90       	ld	r0, X+
    4c1e:	00 20       	and	r0, r0
    4c20:	e9 f7       	brne	.-6      	; 0x4c1c <uart_enqueue_string+0x34>
    4c22:	11 97       	sbiw	r26, 0x01	; 1
    4c24:	cd 01       	movw	r24, r26
    4c26:	82 1b       	sub	r24, r18
    4c28:	93 0b       	sbc	r25, r19
    4c2a:	8b 83       	std	Y+3, r24	; 0x03
    4c2c:	9c 83       	std	Y+4, r25	; 0x04
	for (uint16_t i=0; i<length; i++) {uart_enqueue(port, (uint8_t)string_in[i]);}
    4c2e:	00 97       	sbiw	r24, 0x00	; 0
    4c30:	09 f4       	brne	.+2      	; 0x4c34 <uart_enqueue_string+0x4c>
    4c32:	4a c3       	rjmp	.+1684   	; 0x52c8 <uart_enqueue_string+0x6e0>
    4c34:	69 83       	std	Y+1, r22	; 0x01
    4c36:	7a 83       	std	Y+2, r23	; 0x02
    4c38:	22 24       	eor	r2, r2
    4c3a:	33 24       	eor	r3, r3
#ifndef UART_DEBUG
	uint8_t idx = port_map(port);
	
	//if (idx==0){uart_enqueue(&uctrl, datain);} //xxx
	
	uart_buffer[idx][uart_head[idx]] = datain;
    4c3c:	0f 2e       	mov	r0, r31
    4c3e:	fa ef       	ldi	r31, 0xFA	; 250
    4c40:	6f 2e       	mov	r6, r31
    4c42:	f2 e3       	ldi	r31, 0x32	; 50
    4c44:	7f 2e       	mov	r7, r31
    4c46:	f0 2d       	mov	r31, r0
    4c48:	0f 2e       	mov	r0, r31
    4c4a:	f0 e0       	ldi	r31, 0x00	; 0
    4c4c:	4f 2e       	mov	r4, r31
    4c4e:	f3 e3       	ldi	r31, 0x33	; 51
    4c50:	5f 2e       	mov	r5, r31
    4c52:	f0 2d       	mov	r31, r0
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    4c54:	0f 2e       	mov	r0, r31
    4c56:	f6 e0       	ldi	r31, 0x06	; 6
    4c58:	8f 2e       	mov	r8, r31
    4c5a:	ff e3       	ldi	r31, 0x3F	; 63
    4c5c:	9f 2e       	mov	r9, r31
    4c5e:	f0 2d       	mov	r31, r0
#ifndef UART_DEBUG
	uint8_t idx = port_map(port);
	
	//if (idx==0){uart_enqueue(&uctrl, datain);} //xxx
	
	uart_buffer[idx][uart_head[idx]] = datain;
    4c60:	0f 2e       	mov	r0, r31
    4c62:	fe ef       	ldi	r31, 0xFE	; 254
    4c64:	ef 2e       	mov	r14, r31
    4c66:	f2 e3       	ldi	r31, 0x32	; 50
    4c68:	ff 2e       	mov	r15, r31
    4c6a:	f0 2d       	mov	r31, r0
}

///Enqueue a string into the outgoing serial queue. Adds CR terminator to string.
inline void uart_enqueue_string(USART_t* port, char* string_in){
	uint16_t length = (uint16_t)strlen(string_in);
	for (uint16_t i=0; i<length; i++) {uart_enqueue(port, (uint8_t)string_in[i]);}
    4c6c:	a9 81       	ldd	r26, Y+1	; 0x01
    4c6e:	ba 81       	ldd	r27, Y+2	; 0x02
    4c70:	7d 91       	ld	r23, X+
    4c72:	a9 83       	std	Y+1, r26	; 0x01
    4c74:	ba 83       	std	Y+2, r27	; 0x02
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    4c76:	b0 eb       	ldi	r27, 0xB0	; 176
    4c78:	cb 16       	cp	r12, r27
    4c7a:	bb e0       	ldi	r27, 0x0B	; 11
    4c7c:	db 06       	cpc	r13, r27
    4c7e:	61 f0       	breq	.+24     	; 0x4c98 <uart_enqueue_string+0xb0>
	if (port == &uctrl) {return 1;}
    4c80:	e0 ea       	ldi	r30, 0xA0	; 160
    4c82:	ce 16       	cp	r12, r30
    4c84:	e8 e0       	ldi	r30, 0x08	; 8
    4c86:	de 06       	cpc	r13, r30
    4c88:	49 f0       	breq	.+18     	; 0x4c9c <uart_enqueue_string+0xb4>
	if (port == &udata) {return 2;}
    4c8a:	f0 eb       	ldi	r31, 0xB0	; 176
    4c8c:	cf 16       	cp	r12, r31
    4c8e:	f8 e0       	ldi	r31, 0x08	; 8
    4c90:	df 06       	cpc	r13, r31
    4c92:	31 f4       	brne	.+12     	; 0x4ca0 <uart_enqueue_string+0xb8>
    4c94:	62 e0       	ldi	r22, 0x02	; 2
    4c96:	05 c0       	rjmp	.+10     	; 0x4ca2 <uart_enqueue_string+0xba>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    4c98:	60 e0       	ldi	r22, 0x00	; 0
    4c9a:	03 c0       	rjmp	.+6      	; 0x4ca2 <uart_enqueue_string+0xba>
	if (port == &uctrl) {return 1;}
    4c9c:	61 e0       	ldi	r22, 0x01	; 1
    4c9e:	01 c0       	rjmp	.+2      	; 0x4ca2 <uart_enqueue_string+0xba>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    4ca0:	60 e0       	ldi	r22, 0x00	; 0
#ifndef UART_DEBUG
	uint8_t idx = port_map(port);
	
	//if (idx==0){uart_enqueue(&uctrl, datain);} //xxx
	
	uart_buffer[idx][uart_head[idx]] = datain;
    4ca2:	46 2f       	mov	r20, r22
    4ca4:	50 e0       	ldi	r21, 0x00	; 0
    4ca6:	ca 01       	movw	r24, r20
    4ca8:	88 0f       	add	r24, r24
    4caa:	99 1f       	adc	r25, r25
    4cac:	f3 01       	movw	r30, r6
    4cae:	e8 0f       	add	r30, r24
    4cb0:	f9 1f       	adc	r31, r25
    4cb2:	20 81       	ld	r18, Z
    4cb4:	31 81       	ldd	r19, Z+1	; 0x01
    4cb6:	ca 01       	movw	r24, r20
    4cb8:	98 2f       	mov	r25, r24
    4cba:	88 27       	eor	r24, r24
    4cbc:	99 0f       	add	r25, r25
    4cbe:	99 0f       	add	r25, r25
    4cc0:	82 0f       	add	r24, r18
    4cc2:	93 1f       	adc	r25, r19
    4cc4:	84 0d       	add	r24, r4
    4cc6:	95 1d       	adc	r25, r5
    4cc8:	dc 01       	movw	r26, r24
    4cca:	7c 93       	st	X, r23
	uart_head[idx]++;
    4ccc:	80 81       	ld	r24, Z
    4cce:	91 81       	ldd	r25, Z+1	; 0x01
    4cd0:	01 96       	adiw	r24, 0x01	; 1
    4cd2:	80 83       	st	Z, r24
    4cd4:	91 83       	std	Z+1, r25	; 0x01
	if (uart_head[idx] >= MAX_BUFFER_LEN){
    4cd6:	80 81       	ld	r24, Z
    4cd8:	91 81       	ldd	r25, Z+1	; 0x01
    4cda:	b4 e0       	ldi	r27, 0x04	; 4
    4cdc:	80 30       	cpi	r24, 0x00	; 0
    4cde:	9b 07       	cpc	r25, r27
    4ce0:	10 f0       	brcs	.+4      	; 0x4ce6 <uart_enqueue_string+0xfe>
		uart_head[idx] = 0;
    4ce2:	10 82       	st	Z, r1
    4ce4:	11 82       	std	Z+1, r1	; 0x01
	}
	if (idx == 0){uart_transmit_lcd(port);} //start the transmission process.
    4ce6:	66 23       	and	r22, r22
    4ce8:	39 f0       	breq	.+14     	; 0x4cf8 <uart_enqueue_string+0x110>
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    4cea:	d6 01       	movw	r26, r12
    4cec:	11 96       	adiw	r26, 0x01	; 1
    4cee:	8c 91       	ld	r24, X
    4cf0:	11 97       	sbiw	r26, 0x01	; 1
    4cf2:	85 fd       	sbrc	r24, 5
    4cf4:	44 c2       	rjmp	.+1160   	; 0x517e <uart_enqueue_string+0x596>
    4cf6:	8e c2       	rjmp	.+1308   	; 0x5214 <uart_enqueue_string+0x62c>
}

void inline uart_transmit_lcd(USART_t* port){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0) && (lcd_flow_control == LCD_READY)){
    4cf8:	f6 01       	movw	r30, r12
    4cfa:	81 81       	ldd	r24, Z+1	; 0x01
    4cfc:	85 fd       	sbrc	r24, 5
    4cfe:	54 c1       	rjmp	.+680    	; 0x4fa8 <uart_enqueue_string+0x3c0>
    4d00:	a8 c1       	rjmp	.+848    	; 0x5052 <uart_enqueue_string+0x46a>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    4d02:	f0 eb       	ldi	r31, 0xB0	; 176
    4d04:	cf 16       	cp	r12, r31
    4d06:	fb e0       	ldi	r31, 0x0B	; 11
    4d08:	df 06       	cpc	r13, r31
    4d0a:	61 f0       	breq	.+24     	; 0x4d24 <uart_enqueue_string+0x13c>
	if (port == &uctrl) {return 1;}
    4d0c:	20 ea       	ldi	r18, 0xA0	; 160
    4d0e:	c2 16       	cp	r12, r18
    4d10:	28 e0       	ldi	r18, 0x08	; 8
    4d12:	d2 06       	cpc	r13, r18
    4d14:	49 f0       	breq	.+18     	; 0x4d28 <uart_enqueue_string+0x140>
	if (port == &udata) {return 2;}
    4d16:	30 eb       	ldi	r19, 0xB0	; 176
    4d18:	c3 16       	cp	r12, r19
    4d1a:	38 e0       	ldi	r19, 0x08	; 8
    4d1c:	d3 06       	cpc	r13, r19
    4d1e:	31 f4       	brne	.+12     	; 0x4d2c <uart_enqueue_string+0x144>
    4d20:	22 e0       	ldi	r18, 0x02	; 2
    4d22:	05 c0       	rjmp	.+10     	; 0x4d2e <uart_enqueue_string+0x146>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    4d24:	20 e0       	ldi	r18, 0x00	; 0
    4d26:	03 c0       	rjmp	.+6      	; 0x4d2e <uart_enqueue_string+0x146>
	if (port == &uctrl) {return 1;}
    4d28:	21 e0       	ldi	r18, 0x01	; 1
    4d2a:	01 c0       	rjmp	.+2      	; 0x4d2e <uart_enqueue_string+0x146>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    4d2c:	20 e0       	ldi	r18, 0x00	; 0
}

inline uint8_t uart_dequeue(USART_t* port){
	uint8_t idx = port_map(port);
	uint16_t oldtail;
	oldtail = uart_tail[idx];
    4d2e:	30 e0       	ldi	r19, 0x00	; 0
    4d30:	c9 01       	movw	r24, r18
    4d32:	88 0f       	add	r24, r24
    4d34:	99 1f       	adc	r25, r25
    4d36:	f4 01       	movw	r30, r8
    4d38:	e8 0f       	add	r30, r24
    4d3a:	f9 1f       	adc	r31, r25
    4d3c:	40 81       	ld	r20, Z
    4d3e:	51 81       	ldd	r21, Z+1	; 0x01
	uart_tail[idx]++;
    4d40:	80 81       	ld	r24, Z
    4d42:	91 81       	ldd	r25, Z+1	; 0x01
    4d44:	01 96       	adiw	r24, 0x01	; 1
    4d46:	80 83       	st	Z, r24
    4d48:	91 83       	std	Z+1, r25	; 0x01
	if (uart_tail[idx] >= MAX_BUFFER_LEN){
    4d4a:	80 81       	ld	r24, Z
    4d4c:	91 81       	ldd	r25, Z+1	; 0x01
    4d4e:	64 e0       	ldi	r22, 0x04	; 4
    4d50:	80 30       	cpi	r24, 0x00	; 0
    4d52:	96 07       	cpc	r25, r22
    4d54:	10 f0       	brcs	.+4      	; 0x4d5a <uart_enqueue_string+0x172>
		uart_tail[idx] = 0;
    4d56:	10 82       	st	Z, r1
    4d58:	11 82       	std	Z+1, r1	; 0x01
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    4d5a:	c9 01       	movw	r24, r18
    4d5c:	98 2f       	mov	r25, r24
    4d5e:	88 27       	eor	r24, r24
    4d60:	99 0f       	add	r25, r25
    4d62:	99 0f       	add	r25, r25
    4d64:	84 0f       	add	r24, r20
    4d66:	95 1f       	adc	r25, r21
    4d68:	84 0d       	add	r24, r4
    4d6a:	95 1d       	adc	r25, r5
    4d6c:	fc 01       	movw	r30, r24
    4d6e:	b0 80       	ld	r11, Z
void inline uart_transmit_lcd(USART_t* port){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0) && (lcd_flow_control == LCD_READY)){
		toSend = uart_dequeue(port);
		if (toSend == 0x0D) {lcd_flow_control = LCD_BUSY;}
    4d70:	fd e0       	ldi	r31, 0x0D	; 13
    4d72:	bf 16       	cp	r11, r31
    4d74:	19 f4       	brne	.+6      	; 0x4d7c <uart_enqueue_string+0x194>
    4d76:	2e e4       	ldi	r18, 0x4E	; 78
    4d78:	20 93 e2 26 	sts	0x26E2, r18
#ifndef UART_DEBUG
	uint8_t idx = port_map(port);
	
	//if (idx==0){uart_enqueue(&uctrl, datain);} //xxx
	
	uart_buffer[idx][uart_head[idx]] = datain;
    4d7c:	d7 01       	movw	r26, r14
    4d7e:	8d 91       	ld	r24, X+
    4d80:	9c 91       	ld	r25, X
    4d82:	11 97       	sbiw	r26, 0x01	; 1
    4d84:	80 50       	subi	r24, 0x00	; 0
    4d86:	95 4c       	sbci	r25, 0xC5	; 197
    4d88:	fc 01       	movw	r30, r24
    4d8a:	a0 82       	st	Z, r10
	uart_head[idx]++;
    4d8c:	8d 91       	ld	r24, X+
    4d8e:	9c 91       	ld	r25, X
    4d90:	11 97       	sbiw	r26, 0x01	; 1
    4d92:	01 96       	adiw	r24, 0x01	; 1
    4d94:	8d 93       	st	X+, r24
    4d96:	9c 93       	st	X, r25
    4d98:	11 97       	sbiw	r26, 0x01	; 1
	if (uart_head[idx] >= MAX_BUFFER_LEN){
    4d9a:	8d 91       	ld	r24, X+
    4d9c:	9c 91       	ld	r25, X
    4d9e:	11 97       	sbiw	r26, 0x01	; 1
    4da0:	f4 e0       	ldi	r31, 0x04	; 4
    4da2:	80 30       	cpi	r24, 0x00	; 0
    4da4:	9f 07       	cpc	r25, r31
    4da6:	18 f0       	brcs	.+6      	; 0x4dae <uart_enqueue_string+0x1c6>
		uart_head[idx] = 0;
    4da8:	1d 92       	st	X+, r1
    4daa:	1c 92       	st	X, r1
    4dac:	11 97       	sbiw	r26, 0x01	; 1
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    4dae:	d8 01       	movw	r26, r16
    4db0:	11 96       	adiw	r26, 0x01	; 1
    4db2:	8c 91       	ld	r24, X
    4db4:	11 97       	sbiw	r26, 0x01	; 1
    4db6:	85 fd       	sbrc	r24, 5
    4db8:	1f c0       	rjmp	.+62     	; 0x4df8 <uart_enqueue_string+0x210>
    4dba:	3f c0       	rjmp	.+126    	; 0x4e3a <uart_enqueue_string+0x252>
}

inline uint8_t uart_dequeue(USART_t* port){
	uint8_t idx = port_map(port);
	uint16_t oldtail;
	oldtail = uart_tail[idx];
    4dbc:	aa e0       	ldi	r26, 0x0A	; 10
    4dbe:	bf e3       	ldi	r27, 0x3F	; 63
    4dc0:	ed 91       	ld	r30, X+
    4dc2:	fc 91       	ld	r31, X
    4dc4:	11 97       	sbiw	r26, 0x01	; 1
	uart_tail[idx]++;
    4dc6:	8d 91       	ld	r24, X+
    4dc8:	9c 91       	ld	r25, X
    4dca:	11 97       	sbiw	r26, 0x01	; 1
    4dcc:	01 96       	adiw	r24, 0x01	; 1
    4dce:	8d 93       	st	X+, r24
    4dd0:	9c 93       	st	X, r25
    4dd2:	11 97       	sbiw	r26, 0x01	; 1
	if (uart_tail[idx] >= MAX_BUFFER_LEN){
    4dd4:	8d 91       	ld	r24, X+
    4dd6:	9c 91       	ld	r25, X
    4dd8:	11 97       	sbiw	r26, 0x01	; 1
    4dda:	b4 e0       	ldi	r27, 0x04	; 4
    4ddc:	80 30       	cpi	r24, 0x00	; 0
    4dde:	9b 07       	cpc	r25, r27
    4de0:	18 f0       	brcs	.+6      	; 0x4de8 <uart_enqueue_string+0x200>
		uart_tail[idx] = 0;
    4de2:	1d 92       	st	X+, r1
    4de4:	1c 92       	st	X, r1
    4de6:	11 97       	sbiw	r26, 0x01	; 1
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    4de8:	e0 50       	subi	r30, 0x00	; 0
    4dea:	f5 4c       	sbci	r31, 0xC5	; 197
    4dec:	80 81       	ld	r24, Z
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
    4dee:	f8 01       	movw	r30, r16
    4df0:	80 83       	st	Z, r24
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    4df2:	81 81       	ldd	r24, Z+1	; 0x01
    4df4:	85 ff       	sbrs	r24, 5
    4df6:	21 c0       	rjmp	.+66     	; 0x4e3a <uart_enqueue_string+0x252>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    4df8:	d7 01       	movw	r26, r14
    4dfa:	8d 91       	ld	r24, X+
    4dfc:	9c 91       	ld	r25, X
    4dfe:	11 97       	sbiw	r26, 0x01	; 1
    4e00:	ea e0       	ldi	r30, 0x0A	; 10
    4e02:	ff e3       	ldi	r31, 0x3F	; 63
    4e04:	20 81       	ld	r18, Z
    4e06:	31 81       	ldd	r19, Z+1	; 0x01
    4e08:	82 17       	cp	r24, r18
    4e0a:	93 07       	cpc	r25, r19
    4e0c:	40 f0       	brcs	.+16     	; 0x4e1e <uart_enqueue_string+0x236>
		return (uart_head[idx] - uart_tail[idx]);
    4e0e:	8d 91       	ld	r24, X+
    4e10:	9c 91       	ld	r25, X
    4e12:	11 97       	sbiw	r26, 0x01	; 1
    4e14:	20 81       	ld	r18, Z
    4e16:	31 81       	ldd	r19, Z+1	; 0x01
    4e18:	82 1b       	sub	r24, r18
    4e1a:	93 0b       	sbc	r25, r19
    4e1c:	0c c0       	rjmp	.+24     	; 0x4e36 <uart_enqueue_string+0x24e>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    4e1e:	d7 01       	movw	r26, r14
    4e20:	8d 91       	ld	r24, X+
    4e22:	9c 91       	ld	r25, X
    4e24:	11 97       	sbiw	r26, 0x01	; 1
    4e26:	ea e0       	ldi	r30, 0x0A	; 10
    4e28:	ff e3       	ldi	r31, 0x3F	; 63
    4e2a:	20 81       	ld	r18, Z
    4e2c:	31 81       	ldd	r19, Z+1	; 0x01
    4e2e:	80 50       	subi	r24, 0x00	; 0
    4e30:	9c 4f       	sbci	r25, 0xFC	; 252
    4e32:	82 1b       	sub	r24, r18
    4e34:	93 0b       	sbc	r25, r19
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    4e36:	00 97       	sbiw	r24, 0x00	; 0
    4e38:	09 f6       	brne	.-126    	; 0x4dbc <uart_enqueue_string+0x1d4>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    4e3a:	d7 01       	movw	r26, r14
    4e3c:	8d 91       	ld	r24, X+
    4e3e:	9c 91       	ld	r25, X
    4e40:	11 97       	sbiw	r26, 0x01	; 1
    4e42:	ea e0       	ldi	r30, 0x0A	; 10
    4e44:	ff e3       	ldi	r31, 0x3F	; 63
    4e46:	20 81       	ld	r18, Z
    4e48:	31 81       	ldd	r19, Z+1	; 0x01
    4e4a:	82 17       	cp	r24, r18
    4e4c:	93 07       	cpc	r25, r19
    4e4e:	40 f0       	brcs	.+16     	; 0x4e60 <uart_enqueue_string+0x278>
		return (uart_head[idx] - uart_tail[idx]);
    4e50:	8d 91       	ld	r24, X+
    4e52:	9c 91       	ld	r25, X
    4e54:	11 97       	sbiw	r26, 0x01	; 1
    4e56:	20 81       	ld	r18, Z
    4e58:	31 81       	ldd	r19, Z+1	; 0x01
    4e5a:	82 1b       	sub	r24, r18
    4e5c:	93 0b       	sbc	r25, r19
    4e5e:	0c c0       	rjmp	.+24     	; 0x4e78 <uart_enqueue_string+0x290>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    4e60:	d7 01       	movw	r26, r14
    4e62:	8d 91       	ld	r24, X+
    4e64:	9c 91       	ld	r25, X
    4e66:	11 97       	sbiw	r26, 0x01	; 1
    4e68:	ea e0       	ldi	r30, 0x0A	; 10
    4e6a:	ff e3       	ldi	r31, 0x3F	; 63
    4e6c:	20 81       	ld	r18, Z
    4e6e:	31 81       	ldd	r19, Z+1	; 0x01
    4e70:	80 50       	subi	r24, 0x00	; 0
    4e72:	9c 4f       	sbci	r25, 0xFC	; 252
    4e74:	82 1b       	sub	r24, r18
    4e76:	93 0b       	sbc	r25, r19
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
	}
	//disable the tx outgoing hardware buffer ready interrupt if we have nothing more to put in it.
	if(uart_count(port)>0) uart_txbuffer_enable(port);
    4e78:	00 97       	sbiw	r24, 0x00	; 0
    4e7a:	21 f0       	breq	.+8      	; 0x4e84 <uart_enqueue_string+0x29c>
    4e7c:	c8 01       	movw	r24, r16
    4e7e:	0e 94 55 1c 	call	0x38aa	; 0x38aa <uart_txbuffer_enable>
    4e82:	03 c0       	rjmp	.+6      	; 0x4e8a <uart_enqueue_string+0x2a2>
	else uart_txbuffer_disable(port);
    4e84:	c8 01       	movw	r24, r16
    4e86:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <uart_txbuffer_disable>
#ifndef UART_DEBUG
	uint8_t idx = port_map(port);
	
	//if (idx==0){uart_enqueue(&uctrl, datain);} //xxx
	
	uart_buffer[idx][uart_head[idx]] = datain;
    4e8a:	d7 01       	movw	r26, r14
    4e8c:	8d 91       	ld	r24, X+
    4e8e:	9c 91       	ld	r25, X
    4e90:	11 97       	sbiw	r26, 0x01	; 1
    4e92:	80 50       	subi	r24, 0x00	; 0
    4e94:	95 4c       	sbci	r25, 0xC5	; 197
    4e96:	fc 01       	movw	r30, r24
    4e98:	b0 82       	st	Z, r11
	uart_head[idx]++;
    4e9a:	8d 91       	ld	r24, X+
    4e9c:	9c 91       	ld	r25, X
    4e9e:	11 97       	sbiw	r26, 0x01	; 1
    4ea0:	01 96       	adiw	r24, 0x01	; 1
    4ea2:	8d 93       	st	X+, r24
    4ea4:	9c 93       	st	X, r25
    4ea6:	11 97       	sbiw	r26, 0x01	; 1
	if (uart_head[idx] >= MAX_BUFFER_LEN){
    4ea8:	8d 91       	ld	r24, X+
    4eaa:	9c 91       	ld	r25, X
    4eac:	11 97       	sbiw	r26, 0x01	; 1
    4eae:	f4 e0       	ldi	r31, 0x04	; 4
    4eb0:	80 30       	cpi	r24, 0x00	; 0
    4eb2:	9f 07       	cpc	r25, r31
    4eb4:	18 f0       	brcs	.+6      	; 0x4ebc <uart_enqueue_string+0x2d4>
		uart_head[idx] = 0;
    4eb6:	1d 92       	st	X+, r1
    4eb8:	1c 92       	st	X, r1
    4eba:	11 97       	sbiw	r26, 0x01	; 1
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    4ebc:	d8 01       	movw	r26, r16
    4ebe:	11 96       	adiw	r26, 0x01	; 1
    4ec0:	8c 91       	ld	r24, X
    4ec2:	11 97       	sbiw	r26, 0x01	; 1
    4ec4:	85 fd       	sbrc	r24, 5
    4ec6:	1f c0       	rjmp	.+62     	; 0x4f06 <uart_enqueue_string+0x31e>
    4ec8:	3f c0       	rjmp	.+126    	; 0x4f48 <uart_enqueue_string+0x360>
}

inline uint8_t uart_dequeue(USART_t* port){
	uint8_t idx = port_map(port);
	uint16_t oldtail;
	oldtail = uart_tail[idx];
    4eca:	aa e0       	ldi	r26, 0x0A	; 10
    4ecc:	bf e3       	ldi	r27, 0x3F	; 63
    4ece:	ed 91       	ld	r30, X+
    4ed0:	fc 91       	ld	r31, X
    4ed2:	11 97       	sbiw	r26, 0x01	; 1
	uart_tail[idx]++;
    4ed4:	8d 91       	ld	r24, X+
    4ed6:	9c 91       	ld	r25, X
    4ed8:	11 97       	sbiw	r26, 0x01	; 1
    4eda:	01 96       	adiw	r24, 0x01	; 1
    4edc:	8d 93       	st	X+, r24
    4ede:	9c 93       	st	X, r25
    4ee0:	11 97       	sbiw	r26, 0x01	; 1
	if (uart_tail[idx] >= MAX_BUFFER_LEN){
    4ee2:	8d 91       	ld	r24, X+
    4ee4:	9c 91       	ld	r25, X
    4ee6:	11 97       	sbiw	r26, 0x01	; 1
    4ee8:	b4 e0       	ldi	r27, 0x04	; 4
    4eea:	80 30       	cpi	r24, 0x00	; 0
    4eec:	9b 07       	cpc	r25, r27
    4eee:	18 f0       	brcs	.+6      	; 0x4ef6 <uart_enqueue_string+0x30e>
		uart_tail[idx] = 0;
    4ef0:	1d 92       	st	X+, r1
    4ef2:	1c 92       	st	X, r1
    4ef4:	11 97       	sbiw	r26, 0x01	; 1
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    4ef6:	e0 50       	subi	r30, 0x00	; 0
    4ef8:	f5 4c       	sbci	r31, 0xC5	; 197
    4efa:	80 81       	ld	r24, Z
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
    4efc:	f8 01       	movw	r30, r16
    4efe:	80 83       	st	Z, r24
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    4f00:	81 81       	ldd	r24, Z+1	; 0x01
    4f02:	85 ff       	sbrs	r24, 5
    4f04:	21 c0       	rjmp	.+66     	; 0x4f48 <uart_enqueue_string+0x360>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    4f06:	d7 01       	movw	r26, r14
    4f08:	8d 91       	ld	r24, X+
    4f0a:	9c 91       	ld	r25, X
    4f0c:	11 97       	sbiw	r26, 0x01	; 1
    4f0e:	ea e0       	ldi	r30, 0x0A	; 10
    4f10:	ff e3       	ldi	r31, 0x3F	; 63
    4f12:	20 81       	ld	r18, Z
    4f14:	31 81       	ldd	r19, Z+1	; 0x01
    4f16:	82 17       	cp	r24, r18
    4f18:	93 07       	cpc	r25, r19
    4f1a:	40 f0       	brcs	.+16     	; 0x4f2c <uart_enqueue_string+0x344>
		return (uart_head[idx] - uart_tail[idx]);
    4f1c:	8d 91       	ld	r24, X+
    4f1e:	9c 91       	ld	r25, X
    4f20:	11 97       	sbiw	r26, 0x01	; 1
    4f22:	20 81       	ld	r18, Z
    4f24:	31 81       	ldd	r19, Z+1	; 0x01
    4f26:	82 1b       	sub	r24, r18
    4f28:	93 0b       	sbc	r25, r19
    4f2a:	0c c0       	rjmp	.+24     	; 0x4f44 <uart_enqueue_string+0x35c>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    4f2c:	d7 01       	movw	r26, r14
    4f2e:	8d 91       	ld	r24, X+
    4f30:	9c 91       	ld	r25, X
    4f32:	11 97       	sbiw	r26, 0x01	; 1
    4f34:	ea e0       	ldi	r30, 0x0A	; 10
    4f36:	ff e3       	ldi	r31, 0x3F	; 63
    4f38:	20 81       	ld	r18, Z
    4f3a:	31 81       	ldd	r19, Z+1	; 0x01
    4f3c:	80 50       	subi	r24, 0x00	; 0
    4f3e:	9c 4f       	sbci	r25, 0xFC	; 252
    4f40:	82 1b       	sub	r24, r18
    4f42:	93 0b       	sbc	r25, r19
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    4f44:	00 97       	sbiw	r24, 0x00	; 0
    4f46:	09 f6       	brne	.-126    	; 0x4eca <uart_enqueue_string+0x2e2>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    4f48:	d7 01       	movw	r26, r14
    4f4a:	8d 91       	ld	r24, X+
    4f4c:	9c 91       	ld	r25, X
    4f4e:	11 97       	sbiw	r26, 0x01	; 1
    4f50:	ea e0       	ldi	r30, 0x0A	; 10
    4f52:	ff e3       	ldi	r31, 0x3F	; 63
    4f54:	20 81       	ld	r18, Z
    4f56:	31 81       	ldd	r19, Z+1	; 0x01
    4f58:	82 17       	cp	r24, r18
    4f5a:	93 07       	cpc	r25, r19
    4f5c:	40 f0       	brcs	.+16     	; 0x4f6e <uart_enqueue_string+0x386>
		return (uart_head[idx] - uart_tail[idx]);
    4f5e:	8d 91       	ld	r24, X+
    4f60:	9c 91       	ld	r25, X
    4f62:	11 97       	sbiw	r26, 0x01	; 1
    4f64:	20 81       	ld	r18, Z
    4f66:	31 81       	ldd	r19, Z+1	; 0x01
    4f68:	82 1b       	sub	r24, r18
    4f6a:	93 0b       	sbc	r25, r19
    4f6c:	0c c0       	rjmp	.+24     	; 0x4f86 <uart_enqueue_string+0x39e>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    4f6e:	d7 01       	movw	r26, r14
    4f70:	8d 91       	ld	r24, X+
    4f72:	9c 91       	ld	r25, X
    4f74:	11 97       	sbiw	r26, 0x01	; 1
    4f76:	ea e0       	ldi	r30, 0x0A	; 10
    4f78:	ff e3       	ldi	r31, 0x3F	; 63
    4f7a:	20 81       	ld	r18, Z
    4f7c:	31 81       	ldd	r19, Z+1	; 0x01
    4f7e:	80 50       	subi	r24, 0x00	; 0
    4f80:	9c 4f       	sbci	r25, 0xFC	; 252
    4f82:	82 1b       	sub	r24, r18
    4f84:	93 0b       	sbc	r25, r19
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
	}
	//disable the tx outgoing hardware buffer ready interrupt if we have nothing more to put in it.
	if(uart_count(port)>0) uart_txbuffer_enable(port);
    4f86:	00 97       	sbiw	r24, 0x00	; 0
    4f88:	21 f0       	breq	.+8      	; 0x4f92 <uart_enqueue_string+0x3aa>
    4f8a:	c8 01       	movw	r24, r16
    4f8c:	0e 94 55 1c 	call	0x38aa	; 0x38aa <uart_txbuffer_enable>
    4f90:	03 c0       	rjmp	.+6      	; 0x4f98 <uart_enqueue_string+0x3b0>
	else uart_txbuffer_disable(port);
    4f92:	c8 01       	movw	r24, r16
    4f94:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <uart_txbuffer_disable>
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0) && (lcd_flow_control == LCD_READY)){
		toSend = uart_dequeue(port);
		if (toSend == 0x0D) {lcd_flow_control = LCD_BUSY;}
		uart_enqueue(&udata, '`'); //xxx - echo to data port
		uart_enqueue(&udata, toSend); //xxx - echo to data port
		port->DATA = toSend;
    4f98:	d6 01       	movw	r26, r12
    4f9a:	bc 92       	st	X, r11
}

void inline uart_transmit_lcd(USART_t* port){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0) && (lcd_flow_control == LCD_READY)){
    4f9c:	11 96       	adiw	r26, 0x01	; 1
    4f9e:	8c 91       	ld	r24, X
    4fa0:	11 97       	sbiw	r26, 0x01	; 1
    4fa2:	85 fd       	sbrc	r24, 5
    4fa4:	07 c0       	rjmp	.+14     	; 0x4fb4 <uart_enqueue_string+0x3cc>
    4fa6:	55 c0       	rjmp	.+170    	; 0x5052 <uart_enqueue_string+0x46a>
#ifndef UART_DEBUG
	uint8_t idx = port_map(port);
	
	//if (idx==0){uart_enqueue(&uctrl, datain);} //xxx
	
	uart_buffer[idx][uart_head[idx]] = datain;
    4fa8:	0f 2e       	mov	r0, r31
    4faa:	f0 e6       	ldi	r31, 0x60	; 96
    4fac:	af 2e       	mov	r10, r31
    4fae:	f0 2d       	mov	r31, r0
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    4fb0:	00 eb       	ldi	r16, 0xB0	; 176
    4fb2:	18 e0       	ldi	r17, 0x08	; 8
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    4fb4:	b0 eb       	ldi	r27, 0xB0	; 176
    4fb6:	cb 16       	cp	r12, r27
    4fb8:	bb e0       	ldi	r27, 0x0B	; 11
    4fba:	db 06       	cpc	r13, r27
    4fbc:	61 f0       	breq	.+24     	; 0x4fd6 <uart_enqueue_string+0x3ee>
	if (port == &uctrl) {return 1;}
    4fbe:	e0 ea       	ldi	r30, 0xA0	; 160
    4fc0:	ce 16       	cp	r12, r30
    4fc2:	e8 e0       	ldi	r30, 0x08	; 8
    4fc4:	de 06       	cpc	r13, r30
    4fc6:	49 f0       	breq	.+18     	; 0x4fda <uart_enqueue_string+0x3f2>
	if (port == &udata) {return 2;}
    4fc8:	f0 eb       	ldi	r31, 0xB0	; 176
    4fca:	cf 16       	cp	r12, r31
    4fcc:	f8 e0       	ldi	r31, 0x08	; 8
    4fce:	df 06       	cpc	r13, r31
    4fd0:	31 f4       	brne	.+12     	; 0x4fde <uart_enqueue_string+0x3f6>
    4fd2:	22 e0       	ldi	r18, 0x02	; 2
    4fd4:	05 c0       	rjmp	.+10     	; 0x4fe0 <uart_enqueue_string+0x3f8>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    4fd6:	20 e0       	ldi	r18, 0x00	; 0
    4fd8:	03 c0       	rjmp	.+6      	; 0x4fe0 <uart_enqueue_string+0x3f8>
	if (port == &uctrl) {return 1;}
    4fda:	21 e0       	ldi	r18, 0x01	; 1
    4fdc:	01 c0       	rjmp	.+2      	; 0x4fe0 <uart_enqueue_string+0x3f8>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    4fde:	20 e0       	ldi	r18, 0x00	; 0
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    4fe0:	30 e0       	ldi	r19, 0x00	; 0
    4fe2:	c9 01       	movw	r24, r18
    4fe4:	88 0f       	add	r24, r24
    4fe6:	99 1f       	adc	r25, r25
    4fe8:	f3 01       	movw	r30, r6
    4fea:	e8 0f       	add	r30, r24
    4fec:	f9 1f       	adc	r31, r25
    4fee:	40 81       	ld	r20, Z
    4ff0:	51 81       	ldd	r21, Z+1	; 0x01
    4ff2:	f4 01       	movw	r30, r8
    4ff4:	e8 0f       	add	r30, r24
    4ff6:	f9 1f       	adc	r31, r25
    4ff8:	80 81       	ld	r24, Z
    4ffa:	91 81       	ldd	r25, Z+1	; 0x01
    4ffc:	48 17       	cp	r20, r24
    4ffe:	59 07       	cpc	r21, r25
    5000:	88 f0       	brcs	.+34     	; 0x5024 <uart_enqueue_string+0x43c>
		return (uart_head[idx] - uart_tail[idx]);
    5002:	22 0f       	add	r18, r18
    5004:	33 1f       	adc	r19, r19
    5006:	f3 01       	movw	r30, r6
    5008:	e2 0f       	add	r30, r18
    500a:	f3 1f       	adc	r31, r19
    500c:	40 81       	ld	r20, Z
    500e:	51 81       	ldd	r21, Z+1	; 0x01
    5010:	f4 01       	movw	r30, r8
    5012:	e2 0f       	add	r30, r18
    5014:	f3 1f       	adc	r31, r19
    5016:	80 81       	ld	r24, Z
    5018:	91 81       	ldd	r25, Z+1	; 0x01
    501a:	9a 01       	movw	r18, r20
    501c:	28 1b       	sub	r18, r24
    501e:	39 0b       	sbc	r19, r25
    5020:	c9 01       	movw	r24, r18
    5022:	10 c0       	rjmp	.+32     	; 0x5044 <uart_enqueue_string+0x45c>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    5024:	22 0f       	add	r18, r18
    5026:	33 1f       	adc	r19, r19
    5028:	f3 01       	movw	r30, r6
    502a:	e2 0f       	add	r30, r18
    502c:	f3 1f       	adc	r31, r19
    502e:	80 81       	ld	r24, Z
    5030:	91 81       	ldd	r25, Z+1	; 0x01
    5032:	f4 01       	movw	r30, r8
    5034:	e2 0f       	add	r30, r18
    5036:	f3 1f       	adc	r31, r19
    5038:	20 81       	ld	r18, Z
    503a:	31 81       	ldd	r19, Z+1	; 0x01
    503c:	80 50       	subi	r24, 0x00	; 0
    503e:	9c 4f       	sbci	r25, 0xFC	; 252
    5040:	82 1b       	sub	r24, r18
    5042:	93 0b       	sbc	r25, r19
}

void inline uart_transmit_lcd(USART_t* port){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0) && (lcd_flow_control == LCD_READY)){
    5044:	00 97       	sbiw	r24, 0x00	; 0
    5046:	29 f0       	breq	.+10     	; 0x5052 <uart_enqueue_string+0x46a>
    5048:	80 91 e2 26 	lds	r24, 0x26E2
    504c:	82 35       	cpi	r24, 0x52	; 82
    504e:	09 f4       	brne	.+2      	; 0x5052 <uart_enqueue_string+0x46a>
    5050:	58 ce       	rjmp	.-848    	; 0x4d02 <uart_enqueue_string+0x11a>
		if (toSend == 0x0D) {lcd_flow_control = LCD_BUSY;}
		uart_enqueue(&udata, '`'); //xxx - echo to data port
		uart_enqueue(&udata, toSend); //xxx - echo to data port
		port->DATA = toSend;
	}
	uart_txbuffer_disable(port); //implemented this way to prevent periodic stalls that happen when uart_txbuffer isn't disabled quickly enough
    5052:	c6 01       	movw	r24, r12
    5054:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <uart_txbuffer_disable>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    5058:	30 eb       	ldi	r19, 0xB0	; 176
    505a:	c3 16       	cp	r12, r19
    505c:	3b e0       	ldi	r19, 0x0B	; 11
    505e:	d3 06       	cpc	r13, r19
    5060:	61 f0       	breq	.+24     	; 0x507a <uart_enqueue_string+0x492>
	if (port == &uctrl) {return 1;}
    5062:	60 ea       	ldi	r22, 0xA0	; 160
    5064:	c6 16       	cp	r12, r22
    5066:	68 e0       	ldi	r22, 0x08	; 8
    5068:	d6 06       	cpc	r13, r22
    506a:	49 f0       	breq	.+18     	; 0x507e <uart_enqueue_string+0x496>
	if (port == &udata) {return 2;}
    506c:	80 eb       	ldi	r24, 0xB0	; 176
    506e:	c8 16       	cp	r12, r24
    5070:	88 e0       	ldi	r24, 0x08	; 8
    5072:	d8 06       	cpc	r13, r24
    5074:	31 f4       	brne	.+12     	; 0x5082 <uart_enqueue_string+0x49a>
    5076:	82 e0       	ldi	r24, 0x02	; 2
    5078:	05 c0       	rjmp	.+10     	; 0x5084 <uart_enqueue_string+0x49c>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    507a:	80 e0       	ldi	r24, 0x00	; 0
    507c:	03 c0       	rjmp	.+6      	; 0x5084 <uart_enqueue_string+0x49c>
	if (port == &uctrl) {return 1;}
    507e:	81 e0       	ldi	r24, 0x01	; 1
    5080:	01 c0       	rjmp	.+2      	; 0x5084 <uart_enqueue_string+0x49c>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    5082:	80 e0       	ldi	r24, 0x00	; 0
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    5084:	28 2f       	mov	r18, r24
    5086:	30 e0       	ldi	r19, 0x00	; 0
    5088:	c9 01       	movw	r24, r18
    508a:	88 0f       	add	r24, r24
    508c:	99 1f       	adc	r25, r25
    508e:	f3 01       	movw	r30, r6
    5090:	e8 0f       	add	r30, r24
    5092:	f9 1f       	adc	r31, r25
    5094:	40 81       	ld	r20, Z
    5096:	51 81       	ldd	r21, Z+1	; 0x01
    5098:	f4 01       	movw	r30, r8
    509a:	e8 0f       	add	r30, r24
    509c:	f9 1f       	adc	r31, r25
    509e:	80 81       	ld	r24, Z
    50a0:	91 81       	ldd	r25, Z+1	; 0x01
    50a2:	48 17       	cp	r20, r24
    50a4:	59 07       	cpc	r21, r25
    50a6:	88 f0       	brcs	.+34     	; 0x50ca <uart_enqueue_string+0x4e2>
		return (uart_head[idx] - uart_tail[idx]);
    50a8:	22 0f       	add	r18, r18
    50aa:	33 1f       	adc	r19, r19
    50ac:	f3 01       	movw	r30, r6
    50ae:	e2 0f       	add	r30, r18
    50b0:	f3 1f       	adc	r31, r19
    50b2:	40 81       	ld	r20, Z
    50b4:	51 81       	ldd	r21, Z+1	; 0x01
    50b6:	f4 01       	movw	r30, r8
    50b8:	e2 0f       	add	r30, r18
    50ba:	f3 1f       	adc	r31, r19
    50bc:	80 81       	ld	r24, Z
    50be:	91 81       	ldd	r25, Z+1	; 0x01
    50c0:	da 01       	movw	r26, r20
    50c2:	a8 1b       	sub	r26, r24
    50c4:	b9 0b       	sbc	r27, r25
    50c6:	cd 01       	movw	r24, r26
    50c8:	10 c0       	rjmp	.+32     	; 0x50ea <uart_enqueue_string+0x502>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    50ca:	22 0f       	add	r18, r18
    50cc:	33 1f       	adc	r19, r19
    50ce:	f3 01       	movw	r30, r6
    50d0:	e2 0f       	add	r30, r18
    50d2:	f3 1f       	adc	r31, r19
    50d4:	80 81       	ld	r24, Z
    50d6:	91 81       	ldd	r25, Z+1	; 0x01
    50d8:	f4 01       	movw	r30, r8
    50da:	e2 0f       	add	r30, r18
    50dc:	f3 1f       	adc	r31, r19
    50de:	20 81       	ld	r18, Z
    50e0:	31 81       	ldd	r19, Z+1	; 0x01
    50e2:	80 50       	subi	r24, 0x00	; 0
    50e4:	9c 4f       	sbci	r25, 0xFC	; 252
    50e6:	82 1b       	sub	r24, r18
    50e8:	93 0b       	sbc	r25, r19
		uart_enqueue(&udata, '`'); //xxx - echo to data port
		uart_enqueue(&udata, toSend); //xxx - echo to data port
		port->DATA = toSend;
	}
	uart_txbuffer_disable(port); //implemented this way to prevent periodic stalls that happen when uart_txbuffer isn't disabled quickly enough
	if ((uart_count(port)>0) && (lcd_flow_control == LCD_READY)){ //...something is waiting to go out
    50ea:	00 97       	sbiw	r24, 0x00	; 0
    50ec:	09 f4       	brne	.+2      	; 0x50f0 <uart_enqueue_string+0x508>
    50ee:	e3 c0       	rjmp	.+454    	; 0x52b6 <uart_enqueue_string+0x6ce>
    50f0:	80 91 e2 26 	lds	r24, 0x26E2
    50f4:	82 35       	cpi	r24, 0x52	; 82
    50f6:	09 f0       	breq	.+2      	; 0x50fa <uart_enqueue_string+0x512>
    50f8:	de c0       	rjmp	.+444    	; 0x52b6 <uart_enqueue_string+0x6ce>
		uart_txbuffer_enable(port);	
    50fa:	c6 01       	movw	r24, r12
    50fc:	0e 94 55 1c 	call	0x38aa	; 0x38aa <uart_txbuffer_enable>
    5100:	da c0       	rjmp	.+436    	; 0x52b6 <uart_enqueue_string+0x6ce>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    5102:	b0 eb       	ldi	r27, 0xB0	; 176
    5104:	cb 16       	cp	r12, r27
    5106:	bb e0       	ldi	r27, 0x0B	; 11
    5108:	db 06       	cpc	r13, r27
    510a:	61 f0       	breq	.+24     	; 0x5124 <uart_enqueue_string+0x53c>
	if (port == &uctrl) {return 1;}
    510c:	e0 ea       	ldi	r30, 0xA0	; 160
    510e:	ce 16       	cp	r12, r30
    5110:	e8 e0       	ldi	r30, 0x08	; 8
    5112:	de 06       	cpc	r13, r30
    5114:	49 f0       	breq	.+18     	; 0x5128 <uart_enqueue_string+0x540>
	if (port == &udata) {return 2;}
    5116:	f0 eb       	ldi	r31, 0xB0	; 176
    5118:	cf 16       	cp	r12, r31
    511a:	f8 e0       	ldi	r31, 0x08	; 8
    511c:	df 06       	cpc	r13, r31
    511e:	31 f4       	brne	.+12     	; 0x512c <uart_enqueue_string+0x544>
    5120:	22 e0       	ldi	r18, 0x02	; 2
    5122:	05 c0       	rjmp	.+10     	; 0x512e <uart_enqueue_string+0x546>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    5124:	20 e0       	ldi	r18, 0x00	; 0
    5126:	03 c0       	rjmp	.+6      	; 0x512e <uart_enqueue_string+0x546>
	if (port == &uctrl) {return 1;}
    5128:	21 e0       	ldi	r18, 0x01	; 1
    512a:	01 c0       	rjmp	.+2      	; 0x512e <uart_enqueue_string+0x546>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    512c:	20 e0       	ldi	r18, 0x00	; 0
}

inline uint8_t uart_dequeue(USART_t* port){
	uint8_t idx = port_map(port);
	uint16_t oldtail;
	oldtail = uart_tail[idx];
    512e:	30 e0       	ldi	r19, 0x00	; 0
    5130:	c9 01       	movw	r24, r18
    5132:	88 0f       	add	r24, r24
    5134:	99 1f       	adc	r25, r25
    5136:	f4 01       	movw	r30, r8
    5138:	e8 0f       	add	r30, r24
    513a:	f9 1f       	adc	r31, r25
    513c:	40 81       	ld	r20, Z
    513e:	51 81       	ldd	r21, Z+1	; 0x01
	uart_tail[idx]++;
    5140:	80 81       	ld	r24, Z
    5142:	91 81       	ldd	r25, Z+1	; 0x01
    5144:	01 96       	adiw	r24, 0x01	; 1
    5146:	80 83       	st	Z, r24
    5148:	91 83       	std	Z+1, r25	; 0x01
	if (uart_tail[idx] >= MAX_BUFFER_LEN){
    514a:	80 81       	ld	r24, Z
    514c:	91 81       	ldd	r25, Z+1	; 0x01
    514e:	64 e0       	ldi	r22, 0x04	; 4
    5150:	80 30       	cpi	r24, 0x00	; 0
    5152:	96 07       	cpc	r25, r22
    5154:	10 f0       	brcs	.+4      	; 0x515a <uart_enqueue_string+0x572>
		uart_tail[idx] = 0;
    5156:	10 82       	st	Z, r1
    5158:	11 82       	std	Z+1, r1	; 0x01
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    515a:	c9 01       	movw	r24, r18
    515c:	98 2f       	mov	r25, r24
    515e:	88 27       	eor	r24, r24
    5160:	99 0f       	add	r25, r25
    5162:	99 0f       	add	r25, r25
    5164:	84 0f       	add	r24, r20
    5166:	95 1f       	adc	r25, r21
    5168:	84 0d       	add	r24, r4
    516a:	95 1d       	adc	r25, r5
    516c:	fc 01       	movw	r30, r24
    516e:	80 81       	ld	r24, Z
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
    5170:	d6 01       	movw	r26, r12
    5172:	8c 93       	st	X, r24
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    5174:	11 96       	adiw	r26, 0x01	; 1
    5176:	8c 91       	ld	r24, X
    5178:	11 97       	sbiw	r26, 0x01	; 1
    517a:	85 ff       	sbrs	r24, 5
    517c:	4b c0       	rjmp	.+150    	; 0x5214 <uart_enqueue_string+0x62c>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    517e:	b0 eb       	ldi	r27, 0xB0	; 176
    5180:	cb 16       	cp	r12, r27
    5182:	bb e0       	ldi	r27, 0x0B	; 11
    5184:	db 06       	cpc	r13, r27
    5186:	61 f0       	breq	.+24     	; 0x51a0 <uart_enqueue_string+0x5b8>
	if (port == &uctrl) {return 1;}
    5188:	e0 ea       	ldi	r30, 0xA0	; 160
    518a:	ce 16       	cp	r12, r30
    518c:	e8 e0       	ldi	r30, 0x08	; 8
    518e:	de 06       	cpc	r13, r30
    5190:	49 f0       	breq	.+18     	; 0x51a4 <uart_enqueue_string+0x5bc>
	if (port == &udata) {return 2;}
    5192:	f0 eb       	ldi	r31, 0xB0	; 176
    5194:	cf 16       	cp	r12, r31
    5196:	f8 e0       	ldi	r31, 0x08	; 8
    5198:	df 06       	cpc	r13, r31
    519a:	31 f4       	brne	.+12     	; 0x51a8 <uart_enqueue_string+0x5c0>
    519c:	22 e0       	ldi	r18, 0x02	; 2
    519e:	05 c0       	rjmp	.+10     	; 0x51aa <uart_enqueue_string+0x5c2>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    51a0:	20 e0       	ldi	r18, 0x00	; 0
    51a2:	03 c0       	rjmp	.+6      	; 0x51aa <uart_enqueue_string+0x5c2>
	if (port == &uctrl) {return 1;}
    51a4:	21 e0       	ldi	r18, 0x01	; 1
    51a6:	01 c0       	rjmp	.+2      	; 0x51aa <uart_enqueue_string+0x5c2>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    51a8:	20 e0       	ldi	r18, 0x00	; 0
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    51aa:	30 e0       	ldi	r19, 0x00	; 0
    51ac:	c9 01       	movw	r24, r18
    51ae:	88 0f       	add	r24, r24
    51b0:	99 1f       	adc	r25, r25
    51b2:	f3 01       	movw	r30, r6
    51b4:	e8 0f       	add	r30, r24
    51b6:	f9 1f       	adc	r31, r25
    51b8:	40 81       	ld	r20, Z
    51ba:	51 81       	ldd	r21, Z+1	; 0x01
    51bc:	f4 01       	movw	r30, r8
    51be:	e8 0f       	add	r30, r24
    51c0:	f9 1f       	adc	r31, r25
    51c2:	80 81       	ld	r24, Z
    51c4:	91 81       	ldd	r25, Z+1	; 0x01
    51c6:	48 17       	cp	r20, r24
    51c8:	59 07       	cpc	r21, r25
    51ca:	88 f0       	brcs	.+34     	; 0x51ee <uart_enqueue_string+0x606>
		return (uart_head[idx] - uart_tail[idx]);
    51cc:	22 0f       	add	r18, r18
    51ce:	33 1f       	adc	r19, r19
    51d0:	f3 01       	movw	r30, r6
    51d2:	e2 0f       	add	r30, r18
    51d4:	f3 1f       	adc	r31, r19
    51d6:	40 81       	ld	r20, Z
    51d8:	51 81       	ldd	r21, Z+1	; 0x01
    51da:	f4 01       	movw	r30, r8
    51dc:	e2 0f       	add	r30, r18
    51de:	f3 1f       	adc	r31, r19
    51e0:	80 81       	ld	r24, Z
    51e2:	91 81       	ldd	r25, Z+1	; 0x01
    51e4:	9a 01       	movw	r18, r20
    51e6:	28 1b       	sub	r18, r24
    51e8:	39 0b       	sbc	r19, r25
    51ea:	c9 01       	movw	r24, r18
    51ec:	10 c0       	rjmp	.+32     	; 0x520e <uart_enqueue_string+0x626>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    51ee:	22 0f       	add	r18, r18
    51f0:	33 1f       	adc	r19, r19
    51f2:	f3 01       	movw	r30, r6
    51f4:	e2 0f       	add	r30, r18
    51f6:	f3 1f       	adc	r31, r19
    51f8:	80 81       	ld	r24, Z
    51fa:	91 81       	ldd	r25, Z+1	; 0x01
    51fc:	f4 01       	movw	r30, r8
    51fe:	e2 0f       	add	r30, r18
    5200:	f3 1f       	adc	r31, r19
    5202:	20 81       	ld	r18, Z
    5204:	31 81       	ldd	r19, Z+1	; 0x01
    5206:	80 50       	subi	r24, 0x00	; 0
    5208:	9c 4f       	sbci	r25, 0xFC	; 252
    520a:	82 1b       	sub	r24, r18
    520c:	93 0b       	sbc	r25, r19
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    520e:	00 97       	sbiw	r24, 0x00	; 0
    5210:	09 f0       	breq	.+2      	; 0x5214 <uart_enqueue_string+0x62c>
    5212:	77 cf       	rjmp	.-274    	; 0x5102 <uart_enqueue_string+0x51a>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    5214:	30 eb       	ldi	r19, 0xB0	; 176
    5216:	c3 16       	cp	r12, r19
    5218:	3b e0       	ldi	r19, 0x0B	; 11
    521a:	d3 06       	cpc	r13, r19
    521c:	61 f0       	breq	.+24     	; 0x5236 <uart_enqueue_string+0x64e>
	if (port == &uctrl) {return 1;}
    521e:	60 ea       	ldi	r22, 0xA0	; 160
    5220:	c6 16       	cp	r12, r22
    5222:	68 e0       	ldi	r22, 0x08	; 8
    5224:	d6 06       	cpc	r13, r22
    5226:	49 f0       	breq	.+18     	; 0x523a <uart_enqueue_string+0x652>
	if (port == &udata) {return 2;}
    5228:	80 eb       	ldi	r24, 0xB0	; 176
    522a:	c8 16       	cp	r12, r24
    522c:	88 e0       	ldi	r24, 0x08	; 8
    522e:	d8 06       	cpc	r13, r24
    5230:	31 f4       	brne	.+12     	; 0x523e <uart_enqueue_string+0x656>
    5232:	22 e0       	ldi	r18, 0x02	; 2
    5234:	05 c0       	rjmp	.+10     	; 0x5240 <uart_enqueue_string+0x658>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    5236:	20 e0       	ldi	r18, 0x00	; 0
    5238:	03 c0       	rjmp	.+6      	; 0x5240 <uart_enqueue_string+0x658>
	if (port == &uctrl) {return 1;}
    523a:	21 e0       	ldi	r18, 0x01	; 1
    523c:	01 c0       	rjmp	.+2      	; 0x5240 <uart_enqueue_string+0x658>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    523e:	20 e0       	ldi	r18, 0x00	; 0
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    5240:	30 e0       	ldi	r19, 0x00	; 0
    5242:	c9 01       	movw	r24, r18
    5244:	88 0f       	add	r24, r24
    5246:	99 1f       	adc	r25, r25
    5248:	f3 01       	movw	r30, r6
    524a:	e8 0f       	add	r30, r24
    524c:	f9 1f       	adc	r31, r25
    524e:	40 81       	ld	r20, Z
    5250:	51 81       	ldd	r21, Z+1	; 0x01
    5252:	f4 01       	movw	r30, r8
    5254:	e8 0f       	add	r30, r24
    5256:	f9 1f       	adc	r31, r25
    5258:	80 81       	ld	r24, Z
    525a:	91 81       	ldd	r25, Z+1	; 0x01
    525c:	48 17       	cp	r20, r24
    525e:	59 07       	cpc	r21, r25
    5260:	88 f0       	brcs	.+34     	; 0x5284 <uart_enqueue_string+0x69c>
		return (uart_head[idx] - uart_tail[idx]);
    5262:	22 0f       	add	r18, r18
    5264:	33 1f       	adc	r19, r19
    5266:	f3 01       	movw	r30, r6
    5268:	e2 0f       	add	r30, r18
    526a:	f3 1f       	adc	r31, r19
    526c:	40 81       	ld	r20, Z
    526e:	51 81       	ldd	r21, Z+1	; 0x01
    5270:	f4 01       	movw	r30, r8
    5272:	e2 0f       	add	r30, r18
    5274:	f3 1f       	adc	r31, r19
    5276:	80 81       	ld	r24, Z
    5278:	91 81       	ldd	r25, Z+1	; 0x01
    527a:	da 01       	movw	r26, r20
    527c:	a8 1b       	sub	r26, r24
    527e:	b9 0b       	sbc	r27, r25
    5280:	cd 01       	movw	r24, r26
    5282:	10 c0       	rjmp	.+32     	; 0x52a4 <uart_enqueue_string+0x6bc>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    5284:	22 0f       	add	r18, r18
    5286:	33 1f       	adc	r19, r19
    5288:	f3 01       	movw	r30, r6
    528a:	e2 0f       	add	r30, r18
    528c:	f3 1f       	adc	r31, r19
    528e:	80 81       	ld	r24, Z
    5290:	91 81       	ldd	r25, Z+1	; 0x01
    5292:	f4 01       	movw	r30, r8
    5294:	e2 0f       	add	r30, r18
    5296:	f3 1f       	adc	r31, r19
    5298:	20 81       	ld	r18, Z
    529a:	31 81       	ldd	r19, Z+1	; 0x01
    529c:	80 50       	subi	r24, 0x00	; 0
    529e:	9c 4f       	sbci	r25, 0xFC	; 252
    52a0:	82 1b       	sub	r24, r18
    52a2:	93 0b       	sbc	r25, r19
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
	}
	//disable the tx outgoing hardware buffer ready interrupt if we have nothing more to put in it.
	if(uart_count(port)>0) uart_txbuffer_enable(port);
    52a4:	00 97       	sbiw	r24, 0x00	; 0
    52a6:	21 f0       	breq	.+8      	; 0x52b0 <uart_enqueue_string+0x6c8>
    52a8:	c6 01       	movw	r24, r12
    52aa:	0e 94 55 1c 	call	0x38aa	; 0x38aa <uart_txbuffer_enable>
    52ae:	03 c0       	rjmp	.+6      	; 0x52b6 <uart_enqueue_string+0x6ce>
	else uart_txbuffer_disable(port);
    52b0:	c6 01       	movw	r24, r12
    52b2:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <uart_txbuffer_disable>
}

///Enqueue a string into the outgoing serial queue. Adds CR terminator to string.
inline void uart_enqueue_string(USART_t* port, char* string_in){
	uint16_t length = (uint16_t)strlen(string_in);
	for (uint16_t i=0; i<length; i++) {uart_enqueue(port, (uint8_t)string_in[i]);}
    52b6:	08 94       	sec
    52b8:	21 1c       	adc	r2, r1
    52ba:	31 1c       	adc	r3, r1
    52bc:	eb 81       	ldd	r30, Y+3	; 0x03
    52be:	fc 81       	ldd	r31, Y+4	; 0x04
    52c0:	2e 16       	cp	r2, r30
    52c2:	3f 06       	cpc	r3, r31
    52c4:	09 f0       	breq	.+2      	; 0x52c8 <uart_enqueue_string+0x6e0>
    52c6:	d2 cc       	rjmp	.-1628   	; 0x4c6c <uart_enqueue_string+0x84>
}
    52c8:	24 96       	adiw	r28, 0x04	; 4
    52ca:	cd bf       	out	0x3d, r28	; 61
    52cc:	de bf       	out	0x3e, r29	; 62
    52ce:	df 91       	pop	r29
    52d0:	cf 91       	pop	r28
    52d2:	1f 91       	pop	r17
    52d4:	0f 91       	pop	r16
    52d6:	ff 90       	pop	r15
    52d8:	ef 90       	pop	r14
    52da:	df 90       	pop	r13
    52dc:	cf 90       	pop	r12
    52de:	bf 90       	pop	r11
    52e0:	af 90       	pop	r10
    52e2:	9f 90       	pop	r9
    52e4:	8f 90       	pop	r8
    52e6:	7f 90       	pop	r7
    52e8:	6f 90       	pop	r6
    52ea:	5f 90       	pop	r5
    52ec:	4f 90       	pop	r4
    52ee:	3f 90       	pop	r3
    52f0:	2f 90       	pop	r2
    52f2:	08 95       	ret

000052f4 <uart_enqueue>:

///Enqueue date into the outgoing serial queue. This data is sent via USB to the PC's first virtual Comm Port associated with the EEICM. 
/**This is the queue used to send data back to the command and control GUI. The #define UART_DEBUG can be used to disable normal serial activity through this queue
	The blue LED is used in this routine to signal buffer overflow, which, due to the real-time scheduled nature of the EEICM firmware architecture, should not happen.
	This function is inactive when in UART DEBUG mode. Calls to this function have no effect during this period.*/
inline void uart_enqueue(USART_t* port, uint8_t datain){
    52f4:	3f 92       	push	r3
    52f6:	4f 92       	push	r4
    52f8:	5f 92       	push	r5
    52fa:	6f 92       	push	r6
    52fc:	7f 92       	push	r7
    52fe:	8f 92       	push	r8
    5300:	9f 92       	push	r9
    5302:	af 92       	push	r10
    5304:	bf 92       	push	r11
    5306:	cf 92       	push	r12
    5308:	df 92       	push	r13
    530a:	ef 92       	push	r14
    530c:	ff 92       	push	r15
    530e:	0f 93       	push	r16
    5310:	1f 93       	push	r17
    5312:	cf 93       	push	r28
    5314:	df 93       	push	r29
    5316:	6c 01       	movw	r12, r24
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    5318:	2b e0       	ldi	r18, 0x0B	; 11
    531a:	80 3b       	cpi	r24, 0xB0	; 176
    531c:	92 07       	cpc	r25, r18
    531e:	59 f0       	breq	.+22     	; 0x5336 <uart_enqueue+0x42>
	if (port == &uctrl) {return 1;}
    5320:	38 e0       	ldi	r19, 0x08	; 8
    5322:	80 3a       	cpi	r24, 0xA0	; 160
    5324:	93 07       	cpc	r25, r19
    5326:	49 f0       	breq	.+18     	; 0x533a <uart_enqueue+0x46>
	if (port == &udata) {return 2;}
    5328:	80 eb       	ldi	r24, 0xB0	; 176
    532a:	c8 16       	cp	r12, r24
    532c:	88 e0       	ldi	r24, 0x08	; 8
    532e:	d8 06       	cpc	r13, r24
    5330:	31 f4       	brne	.+12     	; 0x533e <uart_enqueue+0x4a>
    5332:	42 e0       	ldi	r20, 0x02	; 2
    5334:	05 c0       	rjmp	.+10     	; 0x5340 <uart_enqueue+0x4c>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    5336:	40 e0       	ldi	r20, 0x00	; 0
    5338:	03 c0       	rjmp	.+6      	; 0x5340 <uart_enqueue+0x4c>
	if (port == &uctrl) {return 1;}
    533a:	41 e0       	ldi	r20, 0x01	; 1
    533c:	01 c0       	rjmp	.+2      	; 0x5340 <uart_enqueue+0x4c>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    533e:	40 e0       	ldi	r20, 0x00	; 0
#ifndef UART_DEBUG
	uint8_t idx = port_map(port);
	
	//if (idx==0){uart_enqueue(&uctrl, datain);} //xxx
	
	uart_buffer[idx][uart_head[idx]] = datain;
    5340:	c4 2f       	mov	r28, r20
    5342:	d0 e0       	ldi	r29, 0x00	; 0
    5344:	fe 01       	movw	r30, r28
    5346:	ee 0f       	add	r30, r30
    5348:	ff 1f       	adc	r31, r31
    534a:	e6 50       	subi	r30, 0x06	; 6
    534c:	fd 4c       	sbci	r31, 0xCD	; 205
    534e:	20 81       	ld	r18, Z
    5350:	31 81       	ldd	r19, Z+1	; 0x01
    5352:	ce 01       	movw	r24, r28
    5354:	98 2f       	mov	r25, r24
    5356:	88 27       	eor	r24, r24
    5358:	99 0f       	add	r25, r25
    535a:	99 0f       	add	r25, r25
    535c:	82 0f       	add	r24, r18
    535e:	93 1f       	adc	r25, r19
    5360:	dc 01       	movw	r26, r24
    5362:	a0 50       	subi	r26, 0x00	; 0
    5364:	bd 4c       	sbci	r27, 0xCD	; 205
    5366:	6c 93       	st	X, r22
	uart_head[idx]++;
    5368:	80 81       	ld	r24, Z
    536a:	91 81       	ldd	r25, Z+1	; 0x01
    536c:	01 96       	adiw	r24, 0x01	; 1
    536e:	80 83       	st	Z, r24
    5370:	91 83       	std	Z+1, r25	; 0x01
	if (uart_head[idx] >= MAX_BUFFER_LEN){
    5372:	80 81       	ld	r24, Z
    5374:	91 81       	ldd	r25, Z+1	; 0x01
    5376:	e4 e0       	ldi	r30, 0x04	; 4
    5378:	80 30       	cpi	r24, 0x00	; 0
    537a:	9e 07       	cpc	r25, r30
    537c:	30 f0       	brcs	.+12     	; 0x538a <uart_enqueue+0x96>
		uart_head[idx] = 0;
    537e:	cc 0f       	add	r28, r28
    5380:	dd 1f       	adc	r29, r29
    5382:	c6 50       	subi	r28, 0x06	; 6
    5384:	dd 4c       	sbci	r29, 0xCD	; 205
    5386:	18 82       	st	Y, r1
    5388:	19 82       	std	Y+1, r1	; 0x01
	}
	if (idx == 0){uart_transmit_lcd(port);} //start the transmission process.
    538a:	44 23       	and	r20, r20
    538c:	29 f0       	breq	.+10     	; 0x5398 <uart_enqueue+0xa4>
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    538e:	f6 01       	movw	r30, r12
    5390:	81 81       	ldd	r24, Z+1	; 0x01
    5392:	85 fd       	sbrc	r24, 5
    5394:	2f c2       	rjmp	.+1118   	; 0x57f4 <uart_enqueue+0x500>
    5396:	81 c2       	rjmp	.+1282   	; 0x589a <uart_enqueue+0x5a6>
}

void inline uart_transmit_lcd(USART_t* port){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0) && (lcd_flow_control == LCD_READY)){
    5398:	f6 01       	movw	r30, r12
    539a:	81 81       	ldd	r24, Z+1	; 0x01
    539c:	85 fd       	sbrc	r24, 5
    539e:	1d c1       	rjmp	.+570    	; 0x55da <uart_enqueue+0x2e6>
    53a0:	8f c1       	rjmp	.+798    	; 0x56c0 <uart_enqueue+0x3cc>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    53a2:	f0 eb       	ldi	r31, 0xB0	; 176
    53a4:	cf 16       	cp	r12, r31
    53a6:	fb e0       	ldi	r31, 0x0B	; 11
    53a8:	df 06       	cpc	r13, r31
    53aa:	61 f0       	breq	.+24     	; 0x53c4 <uart_enqueue+0xd0>
	if (port == &uctrl) {return 1;}
    53ac:	20 ea       	ldi	r18, 0xA0	; 160
    53ae:	c2 16       	cp	r12, r18
    53b0:	28 e0       	ldi	r18, 0x08	; 8
    53b2:	d2 06       	cpc	r13, r18
    53b4:	49 f0       	breq	.+18     	; 0x53c8 <uart_enqueue+0xd4>
	if (port == &udata) {return 2;}
    53b6:	30 eb       	ldi	r19, 0xB0	; 176
    53b8:	c3 16       	cp	r12, r19
    53ba:	38 e0       	ldi	r19, 0x08	; 8
    53bc:	d3 06       	cpc	r13, r19
    53be:	31 f4       	brne	.+12     	; 0x53cc <uart_enqueue+0xd8>
    53c0:	22 e0       	ldi	r18, 0x02	; 2
    53c2:	05 c0       	rjmp	.+10     	; 0x53ce <uart_enqueue+0xda>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    53c4:	20 e0       	ldi	r18, 0x00	; 0
    53c6:	03 c0       	rjmp	.+6      	; 0x53ce <uart_enqueue+0xda>
	if (port == &uctrl) {return 1;}
    53c8:	21 e0       	ldi	r18, 0x01	; 1
    53ca:	01 c0       	rjmp	.+2      	; 0x53ce <uart_enqueue+0xda>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    53cc:	20 e0       	ldi	r18, 0x00	; 0
}

inline uint8_t uart_dequeue(USART_t* port){
	uint8_t idx = port_map(port);
	uint16_t oldtail;
	oldtail = uart_tail[idx];
    53ce:	30 e0       	ldi	r19, 0x00	; 0
    53d0:	c9 01       	movw	r24, r18
    53d2:	88 0f       	add	r24, r24
    53d4:	99 1f       	adc	r25, r25
    53d6:	f4 01       	movw	r30, r8
    53d8:	e8 0f       	add	r30, r24
    53da:	f9 1f       	adc	r31, r25
    53dc:	40 81       	ld	r20, Z
    53de:	51 81       	ldd	r21, Z+1	; 0x01
	uart_tail[idx]++;
    53e0:	80 81       	ld	r24, Z
    53e2:	91 81       	ldd	r25, Z+1	; 0x01
    53e4:	01 96       	adiw	r24, 0x01	; 1
    53e6:	80 83       	st	Z, r24
    53e8:	91 83       	std	Z+1, r25	; 0x01
	if (uart_tail[idx] >= MAX_BUFFER_LEN){
    53ea:	80 81       	ld	r24, Z
    53ec:	91 81       	ldd	r25, Z+1	; 0x01
    53ee:	64 e0       	ldi	r22, 0x04	; 4
    53f0:	80 30       	cpi	r24, 0x00	; 0
    53f2:	96 07       	cpc	r25, r22
    53f4:	10 f0       	brcs	.+4      	; 0x53fa <uart_enqueue+0x106>
		uart_tail[idx] = 0;
    53f6:	10 82       	st	Z, r1
    53f8:	11 82       	std	Z+1, r1	; 0x01
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    53fa:	c9 01       	movw	r24, r18
    53fc:	98 2f       	mov	r25, r24
    53fe:	88 27       	eor	r24, r24
    5400:	99 0f       	add	r25, r25
    5402:	99 0f       	add	r25, r25
    5404:	84 0f       	add	r24, r20
    5406:	95 1f       	adc	r25, r21
    5408:	84 0d       	add	r24, r4
    540a:	95 1d       	adc	r25, r5
    540c:	fc 01       	movw	r30, r24
    540e:	b0 80       	ld	r11, Z
void inline uart_transmit_lcd(USART_t* port){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0) && (lcd_flow_control == LCD_READY)){
		toSend = uart_dequeue(port);
		if (toSend == 0x0D) {lcd_flow_control = LCD_BUSY;}
    5410:	fd e0       	ldi	r31, 0x0D	; 13
    5412:	bf 16       	cp	r11, r31
    5414:	11 f4       	brne	.+4      	; 0x541a <uart_enqueue+0x126>
    5416:	30 92 e2 26 	sts	0x26E2, r3
#ifndef UART_DEBUG
	uint8_t idx = port_map(port);
	
	//if (idx==0){uart_enqueue(&uctrl, datain);} //xxx
	
	uart_buffer[idx][uart_head[idx]] = datain;
    541a:	f8 01       	movw	r30, r16
    541c:	80 81       	ld	r24, Z
    541e:	91 81       	ldd	r25, Z+1	; 0x01
    5420:	80 50       	subi	r24, 0x00	; 0
    5422:	95 4c       	sbci	r25, 0xC5	; 197
    5424:	fc 01       	movw	r30, r24
    5426:	a0 82       	st	Z, r10
	uart_head[idx]++;
    5428:	f8 01       	movw	r30, r16
    542a:	80 81       	ld	r24, Z
    542c:	91 81       	ldd	r25, Z+1	; 0x01
    542e:	01 96       	adiw	r24, 0x01	; 1
    5430:	80 83       	st	Z, r24
    5432:	91 83       	std	Z+1, r25	; 0x01
	if (uart_head[idx] >= MAX_BUFFER_LEN){
    5434:	80 81       	ld	r24, Z
    5436:	91 81       	ldd	r25, Z+1	; 0x01
    5438:	f4 e0       	ldi	r31, 0x04	; 4
    543a:	80 30       	cpi	r24, 0x00	; 0
    543c:	9f 07       	cpc	r25, r31
    543e:	18 f0       	brcs	.+6      	; 0x5446 <uart_enqueue+0x152>
		uart_head[idx] = 0;
    5440:	f8 01       	movw	r30, r16
    5442:	10 82       	st	Z, r1
    5444:	11 82       	std	Z+1, r1	; 0x01
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    5446:	f7 01       	movw	r30, r14
    5448:	81 81       	ldd	r24, Z+1	; 0x01
    544a:	85 fd       	sbrc	r24, 5
    544c:	18 c0       	rjmp	.+48     	; 0x547e <uart_enqueue+0x18a>
    544e:	31 c0       	rjmp	.+98     	; 0x54b2 <uart_enqueue+0x1be>
}

inline uint8_t uart_dequeue(USART_t* port){
	uint8_t idx = port_map(port);
	uint16_t oldtail;
	oldtail = uart_tail[idx];
    5450:	e8 81       	ld	r30, Y
    5452:	f9 81       	ldd	r31, Y+1	; 0x01
	uart_tail[idx]++;
    5454:	88 81       	ld	r24, Y
    5456:	99 81       	ldd	r25, Y+1	; 0x01
    5458:	01 96       	adiw	r24, 0x01	; 1
    545a:	88 83       	st	Y, r24
    545c:	99 83       	std	Y+1, r25	; 0x01
	if (uart_tail[idx] >= MAX_BUFFER_LEN){
    545e:	88 81       	ld	r24, Y
    5460:	99 81       	ldd	r25, Y+1	; 0x01
    5462:	24 e0       	ldi	r18, 0x04	; 4
    5464:	80 30       	cpi	r24, 0x00	; 0
    5466:	92 07       	cpc	r25, r18
    5468:	10 f0       	brcs	.+4      	; 0x546e <uart_enqueue+0x17a>
		uart_tail[idx] = 0;
    546a:	18 82       	st	Y, r1
    546c:	19 82       	std	Y+1, r1	; 0x01
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    546e:	e0 50       	subi	r30, 0x00	; 0
    5470:	f5 4c       	sbci	r31, 0xC5	; 197
    5472:	80 81       	ld	r24, Z
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
    5474:	f7 01       	movw	r30, r14
    5476:	80 83       	st	Z, r24
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    5478:	81 81       	ldd	r24, Z+1	; 0x01
    547a:	85 ff       	sbrs	r24, 5
    547c:	1a c0       	rjmp	.+52     	; 0x54b2 <uart_enqueue+0x1be>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    547e:	f8 01       	movw	r30, r16
    5480:	80 81       	ld	r24, Z
    5482:	91 81       	ldd	r25, Z+1	; 0x01
    5484:	28 81       	ld	r18, Y
    5486:	39 81       	ldd	r19, Y+1	; 0x01
    5488:	82 17       	cp	r24, r18
    548a:	93 07       	cpc	r25, r19
    548c:	38 f0       	brcs	.+14     	; 0x549c <uart_enqueue+0x1a8>
		return (uart_head[idx] - uart_tail[idx]);
    548e:	80 81       	ld	r24, Z
    5490:	91 81       	ldd	r25, Z+1	; 0x01
    5492:	28 81       	ld	r18, Y
    5494:	39 81       	ldd	r19, Y+1	; 0x01
    5496:	82 1b       	sub	r24, r18
    5498:	93 0b       	sbc	r25, r19
    549a:	09 c0       	rjmp	.+18     	; 0x54ae <uart_enqueue+0x1ba>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    549c:	f8 01       	movw	r30, r16
    549e:	80 81       	ld	r24, Z
    54a0:	91 81       	ldd	r25, Z+1	; 0x01
    54a2:	28 81       	ld	r18, Y
    54a4:	39 81       	ldd	r19, Y+1	; 0x01
    54a6:	80 50       	subi	r24, 0x00	; 0
    54a8:	9c 4f       	sbci	r25, 0xFC	; 252
    54aa:	82 1b       	sub	r24, r18
    54ac:	93 0b       	sbc	r25, r19
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    54ae:	00 97       	sbiw	r24, 0x00	; 0
    54b0:	79 f6       	brne	.-98     	; 0x5450 <uart_enqueue+0x15c>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    54b2:	f8 01       	movw	r30, r16
    54b4:	80 81       	ld	r24, Z
    54b6:	91 81       	ldd	r25, Z+1	; 0x01
    54b8:	28 81       	ld	r18, Y
    54ba:	39 81       	ldd	r19, Y+1	; 0x01
    54bc:	82 17       	cp	r24, r18
    54be:	93 07       	cpc	r25, r19
    54c0:	38 f0       	brcs	.+14     	; 0x54d0 <uart_enqueue+0x1dc>
		return (uart_head[idx] - uart_tail[idx]);
    54c2:	80 81       	ld	r24, Z
    54c4:	91 81       	ldd	r25, Z+1	; 0x01
    54c6:	28 81       	ld	r18, Y
    54c8:	39 81       	ldd	r19, Y+1	; 0x01
    54ca:	82 1b       	sub	r24, r18
    54cc:	93 0b       	sbc	r25, r19
    54ce:	09 c0       	rjmp	.+18     	; 0x54e2 <uart_enqueue+0x1ee>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    54d0:	f8 01       	movw	r30, r16
    54d2:	80 81       	ld	r24, Z
    54d4:	91 81       	ldd	r25, Z+1	; 0x01
    54d6:	28 81       	ld	r18, Y
    54d8:	39 81       	ldd	r19, Y+1	; 0x01
    54da:	80 50       	subi	r24, 0x00	; 0
    54dc:	9c 4f       	sbci	r25, 0xFC	; 252
    54de:	82 1b       	sub	r24, r18
    54e0:	93 0b       	sbc	r25, r19
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
	}
	//disable the tx outgoing hardware buffer ready interrupt if we have nothing more to put in it.
	if(uart_count(port)>0) uart_txbuffer_enable(port);
    54e2:	00 97       	sbiw	r24, 0x00	; 0
    54e4:	21 f0       	breq	.+8      	; 0x54ee <uart_enqueue+0x1fa>
    54e6:	c7 01       	movw	r24, r14
    54e8:	0e 94 55 1c 	call	0x38aa	; 0x38aa <uart_txbuffer_enable>
    54ec:	03 c0       	rjmp	.+6      	; 0x54f4 <uart_enqueue+0x200>
	else uart_txbuffer_disable(port);
    54ee:	c7 01       	movw	r24, r14
    54f0:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <uart_txbuffer_disable>
#ifndef UART_DEBUG
	uint8_t idx = port_map(port);
	
	//if (idx==0){uart_enqueue(&uctrl, datain);} //xxx
	
	uart_buffer[idx][uart_head[idx]] = datain;
    54f4:	f8 01       	movw	r30, r16
    54f6:	80 81       	ld	r24, Z
    54f8:	91 81       	ldd	r25, Z+1	; 0x01
    54fa:	80 50       	subi	r24, 0x00	; 0
    54fc:	95 4c       	sbci	r25, 0xC5	; 197
    54fe:	fc 01       	movw	r30, r24
    5500:	b0 82       	st	Z, r11
	uart_head[idx]++;
    5502:	f8 01       	movw	r30, r16
    5504:	80 81       	ld	r24, Z
    5506:	91 81       	ldd	r25, Z+1	; 0x01
    5508:	01 96       	adiw	r24, 0x01	; 1
    550a:	80 83       	st	Z, r24
    550c:	91 83       	std	Z+1, r25	; 0x01
	if (uart_head[idx] >= MAX_BUFFER_LEN){
    550e:	80 81       	ld	r24, Z
    5510:	91 81       	ldd	r25, Z+1	; 0x01
    5512:	f4 e0       	ldi	r31, 0x04	; 4
    5514:	80 30       	cpi	r24, 0x00	; 0
    5516:	9f 07       	cpc	r25, r31
    5518:	18 f0       	brcs	.+6      	; 0x5520 <uart_enqueue+0x22c>
		uart_head[idx] = 0;
    551a:	f8 01       	movw	r30, r16
    551c:	10 82       	st	Z, r1
    551e:	11 82       	std	Z+1, r1	; 0x01
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    5520:	f7 01       	movw	r30, r14
    5522:	81 81       	ldd	r24, Z+1	; 0x01
    5524:	85 fd       	sbrc	r24, 5
    5526:	18 c0       	rjmp	.+48     	; 0x5558 <uart_enqueue+0x264>
    5528:	31 c0       	rjmp	.+98     	; 0x558c <uart_enqueue+0x298>
}

inline uint8_t uart_dequeue(USART_t* port){
	uint8_t idx = port_map(port);
	uint16_t oldtail;
	oldtail = uart_tail[idx];
    552a:	e8 81       	ld	r30, Y
    552c:	f9 81       	ldd	r31, Y+1	; 0x01
	uart_tail[idx]++;
    552e:	88 81       	ld	r24, Y
    5530:	99 81       	ldd	r25, Y+1	; 0x01
    5532:	01 96       	adiw	r24, 0x01	; 1
    5534:	88 83       	st	Y, r24
    5536:	99 83       	std	Y+1, r25	; 0x01
	if (uart_tail[idx] >= MAX_BUFFER_LEN){
    5538:	88 81       	ld	r24, Y
    553a:	99 81       	ldd	r25, Y+1	; 0x01
    553c:	24 e0       	ldi	r18, 0x04	; 4
    553e:	80 30       	cpi	r24, 0x00	; 0
    5540:	92 07       	cpc	r25, r18
    5542:	10 f0       	brcs	.+4      	; 0x5548 <uart_enqueue+0x254>
		uart_tail[idx] = 0;
    5544:	18 82       	st	Y, r1
    5546:	19 82       	std	Y+1, r1	; 0x01
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    5548:	e0 50       	subi	r30, 0x00	; 0
    554a:	f5 4c       	sbci	r31, 0xC5	; 197
    554c:	80 81       	ld	r24, Z
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
    554e:	f7 01       	movw	r30, r14
    5550:	80 83       	st	Z, r24
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    5552:	81 81       	ldd	r24, Z+1	; 0x01
    5554:	85 ff       	sbrs	r24, 5
    5556:	1a c0       	rjmp	.+52     	; 0x558c <uart_enqueue+0x298>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    5558:	f8 01       	movw	r30, r16
    555a:	80 81       	ld	r24, Z
    555c:	91 81       	ldd	r25, Z+1	; 0x01
    555e:	28 81       	ld	r18, Y
    5560:	39 81       	ldd	r19, Y+1	; 0x01
    5562:	82 17       	cp	r24, r18
    5564:	93 07       	cpc	r25, r19
    5566:	38 f0       	brcs	.+14     	; 0x5576 <uart_enqueue+0x282>
		return (uart_head[idx] - uart_tail[idx]);
    5568:	80 81       	ld	r24, Z
    556a:	91 81       	ldd	r25, Z+1	; 0x01
    556c:	28 81       	ld	r18, Y
    556e:	39 81       	ldd	r19, Y+1	; 0x01
    5570:	82 1b       	sub	r24, r18
    5572:	93 0b       	sbc	r25, r19
    5574:	09 c0       	rjmp	.+18     	; 0x5588 <uart_enqueue+0x294>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    5576:	f8 01       	movw	r30, r16
    5578:	80 81       	ld	r24, Z
    557a:	91 81       	ldd	r25, Z+1	; 0x01
    557c:	28 81       	ld	r18, Y
    557e:	39 81       	ldd	r19, Y+1	; 0x01
    5580:	80 50       	subi	r24, 0x00	; 0
    5582:	9c 4f       	sbci	r25, 0xFC	; 252
    5584:	82 1b       	sub	r24, r18
    5586:	93 0b       	sbc	r25, r19
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    5588:	00 97       	sbiw	r24, 0x00	; 0
    558a:	79 f6       	brne	.-98     	; 0x552a <uart_enqueue+0x236>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    558c:	f8 01       	movw	r30, r16
    558e:	80 81       	ld	r24, Z
    5590:	91 81       	ldd	r25, Z+1	; 0x01
    5592:	28 81       	ld	r18, Y
    5594:	39 81       	ldd	r19, Y+1	; 0x01
    5596:	82 17       	cp	r24, r18
    5598:	93 07       	cpc	r25, r19
    559a:	38 f0       	brcs	.+14     	; 0x55aa <uart_enqueue+0x2b6>
		return (uart_head[idx] - uart_tail[idx]);
    559c:	80 81       	ld	r24, Z
    559e:	91 81       	ldd	r25, Z+1	; 0x01
    55a0:	28 81       	ld	r18, Y
    55a2:	39 81       	ldd	r19, Y+1	; 0x01
    55a4:	82 1b       	sub	r24, r18
    55a6:	93 0b       	sbc	r25, r19
    55a8:	09 c0       	rjmp	.+18     	; 0x55bc <uart_enqueue+0x2c8>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    55aa:	f8 01       	movw	r30, r16
    55ac:	80 81       	ld	r24, Z
    55ae:	91 81       	ldd	r25, Z+1	; 0x01
    55b0:	28 81       	ld	r18, Y
    55b2:	39 81       	ldd	r19, Y+1	; 0x01
    55b4:	80 50       	subi	r24, 0x00	; 0
    55b6:	9c 4f       	sbci	r25, 0xFC	; 252
    55b8:	82 1b       	sub	r24, r18
    55ba:	93 0b       	sbc	r25, r19
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
	}
	//disable the tx outgoing hardware buffer ready interrupt if we have nothing more to put in it.
	if(uart_count(port)>0) uart_txbuffer_enable(port);
    55bc:	00 97       	sbiw	r24, 0x00	; 0
    55be:	21 f0       	breq	.+8      	; 0x55c8 <uart_enqueue+0x2d4>
    55c0:	c7 01       	movw	r24, r14
    55c2:	0e 94 55 1c 	call	0x38aa	; 0x38aa <uart_txbuffer_enable>
    55c6:	03 c0       	rjmp	.+6      	; 0x55ce <uart_enqueue+0x2da>
	else uart_txbuffer_disable(port);
    55c8:	c7 01       	movw	r24, r14
    55ca:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <uart_txbuffer_disable>
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0) && (lcd_flow_control == LCD_READY)){
		toSend = uart_dequeue(port);
		if (toSend == 0x0D) {lcd_flow_control = LCD_BUSY;}
		uart_enqueue(&udata, '`'); //xxx - echo to data port
		uart_enqueue(&udata, toSend); //xxx - echo to data port
		port->DATA = toSend;
    55ce:	f6 01       	movw	r30, r12
    55d0:	b0 82       	st	Z, r11
}

void inline uart_transmit_lcd(USART_t* port){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0) && (lcd_flow_control == LCD_READY)){
    55d2:	81 81       	ldd	r24, Z+1	; 0x01
    55d4:	85 fd       	sbrc	r24, 5
    55d6:	25 c0       	rjmp	.+74     	; 0x5622 <uart_enqueue+0x32e>
    55d8:	73 c0       	rjmp	.+230    	; 0x56c0 <uart_enqueue+0x3cc>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    55da:	0f 2e       	mov	r0, r31
    55dc:	fa ef       	ldi	r31, 0xFA	; 250
    55de:	6f 2e       	mov	r6, r31
    55e0:	f2 e3       	ldi	r31, 0x32	; 50
    55e2:	7f 2e       	mov	r7, r31
    55e4:	f0 2d       	mov	r31, r0
    55e6:	0f 2e       	mov	r0, r31
    55e8:	f6 e0       	ldi	r31, 0x06	; 6
    55ea:	8f 2e       	mov	r8, r31
    55ec:	ff e3       	ldi	r31, 0x3F	; 63
    55ee:	9f 2e       	mov	r9, r31
    55f0:	f0 2d       	mov	r31, r0
		uart_tail[idx] = 0;
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    55f2:	0f 2e       	mov	r0, r31
    55f4:	f0 e0       	ldi	r31, 0x00	; 0
    55f6:	4f 2e       	mov	r4, r31
    55f8:	f3 e3       	ldi	r31, 0x33	; 51
    55fa:	5f 2e       	mov	r5, r31
    55fc:	f0 2d       	mov	r31, r0
void inline uart_transmit_lcd(USART_t* port){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0) && (lcd_flow_control == LCD_READY)){
		toSend = uart_dequeue(port);
		if (toSend == 0x0D) {lcd_flow_control = LCD_BUSY;}
    55fe:	0f 2e       	mov	r0, r31
    5600:	fe e4       	ldi	r31, 0x4E	; 78
    5602:	3f 2e       	mov	r3, r31
    5604:	f0 2d       	mov	r31, r0
#ifndef UART_DEBUG
	uint8_t idx = port_map(port);
	
	//if (idx==0){uart_enqueue(&uctrl, datain);} //xxx
	
	uart_buffer[idx][uart_head[idx]] = datain;
    5606:	0e ef       	ldi	r16, 0xFE	; 254
    5608:	12 e3       	ldi	r17, 0x32	; 50
    560a:	0f 2e       	mov	r0, r31
    560c:	f0 e6       	ldi	r31, 0x60	; 96
    560e:	af 2e       	mov	r10, r31
    5610:	f0 2d       	mov	r31, r0
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    5612:	0f 2e       	mov	r0, r31
    5614:	f0 eb       	ldi	r31, 0xB0	; 176
    5616:	ef 2e       	mov	r14, r31
    5618:	f8 e0       	ldi	r31, 0x08	; 8
    561a:	ff 2e       	mov	r15, r31
    561c:	f0 2d       	mov	r31, r0
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    561e:	ca e0       	ldi	r28, 0x0A	; 10
    5620:	df e3       	ldi	r29, 0x3F	; 63
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    5622:	f0 eb       	ldi	r31, 0xB0	; 176
    5624:	cf 16       	cp	r12, r31
    5626:	fb e0       	ldi	r31, 0x0B	; 11
    5628:	df 06       	cpc	r13, r31
    562a:	61 f0       	breq	.+24     	; 0x5644 <uart_enqueue+0x350>
	if (port == &uctrl) {return 1;}
    562c:	20 ea       	ldi	r18, 0xA0	; 160
    562e:	c2 16       	cp	r12, r18
    5630:	28 e0       	ldi	r18, 0x08	; 8
    5632:	d2 06       	cpc	r13, r18
    5634:	49 f0       	breq	.+18     	; 0x5648 <uart_enqueue+0x354>
	if (port == &udata) {return 2;}
    5636:	30 eb       	ldi	r19, 0xB0	; 176
    5638:	c3 16       	cp	r12, r19
    563a:	38 e0       	ldi	r19, 0x08	; 8
    563c:	d3 06       	cpc	r13, r19
    563e:	31 f4       	brne	.+12     	; 0x564c <uart_enqueue+0x358>
    5640:	22 e0       	ldi	r18, 0x02	; 2
    5642:	05 c0       	rjmp	.+10     	; 0x564e <uart_enqueue+0x35a>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    5644:	20 e0       	ldi	r18, 0x00	; 0
    5646:	03 c0       	rjmp	.+6      	; 0x564e <uart_enqueue+0x35a>
	if (port == &uctrl) {return 1;}
    5648:	21 e0       	ldi	r18, 0x01	; 1
    564a:	01 c0       	rjmp	.+2      	; 0x564e <uart_enqueue+0x35a>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    564c:	20 e0       	ldi	r18, 0x00	; 0
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    564e:	30 e0       	ldi	r19, 0x00	; 0
    5650:	c9 01       	movw	r24, r18
    5652:	88 0f       	add	r24, r24
    5654:	99 1f       	adc	r25, r25
    5656:	f3 01       	movw	r30, r6
    5658:	e8 0f       	add	r30, r24
    565a:	f9 1f       	adc	r31, r25
    565c:	40 81       	ld	r20, Z
    565e:	51 81       	ldd	r21, Z+1	; 0x01
    5660:	f4 01       	movw	r30, r8
    5662:	e8 0f       	add	r30, r24
    5664:	f9 1f       	adc	r31, r25
    5666:	80 81       	ld	r24, Z
    5668:	91 81       	ldd	r25, Z+1	; 0x01
    566a:	48 17       	cp	r20, r24
    566c:	59 07       	cpc	r21, r25
    566e:	88 f0       	brcs	.+34     	; 0x5692 <uart_enqueue+0x39e>
		return (uart_head[idx] - uart_tail[idx]);
    5670:	22 0f       	add	r18, r18
    5672:	33 1f       	adc	r19, r19
    5674:	f3 01       	movw	r30, r6
    5676:	e2 0f       	add	r30, r18
    5678:	f3 1f       	adc	r31, r19
    567a:	40 81       	ld	r20, Z
    567c:	51 81       	ldd	r21, Z+1	; 0x01
    567e:	f4 01       	movw	r30, r8
    5680:	e2 0f       	add	r30, r18
    5682:	f3 1f       	adc	r31, r19
    5684:	80 81       	ld	r24, Z
    5686:	91 81       	ldd	r25, Z+1	; 0x01
    5688:	fa 01       	movw	r30, r20
    568a:	e8 1b       	sub	r30, r24
    568c:	f9 0b       	sbc	r31, r25
    568e:	cf 01       	movw	r24, r30
    5690:	10 c0       	rjmp	.+32     	; 0x56b2 <uart_enqueue+0x3be>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    5692:	22 0f       	add	r18, r18
    5694:	33 1f       	adc	r19, r19
    5696:	f3 01       	movw	r30, r6
    5698:	e2 0f       	add	r30, r18
    569a:	f3 1f       	adc	r31, r19
    569c:	80 81       	ld	r24, Z
    569e:	91 81       	ldd	r25, Z+1	; 0x01
    56a0:	f4 01       	movw	r30, r8
    56a2:	e2 0f       	add	r30, r18
    56a4:	f3 1f       	adc	r31, r19
    56a6:	20 81       	ld	r18, Z
    56a8:	31 81       	ldd	r19, Z+1	; 0x01
    56aa:	80 50       	subi	r24, 0x00	; 0
    56ac:	9c 4f       	sbci	r25, 0xFC	; 252
    56ae:	82 1b       	sub	r24, r18
    56b0:	93 0b       	sbc	r25, r19
}

void inline uart_transmit_lcd(USART_t* port){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0) && (lcd_flow_control == LCD_READY)){
    56b2:	00 97       	sbiw	r24, 0x00	; 0
    56b4:	29 f0       	breq	.+10     	; 0x56c0 <uart_enqueue+0x3cc>
    56b6:	80 91 e2 26 	lds	r24, 0x26E2
    56ba:	82 35       	cpi	r24, 0x52	; 82
    56bc:	09 f4       	brne	.+2      	; 0x56c0 <uart_enqueue+0x3cc>
    56be:	71 ce       	rjmp	.-798    	; 0x53a2 <uart_enqueue+0xae>
		if (toSend == 0x0D) {lcd_flow_control = LCD_BUSY;}
		uart_enqueue(&udata, '`'); //xxx - echo to data port
		uart_enqueue(&udata, toSend); //xxx - echo to data port
		port->DATA = toSend;
	}
	uart_txbuffer_disable(port); //implemented this way to prevent periodic stalls that happen when uart_txbuffer isn't disabled quickly enough
    56c0:	c6 01       	movw	r24, r12
    56c2:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <uart_txbuffer_disable>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    56c6:	f0 eb       	ldi	r31, 0xB0	; 176
    56c8:	cf 16       	cp	r12, r31
    56ca:	fb e0       	ldi	r31, 0x0B	; 11
    56cc:	df 06       	cpc	r13, r31
    56ce:	61 f0       	breq	.+24     	; 0x56e8 <uart_enqueue+0x3f4>
	if (port == &uctrl) {return 1;}
    56d0:	20 ea       	ldi	r18, 0xA0	; 160
    56d2:	c2 16       	cp	r12, r18
    56d4:	28 e0       	ldi	r18, 0x08	; 8
    56d6:	d2 06       	cpc	r13, r18
    56d8:	49 f0       	breq	.+18     	; 0x56ec <uart_enqueue+0x3f8>
	if (port == &udata) {return 2;}
    56da:	30 eb       	ldi	r19, 0xB0	; 176
    56dc:	c3 16       	cp	r12, r19
    56de:	38 e0       	ldi	r19, 0x08	; 8
    56e0:	d3 06       	cpc	r13, r19
    56e2:	31 f4       	brne	.+12     	; 0x56f0 <uart_enqueue+0x3fc>
    56e4:	22 e0       	ldi	r18, 0x02	; 2
    56e6:	05 c0       	rjmp	.+10     	; 0x56f2 <uart_enqueue+0x3fe>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    56e8:	20 e0       	ldi	r18, 0x00	; 0
    56ea:	03 c0       	rjmp	.+6      	; 0x56f2 <uart_enqueue+0x3fe>
	if (port == &uctrl) {return 1;}
    56ec:	21 e0       	ldi	r18, 0x01	; 1
    56ee:	01 c0       	rjmp	.+2      	; 0x56f2 <uart_enqueue+0x3fe>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    56f0:	20 e0       	ldi	r18, 0x00	; 0
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    56f2:	30 e0       	ldi	r19, 0x00	; 0
    56f4:	c9 01       	movw	r24, r18
    56f6:	88 0f       	add	r24, r24
    56f8:	99 1f       	adc	r25, r25
    56fa:	fc 01       	movw	r30, r24
    56fc:	e6 50       	subi	r30, 0x06	; 6
    56fe:	fd 4c       	sbci	r31, 0xCD	; 205
    5700:	40 81       	ld	r20, Z
    5702:	51 81       	ldd	r21, Z+1	; 0x01
    5704:	8a 5f       	subi	r24, 0xFA	; 250
    5706:	90 4c       	sbci	r25, 0xC0	; 192
    5708:	fc 01       	movw	r30, r24
    570a:	80 81       	ld	r24, Z
    570c:	91 81       	ldd	r25, Z+1	; 0x01
    570e:	48 17       	cp	r20, r24
    5710:	59 07       	cpc	r21, r25
    5712:	78 f0       	brcs	.+30     	; 0x5732 <uart_enqueue+0x43e>
		return (uart_head[idx] - uart_tail[idx]);
    5714:	22 0f       	add	r18, r18
    5716:	33 1f       	adc	r19, r19
    5718:	f9 01       	movw	r30, r18
    571a:	e6 50       	subi	r30, 0x06	; 6
    571c:	fd 4c       	sbci	r31, 0xCD	; 205
    571e:	80 81       	ld	r24, Z
    5720:	91 81       	ldd	r25, Z+1	; 0x01
    5722:	2a 5f       	subi	r18, 0xFA	; 250
    5724:	30 4c       	sbci	r19, 0xC0	; 192
    5726:	f9 01       	movw	r30, r18
    5728:	20 81       	ld	r18, Z
    572a:	31 81       	ldd	r19, Z+1	; 0x01
    572c:	82 1b       	sub	r24, r18
    572e:	93 0b       	sbc	r25, r19
    5730:	12 c0       	rjmp	.+36     	; 0x5756 <uart_enqueue+0x462>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    5732:	22 0f       	add	r18, r18
    5734:	33 1f       	adc	r19, r19
    5736:	f9 01       	movw	r30, r18
    5738:	e6 50       	subi	r30, 0x06	; 6
    573a:	fd 4c       	sbci	r31, 0xCD	; 205
    573c:	40 81       	ld	r20, Z
    573e:	51 81       	ldd	r21, Z+1	; 0x01
    5740:	2a 5f       	subi	r18, 0xFA	; 250
    5742:	30 4c       	sbci	r19, 0xC0	; 192
    5744:	f9 01       	movw	r30, r18
    5746:	80 81       	ld	r24, Z
    5748:	91 81       	ldd	r25, Z+1	; 0x01
    574a:	40 50       	subi	r20, 0x00	; 0
    574c:	5c 4f       	sbci	r21, 0xFC	; 252
    574e:	9a 01       	movw	r18, r20
    5750:	28 1b       	sub	r18, r24
    5752:	39 0b       	sbc	r19, r25
    5754:	c9 01       	movw	r24, r18
		uart_enqueue(&udata, '`'); //xxx - echo to data port
		uart_enqueue(&udata, toSend); //xxx - echo to data port
		port->DATA = toSend;
	}
	uart_txbuffer_disable(port); //implemented this way to prevent periodic stalls that happen when uart_txbuffer isn't disabled quickly enough
	if ((uart_count(port)>0) && (lcd_flow_control == LCD_READY)){ //...something is waiting to go out
    5756:	00 97       	sbiw	r24, 0x00	; 0
    5758:	09 f4       	brne	.+2      	; 0x575c <uart_enqueue+0x468>
    575a:	ef c0       	rjmp	.+478    	; 0x593a <uart_enqueue+0x646>
    575c:	80 91 e2 26 	lds	r24, 0x26E2
    5760:	82 35       	cpi	r24, 0x52	; 82
    5762:	09 f0       	breq	.+2      	; 0x5766 <uart_enqueue+0x472>
    5764:	ea c0       	rjmp	.+468    	; 0x593a <uart_enqueue+0x646>
		uart_txbuffer_enable(port);	
    5766:	c6 01       	movw	r24, r12
    5768:	0e 94 55 1c 	call	0x38aa	; 0x38aa <uart_txbuffer_enable>
    576c:	e6 c0       	rjmp	.+460    	; 0x593a <uart_enqueue+0x646>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    576e:	30 eb       	ldi	r19, 0xB0	; 176
    5770:	c3 16       	cp	r12, r19
    5772:	3b e0       	ldi	r19, 0x0B	; 11
    5774:	d3 06       	cpc	r13, r19
    5776:	61 f0       	breq	.+24     	; 0x5790 <uart_enqueue+0x49c>
	if (port == &uctrl) {return 1;}
    5778:	80 ea       	ldi	r24, 0xA0	; 160
    577a:	c8 16       	cp	r12, r24
    577c:	88 e0       	ldi	r24, 0x08	; 8
    577e:	d8 06       	cpc	r13, r24
    5780:	49 f0       	breq	.+18     	; 0x5794 <uart_enqueue+0x4a0>
	if (port == &udata) {return 2;}
    5782:	e0 eb       	ldi	r30, 0xB0	; 176
    5784:	ce 16       	cp	r12, r30
    5786:	e8 e0       	ldi	r30, 0x08	; 8
    5788:	de 06       	cpc	r13, r30
    578a:	31 f4       	brne	.+12     	; 0x5798 <uart_enqueue+0x4a4>
    578c:	22 e0       	ldi	r18, 0x02	; 2
    578e:	05 c0       	rjmp	.+10     	; 0x579a <uart_enqueue+0x4a6>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    5790:	20 e0       	ldi	r18, 0x00	; 0
    5792:	03 c0       	rjmp	.+6      	; 0x579a <uart_enqueue+0x4a6>
	if (port == &uctrl) {return 1;}
    5794:	21 e0       	ldi	r18, 0x01	; 1
    5796:	01 c0       	rjmp	.+2      	; 0x579a <uart_enqueue+0x4a6>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    5798:	20 e0       	ldi	r18, 0x00	; 0
}

inline uint8_t uart_dequeue(USART_t* port){
	uint8_t idx = port_map(port);
	uint16_t oldtail;
	oldtail = uart_tail[idx];
    579a:	30 e0       	ldi	r19, 0x00	; 0
    579c:	c9 01       	movw	r24, r18
    579e:	88 0f       	add	r24, r24
    57a0:	99 1f       	adc	r25, r25
    57a2:	fb 01       	movw	r30, r22
    57a4:	e8 0f       	add	r30, r24
    57a6:	f9 1f       	adc	r31, r25
    57a8:	40 81       	ld	r20, Z
    57aa:	51 81       	ldd	r21, Z+1	; 0x01
	uart_tail[idx]++;
    57ac:	80 81       	ld	r24, Z
    57ae:	91 81       	ldd	r25, Z+1	; 0x01
    57b0:	01 96       	adiw	r24, 0x01	; 1
    57b2:	80 83       	st	Z, r24
    57b4:	91 83       	std	Z+1, r25	; 0x01
	if (uart_tail[idx] >= MAX_BUFFER_LEN){
    57b6:	80 81       	ld	r24, Z
    57b8:	91 81       	ldd	r25, Z+1	; 0x01
    57ba:	f4 e0       	ldi	r31, 0x04	; 4
    57bc:	80 30       	cpi	r24, 0x00	; 0
    57be:	9f 07       	cpc	r25, r31
    57c0:	40 f0       	brcs	.+16     	; 0x57d2 <uart_enqueue+0x4de>
		uart_tail[idx] = 0;
    57c2:	c9 01       	movw	r24, r18
    57c4:	88 0f       	add	r24, r24
    57c6:	99 1f       	adc	r25, r25
    57c8:	86 0f       	add	r24, r22
    57ca:	97 1f       	adc	r25, r23
    57cc:	fc 01       	movw	r30, r24
    57ce:	10 82       	st	Z, r1
    57d0:	11 82       	std	Z+1, r1	; 0x01
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    57d2:	c9 01       	movw	r24, r18
    57d4:	98 2f       	mov	r25, r24
    57d6:	88 27       	eor	r24, r24
    57d8:	99 0f       	add	r25, r25
    57da:	99 0f       	add	r25, r25
    57dc:	84 0f       	add	r24, r20
    57de:	95 1f       	adc	r25, r21
    57e0:	fe 01       	movw	r30, r28
    57e2:	e8 0f       	add	r30, r24
    57e4:	f9 1f       	adc	r31, r25
    57e6:	80 81       	ld	r24, Z
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
    57e8:	f6 01       	movw	r30, r12
    57ea:	80 83       	st	Z, r24
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    57ec:	81 81       	ldd	r24, Z+1	; 0x01
    57ee:	85 fd       	sbrc	r24, 5
    57f0:	07 c0       	rjmp	.+14     	; 0x5800 <uart_enqueue+0x50c>
    57f2:	53 c0       	rjmp	.+166    	; 0x589a <uart_enqueue+0x5a6>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    57f4:	aa ef       	ldi	r26, 0xFA	; 250
    57f6:	b2 e3       	ldi	r27, 0x32	; 50
    57f8:	66 e0       	ldi	r22, 0x06	; 6
    57fa:	7f e3       	ldi	r23, 0x3F	; 63
		uart_tail[idx] = 0;
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    57fc:	c0 e0       	ldi	r28, 0x00	; 0
    57fe:	d3 e3       	ldi	r29, 0x33	; 51
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    5800:	f0 eb       	ldi	r31, 0xB0	; 176
    5802:	cf 16       	cp	r12, r31
    5804:	fb e0       	ldi	r31, 0x0B	; 11
    5806:	df 06       	cpc	r13, r31
    5808:	61 f0       	breq	.+24     	; 0x5822 <uart_enqueue+0x52e>
	if (port == &uctrl) {return 1;}
    580a:	20 ea       	ldi	r18, 0xA0	; 160
    580c:	c2 16       	cp	r12, r18
    580e:	28 e0       	ldi	r18, 0x08	; 8
    5810:	d2 06       	cpc	r13, r18
    5812:	49 f0       	breq	.+18     	; 0x5826 <uart_enqueue+0x532>
	if (port == &udata) {return 2;}
    5814:	30 eb       	ldi	r19, 0xB0	; 176
    5816:	c3 16       	cp	r12, r19
    5818:	38 e0       	ldi	r19, 0x08	; 8
    581a:	d3 06       	cpc	r13, r19
    581c:	31 f4       	brne	.+12     	; 0x582a <uart_enqueue+0x536>
    581e:	22 e0       	ldi	r18, 0x02	; 2
    5820:	05 c0       	rjmp	.+10     	; 0x582c <uart_enqueue+0x538>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    5822:	20 e0       	ldi	r18, 0x00	; 0
    5824:	03 c0       	rjmp	.+6      	; 0x582c <uart_enqueue+0x538>
	if (port == &uctrl) {return 1;}
    5826:	21 e0       	ldi	r18, 0x01	; 1
    5828:	01 c0       	rjmp	.+2      	; 0x582c <uart_enqueue+0x538>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    582a:	20 e0       	ldi	r18, 0x00	; 0
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    582c:	30 e0       	ldi	r19, 0x00	; 0
    582e:	c9 01       	movw	r24, r18
    5830:	88 0f       	add	r24, r24
    5832:	99 1f       	adc	r25, r25
    5834:	fd 01       	movw	r30, r26
    5836:	e8 0f       	add	r30, r24
    5838:	f9 1f       	adc	r31, r25
    583a:	40 81       	ld	r20, Z
    583c:	51 81       	ldd	r21, Z+1	; 0x01
    583e:	fb 01       	movw	r30, r22
    5840:	e8 0f       	add	r30, r24
    5842:	f9 1f       	adc	r31, r25
    5844:	80 81       	ld	r24, Z
    5846:	91 81       	ldd	r25, Z+1	; 0x01
    5848:	48 17       	cp	r20, r24
    584a:	59 07       	cpc	r21, r25
    584c:	88 f0       	brcs	.+34     	; 0x5870 <uart_enqueue+0x57c>
		return (uart_head[idx] - uart_tail[idx]);
    584e:	22 0f       	add	r18, r18
    5850:	33 1f       	adc	r19, r19
    5852:	fd 01       	movw	r30, r26
    5854:	e2 0f       	add	r30, r18
    5856:	f3 1f       	adc	r31, r19
    5858:	40 81       	ld	r20, Z
    585a:	51 81       	ldd	r21, Z+1	; 0x01
    585c:	fb 01       	movw	r30, r22
    585e:	e2 0f       	add	r30, r18
    5860:	f3 1f       	adc	r31, r19
    5862:	80 81       	ld	r24, Z
    5864:	91 81       	ldd	r25, Z+1	; 0x01
    5866:	fa 01       	movw	r30, r20
    5868:	e8 1b       	sub	r30, r24
    586a:	f9 0b       	sbc	r31, r25
    586c:	cf 01       	movw	r24, r30
    586e:	12 c0       	rjmp	.+36     	; 0x5894 <uart_enqueue+0x5a0>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    5870:	c9 01       	movw	r24, r18
    5872:	88 0f       	add	r24, r24
    5874:	99 1f       	adc	r25, r25
    5876:	fd 01       	movw	r30, r26
    5878:	e8 0f       	add	r30, r24
    587a:	f9 1f       	adc	r31, r25
    587c:	40 81       	ld	r20, Z
    587e:	51 81       	ldd	r21, Z+1	; 0x01
    5880:	fb 01       	movw	r30, r22
    5882:	e8 0f       	add	r30, r24
    5884:	f9 1f       	adc	r31, r25
    5886:	20 81       	ld	r18, Z
    5888:	31 81       	ldd	r19, Z+1	; 0x01
    588a:	ca 01       	movw	r24, r20
    588c:	80 50       	subi	r24, 0x00	; 0
    588e:	9c 4f       	sbci	r25, 0xFC	; 252
    5890:	82 1b       	sub	r24, r18
    5892:	93 0b       	sbc	r25, r19
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    5894:	00 97       	sbiw	r24, 0x00	; 0
    5896:	09 f0       	breq	.+2      	; 0x589a <uart_enqueue+0x5a6>
    5898:	6a cf       	rjmp	.-300    	; 0x576e <uart_enqueue+0x47a>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    589a:	f0 eb       	ldi	r31, 0xB0	; 176
    589c:	cf 16       	cp	r12, r31
    589e:	fb e0       	ldi	r31, 0x0B	; 11
    58a0:	df 06       	cpc	r13, r31
    58a2:	61 f0       	breq	.+24     	; 0x58bc <uart_enqueue+0x5c8>
	if (port == &uctrl) {return 1;}
    58a4:	20 ea       	ldi	r18, 0xA0	; 160
    58a6:	c2 16       	cp	r12, r18
    58a8:	28 e0       	ldi	r18, 0x08	; 8
    58aa:	d2 06       	cpc	r13, r18
    58ac:	49 f0       	breq	.+18     	; 0x58c0 <uart_enqueue+0x5cc>
	if (port == &udata) {return 2;}
    58ae:	30 eb       	ldi	r19, 0xB0	; 176
    58b0:	c3 16       	cp	r12, r19
    58b2:	38 e0       	ldi	r19, 0x08	; 8
    58b4:	d3 06       	cpc	r13, r19
    58b6:	31 f4       	brne	.+12     	; 0x58c4 <uart_enqueue+0x5d0>
    58b8:	22 e0       	ldi	r18, 0x02	; 2
    58ba:	05 c0       	rjmp	.+10     	; 0x58c6 <uart_enqueue+0x5d2>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    58bc:	20 e0       	ldi	r18, 0x00	; 0
    58be:	03 c0       	rjmp	.+6      	; 0x58c6 <uart_enqueue+0x5d2>
	if (port == &uctrl) {return 1;}
    58c0:	21 e0       	ldi	r18, 0x01	; 1
    58c2:	01 c0       	rjmp	.+2      	; 0x58c6 <uart_enqueue+0x5d2>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    58c4:	20 e0       	ldi	r18, 0x00	; 0
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    58c6:	30 e0       	ldi	r19, 0x00	; 0
    58c8:	c9 01       	movw	r24, r18
    58ca:	88 0f       	add	r24, r24
    58cc:	99 1f       	adc	r25, r25
    58ce:	fc 01       	movw	r30, r24
    58d0:	e6 50       	subi	r30, 0x06	; 6
    58d2:	fd 4c       	sbci	r31, 0xCD	; 205
    58d4:	40 81       	ld	r20, Z
    58d6:	51 81       	ldd	r21, Z+1	; 0x01
    58d8:	8a 5f       	subi	r24, 0xFA	; 250
    58da:	90 4c       	sbci	r25, 0xC0	; 192
    58dc:	fc 01       	movw	r30, r24
    58de:	80 81       	ld	r24, Z
    58e0:	91 81       	ldd	r25, Z+1	; 0x01
    58e2:	48 17       	cp	r20, r24
    58e4:	59 07       	cpc	r21, r25
    58e6:	78 f0       	brcs	.+30     	; 0x5906 <uart_enqueue+0x612>
		return (uart_head[idx] - uart_tail[idx]);
    58e8:	22 0f       	add	r18, r18
    58ea:	33 1f       	adc	r19, r19
    58ec:	f9 01       	movw	r30, r18
    58ee:	e6 50       	subi	r30, 0x06	; 6
    58f0:	fd 4c       	sbci	r31, 0xCD	; 205
    58f2:	40 81       	ld	r20, Z
    58f4:	51 81       	ldd	r21, Z+1	; 0x01
    58f6:	2a 5f       	subi	r18, 0xFA	; 250
    58f8:	30 4c       	sbci	r19, 0xC0	; 192
    58fa:	f9 01       	movw	r30, r18
    58fc:	80 81       	ld	r24, Z
    58fe:	91 81       	ldd	r25, Z+1	; 0x01
    5900:	48 1b       	sub	r20, r24
    5902:	59 0b       	sbc	r21, r25
    5904:	10 c0       	rjmp	.+32     	; 0x5926 <uart_enqueue+0x632>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    5906:	22 0f       	add	r18, r18
    5908:	33 1f       	adc	r19, r19
    590a:	f9 01       	movw	r30, r18
    590c:	e6 50       	subi	r30, 0x06	; 6
    590e:	fd 4c       	sbci	r31, 0xCD	; 205
    5910:	40 81       	ld	r20, Z
    5912:	51 81       	ldd	r21, Z+1	; 0x01
    5914:	2a 5f       	subi	r18, 0xFA	; 250
    5916:	30 4c       	sbci	r19, 0xC0	; 192
    5918:	f9 01       	movw	r30, r18
    591a:	80 81       	ld	r24, Z
    591c:	91 81       	ldd	r25, Z+1	; 0x01
    591e:	40 50       	subi	r20, 0x00	; 0
    5920:	5c 4f       	sbci	r21, 0xFC	; 252
    5922:	48 1b       	sub	r20, r24
    5924:	59 0b       	sbc	r21, r25
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
	}
	//disable the tx outgoing hardware buffer ready interrupt if we have nothing more to put in it.
	if(uart_count(port)>0) uart_txbuffer_enable(port);
    5926:	41 15       	cp	r20, r1
    5928:	51 05       	cpc	r21, r1
    592a:	21 f0       	breq	.+8      	; 0x5934 <uart_enqueue+0x640>
    592c:	c6 01       	movw	r24, r12
    592e:	0e 94 55 1c 	call	0x38aa	; 0x38aa <uart_txbuffer_enable>
    5932:	03 c0       	rjmp	.+6      	; 0x593a <uart_enqueue+0x646>
	else uart_txbuffer_disable(port);
    5934:	c6 01       	movw	r24, r12
    5936:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <uart_txbuffer_disable>
	}
	if (idx == 0){uart_transmit_lcd(port);} //start the transmission process.
	else {uart_transmit(port);} //start the transmission process.}	
	
#endif
}
    593a:	df 91       	pop	r29
    593c:	cf 91       	pop	r28
    593e:	1f 91       	pop	r17
    5940:	0f 91       	pop	r16
    5942:	ff 90       	pop	r15
    5944:	ef 90       	pop	r14
    5946:	df 90       	pop	r13
    5948:	cf 90       	pop	r12
    594a:	bf 90       	pop	r11
    594c:	af 90       	pop	r10
    594e:	9f 90       	pop	r9
    5950:	8f 90       	pop	r8
    5952:	7f 90       	pop	r7
    5954:	6f 90       	pop	r6
    5956:	5f 90       	pop	r5
    5958:	4f 90       	pop	r4
    595a:	3f 90       	pop	r3
    595c:	08 95       	ret

0000595e <uart_dequeue>:
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    595e:	2b e0       	ldi	r18, 0x0B	; 11
    5960:	80 3b       	cpi	r24, 0xB0	; 176
    5962:	92 07       	cpc	r25, r18
    5964:	51 f0       	breq	.+20     	; 0x597a <uart_dequeue+0x1c>
	if (port == &uctrl) {return 1;}
    5966:	68 e0       	ldi	r22, 0x08	; 8
    5968:	80 3a       	cpi	r24, 0xA0	; 160
    596a:	96 07       	cpc	r25, r22
    596c:	41 f0       	breq	.+16     	; 0x597e <uart_dequeue+0x20>
	if (port == &udata) {return 2;}
    596e:	28 e0       	ldi	r18, 0x08	; 8
    5970:	80 3b       	cpi	r24, 0xB0	; 176
    5972:	92 07       	cpc	r25, r18
    5974:	31 f4       	brne	.+12     	; 0x5982 <uart_dequeue+0x24>
    5976:	22 e0       	ldi	r18, 0x02	; 2
    5978:	05 c0       	rjmp	.+10     	; 0x5984 <uart_dequeue+0x26>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    597a:	20 e0       	ldi	r18, 0x00	; 0
    597c:	03 c0       	rjmp	.+6      	; 0x5984 <uart_dequeue+0x26>
	if (port == &uctrl) {return 1;}
    597e:	21 e0       	ldi	r18, 0x01	; 1
    5980:	01 c0       	rjmp	.+2      	; 0x5984 <uart_dequeue+0x26>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    5982:	20 e0       	ldi	r18, 0x00	; 0
}

inline uint8_t uart_dequeue(USART_t* port){
	uint8_t idx = port_map(port);
	uint16_t oldtail;
	oldtail = uart_tail[idx];
    5984:	30 e0       	ldi	r19, 0x00	; 0
    5986:	f9 01       	movw	r30, r18
    5988:	ee 0f       	add	r30, r30
    598a:	ff 1f       	adc	r31, r31
    598c:	ea 5f       	subi	r30, 0xFA	; 250
    598e:	f0 4c       	sbci	r31, 0xC0	; 192
    5990:	40 81       	ld	r20, Z
    5992:	51 81       	ldd	r21, Z+1	; 0x01
	uart_tail[idx]++;
    5994:	80 81       	ld	r24, Z
    5996:	91 81       	ldd	r25, Z+1	; 0x01
    5998:	01 96       	adiw	r24, 0x01	; 1
    599a:	80 83       	st	Z, r24
    599c:	91 83       	std	Z+1, r25	; 0x01
	if (uart_tail[idx] >= MAX_BUFFER_LEN){
    599e:	80 81       	ld	r24, Z
    59a0:	91 81       	ldd	r25, Z+1	; 0x01
    59a2:	64 e0       	ldi	r22, 0x04	; 4
    59a4:	80 30       	cpi	r24, 0x00	; 0
    59a6:	96 07       	cpc	r25, r22
    59a8:	38 f0       	brcs	.+14     	; 0x59b8 <uart_dequeue+0x5a>
		uart_tail[idx] = 0;
    59aa:	f9 01       	movw	r30, r18
    59ac:	ee 0f       	add	r30, r30
    59ae:	ff 1f       	adc	r31, r31
    59b0:	ea 5f       	subi	r30, 0xFA	; 250
    59b2:	f0 4c       	sbci	r31, 0xC0	; 192
    59b4:	10 82       	st	Z, r1
    59b6:	11 82       	std	Z+1, r1	; 0x01
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    59b8:	f9 01       	movw	r30, r18
    59ba:	fe 2f       	mov	r31, r30
    59bc:	ee 27       	eor	r30, r30
    59be:	ff 0f       	add	r31, r31
    59c0:	ff 0f       	add	r31, r31
    59c2:	4e 0f       	add	r20, r30
    59c4:	5f 1f       	adc	r21, r31
    59c6:	fa 01       	movw	r30, r20
    59c8:	e0 50       	subi	r30, 0x00	; 0
    59ca:	fd 4c       	sbci	r31, 0xCD	; 205
    59cc:	80 81       	ld	r24, Z
}
    59ce:	08 95       	ret

000059d0 <init_uart_ibuffer>:
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    59d0:	2b e0       	ldi	r18, 0x0B	; 11
    59d2:	80 3b       	cpi	r24, 0xB0	; 176
    59d4:	92 07       	cpc	r25, r18
    59d6:	51 f0       	breq	.+20     	; 0x59ec <init_uart_ibuffer+0x1c>
	if (port == &uctrl) {return 1;}
    59d8:	e8 e0       	ldi	r30, 0x08	; 8
    59da:	80 3a       	cpi	r24, 0xA0	; 160
    59dc:	9e 07       	cpc	r25, r30
    59de:	41 f0       	breq	.+16     	; 0x59f0 <init_uart_ibuffer+0x20>
	if (port == &udata) {return 2;}
    59e0:	f8 e0       	ldi	r31, 0x08	; 8
    59e2:	80 3b       	cpi	r24, 0xB0	; 176
    59e4:	9f 07       	cpc	r25, r31
    59e6:	31 f4       	brne	.+12     	; 0x59f4 <init_uart_ibuffer+0x24>
    59e8:	82 e0       	ldi	r24, 0x02	; 2
    59ea:	05 c0       	rjmp	.+10     	; 0x59f6 <init_uart_ibuffer+0x26>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    59ec:	80 e0       	ldi	r24, 0x00	; 0
    59ee:	03 c0       	rjmp	.+6      	; 0x59f6 <init_uart_ibuffer+0x26>
	if (port == &uctrl) {return 1;}
    59f0:	81 e0       	ldi	r24, 0x01	; 1
    59f2:	01 c0       	rjmp	.+2      	; 0x59f6 <init_uart_ibuffer+0x26>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    59f4:	80 e0       	ldi	r24, 0x00	; 0
	No protection is provided for buffer overflow! Be careful! */
//***************************************************

void init_uart_ibuffer(USART_t* port){
	uint8_t idx = port_map(port);
	uart_ihead[idx] = 0;
    59f6:	90 e0       	ldi	r25, 0x00	; 0
    59f8:	88 0f       	add	r24, r24
    59fa:	99 1f       	adc	r25, r25
    59fc:	fc 01       	movw	r30, r24
    59fe:	e0 50       	subi	r30, 0x00	; 0
    5a00:	f1 4c       	sbci	r31, 0xC1	; 193
    5a02:	10 82       	st	Z, r1
    5a04:	11 82       	std	Z+1, r1	; 0x01
	uart_itail[idx] = 0;
    5a06:	8c 50       	subi	r24, 0x0C	; 12
    5a08:	99 4d       	sbci	r25, 0xD9	; 217
    5a0a:	fc 01       	movw	r30, r24
    5a0c:	10 82       	st	Z, r1
    5a0e:	11 82       	std	Z+1, r1	; 0x01
}
    5a10:	08 95       	ret

00005a12 <init_uart_buffer>:
//** [PORT AGNOSTIC CODE]
//************************************************************************
//************************************************************************

//MAKE SURE TO INIT UART FIRST
void init_uart_buffer(USART_t* port){
    5a12:	cf 93       	push	r28
    5a14:	df 93       	push	r29
    5a16:	ec 01       	movw	r28, r24
	//Setup data buffers
		init_uart_obuffer(port);
    5a18:	0e 94 8c 25 	call	0x4b18	; 0x4b18 <init_uart_obuffer>
		init_uart_ibuffer(port);
    5a1c:	ce 01       	movw	r24, r28
    5a1e:	0e 94 e8 2c 	call	0x59d0	; 0x59d0 <init_uart_ibuffer>
	//Enable Receive and Transmit interrupts
		uart_rxbuffer_enable(port);
    5a22:	ce 01       	movw	r24, r28
    5a24:	0e 94 4b 1c 	call	0x3896	; 0x3896 <uart_rxbuffer_enable>
		uart_txbuffer_enable(port);
    5a28:	ce 01       	movw	r24, r28
    5a2a:	0e 94 55 1c 	call	0x38aa	; 0x38aa <uart_txbuffer_enable>
}
    5a2e:	df 91       	pop	r29
    5a30:	cf 91       	pop	r28
    5a32:	08 95       	ret

00005a34 <init_uart_buffers>:
ISR(USARTF1_DRE_vect) {uart_transmit_lcd(&ulcd);}//TX Interrupt
ISR(USARTF1_RXC_vect) {uart_receive_lcd(&ulcd);} //RX Interrupt
	
//MAKE SURE TO INIT UART FIRST
void init_uart_buffers(){
	init_uart_buffer(&uctrl);
    5a34:	80 ea       	ldi	r24, 0xA0	; 160
    5a36:	98 e0       	ldi	r25, 0x08	; 8
    5a38:	0e 94 09 2d 	call	0x5a12	; 0x5a12 <init_uart_buffer>
	init_uart_buffer(&udata);
    5a3c:	80 eb       	ldi	r24, 0xB0	; 176
    5a3e:	98 e0       	ldi	r25, 0x08	; 8
    5a40:	0e 94 09 2d 	call	0x5a12	; 0x5a12 <init_uart_buffer>
	init_uart_buffer(&ulcd);
    5a44:	80 eb       	ldi	r24, 0xB0	; 176
    5a46:	9b e0       	ldi	r25, 0x0B	; 11
    5a48:	0e 94 09 2d 	call	0x5a12	; 0x5a12 <init_uart_buffer>
}	
    5a4c:	08 95       	ret

00005a4e <uart_icount>:
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    5a4e:	2b e0       	ldi	r18, 0x0B	; 11
    5a50:	80 3b       	cpi	r24, 0xB0	; 176
    5a52:	92 07       	cpc	r25, r18
    5a54:	51 f0       	breq	.+20     	; 0x5a6a <uart_icount+0x1c>
	if (port == &uctrl) {return 1;}
    5a56:	e8 e0       	ldi	r30, 0x08	; 8
    5a58:	80 3a       	cpi	r24, 0xA0	; 160
    5a5a:	9e 07       	cpc	r25, r30
    5a5c:	41 f0       	breq	.+16     	; 0x5a6e <uart_icount+0x20>
	if (port == &udata) {return 2;}
    5a5e:	f8 e0       	ldi	r31, 0x08	; 8
    5a60:	80 3b       	cpi	r24, 0xB0	; 176
    5a62:	9f 07       	cpc	r25, r31
    5a64:	31 f4       	brne	.+12     	; 0x5a72 <uart_icount+0x24>
    5a66:	82 e0       	ldi	r24, 0x02	; 2
    5a68:	05 c0       	rjmp	.+10     	; 0x5a74 <uart_icount+0x26>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    5a6a:	80 e0       	ldi	r24, 0x00	; 0
    5a6c:	03 c0       	rjmp	.+6      	; 0x5a74 <uart_icount+0x26>
	if (port == &uctrl) {return 1;}
    5a6e:	81 e0       	ldi	r24, 0x01	; 1
    5a70:	01 c0       	rjmp	.+2      	; 0x5a74 <uart_icount+0x26>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    5a72:	80 e0       	ldi	r24, 0x00	; 0
	uart_itail[idx] = 0;
}

inline uint16_t uart_icount(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_ihead[idx] >= uart_itail[idx]){	
    5a74:	90 e0       	ldi	r25, 0x00	; 0
    5a76:	9c 01       	movw	r18, r24
    5a78:	22 0f       	add	r18, r18
    5a7a:	33 1f       	adc	r19, r19
    5a7c:	f9 01       	movw	r30, r18
    5a7e:	e0 50       	subi	r30, 0x00	; 0
    5a80:	f1 4c       	sbci	r31, 0xC1	; 193
    5a82:	40 81       	ld	r20, Z
    5a84:	51 81       	ldd	r21, Z+1	; 0x01
    5a86:	2c 50       	subi	r18, 0x0C	; 12
    5a88:	39 4d       	sbci	r19, 0xD9	; 217
    5a8a:	f9 01       	movw	r30, r18
    5a8c:	20 81       	ld	r18, Z
    5a8e:	31 81       	ldd	r19, Z+1	; 0x01
    5a90:	42 17       	cp	r20, r18
    5a92:	53 07       	cpc	r21, r19
    5a94:	80 f0       	brcs	.+32     	; 0x5ab6 <uart_icount+0x68>
		return (uart_ihead[idx] - uart_itail[idx]);
    5a96:	9c 01       	movw	r18, r24
    5a98:	22 0f       	add	r18, r18
    5a9a:	33 1f       	adc	r19, r19
    5a9c:	f9 01       	movw	r30, r18
    5a9e:	e0 50       	subi	r30, 0x00	; 0
    5aa0:	f1 4c       	sbci	r31, 0xC1	; 193
    5aa2:	80 81       	ld	r24, Z
    5aa4:	91 81       	ldd	r25, Z+1	; 0x01
    5aa6:	2c 50       	subi	r18, 0x0C	; 12
    5aa8:	39 4d       	sbci	r19, 0xD9	; 217
    5aaa:	f9 01       	movw	r30, r18
    5aac:	20 81       	ld	r18, Z
    5aae:	31 81       	ldd	r19, Z+1	; 0x01
    5ab0:	82 1b       	sub	r24, r18
    5ab2:	93 0b       	sbc	r25, r19
    5ab4:	08 95       	ret
	}
	else {
		return ((MAX_IBUFFER_LEN-uart_itail[idx])+uart_ihead[idx]);
    5ab6:	9c 01       	movw	r18, r24
    5ab8:	22 0f       	add	r18, r18
    5aba:	33 1f       	adc	r19, r19
    5abc:	f9 01       	movw	r30, r18
    5abe:	e0 50       	subi	r30, 0x00	; 0
    5ac0:	f1 4c       	sbci	r31, 0xC1	; 193
    5ac2:	40 81       	ld	r20, Z
    5ac4:	51 81       	ldd	r21, Z+1	; 0x01
    5ac6:	2c 50       	subi	r18, 0x0C	; 12
    5ac8:	39 4d       	sbci	r19, 0xD9	; 217
    5aca:	f9 01       	movw	r30, r18
    5acc:	20 81       	ld	r18, Z
    5ace:	31 81       	ldd	r19, Z+1	; 0x01
    5ad0:	ca 01       	movw	r24, r20
    5ad2:	80 50       	subi	r24, 0x00	; 0
    5ad4:	9c 4f       	sbci	r25, 0xFC	; 252
    5ad6:	82 1b       	sub	r24, r18
    5ad8:	93 0b       	sbc	r25, r19
	}
}
    5ada:	08 95       	ret

00005adc <uart_ienqueue>:
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    5adc:	2b e0       	ldi	r18, 0x0B	; 11
    5ade:	80 3b       	cpi	r24, 0xB0	; 176
    5ae0:	92 07       	cpc	r25, r18
    5ae2:	51 f0       	breq	.+20     	; 0x5af8 <uart_ienqueue+0x1c>
	if (port == &uctrl) {return 1;}
    5ae4:	28 e0       	ldi	r18, 0x08	; 8
    5ae6:	80 3a       	cpi	r24, 0xA0	; 160
    5ae8:	92 07       	cpc	r25, r18
    5aea:	41 f0       	breq	.+16     	; 0x5afc <uart_ienqueue+0x20>
	if (port == &udata) {return 2;}
    5aec:	28 e0       	ldi	r18, 0x08	; 8
    5aee:	80 3b       	cpi	r24, 0xB0	; 176
    5af0:	92 07       	cpc	r25, r18
    5af2:	31 f4       	brne	.+12     	; 0x5b00 <uart_ienqueue+0x24>
    5af4:	42 e0       	ldi	r20, 0x02	; 2
    5af6:	05 c0       	rjmp	.+10     	; 0x5b02 <uart_ienqueue+0x26>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    5af8:	40 e0       	ldi	r20, 0x00	; 0
    5afa:	03 c0       	rjmp	.+6      	; 0x5b02 <uart_ienqueue+0x26>
	if (port == &uctrl) {return 1;}
    5afc:	41 e0       	ldi	r20, 0x01	; 1
    5afe:	01 c0       	rjmp	.+2      	; 0x5b02 <uart_ienqueue+0x26>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    5b00:	40 e0       	ldi	r20, 0x00	; 0
	}
}

inline void uart_ienqueue(USART_t* port, uint8_t datain){
	uint8_t idx = port_map(port);
	uart_ibuffer[idx][uart_ihead[idx]] = datain;
    5b02:	50 e0       	ldi	r21, 0x00	; 0
    5b04:	fa 01       	movw	r30, r20
    5b06:	ee 0f       	add	r30, r30
    5b08:	ff 1f       	adc	r31, r31
    5b0a:	e0 50       	subi	r30, 0x00	; 0
    5b0c:	f1 4c       	sbci	r31, 0xC1	; 193
    5b0e:	80 81       	ld	r24, Z
    5b10:	91 81       	ldd	r25, Z+1	; 0x01
    5b12:	9a 01       	movw	r18, r20
    5b14:	32 2f       	mov	r19, r18
    5b16:	22 27       	eor	r18, r18
    5b18:	33 0f       	add	r19, r19
    5b1a:	33 0f       	add	r19, r19
    5b1c:	82 0f       	add	r24, r18
    5b1e:	93 1f       	adc	r25, r19
    5b20:	dc 01       	movw	r26, r24
    5b22:	a6 50       	subi	r26, 0x06	; 6
    5b24:	b9 4d       	sbci	r27, 0xD9	; 217
    5b26:	6c 93       	st	X, r22
	uart_ihead[idx]++;
    5b28:	80 81       	ld	r24, Z
    5b2a:	91 81       	ldd	r25, Z+1	; 0x01
    5b2c:	01 96       	adiw	r24, 0x01	; 1
    5b2e:	80 83       	st	Z, r24
    5b30:	91 83       	std	Z+1, r25	; 0x01
	if (uart_ihead[idx] >= MAX_IBUFFER_LEN){
    5b32:	80 81       	ld	r24, Z
    5b34:	91 81       	ldd	r25, Z+1	; 0x01
    5b36:	24 e0       	ldi	r18, 0x04	; 4
    5b38:	80 30       	cpi	r24, 0x00	; 0
    5b3a:	92 07       	cpc	r25, r18
    5b3c:	38 f0       	brcs	.+14     	; 0x5b4c <uart_ienqueue+0x70>
		uart_ihead[idx] = 0;
    5b3e:	fa 01       	movw	r30, r20
    5b40:	ee 0f       	add	r30, r30
    5b42:	ff 1f       	adc	r31, r31
    5b44:	e0 50       	subi	r30, 0x00	; 0
    5b46:	f1 4c       	sbci	r31, 0xC1	; 193
    5b48:	10 82       	st	Z, r1
    5b4a:	11 82       	std	Z+1, r1	; 0x01
    5b4c:	08 95       	ret

00005b4e <uart_idequeue>:
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    5b4e:	2b e0       	ldi	r18, 0x0B	; 11
    5b50:	80 3b       	cpi	r24, 0xB0	; 176
    5b52:	92 07       	cpc	r25, r18
    5b54:	51 f0       	breq	.+20     	; 0x5b6a <uart_idequeue+0x1c>
	if (port == &uctrl) {return 1;}
    5b56:	68 e0       	ldi	r22, 0x08	; 8
    5b58:	80 3a       	cpi	r24, 0xA0	; 160
    5b5a:	96 07       	cpc	r25, r22
    5b5c:	41 f0       	breq	.+16     	; 0x5b6e <uart_idequeue+0x20>
	if (port == &udata) {return 2;}
    5b5e:	28 e0       	ldi	r18, 0x08	; 8
    5b60:	80 3b       	cpi	r24, 0xB0	; 176
    5b62:	92 07       	cpc	r25, r18
    5b64:	31 f4       	brne	.+12     	; 0x5b72 <uart_idequeue+0x24>
    5b66:	22 e0       	ldi	r18, 0x02	; 2
    5b68:	05 c0       	rjmp	.+10     	; 0x5b74 <uart_idequeue+0x26>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    5b6a:	20 e0       	ldi	r18, 0x00	; 0
    5b6c:	03 c0       	rjmp	.+6      	; 0x5b74 <uart_idequeue+0x26>
	if (port == &uctrl) {return 1;}
    5b6e:	21 e0       	ldi	r18, 0x01	; 1
    5b70:	01 c0       	rjmp	.+2      	; 0x5b74 <uart_idequeue+0x26>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    5b72:	20 e0       	ldi	r18, 0x00	; 0

//internal implementation of peek and dequeue
inline uint8_t _uart_idequeue(USART_t* port, uint8_t peek){
	uint8_t idx = port_map(port);
	uint16_t oldtail;
	oldtail = uart_itail[idx];
    5b74:	30 e0       	ldi	r19, 0x00	; 0
    5b76:	f9 01       	movw	r30, r18
    5b78:	ee 0f       	add	r30, r30
    5b7a:	ff 1f       	adc	r31, r31
    5b7c:	ec 50       	subi	r30, 0x0C	; 12
    5b7e:	f9 4d       	sbci	r31, 0xD9	; 217
    5b80:	40 81       	ld	r20, Z
    5b82:	51 81       	ldd	r21, Z+1	; 0x01
	uart_itail[idx]++;
    5b84:	80 81       	ld	r24, Z
    5b86:	91 81       	ldd	r25, Z+1	; 0x01
    5b88:	01 96       	adiw	r24, 0x01	; 1
    5b8a:	80 83       	st	Z, r24
    5b8c:	91 83       	std	Z+1, r25	; 0x01
	if (uart_itail[idx] >= MAX_IBUFFER_LEN){
    5b8e:	80 81       	ld	r24, Z
    5b90:	91 81       	ldd	r25, Z+1	; 0x01
    5b92:	64 e0       	ldi	r22, 0x04	; 4
    5b94:	80 30       	cpi	r24, 0x00	; 0
    5b96:	96 07       	cpc	r25, r22
    5b98:	38 f0       	brcs	.+14     	; 0x5ba8 <uart_idequeue+0x5a>
		uart_itail[idx] = 0;
    5b9a:	f9 01       	movw	r30, r18
    5b9c:	ee 0f       	add	r30, r30
    5b9e:	ff 1f       	adc	r31, r31
    5ba0:	ec 50       	subi	r30, 0x0C	; 12
    5ba2:	f9 4d       	sbci	r31, 0xD9	; 217
    5ba4:	10 82       	st	Z, r1
    5ba6:	11 82       	std	Z+1, r1	; 0x01
	}
	if (peek){uart_itail[idx] = oldtail;}
	return uart_ibuffer[idx][oldtail];
    5ba8:	f9 01       	movw	r30, r18
    5baa:	fe 2f       	mov	r31, r30
    5bac:	ee 27       	eor	r30, r30
    5bae:	ff 0f       	add	r31, r31
    5bb0:	ff 0f       	add	r31, r31
    5bb2:	4e 0f       	add	r20, r30
    5bb4:	5f 1f       	adc	r21, r31
    5bb6:	fa 01       	movw	r30, r20
    5bb8:	e6 50       	subi	r30, 0x06	; 6
    5bba:	f9 4d       	sbci	r31, 0xD9	; 217
    5bbc:	80 81       	ld	r24, Z
}

inline uint8_t uart_idequeue(USART_t* port){
	return _uart_idequeue(port, false);
}
    5bbe:	08 95       	ret

00005bc0 <service_uart_buffer>:

inline void service_uart_buffer(){
    5bc0:	3f 92       	push	r3
    5bc2:	4f 92       	push	r4
    5bc4:	5f 92       	push	r5
    5bc6:	6f 92       	push	r6
    5bc8:	7f 92       	push	r7
    5bca:	8f 92       	push	r8
    5bcc:	9f 92       	push	r9
    5bce:	af 92       	push	r10
    5bd0:	bf 92       	push	r11
    5bd2:	cf 92       	push	r12
    5bd4:	df 92       	push	r13
    5bd6:	ef 92       	push	r14
    5bd8:	ff 92       	push	r15
    5bda:	0f 93       	push	r16
    5bdc:	1f 93       	push	r17
    5bde:	cf 93       	push	r28
    5be0:	df 93       	push	r29
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    5be2:	20 91 fa 32 	lds	r18, 0x32FA
    5be6:	30 91 fb 32 	lds	r19, 0x32FB
    5bea:	80 91 06 3f 	lds	r24, 0x3F06
    5bee:	90 91 07 3f 	lds	r25, 0x3F07
    5bf2:	28 17       	cp	r18, r24
    5bf4:	39 07       	cpc	r19, r25
    5bf6:	58 f0       	brcs	.+22     	; 0x5c0e <service_uart_buffer+0x4e>
		return (uart_head[idx] - uart_tail[idx]);
    5bf8:	80 91 fa 32 	lds	r24, 0x32FA
    5bfc:	90 91 fb 32 	lds	r25, 0x32FB
    5c00:	20 91 06 3f 	lds	r18, 0x3F06
    5c04:	30 91 07 3f 	lds	r19, 0x3F07
    5c08:	82 1b       	sub	r24, r18
    5c0a:	93 0b       	sbc	r25, r19
    5c0c:	0c c0       	rjmp	.+24     	; 0x5c26 <service_uart_buffer+0x66>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    5c0e:	80 91 fa 32 	lds	r24, 0x32FA
    5c12:	90 91 fb 32 	lds	r25, 0x32FB
    5c16:	20 91 06 3f 	lds	r18, 0x3F06
    5c1a:	30 91 07 3f 	lds	r19, 0x3F07
    5c1e:	80 50       	subi	r24, 0x00	; 0
    5c20:	9c 4f       	sbci	r25, 0xFC	; 252
    5c22:	82 1b       	sub	r24, r18
    5c24:	93 0b       	sbc	r25, r19
	return _uart_idequeue(port, false);
}

inline void service_uart_buffer(){
	//Resume transmission attempt if outgoing data still pending -- we do this so we can don't block the CPU for too long waiting for flow-control
	if (uart_count(&ulcd)>0){uart_transmit_lcd(&ulcd);}
    5c26:	00 97       	sbiw	r24, 0x00	; 0
    5c28:	09 f4       	brne	.+2      	; 0x5c2c <service_uart_buffer+0x6c>
    5c2a:	7e c1       	rjmp	.+764    	; 0x5f28 <service_uart_buffer+0x368>
}

void inline uart_transmit_lcd(USART_t* port){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0) && (lcd_flow_control == LCD_READY)){
    5c2c:	e0 eb       	ldi	r30, 0xB0	; 176
    5c2e:	fb e0       	ldi	r31, 0x0B	; 11
    5c30:	81 81       	ldd	r24, Z+1	; 0x01
    5c32:	85 fd       	sbrc	r24, 5
    5c34:	fb c0       	rjmp	.+502    	; 0x5e2c <service_uart_buffer+0x26c>
    5c36:	48 c1       	rjmp	.+656    	; 0x5ec8 <service_uart_buffer+0x308>
}

inline uint8_t uart_dequeue(USART_t* port){
	uint8_t idx = port_map(port);
	uint16_t oldtail;
	oldtail = uart_tail[idx];
    5c38:	d6 01       	movw	r26, r12
    5c3a:	ed 91       	ld	r30, X+
    5c3c:	fc 91       	ld	r31, X
    5c3e:	11 97       	sbiw	r26, 0x01	; 1
	uart_tail[idx]++;
    5c40:	8d 91       	ld	r24, X+
    5c42:	9c 91       	ld	r25, X
    5c44:	11 97       	sbiw	r26, 0x01	; 1
    5c46:	01 96       	adiw	r24, 0x01	; 1
    5c48:	8d 93       	st	X+, r24
    5c4a:	9c 93       	st	X, r25
    5c4c:	11 97       	sbiw	r26, 0x01	; 1
	if (uart_tail[idx] >= MAX_BUFFER_LEN){
    5c4e:	8d 91       	ld	r24, X+
    5c50:	9c 91       	ld	r25, X
    5c52:	11 97       	sbiw	r26, 0x01	; 1
    5c54:	b4 e0       	ldi	r27, 0x04	; 4
    5c56:	80 30       	cpi	r24, 0x00	; 0
    5c58:	9b 07       	cpc	r25, r27
    5c5a:	20 f0       	brcs	.+8      	; 0x5c64 <service_uart_buffer+0xa4>
		uart_tail[idx] = 0;
    5c5c:	d6 01       	movw	r26, r12
    5c5e:	1d 92       	st	X+, r1
    5c60:	1c 92       	st	X, r1
    5c62:	11 97       	sbiw	r26, 0x01	; 1
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    5c64:	e4 0d       	add	r30, r4
    5c66:	f5 1d       	adc	r31, r5
    5c68:	b0 80       	ld	r11, Z
void inline uart_transmit_lcd(USART_t* port){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0) && (lcd_flow_control == LCD_READY)){
		toSend = uart_dequeue(port);
		if (toSend == 0x0D) {lcd_flow_control = LCD_BUSY;}
    5c6a:	bd e0       	ldi	r27, 0x0D	; 13
    5c6c:	bb 16       	cp	r11, r27
    5c6e:	11 f4       	brne	.+4      	; 0x5c74 <service_uart_buffer+0xb4>
    5c70:	30 92 e2 26 	sts	0x26E2, r3
#ifndef UART_DEBUG
	uint8_t idx = port_map(port);
	
	//if (idx==0){uart_enqueue(&uctrl, datain);} //xxx
	
	uart_buffer[idx][uart_head[idx]] = datain;
    5c74:	f8 01       	movw	r30, r16
    5c76:	80 81       	ld	r24, Z
    5c78:	91 81       	ldd	r25, Z+1	; 0x01
    5c7a:	80 50       	subi	r24, 0x00	; 0
    5c7c:	95 4c       	sbci	r25, 0xC5	; 197
    5c7e:	dc 01       	movw	r26, r24
    5c80:	ac 92       	st	X, r10
	uart_head[idx]++;
    5c82:	80 81       	ld	r24, Z
    5c84:	91 81       	ldd	r25, Z+1	; 0x01
    5c86:	01 96       	adiw	r24, 0x01	; 1
    5c88:	80 83       	st	Z, r24
    5c8a:	91 83       	std	Z+1, r25	; 0x01
	if (uart_head[idx] >= MAX_BUFFER_LEN){
    5c8c:	80 81       	ld	r24, Z
    5c8e:	91 81       	ldd	r25, Z+1	; 0x01
    5c90:	b4 e0       	ldi	r27, 0x04	; 4
    5c92:	80 30       	cpi	r24, 0x00	; 0
    5c94:	9b 07       	cpc	r25, r27
    5c96:	10 f0       	brcs	.+4      	; 0x5c9c <service_uart_buffer+0xdc>
		uart_head[idx] = 0;
    5c98:	10 82       	st	Z, r1
    5c9a:	11 82       	std	Z+1, r1	; 0x01
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    5c9c:	f7 01       	movw	r30, r14
    5c9e:	81 81       	ldd	r24, Z+1	; 0x01
    5ca0:	85 fd       	sbrc	r24, 5
    5ca2:	1a c0       	rjmp	.+52     	; 0x5cd8 <service_uart_buffer+0x118>
    5ca4:	32 c0       	rjmp	.+100    	; 0x5d0a <service_uart_buffer+0x14a>
}

inline uint8_t uart_dequeue(USART_t* port){
	uint8_t idx = port_map(port);
	uint16_t oldtail;
	oldtail = uart_tail[idx];
    5ca6:	e8 81       	ld	r30, Y
    5ca8:	f9 81       	ldd	r31, Y+1	; 0x01
	uart_tail[idx]++;
    5caa:	88 81       	ld	r24, Y
    5cac:	99 81       	ldd	r25, Y+1	; 0x01
    5cae:	01 96       	adiw	r24, 0x01	; 1
    5cb0:	88 83       	st	Y, r24
    5cb2:	99 83       	std	Y+1, r25	; 0x01
	if (uart_tail[idx] >= MAX_BUFFER_LEN){
    5cb4:	88 81       	ld	r24, Y
    5cb6:	99 81       	ldd	r25, Y+1	; 0x01
    5cb8:	24 e0       	ldi	r18, 0x04	; 4
    5cba:	80 30       	cpi	r24, 0x00	; 0
    5cbc:	92 07       	cpc	r25, r18
    5cbe:	10 f0       	brcs	.+4      	; 0x5cc4 <service_uart_buffer+0x104>
		uart_tail[idx] = 0;
    5cc0:	18 82       	st	Y, r1
    5cc2:	19 82       	std	Y+1, r1	; 0x01
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    5cc4:	e0 50       	subi	r30, 0x00	; 0
    5cc6:	f5 4c       	sbci	r31, 0xC5	; 197
    5cc8:	80 81       	ld	r24, Z
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
    5cca:	d7 01       	movw	r26, r14
    5ccc:	8c 93       	st	X, r24
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    5cce:	11 96       	adiw	r26, 0x01	; 1
    5cd0:	8c 91       	ld	r24, X
    5cd2:	11 97       	sbiw	r26, 0x01	; 1
    5cd4:	85 ff       	sbrs	r24, 5
    5cd6:	19 c0       	rjmp	.+50     	; 0x5d0a <service_uart_buffer+0x14a>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    5cd8:	f8 01       	movw	r30, r16
    5cda:	80 81       	ld	r24, Z
    5cdc:	91 81       	ldd	r25, Z+1	; 0x01
    5cde:	28 81       	ld	r18, Y
    5ce0:	39 81       	ldd	r19, Y+1	; 0x01
    5ce2:	82 17       	cp	r24, r18
    5ce4:	93 07       	cpc	r25, r19
    5ce6:	38 f0       	brcs	.+14     	; 0x5cf6 <service_uart_buffer+0x136>
		return (uart_head[idx] - uart_tail[idx]);
    5ce8:	80 81       	ld	r24, Z
    5cea:	91 81       	ldd	r25, Z+1	; 0x01
    5cec:	28 81       	ld	r18, Y
    5cee:	39 81       	ldd	r19, Y+1	; 0x01
    5cf0:	82 1b       	sub	r24, r18
    5cf2:	93 0b       	sbc	r25, r19
    5cf4:	08 c0       	rjmp	.+16     	; 0x5d06 <service_uart_buffer+0x146>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    5cf6:	80 81       	ld	r24, Z
    5cf8:	91 81       	ldd	r25, Z+1	; 0x01
    5cfa:	28 81       	ld	r18, Y
    5cfc:	39 81       	ldd	r19, Y+1	; 0x01
    5cfe:	80 50       	subi	r24, 0x00	; 0
    5d00:	9c 4f       	sbci	r25, 0xFC	; 252
    5d02:	82 1b       	sub	r24, r18
    5d04:	93 0b       	sbc	r25, r19
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    5d06:	00 97       	sbiw	r24, 0x00	; 0
    5d08:	71 f6       	brne	.-100    	; 0x5ca6 <service_uart_buffer+0xe6>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    5d0a:	f8 01       	movw	r30, r16
    5d0c:	80 81       	ld	r24, Z
    5d0e:	91 81       	ldd	r25, Z+1	; 0x01
    5d10:	28 81       	ld	r18, Y
    5d12:	39 81       	ldd	r19, Y+1	; 0x01
    5d14:	82 17       	cp	r24, r18
    5d16:	93 07       	cpc	r25, r19
    5d18:	38 f0       	brcs	.+14     	; 0x5d28 <service_uart_buffer+0x168>
		return (uart_head[idx] - uart_tail[idx]);
    5d1a:	80 81       	ld	r24, Z
    5d1c:	91 81       	ldd	r25, Z+1	; 0x01
    5d1e:	28 81       	ld	r18, Y
    5d20:	39 81       	ldd	r19, Y+1	; 0x01
    5d22:	82 1b       	sub	r24, r18
    5d24:	93 0b       	sbc	r25, r19
    5d26:	08 c0       	rjmp	.+16     	; 0x5d38 <service_uart_buffer+0x178>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    5d28:	80 81       	ld	r24, Z
    5d2a:	91 81       	ldd	r25, Z+1	; 0x01
    5d2c:	28 81       	ld	r18, Y
    5d2e:	39 81       	ldd	r19, Y+1	; 0x01
    5d30:	80 50       	subi	r24, 0x00	; 0
    5d32:	9c 4f       	sbci	r25, 0xFC	; 252
    5d34:	82 1b       	sub	r24, r18
    5d36:	93 0b       	sbc	r25, r19
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
	}
	//disable the tx outgoing hardware buffer ready interrupt if we have nothing more to put in it.
	if(uart_count(port)>0) uart_txbuffer_enable(port);
    5d38:	00 97       	sbiw	r24, 0x00	; 0
    5d3a:	21 f0       	breq	.+8      	; 0x5d44 <service_uart_buffer+0x184>
    5d3c:	c7 01       	movw	r24, r14
    5d3e:	0e 94 55 1c 	call	0x38aa	; 0x38aa <uart_txbuffer_enable>
    5d42:	03 c0       	rjmp	.+6      	; 0x5d4a <service_uart_buffer+0x18a>
	else uart_txbuffer_disable(port);
    5d44:	c7 01       	movw	r24, r14
    5d46:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <uart_txbuffer_disable>
#ifndef UART_DEBUG
	uint8_t idx = port_map(port);
	
	//if (idx==0){uart_enqueue(&uctrl, datain);} //xxx
	
	uart_buffer[idx][uart_head[idx]] = datain;
    5d4a:	f8 01       	movw	r30, r16
    5d4c:	80 81       	ld	r24, Z
    5d4e:	91 81       	ldd	r25, Z+1	; 0x01
    5d50:	80 50       	subi	r24, 0x00	; 0
    5d52:	95 4c       	sbci	r25, 0xC5	; 197
    5d54:	dc 01       	movw	r26, r24
    5d56:	bc 92       	st	X, r11
	uart_head[idx]++;
    5d58:	80 81       	ld	r24, Z
    5d5a:	91 81       	ldd	r25, Z+1	; 0x01
    5d5c:	01 96       	adiw	r24, 0x01	; 1
    5d5e:	80 83       	st	Z, r24
    5d60:	91 83       	std	Z+1, r25	; 0x01
	if (uart_head[idx] >= MAX_BUFFER_LEN){
    5d62:	80 81       	ld	r24, Z
    5d64:	91 81       	ldd	r25, Z+1	; 0x01
    5d66:	b4 e0       	ldi	r27, 0x04	; 4
    5d68:	80 30       	cpi	r24, 0x00	; 0
    5d6a:	9b 07       	cpc	r25, r27
    5d6c:	10 f0       	brcs	.+4      	; 0x5d72 <service_uart_buffer+0x1b2>
		uart_head[idx] = 0;
    5d6e:	10 82       	st	Z, r1
    5d70:	11 82       	std	Z+1, r1	; 0x01
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    5d72:	f7 01       	movw	r30, r14
    5d74:	81 81       	ldd	r24, Z+1	; 0x01
    5d76:	85 fd       	sbrc	r24, 5
    5d78:	1a c0       	rjmp	.+52     	; 0x5dae <service_uart_buffer+0x1ee>
    5d7a:	32 c0       	rjmp	.+100    	; 0x5de0 <service_uart_buffer+0x220>
}

inline uint8_t uart_dequeue(USART_t* port){
	uint8_t idx = port_map(port);
	uint16_t oldtail;
	oldtail = uart_tail[idx];
    5d7c:	e8 81       	ld	r30, Y
    5d7e:	f9 81       	ldd	r31, Y+1	; 0x01
	uart_tail[idx]++;
    5d80:	88 81       	ld	r24, Y
    5d82:	99 81       	ldd	r25, Y+1	; 0x01
    5d84:	01 96       	adiw	r24, 0x01	; 1
    5d86:	88 83       	st	Y, r24
    5d88:	99 83       	std	Y+1, r25	; 0x01
	if (uart_tail[idx] >= MAX_BUFFER_LEN){
    5d8a:	88 81       	ld	r24, Y
    5d8c:	99 81       	ldd	r25, Y+1	; 0x01
    5d8e:	24 e0       	ldi	r18, 0x04	; 4
    5d90:	80 30       	cpi	r24, 0x00	; 0
    5d92:	92 07       	cpc	r25, r18
    5d94:	10 f0       	brcs	.+4      	; 0x5d9a <service_uart_buffer+0x1da>
		uart_tail[idx] = 0;
    5d96:	18 82       	st	Y, r1
    5d98:	19 82       	std	Y+1, r1	; 0x01
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    5d9a:	e0 50       	subi	r30, 0x00	; 0
    5d9c:	f5 4c       	sbci	r31, 0xC5	; 197
    5d9e:	80 81       	ld	r24, Z
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
    5da0:	d7 01       	movw	r26, r14
    5da2:	8c 93       	st	X, r24
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    5da4:	11 96       	adiw	r26, 0x01	; 1
    5da6:	8c 91       	ld	r24, X
    5da8:	11 97       	sbiw	r26, 0x01	; 1
    5daa:	85 ff       	sbrs	r24, 5
    5dac:	19 c0       	rjmp	.+50     	; 0x5de0 <service_uart_buffer+0x220>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    5dae:	f8 01       	movw	r30, r16
    5db0:	80 81       	ld	r24, Z
    5db2:	91 81       	ldd	r25, Z+1	; 0x01
    5db4:	28 81       	ld	r18, Y
    5db6:	39 81       	ldd	r19, Y+1	; 0x01
    5db8:	82 17       	cp	r24, r18
    5dba:	93 07       	cpc	r25, r19
    5dbc:	38 f0       	brcs	.+14     	; 0x5dcc <service_uart_buffer+0x20c>
		return (uart_head[idx] - uart_tail[idx]);
    5dbe:	80 81       	ld	r24, Z
    5dc0:	91 81       	ldd	r25, Z+1	; 0x01
    5dc2:	28 81       	ld	r18, Y
    5dc4:	39 81       	ldd	r19, Y+1	; 0x01
    5dc6:	82 1b       	sub	r24, r18
    5dc8:	93 0b       	sbc	r25, r19
    5dca:	08 c0       	rjmp	.+16     	; 0x5ddc <service_uart_buffer+0x21c>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    5dcc:	80 81       	ld	r24, Z
    5dce:	91 81       	ldd	r25, Z+1	; 0x01
    5dd0:	28 81       	ld	r18, Y
    5dd2:	39 81       	ldd	r19, Y+1	; 0x01
    5dd4:	80 50       	subi	r24, 0x00	; 0
    5dd6:	9c 4f       	sbci	r25, 0xFC	; 252
    5dd8:	82 1b       	sub	r24, r18
    5dda:	93 0b       	sbc	r25, r19
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    5ddc:	00 97       	sbiw	r24, 0x00	; 0
    5dde:	71 f6       	brne	.-100    	; 0x5d7c <service_uart_buffer+0x1bc>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    5de0:	f8 01       	movw	r30, r16
    5de2:	80 81       	ld	r24, Z
    5de4:	91 81       	ldd	r25, Z+1	; 0x01
    5de6:	28 81       	ld	r18, Y
    5de8:	39 81       	ldd	r19, Y+1	; 0x01
    5dea:	82 17       	cp	r24, r18
    5dec:	93 07       	cpc	r25, r19
    5dee:	38 f0       	brcs	.+14     	; 0x5dfe <service_uart_buffer+0x23e>
		return (uart_head[idx] - uart_tail[idx]);
    5df0:	80 81       	ld	r24, Z
    5df2:	91 81       	ldd	r25, Z+1	; 0x01
    5df4:	28 81       	ld	r18, Y
    5df6:	39 81       	ldd	r19, Y+1	; 0x01
    5df8:	82 1b       	sub	r24, r18
    5dfa:	93 0b       	sbc	r25, r19
    5dfc:	08 c0       	rjmp	.+16     	; 0x5e0e <service_uart_buffer+0x24e>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    5dfe:	80 81       	ld	r24, Z
    5e00:	91 81       	ldd	r25, Z+1	; 0x01
    5e02:	28 81       	ld	r18, Y
    5e04:	39 81       	ldd	r19, Y+1	; 0x01
    5e06:	80 50       	subi	r24, 0x00	; 0
    5e08:	9c 4f       	sbci	r25, 0xFC	; 252
    5e0a:	82 1b       	sub	r24, r18
    5e0c:	93 0b       	sbc	r25, r19
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
	}
	//disable the tx outgoing hardware buffer ready interrupt if we have nothing more to put in it.
	if(uart_count(port)>0) uart_txbuffer_enable(port);
    5e0e:	00 97       	sbiw	r24, 0x00	; 0
    5e10:	21 f0       	breq	.+8      	; 0x5e1a <service_uart_buffer+0x25a>
    5e12:	c7 01       	movw	r24, r14
    5e14:	0e 94 55 1c 	call	0x38aa	; 0x38aa <uart_txbuffer_enable>
    5e18:	03 c0       	rjmp	.+6      	; 0x5e20 <service_uart_buffer+0x260>
	else uart_txbuffer_disable(port);
    5e1a:	c7 01       	movw	r24, r14
    5e1c:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <uart_txbuffer_disable>
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0) && (lcd_flow_control == LCD_READY)){
		toSend = uart_dequeue(port);
		if (toSend == 0x0D) {lcd_flow_control = LCD_BUSY;}
		uart_enqueue(&udata, '`'); //xxx - echo to data port
		uart_enqueue(&udata, toSend); //xxx - echo to data port
		port->DATA = toSend;
    5e20:	f3 01       	movw	r30, r6
    5e22:	b0 82       	st	Z, r11
}

void inline uart_transmit_lcd(USART_t* port){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0) && (lcd_flow_control == LCD_READY)){
    5e24:	81 81       	ldd	r24, Z+1	; 0x01
    5e26:	85 fd       	sbrc	r24, 5
    5e28:	2b c0       	rjmp	.+86     	; 0x5e80 <service_uart_buffer+0x2c0>
    5e2a:	4e c0       	rjmp	.+156    	; 0x5ec8 <service_uart_buffer+0x308>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    5e2c:	0f 2e       	mov	r0, r31
    5e2e:	fa ef       	ldi	r31, 0xFA	; 250
    5e30:	8f 2e       	mov	r8, r31
    5e32:	f2 e3       	ldi	r31, 0x32	; 50
    5e34:	9f 2e       	mov	r9, r31
    5e36:	f0 2d       	mov	r31, r0
    5e38:	0f 2e       	mov	r0, r31
    5e3a:	f6 e0       	ldi	r31, 0x06	; 6
    5e3c:	cf 2e       	mov	r12, r31
    5e3e:	ff e3       	ldi	r31, 0x3F	; 63
    5e40:	df 2e       	mov	r13, r31
    5e42:	f0 2d       	mov	r31, r0
		uart_tail[idx] = 0;
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    5e44:	0f 2e       	mov	r0, r31
    5e46:	f0 e0       	ldi	r31, 0x00	; 0
    5e48:	4f 2e       	mov	r4, r31
    5e4a:	f3 e3       	ldi	r31, 0x33	; 51
    5e4c:	5f 2e       	mov	r5, r31
    5e4e:	f0 2d       	mov	r31, r0
void inline uart_transmit_lcd(USART_t* port){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0) && (lcd_flow_control == LCD_READY)){
		toSend = uart_dequeue(port);
		if (toSend == 0x0D) {lcd_flow_control = LCD_BUSY;}
    5e50:	0f 2e       	mov	r0, r31
    5e52:	fe e4       	ldi	r31, 0x4E	; 78
    5e54:	3f 2e       	mov	r3, r31
    5e56:	f0 2d       	mov	r31, r0
#ifndef UART_DEBUG
	uint8_t idx = port_map(port);
	
	//if (idx==0){uart_enqueue(&uctrl, datain);} //xxx
	
	uart_buffer[idx][uart_head[idx]] = datain;
    5e58:	0e ef       	ldi	r16, 0xFE	; 254
    5e5a:	12 e3       	ldi	r17, 0x32	; 50
    5e5c:	0f 2e       	mov	r0, r31
    5e5e:	f0 e6       	ldi	r31, 0x60	; 96
    5e60:	af 2e       	mov	r10, r31
    5e62:	f0 2d       	mov	r31, r0
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    5e64:	0f 2e       	mov	r0, r31
    5e66:	f0 eb       	ldi	r31, 0xB0	; 176
    5e68:	ef 2e       	mov	r14, r31
    5e6a:	f8 e0       	ldi	r31, 0x08	; 8
    5e6c:	ff 2e       	mov	r15, r31
    5e6e:	f0 2d       	mov	r31, r0
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    5e70:	ca e0       	ldi	r28, 0x0A	; 10
    5e72:	df e3       	ldi	r29, 0x3F	; 63
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0) && (lcd_flow_control == LCD_READY)){
		toSend = uart_dequeue(port);
		if (toSend == 0x0D) {lcd_flow_control = LCD_BUSY;}
		uart_enqueue(&udata, '`'); //xxx - echo to data port
		uart_enqueue(&udata, toSend); //xxx - echo to data port
		port->DATA = toSend;
    5e74:	0f 2e       	mov	r0, r31
    5e76:	f0 eb       	ldi	r31, 0xB0	; 176
    5e78:	6f 2e       	mov	r6, r31
    5e7a:	fb e0       	ldi	r31, 0x0B	; 11
    5e7c:	7f 2e       	mov	r7, r31
    5e7e:	f0 2d       	mov	r31, r0
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    5e80:	d4 01       	movw	r26, r8
    5e82:	8d 91       	ld	r24, X+
    5e84:	9c 91       	ld	r25, X
    5e86:	11 97       	sbiw	r26, 0x01	; 1
    5e88:	f6 01       	movw	r30, r12
    5e8a:	20 81       	ld	r18, Z
    5e8c:	31 81       	ldd	r19, Z+1	; 0x01
    5e8e:	82 17       	cp	r24, r18
    5e90:	93 07       	cpc	r25, r19
    5e92:	40 f0       	brcs	.+16     	; 0x5ea4 <service_uart_buffer+0x2e4>
		return (uart_head[idx] - uart_tail[idx]);
    5e94:	8d 91       	ld	r24, X+
    5e96:	9c 91       	ld	r25, X
    5e98:	11 97       	sbiw	r26, 0x01	; 1
    5e9a:	20 81       	ld	r18, Z
    5e9c:	31 81       	ldd	r19, Z+1	; 0x01
    5e9e:	82 1b       	sub	r24, r18
    5ea0:	93 0b       	sbc	r25, r19
    5ea2:	0b c0       	rjmp	.+22     	; 0x5eba <service_uart_buffer+0x2fa>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    5ea4:	d4 01       	movw	r26, r8
    5ea6:	8d 91       	ld	r24, X+
    5ea8:	9c 91       	ld	r25, X
    5eaa:	11 97       	sbiw	r26, 0x01	; 1
    5eac:	f6 01       	movw	r30, r12
    5eae:	20 81       	ld	r18, Z
    5eb0:	31 81       	ldd	r19, Z+1	; 0x01
    5eb2:	80 50       	subi	r24, 0x00	; 0
    5eb4:	9c 4f       	sbci	r25, 0xFC	; 252
    5eb6:	82 1b       	sub	r24, r18
    5eb8:	93 0b       	sbc	r25, r19
}

void inline uart_transmit_lcd(USART_t* port){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0) && (lcd_flow_control == LCD_READY)){
    5eba:	00 97       	sbiw	r24, 0x00	; 0
    5ebc:	29 f0       	breq	.+10     	; 0x5ec8 <service_uart_buffer+0x308>
    5ebe:	80 91 e2 26 	lds	r24, 0x26E2
    5ec2:	82 35       	cpi	r24, 0x52	; 82
    5ec4:	09 f4       	brne	.+2      	; 0x5ec8 <service_uart_buffer+0x308>
    5ec6:	b8 ce       	rjmp	.-656    	; 0x5c38 <service_uart_buffer+0x78>
		if (toSend == 0x0D) {lcd_flow_control = LCD_BUSY;}
		uart_enqueue(&udata, '`'); //xxx - echo to data port
		uart_enqueue(&udata, toSend); //xxx - echo to data port
		port->DATA = toSend;
	}
	uart_txbuffer_disable(port); //implemented this way to prevent periodic stalls that happen when uart_txbuffer isn't disabled quickly enough
    5ec8:	80 eb       	ldi	r24, 0xB0	; 176
    5eca:	9b e0       	ldi	r25, 0x0B	; 11
    5ecc:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <uart_txbuffer_disable>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    5ed0:	20 91 fa 32 	lds	r18, 0x32FA
    5ed4:	30 91 fb 32 	lds	r19, 0x32FB
    5ed8:	80 91 06 3f 	lds	r24, 0x3F06
    5edc:	90 91 07 3f 	lds	r25, 0x3F07
    5ee0:	28 17       	cp	r18, r24
    5ee2:	39 07       	cpc	r19, r25
    5ee4:	58 f0       	brcs	.+22     	; 0x5efc <service_uart_buffer+0x33c>
		return (uart_head[idx] - uart_tail[idx]);
    5ee6:	80 91 fa 32 	lds	r24, 0x32FA
    5eea:	90 91 fb 32 	lds	r25, 0x32FB
    5eee:	20 91 06 3f 	lds	r18, 0x3F06
    5ef2:	30 91 07 3f 	lds	r19, 0x3F07
    5ef6:	82 1b       	sub	r24, r18
    5ef8:	93 0b       	sbc	r25, r19
    5efa:	0c c0       	rjmp	.+24     	; 0x5f14 <service_uart_buffer+0x354>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    5efc:	80 91 fa 32 	lds	r24, 0x32FA
    5f00:	90 91 fb 32 	lds	r25, 0x32FB
    5f04:	20 91 06 3f 	lds	r18, 0x3F06
    5f08:	30 91 07 3f 	lds	r19, 0x3F07
    5f0c:	80 50       	subi	r24, 0x00	; 0
    5f0e:	9c 4f       	sbci	r25, 0xFC	; 252
    5f10:	82 1b       	sub	r24, r18
    5f12:	93 0b       	sbc	r25, r19
		uart_enqueue(&udata, '`'); //xxx - echo to data port
		uart_enqueue(&udata, toSend); //xxx - echo to data port
		port->DATA = toSend;
	}
	uart_txbuffer_disable(port); //implemented this way to prevent periodic stalls that happen when uart_txbuffer isn't disabled quickly enough
	if ((uart_count(port)>0) && (lcd_flow_control == LCD_READY)){ //...something is waiting to go out
    5f14:	00 97       	sbiw	r24, 0x00	; 0
    5f16:	41 f0       	breq	.+16     	; 0x5f28 <service_uart_buffer+0x368>
    5f18:	80 91 e2 26 	lds	r24, 0x26E2
    5f1c:	82 35       	cpi	r24, 0x52	; 82
    5f1e:	21 f4       	brne	.+8      	; 0x5f28 <service_uart_buffer+0x368>
		uart_txbuffer_enable(port);	
    5f20:	80 eb       	ldi	r24, 0xB0	; 176
    5f22:	9b e0       	ldi	r25, 0x0B	; 11
    5f24:	0e 94 55 1c 	call	0x38aa	; 0x38aa <uart_txbuffer_enable>
}

inline void service_uart_buffer(){
	//Resume transmission attempt if outgoing data still pending -- we do this so we can don't block the CPU for too long waiting for flow-control
	if (uart_count(&ulcd)>0){uart_transmit_lcd(&ulcd);}
}
    5f28:	df 91       	pop	r29
    5f2a:	cf 91       	pop	r28
    5f2c:	1f 91       	pop	r17
    5f2e:	0f 91       	pop	r16
    5f30:	ff 90       	pop	r15
    5f32:	ef 90       	pop	r14
    5f34:	df 90       	pop	r13
    5f36:	cf 90       	pop	r12
    5f38:	bf 90       	pop	r11
    5f3a:	af 90       	pop	r10
    5f3c:	9f 90       	pop	r9
    5f3e:	8f 90       	pop	r8
    5f40:	7f 90       	pop	r7
    5f42:	6f 90       	pop	r6
    5f44:	5f 90       	pop	r5
    5f46:	4f 90       	pop	r4
    5f48:	3f 90       	pop	r3
    5f4a:	08 95       	ret

00005f4c <led_on>:
void inline led_on(uint8_t which){led_dim(which, 0xff);}

void inline led_off(uint8_t which){led_dim(which, 0x00);}

void inline led_dim(uint8_t which, uint8_t brightness){
	switch(which){
    5f4c:	81 30       	cpi	r24, 0x01	; 1
    5f4e:	61 f0       	breq	.+24     	; 0x5f68 <led_on+0x1c>
    5f50:	81 30       	cpi	r24, 0x01	; 1
    5f52:	18 f0       	brcs	.+6      	; 0x5f5a <led_on+0xe>
    5f54:	82 30       	cpi	r24, 0x02	; 2
    5f56:	a9 f4       	brne	.+42     	; 0x5f82 <led_on+0x36>
    5f58:	0e c0       	rjmp	.+28     	; 0x5f76 <led_on+0x2a>
	case LED_0:
		TCF0.CCABUF = (uint16_t)brightness;		
    5f5a:	8f ef       	ldi	r24, 0xFF	; 255
    5f5c:	90 e0       	ldi	r25, 0x00	; 0
    5f5e:	e0 e0       	ldi	r30, 0x00	; 0
    5f60:	fb e0       	ldi	r31, 0x0B	; 11
    5f62:	80 af       	sts	0x70, r24
    5f64:	91 af       	sts	0x71, r25
    5f66:	08 95       	ret
		break;
	case LED_1:
		TCF0.CCBBUF = (uint16_t)brightness;		
    5f68:	8f ef       	ldi	r24, 0xFF	; 255
    5f6a:	90 e0       	ldi	r25, 0x00	; 0
    5f6c:	e0 e0       	ldi	r30, 0x00	; 0
    5f6e:	fb e0       	ldi	r31, 0x0B	; 11
    5f70:	82 af       	sts	0x72, r24
    5f72:	93 af       	sts	0x73, r25
    5f74:	08 95       	ret
		break;
	case LED_3:
		TCF0.CCDBUF = (uint16_t)brightness;
    5f76:	8f ef       	ldi	r24, 0xFF	; 255
    5f78:	90 e0       	ldi	r25, 0x00	; 0
    5f7a:	80 93 3e 0b 	sts	0x0B3E, r24
    5f7e:	90 93 3f 0b 	sts	0x0B3F, r25
    5f82:	08 95       	ret

00005f84 <led_off>:
void inline led_on(uint8_t which){led_dim(which, 0xff);}

void inline led_off(uint8_t which){led_dim(which, 0x00);}

void inline led_dim(uint8_t which, uint8_t brightness){
	switch(which){
    5f84:	81 30       	cpi	r24, 0x01	; 1
    5f86:	51 f0       	breq	.+20     	; 0x5f9c <led_off+0x18>
    5f88:	81 30       	cpi	r24, 0x01	; 1
    5f8a:	18 f0       	brcs	.+6      	; 0x5f92 <led_off+0xe>
    5f8c:	82 30       	cpi	r24, 0x02	; 2
    5f8e:	79 f4       	brne	.+30     	; 0x5fae <led_off+0x2a>
    5f90:	0a c0       	rjmp	.+20     	; 0x5fa6 <led_off+0x22>
	case LED_0:
		TCF0.CCABUF = (uint16_t)brightness;		
    5f92:	e0 e0       	ldi	r30, 0x00	; 0
    5f94:	fb e0       	ldi	r31, 0x0B	; 11
    5f96:	10 ae       	sts	0xb0, r17
    5f98:	11 ae       	sts	0xb1, r17
    5f9a:	08 95       	ret
		break;
	case LED_1:
		TCF0.CCBBUF = (uint16_t)brightness;		
    5f9c:	e0 e0       	ldi	r30, 0x00	; 0
    5f9e:	fb e0       	ldi	r31, 0x0B	; 11
    5fa0:	12 ae       	sts	0xb2, r17
    5fa2:	13 ae       	sts	0xb3, r17
    5fa4:	08 95       	ret
		break;
	case LED_3:
		TCF0.CCDBUF = (uint16_t)brightness;
    5fa6:	10 92 3e 0b 	sts	0x0B3E, r1
    5faa:	10 92 3f 0b 	sts	0x0B3F, r1
    5fae:	08 95       	ret

00005fb0 <led_dim>:
void inline led_on(uint8_t which){led_dim(which, 0xff);}

void inline led_off(uint8_t which){led_dim(which, 0x00);}

void inline led_dim(uint8_t which, uint8_t brightness){
	switch(which){
    5fb0:	81 30       	cpi	r24, 0x01	; 1
    5fb2:	59 f0       	breq	.+22     	; 0x5fca <led_dim+0x1a>
    5fb4:	81 30       	cpi	r24, 0x01	; 1
    5fb6:	18 f0       	brcs	.+6      	; 0x5fbe <led_dim+0xe>
    5fb8:	82 30       	cpi	r24, 0x02	; 2
    5fba:	91 f4       	brne	.+36     	; 0x5fe0 <led_dim+0x30>
    5fbc:	0c c0       	rjmp	.+24     	; 0x5fd6 <led_dim+0x26>
	case LED_0:
		TCF0.CCABUF = (uint16_t)brightness;		
    5fbe:	70 e0       	ldi	r23, 0x00	; 0
    5fc0:	e0 e0       	ldi	r30, 0x00	; 0
    5fc2:	fb e0       	ldi	r31, 0x0B	; 11
    5fc4:	60 af       	sts	0x70, r22
    5fc6:	71 af       	sts	0x71, r23
		break;
    5fc8:	08 95       	ret
	case LED_1:
		TCF0.CCBBUF = (uint16_t)brightness;		
    5fca:	70 e0       	ldi	r23, 0x00	; 0
    5fcc:	e0 e0       	ldi	r30, 0x00	; 0
    5fce:	fb e0       	ldi	r31, 0x0B	; 11
    5fd0:	62 af       	sts	0x72, r22
    5fd2:	73 af       	sts	0x73, r23
		break;
    5fd4:	08 95       	ret
	case LED_3:
		TCF0.CCDBUF = (uint16_t)brightness;
    5fd6:	70 e0       	ldi	r23, 0x00	; 0
    5fd8:	60 93 3e 0b 	sts	0x0B3E, r22
    5fdc:	70 93 3f 0b 	sts	0x0B3F, r23
    5fe0:	08 95       	ret

00005fe2 <led_toggle>:
		break;
	}
}

void inline led_toggle(uint8_t which){
	switch(which){
    5fe2:	81 30       	cpi	r24, 0x01	; 1
    5fe4:	59 f0       	breq	.+22     	; 0x5ffc <led_toggle+0x1a>
    5fe6:	81 30       	cpi	r24, 0x01	; 1
    5fe8:	18 f0       	brcs	.+6      	; 0x5ff0 <led_toggle+0xe>
    5fea:	82 30       	cpi	r24, 0x02	; 2
    5fec:	91 f4       	brne	.+36     	; 0x6012 <led_toggle+0x30>
    5fee:	0c c0       	rjmp	.+24     	; 0x6008 <led_toggle+0x26>
	case LED_0:
		TCF0.CCAL = ~TCF0.CCAL;		
    5ff0:	e0 e0       	ldi	r30, 0x00	; 0
    5ff2:	fb e0       	ldi	r31, 0x0B	; 11
    5ff4:	80 a5       	lds	r24, 0x60
    5ff6:	80 95       	com	r24
    5ff8:	80 a7       	lds	r24, 0x70
		break;
    5ffa:	08 95       	ret
	case LED_1:
		TCF0.CCBL = ~TCF0.CCBL;		
    5ffc:	e0 e0       	ldi	r30, 0x00	; 0
    5ffe:	fb e0       	ldi	r31, 0x0B	; 11
    6000:	82 a5       	lds	r24, 0x62
    6002:	80 95       	com	r24
    6004:	82 a7       	lds	r24, 0x72
		break;
    6006:	08 95       	ret
	case LED_3:
		TCF0.CCDL = ~TCF0.CCDL;
    6008:	e0 e0       	ldi	r30, 0x00	; 0
    600a:	fb e0       	ldi	r31, 0x0B	; 11
    600c:	86 a5       	lds	r24, 0x66
    600e:	80 95       	com	r24
    6010:	86 a7       	lds	r24, 0x76
    6012:	08 95       	ret

00006014 <audio_volume>:
uint8_t _audio_volume;
uint8_t _audio_counter;
uint8_t _audio_state = AUDIO_IDLE;

void audio_volume(uint8_t volume){
	TCF0.CCCBUF = (uint16_t)volume;	
    6014:	90 e0       	ldi	r25, 0x00	; 0
    6016:	e0 e0       	ldi	r30, 0x00	; 0
    6018:	fb e0       	ldi	r31, 0x0B	; 11
    601a:	84 af       	sts	0x74, r24
    601c:	95 af       	sts	0x75, r25
}
    601e:	08 95       	ret

00006020 <init_ui>:
#include "utilities.h"
#include "ui.h"

//Handles all internal UI hardware (2 LEDs + Audio Beeper)

void init_ui(){
    6020:	cf 93       	push	r28
    6022:	df 93       	push	r29
	//LED's are located at PF0 (Lower) and PF1 (Upper)
	PORTF.DIRSET = B8(00001111); //pins 0,1,2,3 to output	
    6024:	e0 ea       	ldi	r30, 0xA0	; 160
    6026:	f6 e0       	ldi	r31, 0x06	; 6
    6028:	8f e0       	ldi	r24, 0x0F	; 15
    602a:	81 83       	std	Z+1, r24	; 0x01
	PORTF.PIN0CTRL = B8(01000000); //Invert the pin (needed to achieve correct PWM output polarity)
    602c:	80 e4       	ldi	r24, 0x40	; 64
    602e:	80 8b       	std	Z+16, r24	; 0x10
	PORTF.PIN1CTRL = B8(01000000); //Invert the pin (needed to achieve correct PWM output polarity)
    6030:	81 8b       	std	Z+17, r24	; 0x11
	PORTF.PIN3CTRL = B8(01000000); //Invert the pin (needed to achieve correct PWM output polarity)
    6032:	83 8b       	std	Z+19, r24	; 0x13
	TCF0.CTRLA = 0x07; //enable; div1024
    6034:	c0 e0       	ldi	r28, 0x00	; 0
    6036:	db e0       	ldi	r29, 0x0B	; 11
    6038:	87 e0       	ldi	r24, 0x07	; 7
    603a:	88 83       	st	Y, r24
	TCF0.CTRLB = B8(11110011); //All output channels enabled (A through D); Single-slope PWM
    603c:	83 ef       	ldi	r24, 0xF3	; 243
    603e:	89 83       	std	Y+1, r24	; 0x01
	TCF0.PER = 0x00FF; //Set the top of the counter to basically force 8 bit operation; we do this for speed when calling dimming functions in the future
    6040:	8f ef       	ldi	r24, 0xFF	; 255
    6042:	90 e0       	ldi	r25, 0x00	; 0
    6044:	8e a3       	lds	r24, 0x5e
    6046:	9f a3       	lds	r25, 0x5f
	audio_volume(0x00);
    6048:	80 e0       	ldi	r24, 0x00	; 0
    604a:	0e 94 0a 30 	call	0x6014	; 0x6014 <audio_volume>
void inline led_off(uint8_t which){led_dim(which, 0x00);}

void inline led_dim(uint8_t which, uint8_t brightness){
	switch(which){
	case LED_0:
		TCF0.CCABUF = (uint16_t)brightness;		
    604e:	18 ae       	sts	0xb8, r17
    6050:	19 ae       	sts	0xb9, r17
		break;
	case LED_1:
		TCF0.CCBBUF = (uint16_t)brightness;		
    6052:	1a ae       	sts	0xba, r17
    6054:	1b ae       	sts	0xbb, r17
		break;
	case LED_3:
		TCF0.CCDBUF = (uint16_t)brightness;
    6056:	10 92 3e 0b 	sts	0x0B3E, r1
    605a:	10 92 3f 0b 	sts	0x0B3F, r1
	TCF0.PER = 0x00FF; //Set the top of the counter to basically force 8 bit operation; we do this for speed when calling dimming functions in the future
	audio_volume(0x00);
	led_off(LED_0);
	led_off(LED_1);
	led_off(LED_3);			
}
    605e:	df 91       	pop	r29
    6060:	cf 91       	pop	r28
    6062:	08 95       	ret

00006064 <_audio_beep>:
	TCF0.CCCBUF = (uint16_t)volume;	
}

//Internal function to actually start making noise
void _audio_beep(){
	_audio_num_beeps--;
    6064:	80 91 0d 3f 	lds	r24, 0x3F0D
    6068:	81 50       	subi	r24, 0x01	; 1
    606a:	80 93 0d 3f 	sts	0x3F0D, r24
	_audio_state = AUDIO_BEEPING;
    606e:	85 e2       	ldi	r24, 0x25	; 37
    6070:	80 93 31 22 	sts	0x2231, r24
	_audio_counter = AUDIO_BEEP_LENGTH;
    6074:	85 e0       	ldi	r24, 0x05	; 5
    6076:	80 93 0e 3f 	sts	0x3F0E, r24
	audio_volume(_audio_volume); //actually start making noise
    607a:	80 91 0c 3f 	lds	r24, 0x3F0C
    607e:	0e 94 0a 30 	call	0x6014	; 0x6014 <audio_volume>
}	
    6082:	08 95       	ret

00006084 <audio_beep>:

//[INTERFACE] This is the function to call from outside to make beepy noises
void audio_beep(uint8_t num_beeps, uint16_t volume){
	if (num_beeps < 1) return; //ignore request if no beeps requested
    6084:	88 23       	and	r24, r24
    6086:	49 f0       	breq	.+18     	; 0x609a <audio_beep+0x16>
	_audio_num_beeps = num_beeps;
    6088:	80 93 0d 3f 	sts	0x3F0D, r24
	if (volume == 0) return; //ignore request if volume level would be inaudible anyway
    608c:	61 15       	cp	r22, r1
    608e:	71 05       	cpc	r23, r1
    6090:	21 f0       	breq	.+8      	; 0x609a <audio_beep+0x16>
	_audio_volume = volume;
    6092:	60 93 0c 3f 	sts	0x3F0C, r22
	_audio_beep();
    6096:	0e 94 32 30 	call	0x6064	; 0x6064 <_audio_beep>
    609a:	08 95       	ret

0000609c <service_audio>:
}

//2ms Service Loop -- Call once every 2ms
void service_audio(){
	switch(_audio_state){
    609c:	80 91 31 22 	lds	r24, 0x2231
    60a0:	85 32       	cpi	r24, 0x25	; 37
    60a2:	19 f0       	breq	.+6      	; 0x60aa <service_audio+0xe>
    60a4:	86 32       	cpi	r24, 0x26	; 38
    60a6:	19 f5       	brne	.+70     	; 0x60ee <service_audio+0x52>
    60a8:	18 c0       	rjmp	.+48     	; 0x60da <service_audio+0x3e>
		case AUDIO_BEEPING:
			_audio_counter--;
    60aa:	80 91 0e 3f 	lds	r24, 0x3F0E
    60ae:	81 50       	subi	r24, 0x01	; 1
    60b0:	80 93 0e 3f 	sts	0x3F0E, r24
			if (_audio_counter <= 0) {
    60b4:	88 23       	and	r24, r24
    60b6:	f1 f4       	brne	.+60     	; 0x60f4 <service_audio+0x58>
				//End of this beep!
				audio_volume(0x00); //silence!
    60b8:	0e 94 0a 30 	call	0x6014	; 0x6014 <audio_volume>
				if (_audio_num_beeps == 0) {
    60bc:	80 91 0d 3f 	lds	r24, 0x3F0D
    60c0:	88 23       	and	r24, r24
    60c2:	21 f4       	brne	.+8      	; 0x60cc <service_audio+0x30>
					//End of this beep sequence -- ALL DONE! =)					
					_audio_state = AUDIO_IDLE;
    60c4:	84 e2       	ldi	r24, 0x24	; 36
    60c6:	80 93 31 22 	sts	0x2231, r24
    60ca:	08 95       	ret
				}
				else {
					//start quiet period between beeps
					_audio_state = AUDIO_BETWEEN;
    60cc:	86 e2       	ldi	r24, 0x26	; 38
    60ce:	80 93 31 22 	sts	0x2231, r24
					_audio_counter = AUDIO_GAP_LENGTH;
    60d2:	82 e3       	ldi	r24, 0x32	; 50
    60d4:	80 93 0e 3f 	sts	0x3F0E, r24
    60d8:	08 95       	ret
				}
			}
			break;
		case AUDIO_BETWEEN:
			_audio_counter--;
    60da:	80 91 0e 3f 	lds	r24, 0x3F0E
    60de:	81 50       	subi	r24, 0x01	; 1
    60e0:	80 93 0e 3f 	sts	0x3F0E, r24
			if (_audio_counter <= 0) {
    60e4:	88 23       	and	r24, r24
    60e6:	31 f4       	brne	.+12     	; 0x60f4 <service_audio+0x58>
				//End of gap
				_audio_beep();
    60e8:	0e 94 32 30 	call	0x6064	; 0x6064 <_audio_beep>
    60ec:	08 95       	ret
			}
			break;
		case AUDIO_IDLE:
		default:
			audio_volume(0x00); //Silence!
    60ee:	80 e0       	ldi	r24, 0x00	; 0
    60f0:	0e 94 0a 30 	call	0x6014	; 0x6014 <audio_volume>
    60f4:	08 95       	ret

000060f6 <__cmpsf2>:
    60f6:	d9 d0       	rcall	.+434    	; 0x62aa <__fp_cmp>
    60f8:	08 f4       	brcc	.+2      	; 0x60fc <__cmpsf2+0x6>
    60fa:	81 e0       	ldi	r24, 0x01	; 1
    60fc:	08 95       	ret

000060fe <__divsf3>:
    60fe:	0c d0       	rcall	.+24     	; 0x6118 <__divsf3x>
    6100:	0f c1       	rjmp	.+542    	; 0x6320 <__fp_round>
    6102:	07 d1       	rcall	.+526    	; 0x6312 <__fp_pscB>
    6104:	40 f0       	brcs	.+16     	; 0x6116 <__divsf3+0x18>
    6106:	fe d0       	rcall	.+508    	; 0x6304 <__fp_pscA>
    6108:	30 f0       	brcs	.+12     	; 0x6116 <__divsf3+0x18>
    610a:	21 f4       	brne	.+8      	; 0x6114 <__divsf3+0x16>
    610c:	5f 3f       	cpi	r21, 0xFF	; 255
    610e:	19 f0       	breq	.+6      	; 0x6116 <__divsf3+0x18>
    6110:	f0 c0       	rjmp	.+480    	; 0x62f2 <__fp_inf>
    6112:	51 11       	cpse	r21, r1
    6114:	39 c1       	rjmp	.+626    	; 0x6388 <__fp_szero>
    6116:	f3 c0       	rjmp	.+486    	; 0x62fe <__fp_nan>

00006118 <__divsf3x>:
    6118:	14 d1       	rcall	.+552    	; 0x6342 <__fp_split3>
    611a:	98 f3       	brcs	.-26     	; 0x6102 <__divsf3+0x4>

0000611c <__divsf3_pse>:
    611c:	99 23       	and	r25, r25
    611e:	c9 f3       	breq	.-14     	; 0x6112 <__divsf3+0x14>
    6120:	55 23       	and	r21, r21
    6122:	b1 f3       	breq	.-20     	; 0x6110 <__divsf3+0x12>
    6124:	95 1b       	sub	r25, r21
    6126:	55 0b       	sbc	r21, r21
    6128:	bb 27       	eor	r27, r27
    612a:	aa 27       	eor	r26, r26
    612c:	62 17       	cp	r22, r18
    612e:	73 07       	cpc	r23, r19
    6130:	84 07       	cpc	r24, r20
    6132:	38 f0       	brcs	.+14     	; 0x6142 <__divsf3_pse+0x26>
    6134:	9f 5f       	subi	r25, 0xFF	; 255
    6136:	5f 4f       	sbci	r21, 0xFF	; 255
    6138:	22 0f       	add	r18, r18
    613a:	33 1f       	adc	r19, r19
    613c:	44 1f       	adc	r20, r20
    613e:	aa 1f       	adc	r26, r26
    6140:	a9 f3       	breq	.-22     	; 0x612c <__divsf3_pse+0x10>
    6142:	33 d0       	rcall	.+102    	; 0x61aa <__divsf3_pse+0x8e>
    6144:	0e 2e       	mov	r0, r30
    6146:	3a f0       	brmi	.+14     	; 0x6156 <__divsf3_pse+0x3a>
    6148:	e0 e8       	ldi	r30, 0x80	; 128
    614a:	30 d0       	rcall	.+96     	; 0x61ac <__divsf3_pse+0x90>
    614c:	91 50       	subi	r25, 0x01	; 1
    614e:	50 40       	sbci	r21, 0x00	; 0
    6150:	e6 95       	lsr	r30
    6152:	00 1c       	adc	r0, r0
    6154:	ca f7       	brpl	.-14     	; 0x6148 <__divsf3_pse+0x2c>
    6156:	29 d0       	rcall	.+82     	; 0x61aa <__divsf3_pse+0x8e>
    6158:	fe 2f       	mov	r31, r30
    615a:	27 d0       	rcall	.+78     	; 0x61aa <__divsf3_pse+0x8e>
    615c:	66 0f       	add	r22, r22
    615e:	77 1f       	adc	r23, r23
    6160:	88 1f       	adc	r24, r24
    6162:	bb 1f       	adc	r27, r27
    6164:	26 17       	cp	r18, r22
    6166:	37 07       	cpc	r19, r23
    6168:	48 07       	cpc	r20, r24
    616a:	ab 07       	cpc	r26, r27
    616c:	b0 e8       	ldi	r27, 0x80	; 128
    616e:	09 f0       	breq	.+2      	; 0x6172 <__divsf3_pse+0x56>
    6170:	bb 0b       	sbc	r27, r27
    6172:	80 2d       	mov	r24, r0
    6174:	bf 01       	movw	r22, r30
    6176:	ff 27       	eor	r31, r31
    6178:	93 58       	subi	r25, 0x83	; 131
    617a:	5f 4f       	sbci	r21, 0xFF	; 255
    617c:	2a f0       	brmi	.+10     	; 0x6188 <__divsf3_pse+0x6c>
    617e:	9e 3f       	cpi	r25, 0xFE	; 254
    6180:	51 05       	cpc	r21, r1
    6182:	68 f0       	brcs	.+26     	; 0x619e <__divsf3_pse+0x82>
    6184:	b6 c0       	rjmp	.+364    	; 0x62f2 <__fp_inf>
    6186:	00 c1       	rjmp	.+512    	; 0x6388 <__fp_szero>
    6188:	5f 3f       	cpi	r21, 0xFF	; 255
    618a:	ec f3       	brlt	.-6      	; 0x6186 <__divsf3_pse+0x6a>
    618c:	98 3e       	cpi	r25, 0xE8	; 232
    618e:	dc f3       	brlt	.-10     	; 0x6186 <__divsf3_pse+0x6a>
    6190:	86 95       	lsr	r24
    6192:	77 95       	ror	r23
    6194:	67 95       	ror	r22
    6196:	b7 95       	ror	r27
    6198:	f7 95       	ror	r31
    619a:	9f 5f       	subi	r25, 0xFF	; 255
    619c:	c9 f7       	brne	.-14     	; 0x6190 <__divsf3_pse+0x74>
    619e:	88 0f       	add	r24, r24
    61a0:	91 1d       	adc	r25, r1
    61a2:	96 95       	lsr	r25
    61a4:	87 95       	ror	r24
    61a6:	97 f9       	bld	r25, 7
    61a8:	08 95       	ret
    61aa:	e1 e0       	ldi	r30, 0x01	; 1
    61ac:	66 0f       	add	r22, r22
    61ae:	77 1f       	adc	r23, r23
    61b0:	88 1f       	adc	r24, r24
    61b2:	bb 1f       	adc	r27, r27
    61b4:	62 17       	cp	r22, r18
    61b6:	73 07       	cpc	r23, r19
    61b8:	84 07       	cpc	r24, r20
    61ba:	ba 07       	cpc	r27, r26
    61bc:	20 f0       	brcs	.+8      	; 0x61c6 <__divsf3_pse+0xaa>
    61be:	62 1b       	sub	r22, r18
    61c0:	73 0b       	sbc	r23, r19
    61c2:	84 0b       	sbc	r24, r20
    61c4:	ba 0b       	sbc	r27, r26
    61c6:	ee 1f       	adc	r30, r30
    61c8:	88 f7       	brcc	.-30     	; 0x61ac <__divsf3_pse+0x90>
    61ca:	e0 95       	com	r30
    61cc:	08 95       	ret

000061ce <__fixsfsi>:
    61ce:	04 d0       	rcall	.+8      	; 0x61d8 <__fixunssfsi>
    61d0:	68 94       	set
    61d2:	b1 11       	cpse	r27, r1
    61d4:	d9 c0       	rjmp	.+434    	; 0x6388 <__fp_szero>
    61d6:	08 95       	ret

000061d8 <__fixunssfsi>:
    61d8:	bc d0       	rcall	.+376    	; 0x6352 <__fp_splitA>
    61da:	88 f0       	brcs	.+34     	; 0x61fe <__fixunssfsi+0x26>
    61dc:	9f 57       	subi	r25, 0x7F	; 127
    61de:	90 f0       	brcs	.+36     	; 0x6204 <__fixunssfsi+0x2c>
    61e0:	b9 2f       	mov	r27, r25
    61e2:	99 27       	eor	r25, r25
    61e4:	b7 51       	subi	r27, 0x17	; 23
    61e6:	a0 f0       	brcs	.+40     	; 0x6210 <__fixunssfsi+0x38>
    61e8:	d1 f0       	breq	.+52     	; 0x621e <__fixunssfsi+0x46>
    61ea:	66 0f       	add	r22, r22
    61ec:	77 1f       	adc	r23, r23
    61ee:	88 1f       	adc	r24, r24
    61f0:	99 1f       	adc	r25, r25
    61f2:	1a f0       	brmi	.+6      	; 0x61fa <__fixunssfsi+0x22>
    61f4:	ba 95       	dec	r27
    61f6:	c9 f7       	brne	.-14     	; 0x61ea <__fixunssfsi+0x12>
    61f8:	12 c0       	rjmp	.+36     	; 0x621e <__fixunssfsi+0x46>
    61fa:	b1 30       	cpi	r27, 0x01	; 1
    61fc:	81 f0       	breq	.+32     	; 0x621e <__fixunssfsi+0x46>
    61fe:	c3 d0       	rcall	.+390    	; 0x6386 <__fp_zero>
    6200:	b1 e0       	ldi	r27, 0x01	; 1
    6202:	08 95       	ret
    6204:	c0 c0       	rjmp	.+384    	; 0x6386 <__fp_zero>
    6206:	67 2f       	mov	r22, r23
    6208:	78 2f       	mov	r23, r24
    620a:	88 27       	eor	r24, r24
    620c:	b8 5f       	subi	r27, 0xF8	; 248
    620e:	39 f0       	breq	.+14     	; 0x621e <__fixunssfsi+0x46>
    6210:	b9 3f       	cpi	r27, 0xF9	; 249
    6212:	cc f3       	brlt	.-14     	; 0x6206 <__fixunssfsi+0x2e>
    6214:	86 95       	lsr	r24
    6216:	77 95       	ror	r23
    6218:	67 95       	ror	r22
    621a:	b3 95       	inc	r27
    621c:	d9 f7       	brne	.-10     	; 0x6214 <__fixunssfsi+0x3c>
    621e:	3e f4       	brtc	.+14     	; 0x622e <__fixunssfsi+0x56>
    6220:	90 95       	com	r25
    6222:	80 95       	com	r24
    6224:	70 95       	com	r23
    6226:	61 95       	neg	r22
    6228:	7f 4f       	sbci	r23, 0xFF	; 255
    622a:	8f 4f       	sbci	r24, 0xFF	; 255
    622c:	9f 4f       	sbci	r25, 0xFF	; 255
    622e:	08 95       	ret

00006230 <__floatunsisf>:
    6230:	e8 94       	clt
    6232:	09 c0       	rjmp	.+18     	; 0x6246 <__floatsisf+0x12>

00006234 <__floatsisf>:
    6234:	97 fb       	bst	r25, 7
    6236:	3e f4       	brtc	.+14     	; 0x6246 <__floatsisf+0x12>
    6238:	90 95       	com	r25
    623a:	80 95       	com	r24
    623c:	70 95       	com	r23
    623e:	61 95       	neg	r22
    6240:	7f 4f       	sbci	r23, 0xFF	; 255
    6242:	8f 4f       	sbci	r24, 0xFF	; 255
    6244:	9f 4f       	sbci	r25, 0xFF	; 255
    6246:	99 23       	and	r25, r25
    6248:	a9 f0       	breq	.+42     	; 0x6274 <__floatsisf+0x40>
    624a:	f9 2f       	mov	r31, r25
    624c:	96 e9       	ldi	r25, 0x96	; 150
    624e:	bb 27       	eor	r27, r27
    6250:	93 95       	inc	r25
    6252:	f6 95       	lsr	r31
    6254:	87 95       	ror	r24
    6256:	77 95       	ror	r23
    6258:	67 95       	ror	r22
    625a:	b7 95       	ror	r27
    625c:	f1 11       	cpse	r31, r1
    625e:	f8 cf       	rjmp	.-16     	; 0x6250 <__floatsisf+0x1c>
    6260:	fa f4       	brpl	.+62     	; 0x62a0 <__floatsisf+0x6c>
    6262:	bb 0f       	add	r27, r27
    6264:	11 f4       	brne	.+4      	; 0x626a <__floatsisf+0x36>
    6266:	60 ff       	sbrs	r22, 0
    6268:	1b c0       	rjmp	.+54     	; 0x62a0 <__floatsisf+0x6c>
    626a:	6f 5f       	subi	r22, 0xFF	; 255
    626c:	7f 4f       	sbci	r23, 0xFF	; 255
    626e:	8f 4f       	sbci	r24, 0xFF	; 255
    6270:	9f 4f       	sbci	r25, 0xFF	; 255
    6272:	16 c0       	rjmp	.+44     	; 0x62a0 <__floatsisf+0x6c>
    6274:	88 23       	and	r24, r24
    6276:	11 f0       	breq	.+4      	; 0x627c <__floatsisf+0x48>
    6278:	96 e9       	ldi	r25, 0x96	; 150
    627a:	11 c0       	rjmp	.+34     	; 0x629e <__floatsisf+0x6a>
    627c:	77 23       	and	r23, r23
    627e:	21 f0       	breq	.+8      	; 0x6288 <__floatsisf+0x54>
    6280:	9e e8       	ldi	r25, 0x8E	; 142
    6282:	87 2f       	mov	r24, r23
    6284:	76 2f       	mov	r23, r22
    6286:	05 c0       	rjmp	.+10     	; 0x6292 <__floatsisf+0x5e>
    6288:	66 23       	and	r22, r22
    628a:	71 f0       	breq	.+28     	; 0x62a8 <__floatsisf+0x74>
    628c:	96 e8       	ldi	r25, 0x86	; 134
    628e:	86 2f       	mov	r24, r22
    6290:	70 e0       	ldi	r23, 0x00	; 0
    6292:	60 e0       	ldi	r22, 0x00	; 0
    6294:	2a f0       	brmi	.+10     	; 0x62a0 <__floatsisf+0x6c>
    6296:	9a 95       	dec	r25
    6298:	66 0f       	add	r22, r22
    629a:	77 1f       	adc	r23, r23
    629c:	88 1f       	adc	r24, r24
    629e:	da f7       	brpl	.-10     	; 0x6296 <__floatsisf+0x62>
    62a0:	88 0f       	add	r24, r24
    62a2:	96 95       	lsr	r25
    62a4:	87 95       	ror	r24
    62a6:	97 f9       	bld	r25, 7
    62a8:	08 95       	ret

000062aa <__fp_cmp>:
    62aa:	99 0f       	add	r25, r25
    62ac:	00 08       	sbc	r0, r0
    62ae:	55 0f       	add	r21, r21
    62b0:	aa 0b       	sbc	r26, r26
    62b2:	e0 e8       	ldi	r30, 0x80	; 128
    62b4:	fe ef       	ldi	r31, 0xFE	; 254
    62b6:	16 16       	cp	r1, r22
    62b8:	17 06       	cpc	r1, r23
    62ba:	e8 07       	cpc	r30, r24
    62bc:	f9 07       	cpc	r31, r25
    62be:	c0 f0       	brcs	.+48     	; 0x62f0 <__fp_cmp+0x46>
    62c0:	12 16       	cp	r1, r18
    62c2:	13 06       	cpc	r1, r19
    62c4:	e4 07       	cpc	r30, r20
    62c6:	f5 07       	cpc	r31, r21
    62c8:	98 f0       	brcs	.+38     	; 0x62f0 <__fp_cmp+0x46>
    62ca:	62 1b       	sub	r22, r18
    62cc:	73 0b       	sbc	r23, r19
    62ce:	84 0b       	sbc	r24, r20
    62d0:	95 0b       	sbc	r25, r21
    62d2:	39 f4       	brne	.+14     	; 0x62e2 <__fp_cmp+0x38>
    62d4:	0a 26       	eor	r0, r26
    62d6:	61 f0       	breq	.+24     	; 0x62f0 <__fp_cmp+0x46>
    62d8:	23 2b       	or	r18, r19
    62da:	24 2b       	or	r18, r20
    62dc:	25 2b       	or	r18, r21
    62de:	21 f4       	brne	.+8      	; 0x62e8 <__fp_cmp+0x3e>
    62e0:	08 95       	ret
    62e2:	0a 26       	eor	r0, r26
    62e4:	09 f4       	brne	.+2      	; 0x62e8 <__fp_cmp+0x3e>
    62e6:	a1 40       	sbci	r26, 0x01	; 1
    62e8:	a6 95       	lsr	r26
    62ea:	8f ef       	ldi	r24, 0xFF	; 255
    62ec:	81 1d       	adc	r24, r1
    62ee:	81 1d       	adc	r24, r1
    62f0:	08 95       	ret

000062f2 <__fp_inf>:
    62f2:	97 f9       	bld	r25, 7
    62f4:	9f 67       	ori	r25, 0x7F	; 127
    62f6:	80 e8       	ldi	r24, 0x80	; 128
    62f8:	70 e0       	ldi	r23, 0x00	; 0
    62fa:	60 e0       	ldi	r22, 0x00	; 0
    62fc:	08 95       	ret

000062fe <__fp_nan>:
    62fe:	9f ef       	ldi	r25, 0xFF	; 255
    6300:	80 ec       	ldi	r24, 0xC0	; 192
    6302:	08 95       	ret

00006304 <__fp_pscA>:
    6304:	00 24       	eor	r0, r0
    6306:	0a 94       	dec	r0
    6308:	16 16       	cp	r1, r22
    630a:	17 06       	cpc	r1, r23
    630c:	18 06       	cpc	r1, r24
    630e:	09 06       	cpc	r0, r25
    6310:	08 95       	ret

00006312 <__fp_pscB>:
    6312:	00 24       	eor	r0, r0
    6314:	0a 94       	dec	r0
    6316:	12 16       	cp	r1, r18
    6318:	13 06       	cpc	r1, r19
    631a:	14 06       	cpc	r1, r20
    631c:	05 06       	cpc	r0, r21
    631e:	08 95       	ret

00006320 <__fp_round>:
    6320:	09 2e       	mov	r0, r25
    6322:	03 94       	inc	r0
    6324:	00 0c       	add	r0, r0
    6326:	11 f4       	brne	.+4      	; 0x632c <__fp_round+0xc>
    6328:	88 23       	and	r24, r24
    632a:	52 f0       	brmi	.+20     	; 0x6340 <__fp_round+0x20>
    632c:	bb 0f       	add	r27, r27
    632e:	40 f4       	brcc	.+16     	; 0x6340 <__fp_round+0x20>
    6330:	bf 2b       	or	r27, r31
    6332:	11 f4       	brne	.+4      	; 0x6338 <__fp_round+0x18>
    6334:	60 ff       	sbrs	r22, 0
    6336:	04 c0       	rjmp	.+8      	; 0x6340 <__fp_round+0x20>
    6338:	6f 5f       	subi	r22, 0xFF	; 255
    633a:	7f 4f       	sbci	r23, 0xFF	; 255
    633c:	8f 4f       	sbci	r24, 0xFF	; 255
    633e:	9f 4f       	sbci	r25, 0xFF	; 255
    6340:	08 95       	ret

00006342 <__fp_split3>:
    6342:	57 fd       	sbrc	r21, 7
    6344:	90 58       	subi	r25, 0x80	; 128
    6346:	44 0f       	add	r20, r20
    6348:	55 1f       	adc	r21, r21
    634a:	59 f0       	breq	.+22     	; 0x6362 <__fp_splitA+0x10>
    634c:	5f 3f       	cpi	r21, 0xFF	; 255
    634e:	71 f0       	breq	.+28     	; 0x636c <__fp_splitA+0x1a>
    6350:	47 95       	ror	r20

00006352 <__fp_splitA>:
    6352:	88 0f       	add	r24, r24
    6354:	97 fb       	bst	r25, 7
    6356:	99 1f       	adc	r25, r25
    6358:	61 f0       	breq	.+24     	; 0x6372 <__fp_splitA+0x20>
    635a:	9f 3f       	cpi	r25, 0xFF	; 255
    635c:	79 f0       	breq	.+30     	; 0x637c <__fp_splitA+0x2a>
    635e:	87 95       	ror	r24
    6360:	08 95       	ret
    6362:	12 16       	cp	r1, r18
    6364:	13 06       	cpc	r1, r19
    6366:	14 06       	cpc	r1, r20
    6368:	55 1f       	adc	r21, r21
    636a:	f2 cf       	rjmp	.-28     	; 0x6350 <__fp_split3+0xe>
    636c:	46 95       	lsr	r20
    636e:	f1 df       	rcall	.-30     	; 0x6352 <__fp_splitA>
    6370:	08 c0       	rjmp	.+16     	; 0x6382 <__fp_splitA+0x30>
    6372:	16 16       	cp	r1, r22
    6374:	17 06       	cpc	r1, r23
    6376:	18 06       	cpc	r1, r24
    6378:	99 1f       	adc	r25, r25
    637a:	f1 cf       	rjmp	.-30     	; 0x635e <__fp_splitA+0xc>
    637c:	86 95       	lsr	r24
    637e:	71 05       	cpc	r23, r1
    6380:	61 05       	cpc	r22, r1
    6382:	08 94       	sec
    6384:	08 95       	ret

00006386 <__fp_zero>:
    6386:	e8 94       	clt

00006388 <__fp_szero>:
    6388:	bb 27       	eor	r27, r27
    638a:	66 27       	eor	r22, r22
    638c:	77 27       	eor	r23, r23
    638e:	cb 01       	movw	r24, r22
    6390:	97 f9       	bld	r25, 7
    6392:	08 95       	ret

00006394 <__mulsf3>:
    6394:	0b d0       	rcall	.+22     	; 0x63ac <__mulsf3x>
    6396:	c4 cf       	rjmp	.-120    	; 0x6320 <__fp_round>
    6398:	b5 df       	rcall	.-150    	; 0x6304 <__fp_pscA>
    639a:	28 f0       	brcs	.+10     	; 0x63a6 <__mulsf3+0x12>
    639c:	ba df       	rcall	.-140    	; 0x6312 <__fp_pscB>
    639e:	18 f0       	brcs	.+6      	; 0x63a6 <__mulsf3+0x12>
    63a0:	95 23       	and	r25, r21
    63a2:	09 f0       	breq	.+2      	; 0x63a6 <__mulsf3+0x12>
    63a4:	a6 cf       	rjmp	.-180    	; 0x62f2 <__fp_inf>
    63a6:	ab cf       	rjmp	.-170    	; 0x62fe <__fp_nan>
    63a8:	11 24       	eor	r1, r1
    63aa:	ee cf       	rjmp	.-36     	; 0x6388 <__fp_szero>

000063ac <__mulsf3x>:
    63ac:	ca df       	rcall	.-108    	; 0x6342 <__fp_split3>
    63ae:	a0 f3       	brcs	.-24     	; 0x6398 <__mulsf3+0x4>

000063b0 <__mulsf3_pse>:
    63b0:	95 9f       	mul	r25, r21
    63b2:	d1 f3       	breq	.-12     	; 0x63a8 <__mulsf3+0x14>
    63b4:	95 0f       	add	r25, r21
    63b6:	50 e0       	ldi	r21, 0x00	; 0
    63b8:	55 1f       	adc	r21, r21
    63ba:	62 9f       	mul	r22, r18
    63bc:	f0 01       	movw	r30, r0
    63be:	72 9f       	mul	r23, r18
    63c0:	bb 27       	eor	r27, r27
    63c2:	f0 0d       	add	r31, r0
    63c4:	b1 1d       	adc	r27, r1
    63c6:	63 9f       	mul	r22, r19
    63c8:	aa 27       	eor	r26, r26
    63ca:	f0 0d       	add	r31, r0
    63cc:	b1 1d       	adc	r27, r1
    63ce:	aa 1f       	adc	r26, r26
    63d0:	64 9f       	mul	r22, r20
    63d2:	66 27       	eor	r22, r22
    63d4:	b0 0d       	add	r27, r0
    63d6:	a1 1d       	adc	r26, r1
    63d8:	66 1f       	adc	r22, r22
    63da:	82 9f       	mul	r24, r18
    63dc:	22 27       	eor	r18, r18
    63de:	b0 0d       	add	r27, r0
    63e0:	a1 1d       	adc	r26, r1
    63e2:	62 1f       	adc	r22, r18
    63e4:	73 9f       	mul	r23, r19
    63e6:	b0 0d       	add	r27, r0
    63e8:	a1 1d       	adc	r26, r1
    63ea:	62 1f       	adc	r22, r18
    63ec:	83 9f       	mul	r24, r19
    63ee:	a0 0d       	add	r26, r0
    63f0:	61 1d       	adc	r22, r1
    63f2:	22 1f       	adc	r18, r18
    63f4:	74 9f       	mul	r23, r20
    63f6:	33 27       	eor	r19, r19
    63f8:	a0 0d       	add	r26, r0
    63fa:	61 1d       	adc	r22, r1
    63fc:	23 1f       	adc	r18, r19
    63fe:	84 9f       	mul	r24, r20
    6400:	60 0d       	add	r22, r0
    6402:	21 1d       	adc	r18, r1
    6404:	82 2f       	mov	r24, r18
    6406:	76 2f       	mov	r23, r22
    6408:	6a 2f       	mov	r22, r26
    640a:	11 24       	eor	r1, r1
    640c:	9f 57       	subi	r25, 0x7F	; 127
    640e:	50 40       	sbci	r21, 0x00	; 0
    6410:	8a f0       	brmi	.+34     	; 0x6434 <__mulsf3_pse+0x84>
    6412:	e1 f0       	breq	.+56     	; 0x644c <__mulsf3_pse+0x9c>
    6414:	88 23       	and	r24, r24
    6416:	4a f0       	brmi	.+18     	; 0x642a <__mulsf3_pse+0x7a>
    6418:	ee 0f       	add	r30, r30
    641a:	ff 1f       	adc	r31, r31
    641c:	bb 1f       	adc	r27, r27
    641e:	66 1f       	adc	r22, r22
    6420:	77 1f       	adc	r23, r23
    6422:	88 1f       	adc	r24, r24
    6424:	91 50       	subi	r25, 0x01	; 1
    6426:	50 40       	sbci	r21, 0x00	; 0
    6428:	a9 f7       	brne	.-22     	; 0x6414 <__mulsf3_pse+0x64>
    642a:	9e 3f       	cpi	r25, 0xFE	; 254
    642c:	51 05       	cpc	r21, r1
    642e:	70 f0       	brcs	.+28     	; 0x644c <__mulsf3_pse+0x9c>
    6430:	60 cf       	rjmp	.-320    	; 0x62f2 <__fp_inf>
    6432:	aa cf       	rjmp	.-172    	; 0x6388 <__fp_szero>
    6434:	5f 3f       	cpi	r21, 0xFF	; 255
    6436:	ec f3       	brlt	.-6      	; 0x6432 <__mulsf3_pse+0x82>
    6438:	98 3e       	cpi	r25, 0xE8	; 232
    643a:	dc f3       	brlt	.-10     	; 0x6432 <__mulsf3_pse+0x82>
    643c:	86 95       	lsr	r24
    643e:	77 95       	ror	r23
    6440:	67 95       	ror	r22
    6442:	b7 95       	ror	r27
    6444:	f7 95       	ror	r31
    6446:	e7 95       	ror	r30
    6448:	9f 5f       	subi	r25, 0xFF	; 255
    644a:	c1 f7       	brne	.-16     	; 0x643c <__mulsf3_pse+0x8c>
    644c:	fe 2b       	or	r31, r30
    644e:	88 0f       	add	r24, r24
    6450:	91 1d       	adc	r25, r1
    6452:	96 95       	lsr	r25
    6454:	87 95       	ror	r24
    6456:	97 f9       	bld	r25, 7
    6458:	08 95       	ret

0000645a <atoi>:
    645a:	fc 01       	movw	r30, r24
    645c:	88 27       	eor	r24, r24
    645e:	99 27       	eor	r25, r25
    6460:	e8 94       	clt
    6462:	21 91       	ld	r18, Z+
    6464:	20 32       	cpi	r18, 0x20	; 32
    6466:	e9 f3       	breq	.-6      	; 0x6462 <atoi+0x8>
    6468:	29 30       	cpi	r18, 0x09	; 9
    646a:	10 f0       	brcs	.+4      	; 0x6470 <atoi+0x16>
    646c:	2e 30       	cpi	r18, 0x0E	; 14
    646e:	c8 f3       	brcs	.-14     	; 0x6462 <atoi+0x8>
    6470:	2b 32       	cpi	r18, 0x2B	; 43
    6472:	41 f0       	breq	.+16     	; 0x6484 <atoi+0x2a>
    6474:	2d 32       	cpi	r18, 0x2D	; 45
    6476:	39 f4       	brne	.+14     	; 0x6486 <atoi+0x2c>
    6478:	68 94       	set
    647a:	04 c0       	rjmp	.+8      	; 0x6484 <atoi+0x2a>
    647c:	0e 94 4b 32 	call	0x6496	; 0x6496 <__mulhi_const_10>
    6480:	82 0f       	add	r24, r18
    6482:	91 1d       	adc	r25, r1
    6484:	21 91       	ld	r18, Z+
    6486:	20 53       	subi	r18, 0x30	; 48
    6488:	2a 30       	cpi	r18, 0x0A	; 10
    648a:	c0 f3       	brcs	.-16     	; 0x647c <atoi+0x22>
    648c:	1e f4       	brtc	.+6      	; 0x6494 <atoi+0x3a>
    648e:	90 95       	com	r25
    6490:	81 95       	neg	r24
    6492:	9f 4f       	sbci	r25, 0xFF	; 255
    6494:	08 95       	ret

00006496 <__mulhi_const_10>:
    6496:	7a e0       	ldi	r23, 0x0A	; 10
    6498:	97 9f       	mul	r25, r23
    649a:	90 2d       	mov	r25, r0
    649c:	87 9f       	mul	r24, r23
    649e:	80 2d       	mov	r24, r0
    64a0:	91 0d       	add	r25, r1
    64a2:	11 24       	eor	r1, r1
    64a4:	08 95       	ret

000064a6 <utoa>:
    64a6:	fb 01       	movw	r30, r22
    64a8:	9f 01       	movw	r18, r30
    64aa:	42 30       	cpi	r20, 0x02	; 2
    64ac:	74 f0       	brlt	.+28     	; 0x64ca <utoa+0x24>
    64ae:	45 32       	cpi	r20, 0x25	; 37
    64b0:	64 f4       	brge	.+24     	; 0x64ca <utoa+0x24>
    64b2:	64 2f       	mov	r22, r20
    64b4:	77 27       	eor	r23, r23
    64b6:	0e 94 cb 32 	call	0x6596	; 0x6596 <__udivmodhi4>
    64ba:	80 5d       	subi	r24, 0xD0	; 208
    64bc:	8a 33       	cpi	r24, 0x3A	; 58
    64be:	0c f0       	brlt	.+2      	; 0x64c2 <utoa+0x1c>
    64c0:	89 5d       	subi	r24, 0xD9	; 217
    64c2:	81 93       	st	Z+, r24
    64c4:	cb 01       	movw	r24, r22
    64c6:	00 97       	sbiw	r24, 0x00	; 0
    64c8:	a1 f7       	brne	.-24     	; 0x64b2 <utoa+0xc>
    64ca:	10 82       	st	Z, r1
    64cc:	c9 01       	movw	r24, r18
    64ce:	0c 94 bb 32 	jmp	0x6576	; 0x6576 <strrev>

000064d2 <__eerd_block_x128a1>:
    64d2:	e0 ec       	ldi	r30, 0xC0	; 192
    64d4:	f1 e0       	ldi	r31, 0x01	; 1
    64d6:	a7 85       	ldd	r26, Z+15	; 0x0f
    64d8:	a7 fd       	sbrc	r26, 7
    64da:	fd cf       	rjmp	.-6      	; 0x64d6 <__eerd_block_x128a1+0x4>
    64dc:	a4 85       	ldd	r26, Z+12	; 0x0c
    64de:	a8 60       	ori	r26, 0x08	; 8
    64e0:	a4 87       	std	Z+12, r26	; 0x0c
    64e2:	60 50       	subi	r22, 0x00	; 0
    64e4:	70 4f       	sbci	r23, 0xF0	; 240
    64e6:	0c 94 b2 32 	jmp	0x6564	; 0x6564 <memcpy>

000064ea <__eerd_byte_x128a1>:
    64ea:	03 d0       	rcall	.+6      	; 0x64f2 <eeprom_mapen>
    64ec:	80 81       	ld	r24, Z
    64ee:	99 27       	eor	r25, r25
    64f0:	08 95       	ret

000064f2 <eeprom_mapen>:
    64f2:	e0 ec       	ldi	r30, 0xC0	; 192
    64f4:	f1 e0       	ldi	r31, 0x01	; 1
    64f6:	37 85       	ldd	r19, Z+15	; 0x0f
    64f8:	37 fd       	sbrc	r19, 7
    64fa:	fd cf       	rjmp	.-6      	; 0x64f6 <eeprom_mapen+0x4>
    64fc:	34 85       	ldd	r19, Z+12	; 0x0c
    64fe:	38 60       	ori	r19, 0x08	; 8
    6500:	34 87       	std	Z+12, r19	; 0x0c
    6502:	fc 01       	movw	r30, r24
    6504:	e0 50       	subi	r30, 0x00	; 0
    6506:	f0 4f       	sbci	r31, 0xF0	; 240
    6508:	08 95       	ret

0000650a <__eewr_block_x128a1>:
    650a:	dc 01       	movw	r26, r24
    650c:	cb 01       	movw	r24, r22
    650e:	03 c0       	rjmp	.+6      	; 0x6516 <__eewr_block_x128a1+0xc>
    6510:	2d 91       	ld	r18, X+
    6512:	0e 94 90 32 	call	0x6520	; 0x6520 <__eewr_r18_x128a1>
    6516:	41 50       	subi	r20, 0x01	; 1
    6518:	50 40       	sbci	r21, 0x00	; 0
    651a:	d0 f7       	brcc	.-12     	; 0x6510 <__eewr_block_x128a1+0x6>
    651c:	08 95       	ret

0000651e <__eewr_byte_x128a1>:
    651e:	26 2f       	mov	r18, r22

00006520 <__eewr_r18_x128a1>:
    6520:	e0 ec       	ldi	r30, 0xC0	; 192
    6522:	f1 e0       	ldi	r31, 0x01	; 1
    6524:	37 85       	ldd	r19, Z+15	; 0x0f
    6526:	37 fd       	sbrc	r19, 7
    6528:	fd cf       	rjmp	.-6      	; 0x6524 <__eewr_r18_x128a1+0x4>
    652a:	34 85       	ldd	r19, Z+12	; 0x0c
    652c:	37 7f       	andi	r19, 0xF7	; 247
    652e:	34 87       	std	Z+12, r19	; 0x0c
    6530:	37 85       	ldd	r19, Z+15	; 0x0f
    6532:	31 ff       	sbrs	r19, 1
    6534:	09 c0       	rjmp	.+18     	; 0x6548 <__eewr_r18_x128a1+0x28>
    6536:	36 e3       	ldi	r19, 0x36	; 54
    6538:	32 87       	std	Z+10, r19	; 0x0a
    653a:	38 ed       	ldi	r19, 0xD8	; 216
    653c:	34 bf       	out	0x34, r19	; 52
    653e:	31 e0       	ldi	r19, 0x01	; 1
    6540:	33 87       	std	Z+11, r19	; 0x0b
    6542:	37 85       	ldd	r19, Z+15	; 0x0f
    6544:	37 fd       	sbrc	r19, 7
    6546:	fd cf       	rjmp	.-6      	; 0x6542 <__eewr_r18_x128a1+0x22>
    6548:	33 e3       	ldi	r19, 0x33	; 51
    654a:	32 87       	std	Z+10, r19	; 0x0a
    654c:	80 83       	st	Z, r24
    654e:	91 83       	std	Z+1, r25	; 0x01
    6550:	12 82       	std	Z+2, r1	; 0x02
    6552:	24 83       	std	Z+4, r18	; 0x04
    6554:	25 e3       	ldi	r18, 0x35	; 53
    6556:	22 87       	std	Z+10, r18	; 0x0a
    6558:	28 ed       	ldi	r18, 0xD8	; 216
    655a:	31 e0       	ldi	r19, 0x01	; 1
    655c:	24 bf       	out	0x34, r18	; 52
    655e:	33 87       	std	Z+11, r19	; 0x0b
    6560:	01 96       	adiw	r24, 0x01	; 1
    6562:	08 95       	ret

00006564 <memcpy>:
    6564:	fb 01       	movw	r30, r22
    6566:	dc 01       	movw	r26, r24
    6568:	02 c0       	rjmp	.+4      	; 0x656e <memcpy+0xa>
    656a:	01 90       	ld	r0, Z+
    656c:	0d 92       	st	X+, r0
    656e:	41 50       	subi	r20, 0x01	; 1
    6570:	50 40       	sbci	r21, 0x00	; 0
    6572:	d8 f7       	brcc	.-10     	; 0x656a <memcpy+0x6>
    6574:	08 95       	ret

00006576 <strrev>:
    6576:	dc 01       	movw	r26, r24
    6578:	fc 01       	movw	r30, r24
    657a:	67 2f       	mov	r22, r23
    657c:	71 91       	ld	r23, Z+
    657e:	77 23       	and	r23, r23
    6580:	e1 f7       	brne	.-8      	; 0x657a <strrev+0x4>
    6582:	32 97       	sbiw	r30, 0x02	; 2
    6584:	04 c0       	rjmp	.+8      	; 0x658e <strrev+0x18>
    6586:	7c 91       	ld	r23, X
    6588:	6d 93       	st	X+, r22
    658a:	70 83       	st	Z, r23
    658c:	62 91       	ld	r22, -Z
    658e:	ae 17       	cp	r26, r30
    6590:	bf 07       	cpc	r27, r31
    6592:	c8 f3       	brcs	.-14     	; 0x6586 <strrev+0x10>
    6594:	08 95       	ret

00006596 <__udivmodhi4>:
    6596:	aa 1b       	sub	r26, r26
    6598:	bb 1b       	sub	r27, r27
    659a:	51 e1       	ldi	r21, 0x11	; 17
    659c:	07 c0       	rjmp	.+14     	; 0x65ac <__udivmodhi4_ep>

0000659e <__udivmodhi4_loop>:
    659e:	aa 1f       	adc	r26, r26
    65a0:	bb 1f       	adc	r27, r27
    65a2:	a6 17       	cp	r26, r22
    65a4:	b7 07       	cpc	r27, r23
    65a6:	10 f0       	brcs	.+4      	; 0x65ac <__udivmodhi4_ep>
    65a8:	a6 1b       	sub	r26, r22
    65aa:	b7 0b       	sbc	r27, r23

000065ac <__udivmodhi4_ep>:
    65ac:	88 1f       	adc	r24, r24
    65ae:	99 1f       	adc	r25, r25
    65b0:	5a 95       	dec	r21
    65b2:	a9 f7       	brne	.-22     	; 0x659e <__udivmodhi4_loop>
    65b4:	80 95       	com	r24
    65b6:	90 95       	com	r25
    65b8:	bc 01       	movw	r22, r24
    65ba:	cd 01       	movw	r24, r26
    65bc:	08 95       	ret

000065be <_exit>:
    65be:	f8 94       	cli

000065c0 <__stop_program>:
    65c0:	ff cf       	rjmp	.-2      	; 0x65c0 <__stop_program>
