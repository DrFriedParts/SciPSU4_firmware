
SciPSU4-Firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006648  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000278  00802000  00006648  000066fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00001cd9  00802278  00802278  00006974  2**0
                  ALLOC
  3 .eeprom       00000011  00810000  00810000  00006974  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         00002790  00000000  00000000  00006988  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      00000a1e  00000000  00000000  00009118  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 00000260  00000000  00000000  00009b38  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00007acd  00000000  00000000  00009d98  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014a7  00000000  00000000  00011865  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000283b  00000000  00000000  00012d0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000118c  00000000  00000000  00015548  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001734  00000000  00000000  000166d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000410c  00000000  00000000  00017e08  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000858  00000000  00000000  0001bf14  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__ctors_end>
       4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
       8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
       c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      10:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      14:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      18:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      1c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      20:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      24:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      28:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      2c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      30:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      34:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      38:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      3c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      40:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      44:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      48:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      4c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      50:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      54:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      58:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      5c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      60:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      64:	0c 94 b2 1b 	jmp	0x3764	; 0x3764 <__vector_25>
      68:	0c 94 45 1d 	jmp	0x3a8a	; 0x3a8a <__vector_26>
      6c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      70:	0c 94 20 1c 	jmp	0x3840	; 0x3840 <__vector_28>
      74:	0c 94 a2 1c 	jmp	0x3944	; 0x3944 <__vector_29>
      78:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      7c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      80:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      84:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      88:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      8c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      90:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      94:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      98:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      9c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      a0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      a4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      a8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      ac:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      b0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      b4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      b8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      bc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      c0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      c4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      c8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      cc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      d0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      d4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      d8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      dc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      e0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      e4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      e8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      ec:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      f0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      f4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      f8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      fc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     100:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     104:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     108:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     10c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     110:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     114:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     118:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     11c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     120:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     124:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     128:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     12c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     130:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     134:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     138:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     13c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     140:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     144:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     148:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     14c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     150:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     154:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     158:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     15c:	0c 94 65 14 	jmp	0x28ca	; 0x28ca <__vector_87>
     160:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     164:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     168:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     16c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     170:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     174:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     178:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     17c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     180:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     184:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     188:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     18c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     190:	0c 94 4c 16 	jmp	0x2c98	; 0x2c98 <__vector_100>
     194:	0c 94 b4 16 	jmp	0x2d68	; 0x2d68 <__vector_101>
     198:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     19c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1a0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1a4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1a8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1ac:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1b0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1b4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1b8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1bc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1c0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1c4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1c8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1cc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1d0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1d4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1d8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1dc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1e0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1e4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1e8:	0c 94 b4 22 	jmp	0x4568	; 0x4568 <__vector_122>
     1ec:	0c 94 e2 20 	jmp	0x41c4	; 0x41c4 <__vector_123>
     1f0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>

000001f4 <__ctors_end>:
     1f4:	11 24       	eor	r1, r1
     1f6:	1f be       	out	0x3f, r1	; 63
     1f8:	cf ef       	ldi	r28, 0xFF	; 255
     1fa:	df e3       	ldi	r29, 0x3F	; 63
     1fc:	de bf       	out	0x3e, r29	; 62
     1fe:	cd bf       	out	0x3d, r28	; 61
     200:	00 e0       	ldi	r16, 0x00	; 0
     202:	0c bf       	out	0x3c, r16	; 60
     204:	18 be       	out	0x38, r1	; 56
     206:	19 be       	out	0x39, r1	; 57
     208:	1a be       	out	0x3a, r1	; 58
     20a:	1b be       	out	0x3b, r1	; 59

0000020c <__do_copy_data>:
     20c:	12 e2       	ldi	r17, 0x22	; 34
     20e:	a0 e0       	ldi	r26, 0x00	; 0
     210:	b0 e2       	ldi	r27, 0x20	; 32
     212:	e8 e4       	ldi	r30, 0x48	; 72
     214:	f6 e6       	ldi	r31, 0x66	; 102
     216:	00 e0       	ldi	r16, 0x00	; 0
     218:	0b bf       	out	0x3b, r16	; 59
     21a:	02 c0       	rjmp	.+4      	; 0x220 <__do_copy_data+0x14>
     21c:	07 90       	elpm	r0, Z+
     21e:	0d 92       	st	X+, r0
     220:	a8 37       	cpi	r26, 0x78	; 120
     222:	b1 07       	cpc	r27, r17
     224:	d9 f7       	brne	.-10     	; 0x21c <__do_copy_data+0x10>

00000226 <__do_clear_bss>:
     226:	1f e3       	ldi	r17, 0x3F	; 63
     228:	a8 e7       	ldi	r26, 0x78	; 120
     22a:	b2 e2       	ldi	r27, 0x22	; 34
     22c:	01 c0       	rjmp	.+2      	; 0x230 <.do_clear_bss_start>

0000022e <.do_clear_bss_loop>:
     22e:	1d 92       	st	X+, r1

00000230 <.do_clear_bss_start>:
     230:	a1 35       	cpi	r26, 0x51	; 81
     232:	b1 07       	cpc	r27, r17
     234:	e1 f7       	brne	.-8      	; 0x22e <.do_clear_bss_loop>
     236:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <main>
     23a:	0c 94 22 33 	jmp	0x6644	; 0x6644 <_exit>

0000023e <__bad_interrupt>:
     23e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000242 <adc_read_cal_byte>:

///http://www.bostonandroid.com/manuals/xmega-precision-adc-howto.html
uint8_t adc_read_cal_byte( uint8_t index ){
	uint8_t result;
	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
     242:	aa ec       	ldi	r26, 0xCA	; 202
     244:	b1 e0       	ldi	r27, 0x01	; 1
     246:	92 e0       	ldi	r25, 0x02	; 2
     248:	9c 93       	st	X, r25
	result = pgm_read_byte(index);
     24a:	e8 2f       	mov	r30, r24
     24c:	f0 e0       	ldi	r31, 0x00	; 0
     24e:	84 91       	lpm	r24, Z
	/* Clean up NVM Command register. */
	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
     250:	1c 92       	st	X, r1
	return( result );
}
     252:	08 95       	ret

00000254 <adc_bank_select>:
//#############################################################
//## ADCs -- OPERATION
//#############################################################

void adc_bank_select(uint8_t which){
	if(which % 2){
     254:	80 ff       	sbrs	r24, 0
     256:	10 c0       	rjmp	.+32     	; 0x278 <adc_bank_select+0x24>
		ADCA.CH0.MUXCTRL = B8(00000000); //CH0 converts from PA0
     258:	e0 e0       	ldi	r30, 0x00	; 0
     25a:	f2 e0       	ldi	r31, 0x02	; 2
     25c:	11 a2       	lds	r17, 0x91
		ADCA.CH1.MUXCTRL = B8(00001000); //CH1 converts from PA1
     25e:	28 e0       	ldi	r18, 0x08	; 8
     260:	21 a7       	lds	r18, 0x71
		ADCA.CH2.MUXCTRL = B8(00010000); //CH2 converts from PA2
     262:	90 e1       	ldi	r25, 0x10	; 16
     264:	91 ab       	sts	0x51, r25
		ADCA.CH3.MUXCTRL = B8(00011000); //CH3 converts from PA3
     266:	88 e1       	ldi	r24, 0x18	; 24
     268:	81 af       	sts	0x71, r24
		ADCB.CH0.MUXCTRL = B8(00000000); //CH0 converts from PB0
     26a:	e0 e4       	ldi	r30, 0x40	; 64
     26c:	f2 e0       	ldi	r31, 0x02	; 2
     26e:	11 a2       	lds	r17, 0x91
		ADCB.CH1.MUXCTRL = B8(00001000); //CH1 converts from PB1
     270:	21 a7       	lds	r18, 0x71
		ADCB.CH2.MUXCTRL = B8(00010000); //CH2 converts from PB2
     272:	91 ab       	sts	0x51, r25
		ADCB.CH3.MUXCTRL = B8(00011000); //CH3 converts from PB3
     274:	81 af       	sts	0x71, r24
     276:	08 95       	ret
	}
	else {
		ADCA.CH0.MUXCTRL = B8(00100000); //CH0 converts from PA4
     278:	e0 e0       	ldi	r30, 0x00	; 0
     27a:	f2 e0       	ldi	r31, 0x02	; 2
     27c:	30 e2       	ldi	r19, 0x20	; 32
     27e:	31 a3       	lds	r19, 0x51
		ADCA.CH1.MUXCTRL = B8(00101000); //CH1 converts from PA5
     280:	28 e2       	ldi	r18, 0x28	; 40
     282:	21 a7       	lds	r18, 0x71
		ADCA.CH2.MUXCTRL = B8(00110000); //CH2 converts from PA6
     284:	90 e3       	ldi	r25, 0x30	; 48
     286:	91 ab       	sts	0x51, r25
		ADCA.CH3.MUXCTRL = B8(00111000); //CH3 converts from PA7
     288:	88 e3       	ldi	r24, 0x38	; 56
     28a:	81 af       	sts	0x71, r24
		ADCB.CH0.MUXCTRL = B8(00100000); //CH0 converts from PB4
     28c:	e0 e4       	ldi	r30, 0x40	; 64
     28e:	f2 e0       	ldi	r31, 0x02	; 2
     290:	31 a3       	lds	r19, 0x51
		ADCB.CH1.MUXCTRL = B8(00101000); //CH1 converts from PB5
     292:	21 a7       	lds	r18, 0x71
		ADCB.CH2.MUXCTRL = B8(00110000); //CH2 converts from PB6
     294:	91 ab       	sts	0x51, r25
		ADCB.CH3.MUXCTRL = B8(00111000); //CH3 converts from PB7	
     296:	81 af       	sts	0x71, r24
     298:	08 95       	ret

0000029a <adc_convert>:
	}
}	

void adc_convert(){
	ADCA.CTRLA |= B8(00111100); //Start conversions on all four channels
     29a:	e0 e0       	ldi	r30, 0x00	; 0
     29c:	f2 e0       	ldi	r31, 0x02	; 2
     29e:	80 81       	ld	r24, Z
     2a0:	8c 63       	ori	r24, 0x3C	; 60
     2a2:	80 83       	st	Z, r24
	ADCB.CTRLA |= B8(00111100); //Start conversions on all four channels
     2a4:	e0 e4       	ldi	r30, 0x40	; 64
     2a6:	f2 e0       	ldi	r31, 0x02	; 2
     2a8:	80 81       	ld	r24, Z
     2aa:	8c 63       	ori	r24, 0x3C	; 60
     2ac:	80 83       	st	Z, r24
}
     2ae:	08 95       	ret

000002b0 <init_adc>:

//#############################################################
//## ADCs -- INITIALIZATION
//#############################################################

void init_adc(){	
     2b0:	cf 92       	push	r12
     2b2:	df 92       	push	r13
     2b4:	ef 92       	push	r14
     2b6:	ff 92       	push	r15
     2b8:	0f 93       	push	r16
     2ba:	1f 93       	push	r17
     2bc:	cf 93       	push	r28
     2be:	df 93       	push	r29
	//ADC A
	ADCA.CALL = adc_read_cal_byte( offsetof(NVM_PROD_SIGNATURES_t, ADCACAL0) );
     2c0:	80 e2       	ldi	r24, 0x20	; 32
     2c2:	0e 94 21 01 	call	0x242	; 0x242 <adc_read_cal_byte>
     2c6:	c0 e0       	ldi	r28, 0x00	; 0
     2c8:	d2 e0       	ldi	r29, 0x02	; 2
     2ca:	8c 87       	std	Y+12, r24	; 0x0c
	ADCA.CALH = adc_read_cal_byte( offsetof(NVM_PROD_SIGNATURES_t, ADCACAL1) );
     2cc:	81 e2       	ldi	r24, 0x21	; 33
     2ce:	0e 94 21 01 	call	0x242	; 0x242 <adc_read_cal_byte>
     2d2:	8d 87       	std	Y+13, r24	; 0x0d
	ADCA.PRESCALER = B8(00000111); //ADC clock = Peripheral clock / 512 (maximum resolution/accuracy)
     2d4:	0f 2e       	mov	r0, r31
     2d6:	f7 e0       	ldi	r31, 0x07	; 7
     2d8:	ef 2e       	mov	r14, r31
     2da:	f0 2d       	mov	r31, r0
     2dc:	ec 82       	std	Y+4, r14	; 0x04
	ADCA.REFCTRL = B8(00010011); //Use AVCC/1.6 = 2.063V as reference (highest allowed); Enable BandGap Reference and Temperature Sensor (internal)
     2de:	0f 2e       	mov	r0, r31
     2e0:	f3 e1       	ldi	r31, 0x13	; 19
     2e2:	df 2e       	mov	r13, r31
     2e4:	f0 2d       	mov	r31, r0
     2e6:	da 82       	std	Y+2, r13	; 0x02
	ADCA.CTRLB = B8(00000110); //12bit-left adjusted; One-shot conversion; unsigned mode;
     2e8:	0f 2e       	mov	r0, r31
     2ea:	f6 e0       	ldi	r31, 0x06	; 6
     2ec:	cf 2e       	mov	r12, r31
     2ee:	f0 2d       	mov	r31, r0
     2f0:	c9 82       	std	Y+1, r12	; 0x01
	ADCA.CTRLA = B8(00000001); //Enable ADC;
     2f2:	ff 24       	eor	r15, r15
     2f4:	f3 94       	inc	r15
     2f6:	f8 82       	st	Y, r15
	ADCA.CH0.CTRL = B8(00000001); //Single ended input mode; No gain
     2f8:	f8 a2       	lds	r31, 0x98
	ADCA.CH1.CTRL = B8(00000001); //Single ended input mode; No gain
     2fa:	f8 a6       	lds	r31, 0xb8
	ADCA.CH2.CTRL = B8(00000001); //Single ended input mode; No gain
     2fc:	f8 aa       	sts	0x98, r31
	ADCA.CH3.CTRL = B8(00000001); //Single ended input mode; No gain
     2fe:	f8 ae       	sts	0xb8, r31
	
	//ADC B
	ADCB.CALL = adc_read_cal_byte( offsetof(NVM_PROD_SIGNATURES_t, ADCBCAL0) );
     300:	84 e2       	ldi	r24, 0x24	; 36
     302:	0e 94 21 01 	call	0x242	; 0x242 <adc_read_cal_byte>
     306:	00 e4       	ldi	r16, 0x40	; 64
     308:	12 e0       	ldi	r17, 0x02	; 2
     30a:	f8 01       	movw	r30, r16
     30c:	84 87       	std	Z+12, r24	; 0x0c
	ADCB.CALH = adc_read_cal_byte( offsetof(NVM_PROD_SIGNATURES_t, ADCBCAL1) );
     30e:	85 e2       	ldi	r24, 0x25	; 37
     310:	0e 94 21 01 	call	0x242	; 0x242 <adc_read_cal_byte>
     314:	f8 01       	movw	r30, r16
     316:	85 87       	std	Z+13, r24	; 0x0d
	ADCB.PRESCALER = B8(00000111); //ADC clock = Peripheral clock / 512 (maximum resolution/accuracy)
     318:	e4 82       	std	Z+4, r14	; 0x04
	ADCB.REFCTRL = B8(00010011); //Use AVCC/1.6 = 2.063V as reference (highest allowed); Enable BandGap Reference and Temperature Sensor (internal)
     31a:	d2 82       	std	Z+2, r13	; 0x02
	ADCB.CTRLB = B8(00000110); //12bit-left adjusted; One-shot conversion; unsigned mode;
     31c:	c1 82       	std	Z+1, r12	; 0x01
	ADCB.CTRLA = B8(00000001); //Enable ADC;
     31e:	f0 82       	st	Z, r15
	ADCB.CH0.CTRL = B8(00000001); //Single ended input mode; No gain
     320:	f0 a2       	lds	r31, 0x90
	ADCB.CH1.CTRL = B8(00000001); //Single ended input mode; No gain
     322:	f0 a6       	lds	r31, 0xb0
	ADCB.CH2.CTRL = B8(00000001); //Single ended input mode; No gain
     324:	f0 aa       	sts	0x90, r31
	ADCB.CH3.CTRL = B8(00000001); //Single ended input mode; No gain
     326:	f0 ae       	sts	0xb0, r31
	
	//STATE
	adc_bank = 0;
     328:	10 92 fe 26 	sts	0x26FE, r1
	adc_head = 0;
     32c:	10 92 fb 26 	sts	0x26FB, r1
	adc_bank_select(adc_bank);
     330:	80 e0       	ldi	r24, 0x00	; 0
     332:	0e 94 2a 01 	call	0x254	; 0x254 <adc_bank_select>
	
	//FLUSH
	ADCA.CTRLA |= 0x02;
     336:	88 81       	ld	r24, Y
     338:	82 60       	ori	r24, 0x02	; 2
     33a:	88 83       	st	Y, r24
	ADCB.CTRLB |= 0x02;
     33c:	f8 01       	movw	r30, r16
     33e:	81 81       	ldd	r24, Z+1	; 0x01
     340:	82 60       	ori	r24, 0x02	; 2
     342:	81 83       	std	Z+1, r24	; 0x01
	adc_convert();
     344:	0e 94 4d 01 	call	0x29a	; 0x29a <adc_convert>
}
     348:	df 91       	pop	r29
     34a:	cf 91       	pop	r28
     34c:	1f 91       	pop	r17
     34e:	0f 91       	pop	r16
     350:	ff 90       	pop	r15
     352:	ef 90       	pop	r14
     354:	df 90       	pop	r13
     356:	cf 90       	pop	r12
     358:	08 95       	ret

0000035a <adc_ftoa>:
//#############################################################
//## ADCs -- DATA PROCESSING
//#############################################################

//Float-to-ASCII: uses scaler to shift position, does not include fractional component, null-terminates result, handles pos & neg numbers
void adc_ftoa(float x, uint16_t scaler, char* result){
     35a:	cf 92       	push	r12
     35c:	df 92       	push	r13
     35e:	ef 92       	push	r14
     360:	ff 92       	push	r15
     362:	cf 93       	push	r28
     364:	df 93       	push	r29
     366:	6b 01       	movw	r12, r22
     368:	7c 01       	movw	r14, r24
     36a:	e9 01       	movw	r28, r18
	x = x * scaler;
     36c:	ba 01       	movw	r22, r20
     36e:	80 e0       	ldi	r24, 0x00	; 0
     370:	90 e0       	ldi	r25, 0x00	; 0
     372:	0e 94 5b 31 	call	0x62b6	; 0x62b6 <__floatunsisf>
     376:	a7 01       	movw	r20, r14
     378:	96 01       	movw	r18, r12
     37a:	0e 94 0d 32 	call	0x641a	; 0x641a <__mulsf3>
	utoa((int)x, result, 10);
     37e:	0e 94 2a 31 	call	0x6254	; 0x6254 <__fixsfsi>
     382:	dc 01       	movw	r26, r24
     384:	cb 01       	movw	r24, r22
     386:	be 01       	movw	r22, r28
     388:	4a e0       	ldi	r20, 0x0A	; 10
     38a:	50 e0       	ldi	r21, 0x00	; 0
     38c:	0e 94 96 32 	call	0x652c	; 0x652c <utoa>
}
     390:	df 91       	pop	r29
     392:	cf 91       	pop	r28
     394:	ff 90       	pop	r15
     396:	ef 90       	pop	r14
     398:	df 90       	pop	r13
     39a:	cf 90       	pop	r12
     39c:	08 95       	ret

0000039e <adc_data>:

///result = char[6] = 15324\0 --> 15.324 V or A (don't forget string terminator byte)
void adc_data(uint8_t channel_num, uint8_t measurement_type, char* result){
     39e:	ef 92       	push	r14
     3a0:	ff 92       	push	r15
     3a2:	0f 93       	push	r16
     3a4:	1f 93       	push	r17
     3a6:	cf 93       	push	r28
     3a8:	df 93       	push	r29
     3aa:	7a 01       	movw	r14, r20
		uint16_t summation = 0;
		float voltage;
		
	//Average
		for (uint8_t i=0;i<ADC_NUM_CONVERSIONS;i++){
			summation += adc_results[channel_num][i];
     3ac:	a8 2f       	mov	r26, r24
     3ae:	b0 e0       	ldi	r27, 0x00	; 0
	x = x * scaler;
	utoa((int)x, result, 10);
}

///result = char[6] = 15324\0 --> 15.324 V or A (don't forget string terminator byte)
void adc_data(uint8_t channel_num, uint8_t measurement_type, char* result){
     3b0:	ad 01       	movw	r20, r26
     3b2:	42 95       	swap	r20
     3b4:	52 95       	swap	r21
     3b6:	50 7f       	andi	r21, 0xF0	; 240
     3b8:	54 27       	eor	r21, r20
     3ba:	40 7f       	andi	r20, 0xF0	; 240
     3bc:	54 27       	eor	r21, r20
     3be:	fa 01       	movw	r30, r20
     3c0:	e5 50       	subi	r30, 0x05	; 5
     3c2:	fa 4d       	sbci	r31, 0xDA	; 218
     3c4:	45 5f       	subi	r20, 0xF5	; 245
     3c6:	59 4d       	sbci	r21, 0xD9	; 217
	uint16_t current_offset;
	
	//Init
		uint16_t summation = 0;
     3c8:	80 e0       	ldi	r24, 0x00	; 0
     3ca:	90 e0       	ldi	r25, 0x00	; 0
		float voltage;
		
	//Average
		for (uint8_t i=0;i<ADC_NUM_CONVERSIONS;i++){
			summation += adc_results[channel_num][i];
     3cc:	21 91       	ld	r18, Z+
     3ce:	31 91       	ld	r19, Z+
     3d0:	82 0f       	add	r24, r18
     3d2:	93 1f       	adc	r25, r19
	//Init
		uint16_t summation = 0;
		float voltage;
		
	//Average
		for (uint8_t i=0;i<ADC_NUM_CONVERSIONS;i++){
     3d4:	e4 17       	cp	r30, r20
     3d6:	f5 07       	cpc	r31, r21
     3d8:	c9 f7       	brne	.-14     	; 0x3cc <adc_data+0x2e>
			summation += adc_results[channel_num][i];
		}
		summation = summation >> 3; //divide by 8
     3da:	96 95       	lsr	r25
     3dc:	87 95       	ror	r24
     3de:	96 95       	lsr	r25
     3e0:	87 95       	ror	r24
     3e2:	96 95       	lsr	r25
     3e4:	87 95       	ror	r24
		
	//Offset
		switch (measurement_type){
     3e6:	68 36       	cpi	r22, 0x68	; 104
     3e8:	51 f0       	breq	.+20     	; 0x3fe <adc_data+0x60>
     3ea:	6a 36       	cpi	r22, 0x6A	; 106
     3ec:	71 f0       	breq	.+28     	; 0x40a <adc_data+0x6c>
     3ee:	67 36       	cpi	r22, 0x67	; 103
     3f0:	e1 f4       	brne	.+56     	; 0x42a <adc_data+0x8c>
			case VOLTAGE_POS:
				if(summation<CODE_ZERO){summation = 0;}
     3f2:	81 3a       	cpi	r24, 0xA1	; 161
     3f4:	91 05       	cpc	r25, r1
     3f6:	10 f1       	brcs	.+68     	; 0x43c <adc_data+0x9e>
				else{summation -= CODE_ZERO;}
     3f8:	81 5a       	subi	r24, 0xA1	; 161
     3fa:	90 40       	sbci	r25, 0x00	; 0
     3fc:	21 c0       	rjmp	.+66     	; 0x440 <adc_data+0xa2>
				break;
			case VOLTAGE_NEG:
				if(summation<VOLTAGE_NEG_OFFSET){summation = 0;}
     3fe:	84 3b       	cpi	r24, 0xB4	; 180
     400:	91 05       	cpc	r25, r1
     402:	88 f0       	brcs	.+34     	; 0x426 <adc_data+0x88>
				else{summation -= VOLTAGE_NEG_OFFSET;}
     404:	84 5b       	subi	r24, 0xB4	; 180
     406:	90 40       	sbci	r25, 0x00	; 0
     408:	32 c0       	rjmp	.+100    	; 0x46e <adc_data+0xd0>
				break;
			case CURRENT_HI_RES:
				current_offset = adc_current_offset[(channel_num-1)>>1];
     40a:	11 97       	sbiw	r26, 0x01	; 1
     40c:	ae 7f       	andi	r26, 0xFE	; 254
     40e:	a2 58       	subi	r26, 0x82	; 130
     410:	bd 4d       	sbci	r27, 0xDD	; 221
     412:	2d 91       	ld	r18, X+
     414:	3c 91       	ld	r19, X
     416:	11 97       	sbiw	r26, 0x01	; 1
				if(summation<current_offset){summation=0;}
     418:	82 17       	cp	r24, r18
     41a:	93 07       	cpc	r25, r19
     41c:	08 f4       	brcc	.+2      	; 0x420 <adc_data+0x82>
     41e:	5a c0       	rjmp	.+180    	; 0x4d4 <adc_data+0x136>
				else{summation -= current_offset;}
     420:	82 1b       	sub	r24, r18
     422:	93 0b       	sbc	r25, r19
     424:	59 c0       	rjmp	.+178    	; 0x4d8 <adc_data+0x13a>
			case VOLTAGE_POS:
				if(summation<CODE_ZERO){summation = 0;}
				else{summation -= CODE_ZERO;}
				break;
			case VOLTAGE_NEG:
				if(summation<VOLTAGE_NEG_OFFSET){summation = 0;}
     426:	80 e0       	ldi	r24, 0x00	; 0
     428:	90 e0       	ldi	r25, 0x00	; 0
				//TODO: add scaler for the low-res mode
				break;
		}
		
	//Format & Return
		switch (measurement_type){
     42a:	68 36       	cpi	r22, 0x68	; 104
     42c:	01 f1       	breq	.+64     	; 0x46e <adc_data+0xd0>
     42e:	6a 36       	cpi	r22, 0x6A	; 106
     430:	09 f4       	brne	.+2      	; 0x434 <adc_data+0x96>
     432:	52 c0       	rjmp	.+164    	; 0x4d8 <adc_data+0x13a>
     434:	67 36       	cpi	r22, 0x67	; 103
     436:	09 f0       	breq	.+2      	; 0x43a <adc_data+0x9c>
     438:	5f c0       	rjmp	.+190    	; 0x4f8 <adc_data+0x15a>
     43a:	02 c0       	rjmp	.+4      	; 0x440 <adc_data+0xa2>
		summation = summation >> 3; //divide by 8
		
	//Offset
		switch (measurement_type){
			case VOLTAGE_POS:
				if(summation<CODE_ZERO){summation = 0;}
     43c:	80 e0       	ldi	r24, 0x00	; 0
     43e:	90 e0       	ldi	r25, 0x00	; 0
		}
		
	//Format & Return
		switch (measurement_type){
			case VOLTAGE_POS:
				voltage = (float)summation * CODE_TO_VOLTS * VOLTAGE_DESCALE_FACTOR;
     440:	bc 01       	movw	r22, r24
     442:	80 e0       	ldi	r24, 0x00	; 0
     444:	90 e0       	ldi	r25, 0x00	; 0
     446:	0e 94 5b 31 	call	0x62b6	; 0x62b6 <__floatunsisf>
     44a:	27 e9       	ldi	r18, 0x97	; 151
     44c:	38 ea       	ldi	r19, 0xA8	; 168
     44e:	4f ef       	ldi	r20, 0xFF	; 255
     450:	59 e3       	ldi	r21, 0x39	; 57
     452:	0e 94 0d 32 	call	0x641a	; 0x641a <__mulsf3>
     456:	25 e8       	ldi	r18, 0x85	; 133
     458:	3b ee       	ldi	r19, 0xEB	; 235
     45a:	41 e5       	ldi	r20, 0x51	; 81
     45c:	51 e4       	ldi	r21, 0x41	; 65
     45e:	0e 94 0d 32 	call	0x641a	; 0x641a <__mulsf3>
				adc_ftoa(voltage, 100, result);
     462:	44 e6       	ldi	r20, 0x64	; 100
     464:	50 e0       	ldi	r21, 0x00	; 0
     466:	97 01       	movw	r18, r14
     468:	0e 94 ad 01 	call	0x35a	; 0x35a <adc_ftoa>
				return;
     46c:	45 c0       	rjmp	.+138    	; 0x4f8 <adc_data+0x15a>
			case VOLTAGE_NEG:
				voltage = (float)summation * CODE_TO_VOLTS * VOLTAGE_DESCALE_FACTOR;
     46e:	bc 01       	movw	r22, r24
     470:	80 e0       	ldi	r24, 0x00	; 0
     472:	90 e0       	ldi	r25, 0x00	; 0
     474:	0e 94 5b 31 	call	0x62b6	; 0x62b6 <__floatunsisf>
     478:	27 e9       	ldi	r18, 0x97	; 151
     47a:	38 ea       	ldi	r19, 0xA8	; 168
     47c:	4f ef       	ldi	r20, 0xFF	; 255
     47e:	59 e3       	ldi	r21, 0x39	; 57
     480:	0e 94 0d 32 	call	0x641a	; 0x641a <__mulsf3>
     484:	25 e8       	ldi	r18, 0x85	; 133
     486:	3b ee       	ldi	r19, 0xEB	; 235
     488:	41 e5       	ldi	r20, 0x51	; 81
     48a:	51 e4       	ldi	r21, 0x41	; 65
     48c:	0e 94 0d 32 	call	0x641a	; 0x641a <__mulsf3>
     490:	06 2f       	mov	r16, r22
     492:	17 2f       	mov	r17, r23
     494:	d8 2f       	mov	r29, r24
     496:	c9 2f       	mov	r28, r25
				if (voltage < 2.2) voltage = 0; //blank anything inside the amp offset (can't actually offset this because it adds huge error to the linear fit)
     498:	86 2f       	mov	r24, r22
     49a:	91 2f       	mov	r25, r17
     49c:	ad 2f       	mov	r26, r29
     49e:	bc 2f       	mov	r27, r28
     4a0:	bc 01       	movw	r22, r24
     4a2:	cd 01       	movw	r24, r26
     4a4:	2d ec       	ldi	r18, 0xCD	; 205
     4a6:	3c ec       	ldi	r19, 0xCC	; 204
     4a8:	4c e0       	ldi	r20, 0x0C	; 12
     4aa:	50 e4       	ldi	r21, 0x40	; 64
     4ac:	0e 94 be 30 	call	0x617c	; 0x617c <__cmpsf2>
     4b0:	88 23       	and	r24, r24
     4b2:	24 f4       	brge	.+8      	; 0x4bc <adc_data+0x11e>
     4b4:	00 e0       	ldi	r16, 0x00	; 0
     4b6:	10 e0       	ldi	r17, 0x00	; 0
     4b8:	d0 e0       	ldi	r29, 0x00	; 0
     4ba:	c0 e0       	ldi	r28, 0x00	; 0
				adc_ftoa(voltage, 100, result);
     4bc:	80 2f       	mov	r24, r16
     4be:	91 2f       	mov	r25, r17
     4c0:	ad 2f       	mov	r26, r29
     4c2:	bc 2f       	mov	r27, r28
     4c4:	bc 01       	movw	r22, r24
     4c6:	cd 01       	movw	r24, r26
     4c8:	44 e6       	ldi	r20, 0x64	; 100
     4ca:	50 e0       	ldi	r21, 0x00	; 0
     4cc:	97 01       	movw	r18, r14
     4ce:	0e 94 ad 01 	call	0x35a	; 0x35a <adc_ftoa>
				return;
     4d2:	12 c0       	rjmp	.+36     	; 0x4f8 <adc_data+0x15a>
				if(summation<VOLTAGE_NEG_OFFSET){summation = 0;}
				else{summation -= VOLTAGE_NEG_OFFSET;}
				break;
			case CURRENT_HI_RES:
				current_offset = adc_current_offset[(channel_num-1)>>1];
				if(summation<current_offset){summation=0;}
     4d4:	80 e0       	ldi	r24, 0x00	; 0
     4d6:	90 e0       	ldi	r25, 0x00	; 0
				voltage = (float)summation * CODE_TO_VOLTS * VOLTAGE_DESCALE_FACTOR;
				if (voltage < 2.2) voltage = 0; //blank anything inside the amp offset (can't actually offset this because it adds huge error to the linear fit)
				adc_ftoa(voltage, 100, result);
				return;
			case CURRENT_HI_RES:
				adc_ftoa((float)summation * CODE_TO_AMPS, 1000, result);
     4d8:	bc 01       	movw	r22, r24
     4da:	80 e0       	ldi	r24, 0x00	; 0
     4dc:	90 e0       	ldi	r25, 0x00	; 0
     4de:	0e 94 5b 31 	call	0x62b6	; 0x62b6 <__floatunsisf>
     4e2:	23 e7       	ldi	r18, 0x73	; 115
     4e4:	30 e3       	ldi	r19, 0x30	; 48
     4e6:	4b e1       	ldi	r20, 0x1B	; 27
     4e8:	5a e3       	ldi	r21, 0x3A	; 58
     4ea:	0e 94 0d 32 	call	0x641a	; 0x641a <__mulsf3>
     4ee:	48 ee       	ldi	r20, 0xE8	; 232
     4f0:	53 e0       	ldi	r21, 0x03	; 3
     4f2:	97 01       	movw	r18, r14
     4f4:	0e 94 ad 01 	call	0x35a	; 0x35a <adc_ftoa>
				return;
			case CURRENT_LO_RES:
				//TODO: add scaler for the low-res mode
				return;
		}
}
     4f8:	df 91       	pop	r29
     4fa:	cf 91       	pop	r28
     4fc:	1f 91       	pop	r17
     4fe:	0f 91       	pop	r16
     500:	ff 90       	pop	r15
     502:	ef 90       	pop	r14
     504:	08 95       	ret

00000506 <adc_max>:

//Returns the maximum value seen in the buffer for the specified channel
uint16_t adc_max(uint8_t channel_num){
	uint16_t maxValue = 0;
	for(uint8_t i=0;i<ADC_NUM_CONVERSIONS;i++){
		if (adc_results[channel_num][i]>maxValue){maxValue=adc_results[channel_num][i];};
     506:	48 2f       	mov	r20, r24
     508:	50 e0       	ldi	r21, 0x00	; 0
				return;
		}
}

//Returns the maximum value seen in the buffer for the specified channel
uint16_t adc_max(uint8_t channel_num){
     50a:	42 95       	swap	r20
     50c:	52 95       	swap	r21
     50e:	50 7f       	andi	r21, 0xF0	; 240
     510:	54 27       	eor	r21, r20
     512:	40 7f       	andi	r20, 0xF0	; 240
     514:	54 27       	eor	r21, r20
     516:	fa 01       	movw	r30, r20
     518:	e5 50       	subi	r30, 0x05	; 5
     51a:	fa 4d       	sbci	r31, 0xDA	; 218
     51c:	45 5f       	subi	r20, 0xF5	; 245
     51e:	59 4d       	sbci	r21, 0xD9	; 217
	uint16_t maxValue = 0;
     520:	20 e0       	ldi	r18, 0x00	; 0
     522:	30 e0       	ldi	r19, 0x00	; 0
	for(uint8_t i=0;i<ADC_NUM_CONVERSIONS;i++){
		if (adc_results[channel_num][i]>maxValue){maxValue=adc_results[channel_num][i];};
     524:	81 91       	ld	r24, Z+
     526:	91 91       	ld	r25, Z+
     528:	28 17       	cp	r18, r24
     52a:	39 07       	cpc	r19, r25
     52c:	08 f4       	brcc	.+2      	; 0x530 <adc_max+0x2a>
     52e:	9c 01       	movw	r18, r24
}

//Returns the maximum value seen in the buffer for the specified channel
uint16_t adc_max(uint8_t channel_num){
	uint16_t maxValue = 0;
	for(uint8_t i=0;i<ADC_NUM_CONVERSIONS;i++){
     530:	e4 17       	cp	r30, r20
     532:	f5 07       	cpc	r31, r21
     534:	b9 f7       	brne	.-18     	; 0x524 <adc_max+0x1e>
		if (adc_results[channel_num][i]>maxValue){maxValue=adc_results[channel_num][i];};
	}		
	return maxValue;
}
     536:	82 2f       	mov	r24, r18
     538:	93 2f       	mov	r25, r19
     53a:	08 95       	ret

0000053c <adjust>:
//## ADCs -- SERVICE
//#############################################################

uint16_t adjust(uint16_t theValue){
	uint16_t working = theValue;
	working = theValue >> 4;
     53c:	92 95       	swap	r25
     53e:	82 95       	swap	r24
     540:	8f 70       	andi	r24, 0x0F	; 15
     542:	89 27       	eor	r24, r25
     544:	9f 70       	andi	r25, 0x0F	; 15
     546:	89 27       	eor	r24, r25
	if (working < CODE_ZERO){working = CODE_ZERO;}; //clip on overflow
     548:	81 3a       	cpi	r24, 0xA1	; 161
     54a:	91 05       	cpc	r25, r1
     54c:	10 f4       	brcc	.+4      	; 0x552 <adjust+0x16>
     54e:	81 ea       	ldi	r24, 0xA1	; 161
     550:	90 e0       	ldi	r25, 0x00	; 0
	return working;
}
     552:	08 95       	ret

00000554 <service_adc>:

// Implemented with polling for conversion complete
void service_adc(){	
     554:	df 92       	push	r13
     556:	ef 92       	push	r14
     558:	ff 92       	push	r15
     55a:	0f 93       	push	r16
     55c:	1f 93       	push	r17
     55e:	cf 93       	push	r28
     560:	df 93       	push	r29
	//Did all conversions complete?
	if ((ADCA.INTFLAGS == 0x0F) && (ADCB.INTFLAGS == 0x0F)){
     562:	e0 e0       	ldi	r30, 0x00	; 0
     564:	f2 e0       	ldi	r31, 0x02	; 2
     566:	86 81       	ldd	r24, Z+6	; 0x06
     568:	8f 30       	cpi	r24, 0x0F	; 15
     56a:	09 f0       	breq	.+2      	; 0x56e <service_adc+0x1a>
     56c:	16 c1       	rjmp	.+556    	; 0x79a <service_adc+0x246>
     56e:	e0 e4       	ldi	r30, 0x40	; 64
     570:	f2 e0       	ldi	r31, 0x02	; 2
     572:	86 81       	ldd	r24, Z+6	; 0x06
     574:	8f 30       	cpi	r24, 0x0F	; 15
     576:	09 f0       	breq	.+2      	; 0x57a <service_adc+0x26>
     578:	10 c1       	rjmp	.+544    	; 0x79a <service_adc+0x246>
		//Write Results
		if(adc_bank % 2){
     57a:	80 91 fe 26 	lds	r24, 0x26FE
     57e:	80 ff       	sbrs	r24, 0
     580:	71 c0       	rjmp	.+226    	; 0x664 <service_adc+0x110>
			//lower bank
			adc_results[0][adc_head] = adjust(ADCA.CH0RES); //PSU Channel A
     582:	00 91 fb 26 	lds	r16, 0x26FB
     586:	10 e0       	ldi	r17, 0x00	; 0
     588:	c0 e0       	ldi	r28, 0x00	; 0
     58a:	d2 e0       	ldi	r29, 0x02	; 2
     58c:	88 89       	ldd	r24, Y+16	; 0x10
     58e:	99 89       	ldd	r25, Y+17	; 0x11
     590:	0e 94 9e 02 	call	0x53c	; 0x53c <adjust>
     594:	0f 2e       	mov	r0, r31
     596:	fb ef       	ldi	r31, 0xFB	; 251
     598:	ef 2e       	mov	r14, r31
     59a:	f5 e2       	ldi	r31, 0x25	; 37
     59c:	ff 2e       	mov	r15, r31
     59e:	f0 2d       	mov	r31, r0
     5a0:	f8 01       	movw	r30, r16
     5a2:	ee 0f       	add	r30, r30
     5a4:	ff 1f       	adc	r31, r31
     5a6:	ee 0d       	add	r30, r14
     5a8:	ff 1d       	adc	r31, r15
     5aa:	80 83       	st	Z, r24
     5ac:	91 83       	std	Z+1, r25	; 0x01
			adc_results[1][adc_head] = adjust(ADCA.CH1RES);
     5ae:	8a 89       	ldd	r24, Y+18	; 0x12
     5b0:	9b 89       	ldd	r25, Y+19	; 0x13
     5b2:	0e 94 9e 02 	call	0x53c	; 0x53c <adjust>
     5b6:	f8 01       	movw	r30, r16
     5b8:	38 96       	adiw	r30, 0x08	; 8
     5ba:	ee 0f       	add	r30, r30
     5bc:	ff 1f       	adc	r31, r31
     5be:	ee 0d       	add	r30, r14
     5c0:	ff 1d       	adc	r31, r15
     5c2:	80 83       	st	Z, r24
     5c4:	91 83       	std	Z+1, r25	; 0x01
			adc_results[2][adc_head] = adjust(ADCA.CH2RES);
     5c6:	8c 89       	ldd	r24, Y+20	; 0x14
     5c8:	9d 89       	ldd	r25, Y+21	; 0x15
     5ca:	0e 94 9e 02 	call	0x53c	; 0x53c <adjust>
     5ce:	f8 01       	movw	r30, r16
     5d0:	70 96       	adiw	r30, 0x10	; 16
     5d2:	ee 0f       	add	r30, r30
     5d4:	ff 1f       	adc	r31, r31
     5d6:	ee 0d       	add	r30, r14
     5d8:	ff 1d       	adc	r31, r15
     5da:	80 83       	st	Z, r24
     5dc:	91 83       	std	Z+1, r25	; 0x01
			adc_results[3][adc_head] = adjust(ADCA.CH3RES);
     5de:	8e 89       	ldd	r24, Y+22	; 0x16
     5e0:	9f 89       	ldd	r25, Y+23	; 0x17
     5e2:	0e 94 9e 02 	call	0x53c	; 0x53c <adjust>
     5e6:	f8 01       	movw	r30, r16
     5e8:	78 96       	adiw	r30, 0x18	; 24
     5ea:	ee 0f       	add	r30, r30
     5ec:	ff 1f       	adc	r31, r31
     5ee:	ee 0d       	add	r30, r14
     5f0:	ff 1d       	adc	r31, r15
     5f2:	80 83       	st	Z, r24
     5f4:	91 83       	std	Z+1, r25	; 0x01
			adc_results[8][adc_head] = adjust(ADCB.CH0.RES); //PSU Channel C
     5f6:	c0 e4       	ldi	r28, 0x40	; 64
     5f8:	d2 e0       	ldi	r29, 0x02	; 2
     5fa:	8c a1       	lds	r24, 0x4c
     5fc:	9d a1       	lds	r25, 0x4d
     5fe:	0e 94 9e 02 	call	0x53c	; 0x53c <adjust>
     602:	f8 01       	movw	r30, r16
     604:	e0 5c       	subi	r30, 0xC0	; 192
     606:	ff 4f       	sbci	r31, 0xFF	; 255
     608:	ee 0f       	add	r30, r30
     60a:	ff 1f       	adc	r31, r31
     60c:	ee 0d       	add	r30, r14
     60e:	ff 1d       	adc	r31, r15
     610:	80 83       	st	Z, r24
     612:	91 83       	std	Z+1, r25	; 0x01
			adc_results[9][adc_head] = adjust(ADCB.CH1.RES);
     614:	8c a5       	lds	r24, 0x6c
     616:	9d a5       	lds	r25, 0x6d
     618:	0e 94 9e 02 	call	0x53c	; 0x53c <adjust>
     61c:	f8 01       	movw	r30, r16
     61e:	e8 5b       	subi	r30, 0xB8	; 184
     620:	ff 4f       	sbci	r31, 0xFF	; 255
     622:	ee 0f       	add	r30, r30
     624:	ff 1f       	adc	r31, r31
     626:	ee 0d       	add	r30, r14
     628:	ff 1d       	adc	r31, r15
     62a:	80 83       	st	Z, r24
     62c:	91 83       	std	Z+1, r25	; 0x01
			adc_results[10][adc_head] = adjust(ADCB.CH2.RES);
     62e:	8c a9       	sts	0x4c, r24
     630:	9d a9       	sts	0x4d, r25
     632:	0e 94 9e 02 	call	0x53c	; 0x53c <adjust>
     636:	f8 01       	movw	r30, r16
     638:	e0 5b       	subi	r30, 0xB0	; 176
     63a:	ff 4f       	sbci	r31, 0xFF	; 255
     63c:	ee 0f       	add	r30, r30
     63e:	ff 1f       	adc	r31, r31
     640:	ee 0d       	add	r30, r14
     642:	ff 1d       	adc	r31, r15
     644:	80 83       	st	Z, r24
     646:	91 83       	std	Z+1, r25	; 0x01
			adc_results[11][adc_head] = adjust(ADCB.CH3.RES);
     648:	8c ad       	sts	0x6c, r24
     64a:	9d ad       	sts	0x6d, r25
     64c:	0e 94 9e 02 	call	0x53c	; 0x53c <adjust>
     650:	08 5a       	subi	r16, 0xA8	; 168
     652:	1f 4f       	sbci	r17, 0xFF	; 255
     654:	00 0f       	add	r16, r16
     656:	11 1f       	adc	r17, r17
     658:	e0 0e       	add	r14, r16
     65a:	f1 1e       	adc	r15, r17
     65c:	f7 01       	movw	r30, r14
     65e:	80 83       	st	Z, r24
     660:	91 83       	std	Z+1, r25	; 0x01
     662:	7a c0       	rjmp	.+244    	; 0x758 <service_adc+0x204>
		}
		else {
			//upper bank
			adc_results[4][adc_head] = adjust(ADCA.CH0.RES); //PSU Channel B
     664:	d0 90 fb 26 	lds	r13, 0x26FB
     668:	0d 2d       	mov	r16, r13
     66a:	10 e0       	ldi	r17, 0x00	; 0
     66c:	c0 e0       	ldi	r28, 0x00	; 0
     66e:	d2 e0       	ldi	r29, 0x02	; 2
     670:	8c a1       	lds	r24, 0x4c
     672:	9d a1       	lds	r25, 0x4d
     674:	0e 94 9e 02 	call	0x53c	; 0x53c <adjust>
     678:	f8 01       	movw	r30, r16
     67a:	b0 96       	adiw	r30, 0x20	; 32
     67c:	0f 2e       	mov	r0, r31
     67e:	fb ef       	ldi	r31, 0xFB	; 251
     680:	ef 2e       	mov	r14, r31
     682:	f5 e2       	ldi	r31, 0x25	; 37
     684:	ff 2e       	mov	r15, r31
     686:	f0 2d       	mov	r31, r0
     688:	ee 0f       	add	r30, r30
     68a:	ff 1f       	adc	r31, r31
     68c:	ee 0d       	add	r30, r14
     68e:	ff 1d       	adc	r31, r15
     690:	80 83       	st	Z, r24
     692:	91 83       	std	Z+1, r25	; 0x01
			adc_results[5][adc_head] = adjust(ADCA.CH1.RES);
     694:	8c a5       	lds	r24, 0x6c
     696:	9d a5       	lds	r25, 0x6d
     698:	0e 94 9e 02 	call	0x53c	; 0x53c <adjust>
     69c:	f8 01       	movw	r30, r16
     69e:	b8 96       	adiw	r30, 0x28	; 40
     6a0:	ee 0f       	add	r30, r30
     6a2:	ff 1f       	adc	r31, r31
     6a4:	ee 0d       	add	r30, r14
     6a6:	ff 1d       	adc	r31, r15
     6a8:	80 83       	st	Z, r24
     6aa:	91 83       	std	Z+1, r25	; 0x01
			adc_results[6][adc_head] = adjust(ADCA.CH2.RES);
     6ac:	8c a9       	sts	0x4c, r24
     6ae:	9d a9       	sts	0x4d, r25
     6b0:	0e 94 9e 02 	call	0x53c	; 0x53c <adjust>
     6b4:	f8 01       	movw	r30, r16
     6b6:	f0 96       	adiw	r30, 0x30	; 48
     6b8:	ee 0f       	add	r30, r30
     6ba:	ff 1f       	adc	r31, r31
     6bc:	ee 0d       	add	r30, r14
     6be:	ff 1d       	adc	r31, r15
     6c0:	80 83       	st	Z, r24
     6c2:	91 83       	std	Z+1, r25	; 0x01
			adc_results[7][adc_head] = adjust(ADCA.CH3.RES);
     6c4:	8c ad       	sts	0x6c, r24
     6c6:	9d ad       	sts	0x6d, r25
     6c8:	0e 94 9e 02 	call	0x53c	; 0x53c <adjust>
     6cc:	f8 01       	movw	r30, r16
     6ce:	f8 96       	adiw	r30, 0x38	; 56
     6d0:	ee 0f       	add	r30, r30
     6d2:	ff 1f       	adc	r31, r31
     6d4:	ee 0d       	add	r30, r14
     6d6:	ff 1d       	adc	r31, r15
     6d8:	80 83       	st	Z, r24
     6da:	91 83       	std	Z+1, r25	; 0x01
			adc_results[12][adc_head] = adjust(ADCB.CH0.RES); //PSU Channel D
     6dc:	c0 e4       	ldi	r28, 0x40	; 64
     6de:	d2 e0       	ldi	r29, 0x02	; 2
     6e0:	8c a1       	lds	r24, 0x4c
     6e2:	9d a1       	lds	r25, 0x4d
     6e4:	0e 94 9e 02 	call	0x53c	; 0x53c <adjust>
     6e8:	f8 01       	movw	r30, r16
     6ea:	e0 5a       	subi	r30, 0xA0	; 160
     6ec:	ff 4f       	sbci	r31, 0xFF	; 255
     6ee:	ee 0f       	add	r30, r30
     6f0:	ff 1f       	adc	r31, r31
     6f2:	ee 0d       	add	r30, r14
     6f4:	ff 1d       	adc	r31, r15
     6f6:	80 83       	st	Z, r24
     6f8:	91 83       	std	Z+1, r25	; 0x01
			adc_results[13][adc_head] = adjust(ADCB.CH1RES);
     6fa:	8a 89       	ldd	r24, Y+18	; 0x12
     6fc:	9b 89       	ldd	r25, Y+19	; 0x13
     6fe:	0e 94 9e 02 	call	0x53c	; 0x53c <adjust>
     702:	f8 01       	movw	r30, r16
     704:	e8 59       	subi	r30, 0x98	; 152
     706:	ff 4f       	sbci	r31, 0xFF	; 255
     708:	ee 0f       	add	r30, r30
     70a:	ff 1f       	adc	r31, r31
     70c:	ee 0d       	add	r30, r14
     70e:	ff 1d       	adc	r31, r15
     710:	80 83       	st	Z, r24
     712:	91 83       	std	Z+1, r25	; 0x01
			adc_results[14][adc_head] = adjust(ADCB.CH2RES);
     714:	8c 89       	ldd	r24, Y+20	; 0x14
     716:	9d 89       	ldd	r25, Y+21	; 0x15
     718:	0e 94 9e 02 	call	0x53c	; 0x53c <adjust>
     71c:	f8 01       	movw	r30, r16
     71e:	e0 59       	subi	r30, 0x90	; 144
     720:	ff 4f       	sbci	r31, 0xFF	; 255
     722:	ee 0f       	add	r30, r30
     724:	ff 1f       	adc	r31, r31
     726:	ee 0d       	add	r30, r14
     728:	ff 1d       	adc	r31, r15
     72a:	80 83       	st	Z, r24
     72c:	91 83       	std	Z+1, r25	; 0x01
			adc_results[15][adc_head] = adjust(ADCB.CH3RES);
     72e:	8e 89       	ldd	r24, Y+22	; 0x16
     730:	9f 89       	ldd	r25, Y+23	; 0x17
     732:	0e 94 9e 02 	call	0x53c	; 0x53c <adjust>
     736:	08 58       	subi	r16, 0x88	; 136
     738:	1f 4f       	sbci	r17, 0xFF	; 255
     73a:	00 0f       	add	r16, r16
     73c:	11 1f       	adc	r17, r17
     73e:	e0 0e       	add	r14, r16
     740:	f1 1e       	adc	r15, r17
     742:	f7 01       	movw	r30, r14
     744:	80 83       	st	Z, r24
     746:	91 83       	std	Z+1, r25	; 0x01
			
			//next column
			adc_head++;
     748:	8d 2d       	mov	r24, r13
     74a:	8f 5f       	subi	r24, 0xFF	; 255
     74c:	80 93 fb 26 	sts	0x26FB, r24
			if (adc_head >= ADC_NUM_CONVERSIONS){adc_head=0;}
     750:	88 30       	cpi	r24, 0x08	; 8
     752:	10 f0       	brcs	.+4      	; 0x758 <service_adc+0x204>
     754:	10 92 fb 26 	sts	0x26FB, r1
		}
		
		//Clear Flags to Reset ADC
		ADCA.INTFLAGS = 0x0F;
     758:	8f e0       	ldi	r24, 0x0F	; 15
     75a:	e0 e0       	ldi	r30, 0x00	; 0
     75c:	f2 e0       	ldi	r31, 0x02	; 2
     75e:	86 83       	std	Z+6, r24	; 0x06
		ADCB.INTFLAGS = 0x0F;
     760:	e0 e4       	ldi	r30, 0x40	; 64
     762:	f2 e0       	ldi	r31, 0x02	; 2
     764:	86 83       	std	Z+6, r24	; 0x06
		
		//Toggle Channel Bank
		adc_bank++;
     766:	80 91 fe 26 	lds	r24, 0x26FE
     76a:	8f 5f       	subi	r24, 0xFF	; 255
     76c:	80 93 fe 26 	sts	0x26FE, r24
		adc_bank_select(adc_bank);
     770:	0e 94 2a 01 	call	0x254	; 0x254 <adc_bank_select>
		
		//Start Next Round of Conversions
		adc_convert();
     774:	0e 94 4d 01 	call	0x29a	; 0x29a <adc_convert>
		
		//Auto-calibrate Current Offsets (when output is disabled)
		if(STATE_power_output == DISABLE){
     778:	80 91 ed 25 	lds	r24, 0x25ED
     77c:	89 32       	cpi	r24, 0x29	; 41
     77e:	69 f4       	brne	.+26     	; 0x79a <service_adc+0x246>
     780:	ce e7       	ldi	r28, 0x7E	; 126
     782:	d2 e2       	ldi	r29, 0x22	; 34
     784:	00 e0       	ldi	r16, 0x00	; 0
			for(uint8_t i=0;i<(ADC_NUM_CHANNELS>>1);i++){
				adc_current_offset[i] = adc_max((i<<1)+1);
     786:	80 2f       	mov	r24, r16
     788:	88 0f       	add	r24, r24
     78a:	8f 5f       	subi	r24, 0xFF	; 255
     78c:	0e 94 83 02 	call	0x506	; 0x506 <adc_max>
     790:	89 93       	st	Y+, r24
     792:	99 93       	st	Y+, r25
		//Start Next Round of Conversions
		adc_convert();
		
		//Auto-calibrate Current Offsets (when output is disabled)
		if(STATE_power_output == DISABLE){
			for(uint8_t i=0;i<(ADC_NUM_CHANNELS>>1);i++){
     794:	0f 5f       	subi	r16, 0xFF	; 255
     796:	08 30       	cpi	r16, 0x08	; 8
     798:	b1 f7       	brne	.-20     	; 0x786 <service_adc+0x232>
				adc_current_offset[i] = adc_max((i<<1)+1);
			}			
		}
	}
}
     79a:	df 91       	pop	r29
     79c:	cf 91       	pop	r28
     79e:	1f 91       	pop	r17
     7a0:	0f 91       	pop	r16
     7a2:	ff 90       	pop	r15
     7a4:	ef 90       	pop	r14
     7a6:	df 90       	pop	r13
     7a8:	08 95       	ret

000007aa <brain_debug>:
void brain_debug(){
	static uint8_t c = 0;
	//uart_enqueue_string(&uctrl, "0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789----100---012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789---<200---012345678901234567890123456789---250>---ABCDEFGHIJ");

	//Channel values (from ADC)
	if (STATE_menu == MENU_CONSOLE){
     7aa:	80 91 e7 25 	lds	r24, 0x25E7
     7ae:	82 32       	cpi	r24, 0x22	; 34
     7b0:	89 f4       	brne	.+34     	; 0x7d4 <brain_debug+0x2a>
		c++;
     7b2:	80 91 78 22 	lds	r24, 0x2278
     7b6:	8f 5f       	subi	r24, 0xFF	; 255
     7b8:	80 93 78 22 	sts	0x2278, r24
		if(c%2){lcd_console_write("Hello World...");}
     7bc:	80 ff       	sbrs	r24, 0
     7be:	05 c0       	rjmp	.+10     	; 0x7ca <brain_debug+0x20>
     7c0:	80 e0       	ldi	r24, 0x00	; 0
     7c2:	90 e2       	ldi	r25, 0x20	; 32
     7c4:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <lcd_console_write>
     7c8:	08 95       	ret
		else{lcd_console_write("No! I refuse!");}
     7ca:	8f e0       	ldi	r24, 0x0F	; 15
     7cc:	90 e2       	ldi	r25, 0x20	; 32
     7ce:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <lcd_console_write>
     7d2:	08 95       	ret
	}
	else {		
		lcd_command("75 1 1234");
     7d4:	8d e1       	ldi	r24, 0x1D	; 29
     7d6:	90 e2       	ldi	r25, 0x20	; 32
     7d8:	0e 94 86 0b 	call	0x170c	; 0x170c <lcd_command>
		lcd_command("75 11 5678");
     7dc:	87 e2       	ldi	r24, 0x27	; 39
     7de:	90 e2       	ldi	r25, 0x20	; 32
     7e0:	0e 94 86 0b 	call	0x170c	; 0x170c <lcd_command>
		lcd_command("75 2 8765");
     7e4:	82 e3       	ldi	r24, 0x32	; 50
     7e6:	90 e2       	ldi	r25, 0x20	; 32
     7e8:	0e 94 86 0b 	call	0x170c	; 0x170c <lcd_command>
		lcd_command("75 21 4321");
     7ec:	8c e3       	ldi	r24, 0x3C	; 60
     7ee:	90 e2       	ldi	r25, 0x20	; 32
     7f0:	0e 94 86 0b 	call	0x170c	; 0x170c <lcd_command>
     7f4:	08 95       	ret

000007f6 <brain_power_reset>:
}


//Safe and reset all channels (all disabled, master off)
void brain_power_reset(){
	STATE_power_channels = 0;
     7f6:	10 92 e6 25 	sts	0x25E6, r1
	STATE_power_output = DISABLE;
     7fa:	89 e2       	ldi	r24, 0x29	; 41
     7fc:	80 93 ed 25 	sts	0x25ED, r24
	pwr_main_off(CHANNEL_ALL); //Actually shutoff power
     800:	8a e3       	ldi	r24, 0x3A	; 58
     802:	0e 94 24 15 	call	0x2a48	; 0x2a48 <pwr_main_off>
	fp_led_disable(CHANNEL_M); //Update LED display to indicate this
     806:	85 e0       	ldi	r24, 0x05	; 5
     808:	0e 94 8a 09 	call	0x1314	; 0x1314 <fp_led_disable>
}
     80c:	08 95       	ret

0000080e <init_brain>:
//#############################################################
//## INITIALIZATION ROUTINE
//#############################################################

void init_brain(){
	brain_power_reset();
     80e:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <brain_power_reset>
	STATE_menu = MENU_STARTUP;
     812:	8f e1       	ldi	r24, 0x1F	; 31
     814:	80 93 e7 25 	sts	0x25E7, r24
}
     818:	08 95       	ret

0000081a <brain_menu_output>:
}

//=================
//== OUTPUT Menu
void brain_menu_output(){
	STATE_menu = MENU_OUTPUT;
     81a:	80 e2       	ldi	r24, 0x20	; 32
     81c:	80 93 e7 25 	sts	0x25E7, r24
	lcd_command("31 M_OUT");
     820:	87 e4       	ldi	r24, 0x47	; 71
     822:	90 e2       	ldi	r25, 0x20	; 32
     824:	0e 94 86 0b 	call	0x170c	; 0x170c <lcd_command>
}
     828:	08 95       	ret

0000082a <brain_menu_output_detail>:

void brain_menu_output_detail(uint8_t which_detail){
     82a:	cf 93       	push	r28
     82c:	c8 2f       	mov	r28, r24
	audio_beep(BRAIN_BEEPS, BRAIN_VOLUME);
     82e:	81 e0       	ldi	r24, 0x01	; 1
     830:	64 e6       	ldi	r22, 0x64	; 100
     832:	70 e0       	ldi	r23, 0x00	; 0
     834:	0e 94 85 30 	call	0x610a	; 0x610a <audio_beep>
	switch(which_detail){
     838:	cf 30       	cpi	r28, 0x0F	; 15
     83a:	19 f0       	breq	.+6      	; 0x842 <brain_menu_output_detail+0x18>
     83c:	c0 31       	cpi	r28, 0x10	; 16
     83e:	01 f5       	brne	.+64     	; 0x880 <brain_menu_output_detail+0x56>
     840:	10 c0       	rjmp	.+32     	; 0x862 <brain_menu_output_detail+0x38>
		case LCD_TOUCH_OPEN_DETAIL_AB:
			STATE_menu = MENU_DETAIL_AB;
     842:	83 e2       	ldi	r24, 0x23	; 35
     844:	80 93 e7 25 	sts	0x25E7, r24
			lcd_command("31 M_DETAIL");
     848:	80 e5       	ldi	r24, 0x50	; 80
     84a:	90 e2       	ldi	r25, 0x20	; 32
     84c:	0e 94 86 0b 	call	0x170c	; 0x170c <lcd_command>
			lcd_command("88 58 A");
     850:	8c e5       	ldi	r24, 0x5C	; 92
     852:	90 e2       	ldi	r25, 0x20	; 32
     854:	0e 94 86 0b 	call	0x170c	; 0x170c <lcd_command>
			lcd_command("88 59 B");
     858:	84 e6       	ldi	r24, 0x64	; 100
     85a:	90 e2       	ldi	r25, 0x20	; 32
     85c:	0e 94 86 0b 	call	0x170c	; 0x170c <lcd_command>
			break;
     860:	0f c0       	rjmp	.+30     	; 0x880 <brain_menu_output_detail+0x56>
		case LCD_TOUCH_OPEN_DETAIL_CD:
			STATE_menu = MENU_DETAIL_CD;
     862:	84 e2       	ldi	r24, 0x24	; 36
     864:	80 93 e7 25 	sts	0x25E7, r24
			lcd_command("31 M_DETAIL");
     868:	80 e5       	ldi	r24, 0x50	; 80
     86a:	90 e2       	ldi	r25, 0x20	; 32
     86c:	0e 94 86 0b 	call	0x170c	; 0x170c <lcd_command>
			lcd_command("88 58 C");
     870:	8c e6       	ldi	r24, 0x6C	; 108
     872:	90 e2       	ldi	r25, 0x20	; 32
     874:	0e 94 86 0b 	call	0x170c	; 0x170c <lcd_command>
			lcd_command("88 59 D");
     878:	84 e7       	ldi	r24, 0x74	; 116
     87a:	90 e2       	ldi	r25, 0x20	; 32
     87c:	0e 94 86 0b 	call	0x170c	; 0x170c <lcd_command>
			break;
	}
}
     880:	cf 91       	pop	r28
     882:	08 95       	ret

00000884 <brain_menu_control>:

//=================
//== CONTROL Menu

void brain_menu_control(){
	STATE_menu = MENU_CONTROL;
     884:	81 e2       	ldi	r24, 0x21	; 33
     886:	80 93 e7 25 	sts	0x25E7, r24
	lcd_command("31 M_CTRL");
     88a:	8c e7       	ldi	r24, 0x7C	; 124
     88c:	90 e2       	ldi	r25, 0x20	; 32
     88e:	0e 94 86 0b 	call	0x170c	; 0x170c <lcd_command>
}
     892:	08 95       	ret

00000894 <brain_menu_control_dial>:

void brain_menu_control_dial(uint8_t which_channel){
     894:	cf 93       	push	r28
     896:	c8 2f       	mov	r28, r24
	audio_beep(BRAIN_BEEPS, BRAIN_VOLUME);
     898:	81 e0       	ldi	r24, 0x01	; 1
     89a:	64 e6       	ldi	r22, 0x64	; 100
     89c:	70 e0       	ldi	r23, 0x00	; 0
     89e:	0e 94 85 30 	call	0x610a	; 0x610a <audio_beep>
	lcd_command("31 M_DIAL");
     8a2:	86 e8       	ldi	r24, 0x86	; 134
     8a4:	90 e2       	ldi	r25, 0x20	; 32
     8a6:	0e 94 86 0b 	call	0x170c	; 0x170c <lcd_command>
	pwr_adj_channel_dirty = 0xFF; //mark all channels dirty (so load initial values)
     8aa:	8f ef       	ldi	r24, 0xFF	; 255
     8ac:	80 93 25 27 	sts	0x2725, r24
	switch(which_channel){
     8b0:	c2 31       	cpi	r28, 0x12	; 18
     8b2:	91 f0       	breq	.+36     	; 0x8d8 <brain_menu_control_dial+0x44>
     8b4:	c3 31       	cpi	r28, 0x13	; 19
     8b6:	18 f4       	brcc	.+6      	; 0x8be <brain_menu_control_dial+0x2a>
     8b8:	c1 31       	cpi	r28, 0x11	; 17
     8ba:	29 f5       	brne	.+74     	; 0x906 <brain_menu_control_dial+0x72>
     8bc:	05 c0       	rjmp	.+10     	; 0x8c8 <brain_menu_control_dial+0x34>
     8be:	c3 31       	cpi	r28, 0x13	; 19
     8c0:	99 f0       	breq	.+38     	; 0x8e8 <brain_menu_control_dial+0x54>
     8c2:	c4 31       	cpi	r28, 0x14	; 20
     8c4:	01 f5       	brne	.+64     	; 0x906 <brain_menu_control_dial+0x72>
     8c6:	18 c0       	rjmp	.+48     	; 0x8f8 <brain_menu_control_dial+0x64>
		case LCD_TOUCH_ROW_A:
			STATE_menu = MENU_DIAL_A;
     8c8:	85 e2       	ldi	r24, 0x25	; 37
     8ca:	80 93 e7 25 	sts	0x25E7, r24
			lcd_command("88 90 A");
     8ce:	80 e9       	ldi	r24, 0x90	; 144
     8d0:	90 e2       	ldi	r25, 0x20	; 32
     8d2:	0e 94 86 0b 	call	0x170c	; 0x170c <lcd_command>
			break;
     8d6:	17 c0       	rjmp	.+46     	; 0x906 <brain_menu_control_dial+0x72>
		case LCD_TOUCH_ROW_B:
			STATE_menu = MENU_DIAL_B;
     8d8:	86 e2       	ldi	r24, 0x26	; 38
     8da:	80 93 e7 25 	sts	0x25E7, r24
			lcd_command("88 90 B");
     8de:	88 e9       	ldi	r24, 0x98	; 152
     8e0:	90 e2       	ldi	r25, 0x20	; 32
     8e2:	0e 94 86 0b 	call	0x170c	; 0x170c <lcd_command>
			break;
     8e6:	0f c0       	rjmp	.+30     	; 0x906 <brain_menu_control_dial+0x72>
		case LCD_TOUCH_ROW_C:
			STATE_menu = MENU_DIAL_C;
     8e8:	87 e2       	ldi	r24, 0x27	; 39
     8ea:	80 93 e7 25 	sts	0x25E7, r24
			lcd_command("88 90 C");
     8ee:	80 ea       	ldi	r24, 0xA0	; 160
     8f0:	90 e2       	ldi	r25, 0x20	; 32
     8f2:	0e 94 86 0b 	call	0x170c	; 0x170c <lcd_command>
			break;
     8f6:	07 c0       	rjmp	.+14     	; 0x906 <brain_menu_control_dial+0x72>
		case LCD_TOUCH_ROW_D:
			STATE_menu = MENU_DIAL_D;
     8f8:	88 e2       	ldi	r24, 0x28	; 40
     8fa:	80 93 e7 25 	sts	0x25E7, r24
			lcd_command("88 90 D");
     8fe:	88 ea       	ldi	r24, 0xA8	; 168
     900:	90 e2       	ldi	r25, 0x20	; 32
     902:	0e 94 86 0b 	call	0x170c	; 0x170c <lcd_command>
			break;
	}
}
     906:	cf 91       	pop	r28
     908:	08 95       	ret

0000090a <brain_menu_control_dial_select>:

void brain_menu_control_dial_select(uint8_t which_one){
     90a:	cf 93       	push	r28
     90c:	c8 2f       	mov	r28, r24
	//Announce
	audio_beep(BRAIN_BEEPS, BRAIN_VOLUME);
     90e:	81 e0       	ldi	r24, 0x01	; 1
     910:	64 e6       	ldi	r22, 0x64	; 100
     912:	70 e0       	ldi	r23, 0x00	; 0
     914:	0e 94 85 30 	call	0x610a	; 0x610a <audio_beep>
	//Update Stat
	pwr_adj_left_right = which_one;
     918:	c0 93 10 27 	sts	0x2710, r28
	//Update Display
	switch(which_one){
     91c:	c1 36       	cpi	r28, 0x61	; 97
     91e:	19 f0       	breq	.+6      	; 0x926 <brain_menu_control_dial_select+0x1c>
     920:	c2 36       	cpi	r28, 0x62	; 98
     922:	51 f4       	brne	.+20     	; 0x938 <brain_menu_control_dial_select+0x2e>
     924:	05 c0       	rjmp	.+10     	; 0x930 <brain_menu_control_dial_select+0x26>
		case LCD_TOUCH_LEFT:
			lcd_command("31 L_SEL");
     926:	80 eb       	ldi	r24, 0xB0	; 176
     928:	90 e2       	ldi	r25, 0x20	; 32
     92a:	0e 94 86 0b 	call	0x170c	; 0x170c <lcd_command>
			break;
     92e:	04 c0       	rjmp	.+8      	; 0x938 <brain_menu_control_dial_select+0x2e>
		case LCD_TOUCH_RIGHT:
			lcd_command("31 R_SEL");
     930:	89 eb       	ldi	r24, 0xB9	; 185
     932:	90 e2       	ldi	r25, 0x20	; 32
     934:	0e 94 86 0b 	call	0x170c	; 0x170c <lcd_command>
			break;
	}
}
     938:	cf 91       	pop	r28
     93a:	08 95       	ret

0000093c <brain_menu_console>:

//=================
//== CONSOLE Menu

void brain_menu_console(){
	STATE_menu = MENU_CONSOLE;
     93c:	82 e2       	ldi	r24, 0x22	; 34
     93e:	80 93 e7 25 	sts	0x25E7, r24
	lcd_command("31 M_CON");
     942:	82 ec       	ldi	r24, 0xC2	; 194
     944:	90 e2       	ldi	r25, 0x20	; 32
     946:	0e 94 86 0b 	call	0x170c	; 0x170c <lcd_command>
}
     94a:	08 95       	ret

0000094c <brain_menu_update>:

//Update channel enabled indicators
void brain_menu_update(){
	if ((STATE_menu == MENU_OUTPUT) || (STATE_menu == MENU_CONTROL)) {
     94c:	80 91 e7 25 	lds	r24, 0x25E7
     950:	80 52       	subi	r24, 0x20	; 32
     952:	82 30       	cpi	r24, 0x02	; 2
     954:	08 f0       	brcs	.+2      	; 0x958 <brain_menu_update+0xc>
     956:	54 c0       	rjmp	.+168    	; 0xa00 <brain_menu_update+0xb4>
		if ((STATE_power_channels & _BV(0)) == 0){lcd_a(LCD_DISABLED);}
     958:	80 91 e6 25 	lds	r24, 0x25E6
     95c:	80 fd       	sbrc	r24, 0
     95e:	04 c0       	rjmp	.+8      	; 0x968 <brain_menu_update+0x1c>
     960:	81 e2       	ldi	r24, 0x21	; 33
     962:	0e 94 06 0c 	call	0x180c	; 0x180c <lcd_a>
     966:	0d c0       	rjmp	.+26     	; 0x982 <brain_menu_update+0x36>
		else {
			if (STATE_power_output == DISABLE){lcd_a(LCD_STANDBY);}
     968:	80 91 ed 25 	lds	r24, 0x25ED
     96c:	89 32       	cpi	r24, 0x29	; 41
     96e:	21 f4       	brne	.+8      	; 0x978 <brain_menu_update+0x2c>
     970:	80 e2       	ldi	r24, 0x20	; 32
     972:	0e 94 06 0c 	call	0x180c	; 0x180c <lcd_a>
     976:	05 c0       	rjmp	.+10     	; 0x982 <brain_menu_update+0x36>
			else if (STATE_power_output == ENABLE){lcd_a(LCD_ENABLED);}
     978:	8a 32       	cpi	r24, 0x2A	; 42
     97a:	19 f4       	brne	.+6      	; 0x982 <brain_menu_update+0x36>
     97c:	8f e1       	ldi	r24, 0x1F	; 31
     97e:	0e 94 06 0c 	call	0x180c	; 0x180c <lcd_a>
		}	
				
		if ((STATE_power_channels & _BV(1)) == 0){lcd_b(LCD_DISABLED);}
     982:	80 91 e6 25 	lds	r24, 0x25E6
     986:	81 fd       	sbrc	r24, 1
     988:	04 c0       	rjmp	.+8      	; 0x992 <brain_menu_update+0x46>
     98a:	81 e2       	ldi	r24, 0x21	; 33
     98c:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <lcd_b>
     990:	0d c0       	rjmp	.+26     	; 0x9ac <brain_menu_update+0x60>
		else {
			if (STATE_power_output == DISABLE){lcd_b(LCD_STANDBY);}
     992:	80 91 ed 25 	lds	r24, 0x25ED
     996:	89 32       	cpi	r24, 0x29	; 41
     998:	21 f4       	brne	.+8      	; 0x9a2 <brain_menu_update+0x56>
     99a:	80 e2       	ldi	r24, 0x20	; 32
     99c:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <lcd_b>
     9a0:	05 c0       	rjmp	.+10     	; 0x9ac <brain_menu_update+0x60>
			else if (STATE_power_output == ENABLE){lcd_b(LCD_ENABLED);}
     9a2:	8a 32       	cpi	r24, 0x2A	; 42
     9a4:	19 f4       	brne	.+6      	; 0x9ac <brain_menu_update+0x60>
     9a6:	8f e1       	ldi	r24, 0x1F	; 31
     9a8:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <lcd_b>
		}	

		if ((STATE_power_channels & _BV(2)) == 0){lcd_c(LCD_DISABLED);}
     9ac:	80 91 e6 25 	lds	r24, 0x25E6
     9b0:	82 fd       	sbrc	r24, 2
     9b2:	04 c0       	rjmp	.+8      	; 0x9bc <brain_menu_update+0x70>
     9b4:	81 e2       	ldi	r24, 0x21	; 33
     9b6:	0e 94 de 0b 	call	0x17bc	; 0x17bc <lcd_c>
     9ba:	0d c0       	rjmp	.+26     	; 0x9d6 <brain_menu_update+0x8a>
		else {
			if (STATE_power_output == DISABLE){lcd_c(LCD_STANDBY);}
     9bc:	80 91 ed 25 	lds	r24, 0x25ED
     9c0:	89 32       	cpi	r24, 0x29	; 41
     9c2:	21 f4       	brne	.+8      	; 0x9cc <brain_menu_update+0x80>
     9c4:	80 e2       	ldi	r24, 0x20	; 32
     9c6:	0e 94 de 0b 	call	0x17bc	; 0x17bc <lcd_c>
     9ca:	05 c0       	rjmp	.+10     	; 0x9d6 <brain_menu_update+0x8a>
			else if (STATE_power_output == ENABLE){lcd_c(LCD_ENABLED);}
     9cc:	8a 32       	cpi	r24, 0x2A	; 42
     9ce:	19 f4       	brne	.+6      	; 0x9d6 <brain_menu_update+0x8a>
     9d0:	8f e1       	ldi	r24, 0x1F	; 31
     9d2:	0e 94 de 0b 	call	0x17bc	; 0x17bc <lcd_c>
		}

		if ((STATE_power_channels & _BV(3)) == 0){lcd_d(LCD_DISABLED);}
     9d6:	80 91 e6 25 	lds	r24, 0x25E6
     9da:	83 fd       	sbrc	r24, 3
     9dc:	04 c0       	rjmp	.+8      	; 0x9e6 <brain_menu_update+0x9a>
     9de:	81 e2       	ldi	r24, 0x21	; 33
     9e0:	0e 94 ca 0b 	call	0x1794	; 0x1794 <lcd_d>
     9e4:	08 95       	ret
		else {
			if (STATE_power_output == DISABLE){lcd_d(LCD_STANDBY);}
     9e6:	80 91 ed 25 	lds	r24, 0x25ED
     9ea:	89 32       	cpi	r24, 0x29	; 41
     9ec:	21 f4       	brne	.+8      	; 0x9f6 <brain_menu_update+0xaa>
     9ee:	80 e2       	ldi	r24, 0x20	; 32
     9f0:	0e 94 ca 0b 	call	0x1794	; 0x1794 <lcd_d>
     9f4:	08 95       	ret
			else if (STATE_power_output == ENABLE){lcd_d(LCD_ENABLED);}
     9f6:	8a 32       	cpi	r24, 0x2A	; 42
     9f8:	19 f4       	brne	.+6      	; 0xa00 <brain_menu_update+0xb4>
     9fa:	8f e1       	ldi	r24, 0x1F	; 31
     9fc:	0e 94 ca 0b 	call	0x1794	; 0x1794 <lcd_d>
     a00:	08 95       	ret

00000a02 <brain_menu_load>:

void brain_button_pressed(){
	if (STATE_menu == MENU_STARTUP){brain_rotary_change(0);}
}

void brain_menu_load(uint8_t which_menu){
     a02:	cf 93       	push	r28
     a04:	c8 2f       	mov	r28, r24
	//Announce!
	audio_beep(BRAIN_BEEPS, BRAIN_VOLUME);
     a06:	81 e0       	ldi	r24, 0x01	; 1
     a08:	64 e6       	ldi	r22, 0x64	; 100
     a0a:	70 e0       	ldi	r23, 0x00	; 0
     a0c:	0e 94 85 30 	call	0x610a	; 0x610a <audio_beep>
	
	//Reset LCD state for menu change (no need to update screen with old stuff)
	init_uart_buffer(&ulcd); //flush outgoing buffer
     a10:	80 eb       	ldi	r24, 0xB0	; 176
     a12:	9b e0       	ldi	r25, 0x0B	; 11
     a14:	0e 94 4c 2d 	call	0x5a98	; 0x5a98 <init_uart_buffer>
	lcd_flow_control = LCD_READY; //clear any current transmissions
     a18:	82 e5       	ldi	r24, 0x52	; 82
     a1a:	80 93 24 27 	sts	0x2724, r24
	lcd_last_touch_command = LCD_TOUCH_NONE; //clear out any latent touch actions
     a1e:	85 e1       	ldi	r24, 0x15	; 21
     a20:	80 93 12 27 	sts	0x2712, r24
	lcd_command(""); //send \r to flush any existing partially transmitted commands
     a24:	8b ec       	ldi	r24, 0xCB	; 203
     a26:	90 e2       	ldi	r25, 0x20	; 32
     a28:	0e 94 86 0b 	call	0x170c	; 0x170c <lcd_command>
	
	switch (which_menu){
     a2c:	c0 32       	cpi	r28, 0x20	; 32
     a2e:	69 f0       	breq	.+26     	; 0xa4a <brain_menu_load+0x48>
     a30:	c1 32       	cpi	r28, 0x21	; 33
     a32:	18 f4       	brcc	.+6      	; 0xa3a <brain_menu_load+0x38>
     a34:	cf 31       	cpi	r28, 0x1F	; 31
     a36:	89 f4       	brne	.+34     	; 0xa5a <brain_menu_load+0x58>
     a38:	05 c0       	rjmp	.+10     	; 0xa44 <brain_menu_load+0x42>
     a3a:	c1 32       	cpi	r28, 0x21	; 33
     a3c:	49 f0       	breq	.+18     	; 0xa50 <brain_menu_load+0x4e>
     a3e:	c2 32       	cpi	r28, 0x22	; 34
     a40:	61 f4       	brne	.+24     	; 0xa5a <brain_menu_load+0x58>
     a42:	09 c0       	rjmp	.+18     	; 0xa56 <brain_menu_load+0x54>
		case MENU_STARTUP:
			brain_menu_output();
     a44:	0e 94 0d 04 	call	0x81a	; 0x81a <brain_menu_output>
			break;
     a48:	08 c0       	rjmp	.+16     	; 0xa5a <brain_menu_load+0x58>
		case MENU_OUTPUT:
			brain_menu_output();
     a4a:	0e 94 0d 04 	call	0x81a	; 0x81a <brain_menu_output>
			break;
     a4e:	05 c0       	rjmp	.+10     	; 0xa5a <brain_menu_load+0x58>
		case MENU_CONTROL:
			brain_menu_control();
     a50:	0e 94 42 04 	call	0x884	; 0x884 <brain_menu_control>
			break;
     a54:	02 c0       	rjmp	.+4      	; 0xa5a <brain_menu_load+0x58>
		case MENU_CONSOLE:
			brain_menu_console();
     a56:	0e 94 9e 04 	call	0x93c	; 0x93c <brain_menu_console>
			break;
	}
	brain_menu_update(); //Update channel indicators
     a5a:	0e 94 a6 04 	call	0x94c	; 0x94c <brain_menu_update>
}
     a5e:	cf 91       	pop	r28
     a60:	08 95       	ret

00000a62 <brain_rotary_change>:

//When the user turns the rotary dial...
void brain_rotary_change(uint8_t which_way){
     a62:	68 2f       	mov	r22, r24
	switch (STATE_menu){
     a64:	80 91 e7 25 	lds	r24, 0x25E7
     a68:	82 32       	cpi	r24, 0x22	; 34
     a6a:	c1 f1       	breq	.+112    	; 0xadc <brain_rotary_change+0x7a>
     a6c:	83 32       	cpi	r24, 0x23	; 35
     a6e:	40 f4       	brcc	.+16     	; 0xa80 <brain_rotary_change+0x1e>
     a70:	80 32       	cpi	r24, 0x20	; 32
     a72:	d1 f0       	breq	.+52     	; 0xaa8 <brain_rotary_change+0x46>
     a74:	81 32       	cpi	r24, 0x21	; 33
     a76:	28 f5       	brcc	.+74     	; 0xac2 <brain_rotary_change+0x60>
     a78:	8f 31       	cpi	r24, 0x1F	; 31
     a7a:	09 f0       	breq	.+2      	; 0xa7e <brain_rotary_change+0x1c>
     a7c:	77 c0       	rjmp	.+238    	; 0xb6c <brain_rotary_change+0x10a>
     a7e:	10 c0       	rjmp	.+32     	; 0xaa0 <brain_rotary_change+0x3e>
     a80:	86 32       	cpi	r24, 0x26	; 38
     a82:	09 f4       	brne	.+2      	; 0xa86 <brain_rotary_change+0x24>
     a84:	47 c0       	rjmp	.+142    	; 0xb14 <brain_rotary_change+0xb2>
     a86:	87 32       	cpi	r24, 0x27	; 39
     a88:	20 f4       	brcc	.+8      	; 0xa92 <brain_rotary_change+0x30>
     a8a:	85 32       	cpi	r24, 0x25	; 37
     a8c:	09 f0       	breq	.+2      	; 0xa90 <brain_rotary_change+0x2e>
     a8e:	6e c0       	rjmp	.+220    	; 0xb6c <brain_rotary_change+0x10a>
     a90:	32 c0       	rjmp	.+100    	; 0xaf6 <brain_rotary_change+0x94>
     a92:	87 32       	cpi	r24, 0x27	; 39
     a94:	09 f4       	brne	.+2      	; 0xa98 <brain_rotary_change+0x36>
     a96:	4d c0       	rjmp	.+154    	; 0xb32 <brain_rotary_change+0xd0>
     a98:	88 32       	cpi	r24, 0x28	; 40
     a9a:	09 f0       	breq	.+2      	; 0xa9e <brain_rotary_change+0x3c>
     a9c:	67 c0       	rjmp	.+206    	; 0xb6c <brain_rotary_change+0x10a>
     a9e:	58 c0       	rjmp	.+176    	; 0xb50 <brain_rotary_change+0xee>
		case MENU_STARTUP:
			brain_menu_load(MENU_OUTPUT);
     aa0:	80 e2       	ldi	r24, 0x20	; 32
     aa2:	0e 94 01 05 	call	0xa02	; 0xa02 <brain_menu_load>
			break;
     aa6:	08 95       	ret
		case MENU_OUTPUT:
			if (which_way == QUAD_DOWN){brain_menu_load(MENU_CONTROL);}
     aa8:	6e 32       	cpi	r22, 0x2E	; 46
     aaa:	21 f4       	brne	.+8      	; 0xab4 <brain_rotary_change+0x52>
     aac:	81 e2       	ldi	r24, 0x21	; 33
     aae:	0e 94 01 05 	call	0xa02	; 0xa02 <brain_menu_load>
     ab2:	08 95       	ret
			if (which_way == QUAD_UP){brain_menu_load(MENU_CONSOLE);}
     ab4:	6d 32       	cpi	r22, 0x2D	; 45
     ab6:	09 f0       	breq	.+2      	; 0xaba <brain_rotary_change+0x58>
     ab8:	59 c0       	rjmp	.+178    	; 0xb6c <brain_rotary_change+0x10a>
     aba:	82 e2       	ldi	r24, 0x22	; 34
     abc:	0e 94 01 05 	call	0xa02	; 0xa02 <brain_menu_load>
     ac0:	08 95       	ret
			break;
		case MENU_CONTROL:
			if (which_way == QUAD_DOWN){brain_menu_load(MENU_CONSOLE);}
     ac2:	6e 32       	cpi	r22, 0x2E	; 46
     ac4:	21 f4       	brne	.+8      	; 0xace <brain_rotary_change+0x6c>
     ac6:	82 e2       	ldi	r24, 0x22	; 34
     ac8:	0e 94 01 05 	call	0xa02	; 0xa02 <brain_menu_load>
     acc:	08 95       	ret
			if (which_way == QUAD_UP){brain_menu_load(MENU_OUTPUT);}
     ace:	6d 32       	cpi	r22, 0x2D	; 45
     ad0:	09 f0       	breq	.+2      	; 0xad4 <brain_rotary_change+0x72>
     ad2:	4c c0       	rjmp	.+152    	; 0xb6c <brain_rotary_change+0x10a>
     ad4:	80 e2       	ldi	r24, 0x20	; 32
     ad6:	0e 94 01 05 	call	0xa02	; 0xa02 <brain_menu_load>
     ada:	08 95       	ret
			break;
		case MENU_CONSOLE:
			if (which_way == QUAD_DOWN){brain_menu_load(MENU_OUTPUT);}
     adc:	6e 32       	cpi	r22, 0x2E	; 46
     ade:	21 f4       	brne	.+8      	; 0xae8 <brain_rotary_change+0x86>
     ae0:	80 e2       	ldi	r24, 0x20	; 32
     ae2:	0e 94 01 05 	call	0xa02	; 0xa02 <brain_menu_load>
     ae6:	08 95       	ret
			if (which_way == QUAD_UP){brain_menu_load(MENU_CONTROL);}
     ae8:	6d 32       	cpi	r22, 0x2D	; 45
     aea:	09 f0       	breq	.+2      	; 0xaee <brain_rotary_change+0x8c>
     aec:	3f c0       	rjmp	.+126    	; 0xb6c <brain_rotary_change+0x10a>
     aee:	81 e2       	ldi	r24, 0x21	; 33
     af0:	0e 94 01 05 	call	0xa02	; 0xa02 <brain_menu_load>
     af4:	08 95       	ret
			break;
		case MENU_DIAL_A:
			switch(pwr_adj_left_right){
     af6:	80 91 10 27 	lds	r24, 0x2710
     afa:	81 36       	cpi	r24, 0x61	; 97
     afc:	19 f0       	breq	.+6      	; 0xb04 <brain_rotary_change+0xa2>
     afe:	82 36       	cpi	r24, 0x62	; 98
     b00:	a9 f5       	brne	.+106    	; 0xb6c <brain_rotary_change+0x10a>
     b02:	04 c0       	rjmp	.+8      	; 0xb0c <brain_rotary_change+0xaa>
			case LCD_TOUCH_LEFT:					
				pwr_adj_change_increment(0, which_way);
     b04:	80 e0       	ldi	r24, 0x00	; 0
     b06:	0e 94 be 13 	call	0x277c	; 0x277c <pwr_adj_change_increment>
				break;
     b0a:	08 95       	ret
			case LCD_TOUCH_RIGHT:
				pwr_adj_change_increment(1, which_way);
     b0c:	81 e0       	ldi	r24, 0x01	; 1
     b0e:	0e 94 be 13 	call	0x277c	; 0x277c <pwr_adj_change_increment>
				break;
     b12:	08 95       	ret
			}
			break;
		case MENU_DIAL_B:
			switch(pwr_adj_left_right){
     b14:	80 91 10 27 	lds	r24, 0x2710
     b18:	81 36       	cpi	r24, 0x61	; 97
     b1a:	19 f0       	breq	.+6      	; 0xb22 <brain_rotary_change+0xc0>
     b1c:	82 36       	cpi	r24, 0x62	; 98
     b1e:	31 f5       	brne	.+76     	; 0xb6c <brain_rotary_change+0x10a>
     b20:	04 c0       	rjmp	.+8      	; 0xb2a <brain_rotary_change+0xc8>
			case LCD_TOUCH_LEFT:
				pwr_adj_change_increment(2, which_way);
     b22:	82 e0       	ldi	r24, 0x02	; 2
     b24:	0e 94 be 13 	call	0x277c	; 0x277c <pwr_adj_change_increment>
				break;
     b28:	08 95       	ret
			case LCD_TOUCH_RIGHT:
				pwr_adj_change_increment(3, which_way);
     b2a:	83 e0       	ldi	r24, 0x03	; 3
     b2c:	0e 94 be 13 	call	0x277c	; 0x277c <pwr_adj_change_increment>
				break;
     b30:	08 95       	ret
			}
			break;
		case MENU_DIAL_C:
			switch(pwr_adj_left_right){
     b32:	80 91 10 27 	lds	r24, 0x2710
     b36:	81 36       	cpi	r24, 0x61	; 97
     b38:	19 f0       	breq	.+6      	; 0xb40 <brain_rotary_change+0xde>
     b3a:	82 36       	cpi	r24, 0x62	; 98
     b3c:	b9 f4       	brne	.+46     	; 0xb6c <brain_rotary_change+0x10a>
     b3e:	04 c0       	rjmp	.+8      	; 0xb48 <brain_rotary_change+0xe6>
			case LCD_TOUCH_LEFT:
				pwr_adj_change_increment(4, which_way);
     b40:	84 e0       	ldi	r24, 0x04	; 4
     b42:	0e 94 be 13 	call	0x277c	; 0x277c <pwr_adj_change_increment>
				break;
     b46:	08 95       	ret
			case LCD_TOUCH_RIGHT:
				pwr_adj_change_increment(5, which_way);
     b48:	85 e0       	ldi	r24, 0x05	; 5
     b4a:	0e 94 be 13 	call	0x277c	; 0x277c <pwr_adj_change_increment>
				break;
     b4e:	08 95       	ret
			}
			break;
		case MENU_DIAL_D:
			switch(pwr_adj_left_right){
     b50:	80 91 10 27 	lds	r24, 0x2710
     b54:	81 36       	cpi	r24, 0x61	; 97
     b56:	19 f0       	breq	.+6      	; 0xb5e <brain_rotary_change+0xfc>
     b58:	82 36       	cpi	r24, 0x62	; 98
     b5a:	41 f4       	brne	.+16     	; 0xb6c <brain_rotary_change+0x10a>
     b5c:	04 c0       	rjmp	.+8      	; 0xb66 <brain_rotary_change+0x104>
			case LCD_TOUCH_LEFT:
				pwr_adj_change_increment(6, which_way);
     b5e:	86 e0       	ldi	r24, 0x06	; 6
     b60:	0e 94 be 13 	call	0x277c	; 0x277c <pwr_adj_change_increment>
				break;
     b64:	08 95       	ret
			case LCD_TOUCH_RIGHT:
				pwr_adj_change_increment(7, which_way);
     b66:	87 e0       	ldi	r24, 0x07	; 7
     b68:	0e 94 be 13 	call	0x277c	; 0x277c <pwr_adj_change_increment>
     b6c:	08 95       	ret

00000b6e <brain_button_pressed>:
	//Update LCD
	brain_menu_update();
}	

void brain_button_pressed(){
	if (STATE_menu == MENU_STARTUP){brain_rotary_change(0);}
     b6e:	80 91 e7 25 	lds	r24, 0x25E7
     b72:	8f 31       	cpi	r24, 0x1F	; 31
     b74:	19 f4       	brne	.+6      	; 0xb7c <brain_button_pressed+0xe>
     b76:	80 e0       	ldi	r24, 0x00	; 0
     b78:	0e 94 31 05 	call	0xa62	; 0xa62 <brain_rotary_change>
     b7c:	08 95       	ret

00000b7e <brain_power_master>:
	brain_menu_update();
}

void brain_power_master(){
	//Go to STANDBY (DISABLE)
	if (STATE_power_output == ENABLE){
     b7e:	80 91 ed 25 	lds	r24, 0x25ED
     b82:	8a 32       	cpi	r24, 0x2A	; 42
     b84:	89 f4       	brne	.+34     	; 0xba8 <brain_power_master+0x2a>
			STATE_power_output = DISABLE;
     b86:	89 e2       	ldi	r24, 0x29	; 41
     b88:	80 93 ed 25 	sts	0x25ED, r24
			pwr_main_off(CHANNEL_ALL);
     b8c:	8a e3       	ldi	r24, 0x3A	; 58
     b8e:	0e 94 24 15 	call	0x2a48	; 0x2a48 <pwr_main_off>
			pwr_adj_off(CHANNEL_ALL);
     b92:	8a e3       	ldi	r24, 0x3A	; 58
     b94:	0e 94 67 13 	call	0x26ce	; 0x26ce <pwr_adj_off>
			fp_led_disable(CHANNEL_M);		
     b98:	85 e0       	ldi	r24, 0x05	; 5
     b9a:	0e 94 8a 09 	call	0x1314	; 0x1314 <fp_led_disable>
			PORTH.OUTCLR = _BV(0); //xxx -- Toggle 5V Control output with master	
     b9e:	81 e0       	ldi	r24, 0x01	; 1
     ba0:	e0 ee       	ldi	r30, 0xE0	; 224
     ba2:	f6 e0       	ldi	r31, 0x06	; 6
     ba4:	86 83       	std	Z+6, r24	; 0x06
     ba6:	12 c0       	rjmp	.+36     	; 0xbcc <brain_power_master+0x4e>
	}
	
	//Enable OUTPUT! (ENABLE)
	else {	
		if (STATE_power_output == DISABLE){
     ba8:	89 32       	cpi	r24, 0x29	; 41
     baa:	81 f4       	brne	.+32     	; 0xbcc <brain_power_master+0x4e>
			STATE_power_output = ENABLE;
     bac:	8a e2       	ldi	r24, 0x2A	; 42
     bae:	80 93 ed 25 	sts	0x25ED, r24
			pwr_main_on(CHANNEL_RESTORE);
     bb2:	8c e3       	ldi	r24, 0x3C	; 60
     bb4:	0e 94 ee 14 	call	0x29dc	; 0x29dc <pwr_main_on>
			pwr_adj_on(CHANNEL_RESTORE);
     bb8:	8c e3       	ldi	r24, 0x3C	; 60
     bba:	0e 94 37 13 	call	0x266e	; 0x266e <pwr_adj_on>
			fp_led_enable(CHANNEL_M);
     bbe:	85 e0       	ldi	r24, 0x05	; 5
     bc0:	0e 94 5e 09 	call	0x12bc	; 0x12bc <fp_led_enable>
			PORTH.OUTSET = _BV(0); //xxx -- Toggle 5V Control output with master
     bc4:	81 e0       	ldi	r24, 0x01	; 1
     bc6:	e0 ee       	ldi	r30, 0xE0	; 224
     bc8:	f6 e0       	ldi	r31, 0x06	; 6
     bca:	85 83       	std	Z+5, r24	; 0x05
		}			
	}
	
	//Update LCD
	brain_menu_update();
     bcc:	0e 94 a6 04 	call	0x94c	; 0x94c <brain_menu_update>
}	
     bd0:	08 95       	ret

00000bd2 <brain_power_on>:
	fp_led_disable(which);
	//Update LCD
	brain_menu_update();
}

void brain_power_on(uint8_t which){
     bd2:	cf 93       	push	r28
     bd4:	c8 2f       	mov	r28, r24
	//Update state
	STATE_power_channels |= _BV(which);
     bd6:	81 e0       	ldi	r24, 0x01	; 1
     bd8:	90 e0       	ldi	r25, 0x00	; 0
     bda:	0c 2e       	mov	r0, r28
     bdc:	02 c0       	rjmp	.+4      	; 0xbe2 <brain_power_on+0x10>
     bde:	88 0f       	add	r24, r24
     be0:	99 1f       	adc	r25, r25
     be2:	0a 94       	dec	r0
     be4:	e2 f7       	brpl	.-8      	; 0xbde <brain_power_on+0xc>
     be6:	90 91 e6 25 	lds	r25, 0x25E6
     bea:	89 2b       	or	r24, r25
     bec:	80 93 e6 25 	sts	0x25E6, r24
	//Channel enabled
	fp_led_enable(which);
     bf0:	8c 2f       	mov	r24, r28
     bf2:	0e 94 5e 09 	call	0x12bc	; 0x12bc <fp_led_enable>
	if (STATE_power_output == ENABLE) {pwr_main_on(which); pwr_adj_on(which);}
     bf6:	80 91 ed 25 	lds	r24, 0x25ED
     bfa:	8a 32       	cpi	r24, 0x2A	; 42
     bfc:	31 f4       	brne	.+12     	; 0xc0a <brain_power_on+0x38>
     bfe:	8c 2f       	mov	r24, r28
     c00:	0e 94 ee 14 	call	0x29dc	; 0x29dc <pwr_main_on>
     c04:	8c 2f       	mov	r24, r28
     c06:	0e 94 37 13 	call	0x266e	; 0x266e <pwr_adj_on>
	if (STATE_power_output == DISABLE) {}	
	//Update LCD
	brain_menu_update();
     c0a:	0e 94 a6 04 	call	0x94c	; 0x94c <brain_menu_update>
}
     c0e:	cf 91       	pop	r28
     c10:	08 95       	ret

00000c12 <brain_power_off>:
		else {
			brain_power_off(which);
		}	
}

void brain_power_off(uint8_t which){
     c12:	cf 93       	push	r28
     c14:	c8 2f       	mov	r28, r24
	//Update state
	STATE_power_channels &= ~_BV(which);
     c16:	81 e0       	ldi	r24, 0x01	; 1
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	0c 2e       	mov	r0, r28
     c1c:	02 c0       	rjmp	.+4      	; 0xc22 <brain_power_off+0x10>
     c1e:	88 0f       	add	r24, r24
     c20:	99 1f       	adc	r25, r25
     c22:	0a 94       	dec	r0
     c24:	e2 f7       	brpl	.-8      	; 0xc1e <brain_power_off+0xc>
     c26:	80 95       	com	r24
     c28:	90 91 e6 25 	lds	r25, 0x25E6
     c2c:	89 23       	and	r24, r25
     c2e:	80 93 e6 25 	sts	0x25E6, r24
	//Channel disabled
	pwr_main_off(which);
     c32:	8c 2f       	mov	r24, r28
     c34:	0e 94 24 15 	call	0x2a48	; 0x2a48 <pwr_main_off>
	pwr_adj_off(which);
     c38:	8c 2f       	mov	r24, r28
     c3a:	0e 94 67 13 	call	0x26ce	; 0x26ce <pwr_adj_off>
	fp_led_disable(which);
     c3e:	8c 2f       	mov	r24, r28
     c40:	0e 94 8a 09 	call	0x1314	; 0x1314 <fp_led_disable>
	//Update LCD
	brain_menu_update();
     c44:	0e 94 a6 04 	call	0x94c	; 0x94c <brain_menu_update>
}
     c48:	cf 91       	pop	r28
     c4a:	08 95       	ret

00000c4c <brain_power>:
//Toggle power state and effect the new behavior
//Toggle adjustable and fixed channels together
void brain_power(uint8_t which){
	//Detect and then do the opposite (e.g. toggle state)
	//Channel disabled
		if ((STATE_power_channels & _BV(which))==0){		
     c4c:	20 91 e6 25 	lds	r18, 0x25E6
     c50:	30 e0       	ldi	r19, 0x00	; 0
     c52:	08 2e       	mov	r0, r24
     c54:	02 c0       	rjmp	.+4      	; 0xc5a <brain_power+0xe>
     c56:	35 95       	asr	r19
     c58:	27 95       	ror	r18
     c5a:	0a 94       	dec	r0
     c5c:	e2 f7       	brpl	.-8      	; 0xc56 <brain_power+0xa>
     c5e:	20 fd       	sbrc	r18, 0
     c60:	03 c0       	rjmp	.+6      	; 0xc68 <brain_power+0x1c>
			brain_power_on(which);
     c62:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <brain_power_on>
     c66:	08 95       	ret
		}	
	//Channel enabled
		else {
			brain_power_off(which);
     c68:	0e 94 09 06 	call	0xc12	; 0xc12 <brain_power_off>
     c6c:	08 95       	ret

00000c6e <service_brain>:

//#############################################################
//## SERVICE ROUTINE
//#############################################################

void service_brain(){
     c6e:	cf 93       	push	r28
     c70:	df 93       	push	r29
     c72:	cd b7       	in	r28, 0x3d	; 61
     c74:	de b7       	in	r29, 0x3e	; 62
     c76:	2c 97       	sbiw	r28, 0x0c	; 12
     c78:	cd bf       	out	0x3d, r28	; 61
     c7a:	de bf       	out	0x3e, r29	; 62
	static uint16_t menu_update_counter = 0;
	char meter_value[12];
	//Decide when to update Power output measurements
	menu_update_counter++;
     c7c:	80 91 79 22 	lds	r24, 0x2279
     c80:	90 91 7a 22 	lds	r25, 0x227A
     c84:	01 96       	adiw	r24, 0x01	; 1
     c86:	80 93 79 22 	sts	0x2279, r24
     c8a:	90 93 7a 22 	sts	0x227A, r25
	if (menu_update_counter >= 500){
     c8e:	21 e0       	ldi	r18, 0x01	; 1
     c90:	84 3f       	cpi	r24, 0xF4	; 244
     c92:	92 07       	cpc	r25, r18
     c94:	08 f4       	brcc	.+2      	; 0xc98 <service_brain+0x2a>
     c96:	c8 c2       	rjmp	.+1424   	; 0x1228 <service_brain+0x5ba>
		menu_update_counter = 0;
     c98:	10 92 79 22 	sts	0x2279, r1
     c9c:	10 92 7a 22 	sts	0x227A, r1
		switch(STATE_menu){
     ca0:	80 91 e7 25 	lds	r24, 0x25E7
     ca4:	84 32       	cpi	r24, 0x24	; 36
     ca6:	09 f4       	brne	.+2      	; 0xcaa <service_brain+0x3c>
     ca8:	fb c0       	rjmp	.+502    	; 0xea0 <service_brain+0x232>
     caa:	85 32       	cpi	r24, 0x25	; 37
     cac:	50 f4       	brcc	.+20     	; 0xcc2 <service_brain+0x54>
     cae:	81 32       	cpi	r24, 0x21	; 33
     cb0:	09 f4       	brne	.+2      	; 0xcb4 <service_brain+0x46>
     cb2:	67 c1       	rjmp	.+718    	; 0xf82 <service_brain+0x314>
     cb4:	83 32       	cpi	r24, 0x23	; 35
     cb6:	09 f4       	brne	.+2      	; 0xcba <service_brain+0x4c>
     cb8:	82 c0       	rjmp	.+260    	; 0xdbe <service_brain+0x150>
     cba:	80 32       	cpi	r24, 0x20	; 32
     cbc:	09 f0       	breq	.+2      	; 0xcc0 <service_brain+0x52>
     cbe:	b4 c2       	rjmp	.+1384   	; 0x1228 <service_brain+0x5ba>
     cc0:	0d c0       	rjmp	.+26     	; 0xcdc <service_brain+0x6e>
     cc2:	86 32       	cpi	r24, 0x26	; 38
     cc4:	09 f4       	brne	.+2      	; 0xcc8 <service_brain+0x5a>
     cc6:	04 c2       	rjmp	.+1032   	; 0x10d0 <service_brain+0x462>
     cc8:	86 32       	cpi	r24, 0x26	; 38
     cca:	08 f4       	brcc	.+2      	; 0xcce <service_brain+0x60>
     ccc:	c3 c1       	rjmp	.+902    	; 0x1054 <service_brain+0x3e6>
     cce:	87 32       	cpi	r24, 0x27	; 39
     cd0:	09 f4       	brne	.+2      	; 0xcd4 <service_brain+0x66>
     cd2:	38 c2       	rjmp	.+1136   	; 0x1144 <service_brain+0x4d6>
     cd4:	88 32       	cpi	r24, 0x28	; 40
     cd6:	09 f0       	breq	.+2      	; 0xcda <service_brain+0x6c>
     cd8:	a7 c2       	rjmp	.+1358   	; 0x1228 <service_brain+0x5ba>
     cda:	6e c2       	rjmp	.+1244   	; 0x11b8 <service_brain+0x54a>
			case MENU_OUTPUT:
				adc_data(0, VOLTAGE_POS, meter_value); //A V+
     cdc:	80 e0       	ldi	r24, 0x00	; 0
     cde:	67 e6       	ldi	r22, 0x67	; 103
     ce0:	ae 01       	movw	r20, r28
     ce2:	4f 5f       	subi	r20, 0xFF	; 255
     ce4:	5f 4f       	sbci	r21, 0xFF	; 255
     ce6:	0e 94 cf 01 	call	0x39e	; 0x39e <adc_data>
				lcd_update("75 1 ", meter_value);
     cea:	8c ec       	ldi	r24, 0xCC	; 204
     cec:	90 e2       	ldi	r25, 0x20	; 32
     cee:	be 01       	movw	r22, r28
     cf0:	6f 5f       	subi	r22, 0xFF	; 255
     cf2:	7f 4f       	sbci	r23, 0xFF	; 255
     cf4:	0e 94 1a 0c 	call	0x1834	; 0x1834 <lcd_update>
				adc_data(1, CURRENT_HI_RES, meter_value); //A I+
     cf8:	81 e0       	ldi	r24, 0x01	; 1
     cfa:	6a e6       	ldi	r22, 0x6A	; 106
     cfc:	ae 01       	movw	r20, r28
     cfe:	4f 5f       	subi	r20, 0xFF	; 255
     d00:	5f 4f       	sbci	r21, 0xFF	; 255
     d02:	0e 94 cf 01 	call	0x39e	; 0x39e <adc_data>
				lcd_update("75 11 ", meter_value);
     d06:	82 ed       	ldi	r24, 0xD2	; 210
     d08:	90 e2       	ldi	r25, 0x20	; 32
     d0a:	be 01       	movw	r22, r28
     d0c:	6f 5f       	subi	r22, 0xFF	; 255
     d0e:	7f 4f       	sbci	r23, 0xFF	; 255
     d10:	0e 94 1a 0c 	call	0x1834	; 0x1834 <lcd_update>
				adc_data(4, VOLTAGE_POS, meter_value); //B V+
     d14:	84 e0       	ldi	r24, 0x04	; 4
     d16:	67 e6       	ldi	r22, 0x67	; 103
     d18:	ae 01       	movw	r20, r28
     d1a:	4f 5f       	subi	r20, 0xFF	; 255
     d1c:	5f 4f       	sbci	r21, 0xFF	; 255
     d1e:	0e 94 cf 01 	call	0x39e	; 0x39e <adc_data>
				lcd_update("75 2 ", meter_value);
     d22:	89 ed       	ldi	r24, 0xD9	; 217
     d24:	90 e2       	ldi	r25, 0x20	; 32
     d26:	be 01       	movw	r22, r28
     d28:	6f 5f       	subi	r22, 0xFF	; 255
     d2a:	7f 4f       	sbci	r23, 0xFF	; 255
     d2c:	0e 94 1a 0c 	call	0x1834	; 0x1834 <lcd_update>
				adc_data(5, CURRENT_HI_RES, meter_value); //B I+
     d30:	85 e0       	ldi	r24, 0x05	; 5
     d32:	6a e6       	ldi	r22, 0x6A	; 106
     d34:	ae 01       	movw	r20, r28
     d36:	4f 5f       	subi	r20, 0xFF	; 255
     d38:	5f 4f       	sbci	r21, 0xFF	; 255
     d3a:	0e 94 cf 01 	call	0x39e	; 0x39e <adc_data>
				lcd_update("75 21 ", meter_value);
     d3e:	8f ed       	ldi	r24, 0xDF	; 223
     d40:	90 e2       	ldi	r25, 0x20	; 32
     d42:	be 01       	movw	r22, r28
     d44:	6f 5f       	subi	r22, 0xFF	; 255
     d46:	7f 4f       	sbci	r23, 0xFF	; 255
     d48:	0e 94 1a 0c 	call	0x1834	; 0x1834 <lcd_update>
				adc_data(8, VOLTAGE_POS, meter_value); //C V+
     d4c:	88 e0       	ldi	r24, 0x08	; 8
     d4e:	67 e6       	ldi	r22, 0x67	; 103
     d50:	ae 01       	movw	r20, r28
     d52:	4f 5f       	subi	r20, 0xFF	; 255
     d54:	5f 4f       	sbci	r21, 0xFF	; 255
     d56:	0e 94 cf 01 	call	0x39e	; 0x39e <adc_data>
				lcd_update("75 3 ", meter_value);
     d5a:	86 ee       	ldi	r24, 0xE6	; 230
     d5c:	90 e2       	ldi	r25, 0x20	; 32
     d5e:	be 01       	movw	r22, r28
     d60:	6f 5f       	subi	r22, 0xFF	; 255
     d62:	7f 4f       	sbci	r23, 0xFF	; 255
     d64:	0e 94 1a 0c 	call	0x1834	; 0x1834 <lcd_update>
				adc_data(9, CURRENT_HI_RES, meter_value); //C I+
     d68:	89 e0       	ldi	r24, 0x09	; 9
     d6a:	6a e6       	ldi	r22, 0x6A	; 106
     d6c:	ae 01       	movw	r20, r28
     d6e:	4f 5f       	subi	r20, 0xFF	; 255
     d70:	5f 4f       	sbci	r21, 0xFF	; 255
     d72:	0e 94 cf 01 	call	0x39e	; 0x39e <adc_data>
				lcd_update("75 31 ", meter_value);
     d76:	8c ee       	ldi	r24, 0xEC	; 236
     d78:	90 e2       	ldi	r25, 0x20	; 32
     d7a:	be 01       	movw	r22, r28
     d7c:	6f 5f       	subi	r22, 0xFF	; 255
     d7e:	7f 4f       	sbci	r23, 0xFF	; 255
     d80:	0e 94 1a 0c 	call	0x1834	; 0x1834 <lcd_update>
				adc_data(12, VOLTAGE_POS, meter_value); //D V+
     d84:	8c e0       	ldi	r24, 0x0C	; 12
     d86:	67 e6       	ldi	r22, 0x67	; 103
     d88:	ae 01       	movw	r20, r28
     d8a:	4f 5f       	subi	r20, 0xFF	; 255
     d8c:	5f 4f       	sbci	r21, 0xFF	; 255
     d8e:	0e 94 cf 01 	call	0x39e	; 0x39e <adc_data>
				lcd_update("75 4 ", meter_value);
     d92:	83 ef       	ldi	r24, 0xF3	; 243
     d94:	90 e2       	ldi	r25, 0x20	; 32
     d96:	be 01       	movw	r22, r28
     d98:	6f 5f       	subi	r22, 0xFF	; 255
     d9a:	7f 4f       	sbci	r23, 0xFF	; 255
     d9c:	0e 94 1a 0c 	call	0x1834	; 0x1834 <lcd_update>
				adc_data(13, CURRENT_HI_RES, meter_value); //D I+
     da0:	8d e0       	ldi	r24, 0x0D	; 13
     da2:	6a e6       	ldi	r22, 0x6A	; 106
     da4:	ae 01       	movw	r20, r28
     da6:	4f 5f       	subi	r20, 0xFF	; 255
     da8:	5f 4f       	sbci	r21, 0xFF	; 255
     daa:	0e 94 cf 01 	call	0x39e	; 0x39e <adc_data>
				lcd_update("75 41 ", meter_value);
     dae:	89 ef       	ldi	r24, 0xF9	; 249
     db0:	90 e2       	ldi	r25, 0x20	; 32
     db2:	be 01       	movw	r22, r28
     db4:	6f 5f       	subi	r22, 0xFF	; 255
     db6:	7f 4f       	sbci	r23, 0xFF	; 255
     db8:	0e 94 1a 0c 	call	0x1834	; 0x1834 <lcd_update>
				break;
     dbc:	35 c2       	rjmp	.+1130   	; 0x1228 <service_brain+0x5ba>
			case MENU_DETAIL_AB:
				adc_data(0, VOLTAGE_POS, meter_value); //A V+
     dbe:	80 e0       	ldi	r24, 0x00	; 0
     dc0:	67 e6       	ldi	r22, 0x67	; 103
     dc2:	ae 01       	movw	r20, r28
     dc4:	4f 5f       	subi	r20, 0xFF	; 255
     dc6:	5f 4f       	sbci	r21, 0xFF	; 255
     dc8:	0e 94 cf 01 	call	0x39e	; 0x39e <adc_data>
				lcd_update("75 50 ", meter_value);
     dcc:	80 e0       	ldi	r24, 0x00	; 0
     dce:	91 e2       	ldi	r25, 0x21	; 33
     dd0:	be 01       	movw	r22, r28
     dd2:	6f 5f       	subi	r22, 0xFF	; 255
     dd4:	7f 4f       	sbci	r23, 0xFF	; 255
     dd6:	0e 94 1a 0c 	call	0x1834	; 0x1834 <lcd_update>
				adc_data(1, CURRENT_HI_RES, meter_value); //A I+
     dda:	81 e0       	ldi	r24, 0x01	; 1
     ddc:	6a e6       	ldi	r22, 0x6A	; 106
     dde:	ae 01       	movw	r20, r28
     de0:	4f 5f       	subi	r20, 0xFF	; 255
     de2:	5f 4f       	sbci	r21, 0xFF	; 255
     de4:	0e 94 cf 01 	call	0x39e	; 0x39e <adc_data>
				lcd_update("75 51 ", meter_value);
     de8:	87 e0       	ldi	r24, 0x07	; 7
     dea:	91 e2       	ldi	r25, 0x21	; 33
     dec:	be 01       	movw	r22, r28
     dee:	6f 5f       	subi	r22, 0xFF	; 255
     df0:	7f 4f       	sbci	r23, 0xFF	; 255
     df2:	0e 94 1a 0c 	call	0x1834	; 0x1834 <lcd_update>
				adc_data(2, VOLTAGE_NEG, meter_value); //A V-
     df6:	82 e0       	ldi	r24, 0x02	; 2
     df8:	68 e6       	ldi	r22, 0x68	; 104
     dfa:	ae 01       	movw	r20, r28
     dfc:	4f 5f       	subi	r20, 0xFF	; 255
     dfe:	5f 4f       	sbci	r21, 0xFF	; 255
     e00:	0e 94 cf 01 	call	0x39e	; 0x39e <adc_data>
				lcd_update("75 52 -", meter_value);
     e04:	8e e0       	ldi	r24, 0x0E	; 14
     e06:	91 e2       	ldi	r25, 0x21	; 33
     e08:	be 01       	movw	r22, r28
     e0a:	6f 5f       	subi	r22, 0xFF	; 255
     e0c:	7f 4f       	sbci	r23, 0xFF	; 255
     e0e:	0e 94 1a 0c 	call	0x1834	; 0x1834 <lcd_update>
				adc_data(3, CURRENT_HI_RES, meter_value); //A I-
     e12:	83 e0       	ldi	r24, 0x03	; 3
     e14:	6a e6       	ldi	r22, 0x6A	; 106
     e16:	ae 01       	movw	r20, r28
     e18:	4f 5f       	subi	r20, 0xFF	; 255
     e1a:	5f 4f       	sbci	r21, 0xFF	; 255
     e1c:	0e 94 cf 01 	call	0x39e	; 0x39e <adc_data>
				lcd_update("75 53 -", meter_value);
     e20:	86 e1       	ldi	r24, 0x16	; 22
     e22:	91 e2       	ldi	r25, 0x21	; 33
     e24:	be 01       	movw	r22, r28
     e26:	6f 5f       	subi	r22, 0xFF	; 255
     e28:	7f 4f       	sbci	r23, 0xFF	; 255
     e2a:	0e 94 1a 0c 	call	0x1834	; 0x1834 <lcd_update>
				adc_data(4, VOLTAGE_POS, meter_value); //B V+
     e2e:	84 e0       	ldi	r24, 0x04	; 4
     e30:	67 e6       	ldi	r22, 0x67	; 103
     e32:	ae 01       	movw	r20, r28
     e34:	4f 5f       	subi	r20, 0xFF	; 255
     e36:	5f 4f       	sbci	r21, 0xFF	; 255
     e38:	0e 94 cf 01 	call	0x39e	; 0x39e <adc_data>
				lcd_update("75 54 ", meter_value);
     e3c:	8e e1       	ldi	r24, 0x1E	; 30
     e3e:	91 e2       	ldi	r25, 0x21	; 33
     e40:	be 01       	movw	r22, r28
     e42:	6f 5f       	subi	r22, 0xFF	; 255
     e44:	7f 4f       	sbci	r23, 0xFF	; 255
     e46:	0e 94 1a 0c 	call	0x1834	; 0x1834 <lcd_update>
				adc_data(5, CURRENT_HI_RES, meter_value); //B I+
     e4a:	85 e0       	ldi	r24, 0x05	; 5
     e4c:	6a e6       	ldi	r22, 0x6A	; 106
     e4e:	ae 01       	movw	r20, r28
     e50:	4f 5f       	subi	r20, 0xFF	; 255
     e52:	5f 4f       	sbci	r21, 0xFF	; 255
     e54:	0e 94 cf 01 	call	0x39e	; 0x39e <adc_data>
				lcd_update("75 55 ", meter_value);
     e58:	85 e2       	ldi	r24, 0x25	; 37
     e5a:	91 e2       	ldi	r25, 0x21	; 33
     e5c:	be 01       	movw	r22, r28
     e5e:	6f 5f       	subi	r22, 0xFF	; 255
     e60:	7f 4f       	sbci	r23, 0xFF	; 255
     e62:	0e 94 1a 0c 	call	0x1834	; 0x1834 <lcd_update>
				adc_data(6, VOLTAGE_NEG, meter_value); //B V-
     e66:	86 e0       	ldi	r24, 0x06	; 6
     e68:	68 e6       	ldi	r22, 0x68	; 104
     e6a:	ae 01       	movw	r20, r28
     e6c:	4f 5f       	subi	r20, 0xFF	; 255
     e6e:	5f 4f       	sbci	r21, 0xFF	; 255
     e70:	0e 94 cf 01 	call	0x39e	; 0x39e <adc_data>
				lcd_update("75 56 -", meter_value);
     e74:	8c e2       	ldi	r24, 0x2C	; 44
     e76:	91 e2       	ldi	r25, 0x21	; 33
     e78:	be 01       	movw	r22, r28
     e7a:	6f 5f       	subi	r22, 0xFF	; 255
     e7c:	7f 4f       	sbci	r23, 0xFF	; 255
     e7e:	0e 94 1a 0c 	call	0x1834	; 0x1834 <lcd_update>
				adc_data(7, CURRENT_HI_RES, meter_value); //B I-
     e82:	87 e0       	ldi	r24, 0x07	; 7
     e84:	6a e6       	ldi	r22, 0x6A	; 106
     e86:	ae 01       	movw	r20, r28
     e88:	4f 5f       	subi	r20, 0xFF	; 255
     e8a:	5f 4f       	sbci	r21, 0xFF	; 255
     e8c:	0e 94 cf 01 	call	0x39e	; 0x39e <adc_data>
				lcd_update("75 57 -", meter_value);
     e90:	84 e3       	ldi	r24, 0x34	; 52
     e92:	91 e2       	ldi	r25, 0x21	; 33
     e94:	be 01       	movw	r22, r28
     e96:	6f 5f       	subi	r22, 0xFF	; 255
     e98:	7f 4f       	sbci	r23, 0xFF	; 255
     e9a:	0e 94 1a 0c 	call	0x1834	; 0x1834 <lcd_update>
				break;
     e9e:	c4 c1       	rjmp	.+904    	; 0x1228 <service_brain+0x5ba>
			case MENU_DETAIL_CD:
				adc_data(8, VOLTAGE_POS, meter_value); //C V+
     ea0:	88 e0       	ldi	r24, 0x08	; 8
     ea2:	67 e6       	ldi	r22, 0x67	; 103
     ea4:	ae 01       	movw	r20, r28
     ea6:	4f 5f       	subi	r20, 0xFF	; 255
     ea8:	5f 4f       	sbci	r21, 0xFF	; 255
     eaa:	0e 94 cf 01 	call	0x39e	; 0x39e <adc_data>
				lcd_update("75 50 ", meter_value);
     eae:	80 e0       	ldi	r24, 0x00	; 0
     eb0:	91 e2       	ldi	r25, 0x21	; 33
     eb2:	be 01       	movw	r22, r28
     eb4:	6f 5f       	subi	r22, 0xFF	; 255
     eb6:	7f 4f       	sbci	r23, 0xFF	; 255
     eb8:	0e 94 1a 0c 	call	0x1834	; 0x1834 <lcd_update>
				adc_data(9, CURRENT_HI_RES, meter_value); //C I+
     ebc:	89 e0       	ldi	r24, 0x09	; 9
     ebe:	6a e6       	ldi	r22, 0x6A	; 106
     ec0:	ae 01       	movw	r20, r28
     ec2:	4f 5f       	subi	r20, 0xFF	; 255
     ec4:	5f 4f       	sbci	r21, 0xFF	; 255
     ec6:	0e 94 cf 01 	call	0x39e	; 0x39e <adc_data>
				lcd_update("75 51 ", meter_value);
     eca:	87 e0       	ldi	r24, 0x07	; 7
     ecc:	91 e2       	ldi	r25, 0x21	; 33
     ece:	be 01       	movw	r22, r28
     ed0:	6f 5f       	subi	r22, 0xFF	; 255
     ed2:	7f 4f       	sbci	r23, 0xFF	; 255
     ed4:	0e 94 1a 0c 	call	0x1834	; 0x1834 <lcd_update>
				adc_data(10, VOLTAGE_NEG, meter_value); //C V-
     ed8:	8a e0       	ldi	r24, 0x0A	; 10
     eda:	68 e6       	ldi	r22, 0x68	; 104
     edc:	ae 01       	movw	r20, r28
     ede:	4f 5f       	subi	r20, 0xFF	; 255
     ee0:	5f 4f       	sbci	r21, 0xFF	; 255
     ee2:	0e 94 cf 01 	call	0x39e	; 0x39e <adc_data>
				lcd_update("75 52 -", meter_value);
     ee6:	8e e0       	ldi	r24, 0x0E	; 14
     ee8:	91 e2       	ldi	r25, 0x21	; 33
     eea:	be 01       	movw	r22, r28
     eec:	6f 5f       	subi	r22, 0xFF	; 255
     eee:	7f 4f       	sbci	r23, 0xFF	; 255
     ef0:	0e 94 1a 0c 	call	0x1834	; 0x1834 <lcd_update>
				adc_data(11, CURRENT_HI_RES, meter_value); //C I-
     ef4:	8b e0       	ldi	r24, 0x0B	; 11
     ef6:	6a e6       	ldi	r22, 0x6A	; 106
     ef8:	ae 01       	movw	r20, r28
     efa:	4f 5f       	subi	r20, 0xFF	; 255
     efc:	5f 4f       	sbci	r21, 0xFF	; 255
     efe:	0e 94 cf 01 	call	0x39e	; 0x39e <adc_data>
				lcd_update("75 53 -", meter_value);
     f02:	86 e1       	ldi	r24, 0x16	; 22
     f04:	91 e2       	ldi	r25, 0x21	; 33
     f06:	be 01       	movw	r22, r28
     f08:	6f 5f       	subi	r22, 0xFF	; 255
     f0a:	7f 4f       	sbci	r23, 0xFF	; 255
     f0c:	0e 94 1a 0c 	call	0x1834	; 0x1834 <lcd_update>
				adc_data(12, VOLTAGE_POS, meter_value); //D V+
     f10:	8c e0       	ldi	r24, 0x0C	; 12
     f12:	67 e6       	ldi	r22, 0x67	; 103
     f14:	ae 01       	movw	r20, r28
     f16:	4f 5f       	subi	r20, 0xFF	; 255
     f18:	5f 4f       	sbci	r21, 0xFF	; 255
     f1a:	0e 94 cf 01 	call	0x39e	; 0x39e <adc_data>
				lcd_update("75 54 ", meter_value);
     f1e:	8e e1       	ldi	r24, 0x1E	; 30
     f20:	91 e2       	ldi	r25, 0x21	; 33
     f22:	be 01       	movw	r22, r28
     f24:	6f 5f       	subi	r22, 0xFF	; 255
     f26:	7f 4f       	sbci	r23, 0xFF	; 255
     f28:	0e 94 1a 0c 	call	0x1834	; 0x1834 <lcd_update>
				adc_data(13, CURRENT_HI_RES, meter_value); //D I+
     f2c:	8d e0       	ldi	r24, 0x0D	; 13
     f2e:	6a e6       	ldi	r22, 0x6A	; 106
     f30:	ae 01       	movw	r20, r28
     f32:	4f 5f       	subi	r20, 0xFF	; 255
     f34:	5f 4f       	sbci	r21, 0xFF	; 255
     f36:	0e 94 cf 01 	call	0x39e	; 0x39e <adc_data>
				lcd_update("75 55 ", meter_value);
     f3a:	85 e2       	ldi	r24, 0x25	; 37
     f3c:	91 e2       	ldi	r25, 0x21	; 33
     f3e:	be 01       	movw	r22, r28
     f40:	6f 5f       	subi	r22, 0xFF	; 255
     f42:	7f 4f       	sbci	r23, 0xFF	; 255
     f44:	0e 94 1a 0c 	call	0x1834	; 0x1834 <lcd_update>
				adc_data(14, VOLTAGE_NEG, meter_value); //D V-
     f48:	8e e0       	ldi	r24, 0x0E	; 14
     f4a:	68 e6       	ldi	r22, 0x68	; 104
     f4c:	ae 01       	movw	r20, r28
     f4e:	4f 5f       	subi	r20, 0xFF	; 255
     f50:	5f 4f       	sbci	r21, 0xFF	; 255
     f52:	0e 94 cf 01 	call	0x39e	; 0x39e <adc_data>
				lcd_update("75 56 -", meter_value);
     f56:	8c e2       	ldi	r24, 0x2C	; 44
     f58:	91 e2       	ldi	r25, 0x21	; 33
     f5a:	be 01       	movw	r22, r28
     f5c:	6f 5f       	subi	r22, 0xFF	; 255
     f5e:	7f 4f       	sbci	r23, 0xFF	; 255
     f60:	0e 94 1a 0c 	call	0x1834	; 0x1834 <lcd_update>
				adc_data(15, CURRENT_HI_RES, meter_value); //D I-
     f64:	8f e0       	ldi	r24, 0x0F	; 15
     f66:	6a e6       	ldi	r22, 0x6A	; 106
     f68:	ae 01       	movw	r20, r28
     f6a:	4f 5f       	subi	r20, 0xFF	; 255
     f6c:	5f 4f       	sbci	r21, 0xFF	; 255
     f6e:	0e 94 cf 01 	call	0x39e	; 0x39e <adc_data>
				lcd_update("75 57 -", meter_value);
     f72:	84 e3       	ldi	r24, 0x34	; 52
     f74:	91 e2       	ldi	r25, 0x21	; 33
     f76:	be 01       	movw	r22, r28
     f78:	6f 5f       	subi	r22, 0xFF	; 255
     f7a:	7f 4f       	sbci	r23, 0xFF	; 255
     f7c:	0e 94 1a 0c 	call	0x1834	; 0x1834 <lcd_update>
				break;
     f80:	53 c1       	rjmp	.+678    	; 0x1228 <service_brain+0x5ba>
			case MENU_CONTROL:
				pwr_adj_data(0, meter_value);
     f82:	80 e0       	ldi	r24, 0x00	; 0
     f84:	be 01       	movw	r22, r28
     f86:	6f 5f       	subi	r22, 0xFF	; 255
     f88:	7f 4f       	sbci	r23, 0xFF	; 255
     f8a:	0e 94 1b 14 	call	0x2836	; 0x2836 <pwr_adj_data>
				lcd_update("75 1 ", meter_value);
     f8e:	8c ec       	ldi	r24, 0xCC	; 204
     f90:	90 e2       	ldi	r25, 0x20	; 32
     f92:	be 01       	movw	r22, r28
     f94:	6f 5f       	subi	r22, 0xFF	; 255
     f96:	7f 4f       	sbci	r23, 0xFF	; 255
     f98:	0e 94 1a 0c 	call	0x1834	; 0x1834 <lcd_update>
				pwr_adj_data(1, meter_value);
     f9c:	81 e0       	ldi	r24, 0x01	; 1
     f9e:	be 01       	movw	r22, r28
     fa0:	6f 5f       	subi	r22, 0xFF	; 255
     fa2:	7f 4f       	sbci	r23, 0xFF	; 255
     fa4:	0e 94 1b 14 	call	0x2836	; 0x2836 <pwr_adj_data>
				lcd_update("75 11 ", meter_value);
     fa8:	82 ed       	ldi	r24, 0xD2	; 210
     faa:	90 e2       	ldi	r25, 0x20	; 32
     fac:	be 01       	movw	r22, r28
     fae:	6f 5f       	subi	r22, 0xFF	; 255
     fb0:	7f 4f       	sbci	r23, 0xFF	; 255
     fb2:	0e 94 1a 0c 	call	0x1834	; 0x1834 <lcd_update>
				pwr_adj_data(2, meter_value);
     fb6:	82 e0       	ldi	r24, 0x02	; 2
     fb8:	be 01       	movw	r22, r28
     fba:	6f 5f       	subi	r22, 0xFF	; 255
     fbc:	7f 4f       	sbci	r23, 0xFF	; 255
     fbe:	0e 94 1b 14 	call	0x2836	; 0x2836 <pwr_adj_data>
				lcd_update("75 2 ", meter_value);
     fc2:	89 ed       	ldi	r24, 0xD9	; 217
     fc4:	90 e2       	ldi	r25, 0x20	; 32
     fc6:	be 01       	movw	r22, r28
     fc8:	6f 5f       	subi	r22, 0xFF	; 255
     fca:	7f 4f       	sbci	r23, 0xFF	; 255
     fcc:	0e 94 1a 0c 	call	0x1834	; 0x1834 <lcd_update>
				pwr_adj_data(3, meter_value);
     fd0:	83 e0       	ldi	r24, 0x03	; 3
     fd2:	be 01       	movw	r22, r28
     fd4:	6f 5f       	subi	r22, 0xFF	; 255
     fd6:	7f 4f       	sbci	r23, 0xFF	; 255
     fd8:	0e 94 1b 14 	call	0x2836	; 0x2836 <pwr_adj_data>
				lcd_update("75 21 ", meter_value);
     fdc:	8f ed       	ldi	r24, 0xDF	; 223
     fde:	90 e2       	ldi	r25, 0x20	; 32
     fe0:	be 01       	movw	r22, r28
     fe2:	6f 5f       	subi	r22, 0xFF	; 255
     fe4:	7f 4f       	sbci	r23, 0xFF	; 255
     fe6:	0e 94 1a 0c 	call	0x1834	; 0x1834 <lcd_update>
				pwr_adj_data(4, meter_value);
     fea:	84 e0       	ldi	r24, 0x04	; 4
     fec:	be 01       	movw	r22, r28
     fee:	6f 5f       	subi	r22, 0xFF	; 255
     ff0:	7f 4f       	sbci	r23, 0xFF	; 255
     ff2:	0e 94 1b 14 	call	0x2836	; 0x2836 <pwr_adj_data>
				lcd_update("75 3 ", meter_value);
     ff6:	86 ee       	ldi	r24, 0xE6	; 230
     ff8:	90 e2       	ldi	r25, 0x20	; 32
     ffa:	be 01       	movw	r22, r28
     ffc:	6f 5f       	subi	r22, 0xFF	; 255
     ffe:	7f 4f       	sbci	r23, 0xFF	; 255
    1000:	0e 94 1a 0c 	call	0x1834	; 0x1834 <lcd_update>
				pwr_adj_data(5, meter_value);
    1004:	85 e0       	ldi	r24, 0x05	; 5
    1006:	be 01       	movw	r22, r28
    1008:	6f 5f       	subi	r22, 0xFF	; 255
    100a:	7f 4f       	sbci	r23, 0xFF	; 255
    100c:	0e 94 1b 14 	call	0x2836	; 0x2836 <pwr_adj_data>
				lcd_update("75 31 ", meter_value);
    1010:	8c ee       	ldi	r24, 0xEC	; 236
    1012:	90 e2       	ldi	r25, 0x20	; 32
    1014:	be 01       	movw	r22, r28
    1016:	6f 5f       	subi	r22, 0xFF	; 255
    1018:	7f 4f       	sbci	r23, 0xFF	; 255
    101a:	0e 94 1a 0c 	call	0x1834	; 0x1834 <lcd_update>
				pwr_adj_data(6, meter_value);
    101e:	86 e0       	ldi	r24, 0x06	; 6
    1020:	be 01       	movw	r22, r28
    1022:	6f 5f       	subi	r22, 0xFF	; 255
    1024:	7f 4f       	sbci	r23, 0xFF	; 255
    1026:	0e 94 1b 14 	call	0x2836	; 0x2836 <pwr_adj_data>
				lcd_update("75 4 ", meter_value);
    102a:	83 ef       	ldi	r24, 0xF3	; 243
    102c:	90 e2       	ldi	r25, 0x20	; 32
    102e:	be 01       	movw	r22, r28
    1030:	6f 5f       	subi	r22, 0xFF	; 255
    1032:	7f 4f       	sbci	r23, 0xFF	; 255
    1034:	0e 94 1a 0c 	call	0x1834	; 0x1834 <lcd_update>
				pwr_adj_data(7, meter_value);
    1038:	87 e0       	ldi	r24, 0x07	; 7
    103a:	be 01       	movw	r22, r28
    103c:	6f 5f       	subi	r22, 0xFF	; 255
    103e:	7f 4f       	sbci	r23, 0xFF	; 255
    1040:	0e 94 1b 14 	call	0x2836	; 0x2836 <pwr_adj_data>
				lcd_update("75 41 ", meter_value);
    1044:	89 ef       	ldi	r24, 0xF9	; 249
    1046:	90 e2       	ldi	r25, 0x20	; 32
    1048:	be 01       	movw	r22, r28
    104a:	6f 5f       	subi	r22, 0xFF	; 255
    104c:	7f 4f       	sbci	r23, 0xFF	; 255
    104e:	0e 94 1a 0c 	call	0x1834	; 0x1834 <lcd_update>
				break;
    1052:	ea c0       	rjmp	.+468    	; 0x1228 <service_brain+0x5ba>
			case MENU_DIAL_A:
				if ((pwr_adj_channel_dirty & B8(00000011)) > 0){
    1054:	80 91 25 27 	lds	r24, 0x2725
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	83 70       	andi	r24, 0x03	; 3
    105c:	90 70       	andi	r25, 0x00	; 0
    105e:	18 16       	cp	r1, r24
    1060:	19 06       	cpc	r1, r25
    1062:	0c f0       	brlt	.+2      	; 0x1066 <service_brain+0x3f8>
    1064:	e1 c0       	rjmp	.+450    	; 0x1228 <service_brain+0x5ba>
					//Control Inputs
					pwr_adj_control(0, meter_value);
    1066:	80 e0       	ldi	r24, 0x00	; 0
    1068:	be 01       	movw	r22, r28
    106a:	6f 5f       	subi	r22, 0xFF	; 255
    106c:	7f 4f       	sbci	r23, 0xFF	; 255
    106e:	0e 94 58 14 	call	0x28b0	; 0x28b0 <pwr_adj_control>
					lcd_update("75 94 ", meter_value);
    1072:	8c e3       	ldi	r24, 0x3C	; 60
    1074:	91 e2       	ldi	r25, 0x21	; 33
    1076:	be 01       	movw	r22, r28
    1078:	6f 5f       	subi	r22, 0xFF	; 255
    107a:	7f 4f       	sbci	r23, 0xFF	; 255
    107c:	0e 94 1a 0c 	call	0x1834	; 0x1834 <lcd_update>
					pwr_adj_control(1, meter_value);
    1080:	81 e0       	ldi	r24, 0x01	; 1
    1082:	be 01       	movw	r22, r28
    1084:	6f 5f       	subi	r22, 0xFF	; 255
    1086:	7f 4f       	sbci	r23, 0xFF	; 255
    1088:	0e 94 58 14 	call	0x28b0	; 0x28b0 <pwr_adj_control>
					lcd_update("75 95 ", meter_value);
    108c:	83 e4       	ldi	r24, 0x43	; 67
    108e:	91 e2       	ldi	r25, 0x21	; 33
    1090:	be 01       	movw	r22, r28
    1092:	6f 5f       	subi	r22, 0xFF	; 255
    1094:	7f 4f       	sbci	r23, 0xFF	; 255
    1096:	0e 94 1a 0c 	call	0x1834	; 0x1834 <lcd_update>
					//Voltage Monitors
					pwr_adj_data(0, meter_value);
    109a:	80 e0       	ldi	r24, 0x00	; 0
    109c:	be 01       	movw	r22, r28
    109e:	6f 5f       	subi	r22, 0xFF	; 255
    10a0:	7f 4f       	sbci	r23, 0xFF	; 255
    10a2:	0e 94 1b 14 	call	0x2836	; 0x2836 <pwr_adj_data>
					lcd_update("75 92 ", meter_value);
    10a6:	8a e4       	ldi	r24, 0x4A	; 74
    10a8:	91 e2       	ldi	r25, 0x21	; 33
    10aa:	be 01       	movw	r22, r28
    10ac:	6f 5f       	subi	r22, 0xFF	; 255
    10ae:	7f 4f       	sbci	r23, 0xFF	; 255
    10b0:	0e 94 1a 0c 	call	0x1834	; 0x1834 <lcd_update>
					pwr_adj_data(1, meter_value);
    10b4:	81 e0       	ldi	r24, 0x01	; 1
    10b6:	be 01       	movw	r22, r28
    10b8:	6f 5f       	subi	r22, 0xFF	; 255
    10ba:	7f 4f       	sbci	r23, 0xFF	; 255
    10bc:	0e 94 1b 14 	call	0x2836	; 0x2836 <pwr_adj_data>
					lcd_update("75 93 ", meter_value);
    10c0:	81 e5       	ldi	r24, 0x51	; 81
    10c2:	91 e2       	ldi	r25, 0x21	; 33
    10c4:	be 01       	movw	r22, r28
    10c6:	6f 5f       	subi	r22, 0xFF	; 255
    10c8:	7f 4f       	sbci	r23, 0xFF	; 255
    10ca:	0e 94 1a 0c 	call	0x1834	; 0x1834 <lcd_update>
    10ce:	ac c0       	rjmp	.+344    	; 0x1228 <service_brain+0x5ba>
				}					
				break;
			case MENU_DIAL_B:
				if ((pwr_adj_channel_dirty & B8(00001100)) > 0){
    10d0:	80 91 25 27 	lds	r24, 0x2725
    10d4:	8c 70       	andi	r24, 0x0C	; 12
    10d6:	09 f4       	brne	.+2      	; 0x10da <service_brain+0x46c>
    10d8:	a7 c0       	rjmp	.+334    	; 0x1228 <service_brain+0x5ba>
					//Control Inputs
					pwr_adj_control(2, meter_value);
    10da:	82 e0       	ldi	r24, 0x02	; 2
    10dc:	be 01       	movw	r22, r28
    10de:	6f 5f       	subi	r22, 0xFF	; 255
    10e0:	7f 4f       	sbci	r23, 0xFF	; 255
    10e2:	0e 94 58 14 	call	0x28b0	; 0x28b0 <pwr_adj_control>
					lcd_update("75 94 ", meter_value);
    10e6:	8c e3       	ldi	r24, 0x3C	; 60
    10e8:	91 e2       	ldi	r25, 0x21	; 33
    10ea:	be 01       	movw	r22, r28
    10ec:	6f 5f       	subi	r22, 0xFF	; 255
    10ee:	7f 4f       	sbci	r23, 0xFF	; 255
    10f0:	0e 94 1a 0c 	call	0x1834	; 0x1834 <lcd_update>
					pwr_adj_control(3, meter_value);
    10f4:	83 e0       	ldi	r24, 0x03	; 3
    10f6:	be 01       	movw	r22, r28
    10f8:	6f 5f       	subi	r22, 0xFF	; 255
    10fa:	7f 4f       	sbci	r23, 0xFF	; 255
    10fc:	0e 94 58 14 	call	0x28b0	; 0x28b0 <pwr_adj_control>
					lcd_update("75 95 ", meter_value);
    1100:	83 e4       	ldi	r24, 0x43	; 67
    1102:	91 e2       	ldi	r25, 0x21	; 33
    1104:	be 01       	movw	r22, r28
    1106:	6f 5f       	subi	r22, 0xFF	; 255
    1108:	7f 4f       	sbci	r23, 0xFF	; 255
    110a:	0e 94 1a 0c 	call	0x1834	; 0x1834 <lcd_update>
					//Voltage Monitors
					pwr_adj_data(2, meter_value);
    110e:	82 e0       	ldi	r24, 0x02	; 2
    1110:	be 01       	movw	r22, r28
    1112:	6f 5f       	subi	r22, 0xFF	; 255
    1114:	7f 4f       	sbci	r23, 0xFF	; 255
    1116:	0e 94 1b 14 	call	0x2836	; 0x2836 <pwr_adj_data>
					lcd_update("75 92 ", meter_value);
    111a:	8a e4       	ldi	r24, 0x4A	; 74
    111c:	91 e2       	ldi	r25, 0x21	; 33
    111e:	be 01       	movw	r22, r28
    1120:	6f 5f       	subi	r22, 0xFF	; 255
    1122:	7f 4f       	sbci	r23, 0xFF	; 255
    1124:	0e 94 1a 0c 	call	0x1834	; 0x1834 <lcd_update>
					pwr_adj_data(3, meter_value);
    1128:	83 e0       	ldi	r24, 0x03	; 3
    112a:	be 01       	movw	r22, r28
    112c:	6f 5f       	subi	r22, 0xFF	; 255
    112e:	7f 4f       	sbci	r23, 0xFF	; 255
    1130:	0e 94 1b 14 	call	0x2836	; 0x2836 <pwr_adj_data>
					lcd_update("75 93 ", meter_value);
    1134:	81 e5       	ldi	r24, 0x51	; 81
    1136:	91 e2       	ldi	r25, 0x21	; 33
    1138:	be 01       	movw	r22, r28
    113a:	6f 5f       	subi	r22, 0xFF	; 255
    113c:	7f 4f       	sbci	r23, 0xFF	; 255
    113e:	0e 94 1a 0c 	call	0x1834	; 0x1834 <lcd_update>
    1142:	72 c0       	rjmp	.+228    	; 0x1228 <service_brain+0x5ba>
				}
				break;
			case MENU_DIAL_C:
				if ((pwr_adj_channel_dirty & B8(00110000)) > 0){
    1144:	80 91 25 27 	lds	r24, 0x2725
    1148:	80 73       	andi	r24, 0x30	; 48
    114a:	09 f4       	brne	.+2      	; 0x114e <service_brain+0x4e0>
    114c:	6d c0       	rjmp	.+218    	; 0x1228 <service_brain+0x5ba>
					//Control Inputs
					pwr_adj_control(4, meter_value);
    114e:	84 e0       	ldi	r24, 0x04	; 4
    1150:	be 01       	movw	r22, r28
    1152:	6f 5f       	subi	r22, 0xFF	; 255
    1154:	7f 4f       	sbci	r23, 0xFF	; 255
    1156:	0e 94 58 14 	call	0x28b0	; 0x28b0 <pwr_adj_control>
					lcd_update("75 94 ", meter_value);
    115a:	8c e3       	ldi	r24, 0x3C	; 60
    115c:	91 e2       	ldi	r25, 0x21	; 33
    115e:	be 01       	movw	r22, r28
    1160:	6f 5f       	subi	r22, 0xFF	; 255
    1162:	7f 4f       	sbci	r23, 0xFF	; 255
    1164:	0e 94 1a 0c 	call	0x1834	; 0x1834 <lcd_update>
					pwr_adj_control(5, meter_value);
    1168:	85 e0       	ldi	r24, 0x05	; 5
    116a:	be 01       	movw	r22, r28
    116c:	6f 5f       	subi	r22, 0xFF	; 255
    116e:	7f 4f       	sbci	r23, 0xFF	; 255
    1170:	0e 94 58 14 	call	0x28b0	; 0x28b0 <pwr_adj_control>
					lcd_update("75 95 ", meter_value);
    1174:	83 e4       	ldi	r24, 0x43	; 67
    1176:	91 e2       	ldi	r25, 0x21	; 33
    1178:	be 01       	movw	r22, r28
    117a:	6f 5f       	subi	r22, 0xFF	; 255
    117c:	7f 4f       	sbci	r23, 0xFF	; 255
    117e:	0e 94 1a 0c 	call	0x1834	; 0x1834 <lcd_update>
					//Voltage Monitors
					pwr_adj_data(4, meter_value);
    1182:	84 e0       	ldi	r24, 0x04	; 4
    1184:	be 01       	movw	r22, r28
    1186:	6f 5f       	subi	r22, 0xFF	; 255
    1188:	7f 4f       	sbci	r23, 0xFF	; 255
    118a:	0e 94 1b 14 	call	0x2836	; 0x2836 <pwr_adj_data>
					lcd_update("75 92 ", meter_value);
    118e:	8a e4       	ldi	r24, 0x4A	; 74
    1190:	91 e2       	ldi	r25, 0x21	; 33
    1192:	be 01       	movw	r22, r28
    1194:	6f 5f       	subi	r22, 0xFF	; 255
    1196:	7f 4f       	sbci	r23, 0xFF	; 255
    1198:	0e 94 1a 0c 	call	0x1834	; 0x1834 <lcd_update>
					pwr_adj_data(5, meter_value);
    119c:	85 e0       	ldi	r24, 0x05	; 5
    119e:	be 01       	movw	r22, r28
    11a0:	6f 5f       	subi	r22, 0xFF	; 255
    11a2:	7f 4f       	sbci	r23, 0xFF	; 255
    11a4:	0e 94 1b 14 	call	0x2836	; 0x2836 <pwr_adj_data>
					lcd_update("75 93 ", meter_value);
    11a8:	81 e5       	ldi	r24, 0x51	; 81
    11aa:	91 e2       	ldi	r25, 0x21	; 33
    11ac:	be 01       	movw	r22, r28
    11ae:	6f 5f       	subi	r22, 0xFF	; 255
    11b0:	7f 4f       	sbci	r23, 0xFF	; 255
    11b2:	0e 94 1a 0c 	call	0x1834	; 0x1834 <lcd_update>
    11b6:	38 c0       	rjmp	.+112    	; 0x1228 <service_brain+0x5ba>
				}
				break;
			case MENU_DIAL_D:
				if ((pwr_adj_channel_dirty & B8(11000000)) > 0){
    11b8:	80 91 25 27 	lds	r24, 0x2725
    11bc:	80 7c       	andi	r24, 0xC0	; 192
    11be:	a1 f1       	breq	.+104    	; 0x1228 <service_brain+0x5ba>
					//Control Inputs
					pwr_adj_control(6, meter_value);
    11c0:	86 e0       	ldi	r24, 0x06	; 6
    11c2:	be 01       	movw	r22, r28
    11c4:	6f 5f       	subi	r22, 0xFF	; 255
    11c6:	7f 4f       	sbci	r23, 0xFF	; 255
    11c8:	0e 94 58 14 	call	0x28b0	; 0x28b0 <pwr_adj_control>
					lcd_update("75 94 ", meter_value);
    11cc:	8c e3       	ldi	r24, 0x3C	; 60
    11ce:	91 e2       	ldi	r25, 0x21	; 33
    11d0:	be 01       	movw	r22, r28
    11d2:	6f 5f       	subi	r22, 0xFF	; 255
    11d4:	7f 4f       	sbci	r23, 0xFF	; 255
    11d6:	0e 94 1a 0c 	call	0x1834	; 0x1834 <lcd_update>
					pwr_adj_control(7, meter_value);
    11da:	87 e0       	ldi	r24, 0x07	; 7
    11dc:	be 01       	movw	r22, r28
    11de:	6f 5f       	subi	r22, 0xFF	; 255
    11e0:	7f 4f       	sbci	r23, 0xFF	; 255
    11e2:	0e 94 58 14 	call	0x28b0	; 0x28b0 <pwr_adj_control>
					lcd_update("75 95 ", meter_value);
    11e6:	83 e4       	ldi	r24, 0x43	; 67
    11e8:	91 e2       	ldi	r25, 0x21	; 33
    11ea:	be 01       	movw	r22, r28
    11ec:	6f 5f       	subi	r22, 0xFF	; 255
    11ee:	7f 4f       	sbci	r23, 0xFF	; 255
    11f0:	0e 94 1a 0c 	call	0x1834	; 0x1834 <lcd_update>
					//Voltage Monitors
					pwr_adj_data(6, meter_value);
    11f4:	86 e0       	ldi	r24, 0x06	; 6
    11f6:	be 01       	movw	r22, r28
    11f8:	6f 5f       	subi	r22, 0xFF	; 255
    11fa:	7f 4f       	sbci	r23, 0xFF	; 255
    11fc:	0e 94 1b 14 	call	0x2836	; 0x2836 <pwr_adj_data>
					lcd_update("75 92 ", meter_value);
    1200:	8a e4       	ldi	r24, 0x4A	; 74
    1202:	91 e2       	ldi	r25, 0x21	; 33
    1204:	be 01       	movw	r22, r28
    1206:	6f 5f       	subi	r22, 0xFF	; 255
    1208:	7f 4f       	sbci	r23, 0xFF	; 255
    120a:	0e 94 1a 0c 	call	0x1834	; 0x1834 <lcd_update>
					pwr_adj_data(7, meter_value);
    120e:	87 e0       	ldi	r24, 0x07	; 7
    1210:	be 01       	movw	r22, r28
    1212:	6f 5f       	subi	r22, 0xFF	; 255
    1214:	7f 4f       	sbci	r23, 0xFF	; 255
    1216:	0e 94 1b 14 	call	0x2836	; 0x2836 <pwr_adj_data>
					lcd_update("75 93 ", meter_value);
    121a:	81 e5       	ldi	r24, 0x51	; 81
    121c:	91 e2       	ldi	r25, 0x21	; 33
    121e:	be 01       	movw	r22, r28
    1220:	6f 5f       	subi	r22, 0xFF	; 255
    1222:	7f 4f       	sbci	r23, 0xFF	; 255
    1224:	0e 94 1a 0c 	call	0x1834	; 0x1834 <lcd_update>
				}
				break;
		}	
	}
}
    1228:	2c 96       	adiw	r28, 0x0c	; 12
    122a:	cd bf       	out	0x3d, r28	; 61
    122c:	de bf       	out	0x3e, r29	; 62
    122e:	df 91       	pop	r29
    1230:	cf 91       	pop	r28
    1232:	08 95       	ret

00001234 <eeprom_save>:
//#############################################################
//## API
//#############################################################

void eeprom_save(){
	eeprom_write_byte(&nv_STATE_power_channels, STATE_power_channels);
    1234:	80 e0       	ldi	r24, 0x00	; 0
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	60 91 e6 25 	lds	r22, 0x25E6
    123c:	0e 94 d2 32 	call	0x65a4	; 0x65a4 <__eewr_byte_x128a1>
	eeprom_write_block((void*)&pwr_adj_values, (void*)&nv_pwr_adj_values, PWR_ADJ_NUM_CHANNELS*2); //multiple size by 2 since uint16_t = 2 bytes
    1240:	86 e2       	ldi	r24, 0x26	; 38
    1242:	97 e2       	ldi	r25, 0x27	; 39
    1244:	61 e0       	ldi	r22, 0x01	; 1
    1246:	70 e0       	ldi	r23, 0x00	; 0
    1248:	40 e1       	ldi	r20, 0x10	; 16
    124a:	50 e0       	ldi	r21, 0x00	; 0
    124c:	0e 94 c8 32 	call	0x6590	; 0x6590 <__eewr_block_x128a1>
}
    1250:	08 95       	ret

00001252 <eeprom_restore>:

void eeprom_restore(){
	STATE_power_channels = eeprom_read_byte(&nv_STATE_power_channels);
    1252:	80 e0       	ldi	r24, 0x00	; 0
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	0e 94 b8 32 	call	0x6570	; 0x6570 <__eerd_byte_x128a1>
    125a:	80 93 e6 25 	sts	0x25E6, r24
	eeprom_read_block((void*)&pwr_adj_values, (void*)&nv_pwr_adj_values, PWR_ADJ_NUM_CHANNELS*2);
    125e:	86 e2       	ldi	r24, 0x26	; 38
    1260:	97 e2       	ldi	r25, 0x27	; 39
    1262:	61 e0       	ldi	r22, 0x01	; 1
    1264:	70 e0       	ldi	r23, 0x00	; 0
    1266:	40 e1       	ldi	r20, 0x10	; 16
    1268:	50 e0       	ldi	r21, 0x00	; 0
    126a:	0e 94 ac 32 	call	0x6558	; 0x6558 <__eerd_block_x128a1>
}
    126e:	08 95       	ret

00001270 <init_eeprom>:
//#############################################################
//## Initialization
//#############################################################

void init_eeprom(){
	eeprom_restore();
    1270:	0e 94 29 09 	call	0x1252	; 0x1252 <eeprom_restore>
}
    1274:	08 95       	ret

00001276 <eeprom_read>:
	eeprom_read_block((void*)&pwr_adj_values, (void*)&nv_pwr_adj_values, PWR_ADJ_NUM_CHANNELS*2);
}

//mostly for debugging
uint8_t eeprom_read(){
	return eeprom_read_byte(&nv_STATE_power_channels);
    1276:	80 e0       	ldi	r24, 0x00	; 0
    1278:	90 e0       	ldi	r25, 0x00	; 0
    127a:	0e 94 b8 32 	call	0x6570	; 0x6570 <__eerd_byte_x128a1>
}
    127e:	08 95       	ret

00001280 <service_eeprom>:
//#############################################################

//2ms Service Loop -- Call once every 2ms
void service_eeprom(){
	
}
    1280:	08 95       	ret

00001282 <init_fp>:
		PK6: Rotary Channel A
		PK7: Rotary Channel B
				
	*/
	//LED's
	PORTJ.PIN1CTRL = B8(01000000); //invert pin logic
    1282:	e0 e0       	ldi	r30, 0x00	; 0
    1284:	f7 e0       	ldi	r31, 0x07	; 7
    1286:	80 e4       	ldi	r24, 0x40	; 64
    1288:	81 8b       	std	Z+17, r24	; 0x11
	PORTJ.PIN2CTRL = B8(01000000); //invert pin logic
    128a:	82 8b       	std	Z+18, r24	; 0x12
	PORTJ.PIN3CTRL = B8(01000000); //invert pin logic
    128c:	83 8b       	std	Z+19, r24	; 0x13
	PORTJ.PIN4CTRL = B8(01000000); //invert pin logic
    128e:	84 8b       	std	Z+20, r24	; 0x14
	PORTJ.OUTCLR = B8(00011110); //pins to low (LED's off, remember: inverted!)	
    1290:	8e e1       	ldi	r24, 0x1E	; 30
    1292:	86 83       	std	Z+6, r24	; 0x06
	PORTJ.DIRSET = B8(00011110); //pins to output	
    1294:	81 83       	std	Z+1, r24	; 0x01
	
	fp_channel_mask = 0x00;
    1296:	10 92 13 27 	sts	0x2713, r1
	
	//Switches
	//	SciPSU FP switches have hardware pull-up and hardware debounce
	PORTK.DIRCLR = B8(00111111); //This is the default condition, but just to be safe
    129a:	8f e3       	ldi	r24, 0x3F	; 63
    129c:	e0 e2       	ldi	r30, 0x20	; 32
    129e:	f7 e0       	ldi	r31, 0x07	; 7
    12a0:	82 83       	std	Z+2, r24	; 0x02
	fp_rot_status = RELEASED; fp_master_status = RELEASED;
    12a2:	89 e2       	ldi	r24, 0x29	; 41
    12a4:	80 93 0d 27 	sts	0x270D, r24
    12a8:	80 93 0a 27 	sts	0x270A, r24
	
	//Button state (open switch = 1, ergo...)
	fp_button_time0 = 0xFF;
    12ac:	8f ef       	ldi	r24, 0xFF	; 255
    12ae:	80 93 22 27 	sts	0x2722, r24
	fp_button_time1 = 0xFF;
    12b2:	80 93 0f 27 	sts	0x270F, r24
	fp_button_time2 = 0xFF;
    12b6:	80 93 09 27 	sts	0x2709, r24
}
    12ba:	08 95       	ret

000012bc <fp_led_enable>:
//## LEDs
//#############################################################

// Uses generic defines for channel (see main.h)
void fp_led_enable(uint8_t which){
	switch(which){
    12bc:	82 30       	cpi	r24, 0x02	; 2
    12be:	b1 f0       	breq	.+44     	; 0x12ec <fp_led_enable+0x30>
    12c0:	83 30       	cpi	r24, 0x03	; 3
    12c2:	28 f4       	brcc	.+10     	; 0x12ce <fp_led_enable+0x12>
    12c4:	88 23       	and	r24, r24
    12c6:	41 f0       	breq	.+16     	; 0x12d8 <fp_led_enable+0x1c>
    12c8:	81 30       	cpi	r24, 0x01	; 1
    12ca:	19 f5       	brne	.+70     	; 0x1312 <fp_led_enable+0x56>
    12cc:	0a c0       	rjmp	.+20     	; 0x12e2 <fp_led_enable+0x26>
    12ce:	83 30       	cpi	r24, 0x03	; 3
    12d0:	91 f0       	breq	.+36     	; 0x12f6 <fp_led_enable+0x3a>
    12d2:	85 30       	cpi	r24, 0x05	; 5
    12d4:	f1 f4       	brne	.+60     	; 0x1312 <fp_led_enable+0x56>
    12d6:	14 c0       	rjmp	.+40     	; 0x1300 <fp_led_enable+0x44>
		case CHANNEL_A:
			PORTJ.OUTSET = B8(00000010); //PJ1
    12d8:	82 e0       	ldi	r24, 0x02	; 2
    12da:	e0 e0       	ldi	r30, 0x00	; 0
    12dc:	f7 e0       	ldi	r31, 0x07	; 7
    12de:	85 83       	std	Z+5, r24	; 0x05
			break;
    12e0:	08 95       	ret
		case CHANNEL_B:
			PORTJ.OUTSET = B8(00000100); //PJ2
    12e2:	84 e0       	ldi	r24, 0x04	; 4
    12e4:	e0 e0       	ldi	r30, 0x00	; 0
    12e6:	f7 e0       	ldi	r31, 0x07	; 7
    12e8:	85 83       	std	Z+5, r24	; 0x05
			break;
    12ea:	08 95       	ret
		case CHANNEL_C:
			PORTJ.OUTSET = B8(00001000); //PJ3
    12ec:	88 e0       	ldi	r24, 0x08	; 8
    12ee:	e0 e0       	ldi	r30, 0x00	; 0
    12f0:	f7 e0       	ldi	r31, 0x07	; 7
    12f2:	85 83       	std	Z+5, r24	; 0x05
			break;
    12f4:	08 95       	ret
		case CHANNEL_D:
			PORTJ.OUTSET = B8(00010000); //PJ4
    12f6:	80 e1       	ldi	r24, 0x10	; 16
    12f8:	e0 e0       	ldi	r30, 0x00	; 0
    12fa:	f7 e0       	ldi	r31, 0x07	; 7
    12fc:	85 83       	std	Z+5, r24	; 0x05
			break;			
    12fe:	08 95       	ret
		case CHANNEL_M:
			PORTJ.OUTSET = STATE_power_channels << 1; //left shift 1 to move [0-3] state to [1-4] pin locations
    1300:	80 91 e6 25 	lds	r24, 0x25E6
    1304:	88 0f       	add	r24, r24
    1306:	e0 e0       	ldi	r30, 0x00	; 0
    1308:	f7 e0       	ldi	r31, 0x07	; 7
    130a:	85 83       	std	Z+5, r24	; 0x05
			led_on(LED_3); //Master LED is dimmable so its over in the ui.h module
    130c:	82 e0       	ldi	r24, 0x02	; 2
    130e:	0e 94 e9 2f 	call	0x5fd2	; 0x5fd2 <led_on>
    1312:	08 95       	ret

00001314 <fp_led_disable>:
			break;
	}
}

void fp_led_disable(uint8_t which){
	switch(which){
    1314:	82 30       	cpi	r24, 0x02	; 2
    1316:	b1 f0       	breq	.+44     	; 0x1344 <fp_led_disable+0x30>
    1318:	83 30       	cpi	r24, 0x03	; 3
    131a:	28 f4       	brcc	.+10     	; 0x1326 <fp_led_disable+0x12>
    131c:	88 23       	and	r24, r24
    131e:	41 f0       	breq	.+16     	; 0x1330 <fp_led_disable+0x1c>
    1320:	81 30       	cpi	r24, 0x01	; 1
    1322:	09 f5       	brne	.+66     	; 0x1366 <fp_led_disable+0x52>
    1324:	0a c0       	rjmp	.+20     	; 0x133a <fp_led_disable+0x26>
    1326:	83 30       	cpi	r24, 0x03	; 3
    1328:	91 f0       	breq	.+36     	; 0x134e <fp_led_disable+0x3a>
    132a:	85 30       	cpi	r24, 0x05	; 5
    132c:	e1 f4       	brne	.+56     	; 0x1366 <fp_led_disable+0x52>
    132e:	14 c0       	rjmp	.+40     	; 0x1358 <fp_led_disable+0x44>
		case CHANNEL_A:
			PORTJ.OUTCLR = B8(00000010); //PJ1
    1330:	82 e0       	ldi	r24, 0x02	; 2
    1332:	e0 e0       	ldi	r30, 0x00	; 0
    1334:	f7 e0       	ldi	r31, 0x07	; 7
    1336:	86 83       	std	Z+6, r24	; 0x06
			break;
    1338:	08 95       	ret
		case CHANNEL_B:
			PORTJ.OUTCLR = B8(00000100); //PJ2
    133a:	84 e0       	ldi	r24, 0x04	; 4
    133c:	e0 e0       	ldi	r30, 0x00	; 0
    133e:	f7 e0       	ldi	r31, 0x07	; 7
    1340:	86 83       	std	Z+6, r24	; 0x06
			break;
    1342:	08 95       	ret
		case CHANNEL_C:
			PORTJ.OUTCLR = B8(00001000); //PJ3
    1344:	88 e0       	ldi	r24, 0x08	; 8
    1346:	e0 e0       	ldi	r30, 0x00	; 0
    1348:	f7 e0       	ldi	r31, 0x07	; 7
    134a:	86 83       	std	Z+6, r24	; 0x06
			break;
    134c:	08 95       	ret
		case CHANNEL_D:
			PORTJ.OUTCLR = B8(00010000); //PJ4
    134e:	80 e1       	ldi	r24, 0x10	; 16
    1350:	e0 e0       	ldi	r30, 0x00	; 0
    1352:	f7 e0       	ldi	r31, 0x07	; 7
    1354:	86 83       	std	Z+6, r24	; 0x06
			break;
    1356:	08 95       	ret
		case CHANNEL_M:
			fp_counter = 0; fp_counter2 = 0; fp_updown = 1;
    1358:	10 92 0e 27 	sts	0x270E, r1
    135c:	10 92 15 27 	sts	0x2715, r1
    1360:	81 e0       	ldi	r24, 0x01	; 1
    1362:	80 93 16 27 	sts	0x2716, r24
    1366:	08 95       	ret

00001368 <_fp_read_switches>:
//#############################################################

//t0 = most recent --> t2 = oldest values
void _fp_read_switches(){
	//rotate
	fp_button_time2 = fp_button_time1;
    1368:	80 91 0f 27 	lds	r24, 0x270F
    136c:	80 93 09 27 	sts	0x2709, r24
	fp_button_time1 = fp_button_time0;
    1370:	80 91 22 27 	lds	r24, 0x2722
    1374:	80 93 0f 27 	sts	0x270F, r24
	fp_button_time0 = PORTK.IN;
    1378:	e0 e2       	ldi	r30, 0x20	; 32
    137a:	f7 e0       	ldi	r31, 0x07	; 7
    137c:	80 85       	ldd	r24, Z+8	; 0x08
    137e:	80 93 22 27 	sts	0x2722, r24
}
    1382:	08 95       	ret

00001384 <_fp_switch_pressed>:

//Button was pressed
void _fp_switch_pressed(uint8_t which){
    1384:	cf 93       	push	r28
    1386:	c8 2f       	mov	r28, r24
	audio_beep(1, 10);
    1388:	81 e0       	ldi	r24, 0x01	; 1
    138a:	6a e0       	ldi	r22, 0x0A	; 10
    138c:	70 e0       	ldi	r23, 0x00	; 0
    138e:	0e 94 85 30 	call	0x610a	; 0x610a <audio_beep>
	brain_button_pressed();
    1392:	0e 94 b7 05 	call	0xb6e	; 0xb6e <brain_button_pressed>
	switch(which){
    1396:	c2 30       	cpi	r28, 0x02	; 2
    1398:	b1 f0       	breq	.+44     	; 0x13c6 <_fp_switch_pressed+0x42>
    139a:	c3 30       	cpi	r28, 0x03	; 3
    139c:	28 f4       	brcc	.+10     	; 0x13a8 <_fp_switch_pressed+0x24>
    139e:	cc 23       	and	r28, r28
    13a0:	51 f0       	breq	.+20     	; 0x13b6 <_fp_switch_pressed+0x32>
    13a2:	c1 30       	cpi	r28, 0x01	; 1
    13a4:	39 f5       	brne	.+78     	; 0x13f4 <_fp_switch_pressed+0x70>
    13a6:	0b c0       	rjmp	.+22     	; 0x13be <_fp_switch_pressed+0x3a>
    13a8:	c4 30       	cpi	r28, 0x04	; 4
    13aa:	a9 f0       	breq	.+42     	; 0x13d6 <_fp_switch_pressed+0x52>
    13ac:	c4 30       	cpi	r28, 0x04	; 4
    13ae:	78 f0       	brcs	.+30     	; 0x13ce <_fp_switch_pressed+0x4a>
    13b0:	c5 30       	cpi	r28, 0x05	; 5
    13b2:	01 f5       	brne	.+64     	; 0x13f4 <_fp_switch_pressed+0x70>
    13b4:	18 c0       	rjmp	.+48     	; 0x13e6 <_fp_switch_pressed+0x62>
		case FP_SWITCH_A:
			brain_power(CHANNEL_A);			
    13b6:	80 e0       	ldi	r24, 0x00	; 0
    13b8:	0e 94 26 06 	call	0xc4c	; 0xc4c <brain_power>
			break;
    13bc:	1b c0       	rjmp	.+54     	; 0x13f4 <_fp_switch_pressed+0x70>
		case FP_SWITCH_B:
			brain_power(CHANNEL_B);
    13be:	81 e0       	ldi	r24, 0x01	; 1
    13c0:	0e 94 26 06 	call	0xc4c	; 0xc4c <brain_power>
			break;
    13c4:	17 c0       	rjmp	.+46     	; 0x13f4 <_fp_switch_pressed+0x70>
		case FP_SWITCH_C:
			brain_power(CHANNEL_C);
    13c6:	82 e0       	ldi	r24, 0x02	; 2
    13c8:	0e 94 26 06 	call	0xc4c	; 0xc4c <brain_power>
			break;
    13cc:	13 c0       	rjmp	.+38     	; 0x13f4 <_fp_switch_pressed+0x70>
		case FP_SWITCH_D:
			brain_power(CHANNEL_D);
    13ce:	83 e0       	ldi	r24, 0x03	; 3
    13d0:	0e 94 26 06 	call	0xc4c	; 0xc4c <brain_power>
			break;
    13d4:	0f c0       	rjmp	.+30     	; 0x13f4 <_fp_switch_pressed+0x70>
		case FP_SWITCH_M:
			fp_press_counter = 0;
    13d6:	10 92 20 27 	sts	0x2720, r1
    13da:	10 92 21 27 	sts	0x2721, r1
			fp_master_status = PRESSED;
    13de:	8a e2       	ldi	r24, 0x2A	; 42
    13e0:	80 93 0a 27 	sts	0x270A, r24
			break;
    13e4:	07 c0       	rjmp	.+14     	; 0x13f4 <_fp_switch_pressed+0x70>
		case FP_SWITCH_R:
			fp_press_counter = 0;
    13e6:	10 92 20 27 	sts	0x2720, r1
    13ea:	10 92 21 27 	sts	0x2721, r1
			fp_rot_status = PRESSED;
    13ee:	8a e2       	ldi	r24, 0x2A	; 42
    13f0:	80 93 0d 27 	sts	0x270D, r24
			break;		
	}
}
    13f4:	cf 91       	pop	r28
    13f6:	08 95       	ret

000013f8 <_fp_switch_released>:

//Button was released
void _fp_switch_released(uint8_t which){
	switch(which){
    13f8:	84 30       	cpi	r24, 0x04	; 4
    13fa:	19 f0       	breq	.+6      	; 0x1402 <_fp_switch_released+0xa>
    13fc:	85 30       	cpi	r24, 0x05	; 5
    13fe:	59 f5       	brne	.+86     	; 0x1456 <_fp_switch_released+0x5e>
    1400:	15 c0       	rjmp	.+42     	; 0x142c <_fp_switch_released+0x34>
		case FP_SWITCH_C:
			break;
		case FP_SWITCH_D:
			break;
		case FP_SWITCH_M:
			fp_master_status = RELEASED;
    1402:	89 e2       	ldi	r24, 0x29	; 41
    1404:	80 93 0a 27 	sts	0x270A, r24
			if (fp_press_counter > EEPROM_HOLD_TO_SAVE_TIME){
    1408:	80 91 20 27 	lds	r24, 0x2720
    140c:	90 91 21 27 	lds	r25, 0x2721
    1410:	23 e0       	ldi	r18, 0x03	; 3
    1412:	89 3e       	cpi	r24, 0xE9	; 233
    1414:	92 07       	cpc	r25, r18
    1416:	38 f0       	brcs	.+14     	; 0x1426 <_fp_switch_released+0x2e>
				//Reboot LCD logic
				lcd_reboot();
    1418:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <lcd_reboot>
				fp_press_counter = 0;
    141c:	10 92 20 27 	sts	0x2720, r1
    1420:	10 92 21 27 	sts	0x2721, r1
    1424:	08 95       	ret
			}
			else {
				brain_power_master();
    1426:	0e 94 bf 05 	call	0xb7e	; 0xb7e <brain_power_master>
    142a:	08 95       	ret
			}
			break;
		case FP_SWITCH_R:
			fp_rot_status = RELEASED;
    142c:	89 e2       	ldi	r24, 0x29	; 41
    142e:	80 93 0d 27 	sts	0x270D, r24
			//Write to disk logic (save to non-volatile memory)
			if	((STATE_menu == MENU_CONTROL) && (fp_press_counter>EEPROM_HOLD_TO_SAVE_TIME)){
    1432:	80 91 e7 25 	lds	r24, 0x25E7
    1436:	81 32       	cpi	r24, 0x21	; 33
    1438:	71 f4       	brne	.+28     	; 0x1456 <_fp_switch_released+0x5e>
    143a:	80 91 20 27 	lds	r24, 0x2720
    143e:	90 91 21 27 	lds	r25, 0x2721
    1442:	23 e0       	ldi	r18, 0x03	; 3
    1444:	89 3e       	cpi	r24, 0xE9	; 233
    1446:	92 07       	cpc	r25, r18
    1448:	30 f0       	brcs	.+12     	; 0x1456 <_fp_switch_released+0x5e>
				eeprom_save(); 
    144a:	0e 94 1a 09 	call	0x1234	; 0x1234 <eeprom_save>
				fp_press_counter = 0;
    144e:	10 92 20 27 	sts	0x2720, r1
    1452:	10 92 21 27 	sts	0x2721, r1
    1456:	08 95       	ret

00001458 <_process_switch>:
			break;
	}
}

void _process_switch(uint8_t current, uint8_t change, uint8_t which){
	if ((current & _BV(which)) != 0) {return;} //unstable -- wait for things to settle
    1458:	28 2f       	mov	r18, r24
    145a:	30 e0       	ldi	r19, 0x00	; 0
    145c:	04 2e       	mov	r0, r20
    145e:	02 c0       	rjmp	.+4      	; 0x1464 <_process_switch+0xc>
    1460:	35 95       	asr	r19
    1462:	27 95       	ror	r18
    1464:	0a 94       	dec	r0
    1466:	e2 f7       	brpl	.-8      	; 0x1460 <_process_switch+0x8>
    1468:	20 fd       	sbrc	r18, 0
    146a:	1b c0       	rjmp	.+54     	; 0x14a2 <_process_switch+0x4a>
	if ((change & _BV(which)) == 0){return;} //no change
    146c:	70 e0       	ldi	r23, 0x00	; 0
    146e:	04 2e       	mov	r0, r20
    1470:	02 c0       	rjmp	.+4      	; 0x1476 <_process_switch+0x1e>
    1472:	75 95       	asr	r23
    1474:	67 95       	ror	r22
    1476:	0a 94       	dec	r0
    1478:	e2 f7       	brpl	.-8      	; 0x1472 <_process_switch+0x1a>
    147a:	60 ff       	sbrs	r22, 0
    147c:	12 c0       	rjmp	.+36     	; 0x14a2 <_process_switch+0x4a>
	//Pin has been changed!
	if ((fp_button_time0 & _BV(which)) == 0){_fp_switch_pressed(which);}
    147e:	20 91 22 27 	lds	r18, 0x2722
    1482:	30 e0       	ldi	r19, 0x00	; 0
    1484:	04 2e       	mov	r0, r20
    1486:	02 c0       	rjmp	.+4      	; 0x148c <_process_switch+0x34>
    1488:	35 95       	asr	r19
    148a:	27 95       	ror	r18
    148c:	0a 94       	dec	r0
    148e:	e2 f7       	brpl	.-8      	; 0x1488 <_process_switch+0x30>
    1490:	20 fd       	sbrc	r18, 0
    1492:	04 c0       	rjmp	.+8      	; 0x149c <_process_switch+0x44>
    1494:	84 2f       	mov	r24, r20
    1496:	0e 94 c2 09 	call	0x1384	; 0x1384 <_fp_switch_pressed>
    149a:	08 95       	ret
	else {_fp_switch_released(which);}
    149c:	84 2f       	mov	r24, r20
    149e:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <_fp_switch_released>
    14a2:	08 95       	ret

000014a4 <_fp_process_switches>:
	
}

void _fp_process_switches(){
    14a4:	cf 93       	push	r28
    14a6:	df 93       	push	r29
	//Debounce Logic
	uint8_t current = fp_button_time0 ^ fp_button_time1;
    14a8:	80 91 0f 27 	lds	r24, 0x270F
    14ac:	c0 91 22 27 	lds	r28, 0x2722
    14b0:	c8 27       	eor	r28, r24
	uint8_t change = fp_button_time1 ^ fp_button_time2;
    14b2:	d0 91 09 27 	lds	r29, 0x2709
    14b6:	d8 27       	eor	r29, r24
	
	//EEPROM Logic
	if (fp_rot_status == PRESSED){
    14b8:	80 91 0d 27 	lds	r24, 0x270D
    14bc:	8a 32       	cpi	r24, 0x2A	; 42
    14be:	b1 f4       	brne	.+44     	; 0x14ec <_fp_process_switches+0x48>
		fp_press_counter++;
    14c0:	80 91 20 27 	lds	r24, 0x2720
    14c4:	90 91 21 27 	lds	r25, 0x2721
    14c8:	01 96       	adiw	r24, 0x01	; 1
    14ca:	80 93 20 27 	sts	0x2720, r24
    14ce:	90 93 21 27 	sts	0x2721, r25
		if ((STATE_menu == MENU_CONTROL) && (fp_press_counter > EEPROM_HOLD_TO_SAVE_TIME)){
    14d2:	20 91 e7 25 	lds	r18, 0x25E7
    14d6:	21 32       	cpi	r18, 0x21	; 33
    14d8:	49 f4       	brne	.+18     	; 0x14ec <_fp_process_switches+0x48>
    14da:	23 e0       	ldi	r18, 0x03	; 3
    14dc:	89 3e       	cpi	r24, 0xE9	; 233
    14de:	92 07       	cpc	r25, r18
    14e0:	28 f0       	brcs	.+10     	; 0x14ec <_fp_process_switches+0x48>
			audio_beep(BRAIN_BEEPS, BRAIN_VOLUME);
    14e2:	81 e0       	ldi	r24, 0x01	; 1
    14e4:	64 e6       	ldi	r22, 0x64	; 100
    14e6:	70 e0       	ldi	r23, 0x00	; 0
    14e8:	0e 94 85 30 	call	0x610a	; 0x610a <audio_beep>
		}
	}
	
	if (fp_master_status == PRESSED){
    14ec:	80 91 0a 27 	lds	r24, 0x270A
    14f0:	8a 32       	cpi	r24, 0x2A	; 42
    14f2:	91 f4       	brne	.+36     	; 0x1518 <_fp_process_switches+0x74>
		fp_press_counter++;
    14f4:	80 91 20 27 	lds	r24, 0x2720
    14f8:	90 91 21 27 	lds	r25, 0x2721
    14fc:	01 96       	adiw	r24, 0x01	; 1
    14fe:	80 93 20 27 	sts	0x2720, r24
    1502:	90 93 21 27 	sts	0x2721, r25
		if (fp_press_counter == EEPROM_HOLD_TO_SAVE_TIME){
    1506:	23 e0       	ldi	r18, 0x03	; 3
    1508:	88 3e       	cpi	r24, 0xE8	; 232
    150a:	92 07       	cpc	r25, r18
    150c:	29 f4       	brne	.+10     	; 0x1518 <_fp_process_switches+0x74>
			audio_beep(BRAIN_BEEPS, BRAIN_VOLUME);
    150e:	81 e0       	ldi	r24, 0x01	; 1
    1510:	64 e6       	ldi	r22, 0x64	; 100
    1512:	70 e0       	ldi	r23, 0x00	; 0
    1514:	0e 94 85 30 	call	0x610a	; 0x610a <audio_beep>
		}
	}
		
	//Switch Logic
	_process_switch(current, change, FP_SWITCH_A);
    1518:	8c 2f       	mov	r24, r28
    151a:	6d 2f       	mov	r22, r29
    151c:	40 e0       	ldi	r20, 0x00	; 0
    151e:	0e 94 2c 0a 	call	0x1458	; 0x1458 <_process_switch>
	_process_switch(current, change, FP_SWITCH_B);
    1522:	8c 2f       	mov	r24, r28
    1524:	6d 2f       	mov	r22, r29
    1526:	41 e0       	ldi	r20, 0x01	; 1
    1528:	0e 94 2c 0a 	call	0x1458	; 0x1458 <_process_switch>
	_process_switch(current, change, FP_SWITCH_C);
    152c:	8c 2f       	mov	r24, r28
    152e:	6d 2f       	mov	r22, r29
    1530:	42 e0       	ldi	r20, 0x02	; 2
    1532:	0e 94 2c 0a 	call	0x1458	; 0x1458 <_process_switch>
	_process_switch(current, change, FP_SWITCH_D);
    1536:	8c 2f       	mov	r24, r28
    1538:	6d 2f       	mov	r22, r29
    153a:	43 e0       	ldi	r20, 0x03	; 3
    153c:	0e 94 2c 0a 	call	0x1458	; 0x1458 <_process_switch>
	_process_switch(current, change, FP_SWITCH_M);
    1540:	8c 2f       	mov	r24, r28
    1542:	6d 2f       	mov	r22, r29
    1544:	44 e0       	ldi	r20, 0x04	; 4
    1546:	0e 94 2c 0a 	call	0x1458	; 0x1458 <_process_switch>
	_process_switch(current, change, FP_SWITCH_R);
    154a:	8c 2f       	mov	r24, r28
    154c:	6d 2f       	mov	r22, r29
    154e:	45 e0       	ldi	r20, 0x05	; 5
    1550:	0e 94 2c 0a 	call	0x1458	; 0x1458 <_process_switch>
}
    1554:	df 91       	pop	r29
    1556:	cf 91       	pop	r28
    1558:	08 95       	ret

0000155a <_fp_process_rotary>:

void _fp_process_rotary(){
	static int16_t blanking_counter = -1;
	
	//Software blank rotary dial in menu navigation mode
	if ((STATE_menu == MENU_STARTUP) || (STATE_menu == MENU_OUTPUT) || (STATE_menu == MENU_CONTROL) || (STATE_menu == MENU_CONSOLE)) {
    155a:	80 91 e7 25 	lds	r24, 0x25E7
    155e:	8f 51       	subi	r24, 0x1F	; 31
    1560:	84 30       	cpi	r24, 0x04	; 4
    1562:	a8 f5       	brcc	.+106    	; 0x15ce <_fp_process_rotary+0x74>
		if (blanking_counter >= 0){
    1564:	80 91 58 21 	lds	r24, 0x2158
    1568:	90 91 59 21 	lds	r25, 0x2159
    156c:	99 23       	and	r25, r25
    156e:	c4 f0       	brlt	.+48     	; 0x15a0 <_fp_process_rotary+0x46>
			blanking_counter++;
    1570:	01 96       	adiw	r24, 0x01	; 1
    1572:	80 93 58 21 	sts	0x2158, r24
    1576:	90 93 59 21 	sts	0x2159, r25
			quad_up(); quad_down(); //clear state changes during blanking period
    157a:	0e 94 36 16 	call	0x2c6c	; 0x2c6c <quad_up>
    157e:	0e 94 41 16 	call	0x2c82	; 0x2c82 <quad_down>
			if (blanking_counter > 500){blanking_counter = -1;}
    1582:	80 91 58 21 	lds	r24, 0x2158
    1586:	90 91 59 21 	lds	r25, 0x2159
    158a:	21 e0       	ldi	r18, 0x01	; 1
    158c:	85 3f       	cpi	r24, 0xF5	; 245
    158e:	92 07       	cpc	r25, r18
    1590:	64 f1       	brlt	.+88     	; 0x15ea <_fp_process_rotary+0x90>
    1592:	8f ef       	ldi	r24, 0xFF	; 255
    1594:	9f ef       	ldi	r25, 0xFF	; 255
    1596:	80 93 58 21 	sts	0x2158, r24
    159a:	90 93 59 21 	sts	0x2159, r25
    159e:	08 95       	ret
		}
		else {
			if (quad_up()) {blanking_counter = 0; brain_rotary_change(QUAD_UP);}
    15a0:	0e 94 36 16 	call	0x2c6c	; 0x2c6c <quad_up>
    15a4:	88 23       	and	r24, r24
    15a6:	39 f0       	breq	.+14     	; 0x15b6 <_fp_process_rotary+0x5c>
    15a8:	10 92 58 21 	sts	0x2158, r1
    15ac:	10 92 59 21 	sts	0x2159, r1
    15b0:	8d e2       	ldi	r24, 0x2D	; 45
    15b2:	0e 94 31 05 	call	0xa62	; 0xa62 <brain_rotary_change>
			if (quad_down()) {blanking_counter = 0; brain_rotary_change(QUAD_DOWN);}
    15b6:	0e 94 41 16 	call	0x2c82	; 0x2c82 <quad_down>
    15ba:	88 23       	and	r24, r24
    15bc:	b1 f0       	breq	.+44     	; 0x15ea <_fp_process_rotary+0x90>
    15be:	10 92 58 21 	sts	0x2158, r1
    15c2:	10 92 59 21 	sts	0x2159, r1
    15c6:	8e e2       	ldi	r24, 0x2E	; 46
    15c8:	0e 94 31 05 	call	0xa62	; 0xa62 <brain_rotary_change>
    15cc:	08 95       	ret
		}		
	}
	//Use full dial resolution in adjustment mode
	else {
		if (quad_up()) {brain_rotary_change(QUAD_UP);}
    15ce:	0e 94 36 16 	call	0x2c6c	; 0x2c6c <quad_up>
    15d2:	88 23       	and	r24, r24
    15d4:	19 f0       	breq	.+6      	; 0x15dc <_fp_process_rotary+0x82>
    15d6:	8d e2       	ldi	r24, 0x2D	; 45
    15d8:	0e 94 31 05 	call	0xa62	; 0xa62 <brain_rotary_change>
		if (quad_down()) {brain_rotary_change(QUAD_DOWN);}
    15dc:	0e 94 41 16 	call	0x2c82	; 0x2c82 <quad_down>
    15e0:	88 23       	and	r24, r24
    15e2:	19 f0       	breq	.+6      	; 0x15ea <_fp_process_rotary+0x90>
    15e4:	8e e2       	ldi	r24, 0x2E	; 46
    15e6:	0e 94 31 05 	call	0xa62	; 0xa62 <brain_rotary_change>
    15ea:	08 95       	ret

000015ec <service_fp>:
//## SERVICE ROUTINE
//#############################################################

void service_fp(){	
	
	uint8_t fp_channel_mask = STATE_power_channels << 1;
    15ec:	90 91 e6 25 	lds	r25, 0x25E6
	//LEDs
	if (STATE_power_output == DISABLE){
    15f0:	80 91 ed 25 	lds	r24, 0x25ED
    15f4:	89 32       	cpi	r24, 0x29	; 41
    15f6:	09 f0       	breq	.+2      	; 0x15fa <service_fp+0xe>
    15f8:	43 c0       	rjmp	.+134    	; 0x1680 <service_fp+0x94>
//## SERVICE ROUTINE
//#############################################################

void service_fp(){	
	
	uint8_t fp_channel_mask = STATE_power_channels << 1;
    15fa:	99 0f       	add	r25, r25
	//LEDs
	if (STATE_power_output == DISABLE){
				
		//Channel LED's			
		if (fp_counter == 0) {PORTJ.OUTSET = fp_channel_mask;} 
    15fc:	80 91 0e 27 	lds	r24, 0x270E
    1600:	88 23       	and	r24, r24
    1602:	39 f4       	brne	.+14     	; 0x1612 <service_fp+0x26>
    1604:	e0 e0       	ldi	r30, 0x00	; 0
    1606:	f7 e0       	ldi	r31, 0x07	; 7
    1608:	95 83       	std	Z+5, r25	; 0x05
		if (fp_counter == FP_ON_LENGTH) {PORTJ.OUTCLR = fp_channel_mask;}
		fp_counter++;
    160a:	8f 5f       	subi	r24, 0xFF	; 255
    160c:	80 93 0e 27 	sts	0x270E, r24
    1610:	10 c0       	rjmp	.+32     	; 0x1632 <service_fp+0x46>
	//LEDs
	if (STATE_power_output == DISABLE){
				
		//Channel LED's			
		if (fp_counter == 0) {PORTJ.OUTSET = fp_channel_mask;} 
		if (fp_counter == FP_ON_LENGTH) {PORTJ.OUTCLR = fp_channel_mask;}
    1612:	81 30       	cpi	r24, 0x01	; 1
    1614:	39 f4       	brne	.+14     	; 0x1624 <service_fp+0x38>
    1616:	e0 e0       	ldi	r30, 0x00	; 0
    1618:	f7 e0       	ldi	r31, 0x07	; 7
    161a:	96 83       	std	Z+6, r25	; 0x06
		fp_counter++;
    161c:	82 e0       	ldi	r24, 0x02	; 2
    161e:	80 93 0e 27 	sts	0x270E, r24
    1622:	07 c0       	rjmp	.+14     	; 0x1632 <service_fp+0x46>
    1624:	8f 5f       	subi	r24, 0xFF	; 255
    1626:	80 93 0e 27 	sts	0x270E, r24
		if (fp_counter >= FP_ON_LENGTH + FP_OFF_LENGTH) {fp_counter = 0;}
    162a:	8b 30       	cpi	r24, 0x0B	; 11
    162c:	10 f0       	brcs	.+4      	; 0x1632 <service_fp+0x46>
    162e:	10 92 0e 27 	sts	0x270E, r1
			
		//Master LED
		fp_counter2 += fp_updown;
    1632:	80 91 16 27 	lds	r24, 0x2716
    1636:	60 91 15 27 	lds	r22, 0x2715
    163a:	68 0f       	add	r22, r24
    163c:	60 93 15 27 	sts	0x2715, r22
		if (fp_counter2 < 128) {
    1640:	66 23       	and	r22, r22
    1642:	34 f0       	brlt	.+12     	; 0x1650 <service_fp+0x64>
			if (fp_counter2 % 2 == 0){
    1644:	60 fd       	sbrc	r22, 0
    1646:	12 c0       	rjmp	.+36     	; 0x166c <service_fp+0x80>
				led_dim(LED_3, fp_counter2);
    1648:	82 e0       	ldi	r24, 0x02	; 2
    164a:	0e 94 1b 30 	call	0x6036	; 0x6036 <led_dim>
    164e:	0e c0       	rjmp	.+28     	; 0x166c <service_fp+0x80>
			}
		}
		else {
			if (fp_updown > 0) {fp_counter2 += 2;}
    1650:	88 23       	and	r24, r24
    1652:	21 f0       	breq	.+8      	; 0x165c <service_fp+0x70>
    1654:	6e 5f       	subi	r22, 0xFE	; 254
    1656:	60 93 15 27 	sts	0x2715, r22
    165a:	03 c0       	rjmp	.+6      	; 0x1662 <service_fp+0x76>
			else {fp_counter2 += 2;}
    165c:	6e 5f       	subi	r22, 0xFE	; 254
    165e:	60 93 15 27 	sts	0x2715, r22
			led_dim(LED_3, fp_counter2);
    1662:	82 e0       	ldi	r24, 0x02	; 2
    1664:	60 91 15 27 	lds	r22, 0x2715
    1668:	0e 94 1b 30 	call	0x6036	; 0x6036 <led_dim>
		}			
		if ((fp_counter2 >= 255) || (fp_counter2 <= 0)) {
    166c:	80 91 15 27 	lds	r24, 0x2715
    1670:	81 50       	subi	r24, 0x01	; 1
    1672:	8e 3f       	cpi	r24, 0xFE	; 254
    1674:	28 f0       	brcs	.+10     	; 0x1680 <service_fp+0x94>
			fp_updown = -1 * fp_updown;
    1676:	80 91 16 27 	lds	r24, 0x2716
    167a:	81 95       	neg	r24
    167c:	80 93 16 27 	sts	0x2716, r24
		}
	}
	//SWITCHes
	_fp_read_switches();
    1680:	0e 94 b4 09 	call	0x1368	; 0x1368 <_fp_read_switches>
	_fp_process_switches();
    1684:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <_fp_process_switches>
	_fp_process_rotary();
    1688:	0e 94 ad 0a 	call	0x155a	; 0x155a <_fp_process_rotary>
}
    168c:	08 95       	ret

0000168e <init_lcd>:
//#############################################################
//## INITIALIZATION ROUTINE
//#############################################################

void init_lcd(){
	lcd_flow_control = LCD_BUSY; //Wait for LCD to bootup -- queue all commands prior to start
    168e:	8e e4       	ldi	r24, 0x4E	; 78
    1690:	80 93 24 27 	sts	0x2724, r24
	lcd_flow_reboot = LCD_ENABLED;
    1694:	8f e1       	ldi	r24, 0x1F	; 31
    1696:	80 93 0c 27 	sts	0x270C, r24
}
    169a:	08 95       	ret

0000169c <lcd_reboot_state>:

void lcd_reboot_state(){
	//flush command buffer
	uart_rxbuffer_disable(&ulcd);
    169c:	80 eb       	ldi	r24, 0xB0	; 176
    169e:	9b e0       	ldi	r25, 0x0B	; 11
    16a0:	0e 94 93 1c 	call	0x3926	; 0x3926 <uart_rxbuffer_disable>
	uart_txbuffer_disable(&ulcd);
    16a4:	80 eb       	ldi	r24, 0xB0	; 176
    16a6:	9b e0       	ldi	r25, 0x0B	; 11
    16a8:	0e 94 9d 1c 	call	0x393a	; 0x393a <uart_txbuffer_disable>
	init_uart_obuffer(&ulcd);
    16ac:	80 eb       	ldi	r24, 0xB0	; 176
    16ae:	9b e0       	ldi	r25, 0x0B	; 11
    16b0:	0e 94 cf 25 	call	0x4b9e	; 0x4b9e <init_uart_obuffer>
	init_uart_ibuffer(&ulcd);
    16b4:	80 eb       	ldi	r24, 0xB0	; 176
    16b6:	9b e0       	ldi	r25, 0x0B	; 11
    16b8:	0e 94 2b 2d 	call	0x5a56	; 0x5a56 <init_uart_ibuffer>
	uart_rxbuffer_enable(&ulcd);
    16bc:	80 eb       	ldi	r24, 0xB0	; 176
    16be:	9b e0       	ldi	r25, 0x0B	; 11
    16c0:	0e 94 8e 1c 	call	0x391c	; 0x391c <uart_rxbuffer_enable>
	uart_txbuffer_enable(&ulcd);
    16c4:	80 eb       	ldi	r24, 0xB0	; 176
    16c6:	9b e0       	ldi	r25, 0x0B	; 11
    16c8:	0e 94 98 1c 	call	0x3930	; 0x3930 <uart_txbuffer_enable>
	lcd_flow_control = LCD_READY; //unlock if stuck
    16cc:	82 e5       	ldi	r24, 0x52	; 82
    16ce:	80 93 24 27 	sts	0x2724, r24
	//state recovery
	lcd_flow_reboot = LCD_REBOOT; //suppress normal output from OS (dropped silently)
    16d2:	81 e9       	ldi	r24, 0x91	; 145
    16d4:	80 93 0c 27 	sts	0x270C, r24
	//transmit flush to LCD
	uart_enqueue_string(&ulcd, "\r"); //transmit \r to terminate anything currently in the buffer
    16d8:	80 eb       	ldi	r24, 0xB0	; 176
    16da:	9b e0       	ldi	r25, 0x0B	; 11
    16dc:	6a e5       	ldi	r22, 0x5A	; 90
    16de:	71 e2       	ldi	r23, 0x21	; 33
    16e0:	0e 94 37 26 	call	0x4c6e	; 0x4c6e <uart_enqueue_string>
}
    16e4:	08 95       	ret

000016e6 <lcd_reboot>:
	
//Reboot the LCD completely (return to splash screen)
void lcd_reboot(){
	lcd_reboot_state();
    16e6:	0e 94 4e 0b 	call	0x169c	; 0x169c <lcd_reboot_state>
	//send reboot commands
	uart_enqueue_string(&ulcd, "RESET\r");
    16ea:	80 eb       	ldi	r24, 0xB0	; 176
    16ec:	9b e0       	ldi	r25, 0x0B	; 11
    16ee:	6c e5       	ldi	r22, 0x5C	; 92
    16f0:	71 e2       	ldi	r23, 0x21	; 33
    16f2:	0e 94 37 26 	call	0x4c6e	; 0x4c6e <uart_enqueue_string>
	//state recovery
	lcd_flow_reboot = LCD_REBOOT;
    16f6:	81 e9       	ldi	r24, 0x91	; 145
    16f8:	80 93 0c 27 	sts	0x270C, r24
}
    16fc:	08 95       	ret

000016fe <lcd_recover>:

//Recover from LCD error (restore to last used main menu screen)
void lcd_recover(){
	lcd_reboot_state();
    16fe:	0e 94 4e 0b 	call	0x169c	; 0x169c <lcd_reboot_state>
	brain_menu_load(STATE_menu);
    1702:	80 91 e7 25 	lds	r24, 0x25E7
    1706:	0e 94 01 05 	call	0xa02	; 0xa02 <brain_menu_load>
}
    170a:	08 95       	ret

0000170c <lcd_command>:
//#############################################################
//## API
//#############################################################

//Only supports RUN (capital) and 31 (PLAY command as number) for detecting macros
void lcd_command(char* theCommand){
    170c:	cf 93       	push	r28
    170e:	df 93       	push	r29
    1710:	ec 01       	movw	r28, r24
	if ((lcd_flow_reboot == LCD_ENABLED)&&(uart_count(&ulcd)<MAX_BUFFER_LEN-100)){
    1712:	80 91 0c 27 	lds	r24, 0x270C
    1716:	8f 31       	cpi	r24, 0x1F	; 31
    1718:	91 f4       	brne	.+36     	; 0x173e <lcd_command+0x32>
    171a:	80 eb       	ldi	r24, 0xB0	; 176
    171c:	9b e0       	ldi	r25, 0x0B	; 11
    171e:	0e 94 f0 25 	call	0x4be0	; 0x4be0 <uart_count>
    1722:	23 e0       	ldi	r18, 0x03	; 3
    1724:	8c 39       	cpi	r24, 0x9C	; 156
    1726:	92 07       	cpc	r25, r18
    1728:	50 f4       	brcc	.+20     	; 0x173e <lcd_command+0x32>
		uart_enqueue_string(&ulcd, theCommand); //the command
    172a:	80 eb       	ldi	r24, 0xB0	; 176
    172c:	9b e0       	ldi	r25, 0x0B	; 11
    172e:	be 01       	movw	r22, r28
    1730:	0e 94 37 26 	call	0x4c6e	; 0x4c6e <uart_enqueue_string>
		uart_enqueue(&ulcd, 0x0D); //command terminator
    1734:	80 eb       	ldi	r24, 0xB0	; 176
    1736:	9b e0       	ldi	r25, 0x0B	; 11
    1738:	6d e0       	ldi	r22, 0x0D	; 13
    173a:	0e 94 bd 29 	call	0x537a	; 0x537a <uart_enqueue>
	}		
}
    173e:	df 91       	pop	r29
    1740:	cf 91       	pop	r28
    1742:	08 95       	ret

00001744 <_lcd_bubble>:
	lcd_command("COLOR BLUE");
	lcd_command("BOX 30 30 F");
}

void _lcd_bubble(uint8_t mode){
	switch(mode){
    1744:	8f 31       	cpi	r24, 0x1F	; 31
    1746:	19 f0       	breq	.+6      	; 0x174e <_lcd_bubble+0xa>
    1748:	80 32       	cpi	r24, 0x20	; 32
    174a:	51 f4       	brne	.+20     	; 0x1760 <_lcd_bubble+0x1c>
    174c:	05 c0       	rjmp	.+10     	; 0x1758 <_lcd_bubble+0x14>
		case LCD_ENABLED:
		lcd_command("COLOR 69");
    174e:	83 e6       	ldi	r24, 0x63	; 99
    1750:	91 e2       	ldi	r25, 0x21	; 33
    1752:	0e 94 86 0b 	call	0x170c	; 0x170c <lcd_command>
		break;
    1756:	04 c0       	rjmp	.+8      	; 0x1760 <_lcd_bubble+0x1c>
		case LCD_STANDBY:
		lcd_command("COLOR 16");
    1758:	8c e6       	ldi	r24, 0x6C	; 108
    175a:	91 e2       	ldi	r25, 0x21	; 33
    175c:	0e 94 86 0b 	call	0x170c	; 0x170c <lcd_command>
		break;
	}
	lcd_command("CIRCLE 10 F");
    1760:	85 e7       	ldi	r24, 0x75	; 117
    1762:	91 e2       	ldi	r25, 0x21	; 33
    1764:	0e 94 86 0b 	call	0x170c	; 0x170c <lcd_command>
	lcd_command("COLOR WHITE");
    1768:	81 e8       	ldi	r24, 0x81	; 129
    176a:	91 e2       	ldi	r25, 0x21	; 33
    176c:	0e 94 86 0b 	call	0x170c	; 0x170c <lcd_command>
	lcd_command("CIRCLE 10");
    1770:	8d e8       	ldi	r24, 0x8D	; 141
    1772:	91 e2       	ldi	r25, 0x21	; 33
    1774:	0e 94 86 0b 	call	0x170c	; 0x170c <lcd_command>
	lcd_command("ARC 8 125 145");
    1778:	87 e9       	ldi	r24, 0x97	; 151
    177a:	91 e2       	ldi	r25, 0x21	; 33
    177c:	0e 94 86 0b 	call	0x170c	; 0x170c <lcd_command>
}
    1780:	08 95       	ret

00001782 <_lcd_no_bubble>:
//#############################################################
//## SCREENS: OUTPUT STATUS
//#############################################################

void _lcd_no_bubble(){
	lcd_command("COLOR BLUE");
    1782:	85 ea       	ldi	r24, 0xA5	; 165
    1784:	91 e2       	ldi	r25, 0x21	; 33
    1786:	0e 94 86 0b 	call	0x170c	; 0x170c <lcd_command>
	lcd_command("BOX 30 30 F");
    178a:	80 eb       	ldi	r24, 0xB0	; 176
    178c:	91 e2       	ldi	r25, 0x21	; 33
    178e:	0e 94 86 0b 	call	0x170c	; 0x170c <lcd_command>
}
    1792:	08 95       	ret

00001794 <lcd_d>:
		lcd_command("XY 380 161");
		_lcd_bubble(mode);
	}
}

void lcd_d(uint8_t mode){
    1794:	cf 93       	push	r28
    1796:	c8 2f       	mov	r28, r24
	if (mode == LCD_DISABLED){
    1798:	81 32       	cpi	r24, 0x21	; 33
    179a:	39 f4       	brne	.+14     	; 0x17aa <lcd_d+0x16>
		lcd_command("XY 365 199");
    179c:	8c eb       	ldi	r24, 0xBC	; 188
    179e:	91 e2       	ldi	r25, 0x21	; 33
    17a0:	0e 94 86 0b 	call	0x170c	; 0x170c <lcd_command>
		_lcd_no_bubble();
    17a4:	0e 94 c1 0b 	call	0x1782	; 0x1782 <_lcd_no_bubble>
    17a8:	07 c0       	rjmp	.+14     	; 0x17b8 <lcd_d+0x24>
	}
	else {
		lcd_command("XY 380 209");
    17aa:	87 ec       	ldi	r24, 0xC7	; 199
    17ac:	91 e2       	ldi	r25, 0x21	; 33
    17ae:	0e 94 86 0b 	call	0x170c	; 0x170c <lcd_command>
		_lcd_bubble(mode);
    17b2:	8c 2f       	mov	r24, r28
    17b4:	0e 94 a2 0b 	call	0x1744	; 0x1744 <_lcd_bubble>
	}
}
    17b8:	cf 91       	pop	r28
    17ba:	08 95       	ret

000017bc <lcd_c>:
		lcd_command("XY 380 113");
		_lcd_bubble(mode);
	}
}

void lcd_c(uint8_t mode){
    17bc:	cf 93       	push	r28
    17be:	c8 2f       	mov	r28, r24
	if (mode == LCD_DISABLED){
    17c0:	81 32       	cpi	r24, 0x21	; 33
    17c2:	39 f4       	brne	.+14     	; 0x17d2 <lcd_c+0x16>
		lcd_command("XY 365 151");
    17c4:	82 ed       	ldi	r24, 0xD2	; 210
    17c6:	91 e2       	ldi	r25, 0x21	; 33
    17c8:	0e 94 86 0b 	call	0x170c	; 0x170c <lcd_command>
		_lcd_no_bubble();
    17cc:	0e 94 c1 0b 	call	0x1782	; 0x1782 <_lcd_no_bubble>
    17d0:	07 c0       	rjmp	.+14     	; 0x17e0 <lcd_c+0x24>
	}
	else {
		lcd_command("XY 380 161");
    17d2:	8d ed       	ldi	r24, 0xDD	; 221
    17d4:	91 e2       	ldi	r25, 0x21	; 33
    17d6:	0e 94 86 0b 	call	0x170c	; 0x170c <lcd_command>
		_lcd_bubble(mode);
    17da:	8c 2f       	mov	r24, r28
    17dc:	0e 94 a2 0b 	call	0x1744	; 0x1744 <_lcd_bubble>
	}
}
    17e0:	cf 91       	pop	r28
    17e2:	08 95       	ret

000017e4 <lcd_b>:
		lcd_command("XY 380 65");
		_lcd_bubble(mode);
	}		
}

void lcd_b(uint8_t mode){
    17e4:	cf 93       	push	r28
    17e6:	c8 2f       	mov	r28, r24
	if (mode == LCD_DISABLED){
    17e8:	81 32       	cpi	r24, 0x21	; 33
    17ea:	39 f4       	brne	.+14     	; 0x17fa <lcd_b+0x16>
		lcd_command("XY 365 103");
    17ec:	88 ee       	ldi	r24, 0xE8	; 232
    17ee:	91 e2       	ldi	r25, 0x21	; 33
    17f0:	0e 94 86 0b 	call	0x170c	; 0x170c <lcd_command>
		_lcd_no_bubble();
    17f4:	0e 94 c1 0b 	call	0x1782	; 0x1782 <_lcd_no_bubble>
    17f8:	07 c0       	rjmp	.+14     	; 0x1808 <lcd_b+0x24>
	}
	else {
		lcd_command("XY 380 113");
    17fa:	83 ef       	ldi	r24, 0xF3	; 243
    17fc:	91 e2       	ldi	r25, 0x21	; 33
    17fe:	0e 94 86 0b 	call	0x170c	; 0x170c <lcd_command>
		_lcd_bubble(mode);
    1802:	8c 2f       	mov	r24, r28
    1804:	0e 94 a2 0b 	call	0x1744	; 0x1744 <_lcd_bubble>
	}
}
    1808:	cf 91       	pop	r28
    180a:	08 95       	ret

0000180c <lcd_a>:
	lcd_command("COLOR WHITE");
	lcd_command("CIRCLE 10");
	lcd_command("ARC 8 125 145");
}

void lcd_a(uint8_t mode){
    180c:	cf 93       	push	r28
    180e:	c8 2f       	mov	r28, r24
	if (mode == LCD_DISABLED){
    1810:	81 32       	cpi	r24, 0x21	; 33
    1812:	39 f4       	brne	.+14     	; 0x1822 <lcd_a+0x16>
		lcd_command("XY 365 55");
    1814:	8e ef       	ldi	r24, 0xFE	; 254
    1816:	91 e2       	ldi	r25, 0x21	; 33
    1818:	0e 94 86 0b 	call	0x170c	; 0x170c <lcd_command>
		_lcd_no_bubble();		
    181c:	0e 94 c1 0b 	call	0x1782	; 0x1782 <_lcd_no_bubble>
    1820:	07 c0       	rjmp	.+14     	; 0x1830 <lcd_a+0x24>
	}
	else {
		lcd_command("XY 380 65");
    1822:	88 e0       	ldi	r24, 0x08	; 8
    1824:	92 e2       	ldi	r25, 0x22	; 34
    1826:	0e 94 86 0b 	call	0x170c	; 0x170c <lcd_command>
		_lcd_bubble(mode);
    182a:	8c 2f       	mov	r24, r28
    182c:	0e 94 a2 0b 	call	0x1744	; 0x1744 <_lcd_bubble>
	}		
}
    1830:	cf 91       	pop	r28
    1832:	08 95       	ret

00001834 <lcd_update>:

//Don't forget to end theCommand with a SPACE!
//--it's that way to support negation
//--Positive example: "75 1 "
//--Negative example: "75 1 -" 
void lcd_update(char* theCommand, char* theValue){
    1834:	0f 93       	push	r16
    1836:	1f 93       	push	r17
    1838:	cf 93       	push	r28
    183a:	df 93       	push	r29
    183c:	ec 01       	movw	r28, r24
    183e:	8b 01       	movw	r16, r22
	if ((lcd_flow_reboot == LCD_ENABLED)&&(uart_count(&ulcd)<MAX_BUFFER_LEN-100)){
    1840:	80 91 0c 27 	lds	r24, 0x270C
    1844:	8f 31       	cpi	r24, 0x1F	; 31
    1846:	b9 f4       	brne	.+46     	; 0x1876 <lcd_update+0x42>
    1848:	80 eb       	ldi	r24, 0xB0	; 176
    184a:	9b e0       	ldi	r25, 0x0B	; 11
    184c:	0e 94 f0 25 	call	0x4be0	; 0x4be0 <uart_count>
    1850:	23 e0       	ldi	r18, 0x03	; 3
    1852:	8c 39       	cpi	r24, 0x9C	; 156
    1854:	92 07       	cpc	r25, r18
    1856:	78 f4       	brcc	.+30     	; 0x1876 <lcd_update+0x42>
		uart_enqueue_string(&ulcd, theCommand);
    1858:	80 eb       	ldi	r24, 0xB0	; 176
    185a:	9b e0       	ldi	r25, 0x0B	; 11
    185c:	be 01       	movw	r22, r28
    185e:	0e 94 37 26 	call	0x4c6e	; 0x4c6e <uart_enqueue_string>
		uart_enqueue_string(&ulcd, theValue);
    1862:	80 eb       	ldi	r24, 0xB0	; 176
    1864:	9b e0       	ldi	r25, 0x0B	; 11
    1866:	b8 01       	movw	r22, r16
    1868:	0e 94 37 26 	call	0x4c6e	; 0x4c6e <uart_enqueue_string>
		uart_enqueue(&ulcd, 0x0D); //command terminator
    186c:	80 eb       	ldi	r24, 0xB0	; 176
    186e:	9b e0       	ldi	r25, 0x0B	; 11
    1870:	6d e0       	ldi	r22, 0x0D	; 13
    1872:	0e 94 bd 29 	call	0x537a	; 0x537a <uart_enqueue>
	}	
}
    1876:	df 91       	pop	r29
    1878:	cf 91       	pop	r28
    187a:	1f 91       	pop	r17
    187c:	0f 91       	pop	r16
    187e:	08 95       	ret

00001880 <service_lcd>:

void service_lcd(){	
	static uint16_t decimator = 0;

	//Flow control indicator
	if (lcd_flow_control != LCD_READY){led_on(LED_1);}
    1880:	80 91 24 27 	lds	r24, 0x2724
    1884:	82 35       	cpi	r24, 0x52	; 82
    1886:	21 f0       	breq	.+8      	; 0x1890 <service_lcd+0x10>
    1888:	81 e0       	ldi	r24, 0x01	; 1
    188a:	0e 94 e9 2f 	call	0x5fd2	; 0x5fd2 <led_on>
    188e:	03 c0       	rjmp	.+6      	; 0x1896 <service_lcd+0x16>
	else {led_off(LED_1);}
    1890:	81 e0       	ldi	r24, 0x01	; 1
    1892:	0e 94 05 30 	call	0x600a	; 0x600a <led_off>
	
	//Reboot logic
	switch(lcd_flow_reboot){
    1896:	80 91 0c 27 	lds	r24, 0x270C
    189a:	80 39       	cpi	r24, 0x90	; 144
    189c:	51 f0       	breq	.+20     	; 0x18b2 <service_lcd+0x32>
    189e:	81 39       	cpi	r24, 0x91	; 145
    18a0:	f1 f4       	brne	.+60     	; 0x18de <service_lcd+0x5e>
		case LCD_ENABLED:
			//for efficiency test this case first (since it is normal case)
			break;
		case LCD_REBOOT:
			decimator = 0;
    18a2:	10 92 7b 22 	sts	0x227B, r1
    18a6:	10 92 7c 22 	sts	0x227C, r1
			lcd_flow_reboot = LCD_BOOTING;
    18aa:	80 e9       	ldi	r24, 0x90	; 144
    18ac:	80 93 0c 27 	sts	0x270C, r24
			break;
    18b0:	16 c0       	rjmp	.+44     	; 0x18de <service_lcd+0x5e>
		case LCD_BOOTING:
			decimator++;
    18b2:	80 91 7b 22 	lds	r24, 0x227B
    18b6:	90 91 7c 22 	lds	r25, 0x227C
    18ba:	01 96       	adiw	r24, 0x01	; 1
    18bc:	80 93 7b 22 	sts	0x227B, r24
    18c0:	90 93 7c 22 	sts	0x227C, r25
			if (decimator >= 4999){
    18c4:	23 e1       	ldi	r18, 0x13	; 19
    18c6:	87 38       	cpi	r24, 0x87	; 135
    18c8:	92 07       	cpc	r25, r18
    18ca:	48 f0       	brcs	.+18     	; 0x18de <service_lcd+0x5e>
				decimator = 0;
    18cc:	10 92 7b 22 	sts	0x227B, r1
    18d0:	10 92 7c 22 	sts	0x227C, r1
				lcd_flow_reboot = LCD_ENABLED;
    18d4:	8f e1       	ldi	r24, 0x1F	; 31
    18d6:	80 93 0c 27 	sts	0x270C, r24
				STATE_menu = MENU_STARTUP;
    18da:	80 93 e7 25 	sts	0x25E7, r24
			}
			break;
	}
	
	//Command processing logic
	if(lcd_flow_control == LCD_DONE_COMMAND) {lcd_flow_control = LCD_READY;}
    18de:	80 91 24 27 	lds	r24, 0x2724
    18e2:	8f 34       	cpi	r24, 0x4F	; 79
    18e4:	19 f4       	brne	.+6      	; 0x18ec <service_lcd+0x6c>
    18e6:	82 e5       	ldi	r24, 0x52	; 82
    18e8:	80 93 24 27 	sts	0x2724, r24
	
	//Boot up logic (show start screen and let LCD bootup so commands are understood)
	if (decimator < 5000) {decimator++;}
    18ec:	80 91 7b 22 	lds	r24, 0x227B
    18f0:	90 91 7c 22 	lds	r25, 0x227C
    18f4:	23 e1       	ldi	r18, 0x13	; 19
    18f6:	88 38       	cpi	r24, 0x88	; 136
    18f8:	92 07       	cpc	r25, r18
    18fa:	30 f4       	brcc	.+12     	; 0x1908 <service_lcd+0x88>
    18fc:	01 96       	adiw	r24, 0x01	; 1
    18fe:	80 93 7b 22 	sts	0x227B, r24
    1902:	90 93 7c 22 	sts	0x227C, r25
    1906:	08 95       	ret
	else if (decimator == 5000) {lcd_flow_control = LCD_READY; decimator = 9000;}
    1908:	23 e1       	ldi	r18, 0x13	; 19
    190a:	88 38       	cpi	r24, 0x88	; 136
    190c:	92 07       	cpc	r25, r18
    190e:	49 f4       	brne	.+18     	; 0x1922 <service_lcd+0xa2>
    1910:	82 e5       	ldi	r24, 0x52	; 82
    1912:	80 93 24 27 	sts	0x2724, r24
    1916:	88 e2       	ldi	r24, 0x28	; 40
    1918:	93 e2       	ldi	r25, 0x23	; 35
    191a:	80 93 7b 22 	sts	0x227B, r24
    191e:	90 93 7c 22 	sts	0x227C, r25
    1922:	08 95       	ret

00001924 <init_lcd_console>:

//#############################################################
//## INITIALIZATION ROUTINE
//#############################################################

void init_lcd_console(){
    1924:	ee e8       	ldi	r30, 0x8E	; 142
    1926:	f2 e2       	ldi	r31, 0x22	; 34
    1928:	a1 e0       	ldi	r26, 0x01	; 1
    192a:	b7 e2       	ldi	r27, 0x27	; 39
    192c:	86 ee       	ldi	r24, 0xE6	; 230
    192e:	95 e2       	ldi	r25, 0x25	; 37
	char* line_buffer;
	//Load the command bytes into the console buffer
	for(uint8_t i=0;i<LCD_CONSOLE_NUM_ROWS;i++){
		line_buffer = lcd_console[i];
		line_buffer[0] = '8'; line_buffer[1]='8'; line_buffer[2]=' '; line_buffer[4]=' '; line_buffer[5]='"'; line_buffer[6]='"';		
    1930:	48 e3       	ldi	r20, 0x38	; 56
    1932:	30 e2       	ldi	r19, 0x20	; 32
    1934:	22 e2       	ldi	r18, 0x22	; 34
    1936:	40 83       	st	Z, r20
    1938:	41 83       	std	Z+1, r20	; 0x01
    193a:	32 83       	std	Z+2, r19	; 0x02
    193c:	34 83       	std	Z+4, r19	; 0x04
    193e:	25 83       	std	Z+5, r18	; 0x05
    1940:	26 83       	std	Z+6, r18	; 0x06
		lcd_buffer_dirty[i] = false;
    1942:	1d 92       	st	X+, r1
    1944:	e5 59       	subi	r30, 0x95	; 149
    1946:	ff 4f       	sbci	r31, 0xFF	; 255
//#############################################################

void init_lcd_console(){
	char* line_buffer;
	//Load the command bytes into the console buffer
	for(uint8_t i=0;i<LCD_CONSOLE_NUM_ROWS;i++){
    1948:	e8 17       	cp	r30, r24
    194a:	f9 07       	cpc	r31, r25
    194c:	a1 f7       	brne	.-24     	; 0x1936 <init_lcd_console+0x12>
		line_buffer = lcd_console[i];
		line_buffer[0] = '8'; line_buffer[1]='8'; line_buffer[2]=' '; line_buffer[4]=' '; line_buffer[5]='"'; line_buffer[6]='"';		
		lcd_buffer_dirty[i] = false;
	}
	//Init state
	lcd_console_head = 0;
    194e:	10 92 00 27 	sts	0x2700, r1
	STATE_lcd_console = LCD_CONSOLE_STATE_IDLE;
    1952:	86 e1       	ldi	r24, 0x16	; 22
    1954:	80 93 fd 26 	sts	0x26FD, r24
	lcd_console_set_value[4] = 0; //add string termination character
    1958:	10 92 ec 25 	sts	0x25EC, r1
}
    195c:	08 95       	ret

0000195e <lcd_console_pwr_adj>:

/*
	Map channel, dial to channel number
*/
uint8_t lcd_console_pwr_adj(uint8_t channel, uint8_t command){
	switch(channel){
    195e:	81 30       	cpi	r24, 0x01	; 1
    1960:	c9 f0       	breq	.+50     	; 0x1994 <lcd_console_pwr_adj+0x36>
    1962:	81 30       	cpi	r24, 0x01	; 1
    1964:	30 f0       	brcs	.+12     	; 0x1972 <lcd_console_pwr_adj+0x14>
    1966:	82 30       	cpi	r24, 0x02	; 2
    1968:	29 f1       	breq	.+74     	; 0x19b4 <lcd_console_pwr_adj+0x56>
    196a:	83 30       	cpi	r24, 0x03	; 3
    196c:	09 f0       	breq	.+2      	; 0x1970 <lcd_console_pwr_adj+0x12>
    196e:	42 c0       	rjmp	.+132    	; 0x19f4 <lcd_console_pwr_adj+0x96>
    1970:	31 c0       	rjmp	.+98     	; 0x19d4 <lcd_console_pwr_adj+0x76>
		case CHANNEL_A:
			switch(command){
    1972:	63 35       	cpi	r22, 0x53	; 83
    1974:	09 f4       	brne	.+2      	; 0x1978 <lcd_console_pwr_adj+0x1a>
    1976:	40 c0       	rjmp	.+128    	; 0x19f8 <lcd_console_pwr_adj+0x9a>
    1978:	64 35       	cpi	r22, 0x54	; 84
    197a:	18 f4       	brcc	.+6      	; 0x1982 <lcd_console_pwr_adj+0x24>
    197c:	6d 34       	cpi	r22, 0x4D	; 77
    197e:	41 f4       	brne	.+16     	; 0x1990 <lcd_console_pwr_adj+0x32>
    1980:	05 c0       	rjmp	.+10     	; 0x198c <lcd_console_pwr_adj+0x2e>
    1982:	6d 36       	cpi	r22, 0x6D	; 109
    1984:	19 f0       	breq	.+6      	; 0x198c <lcd_console_pwr_adj+0x2e>
    1986:	63 37       	cpi	r22, 0x73	; 115
    1988:	19 f4       	brne	.+6      	; 0x1990 <lcd_console_pwr_adj+0x32>
    198a:	36 c0       	rjmp	.+108    	; 0x19f8 <lcd_console_pwr_adj+0x9a>
				case 'm':
				case 'M':
					return 0;
    198c:	80 e0       	ldi	r24, 0x00	; 0
    198e:	08 95       	ret
				return 7;
				break;
			}
			break;
	}
	return 0; //SHOULD NEVER REACH HERE
    1990:	80 e0       	ldi	r24, 0x00	; 0
    1992:	08 95       	ret
					return 1;
				break;
			}
			break;
		case CHANNEL_B:
			switch(command){
    1994:	63 35       	cpi	r22, 0x53	; 83
    1996:	91 f1       	breq	.+100    	; 0x19fc <lcd_console_pwr_adj+0x9e>
    1998:	64 35       	cpi	r22, 0x54	; 84
    199a:	18 f4       	brcc	.+6      	; 0x19a2 <lcd_console_pwr_adj+0x44>
    199c:	6d 34       	cpi	r22, 0x4D	; 77
    199e:	41 f4       	brne	.+16     	; 0x19b0 <lcd_console_pwr_adj+0x52>
    19a0:	05 c0       	rjmp	.+10     	; 0x19ac <lcd_console_pwr_adj+0x4e>
    19a2:	6d 36       	cpi	r22, 0x6D	; 109
    19a4:	19 f0       	breq	.+6      	; 0x19ac <lcd_console_pwr_adj+0x4e>
    19a6:	63 37       	cpi	r22, 0x73	; 115
    19a8:	19 f4       	brne	.+6      	; 0x19b0 <lcd_console_pwr_adj+0x52>
    19aa:	28 c0       	rjmp	.+80     	; 0x19fc <lcd_console_pwr_adj+0x9e>
				case 'm':
				case 'M':
				return 2;
    19ac:	82 e0       	ldi	r24, 0x02	; 2
    19ae:	08 95       	ret
				return 7;
				break;
			}
			break;
	}
	return 0; //SHOULD NEVER REACH HERE
    19b0:	80 e0       	ldi	r24, 0x00	; 0
    19b2:	08 95       	ret
				return 3;
				break;
			}
			break;
		case CHANNEL_C:
			switch(command){
    19b4:	63 35       	cpi	r22, 0x53	; 83
    19b6:	21 f1       	breq	.+72     	; 0x1a00 <lcd_console_pwr_adj+0xa2>
    19b8:	64 35       	cpi	r22, 0x54	; 84
    19ba:	18 f4       	brcc	.+6      	; 0x19c2 <lcd_console_pwr_adj+0x64>
    19bc:	6d 34       	cpi	r22, 0x4D	; 77
    19be:	41 f4       	brne	.+16     	; 0x19d0 <lcd_console_pwr_adj+0x72>
    19c0:	05 c0       	rjmp	.+10     	; 0x19cc <lcd_console_pwr_adj+0x6e>
    19c2:	6d 36       	cpi	r22, 0x6D	; 109
    19c4:	19 f0       	breq	.+6      	; 0x19cc <lcd_console_pwr_adj+0x6e>
    19c6:	63 37       	cpi	r22, 0x73	; 115
    19c8:	19 f4       	brne	.+6      	; 0x19d0 <lcd_console_pwr_adj+0x72>
    19ca:	1a c0       	rjmp	.+52     	; 0x1a00 <lcd_console_pwr_adj+0xa2>
				case 'm':
				case 'M':
				return 4;
    19cc:	84 e0       	ldi	r24, 0x04	; 4
    19ce:	08 95       	ret
				return 7;
				break;
			}
			break;
	}
	return 0; //SHOULD NEVER REACH HERE
    19d0:	80 e0       	ldi	r24, 0x00	; 0
    19d2:	08 95       	ret
				return 5;
				break;
			}
			break;
		case CHANNEL_D:
			switch(command){
    19d4:	63 35       	cpi	r22, 0x53	; 83
    19d6:	b1 f0       	breq	.+44     	; 0x1a04 <lcd_console_pwr_adj+0xa6>
    19d8:	64 35       	cpi	r22, 0x54	; 84
    19da:	18 f4       	brcc	.+6      	; 0x19e2 <lcd_console_pwr_adj+0x84>
    19dc:	6d 34       	cpi	r22, 0x4D	; 77
    19de:	41 f4       	brne	.+16     	; 0x19f0 <lcd_console_pwr_adj+0x92>
    19e0:	05 c0       	rjmp	.+10     	; 0x19ec <lcd_console_pwr_adj+0x8e>
    19e2:	6d 36       	cpi	r22, 0x6D	; 109
    19e4:	19 f0       	breq	.+6      	; 0x19ec <lcd_console_pwr_adj+0x8e>
    19e6:	63 37       	cpi	r22, 0x73	; 115
    19e8:	19 f4       	brne	.+6      	; 0x19f0 <lcd_console_pwr_adj+0x92>
    19ea:	0c c0       	rjmp	.+24     	; 0x1a04 <lcd_console_pwr_adj+0xa6>
				case 'm':
				case 'M':
				return 6;
    19ec:	86 e0       	ldi	r24, 0x06	; 6
    19ee:	08 95       	ret
				return 7;
				break;
			}
			break;
	}
	return 0; //SHOULD NEVER REACH HERE
    19f0:	80 e0       	ldi	r24, 0x00	; 0
    19f2:	08 95       	ret
    19f4:	80 e0       	ldi	r24, 0x00	; 0
    19f6:	08 95       	ret
				case 'M':
					return 0;
				break;
				case 's':
				case 'S':
					return 1;
    19f8:	81 e0       	ldi	r24, 0x01	; 1
    19fa:	08 95       	ret
				case 'M':
				return 2;
				break;
				case 's':
				case 'S':
				return 3;
    19fc:	83 e0       	ldi	r24, 0x03	; 3
    19fe:	08 95       	ret
				case 'M':
				return 4;
				break;
				case 's':
				case 'S':
				return 5;
    1a00:	85 e0       	ldi	r24, 0x05	; 5
    1a02:	08 95       	ret
				case 'M':
				return 6;
				break;
				case 's':
				case 'S':
				return 7;
    1a04:	87 e0       	ldi	r24, 0x07	; 7
				break;
			}
			break;
	}
	return 0; //SHOULD NEVER REACH HERE
}
    1a06:	08 95       	ret

00001a08 <lcd_console_pwr_adj_set>:

//#############################################################
//## HOST API SUPPORT FUNCTIONS
//#############################################################

void lcd_console_pwr_adj_set(){
    1a08:	cf 93       	push	r28
    1a0a:	df 93       	push	r29
	uint16_t new_value;
	//ASCII to uint10_t (0-1023)
	new_value = (uint16_t)atoi(lcd_console_set_value);
    1a0c:	88 ee       	ldi	r24, 0xE8	; 232
    1a0e:	95 e2       	ldi	r25, 0x25	; 37
    1a10:	0e 94 70 32 	call	0x64e0	; 0x64e0 <atoi>
    1a14:	ec 01       	movw	r28, r24
	//Change Dial
	pwr_adj_change(lcd_console_pwr_adj(lcd_console_channel, lcd_console_command), new_value);
    1a16:	80 91 fa 25 	lds	r24, 0x25FA
    1a1a:	60 91 ff 26 	lds	r22, 0x26FF
    1a1e:	0e 94 af 0c 	call	0x195e	; 0x195e <lcd_console_pwr_adj>
    1a22:	be 01       	movw	r22, r28
    1a24:	0e 94 8e 13 	call	0x271c	; 0x271c <pwr_adj_change>
}
    1a28:	df 91       	pop	r29
    1a2a:	cf 91       	pop	r28
    1a2c:	08 95       	ret

00001a2e <lcd_console_meter>:
/*
	Retrieve the current meter reading value (voltage or current)
	--returns value via lcd_console_meter_value
*/
void lcd_console_meter(uint8_t channel, uint8_t side){
	switch(channel){
    1a2e:	81 30       	cpi	r24, 0x01	; 1
    1a30:	09 f4       	brne	.+2      	; 0x1a34 <lcd_console_meter+0x6>
    1a32:	49 c0       	rjmp	.+146    	; 0x1ac6 <lcd_console_meter+0x98>
    1a34:	81 30       	cpi	r24, 0x01	; 1
    1a36:	38 f0       	brcs	.+14     	; 0x1a46 <lcd_console_meter+0x18>
    1a38:	82 30       	cpi	r24, 0x02	; 2
    1a3a:	09 f4       	brne	.+2      	; 0x1a3e <lcd_console_meter+0x10>
    1a3c:	84 c0       	rjmp	.+264    	; 0x1b46 <lcd_console_meter+0x118>
    1a3e:	83 30       	cpi	r24, 0x03	; 3
    1a40:	09 f0       	breq	.+2      	; 0x1a44 <lcd_console_meter+0x16>
    1a42:	fb c0       	rjmp	.+502    	; 0x1c3a <lcd_console_meter+0x20c>
    1a44:	c0 c0       	rjmp	.+384    	; 0x1bc6 <lcd_console_meter+0x198>
		case CHANNEL_A:
			switch(side){
    1a46:	64 35       	cpi	r22, 0x54	; 84
    1a48:	21 f0       	breq	.+8      	; 0x1a52 <lcd_console_meter+0x24>
    1a4a:	65 35       	cpi	r22, 0x55	; 85
    1a4c:	09 f0       	breq	.+2      	; 0x1a50 <lcd_console_meter+0x22>
    1a4e:	f5 c0       	rjmp	.+490    	; 0x1c3a <lcd_console_meter+0x20c>
    1a50:	1d c0       	rjmp	.+58     	; 0x1a8c <lcd_console_meter+0x5e>
				case LCD_CONSOLE_CMD_MAIN_POS:
					switch(lcd_console_value_1){
    1a52:	80 91 fc 26 	lds	r24, 0x26FC
    1a56:	86 35       	cpi	r24, 0x56	; 86
    1a58:	59 f0       	breq	.+22     	; 0x1a70 <lcd_console_meter+0x42>
    1a5a:	87 35       	cpi	r24, 0x57	; 87
    1a5c:	20 f4       	brcc	.+8      	; 0x1a66 <lcd_console_meter+0x38>
    1a5e:	89 34       	cpi	r24, 0x49	; 73
    1a60:	09 f0       	breq	.+2      	; 0x1a64 <lcd_console_meter+0x36>
    1a62:	eb c0       	rjmp	.+470    	; 0x1c3a <lcd_console_meter+0x20c>
    1a64:	0c c0       	rjmp	.+24     	; 0x1a7e <lcd_console_meter+0x50>
    1a66:	89 36       	cpi	r24, 0x69	; 105
    1a68:	51 f0       	breq	.+20     	; 0x1a7e <lcd_console_meter+0x50>
    1a6a:	86 37       	cpi	r24, 0x76	; 118
    1a6c:	09 f0       	breq	.+2      	; 0x1a70 <lcd_console_meter+0x42>
    1a6e:	e5 c0       	rjmp	.+458    	; 0x1c3a <lcd_console_meter+0x20c>
						case 'v':
						case 'V':
							adc_data(0, VOLTAGE_POS, lcd_console_meter_value); //A V+
    1a70:	80 e0       	ldi	r24, 0x00	; 0
    1a72:	67 e6       	ldi	r22, 0x67	; 103
    1a74:	4e ee       	ldi	r20, 0xEE	; 238
    1a76:	55 e2       	ldi	r21, 0x25	; 37
    1a78:	0e 94 cf 01 	call	0x39e	; 0x39e <adc_data>
						break;
    1a7c:	08 95       	ret
						case 'i':
						case 'I':
							adc_data(1, CURRENT_HI_RES, lcd_console_meter_value); //A I+
    1a7e:	81 e0       	ldi	r24, 0x01	; 1
    1a80:	6a e6       	ldi	r22, 0x6A	; 106
    1a82:	4e ee       	ldi	r20, 0xEE	; 238
    1a84:	55 e2       	ldi	r21, 0x25	; 37
    1a86:	0e 94 cf 01 	call	0x39e	; 0x39e <adc_data>
						break;
    1a8a:	08 95       	ret
					}//Pos: V or I
				break;
				case LCD_CONSOLE_CMD_MAIN_NEG:
					switch(lcd_console_value_1){
    1a8c:	80 91 fc 26 	lds	r24, 0x26FC
    1a90:	86 35       	cpi	r24, 0x56	; 86
    1a92:	59 f0       	breq	.+22     	; 0x1aaa <lcd_console_meter+0x7c>
    1a94:	87 35       	cpi	r24, 0x57	; 87
    1a96:	20 f4       	brcc	.+8      	; 0x1aa0 <lcd_console_meter+0x72>
    1a98:	89 34       	cpi	r24, 0x49	; 73
    1a9a:	09 f0       	breq	.+2      	; 0x1a9e <lcd_console_meter+0x70>
    1a9c:	ce c0       	rjmp	.+412    	; 0x1c3a <lcd_console_meter+0x20c>
    1a9e:	0c c0       	rjmp	.+24     	; 0x1ab8 <lcd_console_meter+0x8a>
    1aa0:	89 36       	cpi	r24, 0x69	; 105
    1aa2:	51 f0       	breq	.+20     	; 0x1ab8 <lcd_console_meter+0x8a>
    1aa4:	86 37       	cpi	r24, 0x76	; 118
    1aa6:	09 f0       	breq	.+2      	; 0x1aaa <lcd_console_meter+0x7c>
    1aa8:	c8 c0       	rjmp	.+400    	; 0x1c3a <lcd_console_meter+0x20c>
						case 'v':
						case 'V':
							adc_data(2, VOLTAGE_NEG, lcd_console_meter_value); //A V-
    1aaa:	82 e0       	ldi	r24, 0x02	; 2
    1aac:	68 e6       	ldi	r22, 0x68	; 104
    1aae:	4e ee       	ldi	r20, 0xEE	; 238
    1ab0:	55 e2       	ldi	r21, 0x25	; 37
    1ab2:	0e 94 cf 01 	call	0x39e	; 0x39e <adc_data>
						break;
    1ab6:	08 95       	ret
						case 'i':
						case 'I':
							adc_data(3, CURRENT_HI_RES, lcd_console_meter_value); //A I-
    1ab8:	83 e0       	ldi	r24, 0x03	; 3
    1aba:	6a e6       	ldi	r22, 0x6A	; 106
    1abc:	4e ee       	ldi	r20, 0xEE	; 238
    1abe:	55 e2       	ldi	r21, 0x25	; 37
    1ac0:	0e 94 cf 01 	call	0x39e	; 0x39e <adc_data>
						break;
    1ac4:	08 95       	ret
				break;
			}//side		
		break; //Channel A
		
		case CHANNEL_B:
		switch(side){
    1ac6:	64 35       	cpi	r22, 0x54	; 84
    1ac8:	21 f0       	breq	.+8      	; 0x1ad2 <lcd_console_meter+0xa4>
    1aca:	65 35       	cpi	r22, 0x55	; 85
    1acc:	09 f0       	breq	.+2      	; 0x1ad0 <lcd_console_meter+0xa2>
    1ace:	b5 c0       	rjmp	.+362    	; 0x1c3a <lcd_console_meter+0x20c>
    1ad0:	1d c0       	rjmp	.+58     	; 0x1b0c <lcd_console_meter+0xde>
			case LCD_CONSOLE_CMD_MAIN_POS:
			switch(lcd_console_value_1){
    1ad2:	80 91 fc 26 	lds	r24, 0x26FC
    1ad6:	86 35       	cpi	r24, 0x56	; 86
    1ad8:	59 f0       	breq	.+22     	; 0x1af0 <lcd_console_meter+0xc2>
    1ada:	87 35       	cpi	r24, 0x57	; 87
    1adc:	20 f4       	brcc	.+8      	; 0x1ae6 <lcd_console_meter+0xb8>
    1ade:	89 34       	cpi	r24, 0x49	; 73
    1ae0:	09 f0       	breq	.+2      	; 0x1ae4 <lcd_console_meter+0xb6>
    1ae2:	ab c0       	rjmp	.+342    	; 0x1c3a <lcd_console_meter+0x20c>
    1ae4:	0c c0       	rjmp	.+24     	; 0x1afe <lcd_console_meter+0xd0>
    1ae6:	89 36       	cpi	r24, 0x69	; 105
    1ae8:	51 f0       	breq	.+20     	; 0x1afe <lcd_console_meter+0xd0>
    1aea:	86 37       	cpi	r24, 0x76	; 118
    1aec:	09 f0       	breq	.+2      	; 0x1af0 <lcd_console_meter+0xc2>
    1aee:	a5 c0       	rjmp	.+330    	; 0x1c3a <lcd_console_meter+0x20c>
				case 'v':
				case 'V':
				adc_data(4, VOLTAGE_POS, lcd_console_meter_value); //B V+
    1af0:	84 e0       	ldi	r24, 0x04	; 4
    1af2:	67 e6       	ldi	r22, 0x67	; 103
    1af4:	4e ee       	ldi	r20, 0xEE	; 238
    1af6:	55 e2       	ldi	r21, 0x25	; 37
    1af8:	0e 94 cf 01 	call	0x39e	; 0x39e <adc_data>
				break;
    1afc:	08 95       	ret
				case 'i':
				case 'I':
					adc_data(5, CURRENT_HI_RES, lcd_console_meter_value); //B I+
    1afe:	85 e0       	ldi	r24, 0x05	; 5
    1b00:	6a e6       	ldi	r22, 0x6A	; 106
    1b02:	4e ee       	ldi	r20, 0xEE	; 238
    1b04:	55 e2       	ldi	r21, 0x25	; 37
    1b06:	0e 94 cf 01 	call	0x39e	; 0x39e <adc_data>
				break;
    1b0a:	08 95       	ret
			}//Pos: V or I
			break;
			case LCD_CONSOLE_CMD_MAIN_NEG:
			switch(lcd_console_value_1){
    1b0c:	80 91 fc 26 	lds	r24, 0x26FC
    1b10:	86 35       	cpi	r24, 0x56	; 86
    1b12:	59 f0       	breq	.+22     	; 0x1b2a <lcd_console_meter+0xfc>
    1b14:	87 35       	cpi	r24, 0x57	; 87
    1b16:	20 f4       	brcc	.+8      	; 0x1b20 <lcd_console_meter+0xf2>
    1b18:	89 34       	cpi	r24, 0x49	; 73
    1b1a:	09 f0       	breq	.+2      	; 0x1b1e <lcd_console_meter+0xf0>
    1b1c:	8e c0       	rjmp	.+284    	; 0x1c3a <lcd_console_meter+0x20c>
    1b1e:	0c c0       	rjmp	.+24     	; 0x1b38 <lcd_console_meter+0x10a>
    1b20:	89 36       	cpi	r24, 0x69	; 105
    1b22:	51 f0       	breq	.+20     	; 0x1b38 <lcd_console_meter+0x10a>
    1b24:	86 37       	cpi	r24, 0x76	; 118
    1b26:	09 f0       	breq	.+2      	; 0x1b2a <lcd_console_meter+0xfc>
    1b28:	88 c0       	rjmp	.+272    	; 0x1c3a <lcd_console_meter+0x20c>
				case 'v':
				case 'V':
					adc_data(6, VOLTAGE_NEG, lcd_console_meter_value); //B V-
    1b2a:	86 e0       	ldi	r24, 0x06	; 6
    1b2c:	68 e6       	ldi	r22, 0x68	; 104
    1b2e:	4e ee       	ldi	r20, 0xEE	; 238
    1b30:	55 e2       	ldi	r21, 0x25	; 37
    1b32:	0e 94 cf 01 	call	0x39e	; 0x39e <adc_data>
				break;
    1b36:	08 95       	ret
				case 'i':
				case 'I':
					adc_data(7, CURRENT_HI_RES, lcd_console_meter_value); //B I-
    1b38:	87 e0       	ldi	r24, 0x07	; 7
    1b3a:	6a e6       	ldi	r22, 0x6A	; 106
    1b3c:	4e ee       	ldi	r20, 0xEE	; 238
    1b3e:	55 e2       	ldi	r21, 0x25	; 37
    1b40:	0e 94 cf 01 	call	0x39e	; 0x39e <adc_data>
				break;
    1b44:	08 95       	ret
			break;
		}//side
		break; //Channel B
		
		case CHANNEL_C:
		switch(side){
    1b46:	64 35       	cpi	r22, 0x54	; 84
    1b48:	21 f0       	breq	.+8      	; 0x1b52 <lcd_console_meter+0x124>
    1b4a:	65 35       	cpi	r22, 0x55	; 85
    1b4c:	09 f0       	breq	.+2      	; 0x1b50 <lcd_console_meter+0x122>
    1b4e:	75 c0       	rjmp	.+234    	; 0x1c3a <lcd_console_meter+0x20c>
    1b50:	1d c0       	rjmp	.+58     	; 0x1b8c <lcd_console_meter+0x15e>
			case LCD_CONSOLE_CMD_MAIN_POS:
			switch(lcd_console_value_1){
    1b52:	80 91 fc 26 	lds	r24, 0x26FC
    1b56:	86 35       	cpi	r24, 0x56	; 86
    1b58:	59 f0       	breq	.+22     	; 0x1b70 <lcd_console_meter+0x142>
    1b5a:	87 35       	cpi	r24, 0x57	; 87
    1b5c:	20 f4       	brcc	.+8      	; 0x1b66 <lcd_console_meter+0x138>
    1b5e:	89 34       	cpi	r24, 0x49	; 73
    1b60:	09 f0       	breq	.+2      	; 0x1b64 <lcd_console_meter+0x136>
    1b62:	6b c0       	rjmp	.+214    	; 0x1c3a <lcd_console_meter+0x20c>
    1b64:	0c c0       	rjmp	.+24     	; 0x1b7e <lcd_console_meter+0x150>
    1b66:	89 36       	cpi	r24, 0x69	; 105
    1b68:	51 f0       	breq	.+20     	; 0x1b7e <lcd_console_meter+0x150>
    1b6a:	86 37       	cpi	r24, 0x76	; 118
    1b6c:	09 f0       	breq	.+2      	; 0x1b70 <lcd_console_meter+0x142>
    1b6e:	65 c0       	rjmp	.+202    	; 0x1c3a <lcd_console_meter+0x20c>
				case 'v':
				case 'V':
					adc_data(8, VOLTAGE_POS, lcd_console_meter_value); //C V+
    1b70:	88 e0       	ldi	r24, 0x08	; 8
    1b72:	67 e6       	ldi	r22, 0x67	; 103
    1b74:	4e ee       	ldi	r20, 0xEE	; 238
    1b76:	55 e2       	ldi	r21, 0x25	; 37
    1b78:	0e 94 cf 01 	call	0x39e	; 0x39e <adc_data>
				break;
    1b7c:	08 95       	ret
				case 'i':
				case 'I':
					adc_data(9, CURRENT_HI_RES, lcd_console_meter_value); //C I+
    1b7e:	89 e0       	ldi	r24, 0x09	; 9
    1b80:	6a e6       	ldi	r22, 0x6A	; 106
    1b82:	4e ee       	ldi	r20, 0xEE	; 238
    1b84:	55 e2       	ldi	r21, 0x25	; 37
    1b86:	0e 94 cf 01 	call	0x39e	; 0x39e <adc_data>
				break;
    1b8a:	08 95       	ret
			}//Pos: V or I
			break;
			case LCD_CONSOLE_CMD_MAIN_NEG:
			switch(lcd_console_value_1){
    1b8c:	80 91 fc 26 	lds	r24, 0x26FC
    1b90:	86 35       	cpi	r24, 0x56	; 86
    1b92:	59 f0       	breq	.+22     	; 0x1baa <lcd_console_meter+0x17c>
    1b94:	87 35       	cpi	r24, 0x57	; 87
    1b96:	20 f4       	brcc	.+8      	; 0x1ba0 <lcd_console_meter+0x172>
    1b98:	89 34       	cpi	r24, 0x49	; 73
    1b9a:	09 f0       	breq	.+2      	; 0x1b9e <lcd_console_meter+0x170>
    1b9c:	4e c0       	rjmp	.+156    	; 0x1c3a <lcd_console_meter+0x20c>
    1b9e:	0c c0       	rjmp	.+24     	; 0x1bb8 <lcd_console_meter+0x18a>
    1ba0:	89 36       	cpi	r24, 0x69	; 105
    1ba2:	51 f0       	breq	.+20     	; 0x1bb8 <lcd_console_meter+0x18a>
    1ba4:	86 37       	cpi	r24, 0x76	; 118
    1ba6:	09 f0       	breq	.+2      	; 0x1baa <lcd_console_meter+0x17c>
    1ba8:	48 c0       	rjmp	.+144    	; 0x1c3a <lcd_console_meter+0x20c>
				case 'v':
				case 'V':
					adc_data(10, VOLTAGE_NEG, lcd_console_meter_value); //C V-
    1baa:	8a e0       	ldi	r24, 0x0A	; 10
    1bac:	68 e6       	ldi	r22, 0x68	; 104
    1bae:	4e ee       	ldi	r20, 0xEE	; 238
    1bb0:	55 e2       	ldi	r21, 0x25	; 37
    1bb2:	0e 94 cf 01 	call	0x39e	; 0x39e <adc_data>
				break;
    1bb6:	08 95       	ret
				case 'i':
				case 'I':
					adc_data(11, CURRENT_HI_RES, lcd_console_meter_value); //C I-
    1bb8:	8b e0       	ldi	r24, 0x0B	; 11
    1bba:	6a e6       	ldi	r22, 0x6A	; 106
    1bbc:	4e ee       	ldi	r20, 0xEE	; 238
    1bbe:	55 e2       	ldi	r21, 0x25	; 37
    1bc0:	0e 94 cf 01 	call	0x39e	; 0x39e <adc_data>
				break;
    1bc4:	08 95       	ret
			break;
		}//side
		break; //Channel C
		
		case CHANNEL_D:
		switch(side){
    1bc6:	64 35       	cpi	r22, 0x54	; 84
    1bc8:	19 f0       	breq	.+6      	; 0x1bd0 <lcd_console_meter+0x1a2>
    1bca:	65 35       	cpi	r22, 0x55	; 85
    1bcc:	b1 f5       	brne	.+108    	; 0x1c3a <lcd_console_meter+0x20c>
    1bce:	1b c0       	rjmp	.+54     	; 0x1c06 <lcd_console_meter+0x1d8>
			case LCD_CONSOLE_CMD_MAIN_POS:
			switch(lcd_console_value_1){
    1bd0:	80 91 fc 26 	lds	r24, 0x26FC
    1bd4:	86 35       	cpi	r24, 0x56	; 86
    1bd6:	49 f0       	breq	.+18     	; 0x1bea <lcd_console_meter+0x1bc>
    1bd8:	87 35       	cpi	r24, 0x57	; 87
    1bda:	18 f4       	brcc	.+6      	; 0x1be2 <lcd_console_meter+0x1b4>
    1bdc:	89 34       	cpi	r24, 0x49	; 73
    1bde:	69 f5       	brne	.+90     	; 0x1c3a <lcd_console_meter+0x20c>
    1be0:	0b c0       	rjmp	.+22     	; 0x1bf8 <lcd_console_meter+0x1ca>
    1be2:	89 36       	cpi	r24, 0x69	; 105
    1be4:	49 f0       	breq	.+18     	; 0x1bf8 <lcd_console_meter+0x1ca>
    1be6:	86 37       	cpi	r24, 0x76	; 118
    1be8:	41 f5       	brne	.+80     	; 0x1c3a <lcd_console_meter+0x20c>
				case 'v':
				case 'V':
					adc_data(12, VOLTAGE_POS, lcd_console_meter_value); //D V+
    1bea:	8c e0       	ldi	r24, 0x0C	; 12
    1bec:	67 e6       	ldi	r22, 0x67	; 103
    1bee:	4e ee       	ldi	r20, 0xEE	; 238
    1bf0:	55 e2       	ldi	r21, 0x25	; 37
    1bf2:	0e 94 cf 01 	call	0x39e	; 0x39e <adc_data>
				break;
    1bf6:	08 95       	ret
				case 'i':
				case 'I':
					adc_data(13, CURRENT_HI_RES, lcd_console_meter_value); //D I+
    1bf8:	8d e0       	ldi	r24, 0x0D	; 13
    1bfa:	6a e6       	ldi	r22, 0x6A	; 106
    1bfc:	4e ee       	ldi	r20, 0xEE	; 238
    1bfe:	55 e2       	ldi	r21, 0x25	; 37
    1c00:	0e 94 cf 01 	call	0x39e	; 0x39e <adc_data>
				break;
    1c04:	08 95       	ret
			}//Pos: V or I
			break;
			case LCD_CONSOLE_CMD_MAIN_NEG:
			switch(lcd_console_value_1){
    1c06:	80 91 fc 26 	lds	r24, 0x26FC
    1c0a:	86 35       	cpi	r24, 0x56	; 86
    1c0c:	49 f0       	breq	.+18     	; 0x1c20 <lcd_console_meter+0x1f2>
    1c0e:	87 35       	cpi	r24, 0x57	; 87
    1c10:	18 f4       	brcc	.+6      	; 0x1c18 <lcd_console_meter+0x1ea>
    1c12:	89 34       	cpi	r24, 0x49	; 73
    1c14:	91 f4       	brne	.+36     	; 0x1c3a <lcd_console_meter+0x20c>
    1c16:	0b c0       	rjmp	.+22     	; 0x1c2e <lcd_console_meter+0x200>
    1c18:	89 36       	cpi	r24, 0x69	; 105
    1c1a:	49 f0       	breq	.+18     	; 0x1c2e <lcd_console_meter+0x200>
    1c1c:	86 37       	cpi	r24, 0x76	; 118
    1c1e:	69 f4       	brne	.+26     	; 0x1c3a <lcd_console_meter+0x20c>
				case 'v':
				case 'V':
					adc_data(14, VOLTAGE_NEG, lcd_console_meter_value); //D V-
    1c20:	8e e0       	ldi	r24, 0x0E	; 14
    1c22:	68 e6       	ldi	r22, 0x68	; 104
    1c24:	4e ee       	ldi	r20, 0xEE	; 238
    1c26:	55 e2       	ldi	r21, 0x25	; 37
    1c28:	0e 94 cf 01 	call	0x39e	; 0x39e <adc_data>
				break;
    1c2c:	08 95       	ret
				case 'i':
				case 'I':
					adc_data(15, CURRENT_HI_RES, lcd_console_meter_value); //D I-
    1c2e:	8f e0       	ldi	r24, 0x0F	; 15
    1c30:	6a e6       	ldi	r22, 0x6A	; 106
    1c32:	4e ee       	ldi	r20, 0xEE	; 238
    1c34:	55 e2       	ldi	r21, 0x25	; 37
    1c36:	0e 94 cf 01 	call	0x39e	; 0x39e <adc_data>
    1c3a:	08 95       	ret

00001c3c <lcd_console_write>:

//#############################################################
//## SCREENS: CONSOLE
//#############################################################

void lcd_console_write(char* theString){
    1c3c:	ef 92       	push	r14
    1c3e:	ff 92       	push	r15
    1c40:	0f 93       	push	r16
    1c42:	1f 93       	push	r17
    1c44:	cf 93       	push	r28
    1c46:	df 93       	push	r29
    1c48:	8c 01       	movw	r16, r24
	int8_t head = (int8_t)lcd_console_head;
    1c4a:	70 91 00 27 	lds	r23, 0x2700
    1c4e:	67 2f       	mov	r22, r23
	char* line_buffer = lcd_console[lcd_console_head];
    1c50:	27 2f       	mov	r18, r23
    1c52:	30 e0       	ldi	r19, 0x00	; 0
    1c54:	8b e6       	ldi	r24, 0x6B	; 107
    1c56:	90 e0       	ldi	r25, 0x00	; 0
    1c58:	28 9f       	mul	r18, r24
    1c5a:	a0 01       	movw	r20, r0
    1c5c:	29 9f       	mul	r18, r25
    1c5e:	50 0d       	add	r21, r0
    1c60:	38 9f       	mul	r19, r24
    1c62:	50 0d       	add	r21, r0
    1c64:	11 24       	eor	r1, r1
    1c66:	0f 2e       	mov	r0, r31
    1c68:	fe e8       	ldi	r31, 0x8E	; 142
    1c6a:	ef 2e       	mov	r14, r31
    1c6c:	f2 e2       	ldi	r31, 0x22	; 34
    1c6e:	ff 2e       	mov	r15, r31
    1c70:	f0 2d       	mov	r31, r0
    1c72:	e4 0e       	add	r14, r20
    1c74:	f5 1e       	adc	r15, r21
    1c76:	a1 e3       	ldi	r26, 0x31	; 49
	//Destination
	for(uint8_t i=0;i<LCD_CONSOLE_NUM_ROWS;i++){
		lcd_console[head][3] = 0x31 + i; //id of static control (Row) to write to 
    1c78:	4e e8       	ldi	r20, 0x8E	; 142
    1c7a:	52 e2       	ldi	r21, 0x22	; 34
    1c7c:	eb e6       	ldi	r30, 0x6B	; 107
    1c7e:	f0 e0       	ldi	r31, 0x00	; 0
    1c80:	86 2f       	mov	r24, r22
    1c82:	99 27       	eor	r25, r25
    1c84:	87 fd       	sbrc	r24, 7
    1c86:	90 95       	com	r25
    1c88:	8e 9f       	mul	r24, r30
    1c8a:	90 01       	movw	r18, r0
    1c8c:	8f 9f       	mul	r24, r31
    1c8e:	30 0d       	add	r19, r0
    1c90:	9e 9f       	mul	r25, r30
    1c92:	30 0d       	add	r19, r0
    1c94:	11 24       	eor	r1, r1
    1c96:	24 0f       	add	r18, r20
    1c98:	35 1f       	adc	r19, r21
    1c9a:	e9 01       	movw	r28, r18
    1c9c:	ab 83       	std	Y+3, r26	; 0x03
		head--;
    1c9e:	61 50       	subi	r22, 0x01	; 1
		if(head < 0){head = LCD_CONSOLE_NUM_ROWS-1;}
    1ca0:	0a f4       	brpl	.+2      	; 0x1ca4 <lcd_console_write+0x68>
    1ca2:	67 e0       	ldi	r22, 0x07	; 7
    1ca4:	af 5f       	subi	r26, 0xFF	; 255

void lcd_console_write(char* theString){
	int8_t head = (int8_t)lcd_console_head;
	char* line_buffer = lcd_console[lcd_console_head];
	//Destination
	for(uint8_t i=0;i<LCD_CONSOLE_NUM_ROWS;i++){
    1ca6:	a9 33       	cpi	r26, 0x39	; 57
    1ca8:	59 f7       	brne	.-42     	; 0x1c80 <lcd_console_write+0x44>
		head--;
		if(head < 0){head = LCD_CONSOLE_NUM_ROWS-1;}
	}	
	//Content
	for (uint8_t i=0; i<LCD_CONSOLE_NUM_COLS; i++){
		if (theString[i] == 0){
    1caa:	f8 01       	movw	r30, r16
    1cac:	80 81       	ld	r24, Z
    1cae:	88 23       	and	r24, r24
    1cb0:	99 f5       	brne	.+102    	; 0x1d18 <lcd_console_write+0xdc>
    1cb2:	05 c0       	rjmp	.+10     	; 0x1cbe <lcd_console_write+0x82>
    1cb4:	94 2f       	mov	r25, r20
    1cb6:	81 91       	ld	r24, Z+
    1cb8:	88 23       	and	r24, r24
    1cba:	21 f5       	brne	.+72     	; 0x1d04 <lcd_console_write+0xc8>
    1cbc:	03 c0       	rjmp	.+6      	; 0x1cc4 <lcd_console_write+0x88>
    1cbe:	40 e0       	ldi	r20, 0x00	; 0
    1cc0:	50 e0       	ldi	r21, 0x00	; 0
    1cc2:	90 e0       	ldi	r25, 0x00	; 0
			line_buffer[6+i] = '"';
    1cc4:	f7 01       	movw	r30, r14
    1cc6:	e9 0f       	add	r30, r25
    1cc8:	f1 1d       	adc	r31, r1
    1cca:	82 e2       	ldi	r24, 0x22	; 34
    1ccc:	86 83       	std	Z+6, r24	; 0x06
			line_buffer[6+i+1] = 0;
    1cce:	e7 01       	movw	r28, r14
    1cd0:	c4 0f       	add	r28, r20
    1cd2:	d5 1f       	adc	r29, r21
    1cd4:	1f 82       	std	Y+7, r1	; 0x07
			break;
		}
		line_buffer[6+i] = theString[i];
	}
	//Dirty all rows (so all rows get printed to screen)
	for (uint8_t i=0; i<LCD_CONSOLE_NUM_ROWS; i++){lcd_buffer_dirty[i] = true;}	
    1cd6:	81 e0       	ldi	r24, 0x01	; 1
    1cd8:	80 93 01 27 	sts	0x2701, r24
    1cdc:	80 93 02 27 	sts	0x2702, r24
    1ce0:	80 93 03 27 	sts	0x2703, r24
    1ce4:	80 93 04 27 	sts	0x2704, r24
    1ce8:	80 93 05 27 	sts	0x2705, r24
    1cec:	80 93 06 27 	sts	0x2706, r24
    1cf0:	80 93 07 27 	sts	0x2707, r24
    1cf4:	80 93 08 27 	sts	0x2708, r24
	//Move row pointer
	lcd_console_head++;
    1cf8:	7f 5f       	subi	r23, 0xFF	; 255
    1cfa:	70 93 00 27 	sts	0x2700, r23
	if (lcd_console_head >= LCD_CONSOLE_NUM_ROWS){lcd_console_head = 0;}
    1cfe:	78 30       	cpi	r23, 0x08	; 8
    1d00:	40 f4       	brcc	.+16     	; 0x1d12 <lcd_console_write+0xd6>
    1d02:	13 c0       	rjmp	.+38     	; 0x1d2a <lcd_console_write+0xee>
		if (theString[i] == 0){
			line_buffer[6+i] = '"';
			line_buffer[6+i+1] = 0;
			break;
		}
		line_buffer[6+i] = theString[i];
    1d04:	8d 93       	st	X+, r24
    1d06:	4f 5f       	subi	r20, 0xFF	; 255
    1d08:	5f 4f       	sbci	r21, 0xFF	; 255
		lcd_console[head][3] = 0x31 + i; //id of static control (Row) to write to 
		head--;
		if(head < 0){head = LCD_CONSOLE_NUM_ROWS-1;}
	}	
	//Content
	for (uint8_t i=0; i<LCD_CONSOLE_NUM_COLS; i++){
    1d0a:	44 36       	cpi	r20, 0x64	; 100
    1d0c:	51 05       	cpc	r21, r1
    1d0e:	91 f6       	brne	.-92     	; 0x1cb4 <lcd_console_write+0x78>
    1d10:	e2 cf       	rjmp	.-60     	; 0x1cd6 <lcd_console_write+0x9a>
	}
	//Dirty all rows (so all rows get printed to screen)
	for (uint8_t i=0; i<LCD_CONSOLE_NUM_ROWS; i++){lcd_buffer_dirty[i] = true;}	
	//Move row pointer
	lcd_console_head++;
	if (lcd_console_head >= LCD_CONSOLE_NUM_ROWS){lcd_console_head = 0;}
    1d12:	10 92 00 27 	sts	0x2700, r1
    1d16:	09 c0       	rjmp	.+18     	; 0x1d2a <lcd_console_write+0xee>
		if (theString[i] == 0){
			line_buffer[6+i] = '"';
			line_buffer[6+i+1] = 0;
			break;
		}
		line_buffer[6+i] = theString[i];
    1d18:	e7 01       	movw	r28, r14
    1d1a:	8e 83       	std	Y+6, r24	; 0x06

//#############################################################
//## SCREENS: CONSOLE
//#############################################################

void lcd_console_write(char* theString){
    1d1c:	f8 01       	movw	r30, r16
    1d1e:	31 96       	adiw	r30, 0x01	; 1
    1d20:	d7 01       	movw	r26, r14
    1d22:	17 96       	adiw	r26, 0x07	; 7
    1d24:	41 e0       	ldi	r20, 0x01	; 1
    1d26:	50 e0       	ldi	r21, 0x00	; 0
    1d28:	c5 cf       	rjmp	.-118    	; 0x1cb4 <lcd_console_write+0x78>
	//Dirty all rows (so all rows get printed to screen)
	for (uint8_t i=0; i<LCD_CONSOLE_NUM_ROWS; i++){lcd_buffer_dirty[i] = true;}	
	//Move row pointer
	lcd_console_head++;
	if (lcd_console_head >= LCD_CONSOLE_NUM_ROWS){lcd_console_head = 0;}
}
    1d2a:	df 91       	pop	r29
    1d2c:	cf 91       	pop	r28
    1d2e:	1f 91       	pop	r17
    1d30:	0f 91       	pop	r16
    1d32:	ff 90       	pop	r15
    1d34:	ef 90       	pop	r14
    1d36:	08 95       	ret

00001d38 <service_lcd_console>:
//#############################################################
//## SERVICE ROUTINE
//#############################################################

//Used to refresh the console
void service_lcd_console(){
    1d38:	2f 92       	push	r2
    1d3a:	3f 92       	push	r3
    1d3c:	4f 92       	push	r4
    1d3e:	5f 92       	push	r5
    1d40:	6f 92       	push	r6
    1d42:	7f 92       	push	r7
    1d44:	8f 92       	push	r8
    1d46:	9f 92       	push	r9
    1d48:	af 92       	push	r10
    1d4a:	bf 92       	push	r11
    1d4c:	cf 92       	push	r12
    1d4e:	df 92       	push	r13
    1d50:	ef 92       	push	r14
    1d52:	ff 92       	push	r15
    1d54:	0f 93       	push	r16
    1d56:	1f 93       	push	r17
    1d58:	cf 93       	push	r28
	//Process command buffer
	while (uart_icount(&uctrl) > 0){
		uint8_t incoming = uart_idequeue(&uctrl);
		lcd_console_write("Byte received"); //xxx
    1d5a:	02 e1       	ldi	r16, 0x12	; 18
    1d5c:	12 e2       	ldi	r17, 0x22	; 34
						STATE_lcd_console = LCD_CONSOLE_STATE_IDLE;
				}
			break;
			
			case LCD_CONSOLE_STATE_VALUE_N2:
			lcd_console_write("VALN-2"); //xxx
    1d5e:	0f 2e       	mov	r0, r31
    1d60:	f1 e4       	ldi	r31, 0x41	; 65
    1d62:	cf 2e       	mov	r12, r31
    1d64:	f2 e2       	ldi	r31, 0x22	; 34
    1d66:	df 2e       	mov	r13, r31
    1d68:	f0 2d       	mov	r31, r0
				case '9':
					STATE_lcd_console = LCD_CONSOLE_STATE_VALUE_N3;
					lcd_console_set_value[1] = incoming;
					break;
				case 0x0D:
					lcd_console_set_value[1] = 0; //terminate string
    1d6a:	0f 2e       	mov	r0, r31
    1d6c:	f9 ee       	ldi	r31, 0xE9	; 233
    1d6e:	2f 2e       	mov	r2, r31
    1d70:	f5 e2       	ldi	r31, 0x25	; 37
    1d72:	3f 2e       	mov	r3, r31
    1d74:	f0 2d       	mov	r31, r0
					lcd_console_pwr_adj_set();
					STATE_lcd_console = LCD_CONSOLE_STATE_IDLE;
					break;
				default:
					//RESET ON ERROR
					lcd_console_write("Bad Command");
    1d76:	0f 2e       	mov	r0, r31
    1d78:	f9 e2       	ldi	r31, 0x29	; 41
    1d7a:	ef 2e       	mov	r14, r31
    1d7c:	f2 e2       	ldi	r31, 0x22	; 34
    1d7e:	ff 2e       	mov	r15, r31
    1d80:	f0 2d       	mov	r31, r0
					STATE_lcd_console = LCD_CONSOLE_STATE_IDLE;
			}
			break;
			
			case LCD_CONSOLE_STATE_VALUE_N4:
			lcd_console_write("VALN-4"); //xxx
    1d82:	0f 2e       	mov	r0, r31
    1d84:	ff e4       	ldi	r31, 0x4F	; 79
    1d86:	af 2e       	mov	r10, r31
    1d88:	f2 e2       	ldi	r31, 0x22	; 34
    1d8a:	bf 2e       	mov	r11, r31
    1d8c:	f0 2d       	mov	r31, r0
					STATE_lcd_console = LCD_CONSOLE_STATE_IDLE;
			}
			break;
			
			case LCD_CONSOLE_STATE_VALUE_N3:
			lcd_console_write("VALN-3"); //xxx
    1d8e:	0f 2e       	mov	r0, r31
    1d90:	f8 e4       	ldi	r31, 0x48	; 72
    1d92:	8f 2e       	mov	r8, r31
    1d94:	f2 e2       	ldi	r31, 0x22	; 34
    1d96:	9f 2e       	mov	r9, r31
    1d98:	f0 2d       	mov	r31, r0
				}
				STATE_lcd_console = LCD_CONSOLE_STATE_IDLE;
			break;
			
			case LCD_CONSOLE_STATE_TERMINATOR_1:
				lcd_console_write("TERM1"); //xxx
    1d9a:	0f 2e       	mov	r0, r31
    1d9c:	fd e5       	ldi	r31, 0x5D	; 93
    1d9e:	6f 2e       	mov	r6, r31
    1da0:	f2 e2       	ldi	r31, 0x22	; 34
    1da2:	7f 2e       	mov	r7, r31
    1da4:	f0 2d       	mov	r31, r0
					STATE_lcd_console = LCD_CONSOLE_STATE_IDLE;
			}
			break;
			
			case LCD_CONSOLE_STATE_TERMINATOR_N:
				lcd_console_write("TERM_N"); //xxx
    1da6:	0f 2e       	mov	r0, r31
    1da8:	f6 e5       	ldi	r31, 0x56	; 86
    1daa:	4f 2e       	mov	r4, r31
    1dac:	f2 e2       	ldi	r31, 0x22	; 34
    1dae:	5f 2e       	mov	r5, r31
    1db0:	f0 2d       	mov	r31, r0
//#############################################################

//Used to refresh the console
void service_lcd_console(){
	//Process command buffer
	while (uart_icount(&uctrl) > 0){
    1db2:	a5 c1       	rjmp	.+842    	; 0x20fe <service_lcd_console+0x3c6>
		uint8_t incoming = uart_idequeue(&uctrl);
    1db4:	80 ea       	ldi	r24, 0xA0	; 160
    1db6:	98 e0       	ldi	r25, 0x08	; 8
    1db8:	0e 94 ea 2d 	call	0x5bd4	; 0x5bd4 <uart_idequeue>
    1dbc:	c8 2f       	mov	r28, r24
		lcd_console_write("Byte received"); //xxx
    1dbe:	c8 01       	movw	r24, r16
    1dc0:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <lcd_console_write>
		switch(STATE_lcd_console){
    1dc4:	80 91 fd 26 	lds	r24, 0x26FD
    1dc8:	8a 31       	cpi	r24, 0x1A	; 26
    1dca:	09 f4       	brne	.+2      	; 0x1dce <service_lcd_console+0x96>
    1dcc:	d8 c0       	rjmp	.+432    	; 0x1f7e <service_lcd_console+0x246>
    1dce:	8b 31       	cpi	r24, 0x1B	; 27
    1dd0:	80 f4       	brcc	.+32     	; 0x1df2 <service_lcd_console+0xba>
    1dd2:	87 31       	cpi	r24, 0x17	; 23
    1dd4:	09 f4       	brne	.+2      	; 0x1dd8 <service_lcd_console+0xa0>
    1dd6:	53 c0       	rjmp	.+166    	; 0x1e7e <service_lcd_console+0x146>
    1dd8:	88 31       	cpi	r24, 0x18	; 24
    1dda:	20 f4       	brcc	.+8      	; 0x1de4 <service_lcd_console+0xac>
    1ddc:	86 31       	cpi	r24, 0x16	; 22
    1dde:	09 f0       	breq	.+2      	; 0x1de2 <service_lcd_console+0xaa>
    1de0:	8e c1       	rjmp	.+796    	; 0x20fe <service_lcd_console+0x3c6>
    1de2:	14 c0       	rjmp	.+40     	; 0x1e0c <service_lcd_console+0xd4>
    1de4:	88 31       	cpi	r24, 0x18	; 24
    1de6:	09 f4       	brne	.+2      	; 0x1dea <service_lcd_console+0xb2>
    1de8:	95 c0       	rjmp	.+298    	; 0x1f14 <service_lcd_console+0x1dc>
    1dea:	89 31       	cpi	r24, 0x19	; 25
    1dec:	09 f0       	breq	.+2      	; 0x1df0 <service_lcd_console+0xb8>
    1dee:	87 c1       	rjmp	.+782    	; 0x20fe <service_lcd_console+0x3c6>
    1df0:	b1 c0       	rjmp	.+354    	; 0x1f54 <service_lcd_console+0x21c>
    1df2:	8c 31       	cpi	r24, 0x1C	; 28
    1df4:	09 f4       	brne	.+2      	; 0x1df8 <service_lcd_console+0xc0>
    1df6:	05 c1       	rjmp	.+522    	; 0x2002 <service_lcd_console+0x2ca>
    1df8:	8c 31       	cpi	r24, 0x1C	; 28
    1dfa:	08 f4       	brcc	.+2      	; 0x1dfe <service_lcd_console+0xc6>
    1dfc:	e0 c0       	rjmp	.+448    	; 0x1fbe <service_lcd_console+0x286>
    1dfe:	8d 31       	cpi	r24, 0x1D	; 29
    1e00:	09 f4       	brne	.+2      	; 0x1e04 <service_lcd_console+0xcc>
    1e02:	30 c1       	rjmp	.+608    	; 0x2064 <service_lcd_console+0x32c>
    1e04:	8e 31       	cpi	r24, 0x1E	; 30
    1e06:	09 f0       	breq	.+2      	; 0x1e0a <service_lcd_console+0xd2>
    1e08:	7a c1       	rjmp	.+756    	; 0x20fe <service_lcd_console+0x3c6>
    1e0a:	1d c1       	rjmp	.+570    	; 0x2046 <service_lcd_console+0x30e>
			
			case LCD_CONSOLE_STATE_IDLE:
				lcd_console_write("IDLE"); //xxx
    1e0c:	80 e2       	ldi	r24, 0x20	; 32
    1e0e:	92 e2       	ldi	r25, 0x22	; 34
    1e10:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <lcd_console_write>
				switch(incoming){
    1e14:	c4 34       	cpi	r28, 0x44	; 68
    1e16:	61 f1       	breq	.+88     	; 0x1e70 <service_lcd_console+0x138>
    1e18:	c5 34       	cpi	r28, 0x45	; 69
    1e1a:	40 f4       	brcc	.+16     	; 0x1e2c <service_lcd_console+0xf4>
    1e1c:	c2 34       	cpi	r28, 0x42	; 66
    1e1e:	d1 f0       	breq	.+52     	; 0x1e54 <service_lcd_console+0x11c>
    1e20:	c3 34       	cpi	r28, 0x43	; 67
    1e22:	f8 f4       	brcc	.+62     	; 0x1e62 <service_lcd_console+0x12a>
    1e24:	c1 34       	cpi	r28, 0x41	; 65
    1e26:	09 f0       	breq	.+2      	; 0x1e2a <service_lcd_console+0xf2>
    1e28:	6a c1       	rjmp	.+724    	; 0x20fe <service_lcd_console+0x3c6>
    1e2a:	0e c0       	rjmp	.+28     	; 0x1e48 <service_lcd_console+0x110>
    1e2c:	c2 36       	cpi	r28, 0x62	; 98
    1e2e:	91 f0       	breq	.+36     	; 0x1e54 <service_lcd_console+0x11c>
    1e30:	c3 36       	cpi	r28, 0x63	; 99
    1e32:	20 f4       	brcc	.+8      	; 0x1e3c <service_lcd_console+0x104>
    1e34:	c1 36       	cpi	r28, 0x61	; 97
    1e36:	09 f0       	breq	.+2      	; 0x1e3a <service_lcd_console+0x102>
    1e38:	62 c1       	rjmp	.+708    	; 0x20fe <service_lcd_console+0x3c6>
    1e3a:	06 c0       	rjmp	.+12     	; 0x1e48 <service_lcd_console+0x110>
    1e3c:	c3 36       	cpi	r28, 0x63	; 99
    1e3e:	89 f0       	breq	.+34     	; 0x1e62 <service_lcd_console+0x12a>
    1e40:	c4 36       	cpi	r28, 0x64	; 100
    1e42:	09 f0       	breq	.+2      	; 0x1e46 <service_lcd_console+0x10e>
    1e44:	5c c1       	rjmp	.+696    	; 0x20fe <service_lcd_console+0x3c6>
    1e46:	14 c0       	rjmp	.+40     	; 0x1e70 <service_lcd_console+0x138>
					case 'a':
					case 'A':
						STATE_lcd_console = LCD_CONSOLE_STATE_COMMAND;
    1e48:	87 e1       	ldi	r24, 0x17	; 23
    1e4a:	80 93 fd 26 	sts	0x26FD, r24
						lcd_console_channel = CHANNEL_A;
    1e4e:	10 92 fa 25 	sts	0x25FA, r1
						break;
    1e52:	55 c1       	rjmp	.+682    	; 0x20fe <service_lcd_console+0x3c6>
					case 'b':
					case 'B':
						STATE_lcd_console = LCD_CONSOLE_STATE_COMMAND;
    1e54:	87 e1       	ldi	r24, 0x17	; 23
    1e56:	80 93 fd 26 	sts	0x26FD, r24
						lcd_console_channel = CHANNEL_B;
    1e5a:	81 e0       	ldi	r24, 0x01	; 1
    1e5c:	80 93 fa 25 	sts	0x25FA, r24
						break;
    1e60:	4e c1       	rjmp	.+668    	; 0x20fe <service_lcd_console+0x3c6>
					case 'c':
					case 'C':
						STATE_lcd_console = LCD_CONSOLE_STATE_COMMAND;
    1e62:	87 e1       	ldi	r24, 0x17	; 23
    1e64:	80 93 fd 26 	sts	0x26FD, r24
						lcd_console_channel = CHANNEL_C;
    1e68:	82 e0       	ldi	r24, 0x02	; 2
    1e6a:	80 93 fa 25 	sts	0x25FA, r24
						break;
    1e6e:	47 c1       	rjmp	.+654    	; 0x20fe <service_lcd_console+0x3c6>
					case 'd':
					case 'D':
						STATE_lcd_console = LCD_CONSOLE_STATE_COMMAND;
    1e70:	87 e1       	ldi	r24, 0x17	; 23
    1e72:	80 93 fd 26 	sts	0x26FD, r24
						lcd_console_channel = CHANNEL_D;
    1e76:	83 e0       	ldi	r24, 0x03	; 3
    1e78:	80 93 fa 25 	sts	0x25FA, r24
					break;
    1e7c:	40 c1       	rjmp	.+640    	; 0x20fe <service_lcd_console+0x3c6>
				}
			break;
			
			case LCD_CONSOLE_STATE_COMMAND:
				lcd_console_write("CMD"); //xxx
    1e7e:	85 e2       	ldi	r24, 0x25	; 37
    1e80:	92 e2       	ldi	r25, 0x22	; 34
    1e82:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <lcd_console_write>
				switch(incoming){
    1e86:	ca 35       	cpi	r28, 0x5A	; 90
    1e88:	d9 f0       	breq	.+54     	; 0x1ec0 <service_lcd_console+0x188>
    1e8a:	cb 35       	cpi	r28, 0x5B	; 91
    1e8c:	60 f4       	brcc	.+24     	; 0x1ea6 <service_lcd_console+0x16e>
    1e8e:	ce 34       	cpi	r28, 0x4E	; 78
    1e90:	29 f1       	breq	.+74     	; 0x1edc <service_lcd_console+0x1a4>
    1e92:	cf 34       	cpi	r28, 0x4F	; 79
    1e94:	18 f4       	brcc	.+6      	; 0x1e9c <service_lcd_console+0x164>
    1e96:	cd 34       	cpi	r28, 0x4D	; 77
    1e98:	b1 f5       	brne	.+108    	; 0x1f06 <service_lcd_console+0x1ce>
    1e9a:	27 c0       	rjmp	.+78     	; 0x1eea <service_lcd_console+0x1b2>
    1e9c:	c0 35       	cpi	r28, 0x50	; 80
    1e9e:	b9 f0       	breq	.+46     	; 0x1ece <service_lcd_console+0x196>
    1ea0:	c3 35       	cpi	r28, 0x53	; 83
    1ea2:	89 f5       	brne	.+98     	; 0x1f06 <service_lcd_console+0x1ce>
    1ea4:	29 c0       	rjmp	.+82     	; 0x1ef8 <service_lcd_console+0x1c0>
    1ea6:	c0 37       	cpi	r28, 0x70	; 112
    1ea8:	91 f0       	breq	.+36     	; 0x1ece <service_lcd_console+0x196>
    1eaa:	c1 37       	cpi	r28, 0x71	; 113
    1eac:	28 f4       	brcc	.+10     	; 0x1eb8 <service_lcd_console+0x180>
    1eae:	cd 36       	cpi	r28, 0x6D	; 109
    1eb0:	e1 f0       	breq	.+56     	; 0x1eea <service_lcd_console+0x1b2>
    1eb2:	ce 36       	cpi	r28, 0x6E	; 110
    1eb4:	41 f5       	brne	.+80     	; 0x1f06 <service_lcd_console+0x1ce>
    1eb6:	12 c0       	rjmp	.+36     	; 0x1edc <service_lcd_console+0x1a4>
    1eb8:	c3 37       	cpi	r28, 0x73	; 115
    1eba:	f1 f0       	breq	.+60     	; 0x1ef8 <service_lcd_console+0x1c0>
    1ebc:	ca 37       	cpi	r28, 0x7A	; 122
    1ebe:	19 f5       	brne	.+70     	; 0x1f06 <service_lcd_console+0x1ce>
					case 'z':
					case 'Z':
						STATE_lcd_console = LCD_CONSOLE_STATE_VALUE_1;
    1ec0:	88 e1       	ldi	r24, 0x18	; 24
    1ec2:	80 93 fd 26 	sts	0x26FD, r24
						lcd_console_command = LCD_CONSOLE_CMD_RELAY;
    1ec6:	83 e5       	ldi	r24, 0x53	; 83
    1ec8:	80 93 ff 26 	sts	0x26FF, r24
						break;
    1ecc:	18 c1       	rjmp	.+560    	; 0x20fe <service_lcd_console+0x3c6>
					case 'p':
					case 'P':
						STATE_lcd_console = LCD_CONSOLE_STATE_VALUE_1;
    1ece:	88 e1       	ldi	r24, 0x18	; 24
    1ed0:	80 93 fd 26 	sts	0x26FD, r24
						lcd_console_command = LCD_CONSOLE_CMD_MAIN_POS;
    1ed4:	84 e5       	ldi	r24, 0x54	; 84
    1ed6:	80 93 ff 26 	sts	0x26FF, r24
						break;
    1eda:	11 c1       	rjmp	.+546    	; 0x20fe <service_lcd_console+0x3c6>
					case 'n':
					case 'N':
						STATE_lcd_console = LCD_CONSOLE_STATE_VALUE_1;
    1edc:	88 e1       	ldi	r24, 0x18	; 24
    1ede:	80 93 fd 26 	sts	0x26FD, r24
						lcd_console_command = LCD_CONSOLE_CMD_MAIN_NEG;
    1ee2:	85 e5       	ldi	r24, 0x55	; 85
    1ee4:	80 93 ff 26 	sts	0x26FF, r24
						break;
    1ee8:	0a c1       	rjmp	.+532    	; 0x20fe <service_lcd_console+0x3c6>
					case 'm':
					case 'M':
						STATE_lcd_console = LCD_CONSOLE_STATE_VALUE_N;
    1eea:	89 e1       	ldi	r24, 0x19	; 25
    1eec:	80 93 fd 26 	sts	0x26FD, r24
						lcd_console_command = LCD_CONSOLE_CMD_ADJUST_MAX;
    1ef0:	86 e5       	ldi	r24, 0x56	; 86
    1ef2:	80 93 ff 26 	sts	0x26FF, r24
						break;
    1ef6:	03 c1       	rjmp	.+518    	; 0x20fe <service_lcd_console+0x3c6>
					case 's':
					case 'S':
						STATE_lcd_console = LCD_CONSOLE_STATE_VALUE_N;
    1ef8:	89 e1       	ldi	r24, 0x19	; 25
    1efa:	80 93 fd 26 	sts	0x26FD, r24
						lcd_console_command = LCD_CONSOLE_CMD_ADJUST_SET;
    1efe:	87 e5       	ldi	r24, 0x57	; 87
    1f00:	80 93 ff 26 	sts	0x26FF, r24
						break;
    1f04:	fc c0       	rjmp	.+504    	; 0x20fe <service_lcd_console+0x3c6>
					default:
						//RESET ON ERROR
						lcd_console_write("Bad Command");
    1f06:	c7 01       	movw	r24, r14
    1f08:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <lcd_console_write>
						STATE_lcd_console = LCD_CONSOLE_STATE_IDLE;
    1f0c:	86 e1       	ldi	r24, 0x16	; 22
    1f0e:	80 93 fd 26 	sts	0x26FD, r24
    1f12:	f5 c0       	rjmp	.+490    	; 0x20fe <service_lcd_console+0x3c6>
				}
			break;
			
			case LCD_CONSOLE_STATE_VALUE_1:
				lcd_console_write("VAL1"); //xxx
    1f14:	85 e3       	ldi	r24, 0x35	; 53
    1f16:	92 e2       	ldi	r25, 0x22	; 34
    1f18:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <lcd_console_write>
				switch(incoming){
    1f1c:	c9 34       	cpi	r28, 0x49	; 73
    1f1e:	69 f0       	breq	.+26     	; 0x1f3a <service_lcd_console+0x202>
    1f20:	ca 34       	cpi	r28, 0x4A	; 74
    1f22:	28 f4       	brcc	.+10     	; 0x1f2e <service_lcd_console+0x1f6>
    1f24:	8c 2f       	mov	r24, r28
    1f26:	80 53       	subi	r24, 0x30	; 48
    1f28:	82 30       	cpi	r24, 0x02	; 2
    1f2a:	68 f4       	brcc	.+26     	; 0x1f46 <service_lcd_console+0x20e>
    1f2c:	06 c0       	rjmp	.+12     	; 0x1f3a <service_lcd_console+0x202>
    1f2e:	c9 36       	cpi	r28, 0x69	; 105
    1f30:	21 f0       	breq	.+8      	; 0x1f3a <service_lcd_console+0x202>
    1f32:	c6 37       	cpi	r28, 0x76	; 118
    1f34:	11 f0       	breq	.+4      	; 0x1f3a <service_lcd_console+0x202>
    1f36:	c6 35       	cpi	r28, 0x56	; 86
    1f38:	31 f4       	brne	.+12     	; 0x1f46 <service_lcd_console+0x20e>
					case '0':
					case 'v':
					case 'V':
					case 'i':
					case 'I':
						STATE_lcd_console = LCD_CONSOLE_STATE_TERMINATOR_1;
    1f3a:	8d e1       	ldi	r24, 0x1D	; 29
    1f3c:	80 93 fd 26 	sts	0x26FD, r24
						lcd_console_value_1 = incoming;
    1f40:	c0 93 fc 26 	sts	0x26FC, r28
						break;
    1f44:	dc c0       	rjmp	.+440    	; 0x20fe <service_lcd_console+0x3c6>
					default:
						//RESET ON ERROR
						lcd_console_write("Bad Command");
    1f46:	c7 01       	movw	r24, r14
    1f48:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <lcd_console_write>
						STATE_lcd_console = LCD_CONSOLE_STATE_IDLE;
    1f4c:	86 e1       	ldi	r24, 0x16	; 22
    1f4e:	80 93 fd 26 	sts	0x26FD, r24
    1f52:	d5 c0       	rjmp	.+426    	; 0x20fe <service_lcd_console+0x3c6>
				}
			break;
			
			case LCD_CONSOLE_STATE_VALUE_N:
				lcd_console_write("VALN-1"); //xxx
    1f54:	8a e3       	ldi	r24, 0x3A	; 58
    1f56:	92 e2       	ldi	r25, 0x22	; 34
    1f58:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <lcd_console_write>
				switch(incoming){
    1f5c:	8c 2f       	mov	r24, r28
    1f5e:	80 53       	subi	r24, 0x30	; 48
    1f60:	8a 30       	cpi	r24, 0x0A	; 10
    1f62:	30 f4       	brcc	.+12     	; 0x1f70 <service_lcd_console+0x238>
					case '5':
					case '6':
					case '7':
					case '8':
					case '9':
						STATE_lcd_console = LCD_CONSOLE_STATE_VALUE_N2;
    1f64:	8a e1       	ldi	r24, 0x1A	; 26
    1f66:	80 93 fd 26 	sts	0x26FD, r24
						lcd_console_set_value[0] = incoming;
    1f6a:	c0 93 e8 25 	sts	0x25E8, r28
						break;
    1f6e:	c7 c0       	rjmp	.+398    	; 0x20fe <service_lcd_console+0x3c6>
					default:
						//RESET ON ERROR
						lcd_console_write("Bad Command");
    1f70:	c7 01       	movw	r24, r14
    1f72:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <lcd_console_write>
						STATE_lcd_console = LCD_CONSOLE_STATE_IDLE;
    1f76:	86 e1       	ldi	r24, 0x16	; 22
    1f78:	80 93 fd 26 	sts	0x26FD, r24
    1f7c:	c0 c0       	rjmp	.+384    	; 0x20fe <service_lcd_console+0x3c6>
				}
			break;
			
			case LCD_CONSOLE_STATE_VALUE_N2:
			lcd_console_write("VALN-2"); //xxx
    1f7e:	c6 01       	movw	r24, r12
    1f80:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <lcd_console_write>
			switch(incoming){
    1f84:	cd 30       	cpi	r28, 0x0D	; 13
    1f86:	61 f0       	breq	.+24     	; 0x1fa0 <service_lcd_console+0x268>
    1f88:	cd 30       	cpi	r28, 0x0D	; 13
    1f8a:	90 f0       	brcs	.+36     	; 0x1fb0 <service_lcd_console+0x278>
    1f8c:	8c 2f       	mov	r24, r28
    1f8e:	80 53       	subi	r24, 0x30	; 48
    1f90:	8a 30       	cpi	r24, 0x0A	; 10
    1f92:	70 f4       	brcc	.+28     	; 0x1fb0 <service_lcd_console+0x278>
				case '5':
				case '6':
				case '7':
				case '8':
				case '9':
					STATE_lcd_console = LCD_CONSOLE_STATE_VALUE_N3;
    1f94:	8b e1       	ldi	r24, 0x1B	; 27
    1f96:	80 93 fd 26 	sts	0x26FD, r24
					lcd_console_set_value[1] = incoming;
    1f9a:	f1 01       	movw	r30, r2
    1f9c:	c0 83       	st	Z, r28
					break;
    1f9e:	af c0       	rjmp	.+350    	; 0x20fe <service_lcd_console+0x3c6>
				case 0x0D:
					lcd_console_set_value[1] = 0; //terminate string
    1fa0:	f1 01       	movw	r30, r2
    1fa2:	10 82       	st	Z, r1
					lcd_console_pwr_adj_set();
    1fa4:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <lcd_console_pwr_adj_set>
					STATE_lcd_console = LCD_CONSOLE_STATE_IDLE;
    1fa8:	86 e1       	ldi	r24, 0x16	; 22
    1faa:	80 93 fd 26 	sts	0x26FD, r24
					break;
    1fae:	a7 c0       	rjmp	.+334    	; 0x20fe <service_lcd_console+0x3c6>
				default:
					//RESET ON ERROR
					lcd_console_write("Bad Command");
    1fb0:	c7 01       	movw	r24, r14
    1fb2:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <lcd_console_write>
					STATE_lcd_console = LCD_CONSOLE_STATE_IDLE;
    1fb6:	86 e1       	ldi	r24, 0x16	; 22
    1fb8:	80 93 fd 26 	sts	0x26FD, r24
    1fbc:	a0 c0       	rjmp	.+320    	; 0x20fe <service_lcd_console+0x3c6>
			}
			break;
			
			case LCD_CONSOLE_STATE_VALUE_N3:
			lcd_console_write("VALN-3"); //xxx
    1fbe:	c4 01       	movw	r24, r8
    1fc0:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <lcd_console_write>
			switch(incoming){
    1fc4:	cd 30       	cpi	r28, 0x0D	; 13
    1fc6:	69 f0       	breq	.+26     	; 0x1fe2 <service_lcd_console+0x2aa>
    1fc8:	cd 30       	cpi	r28, 0x0D	; 13
    1fca:	a0 f0       	brcs	.+40     	; 0x1ff4 <service_lcd_console+0x2bc>
    1fcc:	8c 2f       	mov	r24, r28
    1fce:	80 53       	subi	r24, 0x30	; 48
    1fd0:	8a 30       	cpi	r24, 0x0A	; 10
    1fd2:	80 f4       	brcc	.+32     	; 0x1ff4 <service_lcd_console+0x2bc>
				case '5':
				case '6':
				case '7':
				case '8':
				case '9':
					STATE_lcd_console = LCD_CONSOLE_STATE_VALUE_N4;
    1fd4:	8c e1       	ldi	r24, 0x1C	; 28
    1fd6:	80 93 fd 26 	sts	0x26FD, r24
					lcd_console_set_value[2] = incoming;
    1fda:	ea ee       	ldi	r30, 0xEA	; 234
    1fdc:	f5 e2       	ldi	r31, 0x25	; 37
    1fde:	c0 83       	st	Z, r28
					break;
    1fe0:	8e c0       	rjmp	.+284    	; 0x20fe <service_lcd_console+0x3c6>
				case 0x0D:
					lcd_console_set_value[2] = 0; //terminate string
    1fe2:	ea ee       	ldi	r30, 0xEA	; 234
    1fe4:	f5 e2       	ldi	r31, 0x25	; 37
    1fe6:	10 82       	st	Z, r1
					lcd_console_pwr_adj_set();
    1fe8:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <lcd_console_pwr_adj_set>
					STATE_lcd_console = LCD_CONSOLE_STATE_IDLE;
    1fec:	86 e1       	ldi	r24, 0x16	; 22
    1fee:	80 93 fd 26 	sts	0x26FD, r24
					break;
    1ff2:	85 c0       	rjmp	.+266    	; 0x20fe <service_lcd_console+0x3c6>
				default:
					//RESET ON ERROR
					lcd_console_write("Bad Command");
    1ff4:	c7 01       	movw	r24, r14
    1ff6:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <lcd_console_write>
					STATE_lcd_console = LCD_CONSOLE_STATE_IDLE;
    1ffa:	86 e1       	ldi	r24, 0x16	; 22
    1ffc:	80 93 fd 26 	sts	0x26FD, r24
    2000:	7e c0       	rjmp	.+252    	; 0x20fe <service_lcd_console+0x3c6>
			}
			break;
			
			case LCD_CONSOLE_STATE_VALUE_N4:
			lcd_console_write("VALN-4"); //xxx
    2002:	c5 01       	movw	r24, r10
    2004:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <lcd_console_write>
			switch(incoming){
    2008:	cd 30       	cpi	r28, 0x0D	; 13
    200a:	69 f0       	breq	.+26     	; 0x2026 <service_lcd_console+0x2ee>
    200c:	cd 30       	cpi	r28, 0x0D	; 13
    200e:	a0 f0       	brcs	.+40     	; 0x2038 <service_lcd_console+0x300>
    2010:	8c 2f       	mov	r24, r28
    2012:	80 53       	subi	r24, 0x30	; 48
    2014:	8a 30       	cpi	r24, 0x0A	; 10
    2016:	80 f4       	brcc	.+32     	; 0x2038 <service_lcd_console+0x300>
				case '5':
				case '6':
				case '7':
				case '8':
				case '9':
					STATE_lcd_console = LCD_CONSOLE_STATE_TERMINATOR_N;
    2018:	8e e1       	ldi	r24, 0x1E	; 30
    201a:	80 93 fd 26 	sts	0x26FD, r24
					lcd_console_set_value[3] = incoming;
    201e:	eb ee       	ldi	r30, 0xEB	; 235
    2020:	f5 e2       	ldi	r31, 0x25	; 37
    2022:	c0 83       	st	Z, r28
					break;
    2024:	6c c0       	rjmp	.+216    	; 0x20fe <service_lcd_console+0x3c6>
				case 0x0D:
					lcd_console_set_value[3] = 0; //terminate string
    2026:	eb ee       	ldi	r30, 0xEB	; 235
    2028:	f5 e2       	ldi	r31, 0x25	; 37
    202a:	10 82       	st	Z, r1
					lcd_console_pwr_adj_set();
    202c:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <lcd_console_pwr_adj_set>
					STATE_lcd_console = LCD_CONSOLE_STATE_IDLE;
    2030:	86 e1       	ldi	r24, 0x16	; 22
    2032:	80 93 fd 26 	sts	0x26FD, r24
				break;
    2036:	63 c0       	rjmp	.+198    	; 0x20fe <service_lcd_console+0x3c6>
				default:
					//RESET ON ERROR
					lcd_console_write("Bad Command");
    2038:	c7 01       	movw	r24, r14
    203a:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <lcd_console_write>
					STATE_lcd_console = LCD_CONSOLE_STATE_IDLE;
    203e:	86 e1       	ldi	r24, 0x16	; 22
    2040:	80 93 fd 26 	sts	0x26FD, r24
    2044:	5c c0       	rjmp	.+184    	; 0x20fe <service_lcd_console+0x3c6>
			}
			break;
			
			case LCD_CONSOLE_STATE_TERMINATOR_N:
				lcd_console_write("TERM_N"); //xxx
    2046:	c2 01       	movw	r24, r4
    2048:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <lcd_console_write>
				switch(incoming){
    204c:	cd 30       	cpi	r28, 0x0D	; 13
    204e:	19 f4       	brne	.+6      	; 0x2056 <service_lcd_console+0x31e>
					case 0x0D:
						lcd_console_pwr_adj_set();
    2050:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <lcd_console_pwr_adj_set>
						break;
    2054:	03 c0       	rjmp	.+6      	; 0x205c <service_lcd_console+0x324>
					default:
						//RESET ON ERROR
						lcd_console_write("Bad Command");
    2056:	c7 01       	movw	r24, r14
    2058:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <lcd_console_write>
				}
				STATE_lcd_console = LCD_CONSOLE_STATE_IDLE;
    205c:	86 e1       	ldi	r24, 0x16	; 22
    205e:	80 93 fd 26 	sts	0x26FD, r24
			break;
    2062:	4d c0       	rjmp	.+154    	; 0x20fe <service_lcd_console+0x3c6>
			
			case LCD_CONSOLE_STATE_TERMINATOR_1:
				lcd_console_write("TERM1"); //xxx
    2064:	c3 01       	movw	r24, r6
    2066:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <lcd_console_write>
				switch(incoming){
    206a:	cd 30       	cpi	r28, 0x0D	; 13
    206c:	09 f0       	breq	.+2      	; 0x2070 <service_lcd_console+0x338>
    206e:	41 c0       	rjmp	.+130    	; 0x20f2 <service_lcd_console+0x3ba>
					case 0x0D:
						switch(lcd_console_value_1){
    2070:	80 91 fc 26 	lds	r24, 0x26FC
    2074:	89 34       	cpi	r24, 0x49	; 73
    2076:	31 f1       	breq	.+76     	; 0x20c4 <service_lcd_console+0x38c>
    2078:	8a 34       	cpi	r24, 0x4A	; 74
    207a:	28 f4       	brcc	.+10     	; 0x2086 <service_lcd_console+0x34e>
    207c:	80 33       	cpi	r24, 0x30	; 48
    207e:	b1 f0       	breq	.+44     	; 0x20ac <service_lcd_console+0x374>
    2080:	81 33       	cpi	r24, 0x31	; 49
    2082:	81 f5       	brne	.+96     	; 0x20e4 <service_lcd_console+0x3ac>
    2084:	07 c0       	rjmp	.+14     	; 0x2094 <service_lcd_console+0x35c>
    2086:	89 36       	cpi	r24, 0x69	; 105
    2088:	e9 f0       	breq	.+58     	; 0x20c4 <service_lcd_console+0x38c>
    208a:	86 37       	cpi	r24, 0x76	; 118
    208c:	d9 f0       	breq	.+54     	; 0x20c4 <service_lcd_console+0x38c>
    208e:	86 35       	cpi	r24, 0x56	; 86
    2090:	49 f5       	brne	.+82     	; 0x20e4 <service_lcd_console+0x3ac>
    2092:	18 c0       	rjmp	.+48     	; 0x20c4 <service_lcd_console+0x38c>
							case '1':
								STATE_lcd_console = LCD_CONSOLE_STATE_IDLE;
    2094:	86 e1       	ldi	r24, 0x16	; 22
    2096:	80 93 fd 26 	sts	0x26FD, r24
								brain_power_on(lcd_console_channel);
    209a:	80 91 fa 25 	lds	r24, 0x25FA
    209e:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <brain_power_on>
								lcd_console_write("POWER ON");
    20a2:	83 e6       	ldi	r24, 0x63	; 99
    20a4:	92 e2       	ldi	r25, 0x22	; 34
    20a6:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <lcd_console_write>
								break;
    20aa:	29 c0       	rjmp	.+82     	; 0x20fe <service_lcd_console+0x3c6>
							case '0':
								STATE_lcd_console = LCD_CONSOLE_STATE_IDLE;
    20ac:	86 e1       	ldi	r24, 0x16	; 22
    20ae:	80 93 fd 26 	sts	0x26FD, r24
								brain_power_off(lcd_console_channel);
    20b2:	80 91 fa 25 	lds	r24, 0x25FA
    20b6:	0e 94 09 06 	call	0xc12	; 0xc12 <brain_power_off>
								lcd_console_write("POWER OFF");
    20ba:	8c e6       	ldi	r24, 0x6C	; 108
    20bc:	92 e2       	ldi	r25, 0x22	; 34
    20be:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <lcd_console_write>
								break;
    20c2:	1d c0       	rjmp	.+58     	; 0x20fe <service_lcd_console+0x3c6>
							case 'v':
							case 'V':
							case 'i':
							case 'I':
								STATE_lcd_console = LCD_CONSOLE_STATE_IDLE;
    20c4:	86 e1       	ldi	r24, 0x16	; 22
    20c6:	80 93 fd 26 	sts	0x26FD, r24
								//Report current or voltage on selected channel
								lcd_console_meter(lcd_console_channel, lcd_console_command);
    20ca:	80 91 fa 25 	lds	r24, 0x25FA
    20ce:	60 91 ff 26 	lds	r22, 0x26FF
    20d2:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <lcd_console_meter>
								uart_enqueue_string(&uctrl, lcd_console_meter_value);
    20d6:	80 ea       	ldi	r24, 0xA0	; 160
    20d8:	98 e0       	ldi	r25, 0x08	; 8
    20da:	6e ee       	ldi	r22, 0xEE	; 238
    20dc:	75 e2       	ldi	r23, 0x25	; 37
    20de:	0e 94 37 26 	call	0x4c6e	; 0x4c6e <uart_enqueue_string>
								break;
    20e2:	0d c0       	rjmp	.+26     	; 0x20fe <service_lcd_console+0x3c6>
							default:
								//RESET ON ERROR
								lcd_console_write("Bad Command");
    20e4:	c7 01       	movw	r24, r14
    20e6:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <lcd_console_write>
								STATE_lcd_console = LCD_CONSOLE_STATE_IDLE;
    20ea:	86 e1       	ldi	r24, 0x16	; 22
    20ec:	80 93 fd 26 	sts	0x26FD, r24
    20f0:	06 c0       	rjmp	.+12     	; 0x20fe <service_lcd_console+0x3c6>
						}
						break;
					default:
						//RESET ON ERROR
						lcd_console_write("Bad Command");
    20f2:	c7 01       	movw	r24, r14
    20f4:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <lcd_console_write>
						STATE_lcd_console = LCD_CONSOLE_STATE_IDLE;
    20f8:	86 e1       	ldi	r24, 0x16	; 22
    20fa:	80 93 fd 26 	sts	0x26FD, r24
//#############################################################

//Used to refresh the console
void service_lcd_console(){
	//Process command buffer
	while (uart_icount(&uctrl) > 0){
    20fe:	80 ea       	ldi	r24, 0xA0	; 160
    2100:	98 e0       	ldi	r25, 0x08	; 8
    2102:	0e 94 6a 2d 	call	0x5ad4	; 0x5ad4 <uart_icount>
    2106:	00 97       	sbiw	r24, 0x00	; 0
    2108:	09 f0       	breq	.+2      	; 0x210c <service_lcd_console+0x3d4>
    210a:	54 ce       	rjmp	.-856    	; 0x1db4 <service_lcd_console+0x7c>
	}
	
	//Update console display if in CONSOLE MENU
	static uint8_t next_row_to_output = 0;
	uint8_t num_rows_output = 0;
	if (STATE_menu != MENU_CONSOLE){return;}
    210c:	80 91 e7 25 	lds	r24, 0x25E7
    2110:	82 32       	cpi	r24, 0x22	; 34
    2112:	b1 f5       	brne	.+108    	; 0x2180 <service_lcd_console+0x448>
    2114:	c9 e0       	ldi	r28, 0x09	; 9
	while((uart_count(&ulcd) < 512)&&(num_rows_output<LCD_CONSOLE_NUM_ROWS)){
		if(lcd_buffer_dirty[next_row_to_output]){
    2116:	01 e0       	ldi	r16, 0x01	; 1
    2118:	17 e2       	ldi	r17, 0x27	; 39
			lcd_command(lcd_console[next_row_to_output]);
    211a:	0f 2e       	mov	r0, r31
    211c:	fb e6       	ldi	r31, 0x6B	; 107
    211e:	ef 2e       	mov	r14, r31
    2120:	ff 24       	eor	r15, r15
    2122:	f0 2d       	mov	r31, r0
    2124:	23 c0       	rjmp	.+70     	; 0x216c <service_lcd_console+0x434>
	//Update console display if in CONSOLE MENU
	static uint8_t next_row_to_output = 0;
	uint8_t num_rows_output = 0;
	if (STATE_menu != MENU_CONSOLE){return;}
	while((uart_count(&ulcd) < 512)&&(num_rows_output<LCD_CONSOLE_NUM_ROWS)){
		if(lcd_buffer_dirty[next_row_to_output]){
    2126:	20 91 7d 22 	lds	r18, 0x227D
    212a:	f8 01       	movw	r30, r16
    212c:	e2 0f       	add	r30, r18
    212e:	f1 1d       	adc	r31, r1
    2130:	80 81       	ld	r24, Z
    2132:	88 23       	and	r24, r24
    2134:	91 f0       	breq	.+36     	; 0x215a <service_lcd_console+0x422>
			lcd_command(lcd_console[next_row_to_output]);
    2136:	30 e0       	ldi	r19, 0x00	; 0
    2138:	2e 9d       	mul	r18, r14
    213a:	c0 01       	movw	r24, r0
    213c:	2f 9d       	mul	r18, r15
    213e:	90 0d       	add	r25, r0
    2140:	3e 9d       	mul	r19, r14
    2142:	90 0d       	add	r25, r0
    2144:	11 24       	eor	r1, r1
    2146:	82 57       	subi	r24, 0x72	; 114
    2148:	9d 4d       	sbci	r25, 0xDD	; 221
    214a:	0e 94 86 0b 	call	0x170c	; 0x170c <lcd_command>
			lcd_buffer_dirty[next_row_to_output] = false;
    214e:	80 91 7d 22 	lds	r24, 0x227D
    2152:	f8 01       	movw	r30, r16
    2154:	e8 0f       	add	r30, r24
    2156:	f1 1d       	adc	r31, r1
    2158:	10 82       	st	Z, r1
		}
		next_row_to_output++; num_rows_output++;
    215a:	80 91 7d 22 	lds	r24, 0x227D
    215e:	8f 5f       	subi	r24, 0xFF	; 255
    2160:	80 93 7d 22 	sts	0x227D, r24
		if(next_row_to_output>=LCD_CONSOLE_NUM_ROWS){next_row_to_output=0;}
    2164:	88 30       	cpi	r24, 0x08	; 8
    2166:	10 f0       	brcs	.+4      	; 0x216c <service_lcd_console+0x434>
    2168:	10 92 7d 22 	sts	0x227D, r1
	
	//Update console display if in CONSOLE MENU
	static uint8_t next_row_to_output = 0;
	uint8_t num_rows_output = 0;
	if (STATE_menu != MENU_CONSOLE){return;}
	while((uart_count(&ulcd) < 512)&&(num_rows_output<LCD_CONSOLE_NUM_ROWS)){
    216c:	80 eb       	ldi	r24, 0xB0	; 176
    216e:	9b e0       	ldi	r25, 0x0B	; 11
    2170:	0e 94 f0 25 	call	0x4be0	; 0x4be0 <uart_count>
    2174:	f2 e0       	ldi	r31, 0x02	; 2
    2176:	80 30       	cpi	r24, 0x00	; 0
    2178:	9f 07       	cpc	r25, r31
    217a:	10 f4       	brcc	.+4      	; 0x2180 <service_lcd_console+0x448>
    217c:	c1 50       	subi	r28, 0x01	; 1
    217e:	99 f6       	brne	.-90     	; 0x2126 <service_lcd_console+0x3ee>
			lcd_buffer_dirty[next_row_to_output] = false;
		}
		next_row_to_output++; num_rows_output++;
		if(next_row_to_output>=LCD_CONSOLE_NUM_ROWS){next_row_to_output=0;}
	}
}
    2180:	cf 91       	pop	r28
    2182:	1f 91       	pop	r17
    2184:	0f 91       	pop	r16
    2186:	ff 90       	pop	r15
    2188:	ef 90       	pop	r14
    218a:	df 90       	pop	r13
    218c:	cf 90       	pop	r12
    218e:	bf 90       	pop	r11
    2190:	af 90       	pop	r10
    2192:	9f 90       	pop	r9
    2194:	8f 90       	pop	r8
    2196:	7f 90       	pop	r7
    2198:	6f 90       	pop	r6
    219a:	5f 90       	pop	r5
    219c:	4f 90       	pop	r4
    219e:	3f 90       	pop	r3
    21a0:	2f 90       	pop	r2
    21a2:	08 95       	ret

000021a4 <init_lcd_touch>:
//#############################################################
//## INITIALIZATION ROUTINE
//#############################################################

void init_lcd_touch(){
	lcd_last_touch_command = LCD_TOUCH_NONE;
    21a4:	85 e1       	ldi	r24, 0x15	; 21
    21a6:	80 93 12 27 	sts	0x2712, r24
	lcd_touch_buffer[LCD_TOUCH_BUFFER_LEN] = 0; //string termination to help with debug printing of the buffer	
    21aa:	10 92 1f 27 	sts	0x271F, r1
}
    21ae:	08 95       	ret

000021b0 <lcd_get_touch>:
//#############################################################

/// Returns the code for the last thing touched by user
/** Clears the touch history on read*/
uint8_t lcd_get_touch(){
	uint8_t last = lcd_last_touch_command;
    21b0:	80 91 12 27 	lds	r24, 0x2712
	lcd_last_touch_command = LCD_TOUCH_NONE;
    21b4:	95 e1       	ldi	r25, 0x15	; 21
    21b6:	90 93 12 27 	sts	0x2712, r25
	return last;
}
    21ba:	08 95       	ret

000021bc <lcd_set_touch>:
	
void lcd_set_touch(uint8_t latest){
	//Rotate buffer
	for (uint8_t i=0;i<LCD_TOUCH_BUFFER_LEN-1;i++){lcd_touch_buffer[LCD_TOUCH_BUFFER_LEN-1-i] = lcd_touch_buffer[LCD_TOUCH_BUFFER_LEN-2-i];}
    21bc:	2d e1       	ldi	r18, 0x1D	; 29
    21be:	37 e2       	ldi	r19, 0x27	; 39
    21c0:	90 91 1d 27 	lds	r25, 0x271D
    21c4:	90 93 1e 27 	sts	0x271E, r25
    21c8:	d9 01       	movw	r26, r18
    21ca:	9e 91       	ld	r25, -X
    21cc:	90 93 1d 27 	sts	0x271D, r25
    21d0:	f9 01       	movw	r30, r18
    21d2:	32 97       	sbiw	r30, 0x02	; 2
    21d4:	90 81       	ld	r25, Z
    21d6:	9c 93       	st	X, r25
    21d8:	d9 01       	movw	r26, r18
    21da:	13 97       	sbiw	r26, 0x03	; 3
    21dc:	9c 91       	ld	r25, X
    21de:	90 83       	st	Z, r25
    21e0:	f9 01       	movw	r30, r18
    21e2:	34 97       	sbiw	r30, 0x04	; 4
    21e4:	90 81       	ld	r25, Z
    21e6:	9c 93       	st	X, r25
	//Add to front (0-index)
	lcd_touch_buffer[0] = latest;
    21e8:	80 83       	st	Z, r24

	//Analyze (remember reverse order)

	//Top Menu Navigation
		if ((lcd_touch_buffer[0]==0x0D)&&(lcd_touch_buffer[1]=='2')&&(lcd_touch_buffer[2]=='1')&&(lcd_touch_buffer[3]=='P')&&(lcd_touch_buffer[4]=='Z')&&(lcd_touch_buffer[5]=='T')){lcd_last_touch_command=LCD_TOUCH_OUTPUT;return;}
    21ea:	80 81       	ld	r24, Z
    21ec:	8d 30       	cpi	r24, 0x0D	; 13
    21ee:	c1 f4       	brne	.+48     	; 0x2220 <lcd_set_touch+0x64>
    21f0:	80 91 1a 27 	lds	r24, 0x271A
    21f4:	82 33       	cpi	r24, 0x32	; 50
    21f6:	a1 f4       	brne	.+40     	; 0x2220 <lcd_set_touch+0x64>
    21f8:	80 91 1b 27 	lds	r24, 0x271B
    21fc:	81 33       	cpi	r24, 0x31	; 49
    21fe:	81 f4       	brne	.+32     	; 0x2220 <lcd_set_touch+0x64>
    2200:	80 91 1c 27 	lds	r24, 0x271C
    2204:	80 35       	cpi	r24, 0x50	; 80
    2206:	61 f4       	brne	.+24     	; 0x2220 <lcd_set_touch+0x64>
    2208:	80 91 1d 27 	lds	r24, 0x271D
    220c:	8a 35       	cpi	r24, 0x5A	; 90
    220e:	41 f4       	brne	.+16     	; 0x2220 <lcd_set_touch+0x64>
    2210:	80 91 1e 27 	lds	r24, 0x271E
    2214:	84 35       	cpi	r24, 0x54	; 84
    2216:	21 f4       	brne	.+8      	; 0x2220 <lcd_set_touch+0x64>
    2218:	8c e0       	ldi	r24, 0x0C	; 12
    221a:	80 93 12 27 	sts	0x2712, r24
    221e:	08 95       	ret
		if ((lcd_touch_buffer[0]==0x0D)&&(lcd_touch_buffer[1]=='3')&&(lcd_touch_buffer[2]=='1')&&(lcd_touch_buffer[3]=='P')&&(lcd_touch_buffer[4]=='Z')&&(lcd_touch_buffer[5]=='T')){lcd_last_touch_command=LCD_TOUCH_CONTROL;return;}
    2220:	80 91 19 27 	lds	r24, 0x2719
    2224:	8d 30       	cpi	r24, 0x0D	; 13
    2226:	c1 f4       	brne	.+48     	; 0x2258 <lcd_set_touch+0x9c>
    2228:	80 91 1a 27 	lds	r24, 0x271A
    222c:	83 33       	cpi	r24, 0x33	; 51
    222e:	a1 f4       	brne	.+40     	; 0x2258 <lcd_set_touch+0x9c>
    2230:	80 91 1b 27 	lds	r24, 0x271B
    2234:	81 33       	cpi	r24, 0x31	; 49
    2236:	81 f4       	brne	.+32     	; 0x2258 <lcd_set_touch+0x9c>
    2238:	80 91 1c 27 	lds	r24, 0x271C
    223c:	80 35       	cpi	r24, 0x50	; 80
    223e:	61 f4       	brne	.+24     	; 0x2258 <lcd_set_touch+0x9c>
    2240:	80 91 1d 27 	lds	r24, 0x271D
    2244:	8a 35       	cpi	r24, 0x5A	; 90
    2246:	41 f4       	brne	.+16     	; 0x2258 <lcd_set_touch+0x9c>
    2248:	80 91 1e 27 	lds	r24, 0x271E
    224c:	84 35       	cpi	r24, 0x54	; 84
    224e:	21 f4       	brne	.+8      	; 0x2258 <lcd_set_touch+0x9c>
    2250:	8d e0       	ldi	r24, 0x0D	; 13
    2252:	80 93 12 27 	sts	0x2712, r24
    2256:	08 95       	ret
		if ((lcd_touch_buffer[0]==0x0D)&&(lcd_touch_buffer[1]=='4')&&(lcd_touch_buffer[2]=='1')&&(lcd_touch_buffer[3]=='P')&&(lcd_touch_buffer[4]=='Z')&&(lcd_touch_buffer[5]=='T')){lcd_last_touch_command=LCD_TOUCH_CONSOLE;return;}
    2258:	80 91 19 27 	lds	r24, 0x2719
    225c:	8d 30       	cpi	r24, 0x0D	; 13
    225e:	c1 f4       	brne	.+48     	; 0x2290 <lcd_set_touch+0xd4>
    2260:	80 91 1a 27 	lds	r24, 0x271A
    2264:	84 33       	cpi	r24, 0x34	; 52
    2266:	a1 f4       	brne	.+40     	; 0x2290 <lcd_set_touch+0xd4>
    2268:	80 91 1b 27 	lds	r24, 0x271B
    226c:	81 33       	cpi	r24, 0x31	; 49
    226e:	81 f4       	brne	.+32     	; 0x2290 <lcd_set_touch+0xd4>
    2270:	80 91 1c 27 	lds	r24, 0x271C
    2274:	80 35       	cpi	r24, 0x50	; 80
    2276:	61 f4       	brne	.+24     	; 0x2290 <lcd_set_touch+0xd4>
    2278:	80 91 1d 27 	lds	r24, 0x271D
    227c:	8a 35       	cpi	r24, 0x5A	; 90
    227e:	41 f4       	brne	.+16     	; 0x2290 <lcd_set_touch+0xd4>
    2280:	80 91 1e 27 	lds	r24, 0x271E
    2284:	84 35       	cpi	r24, 0x54	; 84
    2286:	21 f4       	brne	.+8      	; 0x2290 <lcd_set_touch+0xd4>
    2288:	8e e0       	ldi	r24, 0x0E	; 14
    228a:	80 93 12 27 	sts	0x2712, r24
    228e:	08 95       	ret
	//Control Screen		
		if ((lcd_touch_buffer[0]==0x0D)&&(lcd_touch_buffer[1]=='7')&&(lcd_touch_buffer[2]=='1')&&(lcd_touch_buffer[3]=='P')&&(lcd_touch_buffer[4]=='Z')&&(lcd_touch_buffer[5]=='T')){lcd_last_touch_command=LCD_TOUCH_ROW_A;return;}
    2290:	80 91 19 27 	lds	r24, 0x2719
    2294:	8d 30       	cpi	r24, 0x0D	; 13
    2296:	c1 f4       	brne	.+48     	; 0x22c8 <lcd_set_touch+0x10c>
    2298:	80 91 1a 27 	lds	r24, 0x271A
    229c:	87 33       	cpi	r24, 0x37	; 55
    229e:	a1 f4       	brne	.+40     	; 0x22c8 <lcd_set_touch+0x10c>
    22a0:	80 91 1b 27 	lds	r24, 0x271B
    22a4:	81 33       	cpi	r24, 0x31	; 49
    22a6:	81 f4       	brne	.+32     	; 0x22c8 <lcd_set_touch+0x10c>
    22a8:	80 91 1c 27 	lds	r24, 0x271C
    22ac:	80 35       	cpi	r24, 0x50	; 80
    22ae:	61 f4       	brne	.+24     	; 0x22c8 <lcd_set_touch+0x10c>
    22b0:	80 91 1d 27 	lds	r24, 0x271D
    22b4:	8a 35       	cpi	r24, 0x5A	; 90
    22b6:	41 f4       	brne	.+16     	; 0x22c8 <lcd_set_touch+0x10c>
    22b8:	80 91 1e 27 	lds	r24, 0x271E
    22bc:	84 35       	cpi	r24, 0x54	; 84
    22be:	21 f4       	brne	.+8      	; 0x22c8 <lcd_set_touch+0x10c>
    22c0:	81 e1       	ldi	r24, 0x11	; 17
    22c2:	80 93 12 27 	sts	0x2712, r24
    22c6:	08 95       	ret
		if ((lcd_touch_buffer[0]==0x0D)&&(lcd_touch_buffer[1]=='8')&&(lcd_touch_buffer[2]=='1')&&(lcd_touch_buffer[3]=='P')&&(lcd_touch_buffer[4]=='Z')&&(lcd_touch_buffer[5]=='T')){lcd_last_touch_command=LCD_TOUCH_ROW_B;return;}
    22c8:	80 91 19 27 	lds	r24, 0x2719
    22cc:	8d 30       	cpi	r24, 0x0D	; 13
    22ce:	c1 f4       	brne	.+48     	; 0x2300 <lcd_set_touch+0x144>
    22d0:	80 91 1a 27 	lds	r24, 0x271A
    22d4:	88 33       	cpi	r24, 0x38	; 56
    22d6:	a1 f4       	brne	.+40     	; 0x2300 <lcd_set_touch+0x144>
    22d8:	80 91 1b 27 	lds	r24, 0x271B
    22dc:	81 33       	cpi	r24, 0x31	; 49
    22de:	81 f4       	brne	.+32     	; 0x2300 <lcd_set_touch+0x144>
    22e0:	80 91 1c 27 	lds	r24, 0x271C
    22e4:	80 35       	cpi	r24, 0x50	; 80
    22e6:	61 f4       	brne	.+24     	; 0x2300 <lcd_set_touch+0x144>
    22e8:	80 91 1d 27 	lds	r24, 0x271D
    22ec:	8a 35       	cpi	r24, 0x5A	; 90
    22ee:	41 f4       	brne	.+16     	; 0x2300 <lcd_set_touch+0x144>
    22f0:	80 91 1e 27 	lds	r24, 0x271E
    22f4:	84 35       	cpi	r24, 0x54	; 84
    22f6:	21 f4       	brne	.+8      	; 0x2300 <lcd_set_touch+0x144>
    22f8:	82 e1       	ldi	r24, 0x12	; 18
    22fa:	80 93 12 27 	sts	0x2712, r24
    22fe:	08 95       	ret
		if ((lcd_touch_buffer[0]==0x0D)&&(lcd_touch_buffer[1]=='9')&&(lcd_touch_buffer[2]=='1')&&(lcd_touch_buffer[3]=='P')&&(lcd_touch_buffer[4]=='Z')&&(lcd_touch_buffer[5]=='T')){lcd_last_touch_command=LCD_TOUCH_ROW_C;return;}
    2300:	80 91 19 27 	lds	r24, 0x2719
    2304:	8d 30       	cpi	r24, 0x0D	; 13
    2306:	c1 f4       	brne	.+48     	; 0x2338 <lcd_set_touch+0x17c>
    2308:	80 91 1a 27 	lds	r24, 0x271A
    230c:	89 33       	cpi	r24, 0x39	; 57
    230e:	a1 f4       	brne	.+40     	; 0x2338 <lcd_set_touch+0x17c>
    2310:	80 91 1b 27 	lds	r24, 0x271B
    2314:	81 33       	cpi	r24, 0x31	; 49
    2316:	81 f4       	brne	.+32     	; 0x2338 <lcd_set_touch+0x17c>
    2318:	80 91 1c 27 	lds	r24, 0x271C
    231c:	80 35       	cpi	r24, 0x50	; 80
    231e:	61 f4       	brne	.+24     	; 0x2338 <lcd_set_touch+0x17c>
    2320:	80 91 1d 27 	lds	r24, 0x271D
    2324:	8a 35       	cpi	r24, 0x5A	; 90
    2326:	41 f4       	brne	.+16     	; 0x2338 <lcd_set_touch+0x17c>
    2328:	80 91 1e 27 	lds	r24, 0x271E
    232c:	84 35       	cpi	r24, 0x54	; 84
    232e:	21 f4       	brne	.+8      	; 0x2338 <lcd_set_touch+0x17c>
    2330:	83 e1       	ldi	r24, 0x13	; 19
    2332:	80 93 12 27 	sts	0x2712, r24
    2336:	08 95       	ret
		if ((lcd_touch_buffer[0]==0x0D)&&(lcd_touch_buffer[1]=='0')&&(lcd_touch_buffer[2]=='2')&&(lcd_touch_buffer[3]=='P')&&(lcd_touch_buffer[4]=='Z')&&(lcd_touch_buffer[5]=='T')){lcd_last_touch_command=LCD_TOUCH_ROW_D;return;}
    2338:	80 91 19 27 	lds	r24, 0x2719
    233c:	8d 30       	cpi	r24, 0x0D	; 13
    233e:	c1 f4       	brne	.+48     	; 0x2370 <lcd_set_touch+0x1b4>
    2340:	80 91 1a 27 	lds	r24, 0x271A
    2344:	80 33       	cpi	r24, 0x30	; 48
    2346:	a1 f4       	brne	.+40     	; 0x2370 <lcd_set_touch+0x1b4>
    2348:	80 91 1b 27 	lds	r24, 0x271B
    234c:	82 33       	cpi	r24, 0x32	; 50
    234e:	81 f4       	brne	.+32     	; 0x2370 <lcd_set_touch+0x1b4>
    2350:	80 91 1c 27 	lds	r24, 0x271C
    2354:	80 35       	cpi	r24, 0x50	; 80
    2356:	61 f4       	brne	.+24     	; 0x2370 <lcd_set_touch+0x1b4>
    2358:	80 91 1d 27 	lds	r24, 0x271D
    235c:	8a 35       	cpi	r24, 0x5A	; 90
    235e:	41 f4       	brne	.+16     	; 0x2370 <lcd_set_touch+0x1b4>
    2360:	80 91 1e 27 	lds	r24, 0x271E
    2364:	84 35       	cpi	r24, 0x54	; 84
    2366:	21 f4       	brne	.+8      	; 0x2370 <lcd_set_touch+0x1b4>
    2368:	84 e1       	ldi	r24, 0x14	; 20
    236a:	80 93 12 27 	sts	0x2712, r24
    236e:	08 95       	ret
	//Control Dialog Window
		if ((lcd_touch_buffer[0]==0x0D)&&(lcd_touch_buffer[1]=='6')&&(lcd_touch_buffer[2]=='9')&&(lcd_touch_buffer[3]=='P')&&(lcd_touch_buffer[4]=='Z')&&(lcd_touch_buffer[5]=='T')){lcd_last_touch_command=LCD_TOUCH_CLOSE_DIAL;return;}
    2370:	80 91 19 27 	lds	r24, 0x2719
    2374:	8d 30       	cpi	r24, 0x0D	; 13
    2376:	c1 f4       	brne	.+48     	; 0x23a8 <lcd_set_touch+0x1ec>
    2378:	80 91 1a 27 	lds	r24, 0x271A
    237c:	86 33       	cpi	r24, 0x36	; 54
    237e:	a1 f4       	brne	.+40     	; 0x23a8 <lcd_set_touch+0x1ec>
    2380:	80 91 1b 27 	lds	r24, 0x271B
    2384:	89 33       	cpi	r24, 0x39	; 57
    2386:	81 f4       	brne	.+32     	; 0x23a8 <lcd_set_touch+0x1ec>
    2388:	80 91 1c 27 	lds	r24, 0x271C
    238c:	80 35       	cpi	r24, 0x50	; 80
    238e:	61 f4       	brne	.+24     	; 0x23a8 <lcd_set_touch+0x1ec>
    2390:	80 91 1d 27 	lds	r24, 0x271D
    2394:	8a 35       	cpi	r24, 0x5A	; 90
    2396:	41 f4       	brne	.+16     	; 0x23a8 <lcd_set_touch+0x1ec>
    2398:	80 91 1e 27 	lds	r24, 0x271E
    239c:	84 35       	cpi	r24, 0x54	; 84
    239e:	21 f4       	brne	.+8      	; 0x23a8 <lcd_set_touch+0x1ec>
    23a0:	80 e6       	ldi	r24, 0x60	; 96
    23a2:	80 93 12 27 	sts	0x2712, r24
    23a6:	08 95       	ret
		if ((lcd_touch_buffer[0]==0x0D)&&(lcd_touch_buffer[1]=='7')&&(lcd_touch_buffer[2]=='9')&&(lcd_touch_buffer[3]=='P')&&(lcd_touch_buffer[4]=='Z')&&(lcd_touch_buffer[5]=='T')){lcd_last_touch_command=LCD_TOUCH_LEFT;return;}
    23a8:	80 91 19 27 	lds	r24, 0x2719
    23ac:	8d 30       	cpi	r24, 0x0D	; 13
    23ae:	c1 f4       	brne	.+48     	; 0x23e0 <lcd_set_touch+0x224>
    23b0:	80 91 1a 27 	lds	r24, 0x271A
    23b4:	87 33       	cpi	r24, 0x37	; 55
    23b6:	a1 f4       	brne	.+40     	; 0x23e0 <lcd_set_touch+0x224>
    23b8:	80 91 1b 27 	lds	r24, 0x271B
    23bc:	89 33       	cpi	r24, 0x39	; 57
    23be:	81 f4       	brne	.+32     	; 0x23e0 <lcd_set_touch+0x224>
    23c0:	80 91 1c 27 	lds	r24, 0x271C
    23c4:	80 35       	cpi	r24, 0x50	; 80
    23c6:	61 f4       	brne	.+24     	; 0x23e0 <lcd_set_touch+0x224>
    23c8:	80 91 1d 27 	lds	r24, 0x271D
    23cc:	8a 35       	cpi	r24, 0x5A	; 90
    23ce:	41 f4       	brne	.+16     	; 0x23e0 <lcd_set_touch+0x224>
    23d0:	80 91 1e 27 	lds	r24, 0x271E
    23d4:	84 35       	cpi	r24, 0x54	; 84
    23d6:	21 f4       	brne	.+8      	; 0x23e0 <lcd_set_touch+0x224>
    23d8:	81 e6       	ldi	r24, 0x61	; 97
    23da:	80 93 12 27 	sts	0x2712, r24
    23de:	08 95       	ret
		if ((lcd_touch_buffer[0]==0x0D)&&(lcd_touch_buffer[1]=='8')&&(lcd_touch_buffer[2]=='9')&&(lcd_touch_buffer[3]=='P')&&(lcd_touch_buffer[4]=='Z')&&(lcd_touch_buffer[5]=='T')){lcd_last_touch_command=LCD_TOUCH_RIGHT;return;}
    23e0:	80 91 19 27 	lds	r24, 0x2719
    23e4:	8d 30       	cpi	r24, 0x0D	; 13
    23e6:	c1 f4       	brne	.+48     	; 0x2418 <lcd_set_touch+0x25c>
    23e8:	80 91 1a 27 	lds	r24, 0x271A
    23ec:	88 33       	cpi	r24, 0x38	; 56
    23ee:	a1 f4       	brne	.+40     	; 0x2418 <lcd_set_touch+0x25c>
    23f0:	80 91 1b 27 	lds	r24, 0x271B
    23f4:	89 33       	cpi	r24, 0x39	; 57
    23f6:	81 f4       	brne	.+32     	; 0x2418 <lcd_set_touch+0x25c>
    23f8:	80 91 1c 27 	lds	r24, 0x271C
    23fc:	80 35       	cpi	r24, 0x50	; 80
    23fe:	61 f4       	brne	.+24     	; 0x2418 <lcd_set_touch+0x25c>
    2400:	80 91 1d 27 	lds	r24, 0x271D
    2404:	8a 35       	cpi	r24, 0x5A	; 90
    2406:	41 f4       	brne	.+16     	; 0x2418 <lcd_set_touch+0x25c>
    2408:	80 91 1e 27 	lds	r24, 0x271E
    240c:	84 35       	cpi	r24, 0x54	; 84
    240e:	21 f4       	brne	.+8      	; 0x2418 <lcd_set_touch+0x25c>
    2410:	82 e6       	ldi	r24, 0x62	; 98
    2412:	80 93 12 27 	sts	0x2712, r24
    2416:	08 95       	ret
	//Output Screen
		if ((lcd_touch_buffer[0]==0x0D)&&(lcd_touch_buffer[1]=='9')&&(lcd_touch_buffer[2]=='9')&&(lcd_touch_buffer[3]=='P')&&(lcd_touch_buffer[4]=='Z')&&(lcd_touch_buffer[5]=='T')){lcd_last_touch_command=LCD_TOUCH_CLOSE_DETAIL;return;}
    2418:	80 91 19 27 	lds	r24, 0x2719
    241c:	8d 30       	cpi	r24, 0x0D	; 13
    241e:	c1 f4       	brne	.+48     	; 0x2450 <lcd_set_touch+0x294>
    2420:	80 91 1a 27 	lds	r24, 0x271A
    2424:	89 33       	cpi	r24, 0x39	; 57
    2426:	a1 f4       	brne	.+40     	; 0x2450 <lcd_set_touch+0x294>
    2428:	80 91 1b 27 	lds	r24, 0x271B
    242c:	89 33       	cpi	r24, 0x39	; 57
    242e:	81 f4       	brne	.+32     	; 0x2450 <lcd_set_touch+0x294>
    2430:	80 91 1c 27 	lds	r24, 0x271C
    2434:	80 35       	cpi	r24, 0x50	; 80
    2436:	61 f4       	brne	.+24     	; 0x2450 <lcd_set_touch+0x294>
    2438:	80 91 1d 27 	lds	r24, 0x271D
    243c:	8a 35       	cpi	r24, 0x5A	; 90
    243e:	41 f4       	brne	.+16     	; 0x2450 <lcd_set_touch+0x294>
    2440:	80 91 1e 27 	lds	r24, 0x271E
    2444:	84 35       	cpi	r24, 0x54	; 84
    2446:	21 f4       	brne	.+8      	; 0x2450 <lcd_set_touch+0x294>
    2448:	83 e6       	ldi	r24, 0x63	; 99
    244a:	80 93 12 27 	sts	0x2712, r24
    244e:	08 95       	ret
		if ((lcd_touch_buffer[0]==0x0D)&&(lcd_touch_buffer[1]=='5')&&(lcd_touch_buffer[2]=='1')&&(lcd_touch_buffer[3]=='P')&&(lcd_touch_buffer[4]=='Z')&&(lcd_touch_buffer[5]=='T')){lcd_last_touch_command=LCD_TOUCH_OPEN_DETAIL_AB;return;}
    2450:	80 91 19 27 	lds	r24, 0x2719
    2454:	8d 30       	cpi	r24, 0x0D	; 13
    2456:	c1 f4       	brne	.+48     	; 0x2488 <lcd_set_touch+0x2cc>
    2458:	80 91 1a 27 	lds	r24, 0x271A
    245c:	85 33       	cpi	r24, 0x35	; 53
    245e:	a1 f4       	brne	.+40     	; 0x2488 <lcd_set_touch+0x2cc>
    2460:	80 91 1b 27 	lds	r24, 0x271B
    2464:	81 33       	cpi	r24, 0x31	; 49
    2466:	81 f4       	brne	.+32     	; 0x2488 <lcd_set_touch+0x2cc>
    2468:	80 91 1c 27 	lds	r24, 0x271C
    246c:	80 35       	cpi	r24, 0x50	; 80
    246e:	61 f4       	brne	.+24     	; 0x2488 <lcd_set_touch+0x2cc>
    2470:	80 91 1d 27 	lds	r24, 0x271D
    2474:	8a 35       	cpi	r24, 0x5A	; 90
    2476:	41 f4       	brne	.+16     	; 0x2488 <lcd_set_touch+0x2cc>
    2478:	80 91 1e 27 	lds	r24, 0x271E
    247c:	84 35       	cpi	r24, 0x54	; 84
    247e:	21 f4       	brne	.+8      	; 0x2488 <lcd_set_touch+0x2cc>
    2480:	8f e0       	ldi	r24, 0x0F	; 15
    2482:	80 93 12 27 	sts	0x2712, r24
    2486:	08 95       	ret
		if ((lcd_touch_buffer[0]==0x0D)&&(lcd_touch_buffer[1]=='6')&&(lcd_touch_buffer[2]=='1')&&(lcd_touch_buffer[3]=='P')&&(lcd_touch_buffer[4]=='Z')&&(lcd_touch_buffer[5]=='T')){lcd_last_touch_command=LCD_TOUCH_OPEN_DETAIL_CD;return;}
    2488:	80 91 19 27 	lds	r24, 0x2719
    248c:	8d 30       	cpi	r24, 0x0D	; 13
    248e:	b9 f4       	brne	.+46     	; 0x24be <lcd_set_touch+0x302>
    2490:	80 91 1a 27 	lds	r24, 0x271A
    2494:	86 33       	cpi	r24, 0x36	; 54
    2496:	99 f4       	brne	.+38     	; 0x24be <lcd_set_touch+0x302>
    2498:	80 91 1b 27 	lds	r24, 0x271B
    249c:	81 33       	cpi	r24, 0x31	; 49
    249e:	79 f4       	brne	.+30     	; 0x24be <lcd_set_touch+0x302>
    24a0:	80 91 1c 27 	lds	r24, 0x271C
    24a4:	80 35       	cpi	r24, 0x50	; 80
    24a6:	59 f4       	brne	.+22     	; 0x24be <lcd_set_touch+0x302>
    24a8:	80 91 1d 27 	lds	r24, 0x271D
    24ac:	8a 35       	cpi	r24, 0x5A	; 90
    24ae:	39 f4       	brne	.+14     	; 0x24be <lcd_set_touch+0x302>
    24b0:	80 91 1e 27 	lds	r24, 0x271E
    24b4:	84 35       	cpi	r24, 0x54	; 84
    24b6:	19 f4       	brne	.+6      	; 0x24be <lcd_set_touch+0x302>
    24b8:	80 e1       	ldi	r24, 0x10	; 16
    24ba:	80 93 12 27 	sts	0x2712, r24
    24be:	08 95       	ret

000024c0 <service_lcd_touch>:
//## SERVICE ROUTINE
//#############################################################

//Used to refresh the console
void service_lcd_touch(){
	if (lcd_last_touch_command==LCD_TOUCH_NONE) return; //exit if nothing has been pressed
    24c0:	80 91 12 27 	lds	r24, 0x2712
    24c4:	85 31       	cpi	r24, 0x15	; 21
    24c6:	09 f4       	brne	.+2      	; 0x24ca <service_lcd_touch+0xa>
    24c8:	59 c0       	rjmp	.+178    	; 0x257c <service_lcd_touch+0xbc>
	switch(lcd_get_touch()){
    24ca:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <lcd_get_touch>
    24ce:	82 31       	cpi	r24, 0x12	; 18
    24d0:	91 f1       	breq	.+100    	; 0x2536 <service_lcd_touch+0x76>
    24d2:	83 31       	cpi	r24, 0x13	; 19
    24d4:	80 f4       	brcc	.+32     	; 0x24f6 <service_lcd_touch+0x36>
    24d6:	8e 30       	cpi	r24, 0x0E	; 14
    24d8:	31 f1       	breq	.+76     	; 0x2526 <service_lcd_touch+0x66>
    24da:	8f 30       	cpi	r24, 0x0F	; 15
    24dc:	30 f4       	brcc	.+12     	; 0x24ea <service_lcd_touch+0x2a>
    24de:	8c 30       	cpi	r24, 0x0C	; 12
    24e0:	d1 f0       	breq	.+52     	; 0x2516 <service_lcd_touch+0x56>
    24e2:	8d 30       	cpi	r24, 0x0D	; 13
    24e4:	09 f0       	breq	.+2      	; 0x24e8 <service_lcd_touch+0x28>
    24e6:	4a c0       	rjmp	.+148    	; 0x257c <service_lcd_touch+0xbc>
    24e8:	1a c0       	rjmp	.+52     	; 0x251e <service_lcd_touch+0x5e>
    24ea:	80 31       	cpi	r24, 0x10	; 16
    24ec:	09 f4       	brne	.+2      	; 0x24f0 <service_lcd_touch+0x30>
    24ee:	43 c0       	rjmp	.+134    	; 0x2576 <service_lcd_touch+0xb6>
    24f0:	81 31       	cpi	r24, 0x11	; 17
    24f2:	e8 f4       	brcc	.+58     	; 0x252e <service_lcd_touch+0x6e>
    24f4:	3c c0       	rjmp	.+120    	; 0x256e <service_lcd_touch+0xae>
    24f6:	80 36       	cpi	r24, 0x60	; 96
    24f8:	91 f1       	breq	.+100    	; 0x255e <service_lcd_touch+0x9e>
    24fa:	81 36       	cpi	r24, 0x61	; 97
    24fc:	28 f4       	brcc	.+10     	; 0x2508 <service_lcd_touch+0x48>
    24fe:	83 31       	cpi	r24, 0x13	; 19
    2500:	f1 f0       	breq	.+60     	; 0x253e <service_lcd_touch+0x7e>
    2502:	84 31       	cpi	r24, 0x14	; 20
    2504:	d9 f5       	brne	.+118    	; 0x257c <service_lcd_touch+0xbc>
    2506:	1f c0       	rjmp	.+62     	; 0x2546 <service_lcd_touch+0x86>
    2508:	82 36       	cpi	r24, 0x62	; 98
    250a:	29 f1       	breq	.+74     	; 0x2556 <service_lcd_touch+0x96>
    250c:	82 36       	cpi	r24, 0x62	; 98
    250e:	f8 f0       	brcs	.+62     	; 0x254e <service_lcd_touch+0x8e>
    2510:	83 36       	cpi	r24, 0x63	; 99
    2512:	a1 f5       	brne	.+104    	; 0x257c <service_lcd_touch+0xbc>
    2514:	28 c0       	rjmp	.+80     	; 0x2566 <service_lcd_touch+0xa6>
		
		//MENU NAVIGATION
		case LCD_TOUCH_OUTPUT:
			brain_menu_load(MENU_OUTPUT);
    2516:	80 e2       	ldi	r24, 0x20	; 32
    2518:	0e 94 01 05 	call	0xa02	; 0xa02 <brain_menu_load>
			break;
    251c:	08 95       	ret
		case LCD_TOUCH_CONTROL:
			brain_menu_load(MENU_CONTROL);
    251e:	81 e2       	ldi	r24, 0x21	; 33
    2520:	0e 94 01 05 	call	0xa02	; 0xa02 <brain_menu_load>
			break;
    2524:	08 95       	ret
		case LCD_TOUCH_CONSOLE:
			brain_menu_load(MENU_CONSOLE);
    2526:	82 e2       	ldi	r24, 0x22	; 34
    2528:	0e 94 01 05 	call	0xa02	; 0xa02 <brain_menu_load>
			break;
    252c:	08 95       	ret
			
		//CONTROL MENU
		case LCD_TOUCH_ROW_A:
			brain_menu_control_dial(LCD_TOUCH_ROW_A);
    252e:	81 e1       	ldi	r24, 0x11	; 17
    2530:	0e 94 4a 04 	call	0x894	; 0x894 <brain_menu_control_dial>
			break;
    2534:	08 95       	ret
		case LCD_TOUCH_ROW_B:
			brain_menu_control_dial(LCD_TOUCH_ROW_B);
    2536:	82 e1       	ldi	r24, 0x12	; 18
    2538:	0e 94 4a 04 	call	0x894	; 0x894 <brain_menu_control_dial>
			break;
    253c:	08 95       	ret
		case LCD_TOUCH_ROW_C:
			brain_menu_control_dial(LCD_TOUCH_ROW_C);
    253e:	83 e1       	ldi	r24, 0x13	; 19
    2540:	0e 94 4a 04 	call	0x894	; 0x894 <brain_menu_control_dial>
			break;
    2544:	08 95       	ret
		case LCD_TOUCH_ROW_D:
			brain_menu_control_dial(LCD_TOUCH_ROW_D);
    2546:	84 e1       	ldi	r24, 0x14	; 20
    2548:	0e 94 4a 04 	call	0x894	; 0x894 <brain_menu_control_dial>
			break;
    254c:	08 95       	ret
		
		//CONTROL DIALOG WINDOW
		case LCD_TOUCH_LEFT:
			brain_menu_control_dial_select(LCD_TOUCH_LEFT);
    254e:	81 e6       	ldi	r24, 0x61	; 97
    2550:	0e 94 85 04 	call	0x90a	; 0x90a <brain_menu_control_dial_select>
			break;
    2554:	08 95       	ret
		case LCD_TOUCH_RIGHT:
			brain_menu_control_dial_select(LCD_TOUCH_RIGHT);
    2556:	82 e6       	ldi	r24, 0x62	; 98
    2558:	0e 94 85 04 	call	0x90a	; 0x90a <brain_menu_control_dial_select>
			break;
    255c:	08 95       	ret
		case LCD_TOUCH_CLOSE_DIAL:
			brain_menu_load(MENU_CONTROL);
    255e:	81 e2       	ldi	r24, 0x21	; 33
    2560:	0e 94 01 05 	call	0xa02	; 0xa02 <brain_menu_load>
			break;
    2564:	08 95       	ret
		
		//OUTPUT MENU
		case LCD_TOUCH_CLOSE_DETAIL:
			brain_menu_load(MENU_OUTPUT);
    2566:	80 e2       	ldi	r24, 0x20	; 32
    2568:	0e 94 01 05 	call	0xa02	; 0xa02 <brain_menu_load>
			break;
    256c:	08 95       	ret
		case LCD_TOUCH_OPEN_DETAIL_AB:
			brain_menu_output_detail(LCD_TOUCH_OPEN_DETAIL_AB);
    256e:	8f e0       	ldi	r24, 0x0F	; 15
    2570:	0e 94 15 04 	call	0x82a	; 0x82a <brain_menu_output_detail>
			break;
    2574:	08 95       	ret
		case LCD_TOUCH_OPEN_DETAIL_CD:
			brain_menu_output_detail(LCD_TOUCH_OPEN_DETAIL_CD);
    2576:	80 e1       	ldi	r24, 0x10	; 16
    2578:	0e 94 15 04 	call	0x82a	; 0x82a <brain_menu_output_detail>
    257c:	08 95       	ret

0000257e <init_pwr_adjust>:
//## INITIALIZATION ROUTINE
//#############################################################

void init_pwr_adjust(){
	//Enable lines
	PORTH.OUTCLR = 0x00;
    257e:	e0 ee       	ldi	r30, 0xE0	; 224
    2580:	f6 e0       	ldi	r31, 0x06	; 6
    2582:	16 82       	std	Z+6, r1	; 0x06
	PORTH.DIRSET = B8(00011111); //ADJ Outputs & 5V fixed output to out direction
    2584:	8f e1       	ldi	r24, 0x1F	; 31
    2586:	81 83       	std	Z+1, r24	; 0x01
	
	//Chip Select lines
	PORTD.OUTSET = B8(00011111); //set all output pins high prior to enabling output (deselect SPI peripherals)
    2588:	e0 e6       	ldi	r30, 0x60	; 96
    258a:	f6 e0       	ldi	r31, 0x06	; 6
    258c:	85 83       	std	Z+5, r24	; 0x05
	PORTD.DIRSET = B8(11111011); //ADJ_CS, TC_CS, SPI_MOSI, SPI_CLOCK to outputs	
    258e:	8b ef       	ldi	r24, 0xFB	; 251
    2590:	81 83       	std	Z+1, r24	; 0x01
		--Master reads on the rising clock edge
		--Clock idles HIGH
		--Shifted MSB-first 
		--Max clock = 7MHz
	*/
	SPID.CTRL = B8(11011101); //2X Clock (with 16x prescale) = 1/8 System Frequency = 4MHz; Master Mode; Clock idle high; Master sample on rising edge
    2592:	e0 ec       	ldi	r30, 0xC0	; 192
    2594:	f9 e0       	ldi	r31, 0x09	; 9
    2596:	8d ed       	ldi	r24, 0xDD	; 221
    2598:	80 83       	st	Z, r24
	SPID.INTCTRL = 2; //medium priority interrupt
    259a:	82 e0       	ldi	r24, 0x02	; 2
    259c:	81 83       	std	Z+1, r24	; 0x01
	
	pwr_adj_spi_state = PWR_ADJ_SPI_IDLE;
    259e:	10 92 23 27 	sts	0x2723, r1
	pwr_adj_send_channels = 0x00;
    25a2:	10 92 0b 27 	sts	0x270B, r1
	pwr_adj_channel_dirty = 0x00;
    25a6:	10 92 25 27 	sts	0x2725, r1
	pwr_adj_left_right = LCD_TOUCH_LEFT;
    25aa:	81 e6       	ldi	r24, 0x61	; 97
    25ac:	80 93 10 27 	sts	0x2710, r24
}
    25b0:	08 95       	ret

000025b2 <pwr_adj_spi_send>:
	}
}	
	
void pwr_adj_spi_send(uint8_t channel_num){
	//STATE
	pwr_adj_spi_state = PWR_ADJ_SPI_COMMAND;
    25b2:	91 e0       	ldi	r25, 0x01	; 1
    25b4:	90 93 23 27 	sts	0x2723, r25
	pwr_adj_channel_num_in_progress = channel_num;
    25b8:	80 93 11 27 	sts	0x2711, r24
	
	//CHIP SELECT
	switch(channel_num){
    25bc:	84 30       	cpi	r24, 0x04	; 4
    25be:	18 f4       	brcc	.+6      	; 0x25c6 <pwr_adj_spi_send+0x14>
    25c0:	82 30       	cpi	r24, 0x02	; 2
    25c2:	58 f4       	brcc	.+22     	; 0x25da <pwr_adj_spi_send+0x28>
    25c4:	05 c0       	rjmp	.+10     	; 0x25d0 <pwr_adj_spi_send+0x1e>
    25c6:	86 30       	cpi	r24, 0x06	; 6
    25c8:	68 f0       	brcs	.+26     	; 0x25e4 <pwr_adj_spi_send+0x32>
    25ca:	88 30       	cpi	r24, 0x08	; 8
    25cc:	a0 f4       	brcc	.+40     	; 0x25f6 <pwr_adj_spi_send+0x44>
    25ce:	0f c0       	rjmp	.+30     	; 0x25ee <pwr_adj_spi_send+0x3c>
	case 0:
	case 1:
		PORTD.OUTCLR = _BV(0); //CS low, start transmitting
    25d0:	91 e0       	ldi	r25, 0x01	; 1
    25d2:	e0 e6       	ldi	r30, 0x60	; 96
    25d4:	f6 e0       	ldi	r31, 0x06	; 6
    25d6:	96 83       	std	Z+6, r25	; 0x06
		break;
    25d8:	0e c0       	rjmp	.+28     	; 0x25f6 <pwr_adj_spi_send+0x44>
	case 2:
	case 3:
		PORTD.OUTCLR = _BV(1); //CS low, start transmitting
    25da:	92 e0       	ldi	r25, 0x02	; 2
    25dc:	e0 e6       	ldi	r30, 0x60	; 96
    25de:	f6 e0       	ldi	r31, 0x06	; 6
    25e0:	96 83       	std	Z+6, r25	; 0x06
		break;
    25e2:	09 c0       	rjmp	.+18     	; 0x25f6 <pwr_adj_spi_send+0x44>
	case 4:
	case 5:
		PORTD.OUTCLR = _BV(2); //CS low, start transmitting
    25e4:	94 e0       	ldi	r25, 0x04	; 4
    25e6:	e0 e6       	ldi	r30, 0x60	; 96
    25e8:	f6 e0       	ldi	r31, 0x06	; 6
    25ea:	96 83       	std	Z+6, r25	; 0x06
		break;
    25ec:	04 c0       	rjmp	.+8      	; 0x25f6 <pwr_adj_spi_send+0x44>
	case 6:
	case 7:
		PORTD.OUTCLR = _BV(3); //CS low, start transmitting
    25ee:	98 e0       	ldi	r25, 0x08	; 8
    25f0:	e0 e6       	ldi	r30, 0x60	; 96
    25f2:	f6 e0       	ldi	r31, 0x06	; 6
    25f4:	96 83       	std	Z+6, r25	; 0x06
		break;
	}
	
	//SEND COMMAND BYTE
	if(channel_num % 2){
    25f6:	80 ff       	sbrs	r24, 0
    25f8:	05 c0       	rjmp	.+10     	; 0x2604 <pwr_adj_spi_send+0x52>
		//channel_num = 1,3,5,7 (0 == false in C)
		SPID.DATA = MAX5494_SET2;
    25fa:	82 e0       	ldi	r24, 0x02	; 2
    25fc:	e0 ec       	ldi	r30, 0xC0	; 192
    25fe:	f9 e0       	ldi	r31, 0x09	; 9
    2600:	83 83       	std	Z+3, r24	; 0x03
    2602:	08 95       	ret
	} 
	else {
		SPID.DATA = MAX5494_SET1;
    2604:	81 e0       	ldi	r24, 0x01	; 1
    2606:	e0 ec       	ldi	r30, 0xC0	; 192
    2608:	f9 e0       	ldi	r31, 0x09	; 9
    260a:	83 83       	std	Z+3, r24	; 0x03
    260c:	08 95       	ret

0000260e <_pwr_adj_next>:
//#############################################################
//## SPI LOW-LEVEL FUNCTIONS
//#############################################################

void _pwr_adj_next(){
	pwr_adj_send_channels &= ~_BV(pwr_adj_channel_num_in_progress); //clear channel we just finished sending
    260e:	61 e0       	ldi	r22, 0x01	; 1
    2610:	70 e0       	ldi	r23, 0x00	; 0
    2612:	00 90 11 27 	lds	r0, 0x2711
    2616:	02 c0       	rjmp	.+4      	; 0x261c <_pwr_adj_next+0xe>
    2618:	66 0f       	add	r22, r22
    261a:	77 1f       	adc	r23, r23
    261c:	0a 94       	dec	r0
    261e:	e2 f7       	brpl	.-8      	; 0x2618 <_pwr_adj_next+0xa>
    2620:	60 95       	com	r22
    2622:	80 91 0b 27 	lds	r24, 0x270B
    2626:	68 23       	and	r22, r24
    2628:	60 93 0b 27 	sts	0x270B, r22
	if (pwr_adj_send_channels > 0){
    262c:	66 23       	and	r22, r22
    262e:	f1 f0       	breq	.+60     	; 0x266c <_pwr_adj_next+0x5e>
		//Some other channels need to be sent
		for(uint8_t i=0;i<PWR_ADJ_NUM_CHANNELS;i++){
			if((pwr_adj_send_channels & _BV(i)) > 0){
    2630:	70 e0       	ldi	r23, 0x00	; 0
    2632:	60 fd       	sbrc	r22, 0
    2634:	12 c0       	rjmp	.+36     	; 0x265a <_pwr_adj_next+0x4c>
    2636:	21 e0       	ldi	r18, 0x01	; 1
    2638:	30 e0       	ldi	r19, 0x00	; 0
    263a:	e1 e0       	ldi	r30, 0x01	; 1
    263c:	f0 e0       	ldi	r31, 0x00	; 0
    263e:	82 2f       	mov	r24, r18
    2640:	af 01       	movw	r20, r30
    2642:	02 2e       	mov	r0, r18
    2644:	02 c0       	rjmp	.+4      	; 0x264a <_pwr_adj_next+0x3c>
    2646:	44 0f       	add	r20, r20
    2648:	55 1f       	adc	r21, r21
    264a:	0a 94       	dec	r0
    264c:	e2 f7       	brpl	.-8      	; 0x2646 <_pwr_adj_next+0x38>
    264e:	46 23       	and	r20, r22
    2650:	57 23       	and	r21, r23
    2652:	14 16       	cp	r1, r20
    2654:	15 06       	cpc	r1, r21
    2656:	2c f4       	brge	.+10     	; 0x2662 <_pwr_adj_next+0x54>
    2658:	01 c0       	rjmp	.+2      	; 0x265c <_pwr_adj_next+0x4e>
    265a:	80 e0       	ldi	r24, 0x00	; 0
				pwr_adj_spi_send(i);
    265c:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <pwr_adj_spi_send>
				return; //exit for
    2660:	08 95       	ret
    2662:	2f 5f       	subi	r18, 0xFF	; 255
    2664:	3f 4f       	sbci	r19, 0xFF	; 255

void _pwr_adj_next(){
	pwr_adj_send_channels &= ~_BV(pwr_adj_channel_num_in_progress); //clear channel we just finished sending
	if (pwr_adj_send_channels > 0){
		//Some other channels need to be sent
		for(uint8_t i=0;i<PWR_ADJ_NUM_CHANNELS;i++){
    2666:	28 30       	cpi	r18, 0x08	; 8
    2668:	31 05       	cpc	r19, r1
    266a:	49 f7       	brne	.-46     	; 0x263e <_pwr_adj_next+0x30>
    266c:	08 95       	ret

0000266e <pwr_adj_on>:
//#############################################################
//## API
//#############################################################

void pwr_adj_on(uint8_t channel){
	switch(channel){
    266e:	82 30       	cpi	r24, 0x02	; 2
    2670:	c1 f0       	breq	.+48     	; 0x26a2 <pwr_adj_on+0x34>
    2672:	83 30       	cpi	r24, 0x03	; 3
    2674:	28 f4       	brcc	.+10     	; 0x2680 <pwr_adj_on+0x12>
    2676:	88 23       	and	r24, r24
    2678:	51 f0       	breq	.+20     	; 0x268e <pwr_adj_on+0x20>
    267a:	81 30       	cpi	r24, 0x01	; 1
    267c:	39 f5       	brne	.+78     	; 0x26cc <pwr_adj_on+0x5e>
    267e:	0c c0       	rjmp	.+24     	; 0x2698 <pwr_adj_on+0x2a>
    2680:	8a 33       	cpi	r24, 0x3A	; 58
    2682:	c9 f0       	breq	.+50     	; 0x26b6 <pwr_adj_on+0x48>
    2684:	8c 33       	cpi	r24, 0x3C	; 60
    2686:	e1 f0       	breq	.+56     	; 0x26c0 <pwr_adj_on+0x52>
    2688:	83 30       	cpi	r24, 0x03	; 3
    268a:	01 f5       	brne	.+64     	; 0x26cc <pwr_adj_on+0x5e>
    268c:	0f c0       	rjmp	.+30     	; 0x26ac <pwr_adj_on+0x3e>
		case CHANNEL_A:
			PORTH.OUTSET = _BV(1);
    268e:	82 e0       	ldi	r24, 0x02	; 2
    2690:	e0 ee       	ldi	r30, 0xE0	; 224
    2692:	f6 e0       	ldi	r31, 0x06	; 6
    2694:	85 83       	std	Z+5, r24	; 0x05
			break;
    2696:	08 95       	ret
		case CHANNEL_B:
			PORTH.OUTSET = _BV(2);
    2698:	84 e0       	ldi	r24, 0x04	; 4
    269a:	e0 ee       	ldi	r30, 0xE0	; 224
    269c:	f6 e0       	ldi	r31, 0x06	; 6
    269e:	85 83       	std	Z+5, r24	; 0x05
			break;
    26a0:	08 95       	ret
		case CHANNEL_C:
			PORTH.OUTSET = _BV(3);
    26a2:	88 e0       	ldi	r24, 0x08	; 8
    26a4:	e0 ee       	ldi	r30, 0xE0	; 224
    26a6:	f6 e0       	ldi	r31, 0x06	; 6
    26a8:	85 83       	std	Z+5, r24	; 0x05
			break;
    26aa:	08 95       	ret
		case CHANNEL_D:
			PORTH.OUTSET = _BV(4);
    26ac:	80 e1       	ldi	r24, 0x10	; 16
    26ae:	e0 ee       	ldi	r30, 0xE0	; 224
    26b0:	f6 e0       	ldi	r31, 0x06	; 6
    26b2:	85 83       	std	Z+5, r24	; 0x05
			break;
    26b4:	08 95       	ret
		case CHANNEL_ALL:
			PORTH.OUTSET = B8(00011110);
    26b6:	8e e1       	ldi	r24, 0x1E	; 30
    26b8:	e0 ee       	ldi	r30, 0xE0	; 224
    26ba:	f6 e0       	ldi	r31, 0x06	; 6
    26bc:	85 83       	std	Z+5, r24	; 0x05
			break;
    26be:	08 95       	ret
		case CHANNEL_RESTORE:
			PORTH.OUTSET = STATE_power_channels << 1; //[000DCBA0] align to port
    26c0:	80 91 e6 25 	lds	r24, 0x25E6
    26c4:	88 0f       	add	r24, r24
    26c6:	e0 ee       	ldi	r30, 0xE0	; 224
    26c8:	f6 e0       	ldi	r31, 0x06	; 6
    26ca:	85 83       	std	Z+5, r24	; 0x05
    26cc:	08 95       	ret

000026ce <pwr_adj_off>:
			break;
	}
}
void pwr_adj_off(uint8_t channel){
	switch(channel){
    26ce:	82 30       	cpi	r24, 0x02	; 2
    26d0:	b1 f0       	breq	.+44     	; 0x26fe <pwr_adj_off+0x30>
    26d2:	83 30       	cpi	r24, 0x03	; 3
    26d4:	28 f4       	brcc	.+10     	; 0x26e0 <pwr_adj_off+0x12>
    26d6:	88 23       	and	r24, r24
    26d8:	41 f0       	breq	.+16     	; 0x26ea <pwr_adj_off+0x1c>
    26da:	81 30       	cpi	r24, 0x01	; 1
    26dc:	f1 f4       	brne	.+60     	; 0x271a <pwr_adj_off+0x4c>
    26de:	0a c0       	rjmp	.+20     	; 0x26f4 <pwr_adj_off+0x26>
    26e0:	83 30       	cpi	r24, 0x03	; 3
    26e2:	91 f0       	breq	.+36     	; 0x2708 <pwr_adj_off+0x3a>
    26e4:	8a 33       	cpi	r24, 0x3A	; 58
    26e6:	c9 f4       	brne	.+50     	; 0x271a <pwr_adj_off+0x4c>
    26e8:	14 c0       	rjmp	.+40     	; 0x2712 <pwr_adj_off+0x44>
		case CHANNEL_A:
			PORTH.OUTCLR = _BV(1);
    26ea:	82 e0       	ldi	r24, 0x02	; 2
    26ec:	e0 ee       	ldi	r30, 0xE0	; 224
    26ee:	f6 e0       	ldi	r31, 0x06	; 6
    26f0:	86 83       	std	Z+6, r24	; 0x06
			break;
    26f2:	08 95       	ret
		case CHANNEL_B:
			PORTH.OUTCLR = _BV(2);
    26f4:	84 e0       	ldi	r24, 0x04	; 4
    26f6:	e0 ee       	ldi	r30, 0xE0	; 224
    26f8:	f6 e0       	ldi	r31, 0x06	; 6
    26fa:	86 83       	std	Z+6, r24	; 0x06
			break;
    26fc:	08 95       	ret
		case CHANNEL_C:
			PORTH.OUTCLR = _BV(3);
    26fe:	88 e0       	ldi	r24, 0x08	; 8
    2700:	e0 ee       	ldi	r30, 0xE0	; 224
    2702:	f6 e0       	ldi	r31, 0x06	; 6
    2704:	86 83       	std	Z+6, r24	; 0x06
			break;
    2706:	08 95       	ret
		case CHANNEL_D:
			PORTH.OUTCLR = _BV(4);
    2708:	80 e1       	ldi	r24, 0x10	; 16
    270a:	e0 ee       	ldi	r30, 0xE0	; 224
    270c:	f6 e0       	ldi	r31, 0x06	; 6
    270e:	86 83       	std	Z+6, r24	; 0x06
			break;
    2710:	08 95       	ret
		case CHANNEL_ALL:
			PORTH.OUTCLR = B8(00011110);
    2712:	8e e1       	ldi	r24, 0x1E	; 30
    2714:	e0 ee       	ldi	r30, 0xE0	; 224
    2716:	f6 e0       	ldi	r31, 0x06	; 6
    2718:	86 83       	std	Z+6, r24	; 0x06
    271a:	08 95       	ret

0000271c <pwr_adj_change>:
	}
}

//Will drop (ignore) this value change request if in the middle of writing a different value to the channel
void pwr_adj_change(uint8_t channel_num, uint16_t new_value){
	if ((pwr_adj_spi_state == PWR_ADJ_SPI_IDLE) || (pwr_adj_channel_num_in_progress != channel_num)){
    271c:	90 91 23 27 	lds	r25, 0x2723
    2720:	99 23       	and	r25, r25
    2722:	21 f0       	breq	.+8      	; 0x272c <pwr_adj_change+0x10>
    2724:	20 91 11 27 	lds	r18, 0x2711
    2728:	28 17       	cp	r18, r24
    272a:	39 f1       	breq	.+78     	; 0x277a <pwr_adj_change+0x5e>
		pwr_adj_channel_dirty |= _BV(channel_num); //mark this channel for update to screen
    272c:	e8 2f       	mov	r30, r24
    272e:	f0 e0       	ldi	r31, 0x00	; 0
    2730:	21 e0       	ldi	r18, 0x01	; 1
    2732:	30 e0       	ldi	r19, 0x00	; 0
    2734:	08 2e       	mov	r0, r24
    2736:	02 c0       	rjmp	.+4      	; 0x273c <pwr_adj_change+0x20>
    2738:	22 0f       	add	r18, r18
    273a:	33 1f       	adc	r19, r19
    273c:	0a 94       	dec	r0
    273e:	e2 f7       	brpl	.-8      	; 0x2738 <pwr_adj_change+0x1c>
    2740:	42 2f       	mov	r20, r18
    2742:	20 91 25 27 	lds	r18, 0x2725
    2746:	24 2b       	or	r18, r20
    2748:	20 93 25 27 	sts	0x2725, r18
		if (new_value >= 1024){new_value = 1023;} //sanity check
		pwr_adj_values[channel_num] = new_value; //buffer value
    274c:	ee 0f       	add	r30, r30
    274e:	ff 1f       	adc	r31, r31
    2750:	ea 5d       	subi	r30, 0xDA	; 218
    2752:	f8 4d       	sbci	r31, 0xD8	; 216
    2754:	26 2f       	mov	r18, r22
    2756:	37 2f       	mov	r19, r23
    2758:	54 e0       	ldi	r21, 0x04	; 4
    275a:	20 30       	cpi	r18, 0x00	; 0
    275c:	35 07       	cpc	r19, r21
    275e:	10 f0       	brcs	.+4      	; 0x2764 <pwr_adj_change+0x48>
    2760:	2f ef       	ldi	r18, 0xFF	; 255
    2762:	33 e0       	ldi	r19, 0x03	; 3
    2764:	20 83       	st	Z, r18
    2766:	31 83       	std	Z+1, r19	; 0x01
		pwr_adj_send_channels |= _BV(channel_num); //flag channel for transmission
    2768:	20 91 0b 27 	lds	r18, 0x270B
    276c:	42 2b       	or	r20, r18
    276e:	40 93 0b 27 	sts	0x270B, r20
		if (pwr_adj_spi_state == PWR_ADJ_SPI_IDLE){pwr_adj_spi_send(channel_num);}
    2772:	99 23       	and	r25, r25
    2774:	11 f4       	brne	.+4      	; 0x277a <pwr_adj_change+0x5e>
    2776:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <pwr_adj_spi_send>
    277a:	08 95       	ret

0000277c <pwr_adj_change_increment>:
	}	
}

//QUAD_DOWN = CLOCKWISE, ergo it is more natural to make this INCREASE the counters
void pwr_adj_change_increment(uint8_t channel_num, uint8_t which_way){
	if ((which_way == QUAD_DOWN) && (pwr_adj_values[channel_num]<1024)) pwr_adj_values[channel_num]++;
    277c:	6e 32       	cpi	r22, 0x2E	; 46
    277e:	b9 f4       	brne	.+46     	; 0x27ae <pwr_adj_change_increment+0x32>
    2780:	28 2f       	mov	r18, r24
    2782:	30 e0       	ldi	r19, 0x00	; 0
    2784:	f9 01       	movw	r30, r18
    2786:	ee 0f       	add	r30, r30
    2788:	ff 1f       	adc	r31, r31
    278a:	ea 5d       	subi	r30, 0xDA	; 218
    278c:	f8 4d       	sbci	r31, 0xD8	; 216
    278e:	40 81       	ld	r20, Z
    2790:	51 81       	ldd	r21, Z+1	; 0x01
    2792:	94 e0       	ldi	r25, 0x04	; 4
    2794:	40 30       	cpi	r20, 0x00	; 0
    2796:	59 07       	cpc	r21, r25
    2798:	08 f5       	brcc	.+66     	; 0x27dc <pwr_adj_change_increment+0x60>
    279a:	f9 01       	movw	r30, r18
    279c:	ee 0f       	add	r30, r30
    279e:	ff 1f       	adc	r31, r31
    27a0:	ea 5d       	subi	r30, 0xDA	; 218
    27a2:	f8 4d       	sbci	r31, 0xD8	; 216
    27a4:	4f 5f       	subi	r20, 0xFF	; 255
    27a6:	5f 4f       	sbci	r21, 0xFF	; 255
    27a8:	40 83       	st	Z, r20
    27aa:	51 83       	std	Z+1, r21	; 0x01
    27ac:	17 c0       	rjmp	.+46     	; 0x27dc <pwr_adj_change_increment+0x60>
	if ((which_way == QUAD_UP) && (pwr_adj_values[channel_num]>0)) pwr_adj_values[channel_num]--;
    27ae:	6d 32       	cpi	r22, 0x2D	; 45
    27b0:	a9 f4       	brne	.+42     	; 0x27dc <pwr_adj_change_increment+0x60>
    27b2:	28 2f       	mov	r18, r24
    27b4:	30 e0       	ldi	r19, 0x00	; 0
    27b6:	f9 01       	movw	r30, r18
    27b8:	ee 0f       	add	r30, r30
    27ba:	ff 1f       	adc	r31, r31
    27bc:	ea 5d       	subi	r30, 0xDA	; 218
    27be:	f8 4d       	sbci	r31, 0xD8	; 216
    27c0:	40 81       	ld	r20, Z
    27c2:	51 81       	ldd	r21, Z+1	; 0x01
    27c4:	41 15       	cp	r20, r1
    27c6:	51 05       	cpc	r21, r1
    27c8:	49 f0       	breq	.+18     	; 0x27dc <pwr_adj_change_increment+0x60>
    27ca:	f9 01       	movw	r30, r18
    27cc:	ee 0f       	add	r30, r30
    27ce:	ff 1f       	adc	r31, r31
    27d0:	ea 5d       	subi	r30, 0xDA	; 218
    27d2:	f8 4d       	sbci	r31, 0xD8	; 216
    27d4:	41 50       	subi	r20, 0x01	; 1
    27d6:	50 40       	sbci	r21, 0x00	; 0
    27d8:	40 83       	st	Z, r20
    27da:	51 83       	std	Z+1, r21	; 0x01
	pwr_adj_change(channel_num, pwr_adj_values[channel_num]);
    27dc:	e8 2f       	mov	r30, r24
    27de:	f0 e0       	ldi	r31, 0x00	; 0
    27e0:	ee 0f       	add	r30, r30
    27e2:	ff 1f       	adc	r31, r31
    27e4:	ea 5d       	subi	r30, 0xDA	; 218
    27e6:	f8 4d       	sbci	r31, 0xD8	; 216
    27e8:	60 81       	ld	r22, Z
    27ea:	71 81       	ldd	r23, Z+1	; 0x01
    27ec:	0e 94 8e 13 	call	0x271c	; 0x271c <pwr_adj_change>
}
    27f0:	08 95       	ret

000027f2 <pwr_adj_touch_dial>:
//#############################################################
//## SELECTION AND TOUCH PANEL
//#############################################################

inline void pwr_adj_touch_dial(uint8_t which_one){
	pwr_adj_left_right = which_one;
    27f2:	80 93 10 27 	sts	0x2710, r24
}
    27f6:	08 95       	ret

000027f8 <_pwr_adj_data>:
//## DISPLAY ROUTINES
//#############################################################

//Calculate the output for the first voltage divider
float _pwr_adj_data(uint8_t channel_num){
	return PWR_ADJ_SUPPLY_VOLTAGE * (float)pwr_adj_values[channel_num]/1023;
    27f8:	e8 2f       	mov	r30, r24
    27fa:	f0 e0       	ldi	r31, 0x00	; 0
    27fc:	ee 0f       	add	r30, r30
    27fe:	ff 1f       	adc	r31, r31
    2800:	ea 5d       	subi	r30, 0xDA	; 218
    2802:	f8 4d       	sbci	r31, 0xD8	; 216
    2804:	60 81       	ld	r22, Z
    2806:	71 81       	ldd	r23, Z+1	; 0x01
    2808:	80 e0       	ldi	r24, 0x00	; 0
    280a:	90 e0       	ldi	r25, 0x00	; 0
    280c:	0e 94 5b 31 	call	0x62b6	; 0x62b6 <__floatunsisf>
    2810:	20 e0       	ldi	r18, 0x00	; 0
    2812:	30 e0       	ldi	r19, 0x00	; 0
    2814:	40 ea       	ldi	r20, 0xA0	; 160
    2816:	50 e4       	ldi	r21, 0x40	; 64
    2818:	0e 94 0d 32 	call	0x641a	; 0x641a <__mulsf3>
    281c:	20 e0       	ldi	r18, 0x00	; 0
    281e:	30 ec       	ldi	r19, 0xC0	; 192
    2820:	4f e7       	ldi	r20, 0x7F	; 127
    2822:	54 e4       	ldi	r21, 0x44	; 68
    2824:	0e 94 c2 30 	call	0x6184	; 0x6184 <__divsf3>
}
    2828:	46 2f       	mov	r20, r22
    282a:	57 2f       	mov	r21, r23
    282c:	68 2f       	mov	r22, r24
    282e:	79 2f       	mov	r23, r25
    2830:	cb 01       	movw	r24, r22
    2832:	ba 01       	movw	r22, r20
    2834:	08 95       	ret

00002836 <pwr_adj_data>:

void pwr_adj_data(uint8_t channel_num, char* result){
    2836:	cf 92       	push	r12
    2838:	df 92       	push	r13
    283a:	ef 92       	push	r14
    283c:	ff 92       	push	r15
    283e:	1f 93       	push	r17
    2840:	cf 93       	push	r28
    2842:	df 93       	push	r29
    2844:	18 2f       	mov	r17, r24
    2846:	eb 01       	movw	r28, r22
	if ((channel_num % 2)==0){
    2848:	80 fd       	sbrc	r24, 0
    284a:	08 c0       	rjmp	.+16     	; 0x285c <pwr_adj_data+0x26>
		//channel_num is 0,2,4,etc...
		adc_ftoa(_pwr_adj_data(channel_num), 1000, result);
    284c:	0e 94 fc 13 	call	0x27f8	; 0x27f8 <_pwr_adj_data>
    2850:	48 ee       	ldi	r20, 0xE8	; 232
    2852:	53 e0       	ldi	r21, 0x03	; 3
    2854:	9e 01       	movw	r18, r28
    2856:	0e 94 ad 01 	call	0x35a	; 0x35a <adc_ftoa>
    285a:	22 c0       	rjmp	.+68     	; 0x28a0 <pwr_adj_data+0x6a>
	}
	else{
		//channel_num is 1,3,5,etc...
		adc_ftoa(_pwr_adj_data(channel_num-1)*(float)pwr_adj_values[channel_num]/1023, 1000, result);		
    285c:	81 50       	subi	r24, 0x01	; 1
    285e:	0e 94 fc 13 	call	0x27f8	; 0x27f8 <_pwr_adj_data>
    2862:	6b 01       	movw	r12, r22
    2864:	7c 01       	movw	r14, r24
    2866:	e1 2f       	mov	r30, r17
    2868:	f0 e0       	ldi	r31, 0x00	; 0
    286a:	ee 0f       	add	r30, r30
    286c:	ff 1f       	adc	r31, r31
    286e:	ea 5d       	subi	r30, 0xDA	; 218
    2870:	f8 4d       	sbci	r31, 0xD8	; 216
    2872:	60 81       	ld	r22, Z
    2874:	71 81       	ldd	r23, Z+1	; 0x01
    2876:	80 e0       	ldi	r24, 0x00	; 0
    2878:	90 e0       	ldi	r25, 0x00	; 0
    287a:	0e 94 5b 31 	call	0x62b6	; 0x62b6 <__floatunsisf>
    287e:	9b 01       	movw	r18, r22
    2880:	ac 01       	movw	r20, r24
    2882:	c7 01       	movw	r24, r14
    2884:	b6 01       	movw	r22, r12
    2886:	0e 94 0d 32 	call	0x641a	; 0x641a <__mulsf3>
    288a:	20 e0       	ldi	r18, 0x00	; 0
    288c:	30 ec       	ldi	r19, 0xC0	; 192
    288e:	4f e7       	ldi	r20, 0x7F	; 127
    2890:	54 e4       	ldi	r21, 0x44	; 68
    2892:	0e 94 c2 30 	call	0x6184	; 0x6184 <__divsf3>
    2896:	48 ee       	ldi	r20, 0xE8	; 232
    2898:	53 e0       	ldi	r21, 0x03	; 3
    289a:	9e 01       	movw	r18, r28
    289c:	0e 94 ad 01 	call	0x35a	; 0x35a <adc_ftoa>
	}
}	
    28a0:	df 91       	pop	r29
    28a2:	cf 91       	pop	r28
    28a4:	1f 91       	pop	r17
    28a6:	ff 90       	pop	r15
    28a8:	ef 90       	pop	r14
    28aa:	df 90       	pop	r13
    28ac:	cf 90       	pop	r12
    28ae:	08 95       	ret

000028b0 <pwr_adj_control>:

void pwr_adj_control(uint8_t channel_num, char* result){
	utoa(pwr_adj_values[channel_num], result, 10);
    28b0:	e8 2f       	mov	r30, r24
    28b2:	f0 e0       	ldi	r31, 0x00	; 0
    28b4:	ee 0f       	add	r30, r30
    28b6:	ff 1f       	adc	r31, r31
    28b8:	ea 5d       	subi	r30, 0xDA	; 218
    28ba:	f8 4d       	sbci	r31, 0xD8	; 216
    28bc:	80 81       	ld	r24, Z
    28be:	91 81       	ldd	r25, Z+1	; 0x01
    28c0:	4a e0       	ldi	r20, 0x0A	; 10
    28c2:	50 e0       	ldi	r21, 0x00	; 0
    28c4:	0e 94 96 32 	call	0x652c	; 0x652c <utoa>
}
    28c8:	08 95       	ret

000028ca <__vector_87>:

//#############################################################
//## SERVICE ROUTINES
//#############################################################

ISR(SPID_INT_vect){
    28ca:	1f 92       	push	r1
    28cc:	0f 92       	push	r0
    28ce:	0f b6       	in	r0, 0x3f	; 63
    28d0:	0f 92       	push	r0
    28d2:	08 b6       	in	r0, 0x38	; 56
    28d4:	0f 92       	push	r0
    28d6:	09 b6       	in	r0, 0x39	; 57
    28d8:	0f 92       	push	r0
    28da:	0b b6       	in	r0, 0x3b	; 59
    28dc:	0f 92       	push	r0
    28de:	11 24       	eor	r1, r1
    28e0:	2f 93       	push	r18
    28e2:	3f 93       	push	r19
    28e4:	4f 93       	push	r20
    28e6:	5f 93       	push	r21
    28e8:	6f 93       	push	r22
    28ea:	7f 93       	push	r23
    28ec:	8f 93       	push	r24
    28ee:	9f 93       	push	r25
    28f0:	af 93       	push	r26
    28f2:	bf 93       	push	r27
    28f4:	ef 93       	push	r30
    28f6:	ff 93       	push	r31
	led_on(LED_1);
    28f8:	81 e0       	ldi	r24, 0x01	; 1
    28fa:	0e 94 e9 2f 	call	0x5fd2	; 0x5fd2 <led_on>
	switch(pwr_adj_spi_state){
    28fe:	80 91 23 27 	lds	r24, 0x2723
    2902:	82 30       	cpi	r24, 0x02	; 2
    2904:	c9 f0       	breq	.+50     	; 0x2938 <__vector_87+0x6e>
    2906:	83 30       	cpi	r24, 0x03	; 3
    2908:	39 f1       	breq	.+78     	; 0x2958 <__vector_87+0x8e>
    290a:	81 30       	cpi	r24, 0x01	; 1
    290c:	09 f0       	breq	.+2      	; 0x2910 <__vector_87+0x46>
    290e:	47 c0       	rjmp	.+142    	; 0x299e <__vector_87+0xd4>
		case PWR_ADJ_SPI_COMMAND:
			//finished sending first byte... send next
			pwr_adj_spi_state = PWR_ADJ_SPI_DATAH;
    2910:	82 e0       	ldi	r24, 0x02	; 2
    2912:	80 93 23 27 	sts	0x2723, r24
			SPID.DATA = (uint8_t)(pwr_adj_values[pwr_adj_channel_num_in_progress] >> 2); //extract the 8 MSb's from the 10-bit number
    2916:	e0 91 11 27 	lds	r30, 0x2711
    291a:	f0 e0       	ldi	r31, 0x00	; 0
    291c:	ee 0f       	add	r30, r30
    291e:	ff 1f       	adc	r31, r31
    2920:	ea 5d       	subi	r30, 0xDA	; 218
    2922:	f8 4d       	sbci	r31, 0xD8	; 216
    2924:	80 81       	ld	r24, Z
    2926:	91 81       	ldd	r25, Z+1	; 0x01
    2928:	96 95       	lsr	r25
    292a:	87 95       	ror	r24
    292c:	96 95       	lsr	r25
    292e:	87 95       	ror	r24
    2930:	e0 ec       	ldi	r30, 0xC0	; 192
    2932:	f9 e0       	ldi	r31, 0x09	; 9
    2934:	83 83       	std	Z+3, r24	; 0x03
			break;
    2936:	33 c0       	rjmp	.+102    	; 0x299e <__vector_87+0xd4>
		case PWR_ADJ_SPI_DATAH:
			//finished sending second byte... send next
			pwr_adj_spi_state = PWR_ADJ_SPI_DATAL;
    2938:	83 e0       	ldi	r24, 0x03	; 3
    293a:	80 93 23 27 	sts	0x2723, r24
			SPID.DATA = (uint8_t)(pwr_adj_values[pwr_adj_channel_num_in_progress]) & B8(00000011); //extract the 2 LSb's from the 10-bit number
    293e:	e0 91 11 27 	lds	r30, 0x2711
    2942:	f0 e0       	ldi	r31, 0x00	; 0
    2944:	ee 0f       	add	r30, r30
    2946:	ff 1f       	adc	r31, r31
    2948:	ea 5d       	subi	r30, 0xDA	; 218
    294a:	f8 4d       	sbci	r31, 0xD8	; 216
    294c:	80 81       	ld	r24, Z
    294e:	83 70       	andi	r24, 0x03	; 3
    2950:	e0 ec       	ldi	r30, 0xC0	; 192
    2952:	f9 e0       	ldi	r31, 0x09	; 9
    2954:	83 83       	std	Z+3, r24	; 0x03
			break;
    2956:	23 c0       	rjmp	.+70     	; 0x299e <__vector_87+0xd4>
		case PWR_ADJ_SPI_DATAL:
			//finished sending third byte... all done!
			//DESELECT
			switch(pwr_adj_channel_num_in_progress){
    2958:	80 91 11 27 	lds	r24, 0x2711
    295c:	84 30       	cpi	r24, 0x04	; 4
    295e:	18 f4       	brcc	.+6      	; 0x2966 <__vector_87+0x9c>
    2960:	82 30       	cpi	r24, 0x02	; 2
    2962:	58 f4       	brcc	.+22     	; 0x297a <__vector_87+0xb0>
    2964:	05 c0       	rjmp	.+10     	; 0x2970 <__vector_87+0xa6>
    2966:	86 30       	cpi	r24, 0x06	; 6
    2968:	68 f0       	brcs	.+26     	; 0x2984 <__vector_87+0xba>
    296a:	88 30       	cpi	r24, 0x08	; 8
    296c:	a0 f4       	brcc	.+40     	; 0x2996 <__vector_87+0xcc>
    296e:	0f c0       	rjmp	.+30     	; 0x298e <__vector_87+0xc4>
				case 0:
				case 1:
				PORTD.OUTSET = _BV(0); //CS high, done transmitting
    2970:	81 e0       	ldi	r24, 0x01	; 1
    2972:	e0 e6       	ldi	r30, 0x60	; 96
    2974:	f6 e0       	ldi	r31, 0x06	; 6
    2976:	85 83       	std	Z+5, r24	; 0x05
				break;
    2978:	0e c0       	rjmp	.+28     	; 0x2996 <__vector_87+0xcc>
				case 2:
				case 3:
				PORTD.OUTSET = _BV(1); //CS high, done transmitting
    297a:	82 e0       	ldi	r24, 0x02	; 2
    297c:	e0 e6       	ldi	r30, 0x60	; 96
    297e:	f6 e0       	ldi	r31, 0x06	; 6
    2980:	85 83       	std	Z+5, r24	; 0x05
				break;
    2982:	09 c0       	rjmp	.+18     	; 0x2996 <__vector_87+0xcc>
				case 4:
				case 5:
				PORTD.OUTSET = _BV(2); //CS high, done transmitting
    2984:	84 e0       	ldi	r24, 0x04	; 4
    2986:	e0 e6       	ldi	r30, 0x60	; 96
    2988:	f6 e0       	ldi	r31, 0x06	; 6
    298a:	85 83       	std	Z+5, r24	; 0x05
				break;
    298c:	04 c0       	rjmp	.+8      	; 0x2996 <__vector_87+0xcc>
				case 6:
				case 7:
				PORTD.OUTSET = _BV(3); //CS high, done transmitting
    298e:	88 e0       	ldi	r24, 0x08	; 8
    2990:	e0 e6       	ldi	r30, 0x60	; 96
    2992:	f6 e0       	ldi	r31, 0x06	; 6
    2994:	85 83       	std	Z+5, r24	; 0x05
				break;
			}
			//Select Next Channel
			pwr_adj_spi_state = PWR_ADJ_SPI_IDLE;
    2996:	10 92 23 27 	sts	0x2723, r1
			_pwr_adj_next();
    299a:	0e 94 07 13 	call	0x260e	; 0x260e <_pwr_adj_next>
		case PWR_ADJ_SPI_IDLE:
		default:
			//do nothing
			break;
	}
}
    299e:	ff 91       	pop	r31
    29a0:	ef 91       	pop	r30
    29a2:	bf 91       	pop	r27
    29a4:	af 91       	pop	r26
    29a6:	9f 91       	pop	r25
    29a8:	8f 91       	pop	r24
    29aa:	7f 91       	pop	r23
    29ac:	6f 91       	pop	r22
    29ae:	5f 91       	pop	r21
    29b0:	4f 91       	pop	r20
    29b2:	3f 91       	pop	r19
    29b4:	2f 91       	pop	r18
    29b6:	0f 90       	pop	r0
    29b8:	0b be       	out	0x3b, r0	; 59
    29ba:	0f 90       	pop	r0
    29bc:	09 be       	out	0x39, r0	; 57
    29be:	0f 90       	pop	r0
    29c0:	08 be       	out	0x38, r0	; 56
    29c2:	0f 90       	pop	r0
    29c4:	0f be       	out	0x3f, r0	; 63
    29c6:	0f 90       	pop	r0
    29c8:	1f 90       	pop	r1
    29ca:	18 95       	reti

000029cc <service_pwr_adjust>:

void service_pwr_adjust(){	
	
}
    29cc:	08 95       	ret

000029ce <init_pwr_main>:

//Handles control of the main power channels

void init_pwr_main(){
	//LED's are located at PF0 (Lower) and PF1 (Upper)
	PORTC.DIRSET = B8(00110011); //pins 0,1,4,5 to output
    29ce:	e0 e4       	ldi	r30, 0x40	; 64
    29d0:	f6 e0       	ldi	r31, 0x06	; 6
    29d2:	83 e3       	ldi	r24, 0x33	; 51
    29d4:	81 83       	std	Z+1, r24	; 0x01
	PORTC.OUTCLR = B8(00110011); //pins 0,1,4,5 to low output value (off)
    29d6:	86 83       	std	Z+6, r24	; 0x06
		break;
		case CHANNEL_D:
		PORTC.OUTCLR = B8(00100000);
		break;
		case CHANNEL_ALL:
		PORTC.OUTCLR = B8(00110011);
    29d8:	86 83       	std	Z+6, r24	; 0x06
void init_pwr_main(){
	//LED's are located at PF0 (Lower) and PF1 (Upper)
	PORTC.DIRSET = B8(00110011); //pins 0,1,4,5 to output
	PORTC.OUTCLR = B8(00110011); //pins 0,1,4,5 to low output value (off)
	pwr_main_off(CHANNEL_ALL);				
}
    29da:	08 95       	ret

000029dc <pwr_main_on>:
//## OUTPUT MUTE
//#############################################################

void inline pwr_main_on(uint8_t which){
	uint8_t mask;
	switch(which){
    29dc:	82 30       	cpi	r24, 0x02	; 2
    29de:	c1 f0       	breq	.+48     	; 0x2a10 <pwr_main_on+0x34>
    29e0:	83 30       	cpi	r24, 0x03	; 3
    29e2:	28 f4       	brcc	.+10     	; 0x29ee <pwr_main_on+0x12>
    29e4:	88 23       	and	r24, r24
    29e6:	51 f0       	breq	.+20     	; 0x29fc <pwr_main_on+0x20>
    29e8:	81 30       	cpi	r24, 0x01	; 1
    29ea:	69 f5       	brne	.+90     	; 0x2a46 <pwr_main_on+0x6a>
    29ec:	0c c0       	rjmp	.+24     	; 0x2a06 <pwr_main_on+0x2a>
    29ee:	8a 33       	cpi	r24, 0x3A	; 58
    29f0:	c9 f0       	breq	.+50     	; 0x2a24 <pwr_main_on+0x48>
    29f2:	8c 33       	cpi	r24, 0x3C	; 60
    29f4:	e1 f0       	breq	.+56     	; 0x2a2e <pwr_main_on+0x52>
    29f6:	83 30       	cpi	r24, 0x03	; 3
    29f8:	31 f5       	brne	.+76     	; 0x2a46 <pwr_main_on+0x6a>
    29fa:	0f c0       	rjmp	.+30     	; 0x2a1a <pwr_main_on+0x3e>
		case CHANNEL_A:
			PORTC.OUTSET = B8(00000001);
    29fc:	81 e0       	ldi	r24, 0x01	; 1
    29fe:	e0 e4       	ldi	r30, 0x40	; 64
    2a00:	f6 e0       	ldi	r31, 0x06	; 6
    2a02:	85 83       	std	Z+5, r24	; 0x05
			break;
    2a04:	08 95       	ret
		case CHANNEL_B:
			PORTC.OUTSET = B8(00000010);
    2a06:	82 e0       	ldi	r24, 0x02	; 2
    2a08:	e0 e4       	ldi	r30, 0x40	; 64
    2a0a:	f6 e0       	ldi	r31, 0x06	; 6
    2a0c:	85 83       	std	Z+5, r24	; 0x05
			break;
    2a0e:	08 95       	ret
		case CHANNEL_C:
			PORTC.OUTSET = B8(00010000);
    2a10:	80 e1       	ldi	r24, 0x10	; 16
    2a12:	e0 e4       	ldi	r30, 0x40	; 64
    2a14:	f6 e0       	ldi	r31, 0x06	; 6
    2a16:	85 83       	std	Z+5, r24	; 0x05
			break;
    2a18:	08 95       	ret
		case CHANNEL_D:
			PORTC.OUTSET = B8(00100000);
    2a1a:	80 e2       	ldi	r24, 0x20	; 32
    2a1c:	e0 e4       	ldi	r30, 0x40	; 64
    2a1e:	f6 e0       	ldi	r31, 0x06	; 6
    2a20:	85 83       	std	Z+5, r24	; 0x05
			break;
    2a22:	08 95       	ret
		case CHANNEL_ALL:
			PORTC.OUTSET = B8(00110011);
    2a24:	83 e3       	ldi	r24, 0x33	; 51
    2a26:	e0 e4       	ldi	r30, 0x40	; 64
    2a28:	f6 e0       	ldi	r31, 0x06	; 6
    2a2a:	85 83       	std	Z+5, r24	; 0x05
			break;
    2a2c:	08 95       	ret
		case CHANNEL_RESTORE:
			mask = STATE_power_channels >> 2; //[000000DC] remove lower channels
    2a2e:	80 91 e6 25 	lds	r24, 0x25E6
    2a32:	98 2f       	mov	r25, r24
    2a34:	96 95       	lsr	r25
    2a36:	96 95       	lsr	r25
			mask = mask << 4; //[00DC0000] position upper channels
    2a38:	92 95       	swap	r25
    2a3a:	90 7f       	andi	r25, 0xF0	; 240
			mask |= (STATE_power_channels & B8(00000011)); //[00DC00BA] merge in lower channels
    2a3c:	83 70       	andi	r24, 0x03	; 3
    2a3e:	89 2b       	or	r24, r25
			PORTC.OUTSET = mask;
    2a40:	e0 e4       	ldi	r30, 0x40	; 64
    2a42:	f6 e0       	ldi	r31, 0x06	; 6
    2a44:	85 83       	std	Z+5, r24	; 0x05
    2a46:	08 95       	ret

00002a48 <pwr_main_off>:
			break;
	}
}

void inline pwr_main_off(uint8_t which){
	switch(which){
    2a48:	82 30       	cpi	r24, 0x02	; 2
    2a4a:	b1 f0       	breq	.+44     	; 0x2a78 <pwr_main_off+0x30>
    2a4c:	83 30       	cpi	r24, 0x03	; 3
    2a4e:	28 f4       	brcc	.+10     	; 0x2a5a <pwr_main_off+0x12>
    2a50:	88 23       	and	r24, r24
    2a52:	41 f0       	breq	.+16     	; 0x2a64 <pwr_main_off+0x1c>
    2a54:	81 30       	cpi	r24, 0x01	; 1
    2a56:	f1 f4       	brne	.+60     	; 0x2a94 <pwr_main_off+0x4c>
    2a58:	0a c0       	rjmp	.+20     	; 0x2a6e <pwr_main_off+0x26>
    2a5a:	83 30       	cpi	r24, 0x03	; 3
    2a5c:	91 f0       	breq	.+36     	; 0x2a82 <pwr_main_off+0x3a>
    2a5e:	8a 33       	cpi	r24, 0x3A	; 58
    2a60:	c9 f4       	brne	.+50     	; 0x2a94 <pwr_main_off+0x4c>
    2a62:	14 c0       	rjmp	.+40     	; 0x2a8c <pwr_main_off+0x44>
		case CHANNEL_A:
		PORTC.OUTCLR = B8(00000001);
    2a64:	81 e0       	ldi	r24, 0x01	; 1
    2a66:	e0 e4       	ldi	r30, 0x40	; 64
    2a68:	f6 e0       	ldi	r31, 0x06	; 6
    2a6a:	86 83       	std	Z+6, r24	; 0x06
		break;
    2a6c:	08 95       	ret
		case CHANNEL_B:
		PORTC.OUTCLR = B8(00000010);
    2a6e:	82 e0       	ldi	r24, 0x02	; 2
    2a70:	e0 e4       	ldi	r30, 0x40	; 64
    2a72:	f6 e0       	ldi	r31, 0x06	; 6
    2a74:	86 83       	std	Z+6, r24	; 0x06
		break;
    2a76:	08 95       	ret
		case CHANNEL_C:
		PORTC.OUTCLR = B8(00010000);
    2a78:	80 e1       	ldi	r24, 0x10	; 16
    2a7a:	e0 e4       	ldi	r30, 0x40	; 64
    2a7c:	f6 e0       	ldi	r31, 0x06	; 6
    2a7e:	86 83       	std	Z+6, r24	; 0x06
		break;
    2a80:	08 95       	ret
		case CHANNEL_D:
		PORTC.OUTCLR = B8(00100000);
    2a82:	80 e2       	ldi	r24, 0x20	; 32
    2a84:	e0 e4       	ldi	r30, 0x40	; 64
    2a86:	f6 e0       	ldi	r31, 0x06	; 6
    2a88:	86 83       	std	Z+6, r24	; 0x06
		break;
    2a8a:	08 95       	ret
		case CHANNEL_ALL:
		PORTC.OUTCLR = B8(00110011);
    2a8c:	83 e3       	ldi	r24, 0x33	; 51
    2a8e:	e0 e4       	ldi	r30, 0x40	; 64
    2a90:	f6 e0       	ldi	r31, 0x06	; 6
    2a92:	86 83       	std	Z+6, r24	; 0x06
    2a94:	08 95       	ret

00002a96 <service_pwr_main>:
		break;
	}
}

void service_pwr_main(){
}
    2a96:	08 95       	ret

00002a98 <init_rtos_clock_external>:
#include "quadrature.h"
#include "eeprom.h"

int init_rtos_clock_external(void){
	//Boot up and configure oscillator
	OSC.XOSCCTRL = B8(00100010); //enable external 32kHz Xtal using low-power (e.g. low-swing) mode
    2a98:	e0 e5       	ldi	r30, 0x50	; 80
    2a9a:	f0 e0       	ldi	r31, 0x00	; 0
    2a9c:	82 e2       	ldi	r24, 0x22	; 34
    2a9e:	82 83       	std	Z+2, r24	; 0x02
	OSC.CTRL = B8(00001011); //enable 32M-RC & External Xtal -- also "enable" 2M-RC since its already running b/c we booted from it and can't actually disable it until we switch sources
    2aa0:	8b e0       	ldi	r24, 0x0B	; 11
    2aa2:	80 83       	st	Z, r24
	//Wait for stability
	led_on(LED_0);
    2aa4:	80 e0       	ldi	r24, 0x00	; 0
    2aa6:	0e 94 e9 2f 	call	0x5fd2	; 0x5fd2 <led_on>
	//This is actually tricky sequencing because we boot from the 2MHz internal RC so previous write to OSC.CTRL was ineffective at shutting down the 2M-RC so OSC.STATUS will still reflect that it is running
	while(OSC.STATUS != B8(00001011)); //stall for external xtal and 32M-RC stability
    2aaa:	e0 e5       	ldi	r30, 0x50	; 80
    2aac:	f0 e0       	ldi	r31, 0x00	; 0
    2aae:	81 81       	ldd	r24, Z+1	; 0x01
    2ab0:	8b 30       	cpi	r24, 0x0B	; 11
    2ab2:	e9 f7       	brne	.-6      	; 0x2aae <init_rtos_clock_external+0x16>
	led_off(LED_0);
    2ab4:	80 e0       	ldi	r24, 0x00	; 0
    2ab6:	0e 94 05 30 	call	0x600a	; 0x600a <led_off>
	//Configure
	OSC.DFLLCTRL = B8(00000010); //use external xtal for 32M-RC calibration
    2aba:	e0 e5       	ldi	r30, 0x50	; 80
    2abc:	f0 e0       	ldi	r31, 0x00	; 0
    2abe:	82 e0       	ldi	r24, 0x02	; 2
    2ac0:	86 83       	std	Z+6, r24	; 0x06
	DFLLRC32M.CTRL = B8(00000001); //enable Xtal calibration of internal 32MHz RC oscillator
    2ac2:	81 e0       	ldi	r24, 0x01	; 1
    2ac4:	80 93 60 00 	sts	0x0060, r24
	//Switch system clock over to stable RC oscillator
	//Switch to 32M-RC as system clock source and disable the 2M-RC that we booted from.
	//----REQUIRES CONFIGURATION PROTECTION REGISTER
	CCP = CCP_IOREG_gc; //disable change protection for IO register
    2ac8:	98 ed       	ldi	r25, 0xD8	; 216
    2aca:	94 bf       	out	0x34, r25	; 52
	CLK.CTRL = CLK_SCLKSEL_RC32M_gc;
    2acc:	80 93 40 00 	sts	0x0040, r24
	OSC.CTRL = B8(00001010); //re-execute this write -- this will shutdown the 2M-RC since we are no longer running from it.
    2ad0:	8a e0       	ldi	r24, 0x0A	; 10
    2ad2:	80 83       	st	Z, r24
	//Now running live at 32MHz
	return 0;
}
    2ad4:	80 e0       	ldi	r24, 0x00	; 0
    2ad6:	90 e0       	ldi	r25, 0x00	; 0
    2ad8:	08 95       	ret

00002ada <init_rtos_clock_internal>:

int init_rtos_clock_internal(void){
	//Boot up and configure oscillator
	OSC.CTRL = B8(00000111); //enable 32M-RC & INTERNAL 32kHz -- also "enable" 2M-RC since its already running b/c we booted from it and can't actually disable it until we switch sources
    2ada:	87 e0       	ldi	r24, 0x07	; 7
    2adc:	80 93 50 00 	sts	0x0050, r24
	//Wait for stability
	led_on(LED_0);
    2ae0:	80 e0       	ldi	r24, 0x00	; 0
    2ae2:	0e 94 e9 2f 	call	0x5fd2	; 0x5fd2 <led_on>
	//This is actually tricky sequencing because we boot from the 2MHz internal RC so previous write to OSC.CTRL was ineffective at shutting down the 2M-RC so OSC.STATUS will still reflect that it is running
	while(OSC.STATUS != B8(00000111)); //stall for INTERNAL 32k-RC and 32MHz-RC stability
    2ae6:	e0 e5       	ldi	r30, 0x50	; 80
    2ae8:	f0 e0       	ldi	r31, 0x00	; 0
    2aea:	81 81       	ldd	r24, Z+1	; 0x01
    2aec:	87 30       	cpi	r24, 0x07	; 7
    2aee:	e9 f7       	brne	.-6      	; 0x2aea <init_rtos_clock_internal+0x10>
	led_off(LED_0);
    2af0:	80 e0       	ldi	r24, 0x00	; 0
    2af2:	0e 94 05 30 	call	0x600a	; 0x600a <led_off>
	//Configure
	OSC.DFLLCTRL = B8(00000010); //use external xtal for 32M-RC calibration
    2af6:	e0 e5       	ldi	r30, 0x50	; 80
    2af8:	f0 e0       	ldi	r31, 0x00	; 0
    2afa:	82 e0       	ldi	r24, 0x02	; 2
    2afc:	86 83       	std	Z+6, r24	; 0x06
	DFLLRC32M.CTRL = B8(00000001); //enable Xtal calibration of internal 32MHz RC oscillator
    2afe:	81 e0       	ldi	r24, 0x01	; 1
    2b00:	80 93 60 00 	sts	0x0060, r24
	//Switch system clock over to stable RC oscillator
	//Switch to 32M-RC as system clock source and disable the 2M-RC that we booted from.
	//----REQUIRES CONFIGURATION PROTECTION REGISTER
	CCP = CCP_IOREG_gc; //disable change protection for IO register
    2b04:	98 ed       	ldi	r25, 0xD8	; 216
    2b06:	94 bf       	out	0x34, r25	; 52
	CLK.CTRL = CLK_SCLKSEL_RC32M_gc;
    2b08:	80 93 40 00 	sts	0x0040, r24
	OSC.CTRL = B8(00001010); //re-execute this write -- this will shutdown the 2M-RC since we are no longer running from it.
    2b0c:	8a e0       	ldi	r24, 0x0A	; 10
    2b0e:	80 83       	st	Z, r24
	//Now running live at 32MHz
	return 0;
}
    2b10:	80 e0       	ldi	r24, 0x00	; 0
    2b12:	90 e0       	ldi	r25, 0x00	; 0
    2b14:	08 95       	ret

00002b16 <main>:
	//[BLINK ALIVE]
	uint8_t blah;
	int8_t updown;

	//[LED's, Button, & Switches]
	init_ui(); //init LED's first so that they are available for debugging
    2b16:	0e 94 53 30 	call	0x60a6	; 0x60a6 <init_ui>
	init_fp(); //init Front Panel LED's and Switches so that they are available for debugging
    2b1a:	0e 94 41 09 	call	0x1282	; 0x1282 <init_fp>
	init_quadrature(); //init quadrature decoder for front panel rotary encoder
    2b1e:	0e 94 0e 16 	call	0x2c1c	; 0x2c1c <init_quadrature>
	
	//[CPU CLOCK]
	init_rtos_clock_internal();
    2b22:	0e 94 6d 15 	call	0x2ada	; 0x2ada <init_rtos_clock_internal>

	//[LCD]
	init_lcd();
    2b26:	0e 94 47 0b 	call	0x168e	; 0x168e <init_lcd>
	init_lcd_console();
    2b2a:	0e 94 92 0c 	call	0x1924	; 0x1924 <init_lcd_console>
	init_lcd_touch();
    2b2e:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <init_lcd_touch>

	//[UARTs]
	init_uart(&uctrl, BAUD_115200);
    2b32:	80 ea       	ldi	r24, 0xA0	; 160
    2b34:	98 e0       	ldi	r25, 0x08	; 8
    2b36:	60 e0       	ldi	r22, 0x00	; 0
    2b38:	0e 94 33 17 	call	0x2e66	; 0x2e66 <init_uart>
	init_uart(&udata, BAUD_115200);
    2b3c:	80 eb       	ldi	r24, 0xB0	; 176
    2b3e:	98 e0       	ldi	r25, 0x08	; 8
    2b40:	60 e0       	ldi	r22, 0x00	; 0
    2b42:	0e 94 33 17 	call	0x2e66	; 0x2e66 <init_uart>
	init_uart(&ulcd, BAUD_115200);
    2b46:	80 eb       	ldi	r24, 0xB0	; 176
    2b48:	9b e0       	ldi	r25, 0x0B	; 11
    2b4a:	60 e0       	ldi	r22, 0x00	; 0
    2b4c:	0e 94 33 17 	call	0x2e66	; 0x2e66 <init_uart>
	init_uart_buffers();
    2b50:	0e 94 5d 2d 	call	0x5aba	; 0x5aba <init_uart_buffers>
	
	//[ADC]
	init_adc();		
    2b54:	0e 94 58 01 	call	0x2b0	; 0x2b0 <init_adc>

	//[POWER PATH]
	init_pwr_main();
    2b58:	0e 94 e7 14 	call	0x29ce	; 0x29ce <init_pwr_main>
	init_pwr_adjust();
    2b5c:	0e 94 bf 12 	call	0x257e	; 0x257e <init_pwr_adjust>

	//[BRAIN]
	init_brain();
    2b60:	0e 94 07 04 	call	0x80e	; 0x80e <init_brain>
	
	//[EEPROM] -- do this last
	init_eeprom();
    2b64:	0e 94 38 09 	call	0x1270	; 0x1270 <init_eeprom>
		
	//[Realtime Loop Timer]
	//Use PortC's T/C0
	TCC0.CTRLA = 0x07; //Start the timer; Div1024 operation = 32M/1024 = 31250
    2b68:	e0 e0       	ldi	r30, 0x00	; 0
    2b6a:	f8 e0       	ldi	r31, 0x08	; 8
    2b6c:	87 e0       	ldi	r24, 0x07	; 7
    2b6e:	80 83       	st	Z, r24
	TCC0.PER = 62; //2ms Loop Time
    2b70:	8e e3       	ldi	r24, 0x3E	; 62
    2b72:	90 e0       	ldi	r25, 0x00	; 0
    2b74:	86 a3       	lds	r24, 0x56
    2b76:	97 a3       	lds	r25, 0x57

	//[PMIC (Interrupt Controller)]
	PMIC.CTRL = B8(10000111); //enable all three interrupt levels (lowest one with round-robin)
    2b78:	87 e8       	ldi	r24, 0x87	; 135
    2b7a:	e0 ea       	ldi	r30, 0xA0	; 160
    2b7c:	f0 e0       	ldi	r31, 0x00	; 0
    2b7e:	82 83       	std	Z+2, r24	; 0x02
	sei(); //ENABLE INTERRUPTS AND GO LIVE!
    2b80:	78 94       	sei

	//[RTOS START!]
	blah = 1;
	updown = 1;
	led_off(LED_0);
    2b82:	80 e0       	ldi	r24, 0x00	; 0
    2b84:	0e 94 05 30 	call	0x600a	; 0x600a <led_off>
	led_off(LED_1);
    2b88:	81 e0       	ldi	r24, 0x01	; 1
    2b8a:	0e 94 05 30 	call	0x600a	; 0x600a <led_off>
	audio_beep(2, 100);
    2b8e:	82 e0       	ldi	r24, 0x02	; 2
    2b90:	64 e6       	ldi	r22, 0x64	; 100
    2b92:	70 e0       	ldi	r23, 0x00	; 0
    2b94:	0e 94 85 30 	call	0x610a	; 0x610a <audio_beep>
	PORTE.DIRSET = B8(00000011); //PE0, PE1 to output pin for loop timer
    2b98:	e0 e8       	ldi	r30, 0x80	; 128
    2b9a:	f6 e0       	ldi	r31, 0x06	; 6
    2b9c:	83 e0       	ldi	r24, 0x03	; 3
    2b9e:	81 83       	std	Z+1, r24	; 0x01

	while(1){
		PORTE.OUTSET = 0x02; //Set PE1 on start of loop and lower after work is done.
    2ba0:	82 e0       	ldi	r24, 0x02	; 2
    2ba2:	85 83       	std	Z+5, r24	; 0x05
		//Blink alive
		led_dim(LED_0, blah);	
    2ba4:	80 e0       	ldi	r24, 0x00	; 0
    2ba6:	61 e0       	ldi	r22, 0x01	; 1
    2ba8:	0e 94 1b 30 	call	0x6036	; 0x6036 <led_dim>
		blah += updown;
    2bac:	12 e0       	ldi	r17, 0x02	; 2
	PMIC.CTRL = B8(10000111); //enable all three interrupt levels (lowest one with round-robin)
	sei(); //ENABLE INTERRUPTS AND GO LIVE!

	//[RTOS START!]
	blah = 1;
	updown = 1;
    2bae:	01 e0       	ldi	r16, 0x01	; 1
		led_dim(LED_0, blah);	
		blah += updown;
		if ((blah == 255) || (blah == 0)) {
			updown = -1 * updown;
		}
		PORTE.OUTTGL = 0x01; //wiggle pin to indicate loop timing
    2bb0:	0f 2e       	mov	r0, r31
    2bb2:	f0 e8       	ldi	r31, 0x80	; 128
    2bb4:	ef 2e       	mov	r14, r31
    2bb6:	f6 e0       	ldi	r31, 0x06	; 6
    2bb8:	ff 2e       	mov	r15, r31
    2bba:	f0 2d       	mov	r31, r0
    2bbc:	cc 24       	eor	r12, r12
    2bbe:	c3 94       	inc	r12
    2bc0:	bc 2c       	mov	r11, r12
		service_lcd_console();
		service_lcd_touch();
		service_pwr_adjust();
		
		//Wait out RTOS loop
		PORTE.OUTCLR = 0x02; //Indicate work for this cycle has finished on PE1
    2bc2:	dd 24       	eor	r13, r13
    2bc4:	68 94       	set
    2bc6:	d1 f8       	bld	r13, 1
		while((TCC0.INTFLAGS & _BV(0)) != 0x01); //Wait for the loop time to expire
    2bc8:	c0 e0       	ldi	r28, 0x00	; 0
    2bca:	d8 e0       	ldi	r29, 0x08	; 8
    2bcc:	01 c0       	rjmp	.+2      	; 0x2bd0 <main+0xba>
		PORTE.OUTSET = 0x02; //Set PE1 on start of loop and lower after work is done.
		//Blink alive
		led_dim(LED_0, blah);	
		blah += updown;
		if ((blah == 255) || (blah == 0)) {
			updown = -1 * updown;
    2bce:	01 95       	neg	r16
		}
		PORTE.OUTTGL = 0x01; //wiggle pin to indicate loop timing
    2bd0:	f7 01       	movw	r30, r14
    2bd2:	b7 82       	std	Z+7, r11	; 0x07
		
		//Call services
		service_audio();
    2bd4:	0e 94 91 30 	call	0x6122	; 0x6122 <service_audio>
		service_fp();
    2bd8:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <service_fp>
		service_adc();
    2bdc:	0e 94 aa 02 	call	0x554	; 0x554 <service_adc>
		service_brain();	
    2be0:	0e 94 37 06 	call	0xc6e	; 0xc6e <service_brain>
		service_uart_buffer();
    2be4:	0e 94 23 2e 	call	0x5c46	; 0x5c46 <service_uart_buffer>
		service_lcd();
    2be8:	0e 94 40 0c 	call	0x1880	; 0x1880 <service_lcd>
		service_lcd_console();
    2bec:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <service_lcd_console>
		service_lcd_touch();
    2bf0:	0e 94 60 12 	call	0x24c0	; 0x24c0 <service_lcd_touch>
		service_pwr_adjust();
    2bf4:	0e 94 e6 14 	call	0x29cc	; 0x29cc <service_pwr_adjust>
		
		//Wait out RTOS loop
		PORTE.OUTCLR = 0x02; //Indicate work for this cycle has finished on PE1
    2bf8:	f7 01       	movw	r30, r14
    2bfa:	d6 82       	std	Z+6, r13	; 0x06
		while((TCC0.INTFLAGS & _BV(0)) != 0x01); //Wait for the loop time to expire
    2bfc:	8c 85       	ldd	r24, Y+12	; 0x0c
    2bfe:	80 ff       	sbrs	r24, 0
    2c00:	fd cf       	rjmp	.-6      	; 0x2bfc <main+0xe6>
		TCC0.INTFLAGS = 0x01; //Clear the interrupt flag
    2c02:	cc 86       	std	Y+12, r12	; 0x0c
	led_off(LED_1);
	audio_beep(2, 100);
	PORTE.DIRSET = B8(00000011); //PE0, PE1 to output pin for loop timer

	while(1){
		PORTE.OUTSET = 0x02; //Set PE1 on start of loop and lower after work is done.
    2c04:	f7 01       	movw	r30, r14
    2c06:	d5 82       	std	Z+5, r13	; 0x05
		//Blink alive
		led_dim(LED_0, blah);	
    2c08:	80 e0       	ldi	r24, 0x00	; 0
    2c0a:	61 2f       	mov	r22, r17
    2c0c:	0e 94 1b 30 	call	0x6036	; 0x6036 <led_dim>
		blah += updown;
    2c10:	10 0f       	add	r17, r16
		if ((blah == 255) || (blah == 0)) {
    2c12:	81 2f       	mov	r24, r17
    2c14:	81 50       	subi	r24, 0x01	; 1
    2c16:	8e 3f       	cpi	r24, 0xFE	; 254
    2c18:	d0 f6       	brcc	.-76     	; 0x2bce <main+0xb8>
    2c1a:	da cf       	rjmp	.-76     	; 0x2bd0 <main+0xba>

00002c1c <init_quadrature>:
		============		
		PK6: Rotary Channel A
		PK7: Rotary Channel B
	*/
	//	SciPSU FP switches have hardware pull-up and hardware debounce
	PORTK.DIRCLR = B8(11000000); //This is the default condition, but just to be safe
    2c1c:	e0 e2       	ldi	r30, 0x20	; 32
    2c1e:	f7 e0       	ldi	r31, 0x07	; 7
    2c20:	80 ec       	ldi	r24, 0xC0	; 192
    2c22:	82 83       	std	Z+2, r24	; 0x02
	PORTK.INT0MASK = B8(01000000); //Enable PORTK.Interrupt0 channel for PK6 
    2c24:	80 e4       	ldi	r24, 0x40	; 64
    2c26:	82 87       	std	Z+10, r24	; 0x0a
	PORTK.INT1MASK = B8(10000000); //Enable PORTK.Interrupt1 channel for PK7 
    2c28:	80 e8       	ldi	r24, 0x80	; 128
    2c2a:	83 87       	std	Z+11, r24	; 0x0b
	PORTK.INTCTRL = B8(00001111); //interrupt 0 & 1 channels set to highest priority
    2c2c:	8f e0       	ldi	r24, 0x0F	; 15
    2c2e:	81 87       	std	Z+9, r24	; 0x09
	//Setup initial edge look directions -- need to enable global interrupts shortly after doing this (so init the quadrature module last in main.c)
	if ((PORTK.IN & _BV(6)) == 0){PORTK.PIN6CTRL = RISING_EDGE;} 
    2c30:	80 85       	ldd	r24, Z+8	; 0x08
    2c32:	86 fd       	sbrc	r24, 6
    2c34:	03 c0       	rjmp	.+6      	; 0x2c3c <init_quadrature+0x20>
    2c36:	89 e9       	ldi	r24, 0x99	; 153
    2c38:	86 8b       	std	Z+22, r24	; 0x16
    2c3a:	04 c0       	rjmp	.+8      	; 0x2c44 <init_quadrature+0x28>
	else {PORTK.PIN6CTRL = FALLING_EDGE;}
    2c3c:	8a e9       	ldi	r24, 0x9A	; 154
    2c3e:	e0 e2       	ldi	r30, 0x20	; 32
    2c40:	f7 e0       	ldi	r31, 0x07	; 7
    2c42:	86 8b       	std	Z+22, r24	; 0x16
	if ((PORTK.IN & _BV(7)) == 0){PORTK.PIN7CTRL = RISING_EDGE;}
    2c44:	e0 e2       	ldi	r30, 0x20	; 32
    2c46:	f7 e0       	ldi	r31, 0x07	; 7
    2c48:	80 85       	ldd	r24, Z+8	; 0x08
    2c4a:	88 23       	and	r24, r24
    2c4c:	1c f0       	brlt	.+6      	; 0x2c54 <init_quadrature+0x38>
    2c4e:	89 e9       	ldi	r24, 0x99	; 153
    2c50:	87 8b       	std	Z+23, r24	; 0x17
    2c52:	04 c0       	rjmp	.+8      	; 0x2c5c <init_quadrature+0x40>
	else {PORTK.PIN7CTRL = FALLING_EDGE;}
    2c54:	8a e9       	ldi	r24, 0x9A	; 154
    2c56:	e0 e2       	ldi	r30, 0x20	; 32
    2c58:	f7 e0       	ldi	r31, 0x07	; 7
    2c5a:	87 8b       	std	Z+23, r24	; 0x17
		
	quad_count = 0;
    2c5c:	10 92 17 27 	sts	0x2717, r1
    2c60:	10 92 18 27 	sts	0x2718, r1
	quad_state = QUAD_IDLE;
    2c64:	8c e2       	ldi	r24, 0x2C	; 44
    2c66:	80 93 14 27 	sts	0x2714, r24
	
}
    2c6a:	08 95       	ret

00002c6c <quad_up>:

/// Reports if the quadrature encoded control has moved up since the last time this function was called.
/* SIDE EFFECT: modifies internal state. If you call this twice, only the first call will report true.*/
boolean quad_up(){
	if (quad_state == QUAD_UP){quad_state = QUAD_IDLE; return true;}
    2c6c:	80 91 14 27 	lds	r24, 0x2714
    2c70:	8d 32       	cpi	r24, 0x2D	; 45
    2c72:	29 f4       	brne	.+10     	; 0x2c7e <quad_up+0x12>
    2c74:	8c e2       	ldi	r24, 0x2C	; 44
    2c76:	80 93 14 27 	sts	0x2714, r24
    2c7a:	81 e0       	ldi	r24, 0x01	; 1
    2c7c:	08 95       	ret
	return false;
    2c7e:	80 e0       	ldi	r24, 0x00	; 0
}
    2c80:	08 95       	ret

00002c82 <quad_down>:

/// Reports if the quadrature encoded control has moved down since the last time this function was called.
/* SIDE EFFECT: modifies internal state. If you call this twice, only the first call will report true.*/
boolean quad_down(){
if (quad_state == QUAD_DOWN){quad_state = QUAD_IDLE; return true;}
    2c82:	80 91 14 27 	lds	r24, 0x2714
    2c86:	8e 32       	cpi	r24, 0x2E	; 46
    2c88:	29 f4       	brne	.+10     	; 0x2c94 <quad_down+0x12>
    2c8a:	8c e2       	ldi	r24, 0x2C	; 44
    2c8c:	80 93 14 27 	sts	0x2714, r24
    2c90:	81 e0       	ldi	r24, 0x01	; 1
    2c92:	08 95       	ret
return false;
    2c94:	80 e0       	ldi	r24, 0x00	; 0
}
    2c96:	08 95       	ret

00002c98 <__vector_100>:
//#############################################################
//## ROTARY CONTROL
//#############################################################

///Interrupt Service Routine (ISR) for quadrature encoder Channel A (PORTK Int0; PK6)
ISR(PORTK_INT0_vect){
    2c98:	1f 92       	push	r1
    2c9a:	0f 92       	push	r0
    2c9c:	0f b6       	in	r0, 0x3f	; 63
    2c9e:	0f 92       	push	r0
    2ca0:	08 b6       	in	r0, 0x38	; 56
    2ca2:	0f 92       	push	r0
    2ca4:	0b b6       	in	r0, 0x3b	; 59
    2ca6:	0f 92       	push	r0
    2ca8:	11 24       	eor	r1, r1
    2caa:	8f 93       	push	r24
    2cac:	9f 93       	push	r25
    2cae:	ef 93       	push	r30
    2cb0:	ff 93       	push	r31
	if (PORTK.PIN6CTRL == FALLING_EDGE){
    2cb2:	e0 e2       	ldi	r30, 0x20	; 32
    2cb4:	f7 e0       	ldi	r31, 0x07	; 7
    2cb6:	86 89       	ldd	r24, Z+22	; 0x16
    2cb8:	8a 39       	cpi	r24, 0x9A	; 154
    2cba:	01 f5       	brne	.+64     	; 0x2cfc <__vector_100+0x64>
		//Detected FALLING edge on channel A
		if ((PORTK.IN & _BV(7)) == 0){
    2cbc:	80 85       	ldd	r24, Z+8	; 0x08
    2cbe:	88 23       	and	r24, r24
    2cc0:	6c f0       	brlt	.+26     	; 0x2cdc <__vector_100+0x44>
			//if channel A is falling and channel B is low, direction = DOWN
			quad_count--;
    2cc2:	80 91 17 27 	lds	r24, 0x2717
    2cc6:	90 91 18 27 	lds	r25, 0x2718
    2cca:	01 97       	sbiw	r24, 0x01	; 1
    2ccc:	80 93 17 27 	sts	0x2717, r24
    2cd0:	90 93 18 27 	sts	0x2718, r25
			quad_state = QUAD_DOWN;
    2cd4:	8e e2       	ldi	r24, 0x2E	; 46
    2cd6:	80 93 14 27 	sts	0x2714, r24
    2cda:	0c c0       	rjmp	.+24     	; 0x2cf4 <__vector_100+0x5c>
		}
		else{
			//if channel A is falling and channel B is high, direction = UP
			quad_count++;
    2cdc:	80 91 17 27 	lds	r24, 0x2717
    2ce0:	90 91 18 27 	lds	r25, 0x2718
    2ce4:	01 96       	adiw	r24, 0x01	; 1
    2ce6:	80 93 17 27 	sts	0x2717, r24
    2cea:	90 93 18 27 	sts	0x2718, r25
			quad_state = QUAD_UP;
    2cee:	8d e2       	ldi	r24, 0x2D	; 45
    2cf0:	80 93 14 27 	sts	0x2714, r24
		}
		//Now, look for rising edge
		PORTK.PIN6CTRL = RISING_EDGE;
    2cf4:	89 e9       	ldi	r24, 0x99	; 153
    2cf6:	e0 e2       	ldi	r30, 0x20	; 32
    2cf8:	f7 e0       	ldi	r31, 0x07	; 7
    2cfa:	86 8b       	std	Z+22, r24	; 0x16
	}
	if (PORTK.PIN6CTRL == RISING_EDGE){
    2cfc:	e0 e2       	ldi	r30, 0x20	; 32
    2cfe:	f7 e0       	ldi	r31, 0x07	; 7
    2d00:	86 89       	ldd	r24, Z+22	; 0x16
    2d02:	89 39       	cpi	r24, 0x99	; 153
    2d04:	01 f5       	brne	.+64     	; 0x2d46 <__vector_100+0xae>
		//Detected RISING edge on channel A
		if ((PORTK.IN & _BV(7)) == 0){
    2d06:	80 85       	ldd	r24, Z+8	; 0x08
    2d08:	88 23       	and	r24, r24
    2d0a:	6c f0       	brlt	.+26     	; 0x2d26 <__vector_100+0x8e>
			//if channel A is rising and channel B is low, direction = UP
			quad_count++;
    2d0c:	80 91 17 27 	lds	r24, 0x2717
    2d10:	90 91 18 27 	lds	r25, 0x2718
    2d14:	01 96       	adiw	r24, 0x01	; 1
    2d16:	80 93 17 27 	sts	0x2717, r24
    2d1a:	90 93 18 27 	sts	0x2718, r25
			quad_state = QUAD_UP;
    2d1e:	8d e2       	ldi	r24, 0x2D	; 45
    2d20:	80 93 14 27 	sts	0x2714, r24
    2d24:	0c c0       	rjmp	.+24     	; 0x2d3e <__vector_100+0xa6>
		}
		else{
			//if channel A is rising and channel B is high, direction = DOWN
			quad_count--;
    2d26:	80 91 17 27 	lds	r24, 0x2717
    2d2a:	90 91 18 27 	lds	r25, 0x2718
    2d2e:	01 97       	sbiw	r24, 0x01	; 1
    2d30:	80 93 17 27 	sts	0x2717, r24
    2d34:	90 93 18 27 	sts	0x2718, r25
			quad_state = QUAD_DOWN;
    2d38:	8e e2       	ldi	r24, 0x2E	; 46
    2d3a:	80 93 14 27 	sts	0x2714, r24
		}
		//Now, look for falling edge
		PORTK.PIN6CTRL = FALLING_EDGE;
    2d3e:	8a e9       	ldi	r24, 0x9A	; 154
    2d40:	e0 e2       	ldi	r30, 0x20	; 32
    2d42:	f7 e0       	ldi	r31, 0x07	; 7
    2d44:	86 8b       	std	Z+22, r24	; 0x16
	}
	PORTK.INTFLAGS = B8(00000001); //clear interrupt flag just in case
    2d46:	81 e0       	ldi	r24, 0x01	; 1
    2d48:	e0 e2       	ldi	r30, 0x20	; 32
    2d4a:	f7 e0       	ldi	r31, 0x07	; 7
    2d4c:	84 87       	std	Z+12, r24	; 0x0c
}
    2d4e:	ff 91       	pop	r31
    2d50:	ef 91       	pop	r30
    2d52:	9f 91       	pop	r25
    2d54:	8f 91       	pop	r24
    2d56:	0f 90       	pop	r0
    2d58:	0b be       	out	0x3b, r0	; 59
    2d5a:	0f 90       	pop	r0
    2d5c:	08 be       	out	0x38, r0	; 56
    2d5e:	0f 90       	pop	r0
    2d60:	0f be       	out	0x3f, r0	; 63
    2d62:	0f 90       	pop	r0
    2d64:	1f 90       	pop	r1
    2d66:	18 95       	reti

00002d68 <__vector_101>:

///Interrupt Service Routine (ISR) for quadrature encoder Channel B (PORTK Int1; PK7)
ISR(PORTK_INT1_vect){
    2d68:	1f 92       	push	r1
    2d6a:	0f 92       	push	r0
    2d6c:	0f b6       	in	r0, 0x3f	; 63
    2d6e:	0f 92       	push	r0
    2d70:	08 b6       	in	r0, 0x38	; 56
    2d72:	0f 92       	push	r0
    2d74:	0b b6       	in	r0, 0x3b	; 59
    2d76:	0f 92       	push	r0
    2d78:	11 24       	eor	r1, r1
    2d7a:	8f 93       	push	r24
    2d7c:	9f 93       	push	r25
    2d7e:	ef 93       	push	r30
    2d80:	ff 93       	push	r31
	if (PORTK.PIN7CTRL == FALLING_EDGE){
    2d82:	e0 e2       	ldi	r30, 0x20	; 32
    2d84:	f7 e0       	ldi	r31, 0x07	; 7
    2d86:	87 89       	ldd	r24, Z+23	; 0x17
    2d88:	8a 39       	cpi	r24, 0x9A	; 154
    2d8a:	01 f5       	brne	.+64     	; 0x2dcc <__vector_101+0x64>
		//Detected FALLING edge on channel A
		if ((PORTK.IN & _BV(6)) == 0){
    2d8c:	80 85       	ldd	r24, Z+8	; 0x08
    2d8e:	86 fd       	sbrc	r24, 6
    2d90:	0d c0       	rjmp	.+26     	; 0x2dac <__vector_101+0x44>
			//if channel B is falling and channel A is low, direction = UP
			quad_count++;
    2d92:	80 91 17 27 	lds	r24, 0x2717
    2d96:	90 91 18 27 	lds	r25, 0x2718
    2d9a:	01 96       	adiw	r24, 0x01	; 1
    2d9c:	80 93 17 27 	sts	0x2717, r24
    2da0:	90 93 18 27 	sts	0x2718, r25
			quad_state = QUAD_UP;
    2da4:	8d e2       	ldi	r24, 0x2D	; 45
    2da6:	80 93 14 27 	sts	0x2714, r24
    2daa:	0c c0       	rjmp	.+24     	; 0x2dc4 <__vector_101+0x5c>
		}
		else{
			//if channel B is falling and channel A is high, direction = DOWN
			quad_count--;
    2dac:	80 91 17 27 	lds	r24, 0x2717
    2db0:	90 91 18 27 	lds	r25, 0x2718
    2db4:	01 97       	sbiw	r24, 0x01	; 1
    2db6:	80 93 17 27 	sts	0x2717, r24
    2dba:	90 93 18 27 	sts	0x2718, r25
			quad_state = QUAD_DOWN;
    2dbe:	8e e2       	ldi	r24, 0x2E	; 46
    2dc0:	80 93 14 27 	sts	0x2714, r24
		}
		//Now, look for rising edge
		PORTK.PIN7CTRL = RISING_EDGE;
    2dc4:	89 e9       	ldi	r24, 0x99	; 153
    2dc6:	e0 e2       	ldi	r30, 0x20	; 32
    2dc8:	f7 e0       	ldi	r31, 0x07	; 7
    2dca:	87 8b       	std	Z+23, r24	; 0x17
	}
	if (PORTK.PIN7CTRL == RISING_EDGE){
    2dcc:	e0 e2       	ldi	r30, 0x20	; 32
    2dce:	f7 e0       	ldi	r31, 0x07	; 7
    2dd0:	87 89       	ldd	r24, Z+23	; 0x17
    2dd2:	89 39       	cpi	r24, 0x99	; 153
    2dd4:	01 f5       	brne	.+64     	; 0x2e16 <__vector_101+0xae>
		//Detected RISING edge on channel B
		if ((PORTK.IN & _BV(6)) == 0){
    2dd6:	80 85       	ldd	r24, Z+8	; 0x08
    2dd8:	86 fd       	sbrc	r24, 6
    2dda:	0d c0       	rjmp	.+26     	; 0x2df6 <__vector_101+0x8e>
			//if channel B is rising and channel A is low, direction = DOWN
			quad_count--;
    2ddc:	80 91 17 27 	lds	r24, 0x2717
    2de0:	90 91 18 27 	lds	r25, 0x2718
    2de4:	01 97       	sbiw	r24, 0x01	; 1
    2de6:	80 93 17 27 	sts	0x2717, r24
    2dea:	90 93 18 27 	sts	0x2718, r25
			quad_state = QUAD_DOWN;
    2dee:	8e e2       	ldi	r24, 0x2E	; 46
    2df0:	80 93 14 27 	sts	0x2714, r24
    2df4:	0c c0       	rjmp	.+24     	; 0x2e0e <__vector_101+0xa6>
		}
		else{
			//if channel B is rising and channel A is high, direction = UP
			quad_count++;
    2df6:	80 91 17 27 	lds	r24, 0x2717
    2dfa:	90 91 18 27 	lds	r25, 0x2718
    2dfe:	01 96       	adiw	r24, 0x01	; 1
    2e00:	80 93 17 27 	sts	0x2717, r24
    2e04:	90 93 18 27 	sts	0x2718, r25
			quad_state = QUAD_UP;
    2e08:	8d e2       	ldi	r24, 0x2D	; 45
    2e0a:	80 93 14 27 	sts	0x2714, r24
		}
		//Now, look for falling edge
		PORTK.PIN7CTRL = FALLING_EDGE;
    2e0e:	8a e9       	ldi	r24, 0x9A	; 154
    2e10:	e0 e2       	ldi	r30, 0x20	; 32
    2e12:	f7 e0       	ldi	r31, 0x07	; 7
    2e14:	87 8b       	std	Z+23, r24	; 0x17
	}
	PORTK.INTFLAGS = B8(00000010); //clear interrupt flag just in case
    2e16:	82 e0       	ldi	r24, 0x02	; 2
    2e18:	e0 e2       	ldi	r30, 0x20	; 32
    2e1a:	f7 e0       	ldi	r31, 0x07	; 7
    2e1c:	84 87       	std	Z+12, r24	; 0x0c
}
    2e1e:	ff 91       	pop	r31
    2e20:	ef 91       	pop	r30
    2e22:	9f 91       	pop	r25
    2e24:	8f 91       	pop	r24
    2e26:	0f 90       	pop	r0
    2e28:	0b be       	out	0x3b, r0	; 59
    2e2a:	0f 90       	pop	r0
    2e2c:	08 be       	out	0x38, r0	; 56
    2e2e:	0f 90       	pop	r0
    2e30:	0f be       	out	0x3f, r0	; 63
    2e32:	0f 90       	pop	r0
    2e34:	1f 90       	pop	r1
    2e36:	18 95       	reti

00002e38 <service_quadrature>:
//## SERVICE ROUTINE
//#############################################################

void service_quadrature(){	
	
}
    2e38:	08 95       	ret

00002e3a <init_thermal>:
 */ 


void init_thermal(){
	//FANS are located at PF4 (Fan0) and PF5 (Fan1)
	PORTF.DIRSET = 0x30; //pins 4 and 5 to output
    2e3a:	e0 ea       	ldi	r30, 0xA0	; 160
    2e3c:	f6 e0       	ldi	r31, 0x06	; 6
    2e3e:	80 e3       	ldi	r24, 0x30	; 48
    2e40:	81 83       	std	Z+1, r24	; 0x01
	PORTF.OUTSET &= B8(11001111); //pins 4 and 5 to low (off)
    2e42:	85 81       	ldd	r24, Z+5	; 0x05
    2e44:	8f 7c       	andi	r24, 0xCF	; 207
    2e46:	85 83       	std	Z+5, r24	; 0x05
		
	TCF1.CTRLA = 0x07; //enable; div1024
    2e48:	e0 e4       	ldi	r30, 0x40	; 64
    2e4a:	fb e0       	ldi	r31, 0x0B	; 11
    2e4c:	87 e0       	ldi	r24, 0x07	; 7
    2e4e:	80 83       	st	Z, r24
	TCF1.CTRLB = 0x13; //Output Channel A enable; Single-slope PWM
    2e50:	83 e1       	ldi	r24, 0x13	; 19
    2e52:	81 83       	std	Z+1, r24	; 0x01
	TCF1.PER = 0x00FF; //Set the top of the counter to basically force 8 bit operation; we do this for speed when calling dimming functions in the future
    2e54:	8f ef       	ldi	r24, 0xFF	; 255
    2e56:	90 e0       	ldi	r25, 0x00	; 0
    2e58:	86 a3       	lds	r24, 0x56
    2e5a:	97 a3       	lds	r25, 0x57
	TCF1.CCA = 0x0010; //Default to off-level brightness
    2e5c:	80 e1       	ldi	r24, 0x10	; 16
    2e5e:	90 e0       	ldi	r25, 0x00	; 0
    2e60:	80 a7       	lds	r24, 0x70
    2e62:	91 a7       	lds	r25, 0x71
}
    2e64:	08 95       	ret

00002e66 <init_uart>:
//= INITIALIZATION ROUTINES
//==================================

//Select which uart to initialize from the list of defined constants in the io.h
//Pass in Baud rate from a list of defined constants
void init_uart(USART_t* which, uint8_t baud_rate){
    2e66:	fc 01       	movw	r30, r24
	//Config the PORT
		if (&(*which) == &USARTC0){
    2e68:	88 e0       	ldi	r24, 0x08	; 8
    2e6a:	e0 3a       	cpi	r30, 0xA0	; 160
    2e6c:	f8 07       	cpc	r31, r24
    2e6e:	51 f4       	brne	.+20     	; 0x2e84 <init_uart+0x1e>
			PORTC.DIRSET = B8(00001000); //TX pin as output
    2e70:	a0 e4       	ldi	r26, 0x40	; 64
    2e72:	b6 e0       	ldi	r27, 0x06	; 6
    2e74:	88 e0       	ldi	r24, 0x08	; 8
    2e76:	11 96       	adiw	r26, 0x01	; 1
    2e78:	8c 93       	st	X, r24
    2e7a:	11 97       	sbiw	r26, 0x01	; 1
			PORTC.OUTSET = B8(00001000); //TX initial output value is high
    2e7c:	15 96       	adiw	r26, 0x05	; 5
    2e7e:	8c 93       	st	X, r24
    2e80:	15 97       	sbiw	r26, 0x05	; 5
    2e82:	61 c0       	rjmp	.+194    	; 0x2f46 <init_uart+0xe0>
		}
		else if (&(*which) == &USARTC1) {
    2e84:	88 e0       	ldi	r24, 0x08	; 8
    2e86:	e0 3b       	cpi	r30, 0xB0	; 176
    2e88:	f8 07       	cpc	r31, r24
    2e8a:	51 f4       	brne	.+20     	; 0x2ea0 <init_uart+0x3a>
			PORTC.DIRSET = B8(10000000); //TX pin as output
    2e8c:	a0 e4       	ldi	r26, 0x40	; 64
    2e8e:	b6 e0       	ldi	r27, 0x06	; 6
    2e90:	80 e8       	ldi	r24, 0x80	; 128
    2e92:	11 96       	adiw	r26, 0x01	; 1
    2e94:	8c 93       	st	X, r24
    2e96:	11 97       	sbiw	r26, 0x01	; 1
			PORTC.OUTSET = B8(10000000); //TX initial output value is high
    2e98:	15 96       	adiw	r26, 0x05	; 5
    2e9a:	8c 93       	st	X, r24
    2e9c:	15 97       	sbiw	r26, 0x05	; 5
    2e9e:	53 c0       	rjmp	.+166    	; 0x2f46 <init_uart+0xe0>
		}
		else if (&(*which) == &USARTD0) {
    2ea0:	89 e0       	ldi	r24, 0x09	; 9
    2ea2:	e0 3a       	cpi	r30, 0xA0	; 160
    2ea4:	f8 07       	cpc	r31, r24
    2ea6:	51 f4       	brne	.+20     	; 0x2ebc <init_uart+0x56>
			PORTD.DIRSET = B8(00001000); //TX pin as output
    2ea8:	a0 e6       	ldi	r26, 0x60	; 96
    2eaa:	b6 e0       	ldi	r27, 0x06	; 6
    2eac:	88 e0       	ldi	r24, 0x08	; 8
    2eae:	11 96       	adiw	r26, 0x01	; 1
    2eb0:	8c 93       	st	X, r24
    2eb2:	11 97       	sbiw	r26, 0x01	; 1
			PORTD.OUTSET = B8(00001000); //TX initial output value is high
    2eb4:	15 96       	adiw	r26, 0x05	; 5
    2eb6:	8c 93       	st	X, r24
    2eb8:	15 97       	sbiw	r26, 0x05	; 5
    2eba:	45 c0       	rjmp	.+138    	; 0x2f46 <init_uart+0xe0>
		}	
		else if (&(*which) == &USARTD1) {
    2ebc:	89 e0       	ldi	r24, 0x09	; 9
    2ebe:	e0 3b       	cpi	r30, 0xB0	; 176
    2ec0:	f8 07       	cpc	r31, r24
    2ec2:	51 f4       	brne	.+20     	; 0x2ed8 <init_uart+0x72>
			PORTD.DIRSET = B8(10000000); //TX pin as output
    2ec4:	a0 e6       	ldi	r26, 0x60	; 96
    2ec6:	b6 e0       	ldi	r27, 0x06	; 6
    2ec8:	80 e8       	ldi	r24, 0x80	; 128
    2eca:	11 96       	adiw	r26, 0x01	; 1
    2ecc:	8c 93       	st	X, r24
    2ece:	11 97       	sbiw	r26, 0x01	; 1
			PORTD.OUTSET = B8(10000000); //TX initial output value is high
    2ed0:	15 96       	adiw	r26, 0x05	; 5
    2ed2:	8c 93       	st	X, r24
    2ed4:	15 97       	sbiw	r26, 0x05	; 5
    2ed6:	37 c0       	rjmp	.+110    	; 0x2f46 <init_uart+0xe0>
		}
		else if (&(*which) == &USARTE0) {
    2ed8:	8a e0       	ldi	r24, 0x0A	; 10
    2eda:	e0 3a       	cpi	r30, 0xA0	; 160
    2edc:	f8 07       	cpc	r31, r24
    2ede:	51 f4       	brne	.+20     	; 0x2ef4 <init_uart+0x8e>
			PORTE.DIRSET = B8(00001000); //TX pin as output
    2ee0:	a0 e8       	ldi	r26, 0x80	; 128
    2ee2:	b6 e0       	ldi	r27, 0x06	; 6
    2ee4:	88 e0       	ldi	r24, 0x08	; 8
    2ee6:	11 96       	adiw	r26, 0x01	; 1
    2ee8:	8c 93       	st	X, r24
    2eea:	11 97       	sbiw	r26, 0x01	; 1
			PORTE.OUTSET = B8(00001000); //TX initial output value is high
    2eec:	15 96       	adiw	r26, 0x05	; 5
    2eee:	8c 93       	st	X, r24
    2ef0:	15 97       	sbiw	r26, 0x05	; 5
    2ef2:	29 c0       	rjmp	.+82     	; 0x2f46 <init_uart+0xe0>
		}
		else if (&(*which) == &USARTE1) {
    2ef4:	8a e0       	ldi	r24, 0x0A	; 10
    2ef6:	e0 3b       	cpi	r30, 0xB0	; 176
    2ef8:	f8 07       	cpc	r31, r24
    2efa:	51 f4       	brne	.+20     	; 0x2f10 <init_uart+0xaa>
			PORTE.DIRSET = B8(10000000); //TX pin as output
    2efc:	a0 e8       	ldi	r26, 0x80	; 128
    2efe:	b6 e0       	ldi	r27, 0x06	; 6
    2f00:	80 e8       	ldi	r24, 0x80	; 128
    2f02:	11 96       	adiw	r26, 0x01	; 1
    2f04:	8c 93       	st	X, r24
    2f06:	11 97       	sbiw	r26, 0x01	; 1
			PORTE.OUTSET = B8(10000000); //TX initial output value is high
    2f08:	15 96       	adiw	r26, 0x05	; 5
    2f0a:	8c 93       	st	X, r24
    2f0c:	15 97       	sbiw	r26, 0x05	; 5
    2f0e:	1b c0       	rjmp	.+54     	; 0x2f46 <init_uart+0xe0>
		}
		else if (&(*which) == &USARTF0) {
    2f10:	8b e0       	ldi	r24, 0x0B	; 11
    2f12:	e0 3a       	cpi	r30, 0xA0	; 160
    2f14:	f8 07       	cpc	r31, r24
    2f16:	51 f4       	brne	.+20     	; 0x2f2c <init_uart+0xc6>
			PORTF.DIRSET = B8(00001000); //TX pin as output
    2f18:	a0 ea       	ldi	r26, 0xA0	; 160
    2f1a:	b6 e0       	ldi	r27, 0x06	; 6
    2f1c:	88 e0       	ldi	r24, 0x08	; 8
    2f1e:	11 96       	adiw	r26, 0x01	; 1
    2f20:	8c 93       	st	X, r24
    2f22:	11 97       	sbiw	r26, 0x01	; 1
			PORTF.OUTSET = B8(00001000); //TX initial output value is high
    2f24:	15 96       	adiw	r26, 0x05	; 5
    2f26:	8c 93       	st	X, r24
    2f28:	15 97       	sbiw	r26, 0x05	; 5
    2f2a:	0d c0       	rjmp	.+26     	; 0x2f46 <init_uart+0xe0>
		}
		else if (&(*which) == &USARTF1) {
    2f2c:	8b e0       	ldi	r24, 0x0B	; 11
    2f2e:	e0 3b       	cpi	r30, 0xB0	; 176
    2f30:	f8 07       	cpc	r31, r24
    2f32:	49 f4       	brne	.+18     	; 0x2f46 <init_uart+0xe0>
			PORTF.DIRSET = B8(10000000); //TX pin as output
    2f34:	a0 ea       	ldi	r26, 0xA0	; 160
    2f36:	b6 e0       	ldi	r27, 0x06	; 6
    2f38:	80 e8       	ldi	r24, 0x80	; 128
    2f3a:	11 96       	adiw	r26, 0x01	; 1
    2f3c:	8c 93       	st	X, r24
    2f3e:	11 97       	sbiw	r26, 0x01	; 1
			PORTF.OUTSET = B8(10000000); //TX initial output value is high
    2f40:	15 96       	adiw	r26, 0x05	; 5
    2f42:	8c 93       	st	X, r24
    2f44:	15 97       	sbiw	r26, 0x05	; 5
		}
		else {
		}
	//Set baud rate
		switch(baud_rate){
    2f46:	61 30       	cpi	r22, 0x01	; 1
    2f48:	39 f0       	breq	.+14     	; 0x2f58 <init_uart+0xf2>
    2f4a:	62 30       	cpi	r22, 0x02	; 2
    2f4c:	51 f4       	brne	.+20     	; 0x2f62 <init_uart+0xfc>
		case BAUD_38400:
			//BSEL = 0xCC5; BSCALE = -6; error = 0.01%
			which->BAUDCTRLB = 0xAC;
    2f4e:	8c ea       	ldi	r24, 0xAC	; 172
    2f50:	87 83       	std	Z+7, r24	; 0x07
			which->BAUDCTRLA = 0xC5;
    2f52:	85 ec       	ldi	r24, 0xC5	; 197
    2f54:	86 83       	std	Z+6, r24	; 0x06
			break;
    2f56:	09 c0       	rjmp	.+18     	; 0x2f6a <init_uart+0x104>
		case BAUD_57600:
			//BSEL = 0x86E; BSCALE = -6; error = 0.01%
			which->BAUDCTRLB = 0xA8;
    2f58:	88 ea       	ldi	r24, 0xA8	; 168
    2f5a:	87 83       	std	Z+7, r24	; 0x07
			which->BAUDCTRLA = 0x6E;
    2f5c:	8e e6       	ldi	r24, 0x6E	; 110
    2f5e:	86 83       	std	Z+6, r24	; 0x06
			break;
    2f60:	04 c0       	rjmp	.+8      	; 0x2f6a <init_uart+0x104>
		case BAUD_115200:
		default:
			//BSEL = 0x417; BSCALE = -6; error = 0.01%
			//BSEL = 0x453; BSCALE = -6; fbaud = 115.212k @ 32MHz
			which->BAUDCTRLB = 0xA4; //write to BAUDCTRLB first, updated on write to A
    2f62:	84 ea       	ldi	r24, 0xA4	; 164
    2f64:	87 83       	std	Z+7, r24	; 0x07
			which->BAUDCTRLA = 0x32; //0x17; = 8.44uS = 118kHz		
    2f66:	82 e3       	ldi	r24, 0x32	; 50
    2f68:	86 83       	std	Z+6, r24	; 0x06
		}
	//Config USART Module
		which->CTRLA = 0x00; //Current driver does not enable any interrupts
    2f6a:	13 82       	std	Z+3, r1	; 0x03
		which->CTRLB = B8(00011000); //Enable Rx and TX; Do not use double speed mode
    2f6c:	88 e1       	ldi	r24, 0x18	; 24
    2f6e:	84 83       	std	Z+4, r24	; 0x04
		which->CTRLC = B8(00000011); //uart Mode; Use N-8-1 frame configuration
    2f70:	83 e0       	ldi	r24, 0x03	; 3
    2f72:	85 83       	std	Z+5, r24	; 0x05
	//
}
    2f74:	08 95       	ret

00002f76 <uart_send_byte>:
//= DISPLAY (BLOCKING) FUNCTIONS
//==================================


//Sends one byte; Spin-lock until UART is ready to transmit (BE CAREFUL!)
void uart_send_byte( USART_t* which, unsigned char dataB){
    2f76:	fc 01       	movw	r30, r24
	while((which->STATUS & USART_DREIF_bm) == 0x00); //wait until the transmit buffer is ready to receive new data (DREIF flag is 1 when empty)
    2f78:	81 81       	ldd	r24, Z+1	; 0x01
    2f7a:	85 ff       	sbrs	r24, 5
    2f7c:	fd cf       	rjmp	.-6      	; 0x2f78 <uart_send_byte+0x2>
	which->DATA = dataB;	
    2f7e:	60 83       	st	Z, r22
}
    2f80:	08 95       	ret

00002f82 <uart_send_string>:

//Sends an entire string (blocking)
void uart_send_string(USART_t* which, char* theString){
    2f82:	cf 92       	push	r12
    2f84:	df 92       	push	r13
    2f86:	ef 92       	push	r14
    2f88:	ff 92       	push	r15
    2f8a:	0f 93       	push	r16
    2f8c:	1f 93       	push	r17
    2f8e:	cf 93       	push	r28
    2f90:	df 93       	push	r29
    2f92:	6c 01       	movw	r12, r24
	uint16_t length = (uint16_t)strlen(theString);
    2f94:	e6 2f       	mov	r30, r22
    2f96:	f7 2f       	mov	r31, r23
    2f98:	ef 01       	movw	r28, r30
    2f9a:	09 90       	ld	r0, Y+
    2f9c:	00 20       	and	r0, r0
    2f9e:	e9 f7       	brne	.-6      	; 0x2f9a <uart_send_string+0x18>
    2fa0:	21 97       	sbiw	r28, 0x01	; 1
    2fa2:	ce 1b       	sub	r28, r30
    2fa4:	df 0b       	sbc	r29, r31
	for (uint16_t i=0; i<length; i++){uart_send_byte(which, theString[i]);}	
    2fa6:	79 f0       	breq	.+30     	; 0x2fc6 <uart_send_string+0x44>
    2fa8:	e6 2e       	mov	r14, r22
    2faa:	f7 2e       	mov	r15, r23
    2fac:	00 e0       	ldi	r16, 0x00	; 0
    2fae:	10 e0       	ldi	r17, 0x00	; 0
    2fb0:	f7 01       	movw	r30, r14
    2fb2:	61 91       	ld	r22, Z+
    2fb4:	7f 01       	movw	r14, r30
    2fb6:	c6 01       	movw	r24, r12
    2fb8:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <uart_send_byte>
    2fbc:	0f 5f       	subi	r16, 0xFF	; 255
    2fbe:	1f 4f       	sbci	r17, 0xFF	; 255
    2fc0:	0c 17       	cp	r16, r28
    2fc2:	1d 07       	cpc	r17, r29
    2fc4:	a9 f7       	brne	.-22     	; 0x2fb0 <uart_send_string+0x2e>
}
    2fc6:	df 91       	pop	r29
    2fc8:	cf 91       	pop	r28
    2fca:	1f 91       	pop	r17
    2fcc:	0f 91       	pop	r16
    2fce:	ff 90       	pop	r15
    2fd0:	ef 90       	pop	r14
    2fd2:	df 90       	pop	r13
    2fd4:	cf 90       	pop	r12
    2fd6:	08 95       	ret

00002fd8 <uart_send_BIN4>:
	
//Most Significant Bit first
void uart_send_BIN4(USART_t* which, uint8_t lowb){
    2fd8:	cf 93       	push	r28
    2fda:	df 93       	push	r29
    2fdc:	ec 01       	movw	r28, r24
	switch(lowb){
    2fde:	67 30       	cpi	r22, 0x07	; 7
    2fe0:	09 f4       	brne	.+2      	; 0x2fe4 <uart_send_BIN4+0xc>
    2fe2:	9d c0       	rjmp	.+314    	; 0x311e <uart_send_BIN4+0x146>
    2fe4:	68 30       	cpi	r22, 0x08	; 8
    2fe6:	90 f4       	brcc	.+36     	; 0x300c <uart_send_BIN4+0x34>
    2fe8:	63 30       	cpi	r22, 0x03	; 3
    2fea:	09 f4       	brne	.+2      	; 0x2fee <uart_send_BIN4+0x16>
    2fec:	58 c0       	rjmp	.+176    	; 0x309e <uart_send_BIN4+0xc6>
    2fee:	64 30       	cpi	r22, 0x04	; 4
    2ff0:	30 f4       	brcc	.+12     	; 0x2ffe <uart_send_BIN4+0x26>
    2ff2:	61 30       	cpi	r22, 0x01	; 1
    2ff4:	a1 f1       	breq	.+104    	; 0x305e <uart_send_BIN4+0x86>
    2ff6:	62 30       	cpi	r22, 0x02	; 2
    2ff8:	08 f0       	brcs	.+2      	; 0x2ffc <uart_send_BIN4+0x24>
    2ffa:	41 c0       	rjmp	.+130    	; 0x307e <uart_send_BIN4+0xa6>
    2ffc:	20 c0       	rjmp	.+64     	; 0x303e <uart_send_BIN4+0x66>
    2ffe:	65 30       	cpi	r22, 0x05	; 5
    3000:	09 f4       	brne	.+2      	; 0x3004 <uart_send_BIN4+0x2c>
    3002:	6d c0       	rjmp	.+218    	; 0x30de <uart_send_BIN4+0x106>
    3004:	66 30       	cpi	r22, 0x06	; 6
    3006:	08 f0       	brcs	.+2      	; 0x300a <uart_send_BIN4+0x32>
    3008:	7a c0       	rjmp	.+244    	; 0x30fe <uart_send_BIN4+0x126>
    300a:	59 c0       	rjmp	.+178    	; 0x30be <uart_send_BIN4+0xe6>
    300c:	6b 30       	cpi	r22, 0x0B	; 11
    300e:	09 f4       	brne	.+2      	; 0x3012 <uart_send_BIN4+0x3a>
    3010:	c6 c0       	rjmp	.+396    	; 0x319e <uart_send_BIN4+0x1c6>
    3012:	6c 30       	cpi	r22, 0x0C	; 12
    3014:	38 f4       	brcc	.+14     	; 0x3024 <uart_send_BIN4+0x4c>
    3016:	69 30       	cpi	r22, 0x09	; 9
    3018:	09 f4       	brne	.+2      	; 0x301c <uart_send_BIN4+0x44>
    301a:	a1 c0       	rjmp	.+322    	; 0x315e <uart_send_BIN4+0x186>
    301c:	6a 30       	cpi	r22, 0x0A	; 10
    301e:	08 f0       	brcs	.+2      	; 0x3022 <uart_send_BIN4+0x4a>
    3020:	ae c0       	rjmp	.+348    	; 0x317e <uart_send_BIN4+0x1a6>
    3022:	8d c0       	rjmp	.+282    	; 0x313e <uart_send_BIN4+0x166>
    3024:	6d 30       	cpi	r22, 0x0D	; 13
    3026:	09 f4       	brne	.+2      	; 0x302a <uart_send_BIN4+0x52>
    3028:	da c0       	rjmp	.+436    	; 0x31de <uart_send_BIN4+0x206>
    302a:	6d 30       	cpi	r22, 0x0D	; 13
    302c:	08 f4       	brcc	.+2      	; 0x3030 <uart_send_BIN4+0x58>
    302e:	c7 c0       	rjmp	.+398    	; 0x31be <uart_send_BIN4+0x1e6>
    3030:	6e 30       	cpi	r22, 0x0E	; 14
    3032:	09 f4       	brne	.+2      	; 0x3036 <uart_send_BIN4+0x5e>
    3034:	e4 c0       	rjmp	.+456    	; 0x31fe <uart_send_BIN4+0x226>
    3036:	6f 30       	cpi	r22, 0x0F	; 15
    3038:	09 f0       	breq	.+2      	; 0x303c <uart_send_BIN4+0x64>
    303a:	00 c1       	rjmp	.+512    	; 0x323c <uart_send_BIN4+0x264>
    303c:	f0 c0       	rjmp	.+480    	; 0x321e <uart_send_BIN4+0x246>
	case(0):
		uart_send_byte(which,'0');
    303e:	60 e3       	ldi	r22, 0x30	; 48
    3040:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <uart_send_byte>
		uart_send_byte(which,'0');
    3044:	ce 01       	movw	r24, r28
    3046:	60 e3       	ldi	r22, 0x30	; 48
    3048:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <uart_send_byte>
		uart_send_byte(which,'0');
    304c:	ce 01       	movw	r24, r28
    304e:	60 e3       	ldi	r22, 0x30	; 48
    3050:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <uart_send_byte>
		uart_send_byte(which,'0');
    3054:	ce 01       	movw	r24, r28
    3056:	60 e3       	ldi	r22, 0x30	; 48
    3058:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <uart_send_byte>
		break;
    305c:	ef c0       	rjmp	.+478    	; 0x323c <uart_send_BIN4+0x264>
	case(1):
		uart_send_byte(which,'0');
    305e:	60 e3       	ldi	r22, 0x30	; 48
    3060:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <uart_send_byte>
		uart_send_byte(which,'0');
    3064:	ce 01       	movw	r24, r28
    3066:	60 e3       	ldi	r22, 0x30	; 48
    3068:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <uart_send_byte>
		uart_send_byte(which,'0');
    306c:	ce 01       	movw	r24, r28
    306e:	60 e3       	ldi	r22, 0x30	; 48
    3070:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <uart_send_byte>
		uart_send_byte(which,'1');
    3074:	ce 01       	movw	r24, r28
    3076:	61 e3       	ldi	r22, 0x31	; 49
    3078:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <uart_send_byte>
		break;
    307c:	df c0       	rjmp	.+446    	; 0x323c <uart_send_BIN4+0x264>
	case(2):
		uart_send_byte(which,'0');
    307e:	60 e3       	ldi	r22, 0x30	; 48
    3080:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <uart_send_byte>
		uart_send_byte(which,'0');
    3084:	ce 01       	movw	r24, r28
    3086:	60 e3       	ldi	r22, 0x30	; 48
    3088:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <uart_send_byte>
		uart_send_byte(which,'1');
    308c:	ce 01       	movw	r24, r28
    308e:	61 e3       	ldi	r22, 0x31	; 49
    3090:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <uart_send_byte>
		uart_send_byte(which,'0');
    3094:	ce 01       	movw	r24, r28
    3096:	60 e3       	ldi	r22, 0x30	; 48
    3098:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <uart_send_byte>
		break;
    309c:	cf c0       	rjmp	.+414    	; 0x323c <uart_send_BIN4+0x264>
	case(3):
		uart_send_byte(which,'0');
    309e:	60 e3       	ldi	r22, 0x30	; 48
    30a0:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <uart_send_byte>
		uart_send_byte(which,'0');
    30a4:	ce 01       	movw	r24, r28
    30a6:	60 e3       	ldi	r22, 0x30	; 48
    30a8:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <uart_send_byte>
		uart_send_byte(which,'1');
    30ac:	ce 01       	movw	r24, r28
    30ae:	61 e3       	ldi	r22, 0x31	; 49
    30b0:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <uart_send_byte>
		uart_send_byte(which,'1');
    30b4:	ce 01       	movw	r24, r28
    30b6:	61 e3       	ldi	r22, 0x31	; 49
    30b8:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <uart_send_byte>
		break;
    30bc:	bf c0       	rjmp	.+382    	; 0x323c <uart_send_BIN4+0x264>
	case(4):
		uart_send_byte(which,'0');
    30be:	60 e3       	ldi	r22, 0x30	; 48
    30c0:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <uart_send_byte>
		uart_send_byte(which,'1');
    30c4:	ce 01       	movw	r24, r28
    30c6:	61 e3       	ldi	r22, 0x31	; 49
    30c8:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <uart_send_byte>
		uart_send_byte(which,'0');
    30cc:	ce 01       	movw	r24, r28
    30ce:	60 e3       	ldi	r22, 0x30	; 48
    30d0:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <uart_send_byte>
		uart_send_byte(which,'0');
    30d4:	ce 01       	movw	r24, r28
    30d6:	60 e3       	ldi	r22, 0x30	; 48
    30d8:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <uart_send_byte>
		break;
    30dc:	af c0       	rjmp	.+350    	; 0x323c <uart_send_BIN4+0x264>
	case(5):
		uart_send_byte(which,'0');
    30de:	60 e3       	ldi	r22, 0x30	; 48
    30e0:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <uart_send_byte>
		uart_send_byte(which,'1');
    30e4:	ce 01       	movw	r24, r28
    30e6:	61 e3       	ldi	r22, 0x31	; 49
    30e8:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <uart_send_byte>
		uart_send_byte(which,'0');
    30ec:	ce 01       	movw	r24, r28
    30ee:	60 e3       	ldi	r22, 0x30	; 48
    30f0:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <uart_send_byte>
		uart_send_byte(which,'1');
    30f4:	ce 01       	movw	r24, r28
    30f6:	61 e3       	ldi	r22, 0x31	; 49
    30f8:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <uart_send_byte>
		break;
    30fc:	9f c0       	rjmp	.+318    	; 0x323c <uart_send_BIN4+0x264>
	case(6):
		uart_send_byte(which,'0');
    30fe:	60 e3       	ldi	r22, 0x30	; 48
    3100:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <uart_send_byte>
		uart_send_byte(which,'1');
    3104:	ce 01       	movw	r24, r28
    3106:	61 e3       	ldi	r22, 0x31	; 49
    3108:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <uart_send_byte>
		uart_send_byte(which,'1');
    310c:	ce 01       	movw	r24, r28
    310e:	61 e3       	ldi	r22, 0x31	; 49
    3110:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <uart_send_byte>
		uart_send_byte(which,'0');
    3114:	ce 01       	movw	r24, r28
    3116:	60 e3       	ldi	r22, 0x30	; 48
    3118:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <uart_send_byte>
		break;
    311c:	8f c0       	rjmp	.+286    	; 0x323c <uart_send_BIN4+0x264>
	case(7):
		uart_send_byte(which,'0');
    311e:	60 e3       	ldi	r22, 0x30	; 48
    3120:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <uart_send_byte>
		uart_send_byte(which,'1');
    3124:	ce 01       	movw	r24, r28
    3126:	61 e3       	ldi	r22, 0x31	; 49
    3128:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <uart_send_byte>
		uart_send_byte(which,'1');
    312c:	ce 01       	movw	r24, r28
    312e:	61 e3       	ldi	r22, 0x31	; 49
    3130:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <uart_send_byte>
		uart_send_byte(which,'1');
    3134:	ce 01       	movw	r24, r28
    3136:	61 e3       	ldi	r22, 0x31	; 49
    3138:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <uart_send_byte>
		break;
    313c:	7f c0       	rjmp	.+254    	; 0x323c <uart_send_BIN4+0x264>
	case(8):
		uart_send_byte(which,'1');
    313e:	61 e3       	ldi	r22, 0x31	; 49
    3140:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <uart_send_byte>
		uart_send_byte(which,'0');
    3144:	ce 01       	movw	r24, r28
    3146:	60 e3       	ldi	r22, 0x30	; 48
    3148:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <uart_send_byte>
		uart_send_byte(which,'0');
    314c:	ce 01       	movw	r24, r28
    314e:	60 e3       	ldi	r22, 0x30	; 48
    3150:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <uart_send_byte>
		uart_send_byte(which,'0');
    3154:	ce 01       	movw	r24, r28
    3156:	60 e3       	ldi	r22, 0x30	; 48
    3158:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <uart_send_byte>
		break;
    315c:	6f c0       	rjmp	.+222    	; 0x323c <uart_send_BIN4+0x264>
	case(9):
		uart_send_byte(which,'1');
    315e:	61 e3       	ldi	r22, 0x31	; 49
    3160:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <uart_send_byte>
		uart_send_byte(which,'0');
    3164:	ce 01       	movw	r24, r28
    3166:	60 e3       	ldi	r22, 0x30	; 48
    3168:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <uart_send_byte>
		uart_send_byte(which,'0');
    316c:	ce 01       	movw	r24, r28
    316e:	60 e3       	ldi	r22, 0x30	; 48
    3170:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <uart_send_byte>
		uart_send_byte(which,'1');
    3174:	ce 01       	movw	r24, r28
    3176:	61 e3       	ldi	r22, 0x31	; 49
    3178:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <uart_send_byte>
		break;
    317c:	5f c0       	rjmp	.+190    	; 0x323c <uart_send_BIN4+0x264>
	case(10):
		uart_send_byte(which,'1');
    317e:	61 e3       	ldi	r22, 0x31	; 49
    3180:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <uart_send_byte>
		uart_send_byte(which,'0');
    3184:	ce 01       	movw	r24, r28
    3186:	60 e3       	ldi	r22, 0x30	; 48
    3188:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <uart_send_byte>
		uart_send_byte(which,'1');
    318c:	ce 01       	movw	r24, r28
    318e:	61 e3       	ldi	r22, 0x31	; 49
    3190:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <uart_send_byte>
		uart_send_byte(which,'0');
    3194:	ce 01       	movw	r24, r28
    3196:	60 e3       	ldi	r22, 0x30	; 48
    3198:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <uart_send_byte>
		break;
    319c:	4f c0       	rjmp	.+158    	; 0x323c <uart_send_BIN4+0x264>
	case(11):
		uart_send_byte(which,'1');
    319e:	61 e3       	ldi	r22, 0x31	; 49
    31a0:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <uart_send_byte>
		uart_send_byte(which,'0');
    31a4:	ce 01       	movw	r24, r28
    31a6:	60 e3       	ldi	r22, 0x30	; 48
    31a8:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <uart_send_byte>
		uart_send_byte(which,'1');
    31ac:	ce 01       	movw	r24, r28
    31ae:	61 e3       	ldi	r22, 0x31	; 49
    31b0:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <uart_send_byte>
		uart_send_byte(which,'1');
    31b4:	ce 01       	movw	r24, r28
    31b6:	61 e3       	ldi	r22, 0x31	; 49
    31b8:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <uart_send_byte>
		break;
    31bc:	3f c0       	rjmp	.+126    	; 0x323c <uart_send_BIN4+0x264>
	case(12):
		uart_send_byte(which,'1');
    31be:	61 e3       	ldi	r22, 0x31	; 49
    31c0:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <uart_send_byte>
		uart_send_byte(which,'1');
    31c4:	ce 01       	movw	r24, r28
    31c6:	61 e3       	ldi	r22, 0x31	; 49
    31c8:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <uart_send_byte>
		uart_send_byte(which,'0');
    31cc:	ce 01       	movw	r24, r28
    31ce:	60 e3       	ldi	r22, 0x30	; 48
    31d0:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <uart_send_byte>
		uart_send_byte(which,'0');
    31d4:	ce 01       	movw	r24, r28
    31d6:	60 e3       	ldi	r22, 0x30	; 48
    31d8:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <uart_send_byte>
		break;
    31dc:	2f c0       	rjmp	.+94     	; 0x323c <uart_send_BIN4+0x264>
	case(13):
		uart_send_byte(which,'1');
    31de:	61 e3       	ldi	r22, 0x31	; 49
    31e0:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <uart_send_byte>
		uart_send_byte(which,'1');
    31e4:	ce 01       	movw	r24, r28
    31e6:	61 e3       	ldi	r22, 0x31	; 49
    31e8:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <uart_send_byte>
		uart_send_byte(which,'0');
    31ec:	ce 01       	movw	r24, r28
    31ee:	60 e3       	ldi	r22, 0x30	; 48
    31f0:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <uart_send_byte>
		uart_send_byte(which,'1');
    31f4:	ce 01       	movw	r24, r28
    31f6:	61 e3       	ldi	r22, 0x31	; 49
    31f8:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <uart_send_byte>
		break;
    31fc:	1f c0       	rjmp	.+62     	; 0x323c <uart_send_BIN4+0x264>
	case(14):
		uart_send_byte(which,'1');
    31fe:	61 e3       	ldi	r22, 0x31	; 49
    3200:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <uart_send_byte>
		uart_send_byte(which,'1');
    3204:	ce 01       	movw	r24, r28
    3206:	61 e3       	ldi	r22, 0x31	; 49
    3208:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <uart_send_byte>
		uart_send_byte(which,'1');
    320c:	ce 01       	movw	r24, r28
    320e:	61 e3       	ldi	r22, 0x31	; 49
    3210:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <uart_send_byte>
		uart_send_byte(which,'0');
    3214:	ce 01       	movw	r24, r28
    3216:	60 e3       	ldi	r22, 0x30	; 48
    3218:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <uart_send_byte>
		break;
    321c:	0f c0       	rjmp	.+30     	; 0x323c <uart_send_BIN4+0x264>
	case(15):
		uart_send_byte(which,'1');
    321e:	61 e3       	ldi	r22, 0x31	; 49
    3220:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <uart_send_byte>
		uart_send_byte(which,'1');
    3224:	ce 01       	movw	r24, r28
    3226:	61 e3       	ldi	r22, 0x31	; 49
    3228:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <uart_send_byte>
		uart_send_byte(which,'1');
    322c:	ce 01       	movw	r24, r28
    322e:	61 e3       	ldi	r22, 0x31	; 49
    3230:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <uart_send_byte>
		uart_send_byte(which,'1');
    3234:	ce 01       	movw	r24, r28
    3236:	61 e3       	ldi	r22, 0x31	; 49
    3238:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <uart_send_byte>
		break;
	}	
}
    323c:	df 91       	pop	r29
    323e:	cf 91       	pop	r28
    3240:	08 95       	ret

00003242 <uart_send_BIN8>:

//Sends out tosend as ASCII text in 'b01101010' format
void uart_send_BIN8(USART_t* which, uint8_t lowb){
    3242:	1f 93       	push	r17
    3244:	cf 93       	push	r28
    3246:	df 93       	push	r29
    3248:	ec 01       	movw	r28, r24
    324a:	16 2f       	mov	r17, r22
	uart_send_byte(which,'b');
    324c:	62 e6       	ldi	r22, 0x62	; 98
    324e:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <uart_send_byte>
	uart_send_BIN4(which, lowb>>4);
    3252:	61 2f       	mov	r22, r17
    3254:	62 95       	swap	r22
    3256:	6f 70       	andi	r22, 0x0F	; 15
    3258:	ce 01       	movw	r24, r28
    325a:	0e 94 ec 17 	call	0x2fd8	; 0x2fd8 <uart_send_BIN4>
	uart_send_BIN4(which, lowb & 0x0F);
    325e:	61 2f       	mov	r22, r17
    3260:	6f 70       	andi	r22, 0x0F	; 15
    3262:	ce 01       	movw	r24, r28
    3264:	0e 94 ec 17 	call	0x2fd8	; 0x2fd8 <uart_send_BIN4>
}
    3268:	df 91       	pop	r29
    326a:	cf 91       	pop	r28
    326c:	1f 91       	pop	r17
    326e:	08 95       	ret

00003270 <uart_send_HEX4>:
	
void uart_send_HEX4(USART_t* which, uint8_t lowb){
	switch(lowb){
    3270:	67 30       	cpi	r22, 0x07	; 7
    3272:	09 f4       	brne	.+2      	; 0x3276 <uart_send_HEX4+0x6>
    3274:	3f c0       	rjmp	.+126    	; 0x32f4 <uart_send_HEX4+0x84>
    3276:	68 30       	cpi	r22, 0x08	; 8
    3278:	70 f4       	brcc	.+28     	; 0x3296 <uart_send_HEX4+0x26>
    327a:	63 30       	cpi	r22, 0x03	; 3
    327c:	59 f1       	breq	.+86     	; 0x32d4 <uart_send_HEX4+0x64>
    327e:	64 30       	cpi	r22, 0x04	; 4
    3280:	28 f4       	brcc	.+10     	; 0x328c <uart_send_HEX4+0x1c>
    3282:	61 30       	cpi	r22, 0x01	; 1
    3284:	f9 f0       	breq	.+62     	; 0x32c4 <uart_send_HEX4+0x54>
    3286:	62 30       	cpi	r22, 0x02	; 2
    3288:	08 f5       	brcc	.+66     	; 0x32cc <uart_send_HEX4+0x5c>
    328a:	18 c0       	rjmp	.+48     	; 0x32bc <uart_send_HEX4+0x4c>
    328c:	65 30       	cpi	r22, 0x05	; 5
    328e:	51 f1       	breq	.+84     	; 0x32e4 <uart_send_HEX4+0x74>
    3290:	66 30       	cpi	r22, 0x06	; 6
    3292:	60 f5       	brcc	.+88     	; 0x32ec <uart_send_HEX4+0x7c>
    3294:	23 c0       	rjmp	.+70     	; 0x32dc <uart_send_HEX4+0x6c>
    3296:	6b 30       	cpi	r22, 0x0B	; 11
    3298:	e9 f1       	breq	.+122    	; 0x3314 <uart_send_HEX4+0xa4>
    329a:	6c 30       	cpi	r22, 0x0C	; 12
    329c:	28 f4       	brcc	.+10     	; 0x32a8 <uart_send_HEX4+0x38>
    329e:	69 30       	cpi	r22, 0x09	; 9
    32a0:	89 f1       	breq	.+98     	; 0x3304 <uart_send_HEX4+0x94>
    32a2:	6a 30       	cpi	r22, 0x0A	; 10
    32a4:	98 f5       	brcc	.+102    	; 0x330c <uart_send_HEX4+0x9c>
    32a6:	2a c0       	rjmp	.+84     	; 0x32fc <uart_send_HEX4+0x8c>
    32a8:	6d 30       	cpi	r22, 0x0D	; 13
    32aa:	e1 f1       	breq	.+120    	; 0x3324 <uart_send_HEX4+0xb4>
    32ac:	6d 30       	cpi	r22, 0x0D	; 13
    32ae:	b0 f1       	brcs	.+108    	; 0x331c <uart_send_HEX4+0xac>
    32b0:	6e 30       	cpi	r22, 0x0E	; 14
    32b2:	e1 f1       	breq	.+120    	; 0x332c <uart_send_HEX4+0xbc>
    32b4:	6f 30       	cpi	r22, 0x0F	; 15
    32b6:	09 f0       	breq	.+2      	; 0x32ba <uart_send_HEX4+0x4a>
    32b8:	40 c0       	rjmp	.+128    	; 0x333a <uart_send_HEX4+0xca>
    32ba:	3c c0       	rjmp	.+120    	; 0x3334 <uart_send_HEX4+0xc4>
	case(0):
		uart_send_byte( which, '0');
    32bc:	60 e3       	ldi	r22, 0x30	; 48
    32be:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <uart_send_byte>
		break;
    32c2:	08 95       	ret
	case(1):
		uart_send_byte( which, '1');
    32c4:	61 e3       	ldi	r22, 0x31	; 49
    32c6:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <uart_send_byte>
		break;
    32ca:	08 95       	ret
	case(2):
		uart_send_byte( which, '2');
    32cc:	62 e3       	ldi	r22, 0x32	; 50
    32ce:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <uart_send_byte>
		break;
    32d2:	08 95       	ret
	case(3):
		uart_send_byte( which, '3');
    32d4:	63 e3       	ldi	r22, 0x33	; 51
    32d6:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <uart_send_byte>
		break;
    32da:	08 95       	ret
	case(4):
		uart_send_byte( which, '4');
    32dc:	64 e3       	ldi	r22, 0x34	; 52
    32de:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <uart_send_byte>
		break;
    32e2:	08 95       	ret
	case(5):
		uart_send_byte( which, '5');
    32e4:	65 e3       	ldi	r22, 0x35	; 53
    32e6:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <uart_send_byte>
		break;
    32ea:	08 95       	ret
	case(6):
		uart_send_byte( which, '6');
    32ec:	66 e3       	ldi	r22, 0x36	; 54
    32ee:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <uart_send_byte>
		break;
    32f2:	08 95       	ret
	case(7):
		uart_send_byte( which, '7');
    32f4:	67 e3       	ldi	r22, 0x37	; 55
    32f6:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <uart_send_byte>
		break;
    32fa:	08 95       	ret
	case(8):
		uart_send_byte( which, '8');
    32fc:	68 e3       	ldi	r22, 0x38	; 56
    32fe:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <uart_send_byte>
		break;
    3302:	08 95       	ret
	case(9):
		uart_send_byte( which, '9');
    3304:	69 e3       	ldi	r22, 0x39	; 57
    3306:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <uart_send_byte>
		break;
    330a:	08 95       	ret
	case(10):
		uart_send_byte( which, 'A');
    330c:	61 e4       	ldi	r22, 0x41	; 65
    330e:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <uart_send_byte>
		break;
    3312:	08 95       	ret
	case(11):
		uart_send_byte( which, 'B');
    3314:	62 e4       	ldi	r22, 0x42	; 66
    3316:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <uart_send_byte>
		break;
    331a:	08 95       	ret
	case(12):
		uart_send_byte( which, 'C');
    331c:	63 e4       	ldi	r22, 0x43	; 67
    331e:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <uart_send_byte>
		break;
    3322:	08 95       	ret
	case(13):
		uart_send_byte( which, 'D');
    3324:	64 e4       	ldi	r22, 0x44	; 68
    3326:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <uart_send_byte>
		break;
    332a:	08 95       	ret
	case(14):
		uart_send_byte( which, 'E');
    332c:	65 e4       	ldi	r22, 0x45	; 69
    332e:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <uart_send_byte>
		break;
    3332:	08 95       	ret
	case(15):
		uart_send_byte( which, 'F');
    3334:	66 e4       	ldi	r22, 0x46	; 70
    3336:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <uart_send_byte>
    333a:	08 95       	ret

0000333c <uart_send_HEX8>:
		break;
	}	
}

void uart_send_HEX8(USART_t* which, uint8_t lowb){
    333c:	1f 93       	push	r17
    333e:	cf 93       	push	r28
    3340:	df 93       	push	r29
    3342:	ec 01       	movw	r28, r24
    3344:	16 2f       	mov	r17, r22
	uart_send_HEX4(which, lowb>>4);
    3346:	62 95       	swap	r22
    3348:	6f 70       	andi	r22, 0x0F	; 15
    334a:	0e 94 38 19 	call	0x3270	; 0x3270 <uart_send_HEX4>
	uart_send_HEX4(which, lowb & 0x0F);
    334e:	61 2f       	mov	r22, r17
    3350:	6f 70       	andi	r22, 0x0F	; 15
    3352:	ce 01       	movw	r24, r28
    3354:	0e 94 38 19 	call	0x3270	; 0x3270 <uart_send_HEX4>
}
    3358:	df 91       	pop	r29
    335a:	cf 91       	pop	r28
    335c:	1f 91       	pop	r17
    335e:	08 95       	ret

00003360 <uart_send_HEX16b>:

void uart_send_HEX16b(USART_t* which, uint8_t highb, uint8_t lowb){
    3360:	1f 93       	push	r17
    3362:	cf 93       	push	r28
    3364:	df 93       	push	r29
    3366:	ec 01       	movw	r28, r24
    3368:	14 2f       	mov	r17, r20
	uart_send_HEX8(which, highb);
    336a:	0e 94 9e 19 	call	0x333c	; 0x333c <uart_send_HEX8>
	uart_send_HEX8(which, lowb);
    336e:	ce 01       	movw	r24, r28
    3370:	61 2f       	mov	r22, r17
    3372:	0e 94 9e 19 	call	0x333c	; 0x333c <uart_send_HEX8>
}
    3376:	df 91       	pop	r29
    3378:	cf 91       	pop	r28
    337a:	1f 91       	pop	r17
    337c:	08 95       	ret

0000337e <uart_send_HEX16>:

void uart_send_HEX16(USART_t* which, uint16_t highb){
    337e:	1f 93       	push	r17
    3380:	cf 93       	push	r28
    3382:	df 93       	push	r29
    3384:	ec 01       	movw	r28, r24
    3386:	16 2f       	mov	r17, r22
    3388:	67 2f       	mov	r22, r23
	uint8_t blah;
	blah = (uint8_t)(highb>>8);
	uart_send_HEX8(which, blah);
    338a:	0e 94 9e 19 	call	0x333c	; 0x333c <uart_send_HEX8>
	blah = (uint8_t)(highb & 0x00FF);
	uart_send_HEX8(which, blah);
    338e:	ce 01       	movw	r24, r28
    3390:	61 2f       	mov	r22, r17
    3392:	0e 94 9e 19 	call	0x333c	; 0x333c <uart_send_HEX8>
}
    3396:	df 91       	pop	r29
    3398:	cf 91       	pop	r28
    339a:	1f 91       	pop	r17
    339c:	08 95       	ret

0000339e <uart_enq_BIN4>:
//== The Queue-based versions (NON-BLOCKING) of the display functions ==
//======================================================================


//Most Significant Bit first
void uart_enq_BIN4(USART_t* which, uint8_t lowb){
    339e:	cf 93       	push	r28
    33a0:	df 93       	push	r29
    33a2:	ec 01       	movw	r28, r24
	switch(lowb){
    33a4:	67 30       	cpi	r22, 0x07	; 7
    33a6:	09 f4       	brne	.+2      	; 0x33aa <uart_enq_BIN4+0xc>
    33a8:	9d c0       	rjmp	.+314    	; 0x34e4 <uart_enq_BIN4+0x146>
    33aa:	68 30       	cpi	r22, 0x08	; 8
    33ac:	90 f4       	brcc	.+36     	; 0x33d2 <uart_enq_BIN4+0x34>
    33ae:	63 30       	cpi	r22, 0x03	; 3
    33b0:	09 f4       	brne	.+2      	; 0x33b4 <uart_enq_BIN4+0x16>
    33b2:	58 c0       	rjmp	.+176    	; 0x3464 <uart_enq_BIN4+0xc6>
    33b4:	64 30       	cpi	r22, 0x04	; 4
    33b6:	30 f4       	brcc	.+12     	; 0x33c4 <uart_enq_BIN4+0x26>
    33b8:	61 30       	cpi	r22, 0x01	; 1
    33ba:	a1 f1       	breq	.+104    	; 0x3424 <uart_enq_BIN4+0x86>
    33bc:	62 30       	cpi	r22, 0x02	; 2
    33be:	08 f0       	brcs	.+2      	; 0x33c2 <uart_enq_BIN4+0x24>
    33c0:	41 c0       	rjmp	.+130    	; 0x3444 <uart_enq_BIN4+0xa6>
    33c2:	20 c0       	rjmp	.+64     	; 0x3404 <uart_enq_BIN4+0x66>
    33c4:	65 30       	cpi	r22, 0x05	; 5
    33c6:	09 f4       	brne	.+2      	; 0x33ca <uart_enq_BIN4+0x2c>
    33c8:	6d c0       	rjmp	.+218    	; 0x34a4 <uart_enq_BIN4+0x106>
    33ca:	66 30       	cpi	r22, 0x06	; 6
    33cc:	08 f0       	brcs	.+2      	; 0x33d0 <uart_enq_BIN4+0x32>
    33ce:	7a c0       	rjmp	.+244    	; 0x34c4 <uart_enq_BIN4+0x126>
    33d0:	59 c0       	rjmp	.+178    	; 0x3484 <uart_enq_BIN4+0xe6>
    33d2:	6b 30       	cpi	r22, 0x0B	; 11
    33d4:	09 f4       	brne	.+2      	; 0x33d8 <uart_enq_BIN4+0x3a>
    33d6:	c6 c0       	rjmp	.+396    	; 0x3564 <uart_enq_BIN4+0x1c6>
    33d8:	6c 30       	cpi	r22, 0x0C	; 12
    33da:	38 f4       	brcc	.+14     	; 0x33ea <uart_enq_BIN4+0x4c>
    33dc:	69 30       	cpi	r22, 0x09	; 9
    33de:	09 f4       	brne	.+2      	; 0x33e2 <uart_enq_BIN4+0x44>
    33e0:	a1 c0       	rjmp	.+322    	; 0x3524 <uart_enq_BIN4+0x186>
    33e2:	6a 30       	cpi	r22, 0x0A	; 10
    33e4:	08 f0       	brcs	.+2      	; 0x33e8 <uart_enq_BIN4+0x4a>
    33e6:	ae c0       	rjmp	.+348    	; 0x3544 <uart_enq_BIN4+0x1a6>
    33e8:	8d c0       	rjmp	.+282    	; 0x3504 <uart_enq_BIN4+0x166>
    33ea:	6d 30       	cpi	r22, 0x0D	; 13
    33ec:	09 f4       	brne	.+2      	; 0x33f0 <uart_enq_BIN4+0x52>
    33ee:	da c0       	rjmp	.+436    	; 0x35a4 <uart_enq_BIN4+0x206>
    33f0:	6d 30       	cpi	r22, 0x0D	; 13
    33f2:	08 f4       	brcc	.+2      	; 0x33f6 <uart_enq_BIN4+0x58>
    33f4:	c7 c0       	rjmp	.+398    	; 0x3584 <uart_enq_BIN4+0x1e6>
    33f6:	6e 30       	cpi	r22, 0x0E	; 14
    33f8:	09 f4       	brne	.+2      	; 0x33fc <uart_enq_BIN4+0x5e>
    33fa:	e4 c0       	rjmp	.+456    	; 0x35c4 <uart_enq_BIN4+0x226>
    33fc:	6f 30       	cpi	r22, 0x0F	; 15
    33fe:	09 f0       	breq	.+2      	; 0x3402 <uart_enq_BIN4+0x64>
    3400:	00 c1       	rjmp	.+512    	; 0x3602 <uart_enq_BIN4+0x264>
    3402:	f0 c0       	rjmp	.+480    	; 0x35e4 <uart_enq_BIN4+0x246>
	case(0):
		uart_enqueue(which, '0');
    3404:	60 e3       	ldi	r22, 0x30	; 48
    3406:	0e 94 bd 29 	call	0x537a	; 0x537a <uart_enqueue>
		uart_enqueue(which, '0');
    340a:	ce 01       	movw	r24, r28
    340c:	60 e3       	ldi	r22, 0x30	; 48
    340e:	0e 94 bd 29 	call	0x537a	; 0x537a <uart_enqueue>
		uart_enqueue(which, '0');
    3412:	ce 01       	movw	r24, r28
    3414:	60 e3       	ldi	r22, 0x30	; 48
    3416:	0e 94 bd 29 	call	0x537a	; 0x537a <uart_enqueue>
		uart_enqueue(which, '0');
    341a:	ce 01       	movw	r24, r28
    341c:	60 e3       	ldi	r22, 0x30	; 48
    341e:	0e 94 bd 29 	call	0x537a	; 0x537a <uart_enqueue>
		break;
    3422:	ef c0       	rjmp	.+478    	; 0x3602 <uart_enq_BIN4+0x264>
	case(1):
		uart_enqueue(which, '0');
    3424:	60 e3       	ldi	r22, 0x30	; 48
    3426:	0e 94 bd 29 	call	0x537a	; 0x537a <uart_enqueue>
		uart_enqueue(which, '0');
    342a:	ce 01       	movw	r24, r28
    342c:	60 e3       	ldi	r22, 0x30	; 48
    342e:	0e 94 bd 29 	call	0x537a	; 0x537a <uart_enqueue>
		uart_enqueue(which, '0');
    3432:	ce 01       	movw	r24, r28
    3434:	60 e3       	ldi	r22, 0x30	; 48
    3436:	0e 94 bd 29 	call	0x537a	; 0x537a <uart_enqueue>
		uart_enqueue(which, '1');
    343a:	ce 01       	movw	r24, r28
    343c:	61 e3       	ldi	r22, 0x31	; 49
    343e:	0e 94 bd 29 	call	0x537a	; 0x537a <uart_enqueue>
		break;
    3442:	df c0       	rjmp	.+446    	; 0x3602 <uart_enq_BIN4+0x264>
	case(2):
		uart_enqueue(which, '0');
    3444:	60 e3       	ldi	r22, 0x30	; 48
    3446:	0e 94 bd 29 	call	0x537a	; 0x537a <uart_enqueue>
		uart_enqueue(which, '0');
    344a:	ce 01       	movw	r24, r28
    344c:	60 e3       	ldi	r22, 0x30	; 48
    344e:	0e 94 bd 29 	call	0x537a	; 0x537a <uart_enqueue>
		uart_enqueue(which, '1');
    3452:	ce 01       	movw	r24, r28
    3454:	61 e3       	ldi	r22, 0x31	; 49
    3456:	0e 94 bd 29 	call	0x537a	; 0x537a <uart_enqueue>
		uart_enqueue(which, '0');
    345a:	ce 01       	movw	r24, r28
    345c:	60 e3       	ldi	r22, 0x30	; 48
    345e:	0e 94 bd 29 	call	0x537a	; 0x537a <uart_enqueue>
		break;
    3462:	cf c0       	rjmp	.+414    	; 0x3602 <uart_enq_BIN4+0x264>
	case(3):
		uart_enqueue(which, '0');
    3464:	60 e3       	ldi	r22, 0x30	; 48
    3466:	0e 94 bd 29 	call	0x537a	; 0x537a <uart_enqueue>
		uart_enqueue(which, '0');
    346a:	ce 01       	movw	r24, r28
    346c:	60 e3       	ldi	r22, 0x30	; 48
    346e:	0e 94 bd 29 	call	0x537a	; 0x537a <uart_enqueue>
		uart_enqueue(which, '1');
    3472:	ce 01       	movw	r24, r28
    3474:	61 e3       	ldi	r22, 0x31	; 49
    3476:	0e 94 bd 29 	call	0x537a	; 0x537a <uart_enqueue>
		uart_enqueue(which, '1');
    347a:	ce 01       	movw	r24, r28
    347c:	61 e3       	ldi	r22, 0x31	; 49
    347e:	0e 94 bd 29 	call	0x537a	; 0x537a <uart_enqueue>
		break;
    3482:	bf c0       	rjmp	.+382    	; 0x3602 <uart_enq_BIN4+0x264>
	case(4):
		uart_enqueue(which, '0');
    3484:	60 e3       	ldi	r22, 0x30	; 48
    3486:	0e 94 bd 29 	call	0x537a	; 0x537a <uart_enqueue>
		uart_enqueue(which, '1');
    348a:	ce 01       	movw	r24, r28
    348c:	61 e3       	ldi	r22, 0x31	; 49
    348e:	0e 94 bd 29 	call	0x537a	; 0x537a <uart_enqueue>
		uart_enqueue(which, '0');
    3492:	ce 01       	movw	r24, r28
    3494:	60 e3       	ldi	r22, 0x30	; 48
    3496:	0e 94 bd 29 	call	0x537a	; 0x537a <uart_enqueue>
		uart_enqueue(which, '0');
    349a:	ce 01       	movw	r24, r28
    349c:	60 e3       	ldi	r22, 0x30	; 48
    349e:	0e 94 bd 29 	call	0x537a	; 0x537a <uart_enqueue>
		break;
    34a2:	af c0       	rjmp	.+350    	; 0x3602 <uart_enq_BIN4+0x264>
	case(5):
		uart_enqueue(which, '0');
    34a4:	60 e3       	ldi	r22, 0x30	; 48
    34a6:	0e 94 bd 29 	call	0x537a	; 0x537a <uart_enqueue>
		uart_enqueue(which, '1');
    34aa:	ce 01       	movw	r24, r28
    34ac:	61 e3       	ldi	r22, 0x31	; 49
    34ae:	0e 94 bd 29 	call	0x537a	; 0x537a <uart_enqueue>
		uart_enqueue(which, '0');
    34b2:	ce 01       	movw	r24, r28
    34b4:	60 e3       	ldi	r22, 0x30	; 48
    34b6:	0e 94 bd 29 	call	0x537a	; 0x537a <uart_enqueue>
		uart_enqueue(which, '1');
    34ba:	ce 01       	movw	r24, r28
    34bc:	61 e3       	ldi	r22, 0x31	; 49
    34be:	0e 94 bd 29 	call	0x537a	; 0x537a <uart_enqueue>
		break;
    34c2:	9f c0       	rjmp	.+318    	; 0x3602 <uart_enq_BIN4+0x264>
	case(6):
		uart_enqueue(which, '0');
    34c4:	60 e3       	ldi	r22, 0x30	; 48
    34c6:	0e 94 bd 29 	call	0x537a	; 0x537a <uart_enqueue>
		uart_enqueue(which, '1');
    34ca:	ce 01       	movw	r24, r28
    34cc:	61 e3       	ldi	r22, 0x31	; 49
    34ce:	0e 94 bd 29 	call	0x537a	; 0x537a <uart_enqueue>
		uart_enqueue(which, '1');
    34d2:	ce 01       	movw	r24, r28
    34d4:	61 e3       	ldi	r22, 0x31	; 49
    34d6:	0e 94 bd 29 	call	0x537a	; 0x537a <uart_enqueue>
		uart_enqueue(which, '0');
    34da:	ce 01       	movw	r24, r28
    34dc:	60 e3       	ldi	r22, 0x30	; 48
    34de:	0e 94 bd 29 	call	0x537a	; 0x537a <uart_enqueue>
		break;
    34e2:	8f c0       	rjmp	.+286    	; 0x3602 <uart_enq_BIN4+0x264>
	case(7):
		uart_enqueue(which, '0');
    34e4:	60 e3       	ldi	r22, 0x30	; 48
    34e6:	0e 94 bd 29 	call	0x537a	; 0x537a <uart_enqueue>
		uart_enqueue(which, '1');
    34ea:	ce 01       	movw	r24, r28
    34ec:	61 e3       	ldi	r22, 0x31	; 49
    34ee:	0e 94 bd 29 	call	0x537a	; 0x537a <uart_enqueue>
		uart_enqueue(which, '1');
    34f2:	ce 01       	movw	r24, r28
    34f4:	61 e3       	ldi	r22, 0x31	; 49
    34f6:	0e 94 bd 29 	call	0x537a	; 0x537a <uart_enqueue>
		uart_enqueue(which, '1');
    34fa:	ce 01       	movw	r24, r28
    34fc:	61 e3       	ldi	r22, 0x31	; 49
    34fe:	0e 94 bd 29 	call	0x537a	; 0x537a <uart_enqueue>
		break;
    3502:	7f c0       	rjmp	.+254    	; 0x3602 <uart_enq_BIN4+0x264>
	case(8):
		uart_enqueue(which, '1');
    3504:	61 e3       	ldi	r22, 0x31	; 49
    3506:	0e 94 bd 29 	call	0x537a	; 0x537a <uart_enqueue>
		uart_enqueue(which, '0');
    350a:	ce 01       	movw	r24, r28
    350c:	60 e3       	ldi	r22, 0x30	; 48
    350e:	0e 94 bd 29 	call	0x537a	; 0x537a <uart_enqueue>
		uart_enqueue(which, '0');
    3512:	ce 01       	movw	r24, r28
    3514:	60 e3       	ldi	r22, 0x30	; 48
    3516:	0e 94 bd 29 	call	0x537a	; 0x537a <uart_enqueue>
		uart_enqueue(which, '0');
    351a:	ce 01       	movw	r24, r28
    351c:	60 e3       	ldi	r22, 0x30	; 48
    351e:	0e 94 bd 29 	call	0x537a	; 0x537a <uart_enqueue>
		break;
    3522:	6f c0       	rjmp	.+222    	; 0x3602 <uart_enq_BIN4+0x264>
	case(9):
		uart_enqueue(which, '1');
    3524:	61 e3       	ldi	r22, 0x31	; 49
    3526:	0e 94 bd 29 	call	0x537a	; 0x537a <uart_enqueue>
		uart_enqueue(which, '0');
    352a:	ce 01       	movw	r24, r28
    352c:	60 e3       	ldi	r22, 0x30	; 48
    352e:	0e 94 bd 29 	call	0x537a	; 0x537a <uart_enqueue>
		uart_enqueue(which, '0');
    3532:	ce 01       	movw	r24, r28
    3534:	60 e3       	ldi	r22, 0x30	; 48
    3536:	0e 94 bd 29 	call	0x537a	; 0x537a <uart_enqueue>
		uart_enqueue(which, '1');
    353a:	ce 01       	movw	r24, r28
    353c:	61 e3       	ldi	r22, 0x31	; 49
    353e:	0e 94 bd 29 	call	0x537a	; 0x537a <uart_enqueue>
		break;
    3542:	5f c0       	rjmp	.+190    	; 0x3602 <uart_enq_BIN4+0x264>
	case(10):
		uart_enqueue(which, '1');
    3544:	61 e3       	ldi	r22, 0x31	; 49
    3546:	0e 94 bd 29 	call	0x537a	; 0x537a <uart_enqueue>
		uart_enqueue(which, '0');
    354a:	ce 01       	movw	r24, r28
    354c:	60 e3       	ldi	r22, 0x30	; 48
    354e:	0e 94 bd 29 	call	0x537a	; 0x537a <uart_enqueue>
		uart_enqueue(which, '1');
    3552:	ce 01       	movw	r24, r28
    3554:	61 e3       	ldi	r22, 0x31	; 49
    3556:	0e 94 bd 29 	call	0x537a	; 0x537a <uart_enqueue>
		uart_enqueue(which, '0');
    355a:	ce 01       	movw	r24, r28
    355c:	60 e3       	ldi	r22, 0x30	; 48
    355e:	0e 94 bd 29 	call	0x537a	; 0x537a <uart_enqueue>
		break;
    3562:	4f c0       	rjmp	.+158    	; 0x3602 <uart_enq_BIN4+0x264>
	case(11):
		uart_enqueue(which, '1');
    3564:	61 e3       	ldi	r22, 0x31	; 49
    3566:	0e 94 bd 29 	call	0x537a	; 0x537a <uart_enqueue>
		uart_enqueue(which, '0');
    356a:	ce 01       	movw	r24, r28
    356c:	60 e3       	ldi	r22, 0x30	; 48
    356e:	0e 94 bd 29 	call	0x537a	; 0x537a <uart_enqueue>
		uart_enqueue(which, '1');
    3572:	ce 01       	movw	r24, r28
    3574:	61 e3       	ldi	r22, 0x31	; 49
    3576:	0e 94 bd 29 	call	0x537a	; 0x537a <uart_enqueue>
		uart_enqueue(which, '1');
    357a:	ce 01       	movw	r24, r28
    357c:	61 e3       	ldi	r22, 0x31	; 49
    357e:	0e 94 bd 29 	call	0x537a	; 0x537a <uart_enqueue>
		break;
    3582:	3f c0       	rjmp	.+126    	; 0x3602 <uart_enq_BIN4+0x264>
	case(12):
		uart_enqueue(which, '1');
    3584:	61 e3       	ldi	r22, 0x31	; 49
    3586:	0e 94 bd 29 	call	0x537a	; 0x537a <uart_enqueue>
		uart_enqueue(which, '1');
    358a:	ce 01       	movw	r24, r28
    358c:	61 e3       	ldi	r22, 0x31	; 49
    358e:	0e 94 bd 29 	call	0x537a	; 0x537a <uart_enqueue>
		uart_enqueue(which, '0');
    3592:	ce 01       	movw	r24, r28
    3594:	60 e3       	ldi	r22, 0x30	; 48
    3596:	0e 94 bd 29 	call	0x537a	; 0x537a <uart_enqueue>
		uart_enqueue(which, '0');
    359a:	ce 01       	movw	r24, r28
    359c:	60 e3       	ldi	r22, 0x30	; 48
    359e:	0e 94 bd 29 	call	0x537a	; 0x537a <uart_enqueue>
		break;
    35a2:	2f c0       	rjmp	.+94     	; 0x3602 <uart_enq_BIN4+0x264>
	case(13):
		uart_enqueue(which, '1');
    35a4:	61 e3       	ldi	r22, 0x31	; 49
    35a6:	0e 94 bd 29 	call	0x537a	; 0x537a <uart_enqueue>
		uart_enqueue(which, '1');
    35aa:	ce 01       	movw	r24, r28
    35ac:	61 e3       	ldi	r22, 0x31	; 49
    35ae:	0e 94 bd 29 	call	0x537a	; 0x537a <uart_enqueue>
		uart_enqueue(which, '0');
    35b2:	ce 01       	movw	r24, r28
    35b4:	60 e3       	ldi	r22, 0x30	; 48
    35b6:	0e 94 bd 29 	call	0x537a	; 0x537a <uart_enqueue>
		uart_enqueue(which, '1');
    35ba:	ce 01       	movw	r24, r28
    35bc:	61 e3       	ldi	r22, 0x31	; 49
    35be:	0e 94 bd 29 	call	0x537a	; 0x537a <uart_enqueue>
		break;
    35c2:	1f c0       	rjmp	.+62     	; 0x3602 <uart_enq_BIN4+0x264>
	case(14):
		uart_enqueue(which, '1');
    35c4:	61 e3       	ldi	r22, 0x31	; 49
    35c6:	0e 94 bd 29 	call	0x537a	; 0x537a <uart_enqueue>
		uart_enqueue(which, '1');
    35ca:	ce 01       	movw	r24, r28
    35cc:	61 e3       	ldi	r22, 0x31	; 49
    35ce:	0e 94 bd 29 	call	0x537a	; 0x537a <uart_enqueue>
		uart_enqueue(which, '1');
    35d2:	ce 01       	movw	r24, r28
    35d4:	61 e3       	ldi	r22, 0x31	; 49
    35d6:	0e 94 bd 29 	call	0x537a	; 0x537a <uart_enqueue>
		uart_enqueue(which, '0');
    35da:	ce 01       	movw	r24, r28
    35dc:	60 e3       	ldi	r22, 0x30	; 48
    35de:	0e 94 bd 29 	call	0x537a	; 0x537a <uart_enqueue>
		break;
    35e2:	0f c0       	rjmp	.+30     	; 0x3602 <uart_enq_BIN4+0x264>
	case(15):
		uart_enqueue(which, '1');
    35e4:	61 e3       	ldi	r22, 0x31	; 49
    35e6:	0e 94 bd 29 	call	0x537a	; 0x537a <uart_enqueue>
		uart_enqueue(which, '1');
    35ea:	ce 01       	movw	r24, r28
    35ec:	61 e3       	ldi	r22, 0x31	; 49
    35ee:	0e 94 bd 29 	call	0x537a	; 0x537a <uart_enqueue>
		uart_enqueue(which, '1');
    35f2:	ce 01       	movw	r24, r28
    35f4:	61 e3       	ldi	r22, 0x31	; 49
    35f6:	0e 94 bd 29 	call	0x537a	; 0x537a <uart_enqueue>
		uart_enqueue(which, '1');
    35fa:	ce 01       	movw	r24, r28
    35fc:	61 e3       	ldi	r22, 0x31	; 49
    35fe:	0e 94 bd 29 	call	0x537a	; 0x537a <uart_enqueue>
		break;
	}	
}
    3602:	df 91       	pop	r29
    3604:	cf 91       	pop	r28
    3606:	08 95       	ret

00003608 <uart_enq_BIN8>:

//enqs out toenq as ASCII text in 'b01101010' format
void uart_enq_BIN8(USART_t* which, uint8_t lowb){
    3608:	1f 93       	push	r17
    360a:	cf 93       	push	r28
    360c:	df 93       	push	r29
    360e:	ec 01       	movw	r28, r24
    3610:	16 2f       	mov	r17, r22
	uart_enqueue(which, 'b');
    3612:	62 e6       	ldi	r22, 0x62	; 98
    3614:	0e 94 bd 29 	call	0x537a	; 0x537a <uart_enqueue>
	uart_enq_BIN4(which, lowb>>4);
    3618:	61 2f       	mov	r22, r17
    361a:	62 95       	swap	r22
    361c:	6f 70       	andi	r22, 0x0F	; 15
    361e:	ce 01       	movw	r24, r28
    3620:	0e 94 cf 19 	call	0x339e	; 0x339e <uart_enq_BIN4>
	uart_enq_BIN4(which, lowb & 0x0F);
    3624:	61 2f       	mov	r22, r17
    3626:	6f 70       	andi	r22, 0x0F	; 15
    3628:	ce 01       	movw	r24, r28
    362a:	0e 94 cf 19 	call	0x339e	; 0x339e <uart_enq_BIN4>
}
    362e:	df 91       	pop	r29
    3630:	cf 91       	pop	r28
    3632:	1f 91       	pop	r17
    3634:	08 95       	ret

00003636 <uart_enq_HEX4>:
	

void uart_enq_HEX4(USART_t* which, uint8_t lowb){
	switch(lowb){
    3636:	67 30       	cpi	r22, 0x07	; 7
    3638:	09 f4       	brne	.+2      	; 0x363c <uart_enq_HEX4+0x6>
    363a:	3f c0       	rjmp	.+126    	; 0x36ba <uart_enq_HEX4+0x84>
    363c:	68 30       	cpi	r22, 0x08	; 8
    363e:	70 f4       	brcc	.+28     	; 0x365c <uart_enq_HEX4+0x26>
    3640:	63 30       	cpi	r22, 0x03	; 3
    3642:	59 f1       	breq	.+86     	; 0x369a <uart_enq_HEX4+0x64>
    3644:	64 30       	cpi	r22, 0x04	; 4
    3646:	28 f4       	brcc	.+10     	; 0x3652 <uart_enq_HEX4+0x1c>
    3648:	61 30       	cpi	r22, 0x01	; 1
    364a:	f9 f0       	breq	.+62     	; 0x368a <uart_enq_HEX4+0x54>
    364c:	62 30       	cpi	r22, 0x02	; 2
    364e:	08 f5       	brcc	.+66     	; 0x3692 <uart_enq_HEX4+0x5c>
    3650:	18 c0       	rjmp	.+48     	; 0x3682 <uart_enq_HEX4+0x4c>
    3652:	65 30       	cpi	r22, 0x05	; 5
    3654:	51 f1       	breq	.+84     	; 0x36aa <uart_enq_HEX4+0x74>
    3656:	66 30       	cpi	r22, 0x06	; 6
    3658:	60 f5       	brcc	.+88     	; 0x36b2 <uart_enq_HEX4+0x7c>
    365a:	23 c0       	rjmp	.+70     	; 0x36a2 <uart_enq_HEX4+0x6c>
    365c:	6b 30       	cpi	r22, 0x0B	; 11
    365e:	e9 f1       	breq	.+122    	; 0x36da <uart_enq_HEX4+0xa4>
    3660:	6c 30       	cpi	r22, 0x0C	; 12
    3662:	28 f4       	brcc	.+10     	; 0x366e <uart_enq_HEX4+0x38>
    3664:	69 30       	cpi	r22, 0x09	; 9
    3666:	89 f1       	breq	.+98     	; 0x36ca <uart_enq_HEX4+0x94>
    3668:	6a 30       	cpi	r22, 0x0A	; 10
    366a:	98 f5       	brcc	.+102    	; 0x36d2 <uart_enq_HEX4+0x9c>
    366c:	2a c0       	rjmp	.+84     	; 0x36c2 <uart_enq_HEX4+0x8c>
    366e:	6d 30       	cpi	r22, 0x0D	; 13
    3670:	e1 f1       	breq	.+120    	; 0x36ea <uart_enq_HEX4+0xb4>
    3672:	6d 30       	cpi	r22, 0x0D	; 13
    3674:	b0 f1       	brcs	.+108    	; 0x36e2 <uart_enq_HEX4+0xac>
    3676:	6e 30       	cpi	r22, 0x0E	; 14
    3678:	e1 f1       	breq	.+120    	; 0x36f2 <uart_enq_HEX4+0xbc>
    367a:	6f 30       	cpi	r22, 0x0F	; 15
    367c:	09 f0       	breq	.+2      	; 0x3680 <uart_enq_HEX4+0x4a>
    367e:	40 c0       	rjmp	.+128    	; 0x3700 <uart_enq_HEX4+0xca>
    3680:	3c c0       	rjmp	.+120    	; 0x36fa <uart_enq_HEX4+0xc4>
	case(0):
		uart_enqueue(which,  '0');
    3682:	60 e3       	ldi	r22, 0x30	; 48
    3684:	0e 94 bd 29 	call	0x537a	; 0x537a <uart_enqueue>
		break;
    3688:	08 95       	ret
	case(1):
		uart_enqueue(which,  '1');
    368a:	61 e3       	ldi	r22, 0x31	; 49
    368c:	0e 94 bd 29 	call	0x537a	; 0x537a <uart_enqueue>
		break;
    3690:	08 95       	ret
	case(2):
		uart_enqueue(which,  '2');
    3692:	62 e3       	ldi	r22, 0x32	; 50
    3694:	0e 94 bd 29 	call	0x537a	; 0x537a <uart_enqueue>
		break;
    3698:	08 95       	ret
	case(3):
		uart_enqueue(which,  '3');
    369a:	63 e3       	ldi	r22, 0x33	; 51
    369c:	0e 94 bd 29 	call	0x537a	; 0x537a <uart_enqueue>
		break;
    36a0:	08 95       	ret
	case(4):
		uart_enqueue(which,  '4');
    36a2:	64 e3       	ldi	r22, 0x34	; 52
    36a4:	0e 94 bd 29 	call	0x537a	; 0x537a <uart_enqueue>
		break;
    36a8:	08 95       	ret
	case(5):
		uart_enqueue(which,  '5');
    36aa:	65 e3       	ldi	r22, 0x35	; 53
    36ac:	0e 94 bd 29 	call	0x537a	; 0x537a <uart_enqueue>
		break;
    36b0:	08 95       	ret
	case(6):
		uart_enqueue(which,  '6');
    36b2:	66 e3       	ldi	r22, 0x36	; 54
    36b4:	0e 94 bd 29 	call	0x537a	; 0x537a <uart_enqueue>
		break;
    36b8:	08 95       	ret
	case(7):
		uart_enqueue(which,  '7');
    36ba:	67 e3       	ldi	r22, 0x37	; 55
    36bc:	0e 94 bd 29 	call	0x537a	; 0x537a <uart_enqueue>
		break;
    36c0:	08 95       	ret
	case(8):
		uart_enqueue(which,  '8');
    36c2:	68 e3       	ldi	r22, 0x38	; 56
    36c4:	0e 94 bd 29 	call	0x537a	; 0x537a <uart_enqueue>
		break;
    36c8:	08 95       	ret
	case(9):
		uart_enqueue(which,  '9');
    36ca:	69 e3       	ldi	r22, 0x39	; 57
    36cc:	0e 94 bd 29 	call	0x537a	; 0x537a <uart_enqueue>
		break;
    36d0:	08 95       	ret
	case(10):
		uart_enqueue(which,  'A');
    36d2:	61 e4       	ldi	r22, 0x41	; 65
    36d4:	0e 94 bd 29 	call	0x537a	; 0x537a <uart_enqueue>
		break;
    36d8:	08 95       	ret
	case(11):
		uart_enqueue(which,  'B');
    36da:	62 e4       	ldi	r22, 0x42	; 66
    36dc:	0e 94 bd 29 	call	0x537a	; 0x537a <uart_enqueue>
		break;
    36e0:	08 95       	ret
	case(12):
		uart_enqueue(which,  'C');
    36e2:	63 e4       	ldi	r22, 0x43	; 67
    36e4:	0e 94 bd 29 	call	0x537a	; 0x537a <uart_enqueue>
		break;
    36e8:	08 95       	ret
	case(13):
		uart_enqueue(which,  'D');
    36ea:	64 e4       	ldi	r22, 0x44	; 68
    36ec:	0e 94 bd 29 	call	0x537a	; 0x537a <uart_enqueue>
		break;
    36f0:	08 95       	ret
	case(14):
		uart_enqueue(which,  'E');
    36f2:	65 e4       	ldi	r22, 0x45	; 69
    36f4:	0e 94 bd 29 	call	0x537a	; 0x537a <uart_enqueue>
		break;
    36f8:	08 95       	ret
	case(15):
		uart_enqueue(which,  'F');
    36fa:	66 e4       	ldi	r22, 0x46	; 70
    36fc:	0e 94 bd 29 	call	0x537a	; 0x537a <uart_enqueue>
    3700:	08 95       	ret

00003702 <uart_enq_HEX8>:
		break;
	}	
}

void uart_enq_HEX8(USART_t* which, uint8_t lowb){
    3702:	1f 93       	push	r17
    3704:	cf 93       	push	r28
    3706:	df 93       	push	r29
    3708:	ec 01       	movw	r28, r24
    370a:	16 2f       	mov	r17, r22
	uart_enq_HEX4(which, lowb>>4);
    370c:	62 95       	swap	r22
    370e:	6f 70       	andi	r22, 0x0F	; 15
    3710:	0e 94 1b 1b 	call	0x3636	; 0x3636 <uart_enq_HEX4>
	uart_enq_HEX4(which, lowb & 0x0F);
    3714:	61 2f       	mov	r22, r17
    3716:	6f 70       	andi	r22, 0x0F	; 15
    3718:	ce 01       	movw	r24, r28
    371a:	0e 94 1b 1b 	call	0x3636	; 0x3636 <uart_enq_HEX4>
}
    371e:	df 91       	pop	r29
    3720:	cf 91       	pop	r28
    3722:	1f 91       	pop	r17
    3724:	08 95       	ret

00003726 <uart_enq_HEX16b>:

void uart_enq_HEX16b(USART_t* which, uint8_t highb, uint8_t lowb){
    3726:	1f 93       	push	r17
    3728:	cf 93       	push	r28
    372a:	df 93       	push	r29
    372c:	ec 01       	movw	r28, r24
    372e:	14 2f       	mov	r17, r20
	uart_enq_HEX8(which, highb);
    3730:	0e 94 81 1b 	call	0x3702	; 0x3702 <uart_enq_HEX8>
	uart_enq_HEX8(which, lowb);
    3734:	ce 01       	movw	r24, r28
    3736:	61 2f       	mov	r22, r17
    3738:	0e 94 81 1b 	call	0x3702	; 0x3702 <uart_enq_HEX8>
}
    373c:	df 91       	pop	r29
    373e:	cf 91       	pop	r28
    3740:	1f 91       	pop	r17
    3742:	08 95       	ret

00003744 <uart_enq_HEX16>:

void uart_enq_HEX16(USART_t* which, uint16_t highb){
    3744:	1f 93       	push	r17
    3746:	cf 93       	push	r28
    3748:	df 93       	push	r29
    374a:	ec 01       	movw	r28, r24
    374c:	16 2f       	mov	r17, r22
    374e:	67 2f       	mov	r22, r23
	uint8_t blah;
	blah = (uint8_t)(highb>>8);
	uart_enq_HEX8(which, blah);
    3750:	0e 94 81 1b 	call	0x3702	; 0x3702 <uart_enq_HEX8>
	blah = (uint8_t)(highb & 0x00FF);
	uart_enq_HEX8(which, blah);
    3754:	ce 01       	movw	r24, r28
    3756:	61 2f       	mov	r22, r17
    3758:	0e 94 81 1b 	call	0x3702	; 0x3702 <uart_enq_HEX8>
}
    375c:	df 91       	pop	r29
    375e:	cf 91       	pop	r28
    3760:	1f 91       	pop	r17
    3762:	08 95       	ret

00003764 <__vector_25>:
//************************************************************************
//************************************************************************

//Must correspond to definitions in uart.h
ISR(USARTC0_DRE_vect) {uart_transmit(&uctrl);}//TX Interrupt
ISR(USARTC0_RXC_vect) {uart_receive(&uctrl);} //RX Interrupt
    3764:	1f 92       	push	r1
    3766:	0f 92       	push	r0
    3768:	0f b6       	in	r0, 0x3f	; 63
    376a:	0f 92       	push	r0
    376c:	08 b6       	in	r0, 0x38	; 56
    376e:	0f 92       	push	r0
    3770:	09 b6       	in	r0, 0x39	; 57
    3772:	0f 92       	push	r0
    3774:	0a b6       	in	r0, 0x3a	; 58
    3776:	0f 92       	push	r0
    3778:	0b b6       	in	r0, 0x3b	; 59
    377a:	0f 92       	push	r0
    377c:	11 24       	eor	r1, r1
    377e:	2f 93       	push	r18
    3780:	3f 93       	push	r19
    3782:	4f 93       	push	r20
    3784:	5f 93       	push	r21
    3786:	8f 93       	push	r24
    3788:	9f 93       	push	r25
    378a:	af 93       	push	r26
    378c:	bf 93       	push	r27
    378e:	cf 93       	push	r28
    3790:	df 93       	push	r29
    3792:	ef 93       	push	r30
    3794:	ff 93       	push	r31
//= RECEPTION ENGINE (ISR BASED)
//==================================

void inline uart_receive(USART_t* port){
	//keep receiving until data register is empty or incoming queue is full
	while (((port->STATUS & _BV(7)) == B8(10000000)) && (uart_icount(port) < MAX_IBUFFER_LEN)){		
    3796:	c0 ea       	ldi	r28, 0xA0	; 160
    3798:	d8 e0       	ldi	r29, 0x08	; 8
	uart_itail[idx] = 0;
}

inline uint16_t uart_icount(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_ihead[idx] >= uart_itail[idx]){	
    379a:	e4 e4       	ldi	r30, 0x44	; 68
    379c:	ff e3       	ldi	r31, 0x3F	; 63
    379e:	48 e3       	ldi	r20, 0x38	; 56
    37a0:	57 e2       	ldi	r21, 0x27	; 39
    37a2:	13 c0       	rjmp	.+38     	; 0x37ca <__vector_25+0x66>
//==================================

void inline uart_receive(USART_t* port){
	//keep receiving until data register is empty or incoming queue is full
	while (((port->STATUS & _BV(7)) == B8(10000000)) && (uart_icount(port) < MAX_IBUFFER_LEN)){		
		uart_ienqueue(port, port->DATA);
    37a4:	88 81       	ld	r24, Y
	}
}

inline void uart_ienqueue(USART_t* port, uint8_t datain){
	uint8_t idx = port_map(port);
	uart_ibuffer[idx][uart_ihead[idx]] = datain;
    37a6:	a0 81       	ld	r26, Z
    37a8:	b1 81       	ldd	r27, Z+1	; 0x01
    37aa:	a4 5c       	subi	r26, 0xC4	; 196
    37ac:	b4 4d       	sbci	r27, 0xD4	; 212
    37ae:	8c 93       	st	X, r24
	uart_ihead[idx]++;
    37b0:	80 81       	ld	r24, Z
    37b2:	91 81       	ldd	r25, Z+1	; 0x01
    37b4:	01 96       	adiw	r24, 0x01	; 1
    37b6:	80 83       	st	Z, r24
    37b8:	91 83       	std	Z+1, r25	; 0x01
	if (uart_ihead[idx] >= MAX_IBUFFER_LEN){
    37ba:	80 81       	ld	r24, Z
    37bc:	91 81       	ldd	r25, Z+1	; 0x01
    37be:	24 e0       	ldi	r18, 0x04	; 4
    37c0:	80 30       	cpi	r24, 0x00	; 0
    37c2:	92 07       	cpc	r25, r18
    37c4:	10 f0       	brcs	.+4      	; 0x37ca <__vector_25+0x66>
		uart_ihead[idx] = 0;
    37c6:	10 82       	st	Z, r1
    37c8:	11 82       	std	Z+1, r1	; 0x01
//= RECEPTION ENGINE (ISR BASED)
//==================================

void inline uart_receive(USART_t* port){
	//keep receiving until data register is empty or incoming queue is full
	while (((port->STATUS & _BV(7)) == B8(10000000)) && (uart_icount(port) < MAX_IBUFFER_LEN)){		
    37ca:	89 81       	ldd	r24, Y+1	; 0x01
    37cc:	88 23       	and	r24, r24
    37ce:	fc f4       	brge	.+62     	; 0x380e <__vector_25+0xaa>
	uart_itail[idx] = 0;
}

inline uint16_t uart_icount(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_ihead[idx] >= uart_itail[idx]){	
    37d0:	80 81       	ld	r24, Z
    37d2:	91 81       	ldd	r25, Z+1	; 0x01
    37d4:	da 01       	movw	r26, r20
    37d6:	2d 91       	ld	r18, X+
    37d8:	3c 91       	ld	r19, X
    37da:	11 97       	sbiw	r26, 0x01	; 1
    37dc:	82 17       	cp	r24, r18
    37de:	93 07       	cpc	r25, r19
    37e0:	40 f0       	brcs	.+16     	; 0x37f2 <__vector_25+0x8e>
		return (uart_ihead[idx] - uart_itail[idx]);
    37e2:	80 81       	ld	r24, Z
    37e4:	91 81       	ldd	r25, Z+1	; 0x01
    37e6:	2d 91       	ld	r18, X+
    37e8:	3c 91       	ld	r19, X
    37ea:	11 97       	sbiw	r26, 0x01	; 1
    37ec:	82 1b       	sub	r24, r18
    37ee:	93 0b       	sbc	r25, r19
    37f0:	0a c0       	rjmp	.+20     	; 0x3806 <__vector_25+0xa2>
	}
	else {
		return ((MAX_IBUFFER_LEN-uart_itail[idx])+uart_ihead[idx]);
    37f2:	80 81       	ld	r24, Z
    37f4:	91 81       	ldd	r25, Z+1	; 0x01
    37f6:	da 01       	movw	r26, r20
    37f8:	2d 91       	ld	r18, X+
    37fa:	3c 91       	ld	r19, X
    37fc:	11 97       	sbiw	r26, 0x01	; 1
    37fe:	80 50       	subi	r24, 0x00	; 0
    3800:	9c 4f       	sbci	r25, 0xFC	; 252
    3802:	82 1b       	sub	r24, r18
    3804:	93 0b       	sbc	r25, r19
//= RECEPTION ENGINE (ISR BASED)
//==================================

void inline uart_receive(USART_t* port){
	//keep receiving until data register is empty or incoming queue is full
	while (((port->STATUS & _BV(7)) == B8(10000000)) && (uart_icount(port) < MAX_IBUFFER_LEN)){		
    3806:	b4 e0       	ldi	r27, 0x04	; 4
    3808:	80 30       	cpi	r24, 0x00	; 0
    380a:	9b 07       	cpc	r25, r27
    380c:	58 f2       	brcs	.-106    	; 0x37a4 <__vector_25+0x40>
//************************************************************************
//************************************************************************

//Must correspond to definitions in uart.h
ISR(USARTC0_DRE_vect) {uart_transmit(&uctrl);}//TX Interrupt
ISR(USARTC0_RXC_vect) {uart_receive(&uctrl);} //RX Interrupt
    380e:	ff 91       	pop	r31
    3810:	ef 91       	pop	r30
    3812:	df 91       	pop	r29
    3814:	cf 91       	pop	r28
    3816:	bf 91       	pop	r27
    3818:	af 91       	pop	r26
    381a:	9f 91       	pop	r25
    381c:	8f 91       	pop	r24
    381e:	5f 91       	pop	r21
    3820:	4f 91       	pop	r20
    3822:	3f 91       	pop	r19
    3824:	2f 91       	pop	r18
    3826:	0f 90       	pop	r0
    3828:	0b be       	out	0x3b, r0	; 59
    382a:	0f 90       	pop	r0
    382c:	0a be       	out	0x3a, r0	; 58
    382e:	0f 90       	pop	r0
    3830:	09 be       	out	0x39, r0	; 57
    3832:	0f 90       	pop	r0
    3834:	08 be       	out	0x38, r0	; 56
    3836:	0f 90       	pop	r0
    3838:	0f be       	out	0x3f, r0	; 63
    383a:	0f 90       	pop	r0
    383c:	1f 90       	pop	r1
    383e:	18 95       	reti

00003840 <__vector_28>:
ISR(USARTC1_DRE_vect) {uart_transmit(&udata);}//TX Interrupt
ISR(USARTC1_RXC_vect) {uart_receive(&udata);} //RX Interrupt
    3840:	1f 92       	push	r1
    3842:	0f 92       	push	r0
    3844:	0f b6       	in	r0, 0x3f	; 63
    3846:	0f 92       	push	r0
    3848:	08 b6       	in	r0, 0x38	; 56
    384a:	0f 92       	push	r0
    384c:	09 b6       	in	r0, 0x39	; 57
    384e:	0f 92       	push	r0
    3850:	0a b6       	in	r0, 0x3a	; 58
    3852:	0f 92       	push	r0
    3854:	0b b6       	in	r0, 0x3b	; 59
    3856:	0f 92       	push	r0
    3858:	11 24       	eor	r1, r1
    385a:	2f 93       	push	r18
    385c:	3f 93       	push	r19
    385e:	4f 93       	push	r20
    3860:	5f 93       	push	r21
    3862:	8f 93       	push	r24
    3864:	9f 93       	push	r25
    3866:	af 93       	push	r26
    3868:	bf 93       	push	r27
    386a:	cf 93       	push	r28
    386c:	df 93       	push	r29
    386e:	ef 93       	push	r30
    3870:	ff 93       	push	r31
//= RECEPTION ENGINE (ISR BASED)
//==================================

void inline uart_receive(USART_t* port){
	//keep receiving until data register is empty or incoming queue is full
	while (((port->STATUS & _BV(7)) == B8(10000000)) && (uart_icount(port) < MAX_IBUFFER_LEN)){		
    3872:	c0 eb       	ldi	r28, 0xB0	; 176
    3874:	d8 e0       	ldi	r29, 0x08	; 8
	uart_itail[idx] = 0;
}

inline uint16_t uart_icount(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_ihead[idx] >= uart_itail[idx]){	
    3876:	e6 e4       	ldi	r30, 0x46	; 70
    3878:	ff e3       	ldi	r31, 0x3F	; 63
    387a:	4a e3       	ldi	r20, 0x3A	; 58
    387c:	57 e2       	ldi	r21, 0x27	; 39
    387e:	13 c0       	rjmp	.+38     	; 0x38a6 <__vector_28+0x66>
//==================================

void inline uart_receive(USART_t* port){
	//keep receiving until data register is empty or incoming queue is full
	while (((port->STATUS & _BV(7)) == B8(10000000)) && (uart_icount(port) < MAX_IBUFFER_LEN)){		
		uart_ienqueue(port, port->DATA);
    3880:	88 81       	ld	r24, Y
	}
}

inline void uart_ienqueue(USART_t* port, uint8_t datain){
	uint8_t idx = port_map(port);
	uart_ibuffer[idx][uart_ihead[idx]] = datain;
    3882:	a0 81       	ld	r26, Z
    3884:	b1 81       	ldd	r27, Z+1	; 0x01
    3886:	a4 5c       	subi	r26, 0xC4	; 196
    3888:	b0 4d       	sbci	r27, 0xD0	; 208
    388a:	8c 93       	st	X, r24
	uart_ihead[idx]++;
    388c:	80 81       	ld	r24, Z
    388e:	91 81       	ldd	r25, Z+1	; 0x01
    3890:	01 96       	adiw	r24, 0x01	; 1
    3892:	80 83       	st	Z, r24
    3894:	91 83       	std	Z+1, r25	; 0x01
	if (uart_ihead[idx] >= MAX_IBUFFER_LEN){
    3896:	80 81       	ld	r24, Z
    3898:	91 81       	ldd	r25, Z+1	; 0x01
    389a:	24 e0       	ldi	r18, 0x04	; 4
    389c:	80 30       	cpi	r24, 0x00	; 0
    389e:	92 07       	cpc	r25, r18
    38a0:	10 f0       	brcs	.+4      	; 0x38a6 <__vector_28+0x66>
		uart_ihead[idx] = 0;
    38a2:	10 82       	st	Z, r1
    38a4:	11 82       	std	Z+1, r1	; 0x01
//= RECEPTION ENGINE (ISR BASED)
//==================================

void inline uart_receive(USART_t* port){
	//keep receiving until data register is empty or incoming queue is full
	while (((port->STATUS & _BV(7)) == B8(10000000)) && (uart_icount(port) < MAX_IBUFFER_LEN)){		
    38a6:	89 81       	ldd	r24, Y+1	; 0x01
    38a8:	88 23       	and	r24, r24
    38aa:	fc f4       	brge	.+62     	; 0x38ea <__vector_28+0xaa>
	uart_itail[idx] = 0;
}

inline uint16_t uart_icount(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_ihead[idx] >= uart_itail[idx]){	
    38ac:	80 81       	ld	r24, Z
    38ae:	91 81       	ldd	r25, Z+1	; 0x01
    38b0:	da 01       	movw	r26, r20
    38b2:	2d 91       	ld	r18, X+
    38b4:	3c 91       	ld	r19, X
    38b6:	11 97       	sbiw	r26, 0x01	; 1
    38b8:	82 17       	cp	r24, r18
    38ba:	93 07       	cpc	r25, r19
    38bc:	40 f0       	brcs	.+16     	; 0x38ce <__vector_28+0x8e>
		return (uart_ihead[idx] - uart_itail[idx]);
    38be:	80 81       	ld	r24, Z
    38c0:	91 81       	ldd	r25, Z+1	; 0x01
    38c2:	2d 91       	ld	r18, X+
    38c4:	3c 91       	ld	r19, X
    38c6:	11 97       	sbiw	r26, 0x01	; 1
    38c8:	82 1b       	sub	r24, r18
    38ca:	93 0b       	sbc	r25, r19
    38cc:	0a c0       	rjmp	.+20     	; 0x38e2 <__vector_28+0xa2>
	}
	else {
		return ((MAX_IBUFFER_LEN-uart_itail[idx])+uart_ihead[idx]);
    38ce:	80 81       	ld	r24, Z
    38d0:	91 81       	ldd	r25, Z+1	; 0x01
    38d2:	da 01       	movw	r26, r20
    38d4:	2d 91       	ld	r18, X+
    38d6:	3c 91       	ld	r19, X
    38d8:	11 97       	sbiw	r26, 0x01	; 1
    38da:	80 50       	subi	r24, 0x00	; 0
    38dc:	9c 4f       	sbci	r25, 0xFC	; 252
    38de:	82 1b       	sub	r24, r18
    38e0:	93 0b       	sbc	r25, r19
//= RECEPTION ENGINE (ISR BASED)
//==================================

void inline uart_receive(USART_t* port){
	//keep receiving until data register is empty or incoming queue is full
	while (((port->STATUS & _BV(7)) == B8(10000000)) && (uart_icount(port) < MAX_IBUFFER_LEN)){		
    38e2:	b4 e0       	ldi	r27, 0x04	; 4
    38e4:	80 30       	cpi	r24, 0x00	; 0
    38e6:	9b 07       	cpc	r25, r27
    38e8:	58 f2       	brcs	.-106    	; 0x3880 <__vector_28+0x40>

//Must correspond to definitions in uart.h
ISR(USARTC0_DRE_vect) {uart_transmit(&uctrl);}//TX Interrupt
ISR(USARTC0_RXC_vect) {uart_receive(&uctrl);} //RX Interrupt
ISR(USARTC1_DRE_vect) {uart_transmit(&udata);}//TX Interrupt
ISR(USARTC1_RXC_vect) {uart_receive(&udata);} //RX Interrupt
    38ea:	ff 91       	pop	r31
    38ec:	ef 91       	pop	r30
    38ee:	df 91       	pop	r29
    38f0:	cf 91       	pop	r28
    38f2:	bf 91       	pop	r27
    38f4:	af 91       	pop	r26
    38f6:	9f 91       	pop	r25
    38f8:	8f 91       	pop	r24
    38fa:	5f 91       	pop	r21
    38fc:	4f 91       	pop	r20
    38fe:	3f 91       	pop	r19
    3900:	2f 91       	pop	r18
    3902:	0f 90       	pop	r0
    3904:	0b be       	out	0x3b, r0	; 59
    3906:	0f 90       	pop	r0
    3908:	0a be       	out	0x3a, r0	; 58
    390a:	0f 90       	pop	r0
    390c:	09 be       	out	0x39, r0	; 57
    390e:	0f 90       	pop	r0
    3910:	08 be       	out	0x38, r0	; 56
    3912:	0f 90       	pop	r0
    3914:	0f be       	out	0x3f, r0	; 63
    3916:	0f 90       	pop	r0
    3918:	1f 90       	pop	r1
    391a:	18 95       	reti

0000391c <uart_rxbuffer_enable>:
		uart_rxbuffer_enable(port);
		uart_txbuffer_enable(port);
}

//Enable Receive Complete (high priority) -- so incoming is always handled first
void uart_rxbuffer_enable(USART_t* port){
    391c:	fc 01       	movw	r30, r24
	port->CTRLA = (port->CTRLA | B8(00110000));	//Set the Data Register Empty Interrupt to Medium Priority (timer needs to be higher!)
    391e:	83 81       	ldd	r24, Z+3	; 0x03
    3920:	80 63       	ori	r24, 0x30	; 48
    3922:	83 83       	std	Z+3, r24	; 0x03
}
    3924:	08 95       	ret

00003926 <uart_rxbuffer_disable>:

void uart_rxbuffer_disable(USART_t* port){
    3926:	fc 01       	movw	r30, r24
	port->CTRLA = (port->CTRLA & B8(11001111));	//Disable the Data Register Empty Interrupt
    3928:	83 81       	ldd	r24, Z+3	; 0x03
    392a:	8f 7c       	andi	r24, 0xCF	; 207
    392c:	83 83       	std	Z+3, r24	; 0x03
}
    392e:	08 95       	ret

00003930 <uart_txbuffer_enable>:

//Enable Transmit Ready (med priority) 
void uart_txbuffer_enable(USART_t* port){
    3930:	fc 01       	movw	r30, r24
	port->CTRLA = (port->CTRLA | B8(00000010));	//Set the Data Register Empty Interrupt to Medium Priority (timer needs to be higher!)
    3932:	83 81       	ldd	r24, Z+3	; 0x03
    3934:	82 60       	ori	r24, 0x02	; 2
    3936:	83 83       	std	Z+3, r24	; 0x03
}
    3938:	08 95       	ret

0000393a <uart_txbuffer_disable>:

void uart_txbuffer_disable(USART_t* port){
    393a:	fc 01       	movw	r30, r24
	port->CTRLA = (port->CTRLA & B8(11111100));	//Disable the Data Register Empty Interrupt
    393c:	83 81       	ldd	r24, Z+3	; 0x03
    393e:	8c 7f       	andi	r24, 0xFC	; 252
    3940:	83 83       	std	Z+3, r24	; 0x03
}
    3942:	08 95       	ret

00003944 <__vector_29>:
//************************************************************************

//Must correspond to definitions in uart.h
ISR(USARTC0_DRE_vect) {uart_transmit(&uctrl);}//TX Interrupt
ISR(USARTC0_RXC_vect) {uart_receive(&uctrl);} //RX Interrupt
ISR(USARTC1_DRE_vect) {uart_transmit(&udata);}//TX Interrupt
    3944:	1f 92       	push	r1
    3946:	0f 92       	push	r0
    3948:	0f b6       	in	r0, 0x3f	; 63
    394a:	0f 92       	push	r0
    394c:	08 b6       	in	r0, 0x38	; 56
    394e:	0f 92       	push	r0
    3950:	09 b6       	in	r0, 0x39	; 57
    3952:	0f 92       	push	r0
    3954:	0a b6       	in	r0, 0x3a	; 58
    3956:	0f 92       	push	r0
    3958:	0b b6       	in	r0, 0x3b	; 59
    395a:	0f 92       	push	r0
    395c:	11 24       	eor	r1, r1
    395e:	2f 93       	push	r18
    3960:	3f 93       	push	r19
    3962:	4f 93       	push	r20
    3964:	5f 93       	push	r21
    3966:	6f 93       	push	r22
    3968:	7f 93       	push	r23
    396a:	8f 93       	push	r24
    396c:	9f 93       	push	r25
    396e:	af 93       	push	r26
    3970:	bf 93       	push	r27
    3972:	cf 93       	push	r28
    3974:	df 93       	push	r29
    3976:	ef 93       	push	r30
    3978:	ff 93       	push	r31
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    397a:	e0 eb       	ldi	r30, 0xB0	; 176
    397c:	f8 e0       	ldi	r31, 0x08	; 8
    397e:	81 81       	ldd	r24, Z+1	; 0x01
    3980:	85 fd       	sbrc	r24, 5
    3982:	1a c0       	rjmp	.+52     	; 0x39b8 <__vector_29+0x74>
    3984:	3a c0       	rjmp	.+116    	; 0x39fa <__vector_29+0xb6>
}

inline uint8_t uart_dequeue(USART_t* port){
	uint8_t idx = port_map(port);
	uint16_t oldtail;
	oldtail = uart_tail[idx];
    3986:	20 81       	ld	r18, Z
    3988:	31 81       	ldd	r19, Z+1	; 0x01
	uart_tail[idx]++;
    398a:	80 81       	ld	r24, Z
    398c:	91 81       	ldd	r25, Z+1	; 0x01
    398e:	01 96       	adiw	r24, 0x01	; 1
    3990:	80 83       	st	Z, r24
    3992:	91 83       	std	Z+1, r25	; 0x01
	if (uart_tail[idx] >= MAX_BUFFER_LEN){
    3994:	80 81       	ld	r24, Z
    3996:	91 81       	ldd	r25, Z+1	; 0x01
    3998:	44 e0       	ldi	r20, 0x04	; 4
    399a:	80 30       	cpi	r24, 0x00	; 0
    399c:	94 07       	cpc	r25, r20
    399e:	10 f0       	brcs	.+4      	; 0x39a4 <__vector_29+0x60>
		uart_tail[idx] = 0;
    39a0:	10 82       	st	Z, r1
    39a2:	11 82       	std	Z+1, r1	; 0x01
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    39a4:	2e 5b       	subi	r18, 0xBE	; 190
    39a6:	34 4c       	sbci	r19, 0xC4	; 196
    39a8:	e9 01       	movw	r28, r18
    39aa:	88 81       	ld	r24, Y
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
    39ac:	eb 01       	movw	r28, r22
    39ae:	88 83       	st	Y, r24
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    39b0:	89 81       	ldd	r24, Y+1	; 0x01
    39b2:	85 fd       	sbrc	r24, 5
    39b4:	07 c0       	rjmp	.+14     	; 0x39c4 <__vector_29+0x80>
    39b6:	21 c0       	rjmp	.+66     	; 0x39fa <__vector_29+0xb6>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    39b8:	a0 e4       	ldi	r26, 0x40	; 64
    39ba:	b3 e3       	ldi	r27, 0x33	; 51
    39bc:	ec e4       	ldi	r30, 0x4C	; 76
    39be:	ff e3       	ldi	r31, 0x3F	; 63
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
    39c0:	60 eb       	ldi	r22, 0xB0	; 176
    39c2:	78 e0       	ldi	r23, 0x08	; 8
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    39c4:	8d 91       	ld	r24, X+
    39c6:	9c 91       	ld	r25, X
    39c8:	11 97       	sbiw	r26, 0x01	; 1
    39ca:	20 81       	ld	r18, Z
    39cc:	31 81       	ldd	r19, Z+1	; 0x01
    39ce:	82 17       	cp	r24, r18
    39d0:	93 07       	cpc	r25, r19
    39d2:	40 f0       	brcs	.+16     	; 0x39e4 <__vector_29+0xa0>
		return (uart_head[idx] - uart_tail[idx]);
    39d4:	8d 91       	ld	r24, X+
    39d6:	9c 91       	ld	r25, X
    39d8:	11 97       	sbiw	r26, 0x01	; 1
    39da:	20 81       	ld	r18, Z
    39dc:	31 81       	ldd	r19, Z+1	; 0x01
    39de:	82 1b       	sub	r24, r18
    39e0:	93 0b       	sbc	r25, r19
    39e2:	09 c0       	rjmp	.+18     	; 0x39f6 <__vector_29+0xb2>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    39e4:	8d 91       	ld	r24, X+
    39e6:	9c 91       	ld	r25, X
    39e8:	11 97       	sbiw	r26, 0x01	; 1
    39ea:	20 81       	ld	r18, Z
    39ec:	31 81       	ldd	r19, Z+1	; 0x01
    39ee:	80 50       	subi	r24, 0x00	; 0
    39f0:	9c 4f       	sbci	r25, 0xFC	; 252
    39f2:	82 1b       	sub	r24, r18
    39f4:	93 0b       	sbc	r25, r19
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    39f6:	00 97       	sbiw	r24, 0x00	; 0
    39f8:	31 f6       	brne	.-116    	; 0x3986 <__vector_29+0x42>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    39fa:	20 91 40 33 	lds	r18, 0x3340
    39fe:	30 91 41 33 	lds	r19, 0x3341
    3a02:	80 91 4c 3f 	lds	r24, 0x3F4C
    3a06:	90 91 4d 3f 	lds	r25, 0x3F4D
    3a0a:	28 17       	cp	r18, r24
    3a0c:	39 07       	cpc	r19, r25
    3a0e:	58 f0       	brcs	.+22     	; 0x3a26 <__vector_29+0xe2>
		return (uart_head[idx] - uart_tail[idx]);
    3a10:	80 91 40 33 	lds	r24, 0x3340
    3a14:	90 91 41 33 	lds	r25, 0x3341
    3a18:	20 91 4c 3f 	lds	r18, 0x3F4C
    3a1c:	30 91 4d 3f 	lds	r19, 0x3F4D
    3a20:	82 1b       	sub	r24, r18
    3a22:	93 0b       	sbc	r25, r19
    3a24:	0c c0       	rjmp	.+24     	; 0x3a3e <__vector_29+0xfa>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    3a26:	80 91 40 33 	lds	r24, 0x3340
    3a2a:	90 91 41 33 	lds	r25, 0x3341
    3a2e:	20 91 4c 3f 	lds	r18, 0x3F4C
    3a32:	30 91 4d 3f 	lds	r19, 0x3F4D
    3a36:	80 50       	subi	r24, 0x00	; 0
    3a38:	9c 4f       	sbci	r25, 0xFC	; 252
    3a3a:	82 1b       	sub	r24, r18
    3a3c:	93 0b       	sbc	r25, r19
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
	}
	//disable the tx outgoing hardware buffer ready interrupt if we have nothing more to put in it.
	if(uart_count(port)>0) uart_txbuffer_enable(port);
    3a3e:	00 97       	sbiw	r24, 0x00	; 0
    3a40:	29 f0       	breq	.+10     	; 0x3a4c <__vector_29+0x108>
    3a42:	80 eb       	ldi	r24, 0xB0	; 176
    3a44:	98 e0       	ldi	r25, 0x08	; 8
    3a46:	0e 94 98 1c 	call	0x3930	; 0x3930 <uart_txbuffer_enable>
    3a4a:	04 c0       	rjmp	.+8      	; 0x3a54 <__vector_29+0x110>
	else uart_txbuffer_disable(port);
    3a4c:	80 eb       	ldi	r24, 0xB0	; 176
    3a4e:	98 e0       	ldi	r25, 0x08	; 8
    3a50:	0e 94 9d 1c 	call	0x393a	; 0x393a <uart_txbuffer_disable>
//************************************************************************

//Must correspond to definitions in uart.h
ISR(USARTC0_DRE_vect) {uart_transmit(&uctrl);}//TX Interrupt
ISR(USARTC0_RXC_vect) {uart_receive(&uctrl);} //RX Interrupt
ISR(USARTC1_DRE_vect) {uart_transmit(&udata);}//TX Interrupt
    3a54:	ff 91       	pop	r31
    3a56:	ef 91       	pop	r30
    3a58:	df 91       	pop	r29
    3a5a:	cf 91       	pop	r28
    3a5c:	bf 91       	pop	r27
    3a5e:	af 91       	pop	r26
    3a60:	9f 91       	pop	r25
    3a62:	8f 91       	pop	r24
    3a64:	7f 91       	pop	r23
    3a66:	6f 91       	pop	r22
    3a68:	5f 91       	pop	r21
    3a6a:	4f 91       	pop	r20
    3a6c:	3f 91       	pop	r19
    3a6e:	2f 91       	pop	r18
    3a70:	0f 90       	pop	r0
    3a72:	0b be       	out	0x3b, r0	; 59
    3a74:	0f 90       	pop	r0
    3a76:	0a be       	out	0x3a, r0	; 58
    3a78:	0f 90       	pop	r0
    3a7a:	09 be       	out	0x39, r0	; 57
    3a7c:	0f 90       	pop	r0
    3a7e:	08 be       	out	0x38, r0	; 56
    3a80:	0f 90       	pop	r0
    3a82:	0f be       	out	0x3f, r0	; 63
    3a84:	0f 90       	pop	r0
    3a86:	1f 90       	pop	r1
    3a88:	18 95       	reti

00003a8a <__vector_26>:
//** [PORT SPECIFIC CODE]
//************************************************************************
//************************************************************************

//Must correspond to definitions in uart.h
ISR(USARTC0_DRE_vect) {uart_transmit(&uctrl);}//TX Interrupt
    3a8a:	1f 92       	push	r1
    3a8c:	0f 92       	push	r0
    3a8e:	0f b6       	in	r0, 0x3f	; 63
    3a90:	0f 92       	push	r0
    3a92:	08 b6       	in	r0, 0x38	; 56
    3a94:	0f 92       	push	r0
    3a96:	09 b6       	in	r0, 0x39	; 57
    3a98:	0f 92       	push	r0
    3a9a:	0a b6       	in	r0, 0x3a	; 58
    3a9c:	0f 92       	push	r0
    3a9e:	0b b6       	in	r0, 0x3b	; 59
    3aa0:	0f 92       	push	r0
    3aa2:	11 24       	eor	r1, r1
    3aa4:	2f 93       	push	r18
    3aa6:	3f 93       	push	r19
    3aa8:	4f 93       	push	r20
    3aaa:	5f 93       	push	r21
    3aac:	6f 93       	push	r22
    3aae:	7f 93       	push	r23
    3ab0:	8f 93       	push	r24
    3ab2:	9f 93       	push	r25
    3ab4:	af 93       	push	r26
    3ab6:	bf 93       	push	r27
    3ab8:	cf 93       	push	r28
    3aba:	df 93       	push	r29
    3abc:	ef 93       	push	r30
    3abe:	ff 93       	push	r31
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    3ac0:	e0 ea       	ldi	r30, 0xA0	; 160
    3ac2:	f8 e0       	ldi	r31, 0x08	; 8
    3ac4:	81 81       	ldd	r24, Z+1	; 0x01
    3ac6:	85 fd       	sbrc	r24, 5
    3ac8:	1a c0       	rjmp	.+52     	; 0x3afe <__vector_26+0x74>
    3aca:	3a c0       	rjmp	.+116    	; 0x3b40 <__vector_26+0xb6>
}

inline uint8_t uart_dequeue(USART_t* port){
	uint8_t idx = port_map(port);
	uint16_t oldtail;
	oldtail = uart_tail[idx];
    3acc:	20 81       	ld	r18, Z
    3ace:	31 81       	ldd	r19, Z+1	; 0x01
	uart_tail[idx]++;
    3ad0:	80 81       	ld	r24, Z
    3ad2:	91 81       	ldd	r25, Z+1	; 0x01
    3ad4:	01 96       	adiw	r24, 0x01	; 1
    3ad6:	80 83       	st	Z, r24
    3ad8:	91 83       	std	Z+1, r25	; 0x01
	if (uart_tail[idx] >= MAX_BUFFER_LEN){
    3ada:	80 81       	ld	r24, Z
    3adc:	91 81       	ldd	r25, Z+1	; 0x01
    3ade:	44 e0       	ldi	r20, 0x04	; 4
    3ae0:	80 30       	cpi	r24, 0x00	; 0
    3ae2:	94 07       	cpc	r25, r20
    3ae4:	10 f0       	brcs	.+4      	; 0x3aea <__vector_26+0x60>
		uart_tail[idx] = 0;
    3ae6:	10 82       	st	Z, r1
    3ae8:	11 82       	std	Z+1, r1	; 0x01
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    3aea:	2e 5b       	subi	r18, 0xBE	; 190
    3aec:	38 4c       	sbci	r19, 0xC8	; 200
    3aee:	e9 01       	movw	r28, r18
    3af0:	88 81       	ld	r24, Y
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
    3af2:	eb 01       	movw	r28, r22
    3af4:	88 83       	st	Y, r24
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    3af6:	89 81       	ldd	r24, Y+1	; 0x01
    3af8:	85 fd       	sbrc	r24, 5
    3afa:	07 c0       	rjmp	.+14     	; 0x3b0a <__vector_26+0x80>
    3afc:	21 c0       	rjmp	.+66     	; 0x3b40 <__vector_26+0xb6>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    3afe:	ae e3       	ldi	r26, 0x3E	; 62
    3b00:	b3 e3       	ldi	r27, 0x33	; 51
    3b02:	ea e4       	ldi	r30, 0x4A	; 74
    3b04:	ff e3       	ldi	r31, 0x3F	; 63
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
    3b06:	60 ea       	ldi	r22, 0xA0	; 160
    3b08:	78 e0       	ldi	r23, 0x08	; 8
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    3b0a:	8d 91       	ld	r24, X+
    3b0c:	9c 91       	ld	r25, X
    3b0e:	11 97       	sbiw	r26, 0x01	; 1
    3b10:	20 81       	ld	r18, Z
    3b12:	31 81       	ldd	r19, Z+1	; 0x01
    3b14:	82 17       	cp	r24, r18
    3b16:	93 07       	cpc	r25, r19
    3b18:	40 f0       	brcs	.+16     	; 0x3b2a <__vector_26+0xa0>
		return (uart_head[idx] - uart_tail[idx]);
    3b1a:	8d 91       	ld	r24, X+
    3b1c:	9c 91       	ld	r25, X
    3b1e:	11 97       	sbiw	r26, 0x01	; 1
    3b20:	20 81       	ld	r18, Z
    3b22:	31 81       	ldd	r19, Z+1	; 0x01
    3b24:	82 1b       	sub	r24, r18
    3b26:	93 0b       	sbc	r25, r19
    3b28:	09 c0       	rjmp	.+18     	; 0x3b3c <__vector_26+0xb2>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    3b2a:	8d 91       	ld	r24, X+
    3b2c:	9c 91       	ld	r25, X
    3b2e:	11 97       	sbiw	r26, 0x01	; 1
    3b30:	20 81       	ld	r18, Z
    3b32:	31 81       	ldd	r19, Z+1	; 0x01
    3b34:	80 50       	subi	r24, 0x00	; 0
    3b36:	9c 4f       	sbci	r25, 0xFC	; 252
    3b38:	82 1b       	sub	r24, r18
    3b3a:	93 0b       	sbc	r25, r19
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    3b3c:	00 97       	sbiw	r24, 0x00	; 0
    3b3e:	31 f6       	brne	.-116    	; 0x3acc <__vector_26+0x42>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    3b40:	20 91 3e 33 	lds	r18, 0x333E
    3b44:	30 91 3f 33 	lds	r19, 0x333F
    3b48:	80 91 4a 3f 	lds	r24, 0x3F4A
    3b4c:	90 91 4b 3f 	lds	r25, 0x3F4B
    3b50:	28 17       	cp	r18, r24
    3b52:	39 07       	cpc	r19, r25
    3b54:	58 f0       	brcs	.+22     	; 0x3b6c <__vector_26+0xe2>
		return (uart_head[idx] - uart_tail[idx]);
    3b56:	80 91 3e 33 	lds	r24, 0x333E
    3b5a:	90 91 3f 33 	lds	r25, 0x333F
    3b5e:	20 91 4a 3f 	lds	r18, 0x3F4A
    3b62:	30 91 4b 3f 	lds	r19, 0x3F4B
    3b66:	82 1b       	sub	r24, r18
    3b68:	93 0b       	sbc	r25, r19
    3b6a:	0c c0       	rjmp	.+24     	; 0x3b84 <__vector_26+0xfa>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    3b6c:	80 91 3e 33 	lds	r24, 0x333E
    3b70:	90 91 3f 33 	lds	r25, 0x333F
    3b74:	20 91 4a 3f 	lds	r18, 0x3F4A
    3b78:	30 91 4b 3f 	lds	r19, 0x3F4B
    3b7c:	80 50       	subi	r24, 0x00	; 0
    3b7e:	9c 4f       	sbci	r25, 0xFC	; 252
    3b80:	82 1b       	sub	r24, r18
    3b82:	93 0b       	sbc	r25, r19
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
	}
	//disable the tx outgoing hardware buffer ready interrupt if we have nothing more to put in it.
	if(uart_count(port)>0) uart_txbuffer_enable(port);
    3b84:	00 97       	sbiw	r24, 0x00	; 0
    3b86:	29 f0       	breq	.+10     	; 0x3b92 <__vector_26+0x108>
    3b88:	80 ea       	ldi	r24, 0xA0	; 160
    3b8a:	98 e0       	ldi	r25, 0x08	; 8
    3b8c:	0e 94 98 1c 	call	0x3930	; 0x3930 <uart_txbuffer_enable>
    3b90:	04 c0       	rjmp	.+8      	; 0x3b9a <__vector_26+0x110>
	else uart_txbuffer_disable(port);
    3b92:	80 ea       	ldi	r24, 0xA0	; 160
    3b94:	98 e0       	ldi	r25, 0x08	; 8
    3b96:	0e 94 9d 1c 	call	0x393a	; 0x393a <uart_txbuffer_disable>
//** [PORT SPECIFIC CODE]
//************************************************************************
//************************************************************************

//Must correspond to definitions in uart.h
ISR(USARTC0_DRE_vect) {uart_transmit(&uctrl);}//TX Interrupt
    3b9a:	ff 91       	pop	r31
    3b9c:	ef 91       	pop	r30
    3b9e:	df 91       	pop	r29
    3ba0:	cf 91       	pop	r28
    3ba2:	bf 91       	pop	r27
    3ba4:	af 91       	pop	r26
    3ba6:	9f 91       	pop	r25
    3ba8:	8f 91       	pop	r24
    3baa:	7f 91       	pop	r23
    3bac:	6f 91       	pop	r22
    3bae:	5f 91       	pop	r21
    3bb0:	4f 91       	pop	r20
    3bb2:	3f 91       	pop	r19
    3bb4:	2f 91       	pop	r18
    3bb6:	0f 90       	pop	r0
    3bb8:	0b be       	out	0x3b, r0	; 59
    3bba:	0f 90       	pop	r0
    3bbc:	0a be       	out	0x3a, r0	; 58
    3bbe:	0f 90       	pop	r0
    3bc0:	09 be       	out	0x39, r0	; 57
    3bc2:	0f 90       	pop	r0
    3bc4:	08 be       	out	0x38, r0	; 56
    3bc6:	0f 90       	pop	r0
    3bc8:	0f be       	out	0x3f, r0	; 63
    3bca:	0f 90       	pop	r0
    3bcc:	1f 90       	pop	r1
    3bce:	18 95       	reti

00003bd0 <uart_transmit>:
//==================================

//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
    3bd0:	0f 93       	push	r16
    3bd2:	1f 93       	push	r17
    3bd4:	cf 93       	push	r28
    3bd6:	df 93       	push	r29
    3bd8:	dc 01       	movw	r26, r24
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    3bda:	11 96       	adiw	r26, 0x01	; 1
    3bdc:	8c 91       	ld	r24, X
    3bde:	11 97       	sbiw	r26, 0x01	; 1
    3be0:	85 fd       	sbrc	r24, 5
    3be2:	42 c0       	rjmp	.+132    	; 0x3c68 <uart_transmit+0x98>
    3be4:	91 c0       	rjmp	.+290    	; 0x3d08 <uart_transmit+0x138>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    3be6:	2b e0       	ldi	r18, 0x0B	; 11
    3be8:	a0 3b       	cpi	r26, 0xB0	; 176
    3bea:	b2 07       	cpc	r27, r18
    3bec:	51 f0       	breq	.+20     	; 0x3c02 <uart_transmit+0x32>
	if (port == &uctrl) {return 1;}
    3bee:	38 e0       	ldi	r19, 0x08	; 8
    3bf0:	a0 3a       	cpi	r26, 0xA0	; 160
    3bf2:	b3 07       	cpc	r27, r19
    3bf4:	41 f0       	breq	.+16     	; 0x3c06 <uart_transmit+0x36>
	if (port == &udata) {return 2;}
    3bf6:	88 e0       	ldi	r24, 0x08	; 8
    3bf8:	a0 3b       	cpi	r26, 0xB0	; 176
    3bfa:	b8 07       	cpc	r27, r24
    3bfc:	31 f4       	brne	.+12     	; 0x3c0a <uart_transmit+0x3a>
    3bfe:	22 e0       	ldi	r18, 0x02	; 2
    3c00:	05 c0       	rjmp	.+10     	; 0x3c0c <uart_transmit+0x3c>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    3c02:	20 e0       	ldi	r18, 0x00	; 0
    3c04:	03 c0       	rjmp	.+6      	; 0x3c0c <uart_transmit+0x3c>
	if (port == &uctrl) {return 1;}
    3c06:	21 e0       	ldi	r18, 0x01	; 1
    3c08:	01 c0       	rjmp	.+2      	; 0x3c0c <uart_transmit+0x3c>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    3c0a:	20 e0       	ldi	r18, 0x00	; 0
}

inline uint8_t uart_dequeue(USART_t* port){
	uint8_t idx = port_map(port);
	uint16_t oldtail;
	oldtail = uart_tail[idx];
    3c0c:	30 e0       	ldi	r19, 0x00	; 0
    3c0e:	c9 01       	movw	r24, r18
    3c10:	88 0f       	add	r24, r24
    3c12:	99 1f       	adc	r25, r25
    3c14:	fb 01       	movw	r30, r22
    3c16:	e8 0f       	add	r30, r24
    3c18:	f9 1f       	adc	r31, r25
    3c1a:	40 81       	ld	r20, Z
    3c1c:	51 81       	ldd	r21, Z+1	; 0x01
	uart_tail[idx]++;
    3c1e:	80 81       	ld	r24, Z
    3c20:	91 81       	ldd	r25, Z+1	; 0x01
    3c22:	01 96       	adiw	r24, 0x01	; 1
    3c24:	80 83       	st	Z, r24
    3c26:	91 83       	std	Z+1, r25	; 0x01
	if (uart_tail[idx] >= MAX_BUFFER_LEN){
    3c28:	80 81       	ld	r24, Z
    3c2a:	91 81       	ldd	r25, Z+1	; 0x01
    3c2c:	e4 e0       	ldi	r30, 0x04	; 4
    3c2e:	80 30       	cpi	r24, 0x00	; 0
    3c30:	9e 07       	cpc	r25, r30
    3c32:	40 f0       	brcs	.+16     	; 0x3c44 <uart_transmit+0x74>
		uart_tail[idx] = 0;
    3c34:	c9 01       	movw	r24, r18
    3c36:	88 0f       	add	r24, r24
    3c38:	99 1f       	adc	r25, r25
    3c3a:	86 0f       	add	r24, r22
    3c3c:	97 1f       	adc	r25, r23
    3c3e:	fc 01       	movw	r30, r24
    3c40:	10 82       	st	Z, r1
    3c42:	11 82       	std	Z+1, r1	; 0x01
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    3c44:	c9 01       	movw	r24, r18
    3c46:	98 2f       	mov	r25, r24
    3c48:	88 27       	eor	r24, r24
    3c4a:	99 0f       	add	r25, r25
    3c4c:	99 0f       	add	r25, r25
    3c4e:	84 0f       	add	r24, r20
    3c50:	95 1f       	adc	r25, r21
    3c52:	f8 01       	movw	r30, r16
    3c54:	e8 0f       	add	r30, r24
    3c56:	f9 1f       	adc	r31, r25
    3c58:	80 81       	ld	r24, Z
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
    3c5a:	8c 93       	st	X, r24
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    3c5c:	11 96       	adiw	r26, 0x01	; 1
    3c5e:	8c 91       	ld	r24, X
    3c60:	11 97       	sbiw	r26, 0x01	; 1
    3c62:	85 fd       	sbrc	r24, 5
    3c64:	07 c0       	rjmp	.+14     	; 0x3c74 <uart_transmit+0xa4>
    3c66:	50 c0       	rjmp	.+160    	; 0x3d08 <uart_transmit+0x138>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    3c68:	cc e3       	ldi	r28, 0x3C	; 60
    3c6a:	d3 e3       	ldi	r29, 0x33	; 51
    3c6c:	68 e4       	ldi	r22, 0x48	; 72
    3c6e:	7f e3       	ldi	r23, 0x3F	; 63
		uart_tail[idx] = 0;
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    3c70:	02 e4       	ldi	r16, 0x42	; 66
    3c72:	13 e3       	ldi	r17, 0x33	; 51
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    3c74:	fb e0       	ldi	r31, 0x0B	; 11
    3c76:	a0 3b       	cpi	r26, 0xB0	; 176
    3c78:	bf 07       	cpc	r27, r31
    3c7a:	51 f0       	breq	.+20     	; 0x3c90 <uart_transmit+0xc0>
	if (port == &uctrl) {return 1;}
    3c7c:	28 e0       	ldi	r18, 0x08	; 8
    3c7e:	a0 3a       	cpi	r26, 0xA0	; 160
    3c80:	b2 07       	cpc	r27, r18
    3c82:	41 f0       	breq	.+16     	; 0x3c94 <uart_transmit+0xc4>
	if (port == &udata) {return 2;}
    3c84:	38 e0       	ldi	r19, 0x08	; 8
    3c86:	a0 3b       	cpi	r26, 0xB0	; 176
    3c88:	b3 07       	cpc	r27, r19
    3c8a:	31 f4       	brne	.+12     	; 0x3c98 <uart_transmit+0xc8>
    3c8c:	22 e0       	ldi	r18, 0x02	; 2
    3c8e:	05 c0       	rjmp	.+10     	; 0x3c9a <uart_transmit+0xca>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    3c90:	20 e0       	ldi	r18, 0x00	; 0
    3c92:	03 c0       	rjmp	.+6      	; 0x3c9a <uart_transmit+0xca>
	if (port == &uctrl) {return 1;}
    3c94:	21 e0       	ldi	r18, 0x01	; 1
    3c96:	01 c0       	rjmp	.+2      	; 0x3c9a <uart_transmit+0xca>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    3c98:	20 e0       	ldi	r18, 0x00	; 0
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    3c9a:	30 e0       	ldi	r19, 0x00	; 0
    3c9c:	c9 01       	movw	r24, r18
    3c9e:	88 0f       	add	r24, r24
    3ca0:	99 1f       	adc	r25, r25
    3ca2:	fe 01       	movw	r30, r28
    3ca4:	e8 0f       	add	r30, r24
    3ca6:	f9 1f       	adc	r31, r25
    3ca8:	40 81       	ld	r20, Z
    3caa:	51 81       	ldd	r21, Z+1	; 0x01
    3cac:	fb 01       	movw	r30, r22
    3cae:	e8 0f       	add	r30, r24
    3cb0:	f9 1f       	adc	r31, r25
    3cb2:	80 81       	ld	r24, Z
    3cb4:	91 81       	ldd	r25, Z+1	; 0x01
    3cb6:	48 17       	cp	r20, r24
    3cb8:	59 07       	cpc	r21, r25
    3cba:	88 f0       	brcs	.+34     	; 0x3cde <uart_transmit+0x10e>
		return (uart_head[idx] - uart_tail[idx]);
    3cbc:	22 0f       	add	r18, r18
    3cbe:	33 1f       	adc	r19, r19
    3cc0:	fe 01       	movw	r30, r28
    3cc2:	e2 0f       	add	r30, r18
    3cc4:	f3 1f       	adc	r31, r19
    3cc6:	40 81       	ld	r20, Z
    3cc8:	51 81       	ldd	r21, Z+1	; 0x01
    3cca:	fb 01       	movw	r30, r22
    3ccc:	e2 0f       	add	r30, r18
    3cce:	f3 1f       	adc	r31, r19
    3cd0:	80 81       	ld	r24, Z
    3cd2:	91 81       	ldd	r25, Z+1	; 0x01
    3cd4:	fa 01       	movw	r30, r20
    3cd6:	e8 1b       	sub	r30, r24
    3cd8:	f9 0b       	sbc	r31, r25
    3cda:	cf 01       	movw	r24, r30
    3cdc:	12 c0       	rjmp	.+36     	; 0x3d02 <uart_transmit+0x132>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    3cde:	c9 01       	movw	r24, r18
    3ce0:	88 0f       	add	r24, r24
    3ce2:	99 1f       	adc	r25, r25
    3ce4:	fe 01       	movw	r30, r28
    3ce6:	e8 0f       	add	r30, r24
    3ce8:	f9 1f       	adc	r31, r25
    3cea:	40 81       	ld	r20, Z
    3cec:	51 81       	ldd	r21, Z+1	; 0x01
    3cee:	fb 01       	movw	r30, r22
    3cf0:	e8 0f       	add	r30, r24
    3cf2:	f9 1f       	adc	r31, r25
    3cf4:	20 81       	ld	r18, Z
    3cf6:	31 81       	ldd	r19, Z+1	; 0x01
    3cf8:	ca 01       	movw	r24, r20
    3cfa:	80 50       	subi	r24, 0x00	; 0
    3cfc:	9c 4f       	sbci	r25, 0xFC	; 252
    3cfe:	82 1b       	sub	r24, r18
    3d00:	93 0b       	sbc	r25, r19
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    3d02:	00 97       	sbiw	r24, 0x00	; 0
    3d04:	09 f0       	breq	.+2      	; 0x3d08 <uart_transmit+0x138>
    3d06:	6f cf       	rjmp	.-290    	; 0x3be6 <uart_transmit+0x16>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    3d08:	fb e0       	ldi	r31, 0x0B	; 11
    3d0a:	a0 3b       	cpi	r26, 0xB0	; 176
    3d0c:	bf 07       	cpc	r27, r31
    3d0e:	51 f0       	breq	.+20     	; 0x3d24 <uart_transmit+0x154>
	if (port == &uctrl) {return 1;}
    3d10:	28 e0       	ldi	r18, 0x08	; 8
    3d12:	a0 3a       	cpi	r26, 0xA0	; 160
    3d14:	b2 07       	cpc	r27, r18
    3d16:	41 f0       	breq	.+16     	; 0x3d28 <uart_transmit+0x158>
	if (port == &udata) {return 2;}
    3d18:	38 e0       	ldi	r19, 0x08	; 8
    3d1a:	a0 3b       	cpi	r26, 0xB0	; 176
    3d1c:	b3 07       	cpc	r27, r19
    3d1e:	31 f4       	brne	.+12     	; 0x3d2c <uart_transmit+0x15c>
    3d20:	22 e0       	ldi	r18, 0x02	; 2
    3d22:	05 c0       	rjmp	.+10     	; 0x3d2e <uart_transmit+0x15e>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    3d24:	20 e0       	ldi	r18, 0x00	; 0
    3d26:	03 c0       	rjmp	.+6      	; 0x3d2e <uart_transmit+0x15e>
	if (port == &uctrl) {return 1;}
    3d28:	21 e0       	ldi	r18, 0x01	; 1
    3d2a:	01 c0       	rjmp	.+2      	; 0x3d2e <uart_transmit+0x15e>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    3d2c:	20 e0       	ldi	r18, 0x00	; 0
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    3d2e:	30 e0       	ldi	r19, 0x00	; 0
    3d30:	c9 01       	movw	r24, r18
    3d32:	88 0f       	add	r24, r24
    3d34:	99 1f       	adc	r25, r25
    3d36:	fc 01       	movw	r30, r24
    3d38:	e4 5c       	subi	r30, 0xC4	; 196
    3d3a:	fc 4c       	sbci	r31, 0xCC	; 204
    3d3c:	40 81       	ld	r20, Z
    3d3e:	51 81       	ldd	r21, Z+1	; 0x01
    3d40:	88 5b       	subi	r24, 0xB8	; 184
    3d42:	90 4c       	sbci	r25, 0xC0	; 192
    3d44:	fc 01       	movw	r30, r24
    3d46:	80 81       	ld	r24, Z
    3d48:	91 81       	ldd	r25, Z+1	; 0x01
    3d4a:	48 17       	cp	r20, r24
    3d4c:	59 07       	cpc	r21, r25
    3d4e:	78 f0       	brcs	.+30     	; 0x3d6e <uart_transmit+0x19e>
		return (uart_head[idx] - uart_tail[idx]);
    3d50:	22 0f       	add	r18, r18
    3d52:	33 1f       	adc	r19, r19
    3d54:	f9 01       	movw	r30, r18
    3d56:	e4 5c       	subi	r30, 0xC4	; 196
    3d58:	fc 4c       	sbci	r31, 0xCC	; 204
    3d5a:	40 81       	ld	r20, Z
    3d5c:	51 81       	ldd	r21, Z+1	; 0x01
    3d5e:	28 5b       	subi	r18, 0xB8	; 184
    3d60:	30 4c       	sbci	r19, 0xC0	; 192
    3d62:	f9 01       	movw	r30, r18
    3d64:	80 81       	ld	r24, Z
    3d66:	91 81       	ldd	r25, Z+1	; 0x01
    3d68:	48 1b       	sub	r20, r24
    3d6a:	59 0b       	sbc	r21, r25
    3d6c:	10 c0       	rjmp	.+32     	; 0x3d8e <uart_transmit+0x1be>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    3d6e:	22 0f       	add	r18, r18
    3d70:	33 1f       	adc	r19, r19
    3d72:	f9 01       	movw	r30, r18
    3d74:	e4 5c       	subi	r30, 0xC4	; 196
    3d76:	fc 4c       	sbci	r31, 0xCC	; 204
    3d78:	40 81       	ld	r20, Z
    3d7a:	51 81       	ldd	r21, Z+1	; 0x01
    3d7c:	28 5b       	subi	r18, 0xB8	; 184
    3d7e:	30 4c       	sbci	r19, 0xC0	; 192
    3d80:	f9 01       	movw	r30, r18
    3d82:	80 81       	ld	r24, Z
    3d84:	91 81       	ldd	r25, Z+1	; 0x01
    3d86:	40 50       	subi	r20, 0x00	; 0
    3d88:	5c 4f       	sbci	r21, 0xFC	; 252
    3d8a:	48 1b       	sub	r20, r24
    3d8c:	59 0b       	sbc	r21, r25
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
	}
	//disable the tx outgoing hardware buffer ready interrupt if we have nothing more to put in it.
	if(uart_count(port)>0) uart_txbuffer_enable(port);
    3d8e:	41 15       	cp	r20, r1
    3d90:	51 05       	cpc	r21, r1
    3d92:	21 f0       	breq	.+8      	; 0x3d9c <uart_transmit+0x1cc>
    3d94:	cd 01       	movw	r24, r26
    3d96:	0e 94 98 1c 	call	0x3930	; 0x3930 <uart_txbuffer_enable>
    3d9a:	03 c0       	rjmp	.+6      	; 0x3da2 <uart_transmit+0x1d2>
	else uart_txbuffer_disable(port);
    3d9c:	cd 01       	movw	r24, r26
    3d9e:	0e 94 9d 1c 	call	0x393a	; 0x393a <uart_txbuffer_disable>
}
    3da2:	df 91       	pop	r29
    3da4:	cf 91       	pop	r28
    3da6:	1f 91       	pop	r17
    3da8:	0f 91       	pop	r16
    3daa:	08 95       	ret

00003dac <uart_transmit_lcd>:

void inline uart_transmit_lcd(USART_t* port){
    3dac:	3f 92       	push	r3
    3dae:	4f 92       	push	r4
    3db0:	5f 92       	push	r5
    3db2:	6f 92       	push	r6
    3db4:	7f 92       	push	r7
    3db6:	8f 92       	push	r8
    3db8:	9f 92       	push	r9
    3dba:	af 92       	push	r10
    3dbc:	bf 92       	push	r11
    3dbe:	cf 92       	push	r12
    3dc0:	df 92       	push	r13
    3dc2:	ef 92       	push	r14
    3dc4:	ff 92       	push	r15
    3dc6:	0f 93       	push	r16
    3dc8:	1f 93       	push	r17
    3dca:	cf 93       	push	r28
    3dcc:	df 93       	push	r29
    3dce:	6c 01       	movw	r12, r24
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0) && (lcd_flow_control == LCD_READY)){
    3dd0:	fc 01       	movw	r30, r24
    3dd2:	81 81       	ldd	r24, Z+1	; 0x01
    3dd4:	85 fd       	sbrc	r24, 5
    3dd6:	1d c1       	rjmp	.+570    	; 0x4012 <__stack+0x13>
    3dd8:	8f c1       	rjmp	.+798    	; 0x40f8 <__stack+0xf9>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    3dda:	f0 eb       	ldi	r31, 0xB0	; 176
    3ddc:	cf 16       	cp	r12, r31
    3dde:	fb e0       	ldi	r31, 0x0B	; 11
    3de0:	df 06       	cpc	r13, r31
    3de2:	61 f0       	breq	.+24     	; 0x3dfc <uart_transmit_lcd+0x50>
	if (port == &uctrl) {return 1;}
    3de4:	20 ea       	ldi	r18, 0xA0	; 160
    3de6:	c2 16       	cp	r12, r18
    3de8:	28 e0       	ldi	r18, 0x08	; 8
    3dea:	d2 06       	cpc	r13, r18
    3dec:	49 f0       	breq	.+18     	; 0x3e00 <uart_transmit_lcd+0x54>
	if (port == &udata) {return 2;}
    3dee:	30 eb       	ldi	r19, 0xB0	; 176
    3df0:	c3 16       	cp	r12, r19
    3df2:	38 e0       	ldi	r19, 0x08	; 8
    3df4:	d3 06       	cpc	r13, r19
    3df6:	31 f4       	brne	.+12     	; 0x3e04 <uart_transmit_lcd+0x58>
    3df8:	22 e0       	ldi	r18, 0x02	; 2
    3dfa:	05 c0       	rjmp	.+10     	; 0x3e06 <uart_transmit_lcd+0x5a>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    3dfc:	20 e0       	ldi	r18, 0x00	; 0
    3dfe:	03 c0       	rjmp	.+6      	; 0x3e06 <uart_transmit_lcd+0x5a>
	if (port == &uctrl) {return 1;}
    3e00:	21 e0       	ldi	r18, 0x01	; 1
    3e02:	01 c0       	rjmp	.+2      	; 0x3e06 <uart_transmit_lcd+0x5a>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    3e04:	20 e0       	ldi	r18, 0x00	; 0
}

inline uint8_t uart_dequeue(USART_t* port){
	uint8_t idx = port_map(port);
	uint16_t oldtail;
	oldtail = uart_tail[idx];
    3e06:	30 e0       	ldi	r19, 0x00	; 0
    3e08:	c9 01       	movw	r24, r18
    3e0a:	88 0f       	add	r24, r24
    3e0c:	99 1f       	adc	r25, r25
    3e0e:	f4 01       	movw	r30, r8
    3e10:	e8 0f       	add	r30, r24
    3e12:	f9 1f       	adc	r31, r25
    3e14:	40 81       	ld	r20, Z
    3e16:	51 81       	ldd	r21, Z+1	; 0x01
	uart_tail[idx]++;
    3e18:	80 81       	ld	r24, Z
    3e1a:	91 81       	ldd	r25, Z+1	; 0x01
    3e1c:	01 96       	adiw	r24, 0x01	; 1
    3e1e:	80 83       	st	Z, r24
    3e20:	91 83       	std	Z+1, r25	; 0x01
	if (uart_tail[idx] >= MAX_BUFFER_LEN){
    3e22:	80 81       	ld	r24, Z
    3e24:	91 81       	ldd	r25, Z+1	; 0x01
    3e26:	64 e0       	ldi	r22, 0x04	; 4
    3e28:	80 30       	cpi	r24, 0x00	; 0
    3e2a:	96 07       	cpc	r25, r22
    3e2c:	10 f0       	brcs	.+4      	; 0x3e32 <uart_transmit_lcd+0x86>
		uart_tail[idx] = 0;
    3e2e:	10 82       	st	Z, r1
    3e30:	11 82       	std	Z+1, r1	; 0x01
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    3e32:	c9 01       	movw	r24, r18
    3e34:	98 2f       	mov	r25, r24
    3e36:	88 27       	eor	r24, r24
    3e38:	99 0f       	add	r25, r25
    3e3a:	99 0f       	add	r25, r25
    3e3c:	84 0f       	add	r24, r20
    3e3e:	95 1f       	adc	r25, r21
    3e40:	84 0d       	add	r24, r4
    3e42:	95 1d       	adc	r25, r5
    3e44:	fc 01       	movw	r30, r24
    3e46:	b0 80       	ld	r11, Z
void inline uart_transmit_lcd(USART_t* port){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0) && (lcd_flow_control == LCD_READY)){
		toSend = uart_dequeue(port);
		if (toSend == 0x0D) {lcd_flow_control = LCD_BUSY;}
    3e48:	fd e0       	ldi	r31, 0x0D	; 13
    3e4a:	bf 16       	cp	r11, r31
    3e4c:	11 f4       	brne	.+4      	; 0x3e52 <uart_transmit_lcd+0xa6>
    3e4e:	30 92 24 27 	sts	0x2724, r3
#ifndef UART_DEBUG
	uint8_t idx = port_map(port);
	
	//if (idx==0){uart_enqueue(&uctrl, datain);} //xxx
	
	uart_buffer[idx][uart_head[idx]] = datain;
    3e52:	f8 01       	movw	r30, r16
    3e54:	80 81       	ld	r24, Z
    3e56:	91 81       	ldd	r25, Z+1	; 0x01
    3e58:	8e 5b       	subi	r24, 0xBE	; 190
    3e5a:	94 4c       	sbci	r25, 0xC4	; 196
    3e5c:	fc 01       	movw	r30, r24
    3e5e:	a0 82       	st	Z, r10
	uart_head[idx]++;
    3e60:	f8 01       	movw	r30, r16
    3e62:	80 81       	ld	r24, Z
    3e64:	91 81       	ldd	r25, Z+1	; 0x01
    3e66:	01 96       	adiw	r24, 0x01	; 1
    3e68:	80 83       	st	Z, r24
    3e6a:	91 83       	std	Z+1, r25	; 0x01
	if (uart_head[idx] >= MAX_BUFFER_LEN){
    3e6c:	80 81       	ld	r24, Z
    3e6e:	91 81       	ldd	r25, Z+1	; 0x01
    3e70:	f4 e0       	ldi	r31, 0x04	; 4
    3e72:	80 30       	cpi	r24, 0x00	; 0
    3e74:	9f 07       	cpc	r25, r31
    3e76:	18 f0       	brcs	.+6      	; 0x3e7e <uart_transmit_lcd+0xd2>
		uart_head[idx] = 0;
    3e78:	f8 01       	movw	r30, r16
    3e7a:	10 82       	st	Z, r1
    3e7c:	11 82       	std	Z+1, r1	; 0x01
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    3e7e:	f7 01       	movw	r30, r14
    3e80:	81 81       	ldd	r24, Z+1	; 0x01
    3e82:	85 fd       	sbrc	r24, 5
    3e84:	18 c0       	rjmp	.+48     	; 0x3eb6 <uart_transmit_lcd+0x10a>
    3e86:	31 c0       	rjmp	.+98     	; 0x3eea <uart_transmit_lcd+0x13e>
}

inline uint8_t uart_dequeue(USART_t* port){
	uint8_t idx = port_map(port);
	uint16_t oldtail;
	oldtail = uart_tail[idx];
    3e88:	e8 81       	ld	r30, Y
    3e8a:	f9 81       	ldd	r31, Y+1	; 0x01
	uart_tail[idx]++;
    3e8c:	88 81       	ld	r24, Y
    3e8e:	99 81       	ldd	r25, Y+1	; 0x01
    3e90:	01 96       	adiw	r24, 0x01	; 1
    3e92:	88 83       	st	Y, r24
    3e94:	99 83       	std	Y+1, r25	; 0x01
	if (uart_tail[idx] >= MAX_BUFFER_LEN){
    3e96:	88 81       	ld	r24, Y
    3e98:	99 81       	ldd	r25, Y+1	; 0x01
    3e9a:	24 e0       	ldi	r18, 0x04	; 4
    3e9c:	80 30       	cpi	r24, 0x00	; 0
    3e9e:	92 07       	cpc	r25, r18
    3ea0:	10 f0       	brcs	.+4      	; 0x3ea6 <uart_transmit_lcd+0xfa>
		uart_tail[idx] = 0;
    3ea2:	18 82       	st	Y, r1
    3ea4:	19 82       	std	Y+1, r1	; 0x01
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    3ea6:	ee 5b       	subi	r30, 0xBE	; 190
    3ea8:	f4 4c       	sbci	r31, 0xC4	; 196
    3eaa:	80 81       	ld	r24, Z
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
    3eac:	f7 01       	movw	r30, r14
    3eae:	80 83       	st	Z, r24
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    3eb0:	81 81       	ldd	r24, Z+1	; 0x01
    3eb2:	85 ff       	sbrs	r24, 5
    3eb4:	1a c0       	rjmp	.+52     	; 0x3eea <uart_transmit_lcd+0x13e>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    3eb6:	f8 01       	movw	r30, r16
    3eb8:	80 81       	ld	r24, Z
    3eba:	91 81       	ldd	r25, Z+1	; 0x01
    3ebc:	28 81       	ld	r18, Y
    3ebe:	39 81       	ldd	r19, Y+1	; 0x01
    3ec0:	82 17       	cp	r24, r18
    3ec2:	93 07       	cpc	r25, r19
    3ec4:	38 f0       	brcs	.+14     	; 0x3ed4 <uart_transmit_lcd+0x128>
		return (uart_head[idx] - uart_tail[idx]);
    3ec6:	80 81       	ld	r24, Z
    3ec8:	91 81       	ldd	r25, Z+1	; 0x01
    3eca:	28 81       	ld	r18, Y
    3ecc:	39 81       	ldd	r19, Y+1	; 0x01
    3ece:	82 1b       	sub	r24, r18
    3ed0:	93 0b       	sbc	r25, r19
    3ed2:	09 c0       	rjmp	.+18     	; 0x3ee6 <uart_transmit_lcd+0x13a>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    3ed4:	f8 01       	movw	r30, r16
    3ed6:	80 81       	ld	r24, Z
    3ed8:	91 81       	ldd	r25, Z+1	; 0x01
    3eda:	28 81       	ld	r18, Y
    3edc:	39 81       	ldd	r19, Y+1	; 0x01
    3ede:	80 50       	subi	r24, 0x00	; 0
    3ee0:	9c 4f       	sbci	r25, 0xFC	; 252
    3ee2:	82 1b       	sub	r24, r18
    3ee4:	93 0b       	sbc	r25, r19
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    3ee6:	00 97       	sbiw	r24, 0x00	; 0
    3ee8:	79 f6       	brne	.-98     	; 0x3e88 <uart_transmit_lcd+0xdc>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    3eea:	f8 01       	movw	r30, r16
    3eec:	80 81       	ld	r24, Z
    3eee:	91 81       	ldd	r25, Z+1	; 0x01
    3ef0:	28 81       	ld	r18, Y
    3ef2:	39 81       	ldd	r19, Y+1	; 0x01
    3ef4:	82 17       	cp	r24, r18
    3ef6:	93 07       	cpc	r25, r19
    3ef8:	38 f0       	brcs	.+14     	; 0x3f08 <uart_transmit_lcd+0x15c>
		return (uart_head[idx] - uart_tail[idx]);
    3efa:	80 81       	ld	r24, Z
    3efc:	91 81       	ldd	r25, Z+1	; 0x01
    3efe:	28 81       	ld	r18, Y
    3f00:	39 81       	ldd	r19, Y+1	; 0x01
    3f02:	82 1b       	sub	r24, r18
    3f04:	93 0b       	sbc	r25, r19
    3f06:	09 c0       	rjmp	.+18     	; 0x3f1a <uart_transmit_lcd+0x16e>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    3f08:	f8 01       	movw	r30, r16
    3f0a:	80 81       	ld	r24, Z
    3f0c:	91 81       	ldd	r25, Z+1	; 0x01
    3f0e:	28 81       	ld	r18, Y
    3f10:	39 81       	ldd	r19, Y+1	; 0x01
    3f12:	80 50       	subi	r24, 0x00	; 0
    3f14:	9c 4f       	sbci	r25, 0xFC	; 252
    3f16:	82 1b       	sub	r24, r18
    3f18:	93 0b       	sbc	r25, r19
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
	}
	//disable the tx outgoing hardware buffer ready interrupt if we have nothing more to put in it.
	if(uart_count(port)>0) uart_txbuffer_enable(port);
    3f1a:	00 97       	sbiw	r24, 0x00	; 0
    3f1c:	21 f0       	breq	.+8      	; 0x3f26 <uart_transmit_lcd+0x17a>
    3f1e:	c7 01       	movw	r24, r14
    3f20:	0e 94 98 1c 	call	0x3930	; 0x3930 <uart_txbuffer_enable>
    3f24:	03 c0       	rjmp	.+6      	; 0x3f2c <uart_transmit_lcd+0x180>
	else uart_txbuffer_disable(port);
    3f26:	c7 01       	movw	r24, r14
    3f28:	0e 94 9d 1c 	call	0x393a	; 0x393a <uart_txbuffer_disable>
#ifndef UART_DEBUG
	uint8_t idx = port_map(port);
	
	//if (idx==0){uart_enqueue(&uctrl, datain);} //xxx
	
	uart_buffer[idx][uart_head[idx]] = datain;
    3f2c:	f8 01       	movw	r30, r16
    3f2e:	80 81       	ld	r24, Z
    3f30:	91 81       	ldd	r25, Z+1	; 0x01
    3f32:	8e 5b       	subi	r24, 0xBE	; 190
    3f34:	94 4c       	sbci	r25, 0xC4	; 196
    3f36:	fc 01       	movw	r30, r24
    3f38:	b0 82       	st	Z, r11
	uart_head[idx]++;
    3f3a:	f8 01       	movw	r30, r16
    3f3c:	80 81       	ld	r24, Z
    3f3e:	91 81       	ldd	r25, Z+1	; 0x01
    3f40:	01 96       	adiw	r24, 0x01	; 1
    3f42:	80 83       	st	Z, r24
    3f44:	91 83       	std	Z+1, r25	; 0x01
	if (uart_head[idx] >= MAX_BUFFER_LEN){
    3f46:	80 81       	ld	r24, Z
    3f48:	91 81       	ldd	r25, Z+1	; 0x01
    3f4a:	f4 e0       	ldi	r31, 0x04	; 4
    3f4c:	80 30       	cpi	r24, 0x00	; 0
    3f4e:	9f 07       	cpc	r25, r31
    3f50:	18 f0       	brcs	.+6      	; 0x3f58 <uart_transmit_lcd+0x1ac>
		uart_head[idx] = 0;
    3f52:	f8 01       	movw	r30, r16
    3f54:	10 82       	st	Z, r1
    3f56:	11 82       	std	Z+1, r1	; 0x01
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    3f58:	f7 01       	movw	r30, r14
    3f5a:	81 81       	ldd	r24, Z+1	; 0x01
    3f5c:	85 fd       	sbrc	r24, 5
    3f5e:	18 c0       	rjmp	.+48     	; 0x3f90 <uart_transmit_lcd+0x1e4>
    3f60:	31 c0       	rjmp	.+98     	; 0x3fc4 <uart_transmit_lcd+0x218>
}

inline uint8_t uart_dequeue(USART_t* port){
	uint8_t idx = port_map(port);
	uint16_t oldtail;
	oldtail = uart_tail[idx];
    3f62:	e8 81       	ld	r30, Y
    3f64:	f9 81       	ldd	r31, Y+1	; 0x01
	uart_tail[idx]++;
    3f66:	88 81       	ld	r24, Y
    3f68:	99 81       	ldd	r25, Y+1	; 0x01
    3f6a:	01 96       	adiw	r24, 0x01	; 1
    3f6c:	88 83       	st	Y, r24
    3f6e:	99 83       	std	Y+1, r25	; 0x01
	if (uart_tail[idx] >= MAX_BUFFER_LEN){
    3f70:	88 81       	ld	r24, Y
    3f72:	99 81       	ldd	r25, Y+1	; 0x01
    3f74:	24 e0       	ldi	r18, 0x04	; 4
    3f76:	80 30       	cpi	r24, 0x00	; 0
    3f78:	92 07       	cpc	r25, r18
    3f7a:	10 f0       	brcs	.+4      	; 0x3f80 <uart_transmit_lcd+0x1d4>
		uart_tail[idx] = 0;
    3f7c:	18 82       	st	Y, r1
    3f7e:	19 82       	std	Y+1, r1	; 0x01
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    3f80:	ee 5b       	subi	r30, 0xBE	; 190
    3f82:	f4 4c       	sbci	r31, 0xC4	; 196
    3f84:	80 81       	ld	r24, Z
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
    3f86:	f7 01       	movw	r30, r14
    3f88:	80 83       	st	Z, r24
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    3f8a:	81 81       	ldd	r24, Z+1	; 0x01
    3f8c:	85 ff       	sbrs	r24, 5
    3f8e:	1a c0       	rjmp	.+52     	; 0x3fc4 <uart_transmit_lcd+0x218>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    3f90:	f8 01       	movw	r30, r16
    3f92:	80 81       	ld	r24, Z
    3f94:	91 81       	ldd	r25, Z+1	; 0x01
    3f96:	28 81       	ld	r18, Y
    3f98:	39 81       	ldd	r19, Y+1	; 0x01
    3f9a:	82 17       	cp	r24, r18
    3f9c:	93 07       	cpc	r25, r19
    3f9e:	38 f0       	brcs	.+14     	; 0x3fae <uart_transmit_lcd+0x202>
		return (uart_head[idx] - uart_tail[idx]);
    3fa0:	80 81       	ld	r24, Z
    3fa2:	91 81       	ldd	r25, Z+1	; 0x01
    3fa4:	28 81       	ld	r18, Y
    3fa6:	39 81       	ldd	r19, Y+1	; 0x01
    3fa8:	82 1b       	sub	r24, r18
    3faa:	93 0b       	sbc	r25, r19
    3fac:	09 c0       	rjmp	.+18     	; 0x3fc0 <uart_transmit_lcd+0x214>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    3fae:	f8 01       	movw	r30, r16
    3fb0:	80 81       	ld	r24, Z
    3fb2:	91 81       	ldd	r25, Z+1	; 0x01
    3fb4:	28 81       	ld	r18, Y
    3fb6:	39 81       	ldd	r19, Y+1	; 0x01
    3fb8:	80 50       	subi	r24, 0x00	; 0
    3fba:	9c 4f       	sbci	r25, 0xFC	; 252
    3fbc:	82 1b       	sub	r24, r18
    3fbe:	93 0b       	sbc	r25, r19
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    3fc0:	00 97       	sbiw	r24, 0x00	; 0
    3fc2:	79 f6       	brne	.-98     	; 0x3f62 <uart_transmit_lcd+0x1b6>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    3fc4:	f8 01       	movw	r30, r16
    3fc6:	80 81       	ld	r24, Z
    3fc8:	91 81       	ldd	r25, Z+1	; 0x01
    3fca:	28 81       	ld	r18, Y
    3fcc:	39 81       	ldd	r19, Y+1	; 0x01
    3fce:	82 17       	cp	r24, r18
    3fd0:	93 07       	cpc	r25, r19
    3fd2:	38 f0       	brcs	.+14     	; 0x3fe2 <uart_transmit_lcd+0x236>
		return (uart_head[idx] - uart_tail[idx]);
    3fd4:	80 81       	ld	r24, Z
    3fd6:	91 81       	ldd	r25, Z+1	; 0x01
    3fd8:	28 81       	ld	r18, Y
    3fda:	39 81       	ldd	r19, Y+1	; 0x01
    3fdc:	82 1b       	sub	r24, r18
    3fde:	93 0b       	sbc	r25, r19
    3fe0:	09 c0       	rjmp	.+18     	; 0x3ff4 <uart_transmit_lcd+0x248>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    3fe2:	f8 01       	movw	r30, r16
    3fe4:	80 81       	ld	r24, Z
    3fe6:	91 81       	ldd	r25, Z+1	; 0x01
    3fe8:	28 81       	ld	r18, Y
    3fea:	39 81       	ldd	r19, Y+1	; 0x01
    3fec:	80 50       	subi	r24, 0x00	; 0
    3fee:	9c 4f       	sbci	r25, 0xFC	; 252
    3ff0:	82 1b       	sub	r24, r18
    3ff2:	93 0b       	sbc	r25, r19
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
	}
	//disable the tx outgoing hardware buffer ready interrupt if we have nothing more to put in it.
	if(uart_count(port)>0) uart_txbuffer_enable(port);
    3ff4:	00 97       	sbiw	r24, 0x00	; 0
    3ff6:	21 f0       	breq	.+8      	; 0x4000 <__stack+0x1>
    3ff8:	c7 01       	movw	r24, r14
    3ffa:	0e 94 98 1c 	call	0x3930	; 0x3930 <uart_txbuffer_enable>
    3ffe:	03 c0       	rjmp	.+6      	; 0x4006 <__stack+0x7>
	else uart_txbuffer_disable(port);
    4000:	c7 01       	movw	r24, r14
    4002:	0e 94 9d 1c 	call	0x393a	; 0x393a <uart_txbuffer_disable>
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0) && (lcd_flow_control == LCD_READY)){
		toSend = uart_dequeue(port);
		if (toSend == 0x0D) {lcd_flow_control = LCD_BUSY;}
		uart_enqueue(&udata, '`'); //xxx - echo to data port
		uart_enqueue(&udata, toSend); //xxx - echo to data port
		port->DATA = toSend;
    4006:	f6 01       	movw	r30, r12
    4008:	b0 82       	st	Z, r11
}

void inline uart_transmit_lcd(USART_t* port){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0) && (lcd_flow_control == LCD_READY)){
    400a:	81 81       	ldd	r24, Z+1	; 0x01
    400c:	85 fd       	sbrc	r24, 5
    400e:	25 c0       	rjmp	.+74     	; 0x405a <__stack+0x5b>
    4010:	73 c0       	rjmp	.+230    	; 0x40f8 <__stack+0xf9>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    4012:	0f 2e       	mov	r0, r31
    4014:	fc e3       	ldi	r31, 0x3C	; 60
    4016:	6f 2e       	mov	r6, r31
    4018:	f3 e3       	ldi	r31, 0x33	; 51
    401a:	7f 2e       	mov	r7, r31
    401c:	f0 2d       	mov	r31, r0
    401e:	0f 2e       	mov	r0, r31
    4020:	f8 e4       	ldi	r31, 0x48	; 72
    4022:	8f 2e       	mov	r8, r31
    4024:	ff e3       	ldi	r31, 0x3F	; 63
    4026:	9f 2e       	mov	r9, r31
    4028:	f0 2d       	mov	r31, r0
		uart_tail[idx] = 0;
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    402a:	0f 2e       	mov	r0, r31
    402c:	f2 e4       	ldi	r31, 0x42	; 66
    402e:	4f 2e       	mov	r4, r31
    4030:	f3 e3       	ldi	r31, 0x33	; 51
    4032:	5f 2e       	mov	r5, r31
    4034:	f0 2d       	mov	r31, r0
void inline uart_transmit_lcd(USART_t* port){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0) && (lcd_flow_control == LCD_READY)){
		toSend = uart_dequeue(port);
		if (toSend == 0x0D) {lcd_flow_control = LCD_BUSY;}
    4036:	0f 2e       	mov	r0, r31
    4038:	fe e4       	ldi	r31, 0x4E	; 78
    403a:	3f 2e       	mov	r3, r31
    403c:	f0 2d       	mov	r31, r0
#ifndef UART_DEBUG
	uint8_t idx = port_map(port);
	
	//if (idx==0){uart_enqueue(&uctrl, datain);} //xxx
	
	uart_buffer[idx][uart_head[idx]] = datain;
    403e:	00 e4       	ldi	r16, 0x40	; 64
    4040:	13 e3       	ldi	r17, 0x33	; 51
    4042:	0f 2e       	mov	r0, r31
    4044:	f0 e6       	ldi	r31, 0x60	; 96
    4046:	af 2e       	mov	r10, r31
    4048:	f0 2d       	mov	r31, r0
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    404a:	0f 2e       	mov	r0, r31
    404c:	f0 eb       	ldi	r31, 0xB0	; 176
    404e:	ef 2e       	mov	r14, r31
    4050:	f8 e0       	ldi	r31, 0x08	; 8
    4052:	ff 2e       	mov	r15, r31
    4054:	f0 2d       	mov	r31, r0
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    4056:	cc e4       	ldi	r28, 0x4C	; 76
    4058:	df e3       	ldi	r29, 0x3F	; 63
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    405a:	f0 eb       	ldi	r31, 0xB0	; 176
    405c:	cf 16       	cp	r12, r31
    405e:	fb e0       	ldi	r31, 0x0B	; 11
    4060:	df 06       	cpc	r13, r31
    4062:	61 f0       	breq	.+24     	; 0x407c <__stack+0x7d>
	if (port == &uctrl) {return 1;}
    4064:	20 ea       	ldi	r18, 0xA0	; 160
    4066:	c2 16       	cp	r12, r18
    4068:	28 e0       	ldi	r18, 0x08	; 8
    406a:	d2 06       	cpc	r13, r18
    406c:	49 f0       	breq	.+18     	; 0x4080 <__stack+0x81>
	if (port == &udata) {return 2;}
    406e:	30 eb       	ldi	r19, 0xB0	; 176
    4070:	c3 16       	cp	r12, r19
    4072:	38 e0       	ldi	r19, 0x08	; 8
    4074:	d3 06       	cpc	r13, r19
    4076:	31 f4       	brne	.+12     	; 0x4084 <__stack+0x85>
    4078:	22 e0       	ldi	r18, 0x02	; 2
    407a:	05 c0       	rjmp	.+10     	; 0x4086 <__stack+0x87>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    407c:	20 e0       	ldi	r18, 0x00	; 0
    407e:	03 c0       	rjmp	.+6      	; 0x4086 <__stack+0x87>
	if (port == &uctrl) {return 1;}
    4080:	21 e0       	ldi	r18, 0x01	; 1
    4082:	01 c0       	rjmp	.+2      	; 0x4086 <__stack+0x87>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    4084:	20 e0       	ldi	r18, 0x00	; 0
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    4086:	30 e0       	ldi	r19, 0x00	; 0
    4088:	c9 01       	movw	r24, r18
    408a:	88 0f       	add	r24, r24
    408c:	99 1f       	adc	r25, r25
    408e:	f3 01       	movw	r30, r6
    4090:	e8 0f       	add	r30, r24
    4092:	f9 1f       	adc	r31, r25
    4094:	40 81       	ld	r20, Z
    4096:	51 81       	ldd	r21, Z+1	; 0x01
    4098:	f4 01       	movw	r30, r8
    409a:	e8 0f       	add	r30, r24
    409c:	f9 1f       	adc	r31, r25
    409e:	80 81       	ld	r24, Z
    40a0:	91 81       	ldd	r25, Z+1	; 0x01
    40a2:	48 17       	cp	r20, r24
    40a4:	59 07       	cpc	r21, r25
    40a6:	88 f0       	brcs	.+34     	; 0x40ca <__stack+0xcb>
		return (uart_head[idx] - uart_tail[idx]);
    40a8:	22 0f       	add	r18, r18
    40aa:	33 1f       	adc	r19, r19
    40ac:	f3 01       	movw	r30, r6
    40ae:	e2 0f       	add	r30, r18
    40b0:	f3 1f       	adc	r31, r19
    40b2:	40 81       	ld	r20, Z
    40b4:	51 81       	ldd	r21, Z+1	; 0x01
    40b6:	f4 01       	movw	r30, r8
    40b8:	e2 0f       	add	r30, r18
    40ba:	f3 1f       	adc	r31, r19
    40bc:	80 81       	ld	r24, Z
    40be:	91 81       	ldd	r25, Z+1	; 0x01
    40c0:	fa 01       	movw	r30, r20
    40c2:	e8 1b       	sub	r30, r24
    40c4:	f9 0b       	sbc	r31, r25
    40c6:	cf 01       	movw	r24, r30
    40c8:	10 c0       	rjmp	.+32     	; 0x40ea <__stack+0xeb>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    40ca:	22 0f       	add	r18, r18
    40cc:	33 1f       	adc	r19, r19
    40ce:	f3 01       	movw	r30, r6
    40d0:	e2 0f       	add	r30, r18
    40d2:	f3 1f       	adc	r31, r19
    40d4:	80 81       	ld	r24, Z
    40d6:	91 81       	ldd	r25, Z+1	; 0x01
    40d8:	f4 01       	movw	r30, r8
    40da:	e2 0f       	add	r30, r18
    40dc:	f3 1f       	adc	r31, r19
    40de:	20 81       	ld	r18, Z
    40e0:	31 81       	ldd	r19, Z+1	; 0x01
    40e2:	80 50       	subi	r24, 0x00	; 0
    40e4:	9c 4f       	sbci	r25, 0xFC	; 252
    40e6:	82 1b       	sub	r24, r18
    40e8:	93 0b       	sbc	r25, r19
}

void inline uart_transmit_lcd(USART_t* port){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0) && (lcd_flow_control == LCD_READY)){
    40ea:	00 97       	sbiw	r24, 0x00	; 0
    40ec:	29 f0       	breq	.+10     	; 0x40f8 <__stack+0xf9>
    40ee:	80 91 24 27 	lds	r24, 0x2724
    40f2:	82 35       	cpi	r24, 0x52	; 82
    40f4:	09 f4       	brne	.+2      	; 0x40f8 <__stack+0xf9>
    40f6:	71 ce       	rjmp	.-798    	; 0x3dda <uart_transmit_lcd+0x2e>
		if (toSend == 0x0D) {lcd_flow_control = LCD_BUSY;}
		uart_enqueue(&udata, '`'); //xxx - echo to data port
		uart_enqueue(&udata, toSend); //xxx - echo to data port
		port->DATA = toSend;
	}
	uart_txbuffer_disable(port); //implemented this way to prevent periodic stalls that happen when uart_txbuffer isn't disabled quickly enough
    40f8:	c6 01       	movw	r24, r12
    40fa:	0e 94 9d 1c 	call	0x393a	; 0x393a <uart_txbuffer_disable>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    40fe:	f0 eb       	ldi	r31, 0xB0	; 176
    4100:	cf 16       	cp	r12, r31
    4102:	fb e0       	ldi	r31, 0x0B	; 11
    4104:	df 06       	cpc	r13, r31
    4106:	61 f0       	breq	.+24     	; 0x4120 <__stack+0x121>
	if (port == &uctrl) {return 1;}
    4108:	20 ea       	ldi	r18, 0xA0	; 160
    410a:	c2 16       	cp	r12, r18
    410c:	28 e0       	ldi	r18, 0x08	; 8
    410e:	d2 06       	cpc	r13, r18
    4110:	49 f0       	breq	.+18     	; 0x4124 <__stack+0x125>
	if (port == &udata) {return 2;}
    4112:	30 eb       	ldi	r19, 0xB0	; 176
    4114:	c3 16       	cp	r12, r19
    4116:	38 e0       	ldi	r19, 0x08	; 8
    4118:	d3 06       	cpc	r13, r19
    411a:	31 f4       	brne	.+12     	; 0x4128 <__stack+0x129>
    411c:	22 e0       	ldi	r18, 0x02	; 2
    411e:	05 c0       	rjmp	.+10     	; 0x412a <__stack+0x12b>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    4120:	20 e0       	ldi	r18, 0x00	; 0
    4122:	03 c0       	rjmp	.+6      	; 0x412a <__stack+0x12b>
	if (port == &uctrl) {return 1;}
    4124:	21 e0       	ldi	r18, 0x01	; 1
    4126:	01 c0       	rjmp	.+2      	; 0x412a <__stack+0x12b>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    4128:	20 e0       	ldi	r18, 0x00	; 0
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    412a:	30 e0       	ldi	r19, 0x00	; 0
    412c:	c9 01       	movw	r24, r18
    412e:	88 0f       	add	r24, r24
    4130:	99 1f       	adc	r25, r25
    4132:	fc 01       	movw	r30, r24
    4134:	e4 5c       	subi	r30, 0xC4	; 196
    4136:	fc 4c       	sbci	r31, 0xCC	; 204
    4138:	40 81       	ld	r20, Z
    413a:	51 81       	ldd	r21, Z+1	; 0x01
    413c:	88 5b       	subi	r24, 0xB8	; 184
    413e:	90 4c       	sbci	r25, 0xC0	; 192
    4140:	fc 01       	movw	r30, r24
    4142:	80 81       	ld	r24, Z
    4144:	91 81       	ldd	r25, Z+1	; 0x01
    4146:	48 17       	cp	r20, r24
    4148:	59 07       	cpc	r21, r25
    414a:	78 f0       	brcs	.+30     	; 0x416a <__stack+0x16b>
		return (uart_head[idx] - uart_tail[idx]);
    414c:	22 0f       	add	r18, r18
    414e:	33 1f       	adc	r19, r19
    4150:	f9 01       	movw	r30, r18
    4152:	e4 5c       	subi	r30, 0xC4	; 196
    4154:	fc 4c       	sbci	r31, 0xCC	; 204
    4156:	80 81       	ld	r24, Z
    4158:	91 81       	ldd	r25, Z+1	; 0x01
    415a:	28 5b       	subi	r18, 0xB8	; 184
    415c:	30 4c       	sbci	r19, 0xC0	; 192
    415e:	f9 01       	movw	r30, r18
    4160:	20 81       	ld	r18, Z
    4162:	31 81       	ldd	r19, Z+1	; 0x01
    4164:	82 1b       	sub	r24, r18
    4166:	93 0b       	sbc	r25, r19
    4168:	12 c0       	rjmp	.+36     	; 0x418e <__stack+0x18f>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    416a:	22 0f       	add	r18, r18
    416c:	33 1f       	adc	r19, r19
    416e:	f9 01       	movw	r30, r18
    4170:	e4 5c       	subi	r30, 0xC4	; 196
    4172:	fc 4c       	sbci	r31, 0xCC	; 204
    4174:	40 81       	ld	r20, Z
    4176:	51 81       	ldd	r21, Z+1	; 0x01
    4178:	28 5b       	subi	r18, 0xB8	; 184
    417a:	30 4c       	sbci	r19, 0xC0	; 192
    417c:	f9 01       	movw	r30, r18
    417e:	80 81       	ld	r24, Z
    4180:	91 81       	ldd	r25, Z+1	; 0x01
    4182:	40 50       	subi	r20, 0x00	; 0
    4184:	5c 4f       	sbci	r21, 0xFC	; 252
    4186:	9a 01       	movw	r18, r20
    4188:	28 1b       	sub	r18, r24
    418a:	39 0b       	sbc	r19, r25
    418c:	c9 01       	movw	r24, r18
		uart_enqueue(&udata, '`'); //xxx - echo to data port
		uart_enqueue(&udata, toSend); //xxx - echo to data port
		port->DATA = toSend;
	}
	uart_txbuffer_disable(port); //implemented this way to prevent periodic stalls that happen when uart_txbuffer isn't disabled quickly enough
	if ((uart_count(port)>0) && (lcd_flow_control == LCD_READY)){ //...something is waiting to go out
    418e:	00 97       	sbiw	r24, 0x00	; 0
    4190:	39 f0       	breq	.+14     	; 0x41a0 <__stack+0x1a1>
    4192:	80 91 24 27 	lds	r24, 0x2724
    4196:	82 35       	cpi	r24, 0x52	; 82
    4198:	19 f4       	brne	.+6      	; 0x41a0 <__stack+0x1a1>
		uart_txbuffer_enable(port);	
    419a:	c6 01       	movw	r24, r12
    419c:	0e 94 98 1c 	call	0x3930	; 0x3930 <uart_txbuffer_enable>
	}	
}
    41a0:	df 91       	pop	r29
    41a2:	cf 91       	pop	r28
    41a4:	1f 91       	pop	r17
    41a6:	0f 91       	pop	r16
    41a8:	ff 90       	pop	r15
    41aa:	ef 90       	pop	r14
    41ac:	df 90       	pop	r13
    41ae:	cf 90       	pop	r12
    41b0:	bf 90       	pop	r11
    41b2:	af 90       	pop	r10
    41b4:	9f 90       	pop	r9
    41b6:	8f 90       	pop	r8
    41b8:	7f 90       	pop	r7
    41ba:	6f 90       	pop	r6
    41bc:	5f 90       	pop	r5
    41be:	4f 90       	pop	r4
    41c0:	3f 90       	pop	r3
    41c2:	08 95       	ret

000041c4 <__vector_123>:
//Must correspond to definitions in uart.h
ISR(USARTC0_DRE_vect) {uart_transmit(&uctrl);}//TX Interrupt
ISR(USARTC0_RXC_vect) {uart_receive(&uctrl);} //RX Interrupt
ISR(USARTC1_DRE_vect) {uart_transmit(&udata);}//TX Interrupt
ISR(USARTC1_RXC_vect) {uart_receive(&udata);} //RX Interrupt
ISR(USARTF1_DRE_vect) {uart_transmit_lcd(&ulcd);}//TX Interrupt
    41c4:	1f 92       	push	r1
    41c6:	0f 92       	push	r0
    41c8:	0f b6       	in	r0, 0x3f	; 63
    41ca:	0f 92       	push	r0
    41cc:	08 b6       	in	r0, 0x38	; 56
    41ce:	0f 92       	push	r0
    41d0:	09 b6       	in	r0, 0x39	; 57
    41d2:	0f 92       	push	r0
    41d4:	0a b6       	in	r0, 0x3a	; 58
    41d6:	0f 92       	push	r0
    41d8:	0b b6       	in	r0, 0x3b	; 59
    41da:	0f 92       	push	r0
    41dc:	11 24       	eor	r1, r1
    41de:	3f 92       	push	r3
    41e0:	4f 92       	push	r4
    41e2:	5f 92       	push	r5
    41e4:	6f 92       	push	r6
    41e6:	7f 92       	push	r7
    41e8:	8f 92       	push	r8
    41ea:	9f 92       	push	r9
    41ec:	af 92       	push	r10
    41ee:	bf 92       	push	r11
    41f0:	cf 92       	push	r12
    41f2:	df 92       	push	r13
    41f4:	ef 92       	push	r14
    41f6:	ff 92       	push	r15
    41f8:	0f 93       	push	r16
    41fa:	1f 93       	push	r17
    41fc:	2f 93       	push	r18
    41fe:	3f 93       	push	r19
    4200:	4f 93       	push	r20
    4202:	5f 93       	push	r21
    4204:	6f 93       	push	r22
    4206:	7f 93       	push	r23
    4208:	8f 93       	push	r24
    420a:	9f 93       	push	r25
    420c:	af 93       	push	r26
    420e:	bf 93       	push	r27
    4210:	cf 93       	push	r28
    4212:	df 93       	push	r29
    4214:	ef 93       	push	r30
    4216:	ff 93       	push	r31
}

void inline uart_transmit_lcd(USART_t* port){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0) && (lcd_flow_control == LCD_READY)){
    4218:	e0 eb       	ldi	r30, 0xB0	; 176
    421a:	fb e0       	ldi	r31, 0x0B	; 11
    421c:	81 81       	ldd	r24, Z+1	; 0x01
    421e:	85 fd       	sbrc	r24, 5
    4220:	fb c0       	rjmp	.+502    	; 0x4418 <__vector_123+0x254>
    4222:	48 c1       	rjmp	.+656    	; 0x44b4 <__vector_123+0x2f0>
}

inline uint8_t uart_dequeue(USART_t* port){
	uint8_t idx = port_map(port);
	uint16_t oldtail;
	oldtail = uart_tail[idx];
    4224:	d6 01       	movw	r26, r12
    4226:	ed 91       	ld	r30, X+
    4228:	fc 91       	ld	r31, X
    422a:	11 97       	sbiw	r26, 0x01	; 1
	uart_tail[idx]++;
    422c:	8d 91       	ld	r24, X+
    422e:	9c 91       	ld	r25, X
    4230:	11 97       	sbiw	r26, 0x01	; 1
    4232:	01 96       	adiw	r24, 0x01	; 1
    4234:	8d 93       	st	X+, r24
    4236:	9c 93       	st	X, r25
    4238:	11 97       	sbiw	r26, 0x01	; 1
	if (uart_tail[idx] >= MAX_BUFFER_LEN){
    423a:	8d 91       	ld	r24, X+
    423c:	9c 91       	ld	r25, X
    423e:	11 97       	sbiw	r26, 0x01	; 1
    4240:	b4 e0       	ldi	r27, 0x04	; 4
    4242:	80 30       	cpi	r24, 0x00	; 0
    4244:	9b 07       	cpc	r25, r27
    4246:	20 f0       	brcs	.+8      	; 0x4250 <__vector_123+0x8c>
		uart_tail[idx] = 0;
    4248:	d6 01       	movw	r26, r12
    424a:	1d 92       	st	X+, r1
    424c:	1c 92       	st	X, r1
    424e:	11 97       	sbiw	r26, 0x01	; 1
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    4250:	e4 0d       	add	r30, r4
    4252:	f5 1d       	adc	r31, r5
    4254:	b0 80       	ld	r11, Z
void inline uart_transmit_lcd(USART_t* port){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0) && (lcd_flow_control == LCD_READY)){
		toSend = uart_dequeue(port);
		if (toSend == 0x0D) {lcd_flow_control = LCD_BUSY;}
    4256:	bd e0       	ldi	r27, 0x0D	; 13
    4258:	bb 16       	cp	r11, r27
    425a:	11 f4       	brne	.+4      	; 0x4260 <__vector_123+0x9c>
    425c:	30 92 24 27 	sts	0x2724, r3
#ifndef UART_DEBUG
	uint8_t idx = port_map(port);
	
	//if (idx==0){uart_enqueue(&uctrl, datain);} //xxx
	
	uart_buffer[idx][uart_head[idx]] = datain;
    4260:	f8 01       	movw	r30, r16
    4262:	80 81       	ld	r24, Z
    4264:	91 81       	ldd	r25, Z+1	; 0x01
    4266:	8e 5b       	subi	r24, 0xBE	; 190
    4268:	94 4c       	sbci	r25, 0xC4	; 196
    426a:	dc 01       	movw	r26, r24
    426c:	ac 92       	st	X, r10
	uart_head[idx]++;
    426e:	80 81       	ld	r24, Z
    4270:	91 81       	ldd	r25, Z+1	; 0x01
    4272:	01 96       	adiw	r24, 0x01	; 1
    4274:	80 83       	st	Z, r24
    4276:	91 83       	std	Z+1, r25	; 0x01
	if (uart_head[idx] >= MAX_BUFFER_LEN){
    4278:	80 81       	ld	r24, Z
    427a:	91 81       	ldd	r25, Z+1	; 0x01
    427c:	b4 e0       	ldi	r27, 0x04	; 4
    427e:	80 30       	cpi	r24, 0x00	; 0
    4280:	9b 07       	cpc	r25, r27
    4282:	10 f0       	brcs	.+4      	; 0x4288 <__vector_123+0xc4>
		uart_head[idx] = 0;
    4284:	10 82       	st	Z, r1
    4286:	11 82       	std	Z+1, r1	; 0x01
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    4288:	f7 01       	movw	r30, r14
    428a:	81 81       	ldd	r24, Z+1	; 0x01
    428c:	85 fd       	sbrc	r24, 5
    428e:	1a c0       	rjmp	.+52     	; 0x42c4 <__vector_123+0x100>
    4290:	32 c0       	rjmp	.+100    	; 0x42f6 <__vector_123+0x132>
}

inline uint8_t uart_dequeue(USART_t* port){
	uint8_t idx = port_map(port);
	uint16_t oldtail;
	oldtail = uart_tail[idx];
    4292:	e8 81       	ld	r30, Y
    4294:	f9 81       	ldd	r31, Y+1	; 0x01
	uart_tail[idx]++;
    4296:	88 81       	ld	r24, Y
    4298:	99 81       	ldd	r25, Y+1	; 0x01
    429a:	01 96       	adiw	r24, 0x01	; 1
    429c:	88 83       	st	Y, r24
    429e:	99 83       	std	Y+1, r25	; 0x01
	if (uart_tail[idx] >= MAX_BUFFER_LEN){
    42a0:	88 81       	ld	r24, Y
    42a2:	99 81       	ldd	r25, Y+1	; 0x01
    42a4:	24 e0       	ldi	r18, 0x04	; 4
    42a6:	80 30       	cpi	r24, 0x00	; 0
    42a8:	92 07       	cpc	r25, r18
    42aa:	10 f0       	brcs	.+4      	; 0x42b0 <__vector_123+0xec>
		uart_tail[idx] = 0;
    42ac:	18 82       	st	Y, r1
    42ae:	19 82       	std	Y+1, r1	; 0x01
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    42b0:	ee 5b       	subi	r30, 0xBE	; 190
    42b2:	f4 4c       	sbci	r31, 0xC4	; 196
    42b4:	80 81       	ld	r24, Z
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
    42b6:	d7 01       	movw	r26, r14
    42b8:	8c 93       	st	X, r24
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    42ba:	11 96       	adiw	r26, 0x01	; 1
    42bc:	8c 91       	ld	r24, X
    42be:	11 97       	sbiw	r26, 0x01	; 1
    42c0:	85 ff       	sbrs	r24, 5
    42c2:	19 c0       	rjmp	.+50     	; 0x42f6 <__vector_123+0x132>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    42c4:	f8 01       	movw	r30, r16
    42c6:	80 81       	ld	r24, Z
    42c8:	91 81       	ldd	r25, Z+1	; 0x01
    42ca:	28 81       	ld	r18, Y
    42cc:	39 81       	ldd	r19, Y+1	; 0x01
    42ce:	82 17       	cp	r24, r18
    42d0:	93 07       	cpc	r25, r19
    42d2:	38 f0       	brcs	.+14     	; 0x42e2 <__vector_123+0x11e>
		return (uart_head[idx] - uart_tail[idx]);
    42d4:	80 81       	ld	r24, Z
    42d6:	91 81       	ldd	r25, Z+1	; 0x01
    42d8:	28 81       	ld	r18, Y
    42da:	39 81       	ldd	r19, Y+1	; 0x01
    42dc:	82 1b       	sub	r24, r18
    42de:	93 0b       	sbc	r25, r19
    42e0:	08 c0       	rjmp	.+16     	; 0x42f2 <__vector_123+0x12e>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    42e2:	80 81       	ld	r24, Z
    42e4:	91 81       	ldd	r25, Z+1	; 0x01
    42e6:	28 81       	ld	r18, Y
    42e8:	39 81       	ldd	r19, Y+1	; 0x01
    42ea:	80 50       	subi	r24, 0x00	; 0
    42ec:	9c 4f       	sbci	r25, 0xFC	; 252
    42ee:	82 1b       	sub	r24, r18
    42f0:	93 0b       	sbc	r25, r19
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    42f2:	00 97       	sbiw	r24, 0x00	; 0
    42f4:	71 f6       	brne	.-100    	; 0x4292 <__vector_123+0xce>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    42f6:	f8 01       	movw	r30, r16
    42f8:	80 81       	ld	r24, Z
    42fa:	91 81       	ldd	r25, Z+1	; 0x01
    42fc:	28 81       	ld	r18, Y
    42fe:	39 81       	ldd	r19, Y+1	; 0x01
    4300:	82 17       	cp	r24, r18
    4302:	93 07       	cpc	r25, r19
    4304:	38 f0       	brcs	.+14     	; 0x4314 <__vector_123+0x150>
		return (uart_head[idx] - uart_tail[idx]);
    4306:	80 81       	ld	r24, Z
    4308:	91 81       	ldd	r25, Z+1	; 0x01
    430a:	28 81       	ld	r18, Y
    430c:	39 81       	ldd	r19, Y+1	; 0x01
    430e:	82 1b       	sub	r24, r18
    4310:	93 0b       	sbc	r25, r19
    4312:	08 c0       	rjmp	.+16     	; 0x4324 <__vector_123+0x160>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    4314:	80 81       	ld	r24, Z
    4316:	91 81       	ldd	r25, Z+1	; 0x01
    4318:	28 81       	ld	r18, Y
    431a:	39 81       	ldd	r19, Y+1	; 0x01
    431c:	80 50       	subi	r24, 0x00	; 0
    431e:	9c 4f       	sbci	r25, 0xFC	; 252
    4320:	82 1b       	sub	r24, r18
    4322:	93 0b       	sbc	r25, r19
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
	}
	//disable the tx outgoing hardware buffer ready interrupt if we have nothing more to put in it.
	if(uart_count(port)>0) uart_txbuffer_enable(port);
    4324:	00 97       	sbiw	r24, 0x00	; 0
    4326:	21 f0       	breq	.+8      	; 0x4330 <__vector_123+0x16c>
    4328:	c7 01       	movw	r24, r14
    432a:	0e 94 98 1c 	call	0x3930	; 0x3930 <uart_txbuffer_enable>
    432e:	03 c0       	rjmp	.+6      	; 0x4336 <__vector_123+0x172>
	else uart_txbuffer_disable(port);
    4330:	c7 01       	movw	r24, r14
    4332:	0e 94 9d 1c 	call	0x393a	; 0x393a <uart_txbuffer_disable>
#ifndef UART_DEBUG
	uint8_t idx = port_map(port);
	
	//if (idx==0){uart_enqueue(&uctrl, datain);} //xxx
	
	uart_buffer[idx][uart_head[idx]] = datain;
    4336:	f8 01       	movw	r30, r16
    4338:	80 81       	ld	r24, Z
    433a:	91 81       	ldd	r25, Z+1	; 0x01
    433c:	8e 5b       	subi	r24, 0xBE	; 190
    433e:	94 4c       	sbci	r25, 0xC4	; 196
    4340:	dc 01       	movw	r26, r24
    4342:	bc 92       	st	X, r11
	uart_head[idx]++;
    4344:	80 81       	ld	r24, Z
    4346:	91 81       	ldd	r25, Z+1	; 0x01
    4348:	01 96       	adiw	r24, 0x01	; 1
    434a:	80 83       	st	Z, r24
    434c:	91 83       	std	Z+1, r25	; 0x01
	if (uart_head[idx] >= MAX_BUFFER_LEN){
    434e:	80 81       	ld	r24, Z
    4350:	91 81       	ldd	r25, Z+1	; 0x01
    4352:	b4 e0       	ldi	r27, 0x04	; 4
    4354:	80 30       	cpi	r24, 0x00	; 0
    4356:	9b 07       	cpc	r25, r27
    4358:	10 f0       	brcs	.+4      	; 0x435e <__vector_123+0x19a>
		uart_head[idx] = 0;
    435a:	10 82       	st	Z, r1
    435c:	11 82       	std	Z+1, r1	; 0x01
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    435e:	f7 01       	movw	r30, r14
    4360:	81 81       	ldd	r24, Z+1	; 0x01
    4362:	85 fd       	sbrc	r24, 5
    4364:	1a c0       	rjmp	.+52     	; 0x439a <__vector_123+0x1d6>
    4366:	32 c0       	rjmp	.+100    	; 0x43cc <__vector_123+0x208>
}

inline uint8_t uart_dequeue(USART_t* port){
	uint8_t idx = port_map(port);
	uint16_t oldtail;
	oldtail = uart_tail[idx];
    4368:	e8 81       	ld	r30, Y
    436a:	f9 81       	ldd	r31, Y+1	; 0x01
	uart_tail[idx]++;
    436c:	88 81       	ld	r24, Y
    436e:	99 81       	ldd	r25, Y+1	; 0x01
    4370:	01 96       	adiw	r24, 0x01	; 1
    4372:	88 83       	st	Y, r24
    4374:	99 83       	std	Y+1, r25	; 0x01
	if (uart_tail[idx] >= MAX_BUFFER_LEN){
    4376:	88 81       	ld	r24, Y
    4378:	99 81       	ldd	r25, Y+1	; 0x01
    437a:	24 e0       	ldi	r18, 0x04	; 4
    437c:	80 30       	cpi	r24, 0x00	; 0
    437e:	92 07       	cpc	r25, r18
    4380:	10 f0       	brcs	.+4      	; 0x4386 <__vector_123+0x1c2>
		uart_tail[idx] = 0;
    4382:	18 82       	st	Y, r1
    4384:	19 82       	std	Y+1, r1	; 0x01
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    4386:	ee 5b       	subi	r30, 0xBE	; 190
    4388:	f4 4c       	sbci	r31, 0xC4	; 196
    438a:	80 81       	ld	r24, Z
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
    438c:	d7 01       	movw	r26, r14
    438e:	8c 93       	st	X, r24
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    4390:	11 96       	adiw	r26, 0x01	; 1
    4392:	8c 91       	ld	r24, X
    4394:	11 97       	sbiw	r26, 0x01	; 1
    4396:	85 ff       	sbrs	r24, 5
    4398:	19 c0       	rjmp	.+50     	; 0x43cc <__vector_123+0x208>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    439a:	f8 01       	movw	r30, r16
    439c:	80 81       	ld	r24, Z
    439e:	91 81       	ldd	r25, Z+1	; 0x01
    43a0:	28 81       	ld	r18, Y
    43a2:	39 81       	ldd	r19, Y+1	; 0x01
    43a4:	82 17       	cp	r24, r18
    43a6:	93 07       	cpc	r25, r19
    43a8:	38 f0       	brcs	.+14     	; 0x43b8 <__vector_123+0x1f4>
		return (uart_head[idx] - uart_tail[idx]);
    43aa:	80 81       	ld	r24, Z
    43ac:	91 81       	ldd	r25, Z+1	; 0x01
    43ae:	28 81       	ld	r18, Y
    43b0:	39 81       	ldd	r19, Y+1	; 0x01
    43b2:	82 1b       	sub	r24, r18
    43b4:	93 0b       	sbc	r25, r19
    43b6:	08 c0       	rjmp	.+16     	; 0x43c8 <__vector_123+0x204>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    43b8:	80 81       	ld	r24, Z
    43ba:	91 81       	ldd	r25, Z+1	; 0x01
    43bc:	28 81       	ld	r18, Y
    43be:	39 81       	ldd	r19, Y+1	; 0x01
    43c0:	80 50       	subi	r24, 0x00	; 0
    43c2:	9c 4f       	sbci	r25, 0xFC	; 252
    43c4:	82 1b       	sub	r24, r18
    43c6:	93 0b       	sbc	r25, r19
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    43c8:	00 97       	sbiw	r24, 0x00	; 0
    43ca:	71 f6       	brne	.-100    	; 0x4368 <__vector_123+0x1a4>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    43cc:	f8 01       	movw	r30, r16
    43ce:	80 81       	ld	r24, Z
    43d0:	91 81       	ldd	r25, Z+1	; 0x01
    43d2:	28 81       	ld	r18, Y
    43d4:	39 81       	ldd	r19, Y+1	; 0x01
    43d6:	82 17       	cp	r24, r18
    43d8:	93 07       	cpc	r25, r19
    43da:	38 f0       	brcs	.+14     	; 0x43ea <__vector_123+0x226>
		return (uart_head[idx] - uart_tail[idx]);
    43dc:	80 81       	ld	r24, Z
    43de:	91 81       	ldd	r25, Z+1	; 0x01
    43e0:	28 81       	ld	r18, Y
    43e2:	39 81       	ldd	r19, Y+1	; 0x01
    43e4:	82 1b       	sub	r24, r18
    43e6:	93 0b       	sbc	r25, r19
    43e8:	08 c0       	rjmp	.+16     	; 0x43fa <__vector_123+0x236>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    43ea:	80 81       	ld	r24, Z
    43ec:	91 81       	ldd	r25, Z+1	; 0x01
    43ee:	28 81       	ld	r18, Y
    43f0:	39 81       	ldd	r19, Y+1	; 0x01
    43f2:	80 50       	subi	r24, 0x00	; 0
    43f4:	9c 4f       	sbci	r25, 0xFC	; 252
    43f6:	82 1b       	sub	r24, r18
    43f8:	93 0b       	sbc	r25, r19
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
	}
	//disable the tx outgoing hardware buffer ready interrupt if we have nothing more to put in it.
	if(uart_count(port)>0) uart_txbuffer_enable(port);
    43fa:	00 97       	sbiw	r24, 0x00	; 0
    43fc:	21 f0       	breq	.+8      	; 0x4406 <__vector_123+0x242>
    43fe:	c7 01       	movw	r24, r14
    4400:	0e 94 98 1c 	call	0x3930	; 0x3930 <uart_txbuffer_enable>
    4404:	03 c0       	rjmp	.+6      	; 0x440c <__vector_123+0x248>
	else uart_txbuffer_disable(port);
    4406:	c7 01       	movw	r24, r14
    4408:	0e 94 9d 1c 	call	0x393a	; 0x393a <uart_txbuffer_disable>
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0) && (lcd_flow_control == LCD_READY)){
		toSend = uart_dequeue(port);
		if (toSend == 0x0D) {lcd_flow_control = LCD_BUSY;}
		uart_enqueue(&udata, '`'); //xxx - echo to data port
		uart_enqueue(&udata, toSend); //xxx - echo to data port
		port->DATA = toSend;
    440c:	f3 01       	movw	r30, r6
    440e:	b0 82       	st	Z, r11
}

void inline uart_transmit_lcd(USART_t* port){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0) && (lcd_flow_control == LCD_READY)){
    4410:	81 81       	ldd	r24, Z+1	; 0x01
    4412:	85 fd       	sbrc	r24, 5
    4414:	2b c0       	rjmp	.+86     	; 0x446c <__vector_123+0x2a8>
    4416:	4e c0       	rjmp	.+156    	; 0x44b4 <__vector_123+0x2f0>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    4418:	0f 2e       	mov	r0, r31
    441a:	fc e3       	ldi	r31, 0x3C	; 60
    441c:	8f 2e       	mov	r8, r31
    441e:	f3 e3       	ldi	r31, 0x33	; 51
    4420:	9f 2e       	mov	r9, r31
    4422:	f0 2d       	mov	r31, r0
    4424:	0f 2e       	mov	r0, r31
    4426:	f8 e4       	ldi	r31, 0x48	; 72
    4428:	cf 2e       	mov	r12, r31
    442a:	ff e3       	ldi	r31, 0x3F	; 63
    442c:	df 2e       	mov	r13, r31
    442e:	f0 2d       	mov	r31, r0
		uart_tail[idx] = 0;
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    4430:	0f 2e       	mov	r0, r31
    4432:	f2 e4       	ldi	r31, 0x42	; 66
    4434:	4f 2e       	mov	r4, r31
    4436:	f3 e3       	ldi	r31, 0x33	; 51
    4438:	5f 2e       	mov	r5, r31
    443a:	f0 2d       	mov	r31, r0
void inline uart_transmit_lcd(USART_t* port){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0) && (lcd_flow_control == LCD_READY)){
		toSend = uart_dequeue(port);
		if (toSend == 0x0D) {lcd_flow_control = LCD_BUSY;}
    443c:	0f 2e       	mov	r0, r31
    443e:	fe e4       	ldi	r31, 0x4E	; 78
    4440:	3f 2e       	mov	r3, r31
    4442:	f0 2d       	mov	r31, r0
#ifndef UART_DEBUG
	uint8_t idx = port_map(port);
	
	//if (idx==0){uart_enqueue(&uctrl, datain);} //xxx
	
	uart_buffer[idx][uart_head[idx]] = datain;
    4444:	00 e4       	ldi	r16, 0x40	; 64
    4446:	13 e3       	ldi	r17, 0x33	; 51
    4448:	0f 2e       	mov	r0, r31
    444a:	f0 e6       	ldi	r31, 0x60	; 96
    444c:	af 2e       	mov	r10, r31
    444e:	f0 2d       	mov	r31, r0
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    4450:	0f 2e       	mov	r0, r31
    4452:	f0 eb       	ldi	r31, 0xB0	; 176
    4454:	ef 2e       	mov	r14, r31
    4456:	f8 e0       	ldi	r31, 0x08	; 8
    4458:	ff 2e       	mov	r15, r31
    445a:	f0 2d       	mov	r31, r0
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    445c:	cc e4       	ldi	r28, 0x4C	; 76
    445e:	df e3       	ldi	r29, 0x3F	; 63
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0) && (lcd_flow_control == LCD_READY)){
		toSend = uart_dequeue(port);
		if (toSend == 0x0D) {lcd_flow_control = LCD_BUSY;}
		uart_enqueue(&udata, '`'); //xxx - echo to data port
		uart_enqueue(&udata, toSend); //xxx - echo to data port
		port->DATA = toSend;
    4460:	0f 2e       	mov	r0, r31
    4462:	f0 eb       	ldi	r31, 0xB0	; 176
    4464:	6f 2e       	mov	r6, r31
    4466:	fb e0       	ldi	r31, 0x0B	; 11
    4468:	7f 2e       	mov	r7, r31
    446a:	f0 2d       	mov	r31, r0
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    446c:	d4 01       	movw	r26, r8
    446e:	8d 91       	ld	r24, X+
    4470:	9c 91       	ld	r25, X
    4472:	11 97       	sbiw	r26, 0x01	; 1
    4474:	f6 01       	movw	r30, r12
    4476:	20 81       	ld	r18, Z
    4478:	31 81       	ldd	r19, Z+1	; 0x01
    447a:	82 17       	cp	r24, r18
    447c:	93 07       	cpc	r25, r19
    447e:	40 f0       	brcs	.+16     	; 0x4490 <__vector_123+0x2cc>
		return (uart_head[idx] - uart_tail[idx]);
    4480:	8d 91       	ld	r24, X+
    4482:	9c 91       	ld	r25, X
    4484:	11 97       	sbiw	r26, 0x01	; 1
    4486:	20 81       	ld	r18, Z
    4488:	31 81       	ldd	r19, Z+1	; 0x01
    448a:	82 1b       	sub	r24, r18
    448c:	93 0b       	sbc	r25, r19
    448e:	0b c0       	rjmp	.+22     	; 0x44a6 <__vector_123+0x2e2>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    4490:	d4 01       	movw	r26, r8
    4492:	8d 91       	ld	r24, X+
    4494:	9c 91       	ld	r25, X
    4496:	11 97       	sbiw	r26, 0x01	; 1
    4498:	f6 01       	movw	r30, r12
    449a:	20 81       	ld	r18, Z
    449c:	31 81       	ldd	r19, Z+1	; 0x01
    449e:	80 50       	subi	r24, 0x00	; 0
    44a0:	9c 4f       	sbci	r25, 0xFC	; 252
    44a2:	82 1b       	sub	r24, r18
    44a4:	93 0b       	sbc	r25, r19
}

void inline uart_transmit_lcd(USART_t* port){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0) && (lcd_flow_control == LCD_READY)){
    44a6:	00 97       	sbiw	r24, 0x00	; 0
    44a8:	29 f0       	breq	.+10     	; 0x44b4 <__vector_123+0x2f0>
    44aa:	80 91 24 27 	lds	r24, 0x2724
    44ae:	82 35       	cpi	r24, 0x52	; 82
    44b0:	09 f4       	brne	.+2      	; 0x44b4 <__vector_123+0x2f0>
    44b2:	b8 ce       	rjmp	.-656    	; 0x4224 <__vector_123+0x60>
		if (toSend == 0x0D) {lcd_flow_control = LCD_BUSY;}
		uart_enqueue(&udata, '`'); //xxx - echo to data port
		uart_enqueue(&udata, toSend); //xxx - echo to data port
		port->DATA = toSend;
	}
	uart_txbuffer_disable(port); //implemented this way to prevent periodic stalls that happen when uart_txbuffer isn't disabled quickly enough
    44b4:	80 eb       	ldi	r24, 0xB0	; 176
    44b6:	9b e0       	ldi	r25, 0x0B	; 11
    44b8:	0e 94 9d 1c 	call	0x393a	; 0x393a <uart_txbuffer_disable>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    44bc:	20 91 3c 33 	lds	r18, 0x333C
    44c0:	30 91 3d 33 	lds	r19, 0x333D
    44c4:	80 91 48 3f 	lds	r24, 0x3F48
    44c8:	90 91 49 3f 	lds	r25, 0x3F49
    44cc:	28 17       	cp	r18, r24
    44ce:	39 07       	cpc	r19, r25
    44d0:	58 f0       	brcs	.+22     	; 0x44e8 <__vector_123+0x324>
		return (uart_head[idx] - uart_tail[idx]);
    44d2:	80 91 3c 33 	lds	r24, 0x333C
    44d6:	90 91 3d 33 	lds	r25, 0x333D
    44da:	20 91 48 3f 	lds	r18, 0x3F48
    44de:	30 91 49 3f 	lds	r19, 0x3F49
    44e2:	82 1b       	sub	r24, r18
    44e4:	93 0b       	sbc	r25, r19
    44e6:	0c c0       	rjmp	.+24     	; 0x4500 <__vector_123+0x33c>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    44e8:	80 91 3c 33 	lds	r24, 0x333C
    44ec:	90 91 3d 33 	lds	r25, 0x333D
    44f0:	20 91 48 3f 	lds	r18, 0x3F48
    44f4:	30 91 49 3f 	lds	r19, 0x3F49
    44f8:	80 50       	subi	r24, 0x00	; 0
    44fa:	9c 4f       	sbci	r25, 0xFC	; 252
    44fc:	82 1b       	sub	r24, r18
    44fe:	93 0b       	sbc	r25, r19
		uart_enqueue(&udata, '`'); //xxx - echo to data port
		uart_enqueue(&udata, toSend); //xxx - echo to data port
		port->DATA = toSend;
	}
	uart_txbuffer_disable(port); //implemented this way to prevent periodic stalls that happen when uart_txbuffer isn't disabled quickly enough
	if ((uart_count(port)>0) && (lcd_flow_control == LCD_READY)){ //...something is waiting to go out
    4500:	00 97       	sbiw	r24, 0x00	; 0
    4502:	41 f0       	breq	.+16     	; 0x4514 <__vector_123+0x350>
    4504:	80 91 24 27 	lds	r24, 0x2724
    4508:	82 35       	cpi	r24, 0x52	; 82
    450a:	21 f4       	brne	.+8      	; 0x4514 <__vector_123+0x350>
		uart_txbuffer_enable(port);	
    450c:	80 eb       	ldi	r24, 0xB0	; 176
    450e:	9b e0       	ldi	r25, 0x0B	; 11
    4510:	0e 94 98 1c 	call	0x3930	; 0x3930 <uart_txbuffer_enable>
//Must correspond to definitions in uart.h
ISR(USARTC0_DRE_vect) {uart_transmit(&uctrl);}//TX Interrupt
ISR(USARTC0_RXC_vect) {uart_receive(&uctrl);} //RX Interrupt
ISR(USARTC1_DRE_vect) {uart_transmit(&udata);}//TX Interrupt
ISR(USARTC1_RXC_vect) {uart_receive(&udata);} //RX Interrupt
ISR(USARTF1_DRE_vect) {uart_transmit_lcd(&ulcd);}//TX Interrupt
    4514:	ff 91       	pop	r31
    4516:	ef 91       	pop	r30
    4518:	df 91       	pop	r29
    451a:	cf 91       	pop	r28
    451c:	bf 91       	pop	r27
    451e:	af 91       	pop	r26
    4520:	9f 91       	pop	r25
    4522:	8f 91       	pop	r24
    4524:	7f 91       	pop	r23
    4526:	6f 91       	pop	r22
    4528:	5f 91       	pop	r21
    452a:	4f 91       	pop	r20
    452c:	3f 91       	pop	r19
    452e:	2f 91       	pop	r18
    4530:	1f 91       	pop	r17
    4532:	0f 91       	pop	r16
    4534:	ff 90       	pop	r15
    4536:	ef 90       	pop	r14
    4538:	df 90       	pop	r13
    453a:	cf 90       	pop	r12
    453c:	bf 90       	pop	r11
    453e:	af 90       	pop	r10
    4540:	9f 90       	pop	r9
    4542:	8f 90       	pop	r8
    4544:	7f 90       	pop	r7
    4546:	6f 90       	pop	r6
    4548:	5f 90       	pop	r5
    454a:	4f 90       	pop	r4
    454c:	3f 90       	pop	r3
    454e:	0f 90       	pop	r0
    4550:	0b be       	out	0x3b, r0	; 59
    4552:	0f 90       	pop	r0
    4554:	0a be       	out	0x3a, r0	; 58
    4556:	0f 90       	pop	r0
    4558:	09 be       	out	0x39, r0	; 57
    455a:	0f 90       	pop	r0
    455c:	08 be       	out	0x38, r0	; 56
    455e:	0f 90       	pop	r0
    4560:	0f be       	out	0x3f, r0	; 63
    4562:	0f 90       	pop	r0
    4564:	1f 90       	pop	r1
    4566:	18 95       	reti

00004568 <__vector_122>:
ISR(USARTF1_RXC_vect) {uart_receive_lcd(&ulcd);} //RX Interrupt
    4568:	1f 92       	push	r1
    456a:	0f 92       	push	r0
    456c:	0f b6       	in	r0, 0x3f	; 63
    456e:	0f 92       	push	r0
    4570:	08 b6       	in	r0, 0x38	; 56
    4572:	0f 92       	push	r0
    4574:	09 b6       	in	r0, 0x39	; 57
    4576:	0f 92       	push	r0
    4578:	0a b6       	in	r0, 0x3a	; 58
    457a:	0f 92       	push	r0
    457c:	0b b6       	in	r0, 0x3b	; 59
    457e:	0f 92       	push	r0
    4580:	11 24       	eor	r1, r1
    4582:	4f 92       	push	r4
    4584:	5f 92       	push	r5
    4586:	6f 92       	push	r6
    4588:	7f 92       	push	r7
    458a:	8f 92       	push	r8
    458c:	9f 92       	push	r9
    458e:	af 92       	push	r10
    4590:	bf 92       	push	r11
    4592:	cf 92       	push	r12
    4594:	df 92       	push	r13
    4596:	ef 92       	push	r14
    4598:	ff 92       	push	r15
    459a:	0f 93       	push	r16
    459c:	1f 93       	push	r17
    459e:	2f 93       	push	r18
    45a0:	3f 93       	push	r19
    45a2:	4f 93       	push	r20
    45a4:	5f 93       	push	r21
    45a6:	6f 93       	push	r22
    45a8:	7f 93       	push	r23
    45aa:	8f 93       	push	r24
    45ac:	9f 93       	push	r25
    45ae:	af 93       	push	r26
    45b0:	bf 93       	push	r27
    45b2:	cf 93       	push	r28
    45b4:	df 93       	push	r29
    45b6:	ef 93       	push	r30
    45b8:	ff 93       	push	r31
}

void inline uart_receive_lcd(USART_t* port){
	uint8_t incomingByte;
	//keep receiving until data register is empty or incoming queue is full
	while (((port->STATUS & _BV(7)) == B8(10000000)) && (uart_icount(port) < MAX_IBUFFER_LEN)){
    45ba:	0f 2e       	mov	r0, r31
    45bc:	f0 eb       	ldi	r31, 0xB0	; 176
    45be:	8f 2e       	mov	r8, r31
    45c0:	fb e0       	ldi	r31, 0x0B	; 11
    45c2:	9f 2e       	mov	r9, r31
    45c4:	f0 2d       	mov	r31, r0
	uart_itail[idx] = 0;
}

inline uint16_t uart_icount(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_ihead[idx] >= uart_itail[idx]){	
    45c6:	0f 2e       	mov	r0, r31
    45c8:	f2 e4       	ldi	r31, 0x42	; 66
    45ca:	af 2e       	mov	r10, r31
    45cc:	ff e3       	ldi	r31, 0x3F	; 63
    45ce:	bf 2e       	mov	r11, r31
    45d0:	f0 2d       	mov	r31, r0
    45d2:	0f 2e       	mov	r0, r31
    45d4:	f6 e3       	ldi	r31, 0x36	; 54
    45d6:	6f 2e       	mov	r6, r31
    45d8:	f7 e2       	ldi	r31, 0x27	; 39
    45da:	7f 2e       	mov	r7, r31
    45dc:	f0 2d       	mov	r31, r0
#ifndef UART_DEBUG
	uint8_t idx = port_map(port);
	
	//if (idx==0){uart_enqueue(&uctrl, datain);} //xxx
	
	uart_buffer[idx][uart_head[idx]] = datain;
    45de:	00 e4       	ldi	r16, 0x40	; 64
    45e0:	13 e3       	ldi	r17, 0x33	; 51
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    45e2:	0f 2e       	mov	r0, r31
    45e4:	f0 eb       	ldi	r31, 0xB0	; 176
    45e6:	ef 2e       	mov	r14, r31
    45e8:	f8 e0       	ldi	r31, 0x08	; 8
    45ea:	ff 2e       	mov	r15, r31
    45ec:	f0 2d       	mov	r31, r0
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    45ee:	cc e4       	ldi	r28, 0x4C	; 76
    45f0:	df e3       	ldi	r29, 0x3F	; 63
	uint8_t incomingByte;
	//keep receiving until data register is empty or incoming queue is full
	while (((port->STATUS & _BV(7)) == B8(10000000)) && (uart_icount(port) < MAX_IBUFFER_LEN)){
		incomingByte = port->DATA;
		uart_enqueue(&udata, incomingByte); //xxx - echo to data port
		if (incomingByte == 0x0D) {lcd_flow_control = LCD_DONE_COMMAND;}
    45f2:	0f 2e       	mov	r0, r31
    45f4:	ff e4       	ldi	r31, 0x4F	; 79
    45f6:	cf 2e       	mov	r12, r31
    45f8:	f0 2d       	mov	r31, r0
	}
}

inline void uart_ienqueue(USART_t* port, uint8_t datain){
	uint8_t idx = port_map(port);
	uart_ibuffer[idx][uart_ihead[idx]] = datain;
    45fa:	0f 2e       	mov	r0, r31
    45fc:	fc e3       	ldi	r31, 0x3C	; 60
    45fe:	4f 2e       	mov	r4, r31
    4600:	f7 e2       	ldi	r31, 0x27	; 39
    4602:	5f 2e       	mov	r5, r31
    4604:	f0 2d       	mov	r31, r0
    4606:	8d c0       	rjmp	.+282    	; 0x4722 <__vector_122+0x1ba>

void inline uart_receive_lcd(USART_t* port){
	uint8_t incomingByte;
	//keep receiving until data register is empty or incoming queue is full
	while (((port->STATUS & _BV(7)) == B8(10000000)) && (uart_icount(port) < MAX_IBUFFER_LEN)){
		incomingByte = port->DATA;
    4608:	f4 01       	movw	r30, r8
    460a:	d0 80       	ld	r13, Z
#ifndef UART_DEBUG
	uint8_t idx = port_map(port);
	
	//if (idx==0){uart_enqueue(&uctrl, datain);} //xxx
	
	uart_buffer[idx][uart_head[idx]] = datain;
    460c:	f8 01       	movw	r30, r16
    460e:	80 81       	ld	r24, Z
    4610:	91 81       	ldd	r25, Z+1	; 0x01
    4612:	8e 5b       	subi	r24, 0xBE	; 190
    4614:	94 4c       	sbci	r25, 0xC4	; 196
    4616:	fc 01       	movw	r30, r24
    4618:	d0 82       	st	Z, r13
	uart_head[idx]++;
    461a:	f8 01       	movw	r30, r16
    461c:	80 81       	ld	r24, Z
    461e:	91 81       	ldd	r25, Z+1	; 0x01
    4620:	01 96       	adiw	r24, 0x01	; 1
    4622:	80 83       	st	Z, r24
    4624:	91 83       	std	Z+1, r25	; 0x01
	if (uart_head[idx] >= MAX_BUFFER_LEN){
    4626:	80 81       	ld	r24, Z
    4628:	91 81       	ldd	r25, Z+1	; 0x01
    462a:	f4 e0       	ldi	r31, 0x04	; 4
    462c:	80 30       	cpi	r24, 0x00	; 0
    462e:	9f 07       	cpc	r25, r31
    4630:	18 f0       	brcs	.+6      	; 0x4638 <__vector_122+0xd0>
		uart_head[idx] = 0;
    4632:	f8 01       	movw	r30, r16
    4634:	10 82       	st	Z, r1
    4636:	11 82       	std	Z+1, r1	; 0x01
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    4638:	f7 01       	movw	r30, r14
    463a:	81 81       	ldd	r24, Z+1	; 0x01
    463c:	85 fd       	sbrc	r24, 5
    463e:	18 c0       	rjmp	.+48     	; 0x4670 <__vector_122+0x108>
    4640:	31 c0       	rjmp	.+98     	; 0x46a4 <__vector_122+0x13c>
}

inline uint8_t uart_dequeue(USART_t* port){
	uint8_t idx = port_map(port);
	uint16_t oldtail;
	oldtail = uart_tail[idx];
    4642:	e8 81       	ld	r30, Y
    4644:	f9 81       	ldd	r31, Y+1	; 0x01
	uart_tail[idx]++;
    4646:	88 81       	ld	r24, Y
    4648:	99 81       	ldd	r25, Y+1	; 0x01
    464a:	01 96       	adiw	r24, 0x01	; 1
    464c:	88 83       	st	Y, r24
    464e:	99 83       	std	Y+1, r25	; 0x01
	if (uart_tail[idx] >= MAX_BUFFER_LEN){
    4650:	88 81       	ld	r24, Y
    4652:	99 81       	ldd	r25, Y+1	; 0x01
    4654:	24 e0       	ldi	r18, 0x04	; 4
    4656:	80 30       	cpi	r24, 0x00	; 0
    4658:	92 07       	cpc	r25, r18
    465a:	10 f0       	brcs	.+4      	; 0x4660 <__vector_122+0xf8>
		uart_tail[idx] = 0;
    465c:	18 82       	st	Y, r1
    465e:	19 82       	std	Y+1, r1	; 0x01
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    4660:	ee 5b       	subi	r30, 0xBE	; 190
    4662:	f4 4c       	sbci	r31, 0xC4	; 196
    4664:	80 81       	ld	r24, Z
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
    4666:	f7 01       	movw	r30, r14
    4668:	80 83       	st	Z, r24
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    466a:	81 81       	ldd	r24, Z+1	; 0x01
    466c:	85 ff       	sbrs	r24, 5
    466e:	1a c0       	rjmp	.+52     	; 0x46a4 <__vector_122+0x13c>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    4670:	f8 01       	movw	r30, r16
    4672:	80 81       	ld	r24, Z
    4674:	91 81       	ldd	r25, Z+1	; 0x01
    4676:	28 81       	ld	r18, Y
    4678:	39 81       	ldd	r19, Y+1	; 0x01
    467a:	82 17       	cp	r24, r18
    467c:	93 07       	cpc	r25, r19
    467e:	38 f0       	brcs	.+14     	; 0x468e <__vector_122+0x126>
		return (uart_head[idx] - uart_tail[idx]);
    4680:	80 81       	ld	r24, Z
    4682:	91 81       	ldd	r25, Z+1	; 0x01
    4684:	28 81       	ld	r18, Y
    4686:	39 81       	ldd	r19, Y+1	; 0x01
    4688:	82 1b       	sub	r24, r18
    468a:	93 0b       	sbc	r25, r19
    468c:	09 c0       	rjmp	.+18     	; 0x46a0 <__vector_122+0x138>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    468e:	f8 01       	movw	r30, r16
    4690:	80 81       	ld	r24, Z
    4692:	91 81       	ldd	r25, Z+1	; 0x01
    4694:	28 81       	ld	r18, Y
    4696:	39 81       	ldd	r19, Y+1	; 0x01
    4698:	80 50       	subi	r24, 0x00	; 0
    469a:	9c 4f       	sbci	r25, 0xFC	; 252
    469c:	82 1b       	sub	r24, r18
    469e:	93 0b       	sbc	r25, r19
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    46a0:	00 97       	sbiw	r24, 0x00	; 0
    46a2:	79 f6       	brne	.-98     	; 0x4642 <__vector_122+0xda>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    46a4:	f8 01       	movw	r30, r16
    46a6:	80 81       	ld	r24, Z
    46a8:	91 81       	ldd	r25, Z+1	; 0x01
    46aa:	28 81       	ld	r18, Y
    46ac:	39 81       	ldd	r19, Y+1	; 0x01
    46ae:	82 17       	cp	r24, r18
    46b0:	93 07       	cpc	r25, r19
    46b2:	38 f0       	brcs	.+14     	; 0x46c2 <__vector_122+0x15a>
		return (uart_head[idx] - uart_tail[idx]);
    46b4:	80 81       	ld	r24, Z
    46b6:	91 81       	ldd	r25, Z+1	; 0x01
    46b8:	28 81       	ld	r18, Y
    46ba:	39 81       	ldd	r19, Y+1	; 0x01
    46bc:	82 1b       	sub	r24, r18
    46be:	93 0b       	sbc	r25, r19
    46c0:	09 c0       	rjmp	.+18     	; 0x46d4 <__vector_122+0x16c>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    46c2:	f8 01       	movw	r30, r16
    46c4:	80 81       	ld	r24, Z
    46c6:	91 81       	ldd	r25, Z+1	; 0x01
    46c8:	28 81       	ld	r18, Y
    46ca:	39 81       	ldd	r19, Y+1	; 0x01
    46cc:	80 50       	subi	r24, 0x00	; 0
    46ce:	9c 4f       	sbci	r25, 0xFC	; 252
    46d0:	82 1b       	sub	r24, r18
    46d2:	93 0b       	sbc	r25, r19
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
	}
	//disable the tx outgoing hardware buffer ready interrupt if we have nothing more to put in it.
	if(uart_count(port)>0) uart_txbuffer_enable(port);
    46d4:	00 97       	sbiw	r24, 0x00	; 0
    46d6:	21 f0       	breq	.+8      	; 0x46e0 <__vector_122+0x178>
    46d8:	c7 01       	movw	r24, r14
    46da:	0e 94 98 1c 	call	0x3930	; 0x3930 <uart_txbuffer_enable>
    46de:	03 c0       	rjmp	.+6      	; 0x46e6 <__vector_122+0x17e>
	else uart_txbuffer_disable(port);
    46e0:	c7 01       	movw	r24, r14
    46e2:	0e 94 9d 1c 	call	0x393a	; 0x393a <uart_txbuffer_disable>
	uint8_t incomingByte;
	//keep receiving until data register is empty or incoming queue is full
	while (((port->STATUS & _BV(7)) == B8(10000000)) && (uart_icount(port) < MAX_IBUFFER_LEN)){
		incomingByte = port->DATA;
		uart_enqueue(&udata, incomingByte); //xxx - echo to data port
		if (incomingByte == 0x0D) {lcd_flow_control = LCD_DONE_COMMAND;}
    46e6:	fd e0       	ldi	r31, 0x0D	; 13
    46e8:	df 16       	cp	r13, r31
    46ea:	11 f4       	brne	.+4      	; 0x46f0 <__vector_122+0x188>
    46ec:	c0 92 24 27 	sts	0x2724, r12
		lcd_set_touch(incomingByte); //write to touch-command listener
    46f0:	8d 2d       	mov	r24, r13
    46f2:	0e 94 de 10 	call	0x21bc	; 0x21bc <lcd_set_touch>
	}
}

inline void uart_ienqueue(USART_t* port, uint8_t datain){
	uint8_t idx = port_map(port);
	uart_ibuffer[idx][uart_ihead[idx]] = datain;
    46f6:	f5 01       	movw	r30, r10
    46f8:	80 81       	ld	r24, Z
    46fa:	91 81       	ldd	r25, Z+1	; 0x01
    46fc:	84 0d       	add	r24, r4
    46fe:	95 1d       	adc	r25, r5
    4700:	fc 01       	movw	r30, r24
    4702:	d0 82       	st	Z, r13
	uart_ihead[idx]++;
    4704:	f5 01       	movw	r30, r10
    4706:	80 81       	ld	r24, Z
    4708:	91 81       	ldd	r25, Z+1	; 0x01
    470a:	01 96       	adiw	r24, 0x01	; 1
    470c:	80 83       	st	Z, r24
    470e:	91 83       	std	Z+1, r25	; 0x01
	if (uart_ihead[idx] >= MAX_IBUFFER_LEN){
    4710:	80 81       	ld	r24, Z
    4712:	91 81       	ldd	r25, Z+1	; 0x01
    4714:	f4 e0       	ldi	r31, 0x04	; 4
    4716:	80 30       	cpi	r24, 0x00	; 0
    4718:	9f 07       	cpc	r25, r31
    471a:	18 f0       	brcs	.+6      	; 0x4722 <__vector_122+0x1ba>
		uart_ihead[idx] = 0;
    471c:	f5 01       	movw	r30, r10
    471e:	10 82       	st	Z, r1
    4720:	11 82       	std	Z+1, r1	; 0x01
}

void inline uart_receive_lcd(USART_t* port){
	uint8_t incomingByte;
	//keep receiving until data register is empty or incoming queue is full
	while (((port->STATUS & _BV(7)) == B8(10000000)) && (uart_icount(port) < MAX_IBUFFER_LEN)){
    4722:	f4 01       	movw	r30, r8
    4724:	81 81       	ldd	r24, Z+1	; 0x01
    4726:	88 23       	and	r24, r24
    4728:	0c f5       	brge	.+66     	; 0x476c <__vector_122+0x204>
	uart_itail[idx] = 0;
}

inline uint16_t uart_icount(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_ihead[idx] >= uart_itail[idx]){	
    472a:	f5 01       	movw	r30, r10
    472c:	80 81       	ld	r24, Z
    472e:	91 81       	ldd	r25, Z+1	; 0x01
    4730:	f3 01       	movw	r30, r6
    4732:	20 81       	ld	r18, Z
    4734:	31 81       	ldd	r19, Z+1	; 0x01
    4736:	82 17       	cp	r24, r18
    4738:	93 07       	cpc	r25, r19
    473a:	48 f0       	brcs	.+18     	; 0x474e <__vector_122+0x1e6>
		return (uart_ihead[idx] - uart_itail[idx]);
    473c:	f5 01       	movw	r30, r10
    473e:	80 81       	ld	r24, Z
    4740:	91 81       	ldd	r25, Z+1	; 0x01
    4742:	f3 01       	movw	r30, r6
    4744:	20 81       	ld	r18, Z
    4746:	31 81       	ldd	r19, Z+1	; 0x01
    4748:	82 1b       	sub	r24, r18
    474a:	93 0b       	sbc	r25, r19
    474c:	0a c0       	rjmp	.+20     	; 0x4762 <__vector_122+0x1fa>
	}
	else {
		return ((MAX_IBUFFER_LEN-uart_itail[idx])+uart_ihead[idx]);
    474e:	f5 01       	movw	r30, r10
    4750:	80 81       	ld	r24, Z
    4752:	91 81       	ldd	r25, Z+1	; 0x01
    4754:	f3 01       	movw	r30, r6
    4756:	20 81       	ld	r18, Z
    4758:	31 81       	ldd	r19, Z+1	; 0x01
    475a:	80 50       	subi	r24, 0x00	; 0
    475c:	9c 4f       	sbci	r25, 0xFC	; 252
    475e:	82 1b       	sub	r24, r18
    4760:	93 0b       	sbc	r25, r19
}

void inline uart_receive_lcd(USART_t* port){
	uint8_t incomingByte;
	//keep receiving until data register is empty or incoming queue is full
	while (((port->STATUS & _BV(7)) == B8(10000000)) && (uart_icount(port) < MAX_IBUFFER_LEN)){
    4762:	f4 e0       	ldi	r31, 0x04	; 4
    4764:	80 30       	cpi	r24, 0x00	; 0
    4766:	9f 07       	cpc	r25, r31
    4768:	08 f4       	brcc	.+2      	; 0x476c <__vector_122+0x204>
    476a:	4e cf       	rjmp	.-356    	; 0x4608 <__vector_122+0xa0>
ISR(USARTC0_DRE_vect) {uart_transmit(&uctrl);}//TX Interrupt
ISR(USARTC0_RXC_vect) {uart_receive(&uctrl);} //RX Interrupt
ISR(USARTC1_DRE_vect) {uart_transmit(&udata);}//TX Interrupt
ISR(USARTC1_RXC_vect) {uart_receive(&udata);} //RX Interrupt
ISR(USARTF1_DRE_vect) {uart_transmit_lcd(&ulcd);}//TX Interrupt
ISR(USARTF1_RXC_vect) {uart_receive_lcd(&ulcd);} //RX Interrupt
    476c:	ff 91       	pop	r31
    476e:	ef 91       	pop	r30
    4770:	df 91       	pop	r29
    4772:	cf 91       	pop	r28
    4774:	bf 91       	pop	r27
    4776:	af 91       	pop	r26
    4778:	9f 91       	pop	r25
    477a:	8f 91       	pop	r24
    477c:	7f 91       	pop	r23
    477e:	6f 91       	pop	r22
    4780:	5f 91       	pop	r21
    4782:	4f 91       	pop	r20
    4784:	3f 91       	pop	r19
    4786:	2f 91       	pop	r18
    4788:	1f 91       	pop	r17
    478a:	0f 91       	pop	r16
    478c:	ff 90       	pop	r15
    478e:	ef 90       	pop	r14
    4790:	df 90       	pop	r13
    4792:	cf 90       	pop	r12
    4794:	bf 90       	pop	r11
    4796:	af 90       	pop	r10
    4798:	9f 90       	pop	r9
    479a:	8f 90       	pop	r8
    479c:	7f 90       	pop	r7
    479e:	6f 90       	pop	r6
    47a0:	5f 90       	pop	r5
    47a2:	4f 90       	pop	r4
    47a4:	0f 90       	pop	r0
    47a6:	0b be       	out	0x3b, r0	; 59
    47a8:	0f 90       	pop	r0
    47aa:	0a be       	out	0x3a, r0	; 58
    47ac:	0f 90       	pop	r0
    47ae:	09 be       	out	0x39, r0	; 57
    47b0:	0f 90       	pop	r0
    47b2:	08 be       	out	0x38, r0	; 56
    47b4:	0f 90       	pop	r0
    47b6:	0f be       	out	0x3f, r0	; 63
    47b8:	0f 90       	pop	r0
    47ba:	1f 90       	pop	r1
    47bc:	18 95       	reti

000047be <uart_receive>:

//==================================
//= RECEPTION ENGINE (ISR BASED)
//==================================

void inline uart_receive(USART_t* port){
    47be:	cf 92       	push	r12
    47c0:	df 92       	push	r13
    47c2:	ef 92       	push	r14
    47c4:	ff 92       	push	r15
    47c6:	0f 93       	push	r16
    47c8:	1f 93       	push	r17
    47ca:	cf 93       	push	r28
    47cc:	df 93       	push	r29
    47ce:	dc 01       	movw	r26, r24
	uart_itail[idx] = 0;
}

inline uint16_t uart_icount(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_ihead[idx] >= uart_itail[idx]){	
    47d0:	0f 2e       	mov	r0, r31
    47d2:	f2 e4       	ldi	r31, 0x42	; 66
    47d4:	cf 2e       	mov	r12, r31
    47d6:	ff e3       	ldi	r31, 0x3F	; 63
    47d8:	df 2e       	mov	r13, r31
    47da:	f0 2d       	mov	r31, r0
    47dc:	06 e3       	ldi	r16, 0x36	; 54
    47de:	17 e2       	ldi	r17, 0x27	; 39
	}
}

inline void uart_ienqueue(USART_t* port, uint8_t datain){
	uint8_t idx = port_map(port);
	uart_ibuffer[idx][uart_ihead[idx]] = datain;
    47e0:	0f 2e       	mov	r0, r31
    47e2:	fc e3       	ldi	r31, 0x3C	; 60
    47e4:	ef 2e       	mov	r14, r31
    47e6:	f7 e2       	ldi	r31, 0x27	; 39
    47e8:	ff 2e       	mov	r15, r31
    47ea:	f0 2d       	mov	r31, r0
//= RECEPTION ENGINE (ISR BASED)
//==================================

void inline uart_receive(USART_t* port){
	//keep receiving until data register is empty or incoming queue is full
	while (((port->STATUS & _BV(7)) == B8(10000000)) && (uart_icount(port) < MAX_IBUFFER_LEN)){		
    47ec:	3a c0       	rjmp	.+116    	; 0x4862 <uart_receive+0xa4>
		uart_ienqueue(port, port->DATA);
    47ee:	4c 91       	ld	r20, X
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    47f0:	2b e0       	ldi	r18, 0x0B	; 11
    47f2:	a0 3b       	cpi	r26, 0xB0	; 176
    47f4:	b2 07       	cpc	r27, r18
    47f6:	51 f0       	breq	.+20     	; 0x480c <uart_receive+0x4e>
	if (port == &uctrl) {return 1;}
    47f8:	38 e0       	ldi	r19, 0x08	; 8
    47fa:	a0 3a       	cpi	r26, 0xA0	; 160
    47fc:	b3 07       	cpc	r27, r19
    47fe:	41 f0       	breq	.+16     	; 0x4810 <uart_receive+0x52>
	if (port == &udata) {return 2;}
    4800:	88 e0       	ldi	r24, 0x08	; 8
    4802:	a0 3b       	cpi	r26, 0xB0	; 176
    4804:	b8 07       	cpc	r27, r24
    4806:	31 f4       	brne	.+12     	; 0x4814 <uart_receive+0x56>
    4808:	62 e0       	ldi	r22, 0x02	; 2
    480a:	05 c0       	rjmp	.+10     	; 0x4816 <uart_receive+0x58>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    480c:	60 e0       	ldi	r22, 0x00	; 0
    480e:	03 c0       	rjmp	.+6      	; 0x4816 <uart_receive+0x58>
	if (port == &uctrl) {return 1;}
    4810:	61 e0       	ldi	r22, 0x01	; 1
    4812:	01 c0       	rjmp	.+2      	; 0x4816 <uart_receive+0x58>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    4814:	60 e0       	ldi	r22, 0x00	; 0
	}
}

inline void uart_ienqueue(USART_t* port, uint8_t datain){
	uint8_t idx = port_map(port);
	uart_ibuffer[idx][uart_ihead[idx]] = datain;
    4816:	70 e0       	ldi	r23, 0x00	; 0
    4818:	cb 01       	movw	r24, r22
    481a:	88 0f       	add	r24, r24
    481c:	99 1f       	adc	r25, r25
    481e:	f6 01       	movw	r30, r12
    4820:	e8 0f       	add	r30, r24
    4822:	f9 1f       	adc	r31, r25
    4824:	20 81       	ld	r18, Z
    4826:	31 81       	ldd	r19, Z+1	; 0x01
    4828:	cb 01       	movw	r24, r22
    482a:	98 2f       	mov	r25, r24
    482c:	88 27       	eor	r24, r24
    482e:	99 0f       	add	r25, r25
    4830:	99 0f       	add	r25, r25
    4832:	82 0f       	add	r24, r18
    4834:	93 1f       	adc	r25, r19
    4836:	8e 0d       	add	r24, r14
    4838:	9f 1d       	adc	r25, r15
    483a:	ec 01       	movw	r28, r24
    483c:	48 83       	st	Y, r20
	uart_ihead[idx]++;
    483e:	80 81       	ld	r24, Z
    4840:	91 81       	ldd	r25, Z+1	; 0x01
    4842:	01 96       	adiw	r24, 0x01	; 1
    4844:	80 83       	st	Z, r24
    4846:	91 83       	std	Z+1, r25	; 0x01
	if (uart_ihead[idx] >= MAX_IBUFFER_LEN){
    4848:	80 81       	ld	r24, Z
    484a:	91 81       	ldd	r25, Z+1	; 0x01
    484c:	d4 e0       	ldi	r29, 0x04	; 4
    484e:	80 30       	cpi	r24, 0x00	; 0
    4850:	9d 07       	cpc	r25, r29
    4852:	38 f0       	brcs	.+14     	; 0x4862 <uart_receive+0xa4>
		uart_ihead[idx] = 0;
    4854:	fb 01       	movw	r30, r22
    4856:	ee 0f       	add	r30, r30
    4858:	ff 1f       	adc	r31, r31
    485a:	ec 0d       	add	r30, r12
    485c:	fd 1d       	adc	r31, r13
    485e:	10 82       	st	Z, r1
    4860:	11 82       	std	Z+1, r1	; 0x01
//= RECEPTION ENGINE (ISR BASED)
//==================================

void inline uart_receive(USART_t* port){
	//keep receiving until data register is empty or incoming queue is full
	while (((port->STATUS & _BV(7)) == B8(10000000)) && (uart_icount(port) < MAX_IBUFFER_LEN)){		
    4862:	11 96       	adiw	r26, 0x01	; 1
    4864:	8c 91       	ld	r24, X
    4866:	11 97       	sbiw	r26, 0x01	; 1
    4868:	88 23       	and	r24, r24
    486a:	0c f0       	brlt	.+2      	; 0x486e <uart_receive+0xb0>
    486c:	4c c0       	rjmp	.+152    	; 0x4906 <uart_receive+0x148>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    486e:	2b e0       	ldi	r18, 0x0B	; 11
    4870:	a0 3b       	cpi	r26, 0xB0	; 176
    4872:	b2 07       	cpc	r27, r18
    4874:	51 f0       	breq	.+20     	; 0x488a <uart_receive+0xcc>
	if (port == &uctrl) {return 1;}
    4876:	38 e0       	ldi	r19, 0x08	; 8
    4878:	a0 3a       	cpi	r26, 0xA0	; 160
    487a:	b3 07       	cpc	r27, r19
    487c:	41 f0       	breq	.+16     	; 0x488e <uart_receive+0xd0>
	if (port == &udata) {return 2;}
    487e:	88 e0       	ldi	r24, 0x08	; 8
    4880:	a0 3b       	cpi	r26, 0xB0	; 176
    4882:	b8 07       	cpc	r27, r24
    4884:	31 f4       	brne	.+12     	; 0x4892 <uart_receive+0xd4>
    4886:	22 e0       	ldi	r18, 0x02	; 2
    4888:	05 c0       	rjmp	.+10     	; 0x4894 <uart_receive+0xd6>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    488a:	20 e0       	ldi	r18, 0x00	; 0
    488c:	03 c0       	rjmp	.+6      	; 0x4894 <uart_receive+0xd6>
	if (port == &uctrl) {return 1;}
    488e:	21 e0       	ldi	r18, 0x01	; 1
    4890:	01 c0       	rjmp	.+2      	; 0x4894 <uart_receive+0xd6>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    4892:	20 e0       	ldi	r18, 0x00	; 0
	uart_itail[idx] = 0;
}

inline uint16_t uart_icount(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_ihead[idx] >= uart_itail[idx]){	
    4894:	30 e0       	ldi	r19, 0x00	; 0
    4896:	c9 01       	movw	r24, r18
    4898:	88 0f       	add	r24, r24
    489a:	99 1f       	adc	r25, r25
    489c:	f6 01       	movw	r30, r12
    489e:	e8 0f       	add	r30, r24
    48a0:	f9 1f       	adc	r31, r25
    48a2:	40 81       	ld	r20, Z
    48a4:	51 81       	ldd	r21, Z+1	; 0x01
    48a6:	f8 01       	movw	r30, r16
    48a8:	e8 0f       	add	r30, r24
    48aa:	f9 1f       	adc	r31, r25
    48ac:	80 81       	ld	r24, Z
    48ae:	91 81       	ldd	r25, Z+1	; 0x01
    48b0:	48 17       	cp	r20, r24
    48b2:	59 07       	cpc	r21, r25
    48b4:	88 f0       	brcs	.+34     	; 0x48d8 <uart_receive+0x11a>
		return (uart_ihead[idx] - uart_itail[idx]);
    48b6:	22 0f       	add	r18, r18
    48b8:	33 1f       	adc	r19, r19
    48ba:	f6 01       	movw	r30, r12
    48bc:	e2 0f       	add	r30, r18
    48be:	f3 1f       	adc	r31, r19
    48c0:	40 81       	ld	r20, Z
    48c2:	51 81       	ldd	r21, Z+1	; 0x01
    48c4:	f8 01       	movw	r30, r16
    48c6:	e2 0f       	add	r30, r18
    48c8:	f3 1f       	adc	r31, r19
    48ca:	80 81       	ld	r24, Z
    48cc:	91 81       	ldd	r25, Z+1	; 0x01
    48ce:	ea 01       	movw	r28, r20
    48d0:	c8 1b       	sub	r28, r24
    48d2:	d9 0b       	sbc	r29, r25
    48d4:	ce 01       	movw	r24, r28
    48d6:	12 c0       	rjmp	.+36     	; 0x48fc <uart_receive+0x13e>
	}
	else {
		return ((MAX_IBUFFER_LEN-uart_itail[idx])+uart_ihead[idx]);
    48d8:	c9 01       	movw	r24, r18
    48da:	88 0f       	add	r24, r24
    48dc:	99 1f       	adc	r25, r25
    48de:	f6 01       	movw	r30, r12
    48e0:	e8 0f       	add	r30, r24
    48e2:	f9 1f       	adc	r31, r25
    48e4:	40 81       	ld	r20, Z
    48e6:	51 81       	ldd	r21, Z+1	; 0x01
    48e8:	f8 01       	movw	r30, r16
    48ea:	e8 0f       	add	r30, r24
    48ec:	f9 1f       	adc	r31, r25
    48ee:	20 81       	ld	r18, Z
    48f0:	31 81       	ldd	r19, Z+1	; 0x01
    48f2:	ca 01       	movw	r24, r20
    48f4:	80 50       	subi	r24, 0x00	; 0
    48f6:	9c 4f       	sbci	r25, 0xFC	; 252
    48f8:	82 1b       	sub	r24, r18
    48fa:	93 0b       	sbc	r25, r19
//= RECEPTION ENGINE (ISR BASED)
//==================================

void inline uart_receive(USART_t* port){
	//keep receiving until data register is empty or incoming queue is full
	while (((port->STATUS & _BV(7)) == B8(10000000)) && (uart_icount(port) < MAX_IBUFFER_LEN)){		
    48fc:	d4 e0       	ldi	r29, 0x04	; 4
    48fe:	80 30       	cpi	r24, 0x00	; 0
    4900:	9d 07       	cpc	r25, r29
    4902:	08 f4       	brcc	.+2      	; 0x4906 <uart_receive+0x148>
    4904:	74 cf       	rjmp	.-280    	; 0x47ee <uart_receive+0x30>
		uart_ienqueue(port, port->DATA);
	}	
}
    4906:	df 91       	pop	r29
    4908:	cf 91       	pop	r28
    490a:	1f 91       	pop	r17
    490c:	0f 91       	pop	r16
    490e:	ff 90       	pop	r15
    4910:	ef 90       	pop	r14
    4912:	df 90       	pop	r13
    4914:	cf 90       	pop	r12
    4916:	08 95       	ret

00004918 <uart_receive_lcd>:

void inline uart_receive_lcd(USART_t* port){
    4918:	4f 92       	push	r4
    491a:	5f 92       	push	r5
    491c:	6f 92       	push	r6
    491e:	7f 92       	push	r7
    4920:	8f 92       	push	r8
    4922:	9f 92       	push	r9
    4924:	af 92       	push	r10
    4926:	bf 92       	push	r11
    4928:	cf 92       	push	r12
    492a:	df 92       	push	r13
    492c:	ef 92       	push	r14
    492e:	ff 92       	push	r15
    4930:	0f 93       	push	r16
    4932:	1f 93       	push	r17
    4934:	cf 93       	push	r28
    4936:	df 93       	push	r29
    4938:	5c 01       	movw	r10, r24
	uart_itail[idx] = 0;
}

inline uint16_t uart_icount(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_ihead[idx] >= uart_itail[idx]){	
    493a:	0f 2e       	mov	r0, r31
    493c:	f2 e4       	ldi	r31, 0x42	; 66
    493e:	8f 2e       	mov	r8, r31
    4940:	ff e3       	ldi	r31, 0x3F	; 63
    4942:	9f 2e       	mov	r9, r31
    4944:	f0 2d       	mov	r31, r0
    4946:	0f 2e       	mov	r0, r31
    4948:	f6 e3       	ldi	r31, 0x36	; 54
    494a:	6f 2e       	mov	r6, r31
    494c:	f7 e2       	ldi	r31, 0x27	; 39
    494e:	7f 2e       	mov	r7, r31
    4950:	f0 2d       	mov	r31, r0
#ifndef UART_DEBUG
	uint8_t idx = port_map(port);
	
	//if (idx==0){uart_enqueue(&uctrl, datain);} //xxx
	
	uart_buffer[idx][uart_head[idx]] = datain;
    4952:	00 e4       	ldi	r16, 0x40	; 64
    4954:	13 e3       	ldi	r17, 0x33	; 51
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    4956:	0f 2e       	mov	r0, r31
    4958:	f0 eb       	ldi	r31, 0xB0	; 176
    495a:	ef 2e       	mov	r14, r31
    495c:	f8 e0       	ldi	r31, 0x08	; 8
    495e:	ff 2e       	mov	r15, r31
    4960:	f0 2d       	mov	r31, r0
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    4962:	cc e4       	ldi	r28, 0x4C	; 76
    4964:	df e3       	ldi	r29, 0x3F	; 63
	uint8_t incomingByte;
	//keep receiving until data register is empty or incoming queue is full
	while (((port->STATUS & _BV(7)) == B8(10000000)) && (uart_icount(port) < MAX_IBUFFER_LEN)){
		incomingByte = port->DATA;
		uart_enqueue(&udata, incomingByte); //xxx - echo to data port
		if (incomingByte == 0x0D) {lcd_flow_control = LCD_DONE_COMMAND;}
    4966:	0f 2e       	mov	r0, r31
    4968:	ff e4       	ldi	r31, 0x4F	; 79
    496a:	cf 2e       	mov	r12, r31
    496c:	f0 2d       	mov	r31, r0
	}
}

inline void uart_ienqueue(USART_t* port, uint8_t datain){
	uint8_t idx = port_map(port);
	uart_ibuffer[idx][uart_ihead[idx]] = datain;
    496e:	0f 2e       	mov	r0, r31
    4970:	fc e3       	ldi	r31, 0x3C	; 60
    4972:	4f 2e       	mov	r4, r31
    4974:	f7 e2       	ldi	r31, 0x27	; 39
    4976:	5f 2e       	mov	r5, r31
    4978:	f0 2d       	mov	r31, r0
}

void inline uart_receive_lcd(USART_t* port){
	uint8_t incomingByte;
	//keep receiving until data register is empty or incoming queue is full
	while (((port->STATUS & _BV(7)) == B8(10000000)) && (uart_icount(port) < MAX_IBUFFER_LEN)){
    497a:	ac c0       	rjmp	.+344    	; 0x4ad4 <uart_receive_lcd+0x1bc>
		incomingByte = port->DATA;
    497c:	d5 01       	movw	r26, r10
    497e:	dc 90       	ld	r13, X
#ifndef UART_DEBUG
	uint8_t idx = port_map(port);
	
	//if (idx==0){uart_enqueue(&uctrl, datain);} //xxx
	
	uart_buffer[idx][uart_head[idx]] = datain;
    4980:	f8 01       	movw	r30, r16
    4982:	80 81       	ld	r24, Z
    4984:	91 81       	ldd	r25, Z+1	; 0x01
    4986:	8e 5b       	subi	r24, 0xBE	; 190
    4988:	94 4c       	sbci	r25, 0xC4	; 196
    498a:	dc 01       	movw	r26, r24
    498c:	dc 92       	st	X, r13
	uart_head[idx]++;
    498e:	80 81       	ld	r24, Z
    4990:	91 81       	ldd	r25, Z+1	; 0x01
    4992:	01 96       	adiw	r24, 0x01	; 1
    4994:	80 83       	st	Z, r24
    4996:	91 83       	std	Z+1, r25	; 0x01
	if (uart_head[idx] >= MAX_BUFFER_LEN){
    4998:	80 81       	ld	r24, Z
    499a:	91 81       	ldd	r25, Z+1	; 0x01
    499c:	b4 e0       	ldi	r27, 0x04	; 4
    499e:	80 30       	cpi	r24, 0x00	; 0
    49a0:	9b 07       	cpc	r25, r27
    49a2:	10 f0       	brcs	.+4      	; 0x49a8 <uart_receive_lcd+0x90>
		uart_head[idx] = 0;
    49a4:	10 82       	st	Z, r1
    49a6:	11 82       	std	Z+1, r1	; 0x01
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    49a8:	f7 01       	movw	r30, r14
    49aa:	81 81       	ldd	r24, Z+1	; 0x01
    49ac:	85 fd       	sbrc	r24, 5
    49ae:	1a c0       	rjmp	.+52     	; 0x49e4 <uart_receive_lcd+0xcc>
    49b0:	32 c0       	rjmp	.+100    	; 0x4a16 <uart_receive_lcd+0xfe>
}

inline uint8_t uart_dequeue(USART_t* port){
	uint8_t idx = port_map(port);
	uint16_t oldtail;
	oldtail = uart_tail[idx];
    49b2:	e8 81       	ld	r30, Y
    49b4:	f9 81       	ldd	r31, Y+1	; 0x01
	uart_tail[idx]++;
    49b6:	88 81       	ld	r24, Y
    49b8:	99 81       	ldd	r25, Y+1	; 0x01
    49ba:	01 96       	adiw	r24, 0x01	; 1
    49bc:	88 83       	st	Y, r24
    49be:	99 83       	std	Y+1, r25	; 0x01
	if (uart_tail[idx] >= MAX_BUFFER_LEN){
    49c0:	88 81       	ld	r24, Y
    49c2:	99 81       	ldd	r25, Y+1	; 0x01
    49c4:	24 e0       	ldi	r18, 0x04	; 4
    49c6:	80 30       	cpi	r24, 0x00	; 0
    49c8:	92 07       	cpc	r25, r18
    49ca:	10 f0       	brcs	.+4      	; 0x49d0 <uart_receive_lcd+0xb8>
		uart_tail[idx] = 0;
    49cc:	18 82       	st	Y, r1
    49ce:	19 82       	std	Y+1, r1	; 0x01
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    49d0:	ee 5b       	subi	r30, 0xBE	; 190
    49d2:	f4 4c       	sbci	r31, 0xC4	; 196
    49d4:	80 81       	ld	r24, Z
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
    49d6:	d7 01       	movw	r26, r14
    49d8:	8c 93       	st	X, r24
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    49da:	11 96       	adiw	r26, 0x01	; 1
    49dc:	8c 91       	ld	r24, X
    49de:	11 97       	sbiw	r26, 0x01	; 1
    49e0:	85 ff       	sbrs	r24, 5
    49e2:	19 c0       	rjmp	.+50     	; 0x4a16 <uart_receive_lcd+0xfe>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    49e4:	f8 01       	movw	r30, r16
    49e6:	80 81       	ld	r24, Z
    49e8:	91 81       	ldd	r25, Z+1	; 0x01
    49ea:	28 81       	ld	r18, Y
    49ec:	39 81       	ldd	r19, Y+1	; 0x01
    49ee:	82 17       	cp	r24, r18
    49f0:	93 07       	cpc	r25, r19
    49f2:	38 f0       	brcs	.+14     	; 0x4a02 <uart_receive_lcd+0xea>
		return (uart_head[idx] - uart_tail[idx]);
    49f4:	80 81       	ld	r24, Z
    49f6:	91 81       	ldd	r25, Z+1	; 0x01
    49f8:	28 81       	ld	r18, Y
    49fa:	39 81       	ldd	r19, Y+1	; 0x01
    49fc:	82 1b       	sub	r24, r18
    49fe:	93 0b       	sbc	r25, r19
    4a00:	08 c0       	rjmp	.+16     	; 0x4a12 <uart_receive_lcd+0xfa>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    4a02:	80 81       	ld	r24, Z
    4a04:	91 81       	ldd	r25, Z+1	; 0x01
    4a06:	28 81       	ld	r18, Y
    4a08:	39 81       	ldd	r19, Y+1	; 0x01
    4a0a:	80 50       	subi	r24, 0x00	; 0
    4a0c:	9c 4f       	sbci	r25, 0xFC	; 252
    4a0e:	82 1b       	sub	r24, r18
    4a10:	93 0b       	sbc	r25, r19
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    4a12:	00 97       	sbiw	r24, 0x00	; 0
    4a14:	71 f6       	brne	.-100    	; 0x49b2 <uart_receive_lcd+0x9a>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    4a16:	f8 01       	movw	r30, r16
    4a18:	80 81       	ld	r24, Z
    4a1a:	91 81       	ldd	r25, Z+1	; 0x01
    4a1c:	28 81       	ld	r18, Y
    4a1e:	39 81       	ldd	r19, Y+1	; 0x01
    4a20:	82 17       	cp	r24, r18
    4a22:	93 07       	cpc	r25, r19
    4a24:	38 f0       	brcs	.+14     	; 0x4a34 <uart_receive_lcd+0x11c>
		return (uart_head[idx] - uart_tail[idx]);
    4a26:	80 81       	ld	r24, Z
    4a28:	91 81       	ldd	r25, Z+1	; 0x01
    4a2a:	28 81       	ld	r18, Y
    4a2c:	39 81       	ldd	r19, Y+1	; 0x01
    4a2e:	82 1b       	sub	r24, r18
    4a30:	93 0b       	sbc	r25, r19
    4a32:	08 c0       	rjmp	.+16     	; 0x4a44 <uart_receive_lcd+0x12c>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    4a34:	80 81       	ld	r24, Z
    4a36:	91 81       	ldd	r25, Z+1	; 0x01
    4a38:	28 81       	ld	r18, Y
    4a3a:	39 81       	ldd	r19, Y+1	; 0x01
    4a3c:	80 50       	subi	r24, 0x00	; 0
    4a3e:	9c 4f       	sbci	r25, 0xFC	; 252
    4a40:	82 1b       	sub	r24, r18
    4a42:	93 0b       	sbc	r25, r19
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
	}
	//disable the tx outgoing hardware buffer ready interrupt if we have nothing more to put in it.
	if(uart_count(port)>0) uart_txbuffer_enable(port);
    4a44:	00 97       	sbiw	r24, 0x00	; 0
    4a46:	21 f0       	breq	.+8      	; 0x4a50 <uart_receive_lcd+0x138>
    4a48:	c7 01       	movw	r24, r14
    4a4a:	0e 94 98 1c 	call	0x3930	; 0x3930 <uart_txbuffer_enable>
    4a4e:	03 c0       	rjmp	.+6      	; 0x4a56 <uart_receive_lcd+0x13e>
	else uart_txbuffer_disable(port);
    4a50:	c7 01       	movw	r24, r14
    4a52:	0e 94 9d 1c 	call	0x393a	; 0x393a <uart_txbuffer_disable>
	uint8_t incomingByte;
	//keep receiving until data register is empty or incoming queue is full
	while (((port->STATUS & _BV(7)) == B8(10000000)) && (uart_icount(port) < MAX_IBUFFER_LEN)){
		incomingByte = port->DATA;
		uart_enqueue(&udata, incomingByte); //xxx - echo to data port
		if (incomingByte == 0x0D) {lcd_flow_control = LCD_DONE_COMMAND;}
    4a56:	bd e0       	ldi	r27, 0x0D	; 13
    4a58:	db 16       	cp	r13, r27
    4a5a:	11 f4       	brne	.+4      	; 0x4a60 <uart_receive_lcd+0x148>
    4a5c:	c0 92 24 27 	sts	0x2724, r12
		lcd_set_touch(incomingByte); //write to touch-command listener
    4a60:	8d 2d       	mov	r24, r13
    4a62:	0e 94 de 10 	call	0x21bc	; 0x21bc <lcd_set_touch>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    4a66:	e0 eb       	ldi	r30, 0xB0	; 176
    4a68:	ae 16       	cp	r10, r30
    4a6a:	eb e0       	ldi	r30, 0x0B	; 11
    4a6c:	be 06       	cpc	r11, r30
    4a6e:	61 f0       	breq	.+24     	; 0x4a88 <uart_receive_lcd+0x170>
	if (port == &uctrl) {return 1;}
    4a70:	f0 ea       	ldi	r31, 0xA0	; 160
    4a72:	af 16       	cp	r10, r31
    4a74:	f8 e0       	ldi	r31, 0x08	; 8
    4a76:	bf 06       	cpc	r11, r31
    4a78:	49 f0       	breq	.+18     	; 0x4a8c <uart_receive_lcd+0x174>
	if (port == &udata) {return 2;}
    4a7a:	20 eb       	ldi	r18, 0xB0	; 176
    4a7c:	a2 16       	cp	r10, r18
    4a7e:	28 e0       	ldi	r18, 0x08	; 8
    4a80:	b2 06       	cpc	r11, r18
    4a82:	31 f4       	brne	.+12     	; 0x4a90 <uart_receive_lcd+0x178>
    4a84:	42 e0       	ldi	r20, 0x02	; 2
    4a86:	05 c0       	rjmp	.+10     	; 0x4a92 <uart_receive_lcd+0x17a>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    4a88:	40 e0       	ldi	r20, 0x00	; 0
    4a8a:	03 c0       	rjmp	.+6      	; 0x4a92 <uart_receive_lcd+0x17a>
	if (port == &uctrl) {return 1;}
    4a8c:	41 e0       	ldi	r20, 0x01	; 1
    4a8e:	01 c0       	rjmp	.+2      	; 0x4a92 <uart_receive_lcd+0x17a>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    4a90:	40 e0       	ldi	r20, 0x00	; 0
	}
}

inline void uart_ienqueue(USART_t* port, uint8_t datain){
	uint8_t idx = port_map(port);
	uart_ibuffer[idx][uart_ihead[idx]] = datain;
    4a92:	50 e0       	ldi	r21, 0x00	; 0
    4a94:	ca 01       	movw	r24, r20
    4a96:	88 0f       	add	r24, r24
    4a98:	99 1f       	adc	r25, r25
    4a9a:	f4 01       	movw	r30, r8
    4a9c:	e8 0f       	add	r30, r24
    4a9e:	f9 1f       	adc	r31, r25
    4aa0:	20 81       	ld	r18, Z
    4aa2:	31 81       	ldd	r19, Z+1	; 0x01
    4aa4:	ca 01       	movw	r24, r20
    4aa6:	98 2f       	mov	r25, r24
    4aa8:	88 27       	eor	r24, r24
    4aaa:	99 0f       	add	r25, r25
    4aac:	99 0f       	add	r25, r25
    4aae:	82 0f       	add	r24, r18
    4ab0:	93 1f       	adc	r25, r19
    4ab2:	84 0d       	add	r24, r4
    4ab4:	95 1d       	adc	r25, r5
    4ab6:	dc 01       	movw	r26, r24
    4ab8:	dc 92       	st	X, r13
	uart_ihead[idx]++;
    4aba:	80 81       	ld	r24, Z
    4abc:	91 81       	ldd	r25, Z+1	; 0x01
    4abe:	01 96       	adiw	r24, 0x01	; 1
    4ac0:	80 83       	st	Z, r24
    4ac2:	91 83       	std	Z+1, r25	; 0x01
	if (uart_ihead[idx] >= MAX_IBUFFER_LEN){
    4ac4:	80 81       	ld	r24, Z
    4ac6:	91 81       	ldd	r25, Z+1	; 0x01
    4ac8:	b4 e0       	ldi	r27, 0x04	; 4
    4aca:	80 30       	cpi	r24, 0x00	; 0
    4acc:	9b 07       	cpc	r25, r27
    4ace:	10 f0       	brcs	.+4      	; 0x4ad4 <uart_receive_lcd+0x1bc>
		uart_ihead[idx] = 0;
    4ad0:	10 82       	st	Z, r1
    4ad2:	11 82       	std	Z+1, r1	; 0x01
}

void inline uart_receive_lcd(USART_t* port){
	uint8_t incomingByte;
	//keep receiving until data register is empty or incoming queue is full
	while (((port->STATUS & _BV(7)) == B8(10000000)) && (uart_icount(port) < MAX_IBUFFER_LEN)){
    4ad4:	d5 01       	movw	r26, r10
    4ad6:	11 96       	adiw	r26, 0x01	; 1
    4ad8:	8c 91       	ld	r24, X
    4ada:	11 97       	sbiw	r26, 0x01	; 1
    4adc:	88 23       	and	r24, r24
    4ade:	0c f0       	brlt	.+2      	; 0x4ae2 <uart_receive_lcd+0x1ca>
    4ae0:	4d c0       	rjmp	.+154    	; 0x4b7c <uart_receive_lcd+0x264>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    4ae2:	b0 eb       	ldi	r27, 0xB0	; 176
    4ae4:	ab 16       	cp	r10, r27
    4ae6:	bb e0       	ldi	r27, 0x0B	; 11
    4ae8:	bb 06       	cpc	r11, r27
    4aea:	61 f0       	breq	.+24     	; 0x4b04 <uart_receive_lcd+0x1ec>
	if (port == &uctrl) {return 1;}
    4aec:	e0 ea       	ldi	r30, 0xA0	; 160
    4aee:	ae 16       	cp	r10, r30
    4af0:	e8 e0       	ldi	r30, 0x08	; 8
    4af2:	be 06       	cpc	r11, r30
    4af4:	49 f0       	breq	.+18     	; 0x4b08 <uart_receive_lcd+0x1f0>
	if (port == &udata) {return 2;}
    4af6:	f0 eb       	ldi	r31, 0xB0	; 176
    4af8:	af 16       	cp	r10, r31
    4afa:	f8 e0       	ldi	r31, 0x08	; 8
    4afc:	bf 06       	cpc	r11, r31
    4afe:	31 f4       	brne	.+12     	; 0x4b0c <uart_receive_lcd+0x1f4>
    4b00:	22 e0       	ldi	r18, 0x02	; 2
    4b02:	05 c0       	rjmp	.+10     	; 0x4b0e <uart_receive_lcd+0x1f6>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    4b04:	20 e0       	ldi	r18, 0x00	; 0
    4b06:	03 c0       	rjmp	.+6      	; 0x4b0e <uart_receive_lcd+0x1f6>
	if (port == &uctrl) {return 1;}
    4b08:	21 e0       	ldi	r18, 0x01	; 1
    4b0a:	01 c0       	rjmp	.+2      	; 0x4b0e <uart_receive_lcd+0x1f6>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    4b0c:	20 e0       	ldi	r18, 0x00	; 0
	uart_itail[idx] = 0;
}

inline uint16_t uart_icount(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_ihead[idx] >= uart_itail[idx]){	
    4b0e:	30 e0       	ldi	r19, 0x00	; 0
    4b10:	c9 01       	movw	r24, r18
    4b12:	88 0f       	add	r24, r24
    4b14:	99 1f       	adc	r25, r25
    4b16:	f4 01       	movw	r30, r8
    4b18:	e8 0f       	add	r30, r24
    4b1a:	f9 1f       	adc	r31, r25
    4b1c:	40 81       	ld	r20, Z
    4b1e:	51 81       	ldd	r21, Z+1	; 0x01
    4b20:	f3 01       	movw	r30, r6
    4b22:	e8 0f       	add	r30, r24
    4b24:	f9 1f       	adc	r31, r25
    4b26:	80 81       	ld	r24, Z
    4b28:	91 81       	ldd	r25, Z+1	; 0x01
    4b2a:	48 17       	cp	r20, r24
    4b2c:	59 07       	cpc	r21, r25
    4b2e:	88 f0       	brcs	.+34     	; 0x4b52 <uart_receive_lcd+0x23a>
		return (uart_ihead[idx] - uart_itail[idx]);
    4b30:	22 0f       	add	r18, r18
    4b32:	33 1f       	adc	r19, r19
    4b34:	f4 01       	movw	r30, r8
    4b36:	e2 0f       	add	r30, r18
    4b38:	f3 1f       	adc	r31, r19
    4b3a:	40 81       	ld	r20, Z
    4b3c:	51 81       	ldd	r21, Z+1	; 0x01
    4b3e:	f3 01       	movw	r30, r6
    4b40:	e2 0f       	add	r30, r18
    4b42:	f3 1f       	adc	r31, r19
    4b44:	80 81       	ld	r24, Z
    4b46:	91 81       	ldd	r25, Z+1	; 0x01
    4b48:	9a 01       	movw	r18, r20
    4b4a:	28 1b       	sub	r18, r24
    4b4c:	39 0b       	sbc	r19, r25
    4b4e:	c9 01       	movw	r24, r18
    4b50:	10 c0       	rjmp	.+32     	; 0x4b72 <uart_receive_lcd+0x25a>
	}
	else {
		return ((MAX_IBUFFER_LEN-uart_itail[idx])+uart_ihead[idx]);
    4b52:	22 0f       	add	r18, r18
    4b54:	33 1f       	adc	r19, r19
    4b56:	f4 01       	movw	r30, r8
    4b58:	e2 0f       	add	r30, r18
    4b5a:	f3 1f       	adc	r31, r19
    4b5c:	80 81       	ld	r24, Z
    4b5e:	91 81       	ldd	r25, Z+1	; 0x01
    4b60:	f3 01       	movw	r30, r6
    4b62:	e2 0f       	add	r30, r18
    4b64:	f3 1f       	adc	r31, r19
    4b66:	20 81       	ld	r18, Z
    4b68:	31 81       	ldd	r19, Z+1	; 0x01
    4b6a:	80 50       	subi	r24, 0x00	; 0
    4b6c:	9c 4f       	sbci	r25, 0xFC	; 252
    4b6e:	82 1b       	sub	r24, r18
    4b70:	93 0b       	sbc	r25, r19
}

void inline uart_receive_lcd(USART_t* port){
	uint8_t incomingByte;
	//keep receiving until data register is empty or incoming queue is full
	while (((port->STATUS & _BV(7)) == B8(10000000)) && (uart_icount(port) < MAX_IBUFFER_LEN)){
    4b72:	34 e0       	ldi	r19, 0x04	; 4
    4b74:	80 30       	cpi	r24, 0x00	; 0
    4b76:	93 07       	cpc	r25, r19
    4b78:	08 f4       	brcc	.+2      	; 0x4b7c <uart_receive_lcd+0x264>
    4b7a:	00 cf       	rjmp	.-512    	; 0x497c <uart_receive_lcd+0x64>
		uart_enqueue(&udata, incomingByte); //xxx - echo to data port
		if (incomingByte == 0x0D) {lcd_flow_control = LCD_DONE_COMMAND;}
		lcd_set_touch(incomingByte); //write to touch-command listener
		uart_ienqueue(port, incomingByte);
	}
}
    4b7c:	df 91       	pop	r29
    4b7e:	cf 91       	pop	r28
    4b80:	1f 91       	pop	r17
    4b82:	0f 91       	pop	r16
    4b84:	ff 90       	pop	r15
    4b86:	ef 90       	pop	r14
    4b88:	df 90       	pop	r13
    4b8a:	cf 90       	pop	r12
    4b8c:	bf 90       	pop	r11
    4b8e:	af 90       	pop	r10
    4b90:	9f 90       	pop	r9
    4b92:	8f 90       	pop	r8
    4b94:	7f 90       	pop	r7
    4b96:	6f 90       	pop	r6
    4b98:	5f 90       	pop	r5
    4b9a:	4f 90       	pop	r4
    4b9c:	08 95       	ret

00004b9e <init_uart_obuffer>:
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    4b9e:	2b e0       	ldi	r18, 0x0B	; 11
    4ba0:	80 3b       	cpi	r24, 0xB0	; 176
    4ba2:	92 07       	cpc	r25, r18
    4ba4:	51 f0       	breq	.+20     	; 0x4bba <init_uart_obuffer+0x1c>
	if (port == &uctrl) {return 1;}
    4ba6:	e8 e0       	ldi	r30, 0x08	; 8
    4ba8:	80 3a       	cpi	r24, 0xA0	; 160
    4baa:	9e 07       	cpc	r25, r30
    4bac:	41 f0       	breq	.+16     	; 0x4bbe <init_uart_obuffer+0x20>
	if (port == &udata) {return 2;}
    4bae:	f8 e0       	ldi	r31, 0x08	; 8
    4bb0:	80 3b       	cpi	r24, 0xB0	; 176
    4bb2:	9f 07       	cpc	r25, r31
    4bb4:	31 f4       	brne	.+12     	; 0x4bc2 <init_uart_obuffer+0x24>
    4bb6:	82 e0       	ldi	r24, 0x02	; 2
    4bb8:	05 c0       	rjmp	.+10     	; 0x4bc4 <init_uart_obuffer+0x26>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    4bba:	80 e0       	ldi	r24, 0x00	; 0
    4bbc:	03 c0       	rjmp	.+6      	; 0x4bc4 <init_uart_obuffer+0x26>
	if (port == &uctrl) {return 1;}
    4bbe:	81 e0       	ldi	r24, 0x01	; 1
    4bc0:	01 c0       	rjmp	.+2      	; 0x4bc4 <init_uart_obuffer+0x26>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    4bc2:	80 e0       	ldi	r24, 0x00	; 0
	No protection is provided for buffer overflow! Be careful! */
//***************************************************

void init_uart_obuffer(USART_t* port){
	uint8_t idx = port_map(port);
	uart_head[idx] = 0;
    4bc4:	90 e0       	ldi	r25, 0x00	; 0
    4bc6:	88 0f       	add	r24, r24
    4bc8:	99 1f       	adc	r25, r25
    4bca:	fc 01       	movw	r30, r24
    4bcc:	e4 5c       	subi	r30, 0xC4	; 196
    4bce:	fc 4c       	sbci	r31, 0xCC	; 204
    4bd0:	10 82       	st	Z, r1
    4bd2:	11 82       	std	Z+1, r1	; 0x01
	uart_tail[idx] = 0;
    4bd4:	88 5b       	subi	r24, 0xB8	; 184
    4bd6:	90 4c       	sbci	r25, 0xC0	; 192
    4bd8:	fc 01       	movw	r30, r24
    4bda:	10 82       	st	Z, r1
    4bdc:	11 82       	std	Z+1, r1	; 0x01
}
    4bde:	08 95       	ret

00004be0 <uart_count>:
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    4be0:	2b e0       	ldi	r18, 0x0B	; 11
    4be2:	80 3b       	cpi	r24, 0xB0	; 176
    4be4:	92 07       	cpc	r25, r18
    4be6:	51 f0       	breq	.+20     	; 0x4bfc <uart_count+0x1c>
	if (port == &uctrl) {return 1;}
    4be8:	e8 e0       	ldi	r30, 0x08	; 8
    4bea:	80 3a       	cpi	r24, 0xA0	; 160
    4bec:	9e 07       	cpc	r25, r30
    4bee:	41 f0       	breq	.+16     	; 0x4c00 <uart_count+0x20>
	if (port == &udata) {return 2;}
    4bf0:	f8 e0       	ldi	r31, 0x08	; 8
    4bf2:	80 3b       	cpi	r24, 0xB0	; 176
    4bf4:	9f 07       	cpc	r25, r31
    4bf6:	31 f4       	brne	.+12     	; 0x4c04 <uart_count+0x24>
    4bf8:	82 e0       	ldi	r24, 0x02	; 2
    4bfa:	05 c0       	rjmp	.+10     	; 0x4c06 <uart_count+0x26>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    4bfc:	80 e0       	ldi	r24, 0x00	; 0
    4bfe:	03 c0       	rjmp	.+6      	; 0x4c06 <uart_count+0x26>
	if (port == &uctrl) {return 1;}
    4c00:	81 e0       	ldi	r24, 0x01	; 1
    4c02:	01 c0       	rjmp	.+2      	; 0x4c06 <uart_count+0x26>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    4c04:	80 e0       	ldi	r24, 0x00	; 0
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    4c06:	90 e0       	ldi	r25, 0x00	; 0
    4c08:	9c 01       	movw	r18, r24
    4c0a:	22 0f       	add	r18, r18
    4c0c:	33 1f       	adc	r19, r19
    4c0e:	f9 01       	movw	r30, r18
    4c10:	e4 5c       	subi	r30, 0xC4	; 196
    4c12:	fc 4c       	sbci	r31, 0xCC	; 204
    4c14:	40 81       	ld	r20, Z
    4c16:	51 81       	ldd	r21, Z+1	; 0x01
    4c18:	28 5b       	subi	r18, 0xB8	; 184
    4c1a:	30 4c       	sbci	r19, 0xC0	; 192
    4c1c:	f9 01       	movw	r30, r18
    4c1e:	20 81       	ld	r18, Z
    4c20:	31 81       	ldd	r19, Z+1	; 0x01
    4c22:	42 17       	cp	r20, r18
    4c24:	53 07       	cpc	r21, r19
    4c26:	80 f0       	brcs	.+32     	; 0x4c48 <uart_count+0x68>
		return (uart_head[idx] - uart_tail[idx]);
    4c28:	9c 01       	movw	r18, r24
    4c2a:	22 0f       	add	r18, r18
    4c2c:	33 1f       	adc	r19, r19
    4c2e:	f9 01       	movw	r30, r18
    4c30:	e4 5c       	subi	r30, 0xC4	; 196
    4c32:	fc 4c       	sbci	r31, 0xCC	; 204
    4c34:	80 81       	ld	r24, Z
    4c36:	91 81       	ldd	r25, Z+1	; 0x01
    4c38:	28 5b       	subi	r18, 0xB8	; 184
    4c3a:	30 4c       	sbci	r19, 0xC0	; 192
    4c3c:	f9 01       	movw	r30, r18
    4c3e:	20 81       	ld	r18, Z
    4c40:	31 81       	ldd	r19, Z+1	; 0x01
    4c42:	82 1b       	sub	r24, r18
    4c44:	93 0b       	sbc	r25, r19
    4c46:	08 95       	ret
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    4c48:	9c 01       	movw	r18, r24
    4c4a:	22 0f       	add	r18, r18
    4c4c:	33 1f       	adc	r19, r19
    4c4e:	f9 01       	movw	r30, r18
    4c50:	e4 5c       	subi	r30, 0xC4	; 196
    4c52:	fc 4c       	sbci	r31, 0xCC	; 204
    4c54:	40 81       	ld	r20, Z
    4c56:	51 81       	ldd	r21, Z+1	; 0x01
    4c58:	28 5b       	subi	r18, 0xB8	; 184
    4c5a:	30 4c       	sbci	r19, 0xC0	; 192
    4c5c:	f9 01       	movw	r30, r18
    4c5e:	20 81       	ld	r18, Z
    4c60:	31 81       	ldd	r19, Z+1	; 0x01
    4c62:	ca 01       	movw	r24, r20
    4c64:	80 50       	subi	r24, 0x00	; 0
    4c66:	9c 4f       	sbci	r25, 0xFC	; 252
    4c68:	82 1b       	sub	r24, r18
    4c6a:	93 0b       	sbc	r25, r19
	}
}
    4c6c:	08 95       	ret

00004c6e <uart_enqueue_string>:

///Enqueue a string into the outgoing serial queue. Adds CR terminator to string.
inline void uart_enqueue_string(USART_t* port, char* string_in){
    4c6e:	2f 92       	push	r2
    4c70:	3f 92       	push	r3
    4c72:	4f 92       	push	r4
    4c74:	5f 92       	push	r5
    4c76:	6f 92       	push	r6
    4c78:	7f 92       	push	r7
    4c7a:	8f 92       	push	r8
    4c7c:	9f 92       	push	r9
    4c7e:	af 92       	push	r10
    4c80:	bf 92       	push	r11
    4c82:	cf 92       	push	r12
    4c84:	df 92       	push	r13
    4c86:	ef 92       	push	r14
    4c88:	ff 92       	push	r15
    4c8a:	0f 93       	push	r16
    4c8c:	1f 93       	push	r17
    4c8e:	cf 93       	push	r28
    4c90:	df 93       	push	r29
    4c92:	00 d0       	rcall	.+0      	; 0x4c94 <uart_enqueue_string+0x26>
    4c94:	0f 92       	push	r0
    4c96:	cd b7       	in	r28, 0x3d	; 61
    4c98:	de b7       	in	r29, 0x3e	; 62
    4c9a:	6c 01       	movw	r12, r24
	uint16_t length = (uint16_t)strlen(string_in);
    4c9c:	26 2f       	mov	r18, r22
    4c9e:	37 2f       	mov	r19, r23
    4ca0:	d9 01       	movw	r26, r18
    4ca2:	0d 90       	ld	r0, X+
    4ca4:	00 20       	and	r0, r0
    4ca6:	e9 f7       	brne	.-6      	; 0x4ca2 <uart_enqueue_string+0x34>
    4ca8:	11 97       	sbiw	r26, 0x01	; 1
    4caa:	cd 01       	movw	r24, r26
    4cac:	82 1b       	sub	r24, r18
    4cae:	93 0b       	sbc	r25, r19
    4cb0:	8b 83       	std	Y+3, r24	; 0x03
    4cb2:	9c 83       	std	Y+4, r25	; 0x04
	for (uint16_t i=0; i<length; i++) {uart_enqueue(port, (uint8_t)string_in[i]);}
    4cb4:	00 97       	sbiw	r24, 0x00	; 0
    4cb6:	09 f4       	brne	.+2      	; 0x4cba <uart_enqueue_string+0x4c>
    4cb8:	4a c3       	rjmp	.+1684   	; 0x534e <uart_enqueue_string+0x6e0>
    4cba:	69 83       	std	Y+1, r22	; 0x01
    4cbc:	7a 83       	std	Y+2, r23	; 0x02
    4cbe:	22 24       	eor	r2, r2
    4cc0:	33 24       	eor	r3, r3
#ifndef UART_DEBUG
	uint8_t idx = port_map(port);
	
	//if (idx==0){uart_enqueue(&uctrl, datain);} //xxx
	
	uart_buffer[idx][uart_head[idx]] = datain;
    4cc2:	0f 2e       	mov	r0, r31
    4cc4:	fc e3       	ldi	r31, 0x3C	; 60
    4cc6:	6f 2e       	mov	r6, r31
    4cc8:	f3 e3       	ldi	r31, 0x33	; 51
    4cca:	7f 2e       	mov	r7, r31
    4ccc:	f0 2d       	mov	r31, r0
    4cce:	0f 2e       	mov	r0, r31
    4cd0:	f2 e4       	ldi	r31, 0x42	; 66
    4cd2:	4f 2e       	mov	r4, r31
    4cd4:	f3 e3       	ldi	r31, 0x33	; 51
    4cd6:	5f 2e       	mov	r5, r31
    4cd8:	f0 2d       	mov	r31, r0
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    4cda:	0f 2e       	mov	r0, r31
    4cdc:	f8 e4       	ldi	r31, 0x48	; 72
    4cde:	8f 2e       	mov	r8, r31
    4ce0:	ff e3       	ldi	r31, 0x3F	; 63
    4ce2:	9f 2e       	mov	r9, r31
    4ce4:	f0 2d       	mov	r31, r0
#ifndef UART_DEBUG
	uint8_t idx = port_map(port);
	
	//if (idx==0){uart_enqueue(&uctrl, datain);} //xxx
	
	uart_buffer[idx][uart_head[idx]] = datain;
    4ce6:	0f 2e       	mov	r0, r31
    4ce8:	f0 e4       	ldi	r31, 0x40	; 64
    4cea:	ef 2e       	mov	r14, r31
    4cec:	f3 e3       	ldi	r31, 0x33	; 51
    4cee:	ff 2e       	mov	r15, r31
    4cf0:	f0 2d       	mov	r31, r0
}

///Enqueue a string into the outgoing serial queue. Adds CR terminator to string.
inline void uart_enqueue_string(USART_t* port, char* string_in){
	uint16_t length = (uint16_t)strlen(string_in);
	for (uint16_t i=0; i<length; i++) {uart_enqueue(port, (uint8_t)string_in[i]);}
    4cf2:	a9 81       	ldd	r26, Y+1	; 0x01
    4cf4:	ba 81       	ldd	r27, Y+2	; 0x02
    4cf6:	7d 91       	ld	r23, X+
    4cf8:	a9 83       	std	Y+1, r26	; 0x01
    4cfa:	ba 83       	std	Y+2, r27	; 0x02
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    4cfc:	b0 eb       	ldi	r27, 0xB0	; 176
    4cfe:	cb 16       	cp	r12, r27
    4d00:	bb e0       	ldi	r27, 0x0B	; 11
    4d02:	db 06       	cpc	r13, r27
    4d04:	61 f0       	breq	.+24     	; 0x4d1e <uart_enqueue_string+0xb0>
	if (port == &uctrl) {return 1;}
    4d06:	e0 ea       	ldi	r30, 0xA0	; 160
    4d08:	ce 16       	cp	r12, r30
    4d0a:	e8 e0       	ldi	r30, 0x08	; 8
    4d0c:	de 06       	cpc	r13, r30
    4d0e:	49 f0       	breq	.+18     	; 0x4d22 <uart_enqueue_string+0xb4>
	if (port == &udata) {return 2;}
    4d10:	f0 eb       	ldi	r31, 0xB0	; 176
    4d12:	cf 16       	cp	r12, r31
    4d14:	f8 e0       	ldi	r31, 0x08	; 8
    4d16:	df 06       	cpc	r13, r31
    4d18:	31 f4       	brne	.+12     	; 0x4d26 <uart_enqueue_string+0xb8>
    4d1a:	62 e0       	ldi	r22, 0x02	; 2
    4d1c:	05 c0       	rjmp	.+10     	; 0x4d28 <uart_enqueue_string+0xba>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    4d1e:	60 e0       	ldi	r22, 0x00	; 0
    4d20:	03 c0       	rjmp	.+6      	; 0x4d28 <uart_enqueue_string+0xba>
	if (port == &uctrl) {return 1;}
    4d22:	61 e0       	ldi	r22, 0x01	; 1
    4d24:	01 c0       	rjmp	.+2      	; 0x4d28 <uart_enqueue_string+0xba>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    4d26:	60 e0       	ldi	r22, 0x00	; 0
#ifndef UART_DEBUG
	uint8_t idx = port_map(port);
	
	//if (idx==0){uart_enqueue(&uctrl, datain);} //xxx
	
	uart_buffer[idx][uart_head[idx]] = datain;
    4d28:	46 2f       	mov	r20, r22
    4d2a:	50 e0       	ldi	r21, 0x00	; 0
    4d2c:	ca 01       	movw	r24, r20
    4d2e:	88 0f       	add	r24, r24
    4d30:	99 1f       	adc	r25, r25
    4d32:	f3 01       	movw	r30, r6
    4d34:	e8 0f       	add	r30, r24
    4d36:	f9 1f       	adc	r31, r25
    4d38:	20 81       	ld	r18, Z
    4d3a:	31 81       	ldd	r19, Z+1	; 0x01
    4d3c:	ca 01       	movw	r24, r20
    4d3e:	98 2f       	mov	r25, r24
    4d40:	88 27       	eor	r24, r24
    4d42:	99 0f       	add	r25, r25
    4d44:	99 0f       	add	r25, r25
    4d46:	82 0f       	add	r24, r18
    4d48:	93 1f       	adc	r25, r19
    4d4a:	84 0d       	add	r24, r4
    4d4c:	95 1d       	adc	r25, r5
    4d4e:	dc 01       	movw	r26, r24
    4d50:	7c 93       	st	X, r23
	uart_head[idx]++;
    4d52:	80 81       	ld	r24, Z
    4d54:	91 81       	ldd	r25, Z+1	; 0x01
    4d56:	01 96       	adiw	r24, 0x01	; 1
    4d58:	80 83       	st	Z, r24
    4d5a:	91 83       	std	Z+1, r25	; 0x01
	if (uart_head[idx] >= MAX_BUFFER_LEN){
    4d5c:	80 81       	ld	r24, Z
    4d5e:	91 81       	ldd	r25, Z+1	; 0x01
    4d60:	b4 e0       	ldi	r27, 0x04	; 4
    4d62:	80 30       	cpi	r24, 0x00	; 0
    4d64:	9b 07       	cpc	r25, r27
    4d66:	10 f0       	brcs	.+4      	; 0x4d6c <uart_enqueue_string+0xfe>
		uart_head[idx] = 0;
    4d68:	10 82       	st	Z, r1
    4d6a:	11 82       	std	Z+1, r1	; 0x01
	}
	if (idx == 0){uart_transmit_lcd(port);} //start the transmission process.
    4d6c:	66 23       	and	r22, r22
    4d6e:	39 f0       	breq	.+14     	; 0x4d7e <uart_enqueue_string+0x110>
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    4d70:	d6 01       	movw	r26, r12
    4d72:	11 96       	adiw	r26, 0x01	; 1
    4d74:	8c 91       	ld	r24, X
    4d76:	11 97       	sbiw	r26, 0x01	; 1
    4d78:	85 fd       	sbrc	r24, 5
    4d7a:	44 c2       	rjmp	.+1160   	; 0x5204 <uart_enqueue_string+0x596>
    4d7c:	8e c2       	rjmp	.+1308   	; 0x529a <uart_enqueue_string+0x62c>
}

void inline uart_transmit_lcd(USART_t* port){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0) && (lcd_flow_control == LCD_READY)){
    4d7e:	f6 01       	movw	r30, r12
    4d80:	81 81       	ldd	r24, Z+1	; 0x01
    4d82:	85 fd       	sbrc	r24, 5
    4d84:	54 c1       	rjmp	.+680    	; 0x502e <uart_enqueue_string+0x3c0>
    4d86:	a8 c1       	rjmp	.+848    	; 0x50d8 <uart_enqueue_string+0x46a>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    4d88:	f0 eb       	ldi	r31, 0xB0	; 176
    4d8a:	cf 16       	cp	r12, r31
    4d8c:	fb e0       	ldi	r31, 0x0B	; 11
    4d8e:	df 06       	cpc	r13, r31
    4d90:	61 f0       	breq	.+24     	; 0x4daa <uart_enqueue_string+0x13c>
	if (port == &uctrl) {return 1;}
    4d92:	20 ea       	ldi	r18, 0xA0	; 160
    4d94:	c2 16       	cp	r12, r18
    4d96:	28 e0       	ldi	r18, 0x08	; 8
    4d98:	d2 06       	cpc	r13, r18
    4d9a:	49 f0       	breq	.+18     	; 0x4dae <uart_enqueue_string+0x140>
	if (port == &udata) {return 2;}
    4d9c:	30 eb       	ldi	r19, 0xB0	; 176
    4d9e:	c3 16       	cp	r12, r19
    4da0:	38 e0       	ldi	r19, 0x08	; 8
    4da2:	d3 06       	cpc	r13, r19
    4da4:	31 f4       	brne	.+12     	; 0x4db2 <uart_enqueue_string+0x144>
    4da6:	22 e0       	ldi	r18, 0x02	; 2
    4da8:	05 c0       	rjmp	.+10     	; 0x4db4 <uart_enqueue_string+0x146>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    4daa:	20 e0       	ldi	r18, 0x00	; 0
    4dac:	03 c0       	rjmp	.+6      	; 0x4db4 <uart_enqueue_string+0x146>
	if (port == &uctrl) {return 1;}
    4dae:	21 e0       	ldi	r18, 0x01	; 1
    4db0:	01 c0       	rjmp	.+2      	; 0x4db4 <uart_enqueue_string+0x146>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    4db2:	20 e0       	ldi	r18, 0x00	; 0
}

inline uint8_t uart_dequeue(USART_t* port){
	uint8_t idx = port_map(port);
	uint16_t oldtail;
	oldtail = uart_tail[idx];
    4db4:	30 e0       	ldi	r19, 0x00	; 0
    4db6:	c9 01       	movw	r24, r18
    4db8:	88 0f       	add	r24, r24
    4dba:	99 1f       	adc	r25, r25
    4dbc:	f4 01       	movw	r30, r8
    4dbe:	e8 0f       	add	r30, r24
    4dc0:	f9 1f       	adc	r31, r25
    4dc2:	40 81       	ld	r20, Z
    4dc4:	51 81       	ldd	r21, Z+1	; 0x01
	uart_tail[idx]++;
    4dc6:	80 81       	ld	r24, Z
    4dc8:	91 81       	ldd	r25, Z+1	; 0x01
    4dca:	01 96       	adiw	r24, 0x01	; 1
    4dcc:	80 83       	st	Z, r24
    4dce:	91 83       	std	Z+1, r25	; 0x01
	if (uart_tail[idx] >= MAX_BUFFER_LEN){
    4dd0:	80 81       	ld	r24, Z
    4dd2:	91 81       	ldd	r25, Z+1	; 0x01
    4dd4:	64 e0       	ldi	r22, 0x04	; 4
    4dd6:	80 30       	cpi	r24, 0x00	; 0
    4dd8:	96 07       	cpc	r25, r22
    4dda:	10 f0       	brcs	.+4      	; 0x4de0 <uart_enqueue_string+0x172>
		uart_tail[idx] = 0;
    4ddc:	10 82       	st	Z, r1
    4dde:	11 82       	std	Z+1, r1	; 0x01
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    4de0:	c9 01       	movw	r24, r18
    4de2:	98 2f       	mov	r25, r24
    4de4:	88 27       	eor	r24, r24
    4de6:	99 0f       	add	r25, r25
    4de8:	99 0f       	add	r25, r25
    4dea:	84 0f       	add	r24, r20
    4dec:	95 1f       	adc	r25, r21
    4dee:	84 0d       	add	r24, r4
    4df0:	95 1d       	adc	r25, r5
    4df2:	fc 01       	movw	r30, r24
    4df4:	b0 80       	ld	r11, Z
void inline uart_transmit_lcd(USART_t* port){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0) && (lcd_flow_control == LCD_READY)){
		toSend = uart_dequeue(port);
		if (toSend == 0x0D) {lcd_flow_control = LCD_BUSY;}
    4df6:	fd e0       	ldi	r31, 0x0D	; 13
    4df8:	bf 16       	cp	r11, r31
    4dfa:	19 f4       	brne	.+6      	; 0x4e02 <uart_enqueue_string+0x194>
    4dfc:	2e e4       	ldi	r18, 0x4E	; 78
    4dfe:	20 93 24 27 	sts	0x2724, r18
#ifndef UART_DEBUG
	uint8_t idx = port_map(port);
	
	//if (idx==0){uart_enqueue(&uctrl, datain);} //xxx
	
	uart_buffer[idx][uart_head[idx]] = datain;
    4e02:	d7 01       	movw	r26, r14
    4e04:	8d 91       	ld	r24, X+
    4e06:	9c 91       	ld	r25, X
    4e08:	11 97       	sbiw	r26, 0x01	; 1
    4e0a:	8e 5b       	subi	r24, 0xBE	; 190
    4e0c:	94 4c       	sbci	r25, 0xC4	; 196
    4e0e:	fc 01       	movw	r30, r24
    4e10:	a0 82       	st	Z, r10
	uart_head[idx]++;
    4e12:	8d 91       	ld	r24, X+
    4e14:	9c 91       	ld	r25, X
    4e16:	11 97       	sbiw	r26, 0x01	; 1
    4e18:	01 96       	adiw	r24, 0x01	; 1
    4e1a:	8d 93       	st	X+, r24
    4e1c:	9c 93       	st	X, r25
    4e1e:	11 97       	sbiw	r26, 0x01	; 1
	if (uart_head[idx] >= MAX_BUFFER_LEN){
    4e20:	8d 91       	ld	r24, X+
    4e22:	9c 91       	ld	r25, X
    4e24:	11 97       	sbiw	r26, 0x01	; 1
    4e26:	f4 e0       	ldi	r31, 0x04	; 4
    4e28:	80 30       	cpi	r24, 0x00	; 0
    4e2a:	9f 07       	cpc	r25, r31
    4e2c:	18 f0       	brcs	.+6      	; 0x4e34 <uart_enqueue_string+0x1c6>
		uart_head[idx] = 0;
    4e2e:	1d 92       	st	X+, r1
    4e30:	1c 92       	st	X, r1
    4e32:	11 97       	sbiw	r26, 0x01	; 1
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    4e34:	d8 01       	movw	r26, r16
    4e36:	11 96       	adiw	r26, 0x01	; 1
    4e38:	8c 91       	ld	r24, X
    4e3a:	11 97       	sbiw	r26, 0x01	; 1
    4e3c:	85 fd       	sbrc	r24, 5
    4e3e:	1f c0       	rjmp	.+62     	; 0x4e7e <uart_enqueue_string+0x210>
    4e40:	3f c0       	rjmp	.+126    	; 0x4ec0 <uart_enqueue_string+0x252>
}

inline uint8_t uart_dequeue(USART_t* port){
	uint8_t idx = port_map(port);
	uint16_t oldtail;
	oldtail = uart_tail[idx];
    4e42:	ac e4       	ldi	r26, 0x4C	; 76
    4e44:	bf e3       	ldi	r27, 0x3F	; 63
    4e46:	ed 91       	ld	r30, X+
    4e48:	fc 91       	ld	r31, X
    4e4a:	11 97       	sbiw	r26, 0x01	; 1
	uart_tail[idx]++;
    4e4c:	8d 91       	ld	r24, X+
    4e4e:	9c 91       	ld	r25, X
    4e50:	11 97       	sbiw	r26, 0x01	; 1
    4e52:	01 96       	adiw	r24, 0x01	; 1
    4e54:	8d 93       	st	X+, r24
    4e56:	9c 93       	st	X, r25
    4e58:	11 97       	sbiw	r26, 0x01	; 1
	if (uart_tail[idx] >= MAX_BUFFER_LEN){
    4e5a:	8d 91       	ld	r24, X+
    4e5c:	9c 91       	ld	r25, X
    4e5e:	11 97       	sbiw	r26, 0x01	; 1
    4e60:	b4 e0       	ldi	r27, 0x04	; 4
    4e62:	80 30       	cpi	r24, 0x00	; 0
    4e64:	9b 07       	cpc	r25, r27
    4e66:	18 f0       	brcs	.+6      	; 0x4e6e <uart_enqueue_string+0x200>
		uart_tail[idx] = 0;
    4e68:	1d 92       	st	X+, r1
    4e6a:	1c 92       	st	X, r1
    4e6c:	11 97       	sbiw	r26, 0x01	; 1
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    4e6e:	ee 5b       	subi	r30, 0xBE	; 190
    4e70:	f4 4c       	sbci	r31, 0xC4	; 196
    4e72:	80 81       	ld	r24, Z
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
    4e74:	f8 01       	movw	r30, r16
    4e76:	80 83       	st	Z, r24
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    4e78:	81 81       	ldd	r24, Z+1	; 0x01
    4e7a:	85 ff       	sbrs	r24, 5
    4e7c:	21 c0       	rjmp	.+66     	; 0x4ec0 <uart_enqueue_string+0x252>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    4e7e:	d7 01       	movw	r26, r14
    4e80:	8d 91       	ld	r24, X+
    4e82:	9c 91       	ld	r25, X
    4e84:	11 97       	sbiw	r26, 0x01	; 1
    4e86:	ec e4       	ldi	r30, 0x4C	; 76
    4e88:	ff e3       	ldi	r31, 0x3F	; 63
    4e8a:	20 81       	ld	r18, Z
    4e8c:	31 81       	ldd	r19, Z+1	; 0x01
    4e8e:	82 17       	cp	r24, r18
    4e90:	93 07       	cpc	r25, r19
    4e92:	40 f0       	brcs	.+16     	; 0x4ea4 <uart_enqueue_string+0x236>
		return (uart_head[idx] - uart_tail[idx]);
    4e94:	8d 91       	ld	r24, X+
    4e96:	9c 91       	ld	r25, X
    4e98:	11 97       	sbiw	r26, 0x01	; 1
    4e9a:	20 81       	ld	r18, Z
    4e9c:	31 81       	ldd	r19, Z+1	; 0x01
    4e9e:	82 1b       	sub	r24, r18
    4ea0:	93 0b       	sbc	r25, r19
    4ea2:	0c c0       	rjmp	.+24     	; 0x4ebc <uart_enqueue_string+0x24e>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    4ea4:	d7 01       	movw	r26, r14
    4ea6:	8d 91       	ld	r24, X+
    4ea8:	9c 91       	ld	r25, X
    4eaa:	11 97       	sbiw	r26, 0x01	; 1
    4eac:	ec e4       	ldi	r30, 0x4C	; 76
    4eae:	ff e3       	ldi	r31, 0x3F	; 63
    4eb0:	20 81       	ld	r18, Z
    4eb2:	31 81       	ldd	r19, Z+1	; 0x01
    4eb4:	80 50       	subi	r24, 0x00	; 0
    4eb6:	9c 4f       	sbci	r25, 0xFC	; 252
    4eb8:	82 1b       	sub	r24, r18
    4eba:	93 0b       	sbc	r25, r19
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    4ebc:	00 97       	sbiw	r24, 0x00	; 0
    4ebe:	09 f6       	brne	.-126    	; 0x4e42 <uart_enqueue_string+0x1d4>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    4ec0:	d7 01       	movw	r26, r14
    4ec2:	8d 91       	ld	r24, X+
    4ec4:	9c 91       	ld	r25, X
    4ec6:	11 97       	sbiw	r26, 0x01	; 1
    4ec8:	ec e4       	ldi	r30, 0x4C	; 76
    4eca:	ff e3       	ldi	r31, 0x3F	; 63
    4ecc:	20 81       	ld	r18, Z
    4ece:	31 81       	ldd	r19, Z+1	; 0x01
    4ed0:	82 17       	cp	r24, r18
    4ed2:	93 07       	cpc	r25, r19
    4ed4:	40 f0       	brcs	.+16     	; 0x4ee6 <uart_enqueue_string+0x278>
		return (uart_head[idx] - uart_tail[idx]);
    4ed6:	8d 91       	ld	r24, X+
    4ed8:	9c 91       	ld	r25, X
    4eda:	11 97       	sbiw	r26, 0x01	; 1
    4edc:	20 81       	ld	r18, Z
    4ede:	31 81       	ldd	r19, Z+1	; 0x01
    4ee0:	82 1b       	sub	r24, r18
    4ee2:	93 0b       	sbc	r25, r19
    4ee4:	0c c0       	rjmp	.+24     	; 0x4efe <uart_enqueue_string+0x290>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    4ee6:	d7 01       	movw	r26, r14
    4ee8:	8d 91       	ld	r24, X+
    4eea:	9c 91       	ld	r25, X
    4eec:	11 97       	sbiw	r26, 0x01	; 1
    4eee:	ec e4       	ldi	r30, 0x4C	; 76
    4ef0:	ff e3       	ldi	r31, 0x3F	; 63
    4ef2:	20 81       	ld	r18, Z
    4ef4:	31 81       	ldd	r19, Z+1	; 0x01
    4ef6:	80 50       	subi	r24, 0x00	; 0
    4ef8:	9c 4f       	sbci	r25, 0xFC	; 252
    4efa:	82 1b       	sub	r24, r18
    4efc:	93 0b       	sbc	r25, r19
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
	}
	//disable the tx outgoing hardware buffer ready interrupt if we have nothing more to put in it.
	if(uart_count(port)>0) uart_txbuffer_enable(port);
    4efe:	00 97       	sbiw	r24, 0x00	; 0
    4f00:	21 f0       	breq	.+8      	; 0x4f0a <uart_enqueue_string+0x29c>
    4f02:	c8 01       	movw	r24, r16
    4f04:	0e 94 98 1c 	call	0x3930	; 0x3930 <uart_txbuffer_enable>
    4f08:	03 c0       	rjmp	.+6      	; 0x4f10 <uart_enqueue_string+0x2a2>
	else uart_txbuffer_disable(port);
    4f0a:	c8 01       	movw	r24, r16
    4f0c:	0e 94 9d 1c 	call	0x393a	; 0x393a <uart_txbuffer_disable>
#ifndef UART_DEBUG
	uint8_t idx = port_map(port);
	
	//if (idx==0){uart_enqueue(&uctrl, datain);} //xxx
	
	uart_buffer[idx][uart_head[idx]] = datain;
    4f10:	d7 01       	movw	r26, r14
    4f12:	8d 91       	ld	r24, X+
    4f14:	9c 91       	ld	r25, X
    4f16:	11 97       	sbiw	r26, 0x01	; 1
    4f18:	8e 5b       	subi	r24, 0xBE	; 190
    4f1a:	94 4c       	sbci	r25, 0xC4	; 196
    4f1c:	fc 01       	movw	r30, r24
    4f1e:	b0 82       	st	Z, r11
	uart_head[idx]++;
    4f20:	8d 91       	ld	r24, X+
    4f22:	9c 91       	ld	r25, X
    4f24:	11 97       	sbiw	r26, 0x01	; 1
    4f26:	01 96       	adiw	r24, 0x01	; 1
    4f28:	8d 93       	st	X+, r24
    4f2a:	9c 93       	st	X, r25
    4f2c:	11 97       	sbiw	r26, 0x01	; 1
	if (uart_head[idx] >= MAX_BUFFER_LEN){
    4f2e:	8d 91       	ld	r24, X+
    4f30:	9c 91       	ld	r25, X
    4f32:	11 97       	sbiw	r26, 0x01	; 1
    4f34:	f4 e0       	ldi	r31, 0x04	; 4
    4f36:	80 30       	cpi	r24, 0x00	; 0
    4f38:	9f 07       	cpc	r25, r31
    4f3a:	18 f0       	brcs	.+6      	; 0x4f42 <uart_enqueue_string+0x2d4>
		uart_head[idx] = 0;
    4f3c:	1d 92       	st	X+, r1
    4f3e:	1c 92       	st	X, r1
    4f40:	11 97       	sbiw	r26, 0x01	; 1
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    4f42:	d8 01       	movw	r26, r16
    4f44:	11 96       	adiw	r26, 0x01	; 1
    4f46:	8c 91       	ld	r24, X
    4f48:	11 97       	sbiw	r26, 0x01	; 1
    4f4a:	85 fd       	sbrc	r24, 5
    4f4c:	1f c0       	rjmp	.+62     	; 0x4f8c <uart_enqueue_string+0x31e>
    4f4e:	3f c0       	rjmp	.+126    	; 0x4fce <uart_enqueue_string+0x360>
}

inline uint8_t uart_dequeue(USART_t* port){
	uint8_t idx = port_map(port);
	uint16_t oldtail;
	oldtail = uart_tail[idx];
    4f50:	ac e4       	ldi	r26, 0x4C	; 76
    4f52:	bf e3       	ldi	r27, 0x3F	; 63
    4f54:	ed 91       	ld	r30, X+
    4f56:	fc 91       	ld	r31, X
    4f58:	11 97       	sbiw	r26, 0x01	; 1
	uart_tail[idx]++;
    4f5a:	8d 91       	ld	r24, X+
    4f5c:	9c 91       	ld	r25, X
    4f5e:	11 97       	sbiw	r26, 0x01	; 1
    4f60:	01 96       	adiw	r24, 0x01	; 1
    4f62:	8d 93       	st	X+, r24
    4f64:	9c 93       	st	X, r25
    4f66:	11 97       	sbiw	r26, 0x01	; 1
	if (uart_tail[idx] >= MAX_BUFFER_LEN){
    4f68:	8d 91       	ld	r24, X+
    4f6a:	9c 91       	ld	r25, X
    4f6c:	11 97       	sbiw	r26, 0x01	; 1
    4f6e:	b4 e0       	ldi	r27, 0x04	; 4
    4f70:	80 30       	cpi	r24, 0x00	; 0
    4f72:	9b 07       	cpc	r25, r27
    4f74:	18 f0       	brcs	.+6      	; 0x4f7c <uart_enqueue_string+0x30e>
		uart_tail[idx] = 0;
    4f76:	1d 92       	st	X+, r1
    4f78:	1c 92       	st	X, r1
    4f7a:	11 97       	sbiw	r26, 0x01	; 1
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    4f7c:	ee 5b       	subi	r30, 0xBE	; 190
    4f7e:	f4 4c       	sbci	r31, 0xC4	; 196
    4f80:	80 81       	ld	r24, Z
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
    4f82:	f8 01       	movw	r30, r16
    4f84:	80 83       	st	Z, r24
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    4f86:	81 81       	ldd	r24, Z+1	; 0x01
    4f88:	85 ff       	sbrs	r24, 5
    4f8a:	21 c0       	rjmp	.+66     	; 0x4fce <uart_enqueue_string+0x360>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    4f8c:	d7 01       	movw	r26, r14
    4f8e:	8d 91       	ld	r24, X+
    4f90:	9c 91       	ld	r25, X
    4f92:	11 97       	sbiw	r26, 0x01	; 1
    4f94:	ec e4       	ldi	r30, 0x4C	; 76
    4f96:	ff e3       	ldi	r31, 0x3F	; 63
    4f98:	20 81       	ld	r18, Z
    4f9a:	31 81       	ldd	r19, Z+1	; 0x01
    4f9c:	82 17       	cp	r24, r18
    4f9e:	93 07       	cpc	r25, r19
    4fa0:	40 f0       	brcs	.+16     	; 0x4fb2 <uart_enqueue_string+0x344>
		return (uart_head[idx] - uart_tail[idx]);
    4fa2:	8d 91       	ld	r24, X+
    4fa4:	9c 91       	ld	r25, X
    4fa6:	11 97       	sbiw	r26, 0x01	; 1
    4fa8:	20 81       	ld	r18, Z
    4faa:	31 81       	ldd	r19, Z+1	; 0x01
    4fac:	82 1b       	sub	r24, r18
    4fae:	93 0b       	sbc	r25, r19
    4fb0:	0c c0       	rjmp	.+24     	; 0x4fca <uart_enqueue_string+0x35c>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    4fb2:	d7 01       	movw	r26, r14
    4fb4:	8d 91       	ld	r24, X+
    4fb6:	9c 91       	ld	r25, X
    4fb8:	11 97       	sbiw	r26, 0x01	; 1
    4fba:	ec e4       	ldi	r30, 0x4C	; 76
    4fbc:	ff e3       	ldi	r31, 0x3F	; 63
    4fbe:	20 81       	ld	r18, Z
    4fc0:	31 81       	ldd	r19, Z+1	; 0x01
    4fc2:	80 50       	subi	r24, 0x00	; 0
    4fc4:	9c 4f       	sbci	r25, 0xFC	; 252
    4fc6:	82 1b       	sub	r24, r18
    4fc8:	93 0b       	sbc	r25, r19
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    4fca:	00 97       	sbiw	r24, 0x00	; 0
    4fcc:	09 f6       	brne	.-126    	; 0x4f50 <uart_enqueue_string+0x2e2>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    4fce:	d7 01       	movw	r26, r14
    4fd0:	8d 91       	ld	r24, X+
    4fd2:	9c 91       	ld	r25, X
    4fd4:	11 97       	sbiw	r26, 0x01	; 1
    4fd6:	ec e4       	ldi	r30, 0x4C	; 76
    4fd8:	ff e3       	ldi	r31, 0x3F	; 63
    4fda:	20 81       	ld	r18, Z
    4fdc:	31 81       	ldd	r19, Z+1	; 0x01
    4fde:	82 17       	cp	r24, r18
    4fe0:	93 07       	cpc	r25, r19
    4fe2:	40 f0       	brcs	.+16     	; 0x4ff4 <uart_enqueue_string+0x386>
		return (uart_head[idx] - uart_tail[idx]);
    4fe4:	8d 91       	ld	r24, X+
    4fe6:	9c 91       	ld	r25, X
    4fe8:	11 97       	sbiw	r26, 0x01	; 1
    4fea:	20 81       	ld	r18, Z
    4fec:	31 81       	ldd	r19, Z+1	; 0x01
    4fee:	82 1b       	sub	r24, r18
    4ff0:	93 0b       	sbc	r25, r19
    4ff2:	0c c0       	rjmp	.+24     	; 0x500c <uart_enqueue_string+0x39e>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    4ff4:	d7 01       	movw	r26, r14
    4ff6:	8d 91       	ld	r24, X+
    4ff8:	9c 91       	ld	r25, X
    4ffa:	11 97       	sbiw	r26, 0x01	; 1
    4ffc:	ec e4       	ldi	r30, 0x4C	; 76
    4ffe:	ff e3       	ldi	r31, 0x3F	; 63
    5000:	20 81       	ld	r18, Z
    5002:	31 81       	ldd	r19, Z+1	; 0x01
    5004:	80 50       	subi	r24, 0x00	; 0
    5006:	9c 4f       	sbci	r25, 0xFC	; 252
    5008:	82 1b       	sub	r24, r18
    500a:	93 0b       	sbc	r25, r19
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
	}
	//disable the tx outgoing hardware buffer ready interrupt if we have nothing more to put in it.
	if(uart_count(port)>0) uart_txbuffer_enable(port);
    500c:	00 97       	sbiw	r24, 0x00	; 0
    500e:	21 f0       	breq	.+8      	; 0x5018 <uart_enqueue_string+0x3aa>
    5010:	c8 01       	movw	r24, r16
    5012:	0e 94 98 1c 	call	0x3930	; 0x3930 <uart_txbuffer_enable>
    5016:	03 c0       	rjmp	.+6      	; 0x501e <uart_enqueue_string+0x3b0>
	else uart_txbuffer_disable(port);
    5018:	c8 01       	movw	r24, r16
    501a:	0e 94 9d 1c 	call	0x393a	; 0x393a <uart_txbuffer_disable>
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0) && (lcd_flow_control == LCD_READY)){
		toSend = uart_dequeue(port);
		if (toSend == 0x0D) {lcd_flow_control = LCD_BUSY;}
		uart_enqueue(&udata, '`'); //xxx - echo to data port
		uart_enqueue(&udata, toSend); //xxx - echo to data port
		port->DATA = toSend;
    501e:	d6 01       	movw	r26, r12
    5020:	bc 92       	st	X, r11
}

void inline uart_transmit_lcd(USART_t* port){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0) && (lcd_flow_control == LCD_READY)){
    5022:	11 96       	adiw	r26, 0x01	; 1
    5024:	8c 91       	ld	r24, X
    5026:	11 97       	sbiw	r26, 0x01	; 1
    5028:	85 fd       	sbrc	r24, 5
    502a:	07 c0       	rjmp	.+14     	; 0x503a <uart_enqueue_string+0x3cc>
    502c:	55 c0       	rjmp	.+170    	; 0x50d8 <uart_enqueue_string+0x46a>
#ifndef UART_DEBUG
	uint8_t idx = port_map(port);
	
	//if (idx==0){uart_enqueue(&uctrl, datain);} //xxx
	
	uart_buffer[idx][uart_head[idx]] = datain;
    502e:	0f 2e       	mov	r0, r31
    5030:	f0 e6       	ldi	r31, 0x60	; 96
    5032:	af 2e       	mov	r10, r31
    5034:	f0 2d       	mov	r31, r0
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    5036:	00 eb       	ldi	r16, 0xB0	; 176
    5038:	18 e0       	ldi	r17, 0x08	; 8
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    503a:	b0 eb       	ldi	r27, 0xB0	; 176
    503c:	cb 16       	cp	r12, r27
    503e:	bb e0       	ldi	r27, 0x0B	; 11
    5040:	db 06       	cpc	r13, r27
    5042:	61 f0       	breq	.+24     	; 0x505c <uart_enqueue_string+0x3ee>
	if (port == &uctrl) {return 1;}
    5044:	e0 ea       	ldi	r30, 0xA0	; 160
    5046:	ce 16       	cp	r12, r30
    5048:	e8 e0       	ldi	r30, 0x08	; 8
    504a:	de 06       	cpc	r13, r30
    504c:	49 f0       	breq	.+18     	; 0x5060 <uart_enqueue_string+0x3f2>
	if (port == &udata) {return 2;}
    504e:	f0 eb       	ldi	r31, 0xB0	; 176
    5050:	cf 16       	cp	r12, r31
    5052:	f8 e0       	ldi	r31, 0x08	; 8
    5054:	df 06       	cpc	r13, r31
    5056:	31 f4       	brne	.+12     	; 0x5064 <uart_enqueue_string+0x3f6>
    5058:	22 e0       	ldi	r18, 0x02	; 2
    505a:	05 c0       	rjmp	.+10     	; 0x5066 <uart_enqueue_string+0x3f8>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    505c:	20 e0       	ldi	r18, 0x00	; 0
    505e:	03 c0       	rjmp	.+6      	; 0x5066 <uart_enqueue_string+0x3f8>
	if (port == &uctrl) {return 1;}
    5060:	21 e0       	ldi	r18, 0x01	; 1
    5062:	01 c0       	rjmp	.+2      	; 0x5066 <uart_enqueue_string+0x3f8>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    5064:	20 e0       	ldi	r18, 0x00	; 0
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    5066:	30 e0       	ldi	r19, 0x00	; 0
    5068:	c9 01       	movw	r24, r18
    506a:	88 0f       	add	r24, r24
    506c:	99 1f       	adc	r25, r25
    506e:	f3 01       	movw	r30, r6
    5070:	e8 0f       	add	r30, r24
    5072:	f9 1f       	adc	r31, r25
    5074:	40 81       	ld	r20, Z
    5076:	51 81       	ldd	r21, Z+1	; 0x01
    5078:	f4 01       	movw	r30, r8
    507a:	e8 0f       	add	r30, r24
    507c:	f9 1f       	adc	r31, r25
    507e:	80 81       	ld	r24, Z
    5080:	91 81       	ldd	r25, Z+1	; 0x01
    5082:	48 17       	cp	r20, r24
    5084:	59 07       	cpc	r21, r25
    5086:	88 f0       	brcs	.+34     	; 0x50aa <uart_enqueue_string+0x43c>
		return (uart_head[idx] - uart_tail[idx]);
    5088:	22 0f       	add	r18, r18
    508a:	33 1f       	adc	r19, r19
    508c:	f3 01       	movw	r30, r6
    508e:	e2 0f       	add	r30, r18
    5090:	f3 1f       	adc	r31, r19
    5092:	40 81       	ld	r20, Z
    5094:	51 81       	ldd	r21, Z+1	; 0x01
    5096:	f4 01       	movw	r30, r8
    5098:	e2 0f       	add	r30, r18
    509a:	f3 1f       	adc	r31, r19
    509c:	80 81       	ld	r24, Z
    509e:	91 81       	ldd	r25, Z+1	; 0x01
    50a0:	9a 01       	movw	r18, r20
    50a2:	28 1b       	sub	r18, r24
    50a4:	39 0b       	sbc	r19, r25
    50a6:	c9 01       	movw	r24, r18
    50a8:	10 c0       	rjmp	.+32     	; 0x50ca <uart_enqueue_string+0x45c>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    50aa:	22 0f       	add	r18, r18
    50ac:	33 1f       	adc	r19, r19
    50ae:	f3 01       	movw	r30, r6
    50b0:	e2 0f       	add	r30, r18
    50b2:	f3 1f       	adc	r31, r19
    50b4:	80 81       	ld	r24, Z
    50b6:	91 81       	ldd	r25, Z+1	; 0x01
    50b8:	f4 01       	movw	r30, r8
    50ba:	e2 0f       	add	r30, r18
    50bc:	f3 1f       	adc	r31, r19
    50be:	20 81       	ld	r18, Z
    50c0:	31 81       	ldd	r19, Z+1	; 0x01
    50c2:	80 50       	subi	r24, 0x00	; 0
    50c4:	9c 4f       	sbci	r25, 0xFC	; 252
    50c6:	82 1b       	sub	r24, r18
    50c8:	93 0b       	sbc	r25, r19
}

void inline uart_transmit_lcd(USART_t* port){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0) && (lcd_flow_control == LCD_READY)){
    50ca:	00 97       	sbiw	r24, 0x00	; 0
    50cc:	29 f0       	breq	.+10     	; 0x50d8 <uart_enqueue_string+0x46a>
    50ce:	80 91 24 27 	lds	r24, 0x2724
    50d2:	82 35       	cpi	r24, 0x52	; 82
    50d4:	09 f4       	brne	.+2      	; 0x50d8 <uart_enqueue_string+0x46a>
    50d6:	58 ce       	rjmp	.-848    	; 0x4d88 <uart_enqueue_string+0x11a>
		if (toSend == 0x0D) {lcd_flow_control = LCD_BUSY;}
		uart_enqueue(&udata, '`'); //xxx - echo to data port
		uart_enqueue(&udata, toSend); //xxx - echo to data port
		port->DATA = toSend;
	}
	uart_txbuffer_disable(port); //implemented this way to prevent periodic stalls that happen when uart_txbuffer isn't disabled quickly enough
    50d8:	c6 01       	movw	r24, r12
    50da:	0e 94 9d 1c 	call	0x393a	; 0x393a <uart_txbuffer_disable>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    50de:	30 eb       	ldi	r19, 0xB0	; 176
    50e0:	c3 16       	cp	r12, r19
    50e2:	3b e0       	ldi	r19, 0x0B	; 11
    50e4:	d3 06       	cpc	r13, r19
    50e6:	61 f0       	breq	.+24     	; 0x5100 <uart_enqueue_string+0x492>
	if (port == &uctrl) {return 1;}
    50e8:	60 ea       	ldi	r22, 0xA0	; 160
    50ea:	c6 16       	cp	r12, r22
    50ec:	68 e0       	ldi	r22, 0x08	; 8
    50ee:	d6 06       	cpc	r13, r22
    50f0:	49 f0       	breq	.+18     	; 0x5104 <uart_enqueue_string+0x496>
	if (port == &udata) {return 2;}
    50f2:	80 eb       	ldi	r24, 0xB0	; 176
    50f4:	c8 16       	cp	r12, r24
    50f6:	88 e0       	ldi	r24, 0x08	; 8
    50f8:	d8 06       	cpc	r13, r24
    50fa:	31 f4       	brne	.+12     	; 0x5108 <uart_enqueue_string+0x49a>
    50fc:	82 e0       	ldi	r24, 0x02	; 2
    50fe:	05 c0       	rjmp	.+10     	; 0x510a <uart_enqueue_string+0x49c>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    5100:	80 e0       	ldi	r24, 0x00	; 0
    5102:	03 c0       	rjmp	.+6      	; 0x510a <uart_enqueue_string+0x49c>
	if (port == &uctrl) {return 1;}
    5104:	81 e0       	ldi	r24, 0x01	; 1
    5106:	01 c0       	rjmp	.+2      	; 0x510a <uart_enqueue_string+0x49c>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    5108:	80 e0       	ldi	r24, 0x00	; 0
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    510a:	28 2f       	mov	r18, r24
    510c:	30 e0       	ldi	r19, 0x00	; 0
    510e:	c9 01       	movw	r24, r18
    5110:	88 0f       	add	r24, r24
    5112:	99 1f       	adc	r25, r25
    5114:	f3 01       	movw	r30, r6
    5116:	e8 0f       	add	r30, r24
    5118:	f9 1f       	adc	r31, r25
    511a:	40 81       	ld	r20, Z
    511c:	51 81       	ldd	r21, Z+1	; 0x01
    511e:	f4 01       	movw	r30, r8
    5120:	e8 0f       	add	r30, r24
    5122:	f9 1f       	adc	r31, r25
    5124:	80 81       	ld	r24, Z
    5126:	91 81       	ldd	r25, Z+1	; 0x01
    5128:	48 17       	cp	r20, r24
    512a:	59 07       	cpc	r21, r25
    512c:	88 f0       	brcs	.+34     	; 0x5150 <uart_enqueue_string+0x4e2>
		return (uart_head[idx] - uart_tail[idx]);
    512e:	22 0f       	add	r18, r18
    5130:	33 1f       	adc	r19, r19
    5132:	f3 01       	movw	r30, r6
    5134:	e2 0f       	add	r30, r18
    5136:	f3 1f       	adc	r31, r19
    5138:	40 81       	ld	r20, Z
    513a:	51 81       	ldd	r21, Z+1	; 0x01
    513c:	f4 01       	movw	r30, r8
    513e:	e2 0f       	add	r30, r18
    5140:	f3 1f       	adc	r31, r19
    5142:	80 81       	ld	r24, Z
    5144:	91 81       	ldd	r25, Z+1	; 0x01
    5146:	da 01       	movw	r26, r20
    5148:	a8 1b       	sub	r26, r24
    514a:	b9 0b       	sbc	r27, r25
    514c:	cd 01       	movw	r24, r26
    514e:	10 c0       	rjmp	.+32     	; 0x5170 <uart_enqueue_string+0x502>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    5150:	22 0f       	add	r18, r18
    5152:	33 1f       	adc	r19, r19
    5154:	f3 01       	movw	r30, r6
    5156:	e2 0f       	add	r30, r18
    5158:	f3 1f       	adc	r31, r19
    515a:	80 81       	ld	r24, Z
    515c:	91 81       	ldd	r25, Z+1	; 0x01
    515e:	f4 01       	movw	r30, r8
    5160:	e2 0f       	add	r30, r18
    5162:	f3 1f       	adc	r31, r19
    5164:	20 81       	ld	r18, Z
    5166:	31 81       	ldd	r19, Z+1	; 0x01
    5168:	80 50       	subi	r24, 0x00	; 0
    516a:	9c 4f       	sbci	r25, 0xFC	; 252
    516c:	82 1b       	sub	r24, r18
    516e:	93 0b       	sbc	r25, r19
		uart_enqueue(&udata, '`'); //xxx - echo to data port
		uart_enqueue(&udata, toSend); //xxx - echo to data port
		port->DATA = toSend;
	}
	uart_txbuffer_disable(port); //implemented this way to prevent periodic stalls that happen when uart_txbuffer isn't disabled quickly enough
	if ((uart_count(port)>0) && (lcd_flow_control == LCD_READY)){ //...something is waiting to go out
    5170:	00 97       	sbiw	r24, 0x00	; 0
    5172:	09 f4       	brne	.+2      	; 0x5176 <uart_enqueue_string+0x508>
    5174:	e3 c0       	rjmp	.+454    	; 0x533c <uart_enqueue_string+0x6ce>
    5176:	80 91 24 27 	lds	r24, 0x2724
    517a:	82 35       	cpi	r24, 0x52	; 82
    517c:	09 f0       	breq	.+2      	; 0x5180 <uart_enqueue_string+0x512>
    517e:	de c0       	rjmp	.+444    	; 0x533c <uart_enqueue_string+0x6ce>
		uart_txbuffer_enable(port);	
    5180:	c6 01       	movw	r24, r12
    5182:	0e 94 98 1c 	call	0x3930	; 0x3930 <uart_txbuffer_enable>
    5186:	da c0       	rjmp	.+436    	; 0x533c <uart_enqueue_string+0x6ce>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    5188:	b0 eb       	ldi	r27, 0xB0	; 176
    518a:	cb 16       	cp	r12, r27
    518c:	bb e0       	ldi	r27, 0x0B	; 11
    518e:	db 06       	cpc	r13, r27
    5190:	61 f0       	breq	.+24     	; 0x51aa <uart_enqueue_string+0x53c>
	if (port == &uctrl) {return 1;}
    5192:	e0 ea       	ldi	r30, 0xA0	; 160
    5194:	ce 16       	cp	r12, r30
    5196:	e8 e0       	ldi	r30, 0x08	; 8
    5198:	de 06       	cpc	r13, r30
    519a:	49 f0       	breq	.+18     	; 0x51ae <uart_enqueue_string+0x540>
	if (port == &udata) {return 2;}
    519c:	f0 eb       	ldi	r31, 0xB0	; 176
    519e:	cf 16       	cp	r12, r31
    51a0:	f8 e0       	ldi	r31, 0x08	; 8
    51a2:	df 06       	cpc	r13, r31
    51a4:	31 f4       	brne	.+12     	; 0x51b2 <uart_enqueue_string+0x544>
    51a6:	22 e0       	ldi	r18, 0x02	; 2
    51a8:	05 c0       	rjmp	.+10     	; 0x51b4 <uart_enqueue_string+0x546>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    51aa:	20 e0       	ldi	r18, 0x00	; 0
    51ac:	03 c0       	rjmp	.+6      	; 0x51b4 <uart_enqueue_string+0x546>
	if (port == &uctrl) {return 1;}
    51ae:	21 e0       	ldi	r18, 0x01	; 1
    51b0:	01 c0       	rjmp	.+2      	; 0x51b4 <uart_enqueue_string+0x546>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    51b2:	20 e0       	ldi	r18, 0x00	; 0
}

inline uint8_t uart_dequeue(USART_t* port){
	uint8_t idx = port_map(port);
	uint16_t oldtail;
	oldtail = uart_tail[idx];
    51b4:	30 e0       	ldi	r19, 0x00	; 0
    51b6:	c9 01       	movw	r24, r18
    51b8:	88 0f       	add	r24, r24
    51ba:	99 1f       	adc	r25, r25
    51bc:	f4 01       	movw	r30, r8
    51be:	e8 0f       	add	r30, r24
    51c0:	f9 1f       	adc	r31, r25
    51c2:	40 81       	ld	r20, Z
    51c4:	51 81       	ldd	r21, Z+1	; 0x01
	uart_tail[idx]++;
    51c6:	80 81       	ld	r24, Z
    51c8:	91 81       	ldd	r25, Z+1	; 0x01
    51ca:	01 96       	adiw	r24, 0x01	; 1
    51cc:	80 83       	st	Z, r24
    51ce:	91 83       	std	Z+1, r25	; 0x01
	if (uart_tail[idx] >= MAX_BUFFER_LEN){
    51d0:	80 81       	ld	r24, Z
    51d2:	91 81       	ldd	r25, Z+1	; 0x01
    51d4:	64 e0       	ldi	r22, 0x04	; 4
    51d6:	80 30       	cpi	r24, 0x00	; 0
    51d8:	96 07       	cpc	r25, r22
    51da:	10 f0       	brcs	.+4      	; 0x51e0 <uart_enqueue_string+0x572>
		uart_tail[idx] = 0;
    51dc:	10 82       	st	Z, r1
    51de:	11 82       	std	Z+1, r1	; 0x01
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    51e0:	c9 01       	movw	r24, r18
    51e2:	98 2f       	mov	r25, r24
    51e4:	88 27       	eor	r24, r24
    51e6:	99 0f       	add	r25, r25
    51e8:	99 0f       	add	r25, r25
    51ea:	84 0f       	add	r24, r20
    51ec:	95 1f       	adc	r25, r21
    51ee:	84 0d       	add	r24, r4
    51f0:	95 1d       	adc	r25, r5
    51f2:	fc 01       	movw	r30, r24
    51f4:	80 81       	ld	r24, Z
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
    51f6:	d6 01       	movw	r26, r12
    51f8:	8c 93       	st	X, r24
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    51fa:	11 96       	adiw	r26, 0x01	; 1
    51fc:	8c 91       	ld	r24, X
    51fe:	11 97       	sbiw	r26, 0x01	; 1
    5200:	85 ff       	sbrs	r24, 5
    5202:	4b c0       	rjmp	.+150    	; 0x529a <uart_enqueue_string+0x62c>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    5204:	b0 eb       	ldi	r27, 0xB0	; 176
    5206:	cb 16       	cp	r12, r27
    5208:	bb e0       	ldi	r27, 0x0B	; 11
    520a:	db 06       	cpc	r13, r27
    520c:	61 f0       	breq	.+24     	; 0x5226 <uart_enqueue_string+0x5b8>
	if (port == &uctrl) {return 1;}
    520e:	e0 ea       	ldi	r30, 0xA0	; 160
    5210:	ce 16       	cp	r12, r30
    5212:	e8 e0       	ldi	r30, 0x08	; 8
    5214:	de 06       	cpc	r13, r30
    5216:	49 f0       	breq	.+18     	; 0x522a <uart_enqueue_string+0x5bc>
	if (port == &udata) {return 2;}
    5218:	f0 eb       	ldi	r31, 0xB0	; 176
    521a:	cf 16       	cp	r12, r31
    521c:	f8 e0       	ldi	r31, 0x08	; 8
    521e:	df 06       	cpc	r13, r31
    5220:	31 f4       	brne	.+12     	; 0x522e <uart_enqueue_string+0x5c0>
    5222:	22 e0       	ldi	r18, 0x02	; 2
    5224:	05 c0       	rjmp	.+10     	; 0x5230 <uart_enqueue_string+0x5c2>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    5226:	20 e0       	ldi	r18, 0x00	; 0
    5228:	03 c0       	rjmp	.+6      	; 0x5230 <uart_enqueue_string+0x5c2>
	if (port == &uctrl) {return 1;}
    522a:	21 e0       	ldi	r18, 0x01	; 1
    522c:	01 c0       	rjmp	.+2      	; 0x5230 <uart_enqueue_string+0x5c2>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    522e:	20 e0       	ldi	r18, 0x00	; 0
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    5230:	30 e0       	ldi	r19, 0x00	; 0
    5232:	c9 01       	movw	r24, r18
    5234:	88 0f       	add	r24, r24
    5236:	99 1f       	adc	r25, r25
    5238:	f3 01       	movw	r30, r6
    523a:	e8 0f       	add	r30, r24
    523c:	f9 1f       	adc	r31, r25
    523e:	40 81       	ld	r20, Z
    5240:	51 81       	ldd	r21, Z+1	; 0x01
    5242:	f4 01       	movw	r30, r8
    5244:	e8 0f       	add	r30, r24
    5246:	f9 1f       	adc	r31, r25
    5248:	80 81       	ld	r24, Z
    524a:	91 81       	ldd	r25, Z+1	; 0x01
    524c:	48 17       	cp	r20, r24
    524e:	59 07       	cpc	r21, r25
    5250:	88 f0       	brcs	.+34     	; 0x5274 <uart_enqueue_string+0x606>
		return (uart_head[idx] - uart_tail[idx]);
    5252:	22 0f       	add	r18, r18
    5254:	33 1f       	adc	r19, r19
    5256:	f3 01       	movw	r30, r6
    5258:	e2 0f       	add	r30, r18
    525a:	f3 1f       	adc	r31, r19
    525c:	40 81       	ld	r20, Z
    525e:	51 81       	ldd	r21, Z+1	; 0x01
    5260:	f4 01       	movw	r30, r8
    5262:	e2 0f       	add	r30, r18
    5264:	f3 1f       	adc	r31, r19
    5266:	80 81       	ld	r24, Z
    5268:	91 81       	ldd	r25, Z+1	; 0x01
    526a:	9a 01       	movw	r18, r20
    526c:	28 1b       	sub	r18, r24
    526e:	39 0b       	sbc	r19, r25
    5270:	c9 01       	movw	r24, r18
    5272:	10 c0       	rjmp	.+32     	; 0x5294 <uart_enqueue_string+0x626>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    5274:	22 0f       	add	r18, r18
    5276:	33 1f       	adc	r19, r19
    5278:	f3 01       	movw	r30, r6
    527a:	e2 0f       	add	r30, r18
    527c:	f3 1f       	adc	r31, r19
    527e:	80 81       	ld	r24, Z
    5280:	91 81       	ldd	r25, Z+1	; 0x01
    5282:	f4 01       	movw	r30, r8
    5284:	e2 0f       	add	r30, r18
    5286:	f3 1f       	adc	r31, r19
    5288:	20 81       	ld	r18, Z
    528a:	31 81       	ldd	r19, Z+1	; 0x01
    528c:	80 50       	subi	r24, 0x00	; 0
    528e:	9c 4f       	sbci	r25, 0xFC	; 252
    5290:	82 1b       	sub	r24, r18
    5292:	93 0b       	sbc	r25, r19
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    5294:	00 97       	sbiw	r24, 0x00	; 0
    5296:	09 f0       	breq	.+2      	; 0x529a <uart_enqueue_string+0x62c>
    5298:	77 cf       	rjmp	.-274    	; 0x5188 <uart_enqueue_string+0x51a>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    529a:	30 eb       	ldi	r19, 0xB0	; 176
    529c:	c3 16       	cp	r12, r19
    529e:	3b e0       	ldi	r19, 0x0B	; 11
    52a0:	d3 06       	cpc	r13, r19
    52a2:	61 f0       	breq	.+24     	; 0x52bc <uart_enqueue_string+0x64e>
	if (port == &uctrl) {return 1;}
    52a4:	60 ea       	ldi	r22, 0xA0	; 160
    52a6:	c6 16       	cp	r12, r22
    52a8:	68 e0       	ldi	r22, 0x08	; 8
    52aa:	d6 06       	cpc	r13, r22
    52ac:	49 f0       	breq	.+18     	; 0x52c0 <uart_enqueue_string+0x652>
	if (port == &udata) {return 2;}
    52ae:	80 eb       	ldi	r24, 0xB0	; 176
    52b0:	c8 16       	cp	r12, r24
    52b2:	88 e0       	ldi	r24, 0x08	; 8
    52b4:	d8 06       	cpc	r13, r24
    52b6:	31 f4       	brne	.+12     	; 0x52c4 <uart_enqueue_string+0x656>
    52b8:	22 e0       	ldi	r18, 0x02	; 2
    52ba:	05 c0       	rjmp	.+10     	; 0x52c6 <uart_enqueue_string+0x658>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    52bc:	20 e0       	ldi	r18, 0x00	; 0
    52be:	03 c0       	rjmp	.+6      	; 0x52c6 <uart_enqueue_string+0x658>
	if (port == &uctrl) {return 1;}
    52c0:	21 e0       	ldi	r18, 0x01	; 1
    52c2:	01 c0       	rjmp	.+2      	; 0x52c6 <uart_enqueue_string+0x658>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    52c4:	20 e0       	ldi	r18, 0x00	; 0
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    52c6:	30 e0       	ldi	r19, 0x00	; 0
    52c8:	c9 01       	movw	r24, r18
    52ca:	88 0f       	add	r24, r24
    52cc:	99 1f       	adc	r25, r25
    52ce:	f3 01       	movw	r30, r6
    52d0:	e8 0f       	add	r30, r24
    52d2:	f9 1f       	adc	r31, r25
    52d4:	40 81       	ld	r20, Z
    52d6:	51 81       	ldd	r21, Z+1	; 0x01
    52d8:	f4 01       	movw	r30, r8
    52da:	e8 0f       	add	r30, r24
    52dc:	f9 1f       	adc	r31, r25
    52de:	80 81       	ld	r24, Z
    52e0:	91 81       	ldd	r25, Z+1	; 0x01
    52e2:	48 17       	cp	r20, r24
    52e4:	59 07       	cpc	r21, r25
    52e6:	88 f0       	brcs	.+34     	; 0x530a <uart_enqueue_string+0x69c>
		return (uart_head[idx] - uart_tail[idx]);
    52e8:	22 0f       	add	r18, r18
    52ea:	33 1f       	adc	r19, r19
    52ec:	f3 01       	movw	r30, r6
    52ee:	e2 0f       	add	r30, r18
    52f0:	f3 1f       	adc	r31, r19
    52f2:	40 81       	ld	r20, Z
    52f4:	51 81       	ldd	r21, Z+1	; 0x01
    52f6:	f4 01       	movw	r30, r8
    52f8:	e2 0f       	add	r30, r18
    52fa:	f3 1f       	adc	r31, r19
    52fc:	80 81       	ld	r24, Z
    52fe:	91 81       	ldd	r25, Z+1	; 0x01
    5300:	da 01       	movw	r26, r20
    5302:	a8 1b       	sub	r26, r24
    5304:	b9 0b       	sbc	r27, r25
    5306:	cd 01       	movw	r24, r26
    5308:	10 c0       	rjmp	.+32     	; 0x532a <uart_enqueue_string+0x6bc>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    530a:	22 0f       	add	r18, r18
    530c:	33 1f       	adc	r19, r19
    530e:	f3 01       	movw	r30, r6
    5310:	e2 0f       	add	r30, r18
    5312:	f3 1f       	adc	r31, r19
    5314:	80 81       	ld	r24, Z
    5316:	91 81       	ldd	r25, Z+1	; 0x01
    5318:	f4 01       	movw	r30, r8
    531a:	e2 0f       	add	r30, r18
    531c:	f3 1f       	adc	r31, r19
    531e:	20 81       	ld	r18, Z
    5320:	31 81       	ldd	r19, Z+1	; 0x01
    5322:	80 50       	subi	r24, 0x00	; 0
    5324:	9c 4f       	sbci	r25, 0xFC	; 252
    5326:	82 1b       	sub	r24, r18
    5328:	93 0b       	sbc	r25, r19
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
	}
	//disable the tx outgoing hardware buffer ready interrupt if we have nothing more to put in it.
	if(uart_count(port)>0) uart_txbuffer_enable(port);
    532a:	00 97       	sbiw	r24, 0x00	; 0
    532c:	21 f0       	breq	.+8      	; 0x5336 <uart_enqueue_string+0x6c8>
    532e:	c6 01       	movw	r24, r12
    5330:	0e 94 98 1c 	call	0x3930	; 0x3930 <uart_txbuffer_enable>
    5334:	03 c0       	rjmp	.+6      	; 0x533c <uart_enqueue_string+0x6ce>
	else uart_txbuffer_disable(port);
    5336:	c6 01       	movw	r24, r12
    5338:	0e 94 9d 1c 	call	0x393a	; 0x393a <uart_txbuffer_disable>
}

///Enqueue a string into the outgoing serial queue. Adds CR terminator to string.
inline void uart_enqueue_string(USART_t* port, char* string_in){
	uint16_t length = (uint16_t)strlen(string_in);
	for (uint16_t i=0; i<length; i++) {uart_enqueue(port, (uint8_t)string_in[i]);}
    533c:	08 94       	sec
    533e:	21 1c       	adc	r2, r1
    5340:	31 1c       	adc	r3, r1
    5342:	eb 81       	ldd	r30, Y+3	; 0x03
    5344:	fc 81       	ldd	r31, Y+4	; 0x04
    5346:	2e 16       	cp	r2, r30
    5348:	3f 06       	cpc	r3, r31
    534a:	09 f0       	breq	.+2      	; 0x534e <uart_enqueue_string+0x6e0>
    534c:	d2 cc       	rjmp	.-1628   	; 0x4cf2 <uart_enqueue_string+0x84>
}
    534e:	24 96       	adiw	r28, 0x04	; 4
    5350:	cd bf       	out	0x3d, r28	; 61
    5352:	de bf       	out	0x3e, r29	; 62
    5354:	df 91       	pop	r29
    5356:	cf 91       	pop	r28
    5358:	1f 91       	pop	r17
    535a:	0f 91       	pop	r16
    535c:	ff 90       	pop	r15
    535e:	ef 90       	pop	r14
    5360:	df 90       	pop	r13
    5362:	cf 90       	pop	r12
    5364:	bf 90       	pop	r11
    5366:	af 90       	pop	r10
    5368:	9f 90       	pop	r9
    536a:	8f 90       	pop	r8
    536c:	7f 90       	pop	r7
    536e:	6f 90       	pop	r6
    5370:	5f 90       	pop	r5
    5372:	4f 90       	pop	r4
    5374:	3f 90       	pop	r3
    5376:	2f 90       	pop	r2
    5378:	08 95       	ret

0000537a <uart_enqueue>:

///Enqueue date into the outgoing serial queue. This data is sent via USB to the PC's first virtual Comm Port associated with the EEICM. 
/**This is the queue used to send data back to the command and control GUI. The #define UART_DEBUG can be used to disable normal serial activity through this queue
	The blue LED is used in this routine to signal buffer overflow, which, due to the real-time scheduled nature of the EEICM firmware architecture, should not happen.
	This function is inactive when in UART DEBUG mode. Calls to this function have no effect during this period.*/
inline void uart_enqueue(USART_t* port, uint8_t datain){
    537a:	3f 92       	push	r3
    537c:	4f 92       	push	r4
    537e:	5f 92       	push	r5
    5380:	6f 92       	push	r6
    5382:	7f 92       	push	r7
    5384:	8f 92       	push	r8
    5386:	9f 92       	push	r9
    5388:	af 92       	push	r10
    538a:	bf 92       	push	r11
    538c:	cf 92       	push	r12
    538e:	df 92       	push	r13
    5390:	ef 92       	push	r14
    5392:	ff 92       	push	r15
    5394:	0f 93       	push	r16
    5396:	1f 93       	push	r17
    5398:	cf 93       	push	r28
    539a:	df 93       	push	r29
    539c:	6c 01       	movw	r12, r24
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    539e:	2b e0       	ldi	r18, 0x0B	; 11
    53a0:	80 3b       	cpi	r24, 0xB0	; 176
    53a2:	92 07       	cpc	r25, r18
    53a4:	59 f0       	breq	.+22     	; 0x53bc <uart_enqueue+0x42>
	if (port == &uctrl) {return 1;}
    53a6:	38 e0       	ldi	r19, 0x08	; 8
    53a8:	80 3a       	cpi	r24, 0xA0	; 160
    53aa:	93 07       	cpc	r25, r19
    53ac:	49 f0       	breq	.+18     	; 0x53c0 <uart_enqueue+0x46>
	if (port == &udata) {return 2;}
    53ae:	80 eb       	ldi	r24, 0xB0	; 176
    53b0:	c8 16       	cp	r12, r24
    53b2:	88 e0       	ldi	r24, 0x08	; 8
    53b4:	d8 06       	cpc	r13, r24
    53b6:	31 f4       	brne	.+12     	; 0x53c4 <uart_enqueue+0x4a>
    53b8:	42 e0       	ldi	r20, 0x02	; 2
    53ba:	05 c0       	rjmp	.+10     	; 0x53c6 <uart_enqueue+0x4c>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    53bc:	40 e0       	ldi	r20, 0x00	; 0
    53be:	03 c0       	rjmp	.+6      	; 0x53c6 <uart_enqueue+0x4c>
	if (port == &uctrl) {return 1;}
    53c0:	41 e0       	ldi	r20, 0x01	; 1
    53c2:	01 c0       	rjmp	.+2      	; 0x53c6 <uart_enqueue+0x4c>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    53c4:	40 e0       	ldi	r20, 0x00	; 0
#ifndef UART_DEBUG
	uint8_t idx = port_map(port);
	
	//if (idx==0){uart_enqueue(&uctrl, datain);} //xxx
	
	uart_buffer[idx][uart_head[idx]] = datain;
    53c6:	c4 2f       	mov	r28, r20
    53c8:	d0 e0       	ldi	r29, 0x00	; 0
    53ca:	fe 01       	movw	r30, r28
    53cc:	ee 0f       	add	r30, r30
    53ce:	ff 1f       	adc	r31, r31
    53d0:	e4 5c       	subi	r30, 0xC4	; 196
    53d2:	fc 4c       	sbci	r31, 0xCC	; 204
    53d4:	20 81       	ld	r18, Z
    53d6:	31 81       	ldd	r19, Z+1	; 0x01
    53d8:	ce 01       	movw	r24, r28
    53da:	98 2f       	mov	r25, r24
    53dc:	88 27       	eor	r24, r24
    53de:	99 0f       	add	r25, r25
    53e0:	99 0f       	add	r25, r25
    53e2:	82 0f       	add	r24, r18
    53e4:	93 1f       	adc	r25, r19
    53e6:	dc 01       	movw	r26, r24
    53e8:	ae 5b       	subi	r26, 0xBE	; 190
    53ea:	bc 4c       	sbci	r27, 0xCC	; 204
    53ec:	6c 93       	st	X, r22
	uart_head[idx]++;
    53ee:	80 81       	ld	r24, Z
    53f0:	91 81       	ldd	r25, Z+1	; 0x01
    53f2:	01 96       	adiw	r24, 0x01	; 1
    53f4:	80 83       	st	Z, r24
    53f6:	91 83       	std	Z+1, r25	; 0x01
	if (uart_head[idx] >= MAX_BUFFER_LEN){
    53f8:	80 81       	ld	r24, Z
    53fa:	91 81       	ldd	r25, Z+1	; 0x01
    53fc:	e4 e0       	ldi	r30, 0x04	; 4
    53fe:	80 30       	cpi	r24, 0x00	; 0
    5400:	9e 07       	cpc	r25, r30
    5402:	30 f0       	brcs	.+12     	; 0x5410 <uart_enqueue+0x96>
		uart_head[idx] = 0;
    5404:	cc 0f       	add	r28, r28
    5406:	dd 1f       	adc	r29, r29
    5408:	c4 5c       	subi	r28, 0xC4	; 196
    540a:	dc 4c       	sbci	r29, 0xCC	; 204
    540c:	18 82       	st	Y, r1
    540e:	19 82       	std	Y+1, r1	; 0x01
	}
	if (idx == 0){uart_transmit_lcd(port);} //start the transmission process.
    5410:	44 23       	and	r20, r20
    5412:	29 f0       	breq	.+10     	; 0x541e <uart_enqueue+0xa4>
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    5414:	f6 01       	movw	r30, r12
    5416:	81 81       	ldd	r24, Z+1	; 0x01
    5418:	85 fd       	sbrc	r24, 5
    541a:	2f c2       	rjmp	.+1118   	; 0x587a <uart_enqueue+0x500>
    541c:	81 c2       	rjmp	.+1282   	; 0x5920 <uart_enqueue+0x5a6>
}

void inline uart_transmit_lcd(USART_t* port){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0) && (lcd_flow_control == LCD_READY)){
    541e:	f6 01       	movw	r30, r12
    5420:	81 81       	ldd	r24, Z+1	; 0x01
    5422:	85 fd       	sbrc	r24, 5
    5424:	1d c1       	rjmp	.+570    	; 0x5660 <uart_enqueue+0x2e6>
    5426:	8f c1       	rjmp	.+798    	; 0x5746 <uart_enqueue+0x3cc>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    5428:	f0 eb       	ldi	r31, 0xB0	; 176
    542a:	cf 16       	cp	r12, r31
    542c:	fb e0       	ldi	r31, 0x0B	; 11
    542e:	df 06       	cpc	r13, r31
    5430:	61 f0       	breq	.+24     	; 0x544a <uart_enqueue+0xd0>
	if (port == &uctrl) {return 1;}
    5432:	20 ea       	ldi	r18, 0xA0	; 160
    5434:	c2 16       	cp	r12, r18
    5436:	28 e0       	ldi	r18, 0x08	; 8
    5438:	d2 06       	cpc	r13, r18
    543a:	49 f0       	breq	.+18     	; 0x544e <uart_enqueue+0xd4>
	if (port == &udata) {return 2;}
    543c:	30 eb       	ldi	r19, 0xB0	; 176
    543e:	c3 16       	cp	r12, r19
    5440:	38 e0       	ldi	r19, 0x08	; 8
    5442:	d3 06       	cpc	r13, r19
    5444:	31 f4       	brne	.+12     	; 0x5452 <uart_enqueue+0xd8>
    5446:	22 e0       	ldi	r18, 0x02	; 2
    5448:	05 c0       	rjmp	.+10     	; 0x5454 <uart_enqueue+0xda>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    544a:	20 e0       	ldi	r18, 0x00	; 0
    544c:	03 c0       	rjmp	.+6      	; 0x5454 <uart_enqueue+0xda>
	if (port == &uctrl) {return 1;}
    544e:	21 e0       	ldi	r18, 0x01	; 1
    5450:	01 c0       	rjmp	.+2      	; 0x5454 <uart_enqueue+0xda>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    5452:	20 e0       	ldi	r18, 0x00	; 0
}

inline uint8_t uart_dequeue(USART_t* port){
	uint8_t idx = port_map(port);
	uint16_t oldtail;
	oldtail = uart_tail[idx];
    5454:	30 e0       	ldi	r19, 0x00	; 0
    5456:	c9 01       	movw	r24, r18
    5458:	88 0f       	add	r24, r24
    545a:	99 1f       	adc	r25, r25
    545c:	f4 01       	movw	r30, r8
    545e:	e8 0f       	add	r30, r24
    5460:	f9 1f       	adc	r31, r25
    5462:	40 81       	ld	r20, Z
    5464:	51 81       	ldd	r21, Z+1	; 0x01
	uart_tail[idx]++;
    5466:	80 81       	ld	r24, Z
    5468:	91 81       	ldd	r25, Z+1	; 0x01
    546a:	01 96       	adiw	r24, 0x01	; 1
    546c:	80 83       	st	Z, r24
    546e:	91 83       	std	Z+1, r25	; 0x01
	if (uart_tail[idx] >= MAX_BUFFER_LEN){
    5470:	80 81       	ld	r24, Z
    5472:	91 81       	ldd	r25, Z+1	; 0x01
    5474:	64 e0       	ldi	r22, 0x04	; 4
    5476:	80 30       	cpi	r24, 0x00	; 0
    5478:	96 07       	cpc	r25, r22
    547a:	10 f0       	brcs	.+4      	; 0x5480 <uart_enqueue+0x106>
		uart_tail[idx] = 0;
    547c:	10 82       	st	Z, r1
    547e:	11 82       	std	Z+1, r1	; 0x01
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    5480:	c9 01       	movw	r24, r18
    5482:	98 2f       	mov	r25, r24
    5484:	88 27       	eor	r24, r24
    5486:	99 0f       	add	r25, r25
    5488:	99 0f       	add	r25, r25
    548a:	84 0f       	add	r24, r20
    548c:	95 1f       	adc	r25, r21
    548e:	84 0d       	add	r24, r4
    5490:	95 1d       	adc	r25, r5
    5492:	fc 01       	movw	r30, r24
    5494:	b0 80       	ld	r11, Z
void inline uart_transmit_lcd(USART_t* port){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0) && (lcd_flow_control == LCD_READY)){
		toSend = uart_dequeue(port);
		if (toSend == 0x0D) {lcd_flow_control = LCD_BUSY;}
    5496:	fd e0       	ldi	r31, 0x0D	; 13
    5498:	bf 16       	cp	r11, r31
    549a:	11 f4       	brne	.+4      	; 0x54a0 <uart_enqueue+0x126>
    549c:	30 92 24 27 	sts	0x2724, r3
#ifndef UART_DEBUG
	uint8_t idx = port_map(port);
	
	//if (idx==0){uart_enqueue(&uctrl, datain);} //xxx
	
	uart_buffer[idx][uart_head[idx]] = datain;
    54a0:	f8 01       	movw	r30, r16
    54a2:	80 81       	ld	r24, Z
    54a4:	91 81       	ldd	r25, Z+1	; 0x01
    54a6:	8e 5b       	subi	r24, 0xBE	; 190
    54a8:	94 4c       	sbci	r25, 0xC4	; 196
    54aa:	fc 01       	movw	r30, r24
    54ac:	a0 82       	st	Z, r10
	uart_head[idx]++;
    54ae:	f8 01       	movw	r30, r16
    54b0:	80 81       	ld	r24, Z
    54b2:	91 81       	ldd	r25, Z+1	; 0x01
    54b4:	01 96       	adiw	r24, 0x01	; 1
    54b6:	80 83       	st	Z, r24
    54b8:	91 83       	std	Z+1, r25	; 0x01
	if (uart_head[idx] >= MAX_BUFFER_LEN){
    54ba:	80 81       	ld	r24, Z
    54bc:	91 81       	ldd	r25, Z+1	; 0x01
    54be:	f4 e0       	ldi	r31, 0x04	; 4
    54c0:	80 30       	cpi	r24, 0x00	; 0
    54c2:	9f 07       	cpc	r25, r31
    54c4:	18 f0       	brcs	.+6      	; 0x54cc <uart_enqueue+0x152>
		uart_head[idx] = 0;
    54c6:	f8 01       	movw	r30, r16
    54c8:	10 82       	st	Z, r1
    54ca:	11 82       	std	Z+1, r1	; 0x01
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    54cc:	f7 01       	movw	r30, r14
    54ce:	81 81       	ldd	r24, Z+1	; 0x01
    54d0:	85 fd       	sbrc	r24, 5
    54d2:	18 c0       	rjmp	.+48     	; 0x5504 <uart_enqueue+0x18a>
    54d4:	31 c0       	rjmp	.+98     	; 0x5538 <uart_enqueue+0x1be>
}

inline uint8_t uart_dequeue(USART_t* port){
	uint8_t idx = port_map(port);
	uint16_t oldtail;
	oldtail = uart_tail[idx];
    54d6:	e8 81       	ld	r30, Y
    54d8:	f9 81       	ldd	r31, Y+1	; 0x01
	uart_tail[idx]++;
    54da:	88 81       	ld	r24, Y
    54dc:	99 81       	ldd	r25, Y+1	; 0x01
    54de:	01 96       	adiw	r24, 0x01	; 1
    54e0:	88 83       	st	Y, r24
    54e2:	99 83       	std	Y+1, r25	; 0x01
	if (uart_tail[idx] >= MAX_BUFFER_LEN){
    54e4:	88 81       	ld	r24, Y
    54e6:	99 81       	ldd	r25, Y+1	; 0x01
    54e8:	24 e0       	ldi	r18, 0x04	; 4
    54ea:	80 30       	cpi	r24, 0x00	; 0
    54ec:	92 07       	cpc	r25, r18
    54ee:	10 f0       	brcs	.+4      	; 0x54f4 <uart_enqueue+0x17a>
		uart_tail[idx] = 0;
    54f0:	18 82       	st	Y, r1
    54f2:	19 82       	std	Y+1, r1	; 0x01
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    54f4:	ee 5b       	subi	r30, 0xBE	; 190
    54f6:	f4 4c       	sbci	r31, 0xC4	; 196
    54f8:	80 81       	ld	r24, Z
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
    54fa:	f7 01       	movw	r30, r14
    54fc:	80 83       	st	Z, r24
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    54fe:	81 81       	ldd	r24, Z+1	; 0x01
    5500:	85 ff       	sbrs	r24, 5
    5502:	1a c0       	rjmp	.+52     	; 0x5538 <uart_enqueue+0x1be>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    5504:	f8 01       	movw	r30, r16
    5506:	80 81       	ld	r24, Z
    5508:	91 81       	ldd	r25, Z+1	; 0x01
    550a:	28 81       	ld	r18, Y
    550c:	39 81       	ldd	r19, Y+1	; 0x01
    550e:	82 17       	cp	r24, r18
    5510:	93 07       	cpc	r25, r19
    5512:	38 f0       	brcs	.+14     	; 0x5522 <uart_enqueue+0x1a8>
		return (uart_head[idx] - uart_tail[idx]);
    5514:	80 81       	ld	r24, Z
    5516:	91 81       	ldd	r25, Z+1	; 0x01
    5518:	28 81       	ld	r18, Y
    551a:	39 81       	ldd	r19, Y+1	; 0x01
    551c:	82 1b       	sub	r24, r18
    551e:	93 0b       	sbc	r25, r19
    5520:	09 c0       	rjmp	.+18     	; 0x5534 <uart_enqueue+0x1ba>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    5522:	f8 01       	movw	r30, r16
    5524:	80 81       	ld	r24, Z
    5526:	91 81       	ldd	r25, Z+1	; 0x01
    5528:	28 81       	ld	r18, Y
    552a:	39 81       	ldd	r19, Y+1	; 0x01
    552c:	80 50       	subi	r24, 0x00	; 0
    552e:	9c 4f       	sbci	r25, 0xFC	; 252
    5530:	82 1b       	sub	r24, r18
    5532:	93 0b       	sbc	r25, r19
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    5534:	00 97       	sbiw	r24, 0x00	; 0
    5536:	79 f6       	brne	.-98     	; 0x54d6 <uart_enqueue+0x15c>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    5538:	f8 01       	movw	r30, r16
    553a:	80 81       	ld	r24, Z
    553c:	91 81       	ldd	r25, Z+1	; 0x01
    553e:	28 81       	ld	r18, Y
    5540:	39 81       	ldd	r19, Y+1	; 0x01
    5542:	82 17       	cp	r24, r18
    5544:	93 07       	cpc	r25, r19
    5546:	38 f0       	brcs	.+14     	; 0x5556 <uart_enqueue+0x1dc>
		return (uart_head[idx] - uart_tail[idx]);
    5548:	80 81       	ld	r24, Z
    554a:	91 81       	ldd	r25, Z+1	; 0x01
    554c:	28 81       	ld	r18, Y
    554e:	39 81       	ldd	r19, Y+1	; 0x01
    5550:	82 1b       	sub	r24, r18
    5552:	93 0b       	sbc	r25, r19
    5554:	09 c0       	rjmp	.+18     	; 0x5568 <uart_enqueue+0x1ee>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    5556:	f8 01       	movw	r30, r16
    5558:	80 81       	ld	r24, Z
    555a:	91 81       	ldd	r25, Z+1	; 0x01
    555c:	28 81       	ld	r18, Y
    555e:	39 81       	ldd	r19, Y+1	; 0x01
    5560:	80 50       	subi	r24, 0x00	; 0
    5562:	9c 4f       	sbci	r25, 0xFC	; 252
    5564:	82 1b       	sub	r24, r18
    5566:	93 0b       	sbc	r25, r19
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
	}
	//disable the tx outgoing hardware buffer ready interrupt if we have nothing more to put in it.
	if(uart_count(port)>0) uart_txbuffer_enable(port);
    5568:	00 97       	sbiw	r24, 0x00	; 0
    556a:	21 f0       	breq	.+8      	; 0x5574 <uart_enqueue+0x1fa>
    556c:	c7 01       	movw	r24, r14
    556e:	0e 94 98 1c 	call	0x3930	; 0x3930 <uart_txbuffer_enable>
    5572:	03 c0       	rjmp	.+6      	; 0x557a <uart_enqueue+0x200>
	else uart_txbuffer_disable(port);
    5574:	c7 01       	movw	r24, r14
    5576:	0e 94 9d 1c 	call	0x393a	; 0x393a <uart_txbuffer_disable>
#ifndef UART_DEBUG
	uint8_t idx = port_map(port);
	
	//if (idx==0){uart_enqueue(&uctrl, datain);} //xxx
	
	uart_buffer[idx][uart_head[idx]] = datain;
    557a:	f8 01       	movw	r30, r16
    557c:	80 81       	ld	r24, Z
    557e:	91 81       	ldd	r25, Z+1	; 0x01
    5580:	8e 5b       	subi	r24, 0xBE	; 190
    5582:	94 4c       	sbci	r25, 0xC4	; 196
    5584:	fc 01       	movw	r30, r24
    5586:	b0 82       	st	Z, r11
	uart_head[idx]++;
    5588:	f8 01       	movw	r30, r16
    558a:	80 81       	ld	r24, Z
    558c:	91 81       	ldd	r25, Z+1	; 0x01
    558e:	01 96       	adiw	r24, 0x01	; 1
    5590:	80 83       	st	Z, r24
    5592:	91 83       	std	Z+1, r25	; 0x01
	if (uart_head[idx] >= MAX_BUFFER_LEN){
    5594:	80 81       	ld	r24, Z
    5596:	91 81       	ldd	r25, Z+1	; 0x01
    5598:	f4 e0       	ldi	r31, 0x04	; 4
    559a:	80 30       	cpi	r24, 0x00	; 0
    559c:	9f 07       	cpc	r25, r31
    559e:	18 f0       	brcs	.+6      	; 0x55a6 <uart_enqueue+0x22c>
		uart_head[idx] = 0;
    55a0:	f8 01       	movw	r30, r16
    55a2:	10 82       	st	Z, r1
    55a4:	11 82       	std	Z+1, r1	; 0x01
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    55a6:	f7 01       	movw	r30, r14
    55a8:	81 81       	ldd	r24, Z+1	; 0x01
    55aa:	85 fd       	sbrc	r24, 5
    55ac:	18 c0       	rjmp	.+48     	; 0x55de <uart_enqueue+0x264>
    55ae:	31 c0       	rjmp	.+98     	; 0x5612 <uart_enqueue+0x298>
}

inline uint8_t uart_dequeue(USART_t* port){
	uint8_t idx = port_map(port);
	uint16_t oldtail;
	oldtail = uart_tail[idx];
    55b0:	e8 81       	ld	r30, Y
    55b2:	f9 81       	ldd	r31, Y+1	; 0x01
	uart_tail[idx]++;
    55b4:	88 81       	ld	r24, Y
    55b6:	99 81       	ldd	r25, Y+1	; 0x01
    55b8:	01 96       	adiw	r24, 0x01	; 1
    55ba:	88 83       	st	Y, r24
    55bc:	99 83       	std	Y+1, r25	; 0x01
	if (uart_tail[idx] >= MAX_BUFFER_LEN){
    55be:	88 81       	ld	r24, Y
    55c0:	99 81       	ldd	r25, Y+1	; 0x01
    55c2:	24 e0       	ldi	r18, 0x04	; 4
    55c4:	80 30       	cpi	r24, 0x00	; 0
    55c6:	92 07       	cpc	r25, r18
    55c8:	10 f0       	brcs	.+4      	; 0x55ce <uart_enqueue+0x254>
		uart_tail[idx] = 0;
    55ca:	18 82       	st	Y, r1
    55cc:	19 82       	std	Y+1, r1	; 0x01
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    55ce:	ee 5b       	subi	r30, 0xBE	; 190
    55d0:	f4 4c       	sbci	r31, 0xC4	; 196
    55d2:	80 81       	ld	r24, Z
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
    55d4:	f7 01       	movw	r30, r14
    55d6:	80 83       	st	Z, r24
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    55d8:	81 81       	ldd	r24, Z+1	; 0x01
    55da:	85 ff       	sbrs	r24, 5
    55dc:	1a c0       	rjmp	.+52     	; 0x5612 <uart_enqueue+0x298>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    55de:	f8 01       	movw	r30, r16
    55e0:	80 81       	ld	r24, Z
    55e2:	91 81       	ldd	r25, Z+1	; 0x01
    55e4:	28 81       	ld	r18, Y
    55e6:	39 81       	ldd	r19, Y+1	; 0x01
    55e8:	82 17       	cp	r24, r18
    55ea:	93 07       	cpc	r25, r19
    55ec:	38 f0       	brcs	.+14     	; 0x55fc <uart_enqueue+0x282>
		return (uart_head[idx] - uart_tail[idx]);
    55ee:	80 81       	ld	r24, Z
    55f0:	91 81       	ldd	r25, Z+1	; 0x01
    55f2:	28 81       	ld	r18, Y
    55f4:	39 81       	ldd	r19, Y+1	; 0x01
    55f6:	82 1b       	sub	r24, r18
    55f8:	93 0b       	sbc	r25, r19
    55fa:	09 c0       	rjmp	.+18     	; 0x560e <uart_enqueue+0x294>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    55fc:	f8 01       	movw	r30, r16
    55fe:	80 81       	ld	r24, Z
    5600:	91 81       	ldd	r25, Z+1	; 0x01
    5602:	28 81       	ld	r18, Y
    5604:	39 81       	ldd	r19, Y+1	; 0x01
    5606:	80 50       	subi	r24, 0x00	; 0
    5608:	9c 4f       	sbci	r25, 0xFC	; 252
    560a:	82 1b       	sub	r24, r18
    560c:	93 0b       	sbc	r25, r19
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    560e:	00 97       	sbiw	r24, 0x00	; 0
    5610:	79 f6       	brne	.-98     	; 0x55b0 <uart_enqueue+0x236>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    5612:	f8 01       	movw	r30, r16
    5614:	80 81       	ld	r24, Z
    5616:	91 81       	ldd	r25, Z+1	; 0x01
    5618:	28 81       	ld	r18, Y
    561a:	39 81       	ldd	r19, Y+1	; 0x01
    561c:	82 17       	cp	r24, r18
    561e:	93 07       	cpc	r25, r19
    5620:	38 f0       	brcs	.+14     	; 0x5630 <uart_enqueue+0x2b6>
		return (uart_head[idx] - uart_tail[idx]);
    5622:	80 81       	ld	r24, Z
    5624:	91 81       	ldd	r25, Z+1	; 0x01
    5626:	28 81       	ld	r18, Y
    5628:	39 81       	ldd	r19, Y+1	; 0x01
    562a:	82 1b       	sub	r24, r18
    562c:	93 0b       	sbc	r25, r19
    562e:	09 c0       	rjmp	.+18     	; 0x5642 <uart_enqueue+0x2c8>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    5630:	f8 01       	movw	r30, r16
    5632:	80 81       	ld	r24, Z
    5634:	91 81       	ldd	r25, Z+1	; 0x01
    5636:	28 81       	ld	r18, Y
    5638:	39 81       	ldd	r19, Y+1	; 0x01
    563a:	80 50       	subi	r24, 0x00	; 0
    563c:	9c 4f       	sbci	r25, 0xFC	; 252
    563e:	82 1b       	sub	r24, r18
    5640:	93 0b       	sbc	r25, r19
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
	}
	//disable the tx outgoing hardware buffer ready interrupt if we have nothing more to put in it.
	if(uart_count(port)>0) uart_txbuffer_enable(port);
    5642:	00 97       	sbiw	r24, 0x00	; 0
    5644:	21 f0       	breq	.+8      	; 0x564e <uart_enqueue+0x2d4>
    5646:	c7 01       	movw	r24, r14
    5648:	0e 94 98 1c 	call	0x3930	; 0x3930 <uart_txbuffer_enable>
    564c:	03 c0       	rjmp	.+6      	; 0x5654 <uart_enqueue+0x2da>
	else uart_txbuffer_disable(port);
    564e:	c7 01       	movw	r24, r14
    5650:	0e 94 9d 1c 	call	0x393a	; 0x393a <uart_txbuffer_disable>
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0) && (lcd_flow_control == LCD_READY)){
		toSend = uart_dequeue(port);
		if (toSend == 0x0D) {lcd_flow_control = LCD_BUSY;}
		uart_enqueue(&udata, '`'); //xxx - echo to data port
		uart_enqueue(&udata, toSend); //xxx - echo to data port
		port->DATA = toSend;
    5654:	f6 01       	movw	r30, r12
    5656:	b0 82       	st	Z, r11
}

void inline uart_transmit_lcd(USART_t* port){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0) && (lcd_flow_control == LCD_READY)){
    5658:	81 81       	ldd	r24, Z+1	; 0x01
    565a:	85 fd       	sbrc	r24, 5
    565c:	25 c0       	rjmp	.+74     	; 0x56a8 <uart_enqueue+0x32e>
    565e:	73 c0       	rjmp	.+230    	; 0x5746 <uart_enqueue+0x3cc>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    5660:	0f 2e       	mov	r0, r31
    5662:	fc e3       	ldi	r31, 0x3C	; 60
    5664:	6f 2e       	mov	r6, r31
    5666:	f3 e3       	ldi	r31, 0x33	; 51
    5668:	7f 2e       	mov	r7, r31
    566a:	f0 2d       	mov	r31, r0
    566c:	0f 2e       	mov	r0, r31
    566e:	f8 e4       	ldi	r31, 0x48	; 72
    5670:	8f 2e       	mov	r8, r31
    5672:	ff e3       	ldi	r31, 0x3F	; 63
    5674:	9f 2e       	mov	r9, r31
    5676:	f0 2d       	mov	r31, r0
		uart_tail[idx] = 0;
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    5678:	0f 2e       	mov	r0, r31
    567a:	f2 e4       	ldi	r31, 0x42	; 66
    567c:	4f 2e       	mov	r4, r31
    567e:	f3 e3       	ldi	r31, 0x33	; 51
    5680:	5f 2e       	mov	r5, r31
    5682:	f0 2d       	mov	r31, r0
void inline uart_transmit_lcd(USART_t* port){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0) && (lcd_flow_control == LCD_READY)){
		toSend = uart_dequeue(port);
		if (toSend == 0x0D) {lcd_flow_control = LCD_BUSY;}
    5684:	0f 2e       	mov	r0, r31
    5686:	fe e4       	ldi	r31, 0x4E	; 78
    5688:	3f 2e       	mov	r3, r31
    568a:	f0 2d       	mov	r31, r0
#ifndef UART_DEBUG
	uint8_t idx = port_map(port);
	
	//if (idx==0){uart_enqueue(&uctrl, datain);} //xxx
	
	uart_buffer[idx][uart_head[idx]] = datain;
    568c:	00 e4       	ldi	r16, 0x40	; 64
    568e:	13 e3       	ldi	r17, 0x33	; 51
    5690:	0f 2e       	mov	r0, r31
    5692:	f0 e6       	ldi	r31, 0x60	; 96
    5694:	af 2e       	mov	r10, r31
    5696:	f0 2d       	mov	r31, r0
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    5698:	0f 2e       	mov	r0, r31
    569a:	f0 eb       	ldi	r31, 0xB0	; 176
    569c:	ef 2e       	mov	r14, r31
    569e:	f8 e0       	ldi	r31, 0x08	; 8
    56a0:	ff 2e       	mov	r15, r31
    56a2:	f0 2d       	mov	r31, r0
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    56a4:	cc e4       	ldi	r28, 0x4C	; 76
    56a6:	df e3       	ldi	r29, 0x3F	; 63
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    56a8:	f0 eb       	ldi	r31, 0xB0	; 176
    56aa:	cf 16       	cp	r12, r31
    56ac:	fb e0       	ldi	r31, 0x0B	; 11
    56ae:	df 06       	cpc	r13, r31
    56b0:	61 f0       	breq	.+24     	; 0x56ca <uart_enqueue+0x350>
	if (port == &uctrl) {return 1;}
    56b2:	20 ea       	ldi	r18, 0xA0	; 160
    56b4:	c2 16       	cp	r12, r18
    56b6:	28 e0       	ldi	r18, 0x08	; 8
    56b8:	d2 06       	cpc	r13, r18
    56ba:	49 f0       	breq	.+18     	; 0x56ce <uart_enqueue+0x354>
	if (port == &udata) {return 2;}
    56bc:	30 eb       	ldi	r19, 0xB0	; 176
    56be:	c3 16       	cp	r12, r19
    56c0:	38 e0       	ldi	r19, 0x08	; 8
    56c2:	d3 06       	cpc	r13, r19
    56c4:	31 f4       	brne	.+12     	; 0x56d2 <uart_enqueue+0x358>
    56c6:	22 e0       	ldi	r18, 0x02	; 2
    56c8:	05 c0       	rjmp	.+10     	; 0x56d4 <uart_enqueue+0x35a>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    56ca:	20 e0       	ldi	r18, 0x00	; 0
    56cc:	03 c0       	rjmp	.+6      	; 0x56d4 <uart_enqueue+0x35a>
	if (port == &uctrl) {return 1;}
    56ce:	21 e0       	ldi	r18, 0x01	; 1
    56d0:	01 c0       	rjmp	.+2      	; 0x56d4 <uart_enqueue+0x35a>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    56d2:	20 e0       	ldi	r18, 0x00	; 0
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    56d4:	30 e0       	ldi	r19, 0x00	; 0
    56d6:	c9 01       	movw	r24, r18
    56d8:	88 0f       	add	r24, r24
    56da:	99 1f       	adc	r25, r25
    56dc:	f3 01       	movw	r30, r6
    56de:	e8 0f       	add	r30, r24
    56e0:	f9 1f       	adc	r31, r25
    56e2:	40 81       	ld	r20, Z
    56e4:	51 81       	ldd	r21, Z+1	; 0x01
    56e6:	f4 01       	movw	r30, r8
    56e8:	e8 0f       	add	r30, r24
    56ea:	f9 1f       	adc	r31, r25
    56ec:	80 81       	ld	r24, Z
    56ee:	91 81       	ldd	r25, Z+1	; 0x01
    56f0:	48 17       	cp	r20, r24
    56f2:	59 07       	cpc	r21, r25
    56f4:	88 f0       	brcs	.+34     	; 0x5718 <uart_enqueue+0x39e>
		return (uart_head[idx] - uart_tail[idx]);
    56f6:	22 0f       	add	r18, r18
    56f8:	33 1f       	adc	r19, r19
    56fa:	f3 01       	movw	r30, r6
    56fc:	e2 0f       	add	r30, r18
    56fe:	f3 1f       	adc	r31, r19
    5700:	40 81       	ld	r20, Z
    5702:	51 81       	ldd	r21, Z+1	; 0x01
    5704:	f4 01       	movw	r30, r8
    5706:	e2 0f       	add	r30, r18
    5708:	f3 1f       	adc	r31, r19
    570a:	80 81       	ld	r24, Z
    570c:	91 81       	ldd	r25, Z+1	; 0x01
    570e:	fa 01       	movw	r30, r20
    5710:	e8 1b       	sub	r30, r24
    5712:	f9 0b       	sbc	r31, r25
    5714:	cf 01       	movw	r24, r30
    5716:	10 c0       	rjmp	.+32     	; 0x5738 <uart_enqueue+0x3be>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    5718:	22 0f       	add	r18, r18
    571a:	33 1f       	adc	r19, r19
    571c:	f3 01       	movw	r30, r6
    571e:	e2 0f       	add	r30, r18
    5720:	f3 1f       	adc	r31, r19
    5722:	80 81       	ld	r24, Z
    5724:	91 81       	ldd	r25, Z+1	; 0x01
    5726:	f4 01       	movw	r30, r8
    5728:	e2 0f       	add	r30, r18
    572a:	f3 1f       	adc	r31, r19
    572c:	20 81       	ld	r18, Z
    572e:	31 81       	ldd	r19, Z+1	; 0x01
    5730:	80 50       	subi	r24, 0x00	; 0
    5732:	9c 4f       	sbci	r25, 0xFC	; 252
    5734:	82 1b       	sub	r24, r18
    5736:	93 0b       	sbc	r25, r19
}

void inline uart_transmit_lcd(USART_t* port){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0) && (lcd_flow_control == LCD_READY)){
    5738:	00 97       	sbiw	r24, 0x00	; 0
    573a:	29 f0       	breq	.+10     	; 0x5746 <uart_enqueue+0x3cc>
    573c:	80 91 24 27 	lds	r24, 0x2724
    5740:	82 35       	cpi	r24, 0x52	; 82
    5742:	09 f4       	brne	.+2      	; 0x5746 <uart_enqueue+0x3cc>
    5744:	71 ce       	rjmp	.-798    	; 0x5428 <uart_enqueue+0xae>
		if (toSend == 0x0D) {lcd_flow_control = LCD_BUSY;}
		uart_enqueue(&udata, '`'); //xxx - echo to data port
		uart_enqueue(&udata, toSend); //xxx - echo to data port
		port->DATA = toSend;
	}
	uart_txbuffer_disable(port); //implemented this way to prevent periodic stalls that happen when uart_txbuffer isn't disabled quickly enough
    5746:	c6 01       	movw	r24, r12
    5748:	0e 94 9d 1c 	call	0x393a	; 0x393a <uart_txbuffer_disable>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    574c:	f0 eb       	ldi	r31, 0xB0	; 176
    574e:	cf 16       	cp	r12, r31
    5750:	fb e0       	ldi	r31, 0x0B	; 11
    5752:	df 06       	cpc	r13, r31
    5754:	61 f0       	breq	.+24     	; 0x576e <uart_enqueue+0x3f4>
	if (port == &uctrl) {return 1;}
    5756:	20 ea       	ldi	r18, 0xA0	; 160
    5758:	c2 16       	cp	r12, r18
    575a:	28 e0       	ldi	r18, 0x08	; 8
    575c:	d2 06       	cpc	r13, r18
    575e:	49 f0       	breq	.+18     	; 0x5772 <uart_enqueue+0x3f8>
	if (port == &udata) {return 2;}
    5760:	30 eb       	ldi	r19, 0xB0	; 176
    5762:	c3 16       	cp	r12, r19
    5764:	38 e0       	ldi	r19, 0x08	; 8
    5766:	d3 06       	cpc	r13, r19
    5768:	31 f4       	brne	.+12     	; 0x5776 <uart_enqueue+0x3fc>
    576a:	22 e0       	ldi	r18, 0x02	; 2
    576c:	05 c0       	rjmp	.+10     	; 0x5778 <uart_enqueue+0x3fe>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    576e:	20 e0       	ldi	r18, 0x00	; 0
    5770:	03 c0       	rjmp	.+6      	; 0x5778 <uart_enqueue+0x3fe>
	if (port == &uctrl) {return 1;}
    5772:	21 e0       	ldi	r18, 0x01	; 1
    5774:	01 c0       	rjmp	.+2      	; 0x5778 <uart_enqueue+0x3fe>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    5776:	20 e0       	ldi	r18, 0x00	; 0
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    5778:	30 e0       	ldi	r19, 0x00	; 0
    577a:	c9 01       	movw	r24, r18
    577c:	88 0f       	add	r24, r24
    577e:	99 1f       	adc	r25, r25
    5780:	fc 01       	movw	r30, r24
    5782:	e4 5c       	subi	r30, 0xC4	; 196
    5784:	fc 4c       	sbci	r31, 0xCC	; 204
    5786:	40 81       	ld	r20, Z
    5788:	51 81       	ldd	r21, Z+1	; 0x01
    578a:	88 5b       	subi	r24, 0xB8	; 184
    578c:	90 4c       	sbci	r25, 0xC0	; 192
    578e:	fc 01       	movw	r30, r24
    5790:	80 81       	ld	r24, Z
    5792:	91 81       	ldd	r25, Z+1	; 0x01
    5794:	48 17       	cp	r20, r24
    5796:	59 07       	cpc	r21, r25
    5798:	78 f0       	brcs	.+30     	; 0x57b8 <uart_enqueue+0x43e>
		return (uart_head[idx] - uart_tail[idx]);
    579a:	22 0f       	add	r18, r18
    579c:	33 1f       	adc	r19, r19
    579e:	f9 01       	movw	r30, r18
    57a0:	e4 5c       	subi	r30, 0xC4	; 196
    57a2:	fc 4c       	sbci	r31, 0xCC	; 204
    57a4:	80 81       	ld	r24, Z
    57a6:	91 81       	ldd	r25, Z+1	; 0x01
    57a8:	28 5b       	subi	r18, 0xB8	; 184
    57aa:	30 4c       	sbci	r19, 0xC0	; 192
    57ac:	f9 01       	movw	r30, r18
    57ae:	20 81       	ld	r18, Z
    57b0:	31 81       	ldd	r19, Z+1	; 0x01
    57b2:	82 1b       	sub	r24, r18
    57b4:	93 0b       	sbc	r25, r19
    57b6:	12 c0       	rjmp	.+36     	; 0x57dc <uart_enqueue+0x462>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    57b8:	22 0f       	add	r18, r18
    57ba:	33 1f       	adc	r19, r19
    57bc:	f9 01       	movw	r30, r18
    57be:	e4 5c       	subi	r30, 0xC4	; 196
    57c0:	fc 4c       	sbci	r31, 0xCC	; 204
    57c2:	40 81       	ld	r20, Z
    57c4:	51 81       	ldd	r21, Z+1	; 0x01
    57c6:	28 5b       	subi	r18, 0xB8	; 184
    57c8:	30 4c       	sbci	r19, 0xC0	; 192
    57ca:	f9 01       	movw	r30, r18
    57cc:	80 81       	ld	r24, Z
    57ce:	91 81       	ldd	r25, Z+1	; 0x01
    57d0:	40 50       	subi	r20, 0x00	; 0
    57d2:	5c 4f       	sbci	r21, 0xFC	; 252
    57d4:	9a 01       	movw	r18, r20
    57d6:	28 1b       	sub	r18, r24
    57d8:	39 0b       	sbc	r19, r25
    57da:	c9 01       	movw	r24, r18
		uart_enqueue(&udata, '`'); //xxx - echo to data port
		uart_enqueue(&udata, toSend); //xxx - echo to data port
		port->DATA = toSend;
	}
	uart_txbuffer_disable(port); //implemented this way to prevent periodic stalls that happen when uart_txbuffer isn't disabled quickly enough
	if ((uart_count(port)>0) && (lcd_flow_control == LCD_READY)){ //...something is waiting to go out
    57dc:	00 97       	sbiw	r24, 0x00	; 0
    57de:	09 f4       	brne	.+2      	; 0x57e2 <uart_enqueue+0x468>
    57e0:	ef c0       	rjmp	.+478    	; 0x59c0 <uart_enqueue+0x646>
    57e2:	80 91 24 27 	lds	r24, 0x2724
    57e6:	82 35       	cpi	r24, 0x52	; 82
    57e8:	09 f0       	breq	.+2      	; 0x57ec <uart_enqueue+0x472>
    57ea:	ea c0       	rjmp	.+468    	; 0x59c0 <uart_enqueue+0x646>
		uart_txbuffer_enable(port);	
    57ec:	c6 01       	movw	r24, r12
    57ee:	0e 94 98 1c 	call	0x3930	; 0x3930 <uart_txbuffer_enable>
    57f2:	e6 c0       	rjmp	.+460    	; 0x59c0 <uart_enqueue+0x646>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    57f4:	30 eb       	ldi	r19, 0xB0	; 176
    57f6:	c3 16       	cp	r12, r19
    57f8:	3b e0       	ldi	r19, 0x0B	; 11
    57fa:	d3 06       	cpc	r13, r19
    57fc:	61 f0       	breq	.+24     	; 0x5816 <uart_enqueue+0x49c>
	if (port == &uctrl) {return 1;}
    57fe:	80 ea       	ldi	r24, 0xA0	; 160
    5800:	c8 16       	cp	r12, r24
    5802:	88 e0       	ldi	r24, 0x08	; 8
    5804:	d8 06       	cpc	r13, r24
    5806:	49 f0       	breq	.+18     	; 0x581a <uart_enqueue+0x4a0>
	if (port == &udata) {return 2;}
    5808:	e0 eb       	ldi	r30, 0xB0	; 176
    580a:	ce 16       	cp	r12, r30
    580c:	e8 e0       	ldi	r30, 0x08	; 8
    580e:	de 06       	cpc	r13, r30
    5810:	31 f4       	brne	.+12     	; 0x581e <uart_enqueue+0x4a4>
    5812:	22 e0       	ldi	r18, 0x02	; 2
    5814:	05 c0       	rjmp	.+10     	; 0x5820 <uart_enqueue+0x4a6>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    5816:	20 e0       	ldi	r18, 0x00	; 0
    5818:	03 c0       	rjmp	.+6      	; 0x5820 <uart_enqueue+0x4a6>
	if (port == &uctrl) {return 1;}
    581a:	21 e0       	ldi	r18, 0x01	; 1
    581c:	01 c0       	rjmp	.+2      	; 0x5820 <uart_enqueue+0x4a6>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    581e:	20 e0       	ldi	r18, 0x00	; 0
}

inline uint8_t uart_dequeue(USART_t* port){
	uint8_t idx = port_map(port);
	uint16_t oldtail;
	oldtail = uart_tail[idx];
    5820:	30 e0       	ldi	r19, 0x00	; 0
    5822:	c9 01       	movw	r24, r18
    5824:	88 0f       	add	r24, r24
    5826:	99 1f       	adc	r25, r25
    5828:	fb 01       	movw	r30, r22
    582a:	e8 0f       	add	r30, r24
    582c:	f9 1f       	adc	r31, r25
    582e:	40 81       	ld	r20, Z
    5830:	51 81       	ldd	r21, Z+1	; 0x01
	uart_tail[idx]++;
    5832:	80 81       	ld	r24, Z
    5834:	91 81       	ldd	r25, Z+1	; 0x01
    5836:	01 96       	adiw	r24, 0x01	; 1
    5838:	80 83       	st	Z, r24
    583a:	91 83       	std	Z+1, r25	; 0x01
	if (uart_tail[idx] >= MAX_BUFFER_LEN){
    583c:	80 81       	ld	r24, Z
    583e:	91 81       	ldd	r25, Z+1	; 0x01
    5840:	f4 e0       	ldi	r31, 0x04	; 4
    5842:	80 30       	cpi	r24, 0x00	; 0
    5844:	9f 07       	cpc	r25, r31
    5846:	40 f0       	brcs	.+16     	; 0x5858 <uart_enqueue+0x4de>
		uart_tail[idx] = 0;
    5848:	c9 01       	movw	r24, r18
    584a:	88 0f       	add	r24, r24
    584c:	99 1f       	adc	r25, r25
    584e:	86 0f       	add	r24, r22
    5850:	97 1f       	adc	r25, r23
    5852:	fc 01       	movw	r30, r24
    5854:	10 82       	st	Z, r1
    5856:	11 82       	std	Z+1, r1	; 0x01
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    5858:	c9 01       	movw	r24, r18
    585a:	98 2f       	mov	r25, r24
    585c:	88 27       	eor	r24, r24
    585e:	99 0f       	add	r25, r25
    5860:	99 0f       	add	r25, r25
    5862:	84 0f       	add	r24, r20
    5864:	95 1f       	adc	r25, r21
    5866:	fe 01       	movw	r30, r28
    5868:	e8 0f       	add	r30, r24
    586a:	f9 1f       	adc	r31, r25
    586c:	80 81       	ld	r24, Z
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
    586e:	f6 01       	movw	r30, r12
    5870:	80 83       	st	Z, r24
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    5872:	81 81       	ldd	r24, Z+1	; 0x01
    5874:	85 fd       	sbrc	r24, 5
    5876:	07 c0       	rjmp	.+14     	; 0x5886 <uart_enqueue+0x50c>
    5878:	53 c0       	rjmp	.+166    	; 0x5920 <uart_enqueue+0x5a6>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    587a:	ac e3       	ldi	r26, 0x3C	; 60
    587c:	b3 e3       	ldi	r27, 0x33	; 51
    587e:	68 e4       	ldi	r22, 0x48	; 72
    5880:	7f e3       	ldi	r23, 0x3F	; 63
		uart_tail[idx] = 0;
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    5882:	c2 e4       	ldi	r28, 0x42	; 66
    5884:	d3 e3       	ldi	r29, 0x33	; 51
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    5886:	f0 eb       	ldi	r31, 0xB0	; 176
    5888:	cf 16       	cp	r12, r31
    588a:	fb e0       	ldi	r31, 0x0B	; 11
    588c:	df 06       	cpc	r13, r31
    588e:	61 f0       	breq	.+24     	; 0x58a8 <uart_enqueue+0x52e>
	if (port == &uctrl) {return 1;}
    5890:	20 ea       	ldi	r18, 0xA0	; 160
    5892:	c2 16       	cp	r12, r18
    5894:	28 e0       	ldi	r18, 0x08	; 8
    5896:	d2 06       	cpc	r13, r18
    5898:	49 f0       	breq	.+18     	; 0x58ac <uart_enqueue+0x532>
	if (port == &udata) {return 2;}
    589a:	30 eb       	ldi	r19, 0xB0	; 176
    589c:	c3 16       	cp	r12, r19
    589e:	38 e0       	ldi	r19, 0x08	; 8
    58a0:	d3 06       	cpc	r13, r19
    58a2:	31 f4       	brne	.+12     	; 0x58b0 <uart_enqueue+0x536>
    58a4:	22 e0       	ldi	r18, 0x02	; 2
    58a6:	05 c0       	rjmp	.+10     	; 0x58b2 <uart_enqueue+0x538>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    58a8:	20 e0       	ldi	r18, 0x00	; 0
    58aa:	03 c0       	rjmp	.+6      	; 0x58b2 <uart_enqueue+0x538>
	if (port == &uctrl) {return 1;}
    58ac:	21 e0       	ldi	r18, 0x01	; 1
    58ae:	01 c0       	rjmp	.+2      	; 0x58b2 <uart_enqueue+0x538>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    58b0:	20 e0       	ldi	r18, 0x00	; 0
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    58b2:	30 e0       	ldi	r19, 0x00	; 0
    58b4:	c9 01       	movw	r24, r18
    58b6:	88 0f       	add	r24, r24
    58b8:	99 1f       	adc	r25, r25
    58ba:	fd 01       	movw	r30, r26
    58bc:	e8 0f       	add	r30, r24
    58be:	f9 1f       	adc	r31, r25
    58c0:	40 81       	ld	r20, Z
    58c2:	51 81       	ldd	r21, Z+1	; 0x01
    58c4:	fb 01       	movw	r30, r22
    58c6:	e8 0f       	add	r30, r24
    58c8:	f9 1f       	adc	r31, r25
    58ca:	80 81       	ld	r24, Z
    58cc:	91 81       	ldd	r25, Z+1	; 0x01
    58ce:	48 17       	cp	r20, r24
    58d0:	59 07       	cpc	r21, r25
    58d2:	88 f0       	brcs	.+34     	; 0x58f6 <uart_enqueue+0x57c>
		return (uart_head[idx] - uart_tail[idx]);
    58d4:	22 0f       	add	r18, r18
    58d6:	33 1f       	adc	r19, r19
    58d8:	fd 01       	movw	r30, r26
    58da:	e2 0f       	add	r30, r18
    58dc:	f3 1f       	adc	r31, r19
    58de:	40 81       	ld	r20, Z
    58e0:	51 81       	ldd	r21, Z+1	; 0x01
    58e2:	fb 01       	movw	r30, r22
    58e4:	e2 0f       	add	r30, r18
    58e6:	f3 1f       	adc	r31, r19
    58e8:	80 81       	ld	r24, Z
    58ea:	91 81       	ldd	r25, Z+1	; 0x01
    58ec:	fa 01       	movw	r30, r20
    58ee:	e8 1b       	sub	r30, r24
    58f0:	f9 0b       	sbc	r31, r25
    58f2:	cf 01       	movw	r24, r30
    58f4:	12 c0       	rjmp	.+36     	; 0x591a <uart_enqueue+0x5a0>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    58f6:	c9 01       	movw	r24, r18
    58f8:	88 0f       	add	r24, r24
    58fa:	99 1f       	adc	r25, r25
    58fc:	fd 01       	movw	r30, r26
    58fe:	e8 0f       	add	r30, r24
    5900:	f9 1f       	adc	r31, r25
    5902:	40 81       	ld	r20, Z
    5904:	51 81       	ldd	r21, Z+1	; 0x01
    5906:	fb 01       	movw	r30, r22
    5908:	e8 0f       	add	r30, r24
    590a:	f9 1f       	adc	r31, r25
    590c:	20 81       	ld	r18, Z
    590e:	31 81       	ldd	r19, Z+1	; 0x01
    5910:	ca 01       	movw	r24, r20
    5912:	80 50       	subi	r24, 0x00	; 0
    5914:	9c 4f       	sbci	r25, 0xFC	; 252
    5916:	82 1b       	sub	r24, r18
    5918:	93 0b       	sbc	r25, r19
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    591a:	00 97       	sbiw	r24, 0x00	; 0
    591c:	09 f0       	breq	.+2      	; 0x5920 <uart_enqueue+0x5a6>
    591e:	6a cf       	rjmp	.-300    	; 0x57f4 <uart_enqueue+0x47a>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    5920:	f0 eb       	ldi	r31, 0xB0	; 176
    5922:	cf 16       	cp	r12, r31
    5924:	fb e0       	ldi	r31, 0x0B	; 11
    5926:	df 06       	cpc	r13, r31
    5928:	61 f0       	breq	.+24     	; 0x5942 <uart_enqueue+0x5c8>
	if (port == &uctrl) {return 1;}
    592a:	20 ea       	ldi	r18, 0xA0	; 160
    592c:	c2 16       	cp	r12, r18
    592e:	28 e0       	ldi	r18, 0x08	; 8
    5930:	d2 06       	cpc	r13, r18
    5932:	49 f0       	breq	.+18     	; 0x5946 <uart_enqueue+0x5cc>
	if (port == &udata) {return 2;}
    5934:	30 eb       	ldi	r19, 0xB0	; 176
    5936:	c3 16       	cp	r12, r19
    5938:	38 e0       	ldi	r19, 0x08	; 8
    593a:	d3 06       	cpc	r13, r19
    593c:	31 f4       	brne	.+12     	; 0x594a <uart_enqueue+0x5d0>
    593e:	22 e0       	ldi	r18, 0x02	; 2
    5940:	05 c0       	rjmp	.+10     	; 0x594c <uart_enqueue+0x5d2>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    5942:	20 e0       	ldi	r18, 0x00	; 0
    5944:	03 c0       	rjmp	.+6      	; 0x594c <uart_enqueue+0x5d2>
	if (port == &uctrl) {return 1;}
    5946:	21 e0       	ldi	r18, 0x01	; 1
    5948:	01 c0       	rjmp	.+2      	; 0x594c <uart_enqueue+0x5d2>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    594a:	20 e0       	ldi	r18, 0x00	; 0
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    594c:	30 e0       	ldi	r19, 0x00	; 0
    594e:	c9 01       	movw	r24, r18
    5950:	88 0f       	add	r24, r24
    5952:	99 1f       	adc	r25, r25
    5954:	fc 01       	movw	r30, r24
    5956:	e4 5c       	subi	r30, 0xC4	; 196
    5958:	fc 4c       	sbci	r31, 0xCC	; 204
    595a:	40 81       	ld	r20, Z
    595c:	51 81       	ldd	r21, Z+1	; 0x01
    595e:	88 5b       	subi	r24, 0xB8	; 184
    5960:	90 4c       	sbci	r25, 0xC0	; 192
    5962:	fc 01       	movw	r30, r24
    5964:	80 81       	ld	r24, Z
    5966:	91 81       	ldd	r25, Z+1	; 0x01
    5968:	48 17       	cp	r20, r24
    596a:	59 07       	cpc	r21, r25
    596c:	78 f0       	brcs	.+30     	; 0x598c <uart_enqueue+0x612>
		return (uart_head[idx] - uart_tail[idx]);
    596e:	22 0f       	add	r18, r18
    5970:	33 1f       	adc	r19, r19
    5972:	f9 01       	movw	r30, r18
    5974:	e4 5c       	subi	r30, 0xC4	; 196
    5976:	fc 4c       	sbci	r31, 0xCC	; 204
    5978:	40 81       	ld	r20, Z
    597a:	51 81       	ldd	r21, Z+1	; 0x01
    597c:	28 5b       	subi	r18, 0xB8	; 184
    597e:	30 4c       	sbci	r19, 0xC0	; 192
    5980:	f9 01       	movw	r30, r18
    5982:	80 81       	ld	r24, Z
    5984:	91 81       	ldd	r25, Z+1	; 0x01
    5986:	48 1b       	sub	r20, r24
    5988:	59 0b       	sbc	r21, r25
    598a:	10 c0       	rjmp	.+32     	; 0x59ac <uart_enqueue+0x632>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    598c:	22 0f       	add	r18, r18
    598e:	33 1f       	adc	r19, r19
    5990:	f9 01       	movw	r30, r18
    5992:	e4 5c       	subi	r30, 0xC4	; 196
    5994:	fc 4c       	sbci	r31, 0xCC	; 204
    5996:	40 81       	ld	r20, Z
    5998:	51 81       	ldd	r21, Z+1	; 0x01
    599a:	28 5b       	subi	r18, 0xB8	; 184
    599c:	30 4c       	sbci	r19, 0xC0	; 192
    599e:	f9 01       	movw	r30, r18
    59a0:	80 81       	ld	r24, Z
    59a2:	91 81       	ldd	r25, Z+1	; 0x01
    59a4:	40 50       	subi	r20, 0x00	; 0
    59a6:	5c 4f       	sbci	r21, 0xFC	; 252
    59a8:	48 1b       	sub	r20, r24
    59aa:	59 0b       	sbc	r21, r25
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
	}
	//disable the tx outgoing hardware buffer ready interrupt if we have nothing more to put in it.
	if(uart_count(port)>0) uart_txbuffer_enable(port);
    59ac:	41 15       	cp	r20, r1
    59ae:	51 05       	cpc	r21, r1
    59b0:	21 f0       	breq	.+8      	; 0x59ba <uart_enqueue+0x640>
    59b2:	c6 01       	movw	r24, r12
    59b4:	0e 94 98 1c 	call	0x3930	; 0x3930 <uart_txbuffer_enable>
    59b8:	03 c0       	rjmp	.+6      	; 0x59c0 <uart_enqueue+0x646>
	else uart_txbuffer_disable(port);
    59ba:	c6 01       	movw	r24, r12
    59bc:	0e 94 9d 1c 	call	0x393a	; 0x393a <uart_txbuffer_disable>
	}
	if (idx == 0){uart_transmit_lcd(port);} //start the transmission process.
	else {uart_transmit(port);} //start the transmission process.}	
	
#endif
}
    59c0:	df 91       	pop	r29
    59c2:	cf 91       	pop	r28
    59c4:	1f 91       	pop	r17
    59c6:	0f 91       	pop	r16
    59c8:	ff 90       	pop	r15
    59ca:	ef 90       	pop	r14
    59cc:	df 90       	pop	r13
    59ce:	cf 90       	pop	r12
    59d0:	bf 90       	pop	r11
    59d2:	af 90       	pop	r10
    59d4:	9f 90       	pop	r9
    59d6:	8f 90       	pop	r8
    59d8:	7f 90       	pop	r7
    59da:	6f 90       	pop	r6
    59dc:	5f 90       	pop	r5
    59de:	4f 90       	pop	r4
    59e0:	3f 90       	pop	r3
    59e2:	08 95       	ret

000059e4 <uart_dequeue>:
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    59e4:	2b e0       	ldi	r18, 0x0B	; 11
    59e6:	80 3b       	cpi	r24, 0xB0	; 176
    59e8:	92 07       	cpc	r25, r18
    59ea:	51 f0       	breq	.+20     	; 0x5a00 <uart_dequeue+0x1c>
	if (port == &uctrl) {return 1;}
    59ec:	68 e0       	ldi	r22, 0x08	; 8
    59ee:	80 3a       	cpi	r24, 0xA0	; 160
    59f0:	96 07       	cpc	r25, r22
    59f2:	41 f0       	breq	.+16     	; 0x5a04 <uart_dequeue+0x20>
	if (port == &udata) {return 2;}
    59f4:	28 e0       	ldi	r18, 0x08	; 8
    59f6:	80 3b       	cpi	r24, 0xB0	; 176
    59f8:	92 07       	cpc	r25, r18
    59fa:	31 f4       	brne	.+12     	; 0x5a08 <uart_dequeue+0x24>
    59fc:	22 e0       	ldi	r18, 0x02	; 2
    59fe:	05 c0       	rjmp	.+10     	; 0x5a0a <uart_dequeue+0x26>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    5a00:	20 e0       	ldi	r18, 0x00	; 0
    5a02:	03 c0       	rjmp	.+6      	; 0x5a0a <uart_dequeue+0x26>
	if (port == &uctrl) {return 1;}
    5a04:	21 e0       	ldi	r18, 0x01	; 1
    5a06:	01 c0       	rjmp	.+2      	; 0x5a0a <uart_dequeue+0x26>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    5a08:	20 e0       	ldi	r18, 0x00	; 0
}

inline uint8_t uart_dequeue(USART_t* port){
	uint8_t idx = port_map(port);
	uint16_t oldtail;
	oldtail = uart_tail[idx];
    5a0a:	30 e0       	ldi	r19, 0x00	; 0
    5a0c:	f9 01       	movw	r30, r18
    5a0e:	ee 0f       	add	r30, r30
    5a10:	ff 1f       	adc	r31, r31
    5a12:	e8 5b       	subi	r30, 0xB8	; 184
    5a14:	f0 4c       	sbci	r31, 0xC0	; 192
    5a16:	40 81       	ld	r20, Z
    5a18:	51 81       	ldd	r21, Z+1	; 0x01
	uart_tail[idx]++;
    5a1a:	80 81       	ld	r24, Z
    5a1c:	91 81       	ldd	r25, Z+1	; 0x01
    5a1e:	01 96       	adiw	r24, 0x01	; 1
    5a20:	80 83       	st	Z, r24
    5a22:	91 83       	std	Z+1, r25	; 0x01
	if (uart_tail[idx] >= MAX_BUFFER_LEN){
    5a24:	80 81       	ld	r24, Z
    5a26:	91 81       	ldd	r25, Z+1	; 0x01
    5a28:	64 e0       	ldi	r22, 0x04	; 4
    5a2a:	80 30       	cpi	r24, 0x00	; 0
    5a2c:	96 07       	cpc	r25, r22
    5a2e:	38 f0       	brcs	.+14     	; 0x5a3e <uart_dequeue+0x5a>
		uart_tail[idx] = 0;
    5a30:	f9 01       	movw	r30, r18
    5a32:	ee 0f       	add	r30, r30
    5a34:	ff 1f       	adc	r31, r31
    5a36:	e8 5b       	subi	r30, 0xB8	; 184
    5a38:	f0 4c       	sbci	r31, 0xC0	; 192
    5a3a:	10 82       	st	Z, r1
    5a3c:	11 82       	std	Z+1, r1	; 0x01
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    5a3e:	f9 01       	movw	r30, r18
    5a40:	fe 2f       	mov	r31, r30
    5a42:	ee 27       	eor	r30, r30
    5a44:	ff 0f       	add	r31, r31
    5a46:	ff 0f       	add	r31, r31
    5a48:	4e 0f       	add	r20, r30
    5a4a:	5f 1f       	adc	r21, r31
    5a4c:	fa 01       	movw	r30, r20
    5a4e:	ee 5b       	subi	r30, 0xBE	; 190
    5a50:	fc 4c       	sbci	r31, 0xCC	; 204
    5a52:	80 81       	ld	r24, Z
}
    5a54:	08 95       	ret

00005a56 <init_uart_ibuffer>:
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    5a56:	2b e0       	ldi	r18, 0x0B	; 11
    5a58:	80 3b       	cpi	r24, 0xB0	; 176
    5a5a:	92 07       	cpc	r25, r18
    5a5c:	51 f0       	breq	.+20     	; 0x5a72 <init_uart_ibuffer+0x1c>
	if (port == &uctrl) {return 1;}
    5a5e:	e8 e0       	ldi	r30, 0x08	; 8
    5a60:	80 3a       	cpi	r24, 0xA0	; 160
    5a62:	9e 07       	cpc	r25, r30
    5a64:	41 f0       	breq	.+16     	; 0x5a76 <init_uart_ibuffer+0x20>
	if (port == &udata) {return 2;}
    5a66:	f8 e0       	ldi	r31, 0x08	; 8
    5a68:	80 3b       	cpi	r24, 0xB0	; 176
    5a6a:	9f 07       	cpc	r25, r31
    5a6c:	31 f4       	brne	.+12     	; 0x5a7a <init_uart_ibuffer+0x24>
    5a6e:	82 e0       	ldi	r24, 0x02	; 2
    5a70:	05 c0       	rjmp	.+10     	; 0x5a7c <init_uart_ibuffer+0x26>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    5a72:	80 e0       	ldi	r24, 0x00	; 0
    5a74:	03 c0       	rjmp	.+6      	; 0x5a7c <init_uart_ibuffer+0x26>
	if (port == &uctrl) {return 1;}
    5a76:	81 e0       	ldi	r24, 0x01	; 1
    5a78:	01 c0       	rjmp	.+2      	; 0x5a7c <init_uart_ibuffer+0x26>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    5a7a:	80 e0       	ldi	r24, 0x00	; 0
	No protection is provided for buffer overflow! Be careful! */
//***************************************************

void init_uart_ibuffer(USART_t* port){
	uint8_t idx = port_map(port);
	uart_ihead[idx] = 0;
    5a7c:	90 e0       	ldi	r25, 0x00	; 0
    5a7e:	88 0f       	add	r24, r24
    5a80:	99 1f       	adc	r25, r25
    5a82:	fc 01       	movw	r30, r24
    5a84:	ee 5b       	subi	r30, 0xBE	; 190
    5a86:	f0 4c       	sbci	r31, 0xC0	; 192
    5a88:	10 82       	st	Z, r1
    5a8a:	11 82       	std	Z+1, r1	; 0x01
	uart_itail[idx] = 0;
    5a8c:	8a 5c       	subi	r24, 0xCA	; 202
    5a8e:	98 4d       	sbci	r25, 0xD8	; 216
    5a90:	fc 01       	movw	r30, r24
    5a92:	10 82       	st	Z, r1
    5a94:	11 82       	std	Z+1, r1	; 0x01
}
    5a96:	08 95       	ret

00005a98 <init_uart_buffer>:
//** [PORT AGNOSTIC CODE]
//************************************************************************
//************************************************************************

//MAKE SURE TO INIT UART FIRST
void init_uart_buffer(USART_t* port){
    5a98:	cf 93       	push	r28
    5a9a:	df 93       	push	r29
    5a9c:	ec 01       	movw	r28, r24
	//Setup data buffers
		init_uart_obuffer(port);
    5a9e:	0e 94 cf 25 	call	0x4b9e	; 0x4b9e <init_uart_obuffer>
		init_uart_ibuffer(port);
    5aa2:	ce 01       	movw	r24, r28
    5aa4:	0e 94 2b 2d 	call	0x5a56	; 0x5a56 <init_uart_ibuffer>
	//Enable Receive and Transmit interrupts
		uart_rxbuffer_enable(port);
    5aa8:	ce 01       	movw	r24, r28
    5aaa:	0e 94 8e 1c 	call	0x391c	; 0x391c <uart_rxbuffer_enable>
		uart_txbuffer_enable(port);
    5aae:	ce 01       	movw	r24, r28
    5ab0:	0e 94 98 1c 	call	0x3930	; 0x3930 <uart_txbuffer_enable>
}
    5ab4:	df 91       	pop	r29
    5ab6:	cf 91       	pop	r28
    5ab8:	08 95       	ret

00005aba <init_uart_buffers>:
ISR(USARTF1_DRE_vect) {uart_transmit_lcd(&ulcd);}//TX Interrupt
ISR(USARTF1_RXC_vect) {uart_receive_lcd(&ulcd);} //RX Interrupt
	
//MAKE SURE TO INIT UART FIRST
void init_uart_buffers(){
	init_uart_buffer(&uctrl);
    5aba:	80 ea       	ldi	r24, 0xA0	; 160
    5abc:	98 e0       	ldi	r25, 0x08	; 8
    5abe:	0e 94 4c 2d 	call	0x5a98	; 0x5a98 <init_uart_buffer>
	init_uart_buffer(&udata);
    5ac2:	80 eb       	ldi	r24, 0xB0	; 176
    5ac4:	98 e0       	ldi	r25, 0x08	; 8
    5ac6:	0e 94 4c 2d 	call	0x5a98	; 0x5a98 <init_uart_buffer>
	init_uart_buffer(&ulcd);
    5aca:	80 eb       	ldi	r24, 0xB0	; 176
    5acc:	9b e0       	ldi	r25, 0x0B	; 11
    5ace:	0e 94 4c 2d 	call	0x5a98	; 0x5a98 <init_uart_buffer>
}	
    5ad2:	08 95       	ret

00005ad4 <uart_icount>:
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    5ad4:	2b e0       	ldi	r18, 0x0B	; 11
    5ad6:	80 3b       	cpi	r24, 0xB0	; 176
    5ad8:	92 07       	cpc	r25, r18
    5ada:	51 f0       	breq	.+20     	; 0x5af0 <uart_icount+0x1c>
	if (port == &uctrl) {return 1;}
    5adc:	e8 e0       	ldi	r30, 0x08	; 8
    5ade:	80 3a       	cpi	r24, 0xA0	; 160
    5ae0:	9e 07       	cpc	r25, r30
    5ae2:	41 f0       	breq	.+16     	; 0x5af4 <uart_icount+0x20>
	if (port == &udata) {return 2;}
    5ae4:	f8 e0       	ldi	r31, 0x08	; 8
    5ae6:	80 3b       	cpi	r24, 0xB0	; 176
    5ae8:	9f 07       	cpc	r25, r31
    5aea:	31 f4       	brne	.+12     	; 0x5af8 <uart_icount+0x24>
    5aec:	82 e0       	ldi	r24, 0x02	; 2
    5aee:	05 c0       	rjmp	.+10     	; 0x5afa <uart_icount+0x26>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    5af0:	80 e0       	ldi	r24, 0x00	; 0
    5af2:	03 c0       	rjmp	.+6      	; 0x5afa <uart_icount+0x26>
	if (port == &uctrl) {return 1;}
    5af4:	81 e0       	ldi	r24, 0x01	; 1
    5af6:	01 c0       	rjmp	.+2      	; 0x5afa <uart_icount+0x26>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    5af8:	80 e0       	ldi	r24, 0x00	; 0
	uart_itail[idx] = 0;
}

inline uint16_t uart_icount(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_ihead[idx] >= uart_itail[idx]){	
    5afa:	90 e0       	ldi	r25, 0x00	; 0
    5afc:	9c 01       	movw	r18, r24
    5afe:	22 0f       	add	r18, r18
    5b00:	33 1f       	adc	r19, r19
    5b02:	f9 01       	movw	r30, r18
    5b04:	ee 5b       	subi	r30, 0xBE	; 190
    5b06:	f0 4c       	sbci	r31, 0xC0	; 192
    5b08:	40 81       	ld	r20, Z
    5b0a:	51 81       	ldd	r21, Z+1	; 0x01
    5b0c:	2a 5c       	subi	r18, 0xCA	; 202
    5b0e:	38 4d       	sbci	r19, 0xD8	; 216
    5b10:	f9 01       	movw	r30, r18
    5b12:	20 81       	ld	r18, Z
    5b14:	31 81       	ldd	r19, Z+1	; 0x01
    5b16:	42 17       	cp	r20, r18
    5b18:	53 07       	cpc	r21, r19
    5b1a:	80 f0       	brcs	.+32     	; 0x5b3c <uart_icount+0x68>
		return (uart_ihead[idx] - uart_itail[idx]);
    5b1c:	9c 01       	movw	r18, r24
    5b1e:	22 0f       	add	r18, r18
    5b20:	33 1f       	adc	r19, r19
    5b22:	f9 01       	movw	r30, r18
    5b24:	ee 5b       	subi	r30, 0xBE	; 190
    5b26:	f0 4c       	sbci	r31, 0xC0	; 192
    5b28:	80 81       	ld	r24, Z
    5b2a:	91 81       	ldd	r25, Z+1	; 0x01
    5b2c:	2a 5c       	subi	r18, 0xCA	; 202
    5b2e:	38 4d       	sbci	r19, 0xD8	; 216
    5b30:	f9 01       	movw	r30, r18
    5b32:	20 81       	ld	r18, Z
    5b34:	31 81       	ldd	r19, Z+1	; 0x01
    5b36:	82 1b       	sub	r24, r18
    5b38:	93 0b       	sbc	r25, r19
    5b3a:	08 95       	ret
	}
	else {
		return ((MAX_IBUFFER_LEN-uart_itail[idx])+uart_ihead[idx]);
    5b3c:	9c 01       	movw	r18, r24
    5b3e:	22 0f       	add	r18, r18
    5b40:	33 1f       	adc	r19, r19
    5b42:	f9 01       	movw	r30, r18
    5b44:	ee 5b       	subi	r30, 0xBE	; 190
    5b46:	f0 4c       	sbci	r31, 0xC0	; 192
    5b48:	40 81       	ld	r20, Z
    5b4a:	51 81       	ldd	r21, Z+1	; 0x01
    5b4c:	2a 5c       	subi	r18, 0xCA	; 202
    5b4e:	38 4d       	sbci	r19, 0xD8	; 216
    5b50:	f9 01       	movw	r30, r18
    5b52:	20 81       	ld	r18, Z
    5b54:	31 81       	ldd	r19, Z+1	; 0x01
    5b56:	ca 01       	movw	r24, r20
    5b58:	80 50       	subi	r24, 0x00	; 0
    5b5a:	9c 4f       	sbci	r25, 0xFC	; 252
    5b5c:	82 1b       	sub	r24, r18
    5b5e:	93 0b       	sbc	r25, r19
	}
}
    5b60:	08 95       	ret

00005b62 <uart_ienqueue>:
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    5b62:	2b e0       	ldi	r18, 0x0B	; 11
    5b64:	80 3b       	cpi	r24, 0xB0	; 176
    5b66:	92 07       	cpc	r25, r18
    5b68:	51 f0       	breq	.+20     	; 0x5b7e <uart_ienqueue+0x1c>
	if (port == &uctrl) {return 1;}
    5b6a:	28 e0       	ldi	r18, 0x08	; 8
    5b6c:	80 3a       	cpi	r24, 0xA0	; 160
    5b6e:	92 07       	cpc	r25, r18
    5b70:	41 f0       	breq	.+16     	; 0x5b82 <uart_ienqueue+0x20>
	if (port == &udata) {return 2;}
    5b72:	28 e0       	ldi	r18, 0x08	; 8
    5b74:	80 3b       	cpi	r24, 0xB0	; 176
    5b76:	92 07       	cpc	r25, r18
    5b78:	31 f4       	brne	.+12     	; 0x5b86 <uart_ienqueue+0x24>
    5b7a:	42 e0       	ldi	r20, 0x02	; 2
    5b7c:	05 c0       	rjmp	.+10     	; 0x5b88 <uart_ienqueue+0x26>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    5b7e:	40 e0       	ldi	r20, 0x00	; 0
    5b80:	03 c0       	rjmp	.+6      	; 0x5b88 <uart_ienqueue+0x26>
	if (port == &uctrl) {return 1;}
    5b82:	41 e0       	ldi	r20, 0x01	; 1
    5b84:	01 c0       	rjmp	.+2      	; 0x5b88 <uart_ienqueue+0x26>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    5b86:	40 e0       	ldi	r20, 0x00	; 0
	}
}

inline void uart_ienqueue(USART_t* port, uint8_t datain){
	uint8_t idx = port_map(port);
	uart_ibuffer[idx][uart_ihead[idx]] = datain;
    5b88:	50 e0       	ldi	r21, 0x00	; 0
    5b8a:	fa 01       	movw	r30, r20
    5b8c:	ee 0f       	add	r30, r30
    5b8e:	ff 1f       	adc	r31, r31
    5b90:	ee 5b       	subi	r30, 0xBE	; 190
    5b92:	f0 4c       	sbci	r31, 0xC0	; 192
    5b94:	80 81       	ld	r24, Z
    5b96:	91 81       	ldd	r25, Z+1	; 0x01
    5b98:	9a 01       	movw	r18, r20
    5b9a:	32 2f       	mov	r19, r18
    5b9c:	22 27       	eor	r18, r18
    5b9e:	33 0f       	add	r19, r19
    5ba0:	33 0f       	add	r19, r19
    5ba2:	82 0f       	add	r24, r18
    5ba4:	93 1f       	adc	r25, r19
    5ba6:	dc 01       	movw	r26, r24
    5ba8:	a4 5c       	subi	r26, 0xC4	; 196
    5baa:	b8 4d       	sbci	r27, 0xD8	; 216
    5bac:	6c 93       	st	X, r22
	uart_ihead[idx]++;
    5bae:	80 81       	ld	r24, Z
    5bb0:	91 81       	ldd	r25, Z+1	; 0x01
    5bb2:	01 96       	adiw	r24, 0x01	; 1
    5bb4:	80 83       	st	Z, r24
    5bb6:	91 83       	std	Z+1, r25	; 0x01
	if (uart_ihead[idx] >= MAX_IBUFFER_LEN){
    5bb8:	80 81       	ld	r24, Z
    5bba:	91 81       	ldd	r25, Z+1	; 0x01
    5bbc:	24 e0       	ldi	r18, 0x04	; 4
    5bbe:	80 30       	cpi	r24, 0x00	; 0
    5bc0:	92 07       	cpc	r25, r18
    5bc2:	38 f0       	brcs	.+14     	; 0x5bd2 <uart_ienqueue+0x70>
		uart_ihead[idx] = 0;
    5bc4:	fa 01       	movw	r30, r20
    5bc6:	ee 0f       	add	r30, r30
    5bc8:	ff 1f       	adc	r31, r31
    5bca:	ee 5b       	subi	r30, 0xBE	; 190
    5bcc:	f0 4c       	sbci	r31, 0xC0	; 192
    5bce:	10 82       	st	Z, r1
    5bd0:	11 82       	std	Z+1, r1	; 0x01
    5bd2:	08 95       	ret

00005bd4 <uart_idequeue>:
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    5bd4:	2b e0       	ldi	r18, 0x0B	; 11
    5bd6:	80 3b       	cpi	r24, 0xB0	; 176
    5bd8:	92 07       	cpc	r25, r18
    5bda:	51 f0       	breq	.+20     	; 0x5bf0 <uart_idequeue+0x1c>
	if (port == &uctrl) {return 1;}
    5bdc:	68 e0       	ldi	r22, 0x08	; 8
    5bde:	80 3a       	cpi	r24, 0xA0	; 160
    5be0:	96 07       	cpc	r25, r22
    5be2:	41 f0       	breq	.+16     	; 0x5bf4 <uart_idequeue+0x20>
	if (port == &udata) {return 2;}
    5be4:	28 e0       	ldi	r18, 0x08	; 8
    5be6:	80 3b       	cpi	r24, 0xB0	; 176
    5be8:	92 07       	cpc	r25, r18
    5bea:	31 f4       	brne	.+12     	; 0x5bf8 <uart_idequeue+0x24>
    5bec:	22 e0       	ldi	r18, 0x02	; 2
    5bee:	05 c0       	rjmp	.+10     	; 0x5bfa <uart_idequeue+0x26>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    5bf0:	20 e0       	ldi	r18, 0x00	; 0
    5bf2:	03 c0       	rjmp	.+6      	; 0x5bfa <uart_idequeue+0x26>
	if (port == &uctrl) {return 1;}
    5bf4:	21 e0       	ldi	r18, 0x01	; 1
    5bf6:	01 c0       	rjmp	.+2      	; 0x5bfa <uart_idequeue+0x26>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    5bf8:	20 e0       	ldi	r18, 0x00	; 0

//internal implementation of peek and dequeue
inline uint8_t _uart_idequeue(USART_t* port, uint8_t peek){
	uint8_t idx = port_map(port);
	uint16_t oldtail;
	oldtail = uart_itail[idx];
    5bfa:	30 e0       	ldi	r19, 0x00	; 0
    5bfc:	f9 01       	movw	r30, r18
    5bfe:	ee 0f       	add	r30, r30
    5c00:	ff 1f       	adc	r31, r31
    5c02:	ea 5c       	subi	r30, 0xCA	; 202
    5c04:	f8 4d       	sbci	r31, 0xD8	; 216
    5c06:	40 81       	ld	r20, Z
    5c08:	51 81       	ldd	r21, Z+1	; 0x01
	uart_itail[idx]++;
    5c0a:	80 81       	ld	r24, Z
    5c0c:	91 81       	ldd	r25, Z+1	; 0x01
    5c0e:	01 96       	adiw	r24, 0x01	; 1
    5c10:	80 83       	st	Z, r24
    5c12:	91 83       	std	Z+1, r25	; 0x01
	if (uart_itail[idx] >= MAX_IBUFFER_LEN){
    5c14:	80 81       	ld	r24, Z
    5c16:	91 81       	ldd	r25, Z+1	; 0x01
    5c18:	64 e0       	ldi	r22, 0x04	; 4
    5c1a:	80 30       	cpi	r24, 0x00	; 0
    5c1c:	96 07       	cpc	r25, r22
    5c1e:	38 f0       	brcs	.+14     	; 0x5c2e <uart_idequeue+0x5a>
		uart_itail[idx] = 0;
    5c20:	f9 01       	movw	r30, r18
    5c22:	ee 0f       	add	r30, r30
    5c24:	ff 1f       	adc	r31, r31
    5c26:	ea 5c       	subi	r30, 0xCA	; 202
    5c28:	f8 4d       	sbci	r31, 0xD8	; 216
    5c2a:	10 82       	st	Z, r1
    5c2c:	11 82       	std	Z+1, r1	; 0x01
	}
	if (peek){uart_itail[idx] = oldtail;}
	return uart_ibuffer[idx][oldtail];
    5c2e:	f9 01       	movw	r30, r18
    5c30:	fe 2f       	mov	r31, r30
    5c32:	ee 27       	eor	r30, r30
    5c34:	ff 0f       	add	r31, r31
    5c36:	ff 0f       	add	r31, r31
    5c38:	4e 0f       	add	r20, r30
    5c3a:	5f 1f       	adc	r21, r31
    5c3c:	fa 01       	movw	r30, r20
    5c3e:	e4 5c       	subi	r30, 0xC4	; 196
    5c40:	f8 4d       	sbci	r31, 0xD8	; 216
    5c42:	80 81       	ld	r24, Z
}

inline uint8_t uart_idequeue(USART_t* port){
	return _uart_idequeue(port, false);
}
    5c44:	08 95       	ret

00005c46 <service_uart_buffer>:

inline void service_uart_buffer(){
    5c46:	3f 92       	push	r3
    5c48:	4f 92       	push	r4
    5c4a:	5f 92       	push	r5
    5c4c:	6f 92       	push	r6
    5c4e:	7f 92       	push	r7
    5c50:	8f 92       	push	r8
    5c52:	9f 92       	push	r9
    5c54:	af 92       	push	r10
    5c56:	bf 92       	push	r11
    5c58:	cf 92       	push	r12
    5c5a:	df 92       	push	r13
    5c5c:	ef 92       	push	r14
    5c5e:	ff 92       	push	r15
    5c60:	0f 93       	push	r16
    5c62:	1f 93       	push	r17
    5c64:	cf 93       	push	r28
    5c66:	df 93       	push	r29
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    5c68:	20 91 3c 33 	lds	r18, 0x333C
    5c6c:	30 91 3d 33 	lds	r19, 0x333D
    5c70:	80 91 48 3f 	lds	r24, 0x3F48
    5c74:	90 91 49 3f 	lds	r25, 0x3F49
    5c78:	28 17       	cp	r18, r24
    5c7a:	39 07       	cpc	r19, r25
    5c7c:	58 f0       	brcs	.+22     	; 0x5c94 <service_uart_buffer+0x4e>
		return (uart_head[idx] - uart_tail[idx]);
    5c7e:	80 91 3c 33 	lds	r24, 0x333C
    5c82:	90 91 3d 33 	lds	r25, 0x333D
    5c86:	20 91 48 3f 	lds	r18, 0x3F48
    5c8a:	30 91 49 3f 	lds	r19, 0x3F49
    5c8e:	82 1b       	sub	r24, r18
    5c90:	93 0b       	sbc	r25, r19
    5c92:	0c c0       	rjmp	.+24     	; 0x5cac <service_uart_buffer+0x66>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    5c94:	80 91 3c 33 	lds	r24, 0x333C
    5c98:	90 91 3d 33 	lds	r25, 0x333D
    5c9c:	20 91 48 3f 	lds	r18, 0x3F48
    5ca0:	30 91 49 3f 	lds	r19, 0x3F49
    5ca4:	80 50       	subi	r24, 0x00	; 0
    5ca6:	9c 4f       	sbci	r25, 0xFC	; 252
    5ca8:	82 1b       	sub	r24, r18
    5caa:	93 0b       	sbc	r25, r19
	return _uart_idequeue(port, false);
}

inline void service_uart_buffer(){
	//Resume transmission attempt if outgoing data still pending -- we do this so we can don't block the CPU for too long waiting for flow-control
	if (uart_count(&ulcd)>0){uart_transmit_lcd(&ulcd);}
    5cac:	00 97       	sbiw	r24, 0x00	; 0
    5cae:	09 f4       	brne	.+2      	; 0x5cb2 <service_uart_buffer+0x6c>
    5cb0:	7e c1       	rjmp	.+764    	; 0x5fae <service_uart_buffer+0x368>
}

void inline uart_transmit_lcd(USART_t* port){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0) && (lcd_flow_control == LCD_READY)){
    5cb2:	e0 eb       	ldi	r30, 0xB0	; 176
    5cb4:	fb e0       	ldi	r31, 0x0B	; 11
    5cb6:	81 81       	ldd	r24, Z+1	; 0x01
    5cb8:	85 fd       	sbrc	r24, 5
    5cba:	fb c0       	rjmp	.+502    	; 0x5eb2 <service_uart_buffer+0x26c>
    5cbc:	48 c1       	rjmp	.+656    	; 0x5f4e <service_uart_buffer+0x308>
}

inline uint8_t uart_dequeue(USART_t* port){
	uint8_t idx = port_map(port);
	uint16_t oldtail;
	oldtail = uart_tail[idx];
    5cbe:	d6 01       	movw	r26, r12
    5cc0:	ed 91       	ld	r30, X+
    5cc2:	fc 91       	ld	r31, X
    5cc4:	11 97       	sbiw	r26, 0x01	; 1
	uart_tail[idx]++;
    5cc6:	8d 91       	ld	r24, X+
    5cc8:	9c 91       	ld	r25, X
    5cca:	11 97       	sbiw	r26, 0x01	; 1
    5ccc:	01 96       	adiw	r24, 0x01	; 1
    5cce:	8d 93       	st	X+, r24
    5cd0:	9c 93       	st	X, r25
    5cd2:	11 97       	sbiw	r26, 0x01	; 1
	if (uart_tail[idx] >= MAX_BUFFER_LEN){
    5cd4:	8d 91       	ld	r24, X+
    5cd6:	9c 91       	ld	r25, X
    5cd8:	11 97       	sbiw	r26, 0x01	; 1
    5cda:	b4 e0       	ldi	r27, 0x04	; 4
    5cdc:	80 30       	cpi	r24, 0x00	; 0
    5cde:	9b 07       	cpc	r25, r27
    5ce0:	20 f0       	brcs	.+8      	; 0x5cea <service_uart_buffer+0xa4>
		uart_tail[idx] = 0;
    5ce2:	d6 01       	movw	r26, r12
    5ce4:	1d 92       	st	X+, r1
    5ce6:	1c 92       	st	X, r1
    5ce8:	11 97       	sbiw	r26, 0x01	; 1
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    5cea:	e4 0d       	add	r30, r4
    5cec:	f5 1d       	adc	r31, r5
    5cee:	b0 80       	ld	r11, Z
void inline uart_transmit_lcd(USART_t* port){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0) && (lcd_flow_control == LCD_READY)){
		toSend = uart_dequeue(port);
		if (toSend == 0x0D) {lcd_flow_control = LCD_BUSY;}
    5cf0:	bd e0       	ldi	r27, 0x0D	; 13
    5cf2:	bb 16       	cp	r11, r27
    5cf4:	11 f4       	brne	.+4      	; 0x5cfa <service_uart_buffer+0xb4>
    5cf6:	30 92 24 27 	sts	0x2724, r3
#ifndef UART_DEBUG
	uint8_t idx = port_map(port);
	
	//if (idx==0){uart_enqueue(&uctrl, datain);} //xxx
	
	uart_buffer[idx][uart_head[idx]] = datain;
    5cfa:	f8 01       	movw	r30, r16
    5cfc:	80 81       	ld	r24, Z
    5cfe:	91 81       	ldd	r25, Z+1	; 0x01
    5d00:	8e 5b       	subi	r24, 0xBE	; 190
    5d02:	94 4c       	sbci	r25, 0xC4	; 196
    5d04:	dc 01       	movw	r26, r24
    5d06:	ac 92       	st	X, r10
	uart_head[idx]++;
    5d08:	80 81       	ld	r24, Z
    5d0a:	91 81       	ldd	r25, Z+1	; 0x01
    5d0c:	01 96       	adiw	r24, 0x01	; 1
    5d0e:	80 83       	st	Z, r24
    5d10:	91 83       	std	Z+1, r25	; 0x01
	if (uart_head[idx] >= MAX_BUFFER_LEN){
    5d12:	80 81       	ld	r24, Z
    5d14:	91 81       	ldd	r25, Z+1	; 0x01
    5d16:	b4 e0       	ldi	r27, 0x04	; 4
    5d18:	80 30       	cpi	r24, 0x00	; 0
    5d1a:	9b 07       	cpc	r25, r27
    5d1c:	10 f0       	brcs	.+4      	; 0x5d22 <service_uart_buffer+0xdc>
		uart_head[idx] = 0;
    5d1e:	10 82       	st	Z, r1
    5d20:	11 82       	std	Z+1, r1	; 0x01
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    5d22:	f7 01       	movw	r30, r14
    5d24:	81 81       	ldd	r24, Z+1	; 0x01
    5d26:	85 fd       	sbrc	r24, 5
    5d28:	1a c0       	rjmp	.+52     	; 0x5d5e <service_uart_buffer+0x118>
    5d2a:	32 c0       	rjmp	.+100    	; 0x5d90 <service_uart_buffer+0x14a>
}

inline uint8_t uart_dequeue(USART_t* port){
	uint8_t idx = port_map(port);
	uint16_t oldtail;
	oldtail = uart_tail[idx];
    5d2c:	e8 81       	ld	r30, Y
    5d2e:	f9 81       	ldd	r31, Y+1	; 0x01
	uart_tail[idx]++;
    5d30:	88 81       	ld	r24, Y
    5d32:	99 81       	ldd	r25, Y+1	; 0x01
    5d34:	01 96       	adiw	r24, 0x01	; 1
    5d36:	88 83       	st	Y, r24
    5d38:	99 83       	std	Y+1, r25	; 0x01
	if (uart_tail[idx] >= MAX_BUFFER_LEN){
    5d3a:	88 81       	ld	r24, Y
    5d3c:	99 81       	ldd	r25, Y+1	; 0x01
    5d3e:	24 e0       	ldi	r18, 0x04	; 4
    5d40:	80 30       	cpi	r24, 0x00	; 0
    5d42:	92 07       	cpc	r25, r18
    5d44:	10 f0       	brcs	.+4      	; 0x5d4a <service_uart_buffer+0x104>
		uart_tail[idx] = 0;
    5d46:	18 82       	st	Y, r1
    5d48:	19 82       	std	Y+1, r1	; 0x01
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    5d4a:	ee 5b       	subi	r30, 0xBE	; 190
    5d4c:	f4 4c       	sbci	r31, 0xC4	; 196
    5d4e:	80 81       	ld	r24, Z
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
    5d50:	d7 01       	movw	r26, r14
    5d52:	8c 93       	st	X, r24
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    5d54:	11 96       	adiw	r26, 0x01	; 1
    5d56:	8c 91       	ld	r24, X
    5d58:	11 97       	sbiw	r26, 0x01	; 1
    5d5a:	85 ff       	sbrs	r24, 5
    5d5c:	19 c0       	rjmp	.+50     	; 0x5d90 <service_uart_buffer+0x14a>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    5d5e:	f8 01       	movw	r30, r16
    5d60:	80 81       	ld	r24, Z
    5d62:	91 81       	ldd	r25, Z+1	; 0x01
    5d64:	28 81       	ld	r18, Y
    5d66:	39 81       	ldd	r19, Y+1	; 0x01
    5d68:	82 17       	cp	r24, r18
    5d6a:	93 07       	cpc	r25, r19
    5d6c:	38 f0       	brcs	.+14     	; 0x5d7c <service_uart_buffer+0x136>
		return (uart_head[idx] - uart_tail[idx]);
    5d6e:	80 81       	ld	r24, Z
    5d70:	91 81       	ldd	r25, Z+1	; 0x01
    5d72:	28 81       	ld	r18, Y
    5d74:	39 81       	ldd	r19, Y+1	; 0x01
    5d76:	82 1b       	sub	r24, r18
    5d78:	93 0b       	sbc	r25, r19
    5d7a:	08 c0       	rjmp	.+16     	; 0x5d8c <service_uart_buffer+0x146>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    5d7c:	80 81       	ld	r24, Z
    5d7e:	91 81       	ldd	r25, Z+1	; 0x01
    5d80:	28 81       	ld	r18, Y
    5d82:	39 81       	ldd	r19, Y+1	; 0x01
    5d84:	80 50       	subi	r24, 0x00	; 0
    5d86:	9c 4f       	sbci	r25, 0xFC	; 252
    5d88:	82 1b       	sub	r24, r18
    5d8a:	93 0b       	sbc	r25, r19
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    5d8c:	00 97       	sbiw	r24, 0x00	; 0
    5d8e:	71 f6       	brne	.-100    	; 0x5d2c <service_uart_buffer+0xe6>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    5d90:	f8 01       	movw	r30, r16
    5d92:	80 81       	ld	r24, Z
    5d94:	91 81       	ldd	r25, Z+1	; 0x01
    5d96:	28 81       	ld	r18, Y
    5d98:	39 81       	ldd	r19, Y+1	; 0x01
    5d9a:	82 17       	cp	r24, r18
    5d9c:	93 07       	cpc	r25, r19
    5d9e:	38 f0       	brcs	.+14     	; 0x5dae <service_uart_buffer+0x168>
		return (uart_head[idx] - uart_tail[idx]);
    5da0:	80 81       	ld	r24, Z
    5da2:	91 81       	ldd	r25, Z+1	; 0x01
    5da4:	28 81       	ld	r18, Y
    5da6:	39 81       	ldd	r19, Y+1	; 0x01
    5da8:	82 1b       	sub	r24, r18
    5daa:	93 0b       	sbc	r25, r19
    5dac:	08 c0       	rjmp	.+16     	; 0x5dbe <service_uart_buffer+0x178>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    5dae:	80 81       	ld	r24, Z
    5db0:	91 81       	ldd	r25, Z+1	; 0x01
    5db2:	28 81       	ld	r18, Y
    5db4:	39 81       	ldd	r19, Y+1	; 0x01
    5db6:	80 50       	subi	r24, 0x00	; 0
    5db8:	9c 4f       	sbci	r25, 0xFC	; 252
    5dba:	82 1b       	sub	r24, r18
    5dbc:	93 0b       	sbc	r25, r19
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
	}
	//disable the tx outgoing hardware buffer ready interrupt if we have nothing more to put in it.
	if(uart_count(port)>0) uart_txbuffer_enable(port);
    5dbe:	00 97       	sbiw	r24, 0x00	; 0
    5dc0:	21 f0       	breq	.+8      	; 0x5dca <service_uart_buffer+0x184>
    5dc2:	c7 01       	movw	r24, r14
    5dc4:	0e 94 98 1c 	call	0x3930	; 0x3930 <uart_txbuffer_enable>
    5dc8:	03 c0       	rjmp	.+6      	; 0x5dd0 <service_uart_buffer+0x18a>
	else uart_txbuffer_disable(port);
    5dca:	c7 01       	movw	r24, r14
    5dcc:	0e 94 9d 1c 	call	0x393a	; 0x393a <uart_txbuffer_disable>
#ifndef UART_DEBUG
	uint8_t idx = port_map(port);
	
	//if (idx==0){uart_enqueue(&uctrl, datain);} //xxx
	
	uart_buffer[idx][uart_head[idx]] = datain;
    5dd0:	f8 01       	movw	r30, r16
    5dd2:	80 81       	ld	r24, Z
    5dd4:	91 81       	ldd	r25, Z+1	; 0x01
    5dd6:	8e 5b       	subi	r24, 0xBE	; 190
    5dd8:	94 4c       	sbci	r25, 0xC4	; 196
    5dda:	dc 01       	movw	r26, r24
    5ddc:	bc 92       	st	X, r11
	uart_head[idx]++;
    5dde:	80 81       	ld	r24, Z
    5de0:	91 81       	ldd	r25, Z+1	; 0x01
    5de2:	01 96       	adiw	r24, 0x01	; 1
    5de4:	80 83       	st	Z, r24
    5de6:	91 83       	std	Z+1, r25	; 0x01
	if (uart_head[idx] >= MAX_BUFFER_LEN){
    5de8:	80 81       	ld	r24, Z
    5dea:	91 81       	ldd	r25, Z+1	; 0x01
    5dec:	b4 e0       	ldi	r27, 0x04	; 4
    5dee:	80 30       	cpi	r24, 0x00	; 0
    5df0:	9b 07       	cpc	r25, r27
    5df2:	10 f0       	brcs	.+4      	; 0x5df8 <service_uart_buffer+0x1b2>
		uart_head[idx] = 0;
    5df4:	10 82       	st	Z, r1
    5df6:	11 82       	std	Z+1, r1	; 0x01
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    5df8:	f7 01       	movw	r30, r14
    5dfa:	81 81       	ldd	r24, Z+1	; 0x01
    5dfc:	85 fd       	sbrc	r24, 5
    5dfe:	1a c0       	rjmp	.+52     	; 0x5e34 <service_uart_buffer+0x1ee>
    5e00:	32 c0       	rjmp	.+100    	; 0x5e66 <service_uart_buffer+0x220>
}

inline uint8_t uart_dequeue(USART_t* port){
	uint8_t idx = port_map(port);
	uint16_t oldtail;
	oldtail = uart_tail[idx];
    5e02:	e8 81       	ld	r30, Y
    5e04:	f9 81       	ldd	r31, Y+1	; 0x01
	uart_tail[idx]++;
    5e06:	88 81       	ld	r24, Y
    5e08:	99 81       	ldd	r25, Y+1	; 0x01
    5e0a:	01 96       	adiw	r24, 0x01	; 1
    5e0c:	88 83       	st	Y, r24
    5e0e:	99 83       	std	Y+1, r25	; 0x01
	if (uart_tail[idx] >= MAX_BUFFER_LEN){
    5e10:	88 81       	ld	r24, Y
    5e12:	99 81       	ldd	r25, Y+1	; 0x01
    5e14:	24 e0       	ldi	r18, 0x04	; 4
    5e16:	80 30       	cpi	r24, 0x00	; 0
    5e18:	92 07       	cpc	r25, r18
    5e1a:	10 f0       	brcs	.+4      	; 0x5e20 <service_uart_buffer+0x1da>
		uart_tail[idx] = 0;
    5e1c:	18 82       	st	Y, r1
    5e1e:	19 82       	std	Y+1, r1	; 0x01
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    5e20:	ee 5b       	subi	r30, 0xBE	; 190
    5e22:	f4 4c       	sbci	r31, 0xC4	; 196
    5e24:	80 81       	ld	r24, Z
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
    5e26:	d7 01       	movw	r26, r14
    5e28:	8c 93       	st	X, r24
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    5e2a:	11 96       	adiw	r26, 0x01	; 1
    5e2c:	8c 91       	ld	r24, X
    5e2e:	11 97       	sbiw	r26, 0x01	; 1
    5e30:	85 ff       	sbrs	r24, 5
    5e32:	19 c0       	rjmp	.+50     	; 0x5e66 <service_uart_buffer+0x220>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    5e34:	f8 01       	movw	r30, r16
    5e36:	80 81       	ld	r24, Z
    5e38:	91 81       	ldd	r25, Z+1	; 0x01
    5e3a:	28 81       	ld	r18, Y
    5e3c:	39 81       	ldd	r19, Y+1	; 0x01
    5e3e:	82 17       	cp	r24, r18
    5e40:	93 07       	cpc	r25, r19
    5e42:	38 f0       	brcs	.+14     	; 0x5e52 <service_uart_buffer+0x20c>
		return (uart_head[idx] - uart_tail[idx]);
    5e44:	80 81       	ld	r24, Z
    5e46:	91 81       	ldd	r25, Z+1	; 0x01
    5e48:	28 81       	ld	r18, Y
    5e4a:	39 81       	ldd	r19, Y+1	; 0x01
    5e4c:	82 1b       	sub	r24, r18
    5e4e:	93 0b       	sbc	r25, r19
    5e50:	08 c0       	rjmp	.+16     	; 0x5e62 <service_uart_buffer+0x21c>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    5e52:	80 81       	ld	r24, Z
    5e54:	91 81       	ldd	r25, Z+1	; 0x01
    5e56:	28 81       	ld	r18, Y
    5e58:	39 81       	ldd	r19, Y+1	; 0x01
    5e5a:	80 50       	subi	r24, 0x00	; 0
    5e5c:	9c 4f       	sbci	r25, 0xFC	; 252
    5e5e:	82 1b       	sub	r24, r18
    5e60:	93 0b       	sbc	r25, r19
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    5e62:	00 97       	sbiw	r24, 0x00	; 0
    5e64:	71 f6       	brne	.-100    	; 0x5e02 <service_uart_buffer+0x1bc>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    5e66:	f8 01       	movw	r30, r16
    5e68:	80 81       	ld	r24, Z
    5e6a:	91 81       	ldd	r25, Z+1	; 0x01
    5e6c:	28 81       	ld	r18, Y
    5e6e:	39 81       	ldd	r19, Y+1	; 0x01
    5e70:	82 17       	cp	r24, r18
    5e72:	93 07       	cpc	r25, r19
    5e74:	38 f0       	brcs	.+14     	; 0x5e84 <service_uart_buffer+0x23e>
		return (uart_head[idx] - uart_tail[idx]);
    5e76:	80 81       	ld	r24, Z
    5e78:	91 81       	ldd	r25, Z+1	; 0x01
    5e7a:	28 81       	ld	r18, Y
    5e7c:	39 81       	ldd	r19, Y+1	; 0x01
    5e7e:	82 1b       	sub	r24, r18
    5e80:	93 0b       	sbc	r25, r19
    5e82:	08 c0       	rjmp	.+16     	; 0x5e94 <service_uart_buffer+0x24e>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    5e84:	80 81       	ld	r24, Z
    5e86:	91 81       	ldd	r25, Z+1	; 0x01
    5e88:	28 81       	ld	r18, Y
    5e8a:	39 81       	ldd	r19, Y+1	; 0x01
    5e8c:	80 50       	subi	r24, 0x00	; 0
    5e8e:	9c 4f       	sbci	r25, 0xFC	; 252
    5e90:	82 1b       	sub	r24, r18
    5e92:	93 0b       	sbc	r25, r19
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
	}
	//disable the tx outgoing hardware buffer ready interrupt if we have nothing more to put in it.
	if(uart_count(port)>0) uart_txbuffer_enable(port);
    5e94:	00 97       	sbiw	r24, 0x00	; 0
    5e96:	21 f0       	breq	.+8      	; 0x5ea0 <service_uart_buffer+0x25a>
    5e98:	c7 01       	movw	r24, r14
    5e9a:	0e 94 98 1c 	call	0x3930	; 0x3930 <uart_txbuffer_enable>
    5e9e:	03 c0       	rjmp	.+6      	; 0x5ea6 <service_uart_buffer+0x260>
	else uart_txbuffer_disable(port);
    5ea0:	c7 01       	movw	r24, r14
    5ea2:	0e 94 9d 1c 	call	0x393a	; 0x393a <uart_txbuffer_disable>
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0) && (lcd_flow_control == LCD_READY)){
		toSend = uart_dequeue(port);
		if (toSend == 0x0D) {lcd_flow_control = LCD_BUSY;}
		uart_enqueue(&udata, '`'); //xxx - echo to data port
		uart_enqueue(&udata, toSend); //xxx - echo to data port
		port->DATA = toSend;
    5ea6:	f3 01       	movw	r30, r6
    5ea8:	b0 82       	st	Z, r11
}

void inline uart_transmit_lcd(USART_t* port){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0) && (lcd_flow_control == LCD_READY)){
    5eaa:	81 81       	ldd	r24, Z+1	; 0x01
    5eac:	85 fd       	sbrc	r24, 5
    5eae:	2b c0       	rjmp	.+86     	; 0x5f06 <service_uart_buffer+0x2c0>
    5eb0:	4e c0       	rjmp	.+156    	; 0x5f4e <service_uart_buffer+0x308>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    5eb2:	0f 2e       	mov	r0, r31
    5eb4:	fc e3       	ldi	r31, 0x3C	; 60
    5eb6:	8f 2e       	mov	r8, r31
    5eb8:	f3 e3       	ldi	r31, 0x33	; 51
    5eba:	9f 2e       	mov	r9, r31
    5ebc:	f0 2d       	mov	r31, r0
    5ebe:	0f 2e       	mov	r0, r31
    5ec0:	f8 e4       	ldi	r31, 0x48	; 72
    5ec2:	cf 2e       	mov	r12, r31
    5ec4:	ff e3       	ldi	r31, 0x3F	; 63
    5ec6:	df 2e       	mov	r13, r31
    5ec8:	f0 2d       	mov	r31, r0
		uart_tail[idx] = 0;
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    5eca:	0f 2e       	mov	r0, r31
    5ecc:	f2 e4       	ldi	r31, 0x42	; 66
    5ece:	4f 2e       	mov	r4, r31
    5ed0:	f3 e3       	ldi	r31, 0x33	; 51
    5ed2:	5f 2e       	mov	r5, r31
    5ed4:	f0 2d       	mov	r31, r0
void inline uart_transmit_lcd(USART_t* port){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0) && (lcd_flow_control == LCD_READY)){
		toSend = uart_dequeue(port);
		if (toSend == 0x0D) {lcd_flow_control = LCD_BUSY;}
    5ed6:	0f 2e       	mov	r0, r31
    5ed8:	fe e4       	ldi	r31, 0x4E	; 78
    5eda:	3f 2e       	mov	r3, r31
    5edc:	f0 2d       	mov	r31, r0
#ifndef UART_DEBUG
	uint8_t idx = port_map(port);
	
	//if (idx==0){uart_enqueue(&uctrl, datain);} //xxx
	
	uart_buffer[idx][uart_head[idx]] = datain;
    5ede:	00 e4       	ldi	r16, 0x40	; 64
    5ee0:	13 e3       	ldi	r17, 0x33	; 51
    5ee2:	0f 2e       	mov	r0, r31
    5ee4:	f0 e6       	ldi	r31, 0x60	; 96
    5ee6:	af 2e       	mov	r10, r31
    5ee8:	f0 2d       	mov	r31, r0
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    5eea:	0f 2e       	mov	r0, r31
    5eec:	f0 eb       	ldi	r31, 0xB0	; 176
    5eee:	ef 2e       	mov	r14, r31
    5ef0:	f8 e0       	ldi	r31, 0x08	; 8
    5ef2:	ff 2e       	mov	r15, r31
    5ef4:	f0 2d       	mov	r31, r0
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    5ef6:	cc e4       	ldi	r28, 0x4C	; 76
    5ef8:	df e3       	ldi	r29, 0x3F	; 63
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0) && (lcd_flow_control == LCD_READY)){
		toSend = uart_dequeue(port);
		if (toSend == 0x0D) {lcd_flow_control = LCD_BUSY;}
		uart_enqueue(&udata, '`'); //xxx - echo to data port
		uart_enqueue(&udata, toSend); //xxx - echo to data port
		port->DATA = toSend;
    5efa:	0f 2e       	mov	r0, r31
    5efc:	f0 eb       	ldi	r31, 0xB0	; 176
    5efe:	6f 2e       	mov	r6, r31
    5f00:	fb e0       	ldi	r31, 0x0B	; 11
    5f02:	7f 2e       	mov	r7, r31
    5f04:	f0 2d       	mov	r31, r0
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    5f06:	d4 01       	movw	r26, r8
    5f08:	8d 91       	ld	r24, X+
    5f0a:	9c 91       	ld	r25, X
    5f0c:	11 97       	sbiw	r26, 0x01	; 1
    5f0e:	f6 01       	movw	r30, r12
    5f10:	20 81       	ld	r18, Z
    5f12:	31 81       	ldd	r19, Z+1	; 0x01
    5f14:	82 17       	cp	r24, r18
    5f16:	93 07       	cpc	r25, r19
    5f18:	40 f0       	brcs	.+16     	; 0x5f2a <service_uart_buffer+0x2e4>
		return (uart_head[idx] - uart_tail[idx]);
    5f1a:	8d 91       	ld	r24, X+
    5f1c:	9c 91       	ld	r25, X
    5f1e:	11 97       	sbiw	r26, 0x01	; 1
    5f20:	20 81       	ld	r18, Z
    5f22:	31 81       	ldd	r19, Z+1	; 0x01
    5f24:	82 1b       	sub	r24, r18
    5f26:	93 0b       	sbc	r25, r19
    5f28:	0b c0       	rjmp	.+22     	; 0x5f40 <service_uart_buffer+0x2fa>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    5f2a:	d4 01       	movw	r26, r8
    5f2c:	8d 91       	ld	r24, X+
    5f2e:	9c 91       	ld	r25, X
    5f30:	11 97       	sbiw	r26, 0x01	; 1
    5f32:	f6 01       	movw	r30, r12
    5f34:	20 81       	ld	r18, Z
    5f36:	31 81       	ldd	r19, Z+1	; 0x01
    5f38:	80 50       	subi	r24, 0x00	; 0
    5f3a:	9c 4f       	sbci	r25, 0xFC	; 252
    5f3c:	82 1b       	sub	r24, r18
    5f3e:	93 0b       	sbc	r25, r19
}

void inline uart_transmit_lcd(USART_t* port){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0) && (lcd_flow_control == LCD_READY)){
    5f40:	00 97       	sbiw	r24, 0x00	; 0
    5f42:	29 f0       	breq	.+10     	; 0x5f4e <service_uart_buffer+0x308>
    5f44:	80 91 24 27 	lds	r24, 0x2724
    5f48:	82 35       	cpi	r24, 0x52	; 82
    5f4a:	09 f4       	brne	.+2      	; 0x5f4e <service_uart_buffer+0x308>
    5f4c:	b8 ce       	rjmp	.-656    	; 0x5cbe <service_uart_buffer+0x78>
		if (toSend == 0x0D) {lcd_flow_control = LCD_BUSY;}
		uart_enqueue(&udata, '`'); //xxx - echo to data port
		uart_enqueue(&udata, toSend); //xxx - echo to data port
		port->DATA = toSend;
	}
	uart_txbuffer_disable(port); //implemented this way to prevent periodic stalls that happen when uart_txbuffer isn't disabled quickly enough
    5f4e:	80 eb       	ldi	r24, 0xB0	; 176
    5f50:	9b e0       	ldi	r25, 0x0B	; 11
    5f52:	0e 94 9d 1c 	call	0x393a	; 0x393a <uart_txbuffer_disable>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    5f56:	20 91 3c 33 	lds	r18, 0x333C
    5f5a:	30 91 3d 33 	lds	r19, 0x333D
    5f5e:	80 91 48 3f 	lds	r24, 0x3F48
    5f62:	90 91 49 3f 	lds	r25, 0x3F49
    5f66:	28 17       	cp	r18, r24
    5f68:	39 07       	cpc	r19, r25
    5f6a:	58 f0       	brcs	.+22     	; 0x5f82 <service_uart_buffer+0x33c>
		return (uart_head[idx] - uart_tail[idx]);
    5f6c:	80 91 3c 33 	lds	r24, 0x333C
    5f70:	90 91 3d 33 	lds	r25, 0x333D
    5f74:	20 91 48 3f 	lds	r18, 0x3F48
    5f78:	30 91 49 3f 	lds	r19, 0x3F49
    5f7c:	82 1b       	sub	r24, r18
    5f7e:	93 0b       	sbc	r25, r19
    5f80:	0c c0       	rjmp	.+24     	; 0x5f9a <service_uart_buffer+0x354>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    5f82:	80 91 3c 33 	lds	r24, 0x333C
    5f86:	90 91 3d 33 	lds	r25, 0x333D
    5f8a:	20 91 48 3f 	lds	r18, 0x3F48
    5f8e:	30 91 49 3f 	lds	r19, 0x3F49
    5f92:	80 50       	subi	r24, 0x00	; 0
    5f94:	9c 4f       	sbci	r25, 0xFC	; 252
    5f96:	82 1b       	sub	r24, r18
    5f98:	93 0b       	sbc	r25, r19
		uart_enqueue(&udata, '`'); //xxx - echo to data port
		uart_enqueue(&udata, toSend); //xxx - echo to data port
		port->DATA = toSend;
	}
	uart_txbuffer_disable(port); //implemented this way to prevent periodic stalls that happen when uart_txbuffer isn't disabled quickly enough
	if ((uart_count(port)>0) && (lcd_flow_control == LCD_READY)){ //...something is waiting to go out
    5f9a:	00 97       	sbiw	r24, 0x00	; 0
    5f9c:	41 f0       	breq	.+16     	; 0x5fae <service_uart_buffer+0x368>
    5f9e:	80 91 24 27 	lds	r24, 0x2724
    5fa2:	82 35       	cpi	r24, 0x52	; 82
    5fa4:	21 f4       	brne	.+8      	; 0x5fae <service_uart_buffer+0x368>
		uart_txbuffer_enable(port);	
    5fa6:	80 eb       	ldi	r24, 0xB0	; 176
    5fa8:	9b e0       	ldi	r25, 0x0B	; 11
    5faa:	0e 94 98 1c 	call	0x3930	; 0x3930 <uart_txbuffer_enable>
}

inline void service_uart_buffer(){
	//Resume transmission attempt if outgoing data still pending -- we do this so we can don't block the CPU for too long waiting for flow-control
	if (uart_count(&ulcd)>0){uart_transmit_lcd(&ulcd);}
}
    5fae:	df 91       	pop	r29
    5fb0:	cf 91       	pop	r28
    5fb2:	1f 91       	pop	r17
    5fb4:	0f 91       	pop	r16
    5fb6:	ff 90       	pop	r15
    5fb8:	ef 90       	pop	r14
    5fba:	df 90       	pop	r13
    5fbc:	cf 90       	pop	r12
    5fbe:	bf 90       	pop	r11
    5fc0:	af 90       	pop	r10
    5fc2:	9f 90       	pop	r9
    5fc4:	8f 90       	pop	r8
    5fc6:	7f 90       	pop	r7
    5fc8:	6f 90       	pop	r6
    5fca:	5f 90       	pop	r5
    5fcc:	4f 90       	pop	r4
    5fce:	3f 90       	pop	r3
    5fd0:	08 95       	ret

00005fd2 <led_on>:
void inline led_on(uint8_t which){led_dim(which, 0xff);}

void inline led_off(uint8_t which){led_dim(which, 0x00);}

void inline led_dim(uint8_t which, uint8_t brightness){
	switch(which){
    5fd2:	81 30       	cpi	r24, 0x01	; 1
    5fd4:	61 f0       	breq	.+24     	; 0x5fee <led_on+0x1c>
    5fd6:	81 30       	cpi	r24, 0x01	; 1
    5fd8:	18 f0       	brcs	.+6      	; 0x5fe0 <led_on+0xe>
    5fda:	82 30       	cpi	r24, 0x02	; 2
    5fdc:	a9 f4       	brne	.+42     	; 0x6008 <led_on+0x36>
    5fde:	0e c0       	rjmp	.+28     	; 0x5ffc <led_on+0x2a>
	case LED_0:
		TCF0.CCABUF = (uint16_t)brightness;		
    5fe0:	8f ef       	ldi	r24, 0xFF	; 255
    5fe2:	90 e0       	ldi	r25, 0x00	; 0
    5fe4:	e0 e0       	ldi	r30, 0x00	; 0
    5fe6:	fb e0       	ldi	r31, 0x0B	; 11
    5fe8:	80 af       	sts	0x70, r24
    5fea:	91 af       	sts	0x71, r25
    5fec:	08 95       	ret
		break;
	case LED_1:
		TCF0.CCBBUF = (uint16_t)brightness;		
    5fee:	8f ef       	ldi	r24, 0xFF	; 255
    5ff0:	90 e0       	ldi	r25, 0x00	; 0
    5ff2:	e0 e0       	ldi	r30, 0x00	; 0
    5ff4:	fb e0       	ldi	r31, 0x0B	; 11
    5ff6:	82 af       	sts	0x72, r24
    5ff8:	93 af       	sts	0x73, r25
    5ffa:	08 95       	ret
		break;
	case LED_3:
		TCF0.CCDBUF = (uint16_t)brightness;
    5ffc:	8f ef       	ldi	r24, 0xFF	; 255
    5ffe:	90 e0       	ldi	r25, 0x00	; 0
    6000:	80 93 3e 0b 	sts	0x0B3E, r24
    6004:	90 93 3f 0b 	sts	0x0B3F, r25
    6008:	08 95       	ret

0000600a <led_off>:
void inline led_on(uint8_t which){led_dim(which, 0xff);}

void inline led_off(uint8_t which){led_dim(which, 0x00);}

void inline led_dim(uint8_t which, uint8_t brightness){
	switch(which){
    600a:	81 30       	cpi	r24, 0x01	; 1
    600c:	51 f0       	breq	.+20     	; 0x6022 <led_off+0x18>
    600e:	81 30       	cpi	r24, 0x01	; 1
    6010:	18 f0       	brcs	.+6      	; 0x6018 <led_off+0xe>
    6012:	82 30       	cpi	r24, 0x02	; 2
    6014:	79 f4       	brne	.+30     	; 0x6034 <led_off+0x2a>
    6016:	0a c0       	rjmp	.+20     	; 0x602c <led_off+0x22>
	case LED_0:
		TCF0.CCABUF = (uint16_t)brightness;		
    6018:	e0 e0       	ldi	r30, 0x00	; 0
    601a:	fb e0       	ldi	r31, 0x0B	; 11
    601c:	10 ae       	sts	0xb0, r17
    601e:	11 ae       	sts	0xb1, r17
    6020:	08 95       	ret
		break;
	case LED_1:
		TCF0.CCBBUF = (uint16_t)brightness;		
    6022:	e0 e0       	ldi	r30, 0x00	; 0
    6024:	fb e0       	ldi	r31, 0x0B	; 11
    6026:	12 ae       	sts	0xb2, r17
    6028:	13 ae       	sts	0xb3, r17
    602a:	08 95       	ret
		break;
	case LED_3:
		TCF0.CCDBUF = (uint16_t)brightness;
    602c:	10 92 3e 0b 	sts	0x0B3E, r1
    6030:	10 92 3f 0b 	sts	0x0B3F, r1
    6034:	08 95       	ret

00006036 <led_dim>:
void inline led_on(uint8_t which){led_dim(which, 0xff);}

void inline led_off(uint8_t which){led_dim(which, 0x00);}

void inline led_dim(uint8_t which, uint8_t brightness){
	switch(which){
    6036:	81 30       	cpi	r24, 0x01	; 1
    6038:	59 f0       	breq	.+22     	; 0x6050 <led_dim+0x1a>
    603a:	81 30       	cpi	r24, 0x01	; 1
    603c:	18 f0       	brcs	.+6      	; 0x6044 <led_dim+0xe>
    603e:	82 30       	cpi	r24, 0x02	; 2
    6040:	91 f4       	brne	.+36     	; 0x6066 <led_dim+0x30>
    6042:	0c c0       	rjmp	.+24     	; 0x605c <led_dim+0x26>
	case LED_0:
		TCF0.CCABUF = (uint16_t)brightness;		
    6044:	70 e0       	ldi	r23, 0x00	; 0
    6046:	e0 e0       	ldi	r30, 0x00	; 0
    6048:	fb e0       	ldi	r31, 0x0B	; 11
    604a:	60 af       	sts	0x70, r22
    604c:	71 af       	sts	0x71, r23
		break;
    604e:	08 95       	ret
	case LED_1:
		TCF0.CCBBUF = (uint16_t)brightness;		
    6050:	70 e0       	ldi	r23, 0x00	; 0
    6052:	e0 e0       	ldi	r30, 0x00	; 0
    6054:	fb e0       	ldi	r31, 0x0B	; 11
    6056:	62 af       	sts	0x72, r22
    6058:	73 af       	sts	0x73, r23
		break;
    605a:	08 95       	ret
	case LED_3:
		TCF0.CCDBUF = (uint16_t)brightness;
    605c:	70 e0       	ldi	r23, 0x00	; 0
    605e:	60 93 3e 0b 	sts	0x0B3E, r22
    6062:	70 93 3f 0b 	sts	0x0B3F, r23
    6066:	08 95       	ret

00006068 <led_toggle>:
		break;
	}
}

void inline led_toggle(uint8_t which){
	switch(which){
    6068:	81 30       	cpi	r24, 0x01	; 1
    606a:	59 f0       	breq	.+22     	; 0x6082 <led_toggle+0x1a>
    606c:	81 30       	cpi	r24, 0x01	; 1
    606e:	18 f0       	brcs	.+6      	; 0x6076 <led_toggle+0xe>
    6070:	82 30       	cpi	r24, 0x02	; 2
    6072:	91 f4       	brne	.+36     	; 0x6098 <led_toggle+0x30>
    6074:	0c c0       	rjmp	.+24     	; 0x608e <led_toggle+0x26>
	case LED_0:
		TCF0.CCAL = ~TCF0.CCAL;		
    6076:	e0 e0       	ldi	r30, 0x00	; 0
    6078:	fb e0       	ldi	r31, 0x0B	; 11
    607a:	80 a5       	lds	r24, 0x60
    607c:	80 95       	com	r24
    607e:	80 a7       	lds	r24, 0x70
		break;
    6080:	08 95       	ret
	case LED_1:
		TCF0.CCBL = ~TCF0.CCBL;		
    6082:	e0 e0       	ldi	r30, 0x00	; 0
    6084:	fb e0       	ldi	r31, 0x0B	; 11
    6086:	82 a5       	lds	r24, 0x62
    6088:	80 95       	com	r24
    608a:	82 a7       	lds	r24, 0x72
		break;
    608c:	08 95       	ret
	case LED_3:
		TCF0.CCDL = ~TCF0.CCDL;
    608e:	e0 e0       	ldi	r30, 0x00	; 0
    6090:	fb e0       	ldi	r31, 0x0B	; 11
    6092:	86 a5       	lds	r24, 0x66
    6094:	80 95       	com	r24
    6096:	86 a7       	lds	r24, 0x76
    6098:	08 95       	ret

0000609a <audio_volume>:
uint8_t _audio_volume;
uint8_t _audio_counter;
uint8_t _audio_state = AUDIO_IDLE;

void audio_volume(uint8_t volume){
	TCF0.CCCBUF = (uint16_t)volume;	
    609a:	90 e0       	ldi	r25, 0x00	; 0
    609c:	e0 e0       	ldi	r30, 0x00	; 0
    609e:	fb e0       	ldi	r31, 0x0B	; 11
    60a0:	84 af       	sts	0x74, r24
    60a2:	95 af       	sts	0x75, r25
}
    60a4:	08 95       	ret

000060a6 <init_ui>:
#include "utilities.h"
#include "ui.h"

//Handles all internal UI hardware (2 LEDs + Audio Beeper)

void init_ui(){
    60a6:	cf 93       	push	r28
    60a8:	df 93       	push	r29
	//LED's are located at PF0 (Lower) and PF1 (Upper)
	PORTF.DIRSET = B8(00001111); //pins 0,1,2,3 to output	
    60aa:	e0 ea       	ldi	r30, 0xA0	; 160
    60ac:	f6 e0       	ldi	r31, 0x06	; 6
    60ae:	8f e0       	ldi	r24, 0x0F	; 15
    60b0:	81 83       	std	Z+1, r24	; 0x01
	PORTF.PIN0CTRL = B8(01000000); //Invert the pin (needed to achieve correct PWM output polarity)
    60b2:	80 e4       	ldi	r24, 0x40	; 64
    60b4:	80 8b       	std	Z+16, r24	; 0x10
	PORTF.PIN1CTRL = B8(01000000); //Invert the pin (needed to achieve correct PWM output polarity)
    60b6:	81 8b       	std	Z+17, r24	; 0x11
	PORTF.PIN3CTRL = B8(01000000); //Invert the pin (needed to achieve correct PWM output polarity)
    60b8:	83 8b       	std	Z+19, r24	; 0x13
	TCF0.CTRLA = 0x07; //enable; div1024
    60ba:	c0 e0       	ldi	r28, 0x00	; 0
    60bc:	db e0       	ldi	r29, 0x0B	; 11
    60be:	87 e0       	ldi	r24, 0x07	; 7
    60c0:	88 83       	st	Y, r24
	TCF0.CTRLB = B8(11110011); //All output channels enabled (A through D); Single-slope PWM
    60c2:	83 ef       	ldi	r24, 0xF3	; 243
    60c4:	89 83       	std	Y+1, r24	; 0x01
	TCF0.PER = 0x00FF; //Set the top of the counter to basically force 8 bit operation; we do this for speed when calling dimming functions in the future
    60c6:	8f ef       	ldi	r24, 0xFF	; 255
    60c8:	90 e0       	ldi	r25, 0x00	; 0
    60ca:	8e a3       	lds	r24, 0x5e
    60cc:	9f a3       	lds	r25, 0x5f
	audio_volume(0x00);
    60ce:	80 e0       	ldi	r24, 0x00	; 0
    60d0:	0e 94 4d 30 	call	0x609a	; 0x609a <audio_volume>
void inline led_off(uint8_t which){led_dim(which, 0x00);}

void inline led_dim(uint8_t which, uint8_t brightness){
	switch(which){
	case LED_0:
		TCF0.CCABUF = (uint16_t)brightness;		
    60d4:	18 ae       	sts	0xb8, r17
    60d6:	19 ae       	sts	0xb9, r17
		break;
	case LED_1:
		TCF0.CCBBUF = (uint16_t)brightness;		
    60d8:	1a ae       	sts	0xba, r17
    60da:	1b ae       	sts	0xbb, r17
		break;
	case LED_3:
		TCF0.CCDBUF = (uint16_t)brightness;
    60dc:	10 92 3e 0b 	sts	0x0B3E, r1
    60e0:	10 92 3f 0b 	sts	0x0B3F, r1
	TCF0.PER = 0x00FF; //Set the top of the counter to basically force 8 bit operation; we do this for speed when calling dimming functions in the future
	audio_volume(0x00);
	led_off(LED_0);
	led_off(LED_1);
	led_off(LED_3);			
}
    60e4:	df 91       	pop	r29
    60e6:	cf 91       	pop	r28
    60e8:	08 95       	ret

000060ea <_audio_beep>:
	TCF0.CCCBUF = (uint16_t)volume;	
}

//Internal function to actually start making noise
void _audio_beep(){
	_audio_num_beeps--;
    60ea:	80 91 4f 3f 	lds	r24, 0x3F4F
    60ee:	81 50       	subi	r24, 0x01	; 1
    60f0:	80 93 4f 3f 	sts	0x3F4F, r24
	_audio_state = AUDIO_BEEPING;
    60f4:	85 e2       	ldi	r24, 0x25	; 37
    60f6:	80 93 76 22 	sts	0x2276, r24
	_audio_counter = AUDIO_BEEP_LENGTH;
    60fa:	85 e0       	ldi	r24, 0x05	; 5
    60fc:	80 93 50 3f 	sts	0x3F50, r24
	audio_volume(_audio_volume); //actually start making noise
    6100:	80 91 4e 3f 	lds	r24, 0x3F4E
    6104:	0e 94 4d 30 	call	0x609a	; 0x609a <audio_volume>
}	
    6108:	08 95       	ret

0000610a <audio_beep>:

//[INTERFACE] This is the function to call from outside to make beepy noises
void audio_beep(uint8_t num_beeps, uint16_t volume){
	if (num_beeps < 1) return; //ignore request if no beeps requested
    610a:	88 23       	and	r24, r24
    610c:	49 f0       	breq	.+18     	; 0x6120 <audio_beep+0x16>
	_audio_num_beeps = num_beeps;
    610e:	80 93 4f 3f 	sts	0x3F4F, r24
	if (volume == 0) return; //ignore request if volume level would be inaudible anyway
    6112:	61 15       	cp	r22, r1
    6114:	71 05       	cpc	r23, r1
    6116:	21 f0       	breq	.+8      	; 0x6120 <audio_beep+0x16>
	_audio_volume = volume;
    6118:	60 93 4e 3f 	sts	0x3F4E, r22
	_audio_beep();
    611c:	0e 94 75 30 	call	0x60ea	; 0x60ea <_audio_beep>
    6120:	08 95       	ret

00006122 <service_audio>:
}

//2ms Service Loop -- Call once every 2ms
void service_audio(){
	switch(_audio_state){
    6122:	80 91 76 22 	lds	r24, 0x2276
    6126:	85 32       	cpi	r24, 0x25	; 37
    6128:	19 f0       	breq	.+6      	; 0x6130 <service_audio+0xe>
    612a:	86 32       	cpi	r24, 0x26	; 38
    612c:	19 f5       	brne	.+70     	; 0x6174 <service_audio+0x52>
    612e:	18 c0       	rjmp	.+48     	; 0x6160 <service_audio+0x3e>
		case AUDIO_BEEPING:
			_audio_counter--;
    6130:	80 91 50 3f 	lds	r24, 0x3F50
    6134:	81 50       	subi	r24, 0x01	; 1
    6136:	80 93 50 3f 	sts	0x3F50, r24
			if (_audio_counter <= 0) {
    613a:	88 23       	and	r24, r24
    613c:	f1 f4       	brne	.+60     	; 0x617a <service_audio+0x58>
				//End of this beep!
				audio_volume(0x00); //silence!
    613e:	0e 94 4d 30 	call	0x609a	; 0x609a <audio_volume>
				if (_audio_num_beeps == 0) {
    6142:	80 91 4f 3f 	lds	r24, 0x3F4F
    6146:	88 23       	and	r24, r24
    6148:	21 f4       	brne	.+8      	; 0x6152 <service_audio+0x30>
					//End of this beep sequence -- ALL DONE! =)					
					_audio_state = AUDIO_IDLE;
    614a:	84 e2       	ldi	r24, 0x24	; 36
    614c:	80 93 76 22 	sts	0x2276, r24
    6150:	08 95       	ret
				}
				else {
					//start quiet period between beeps
					_audio_state = AUDIO_BETWEEN;
    6152:	86 e2       	ldi	r24, 0x26	; 38
    6154:	80 93 76 22 	sts	0x2276, r24
					_audio_counter = AUDIO_GAP_LENGTH;
    6158:	82 e3       	ldi	r24, 0x32	; 50
    615a:	80 93 50 3f 	sts	0x3F50, r24
    615e:	08 95       	ret
				}
			}
			break;
		case AUDIO_BETWEEN:
			_audio_counter--;
    6160:	80 91 50 3f 	lds	r24, 0x3F50
    6164:	81 50       	subi	r24, 0x01	; 1
    6166:	80 93 50 3f 	sts	0x3F50, r24
			if (_audio_counter <= 0) {
    616a:	88 23       	and	r24, r24
    616c:	31 f4       	brne	.+12     	; 0x617a <service_audio+0x58>
				//End of gap
				_audio_beep();
    616e:	0e 94 75 30 	call	0x60ea	; 0x60ea <_audio_beep>
    6172:	08 95       	ret
			}
			break;
		case AUDIO_IDLE:
		default:
			audio_volume(0x00); //Silence!
    6174:	80 e0       	ldi	r24, 0x00	; 0
    6176:	0e 94 4d 30 	call	0x609a	; 0x609a <audio_volume>
    617a:	08 95       	ret

0000617c <__cmpsf2>:
    617c:	d9 d0       	rcall	.+434    	; 0x6330 <__fp_cmp>
    617e:	08 f4       	brcc	.+2      	; 0x6182 <__cmpsf2+0x6>
    6180:	81 e0       	ldi	r24, 0x01	; 1
    6182:	08 95       	ret

00006184 <__divsf3>:
    6184:	0c d0       	rcall	.+24     	; 0x619e <__divsf3x>
    6186:	0f c1       	rjmp	.+542    	; 0x63a6 <__fp_round>
    6188:	07 d1       	rcall	.+526    	; 0x6398 <__fp_pscB>
    618a:	40 f0       	brcs	.+16     	; 0x619c <__divsf3+0x18>
    618c:	fe d0       	rcall	.+508    	; 0x638a <__fp_pscA>
    618e:	30 f0       	brcs	.+12     	; 0x619c <__divsf3+0x18>
    6190:	21 f4       	brne	.+8      	; 0x619a <__divsf3+0x16>
    6192:	5f 3f       	cpi	r21, 0xFF	; 255
    6194:	19 f0       	breq	.+6      	; 0x619c <__divsf3+0x18>
    6196:	f0 c0       	rjmp	.+480    	; 0x6378 <__fp_inf>
    6198:	51 11       	cpse	r21, r1
    619a:	39 c1       	rjmp	.+626    	; 0x640e <__fp_szero>
    619c:	f3 c0       	rjmp	.+486    	; 0x6384 <__fp_nan>

0000619e <__divsf3x>:
    619e:	14 d1       	rcall	.+552    	; 0x63c8 <__fp_split3>
    61a0:	98 f3       	brcs	.-26     	; 0x6188 <__divsf3+0x4>

000061a2 <__divsf3_pse>:
    61a2:	99 23       	and	r25, r25
    61a4:	c9 f3       	breq	.-14     	; 0x6198 <__divsf3+0x14>
    61a6:	55 23       	and	r21, r21
    61a8:	b1 f3       	breq	.-20     	; 0x6196 <__divsf3+0x12>
    61aa:	95 1b       	sub	r25, r21
    61ac:	55 0b       	sbc	r21, r21
    61ae:	bb 27       	eor	r27, r27
    61b0:	aa 27       	eor	r26, r26
    61b2:	62 17       	cp	r22, r18
    61b4:	73 07       	cpc	r23, r19
    61b6:	84 07       	cpc	r24, r20
    61b8:	38 f0       	brcs	.+14     	; 0x61c8 <__divsf3_pse+0x26>
    61ba:	9f 5f       	subi	r25, 0xFF	; 255
    61bc:	5f 4f       	sbci	r21, 0xFF	; 255
    61be:	22 0f       	add	r18, r18
    61c0:	33 1f       	adc	r19, r19
    61c2:	44 1f       	adc	r20, r20
    61c4:	aa 1f       	adc	r26, r26
    61c6:	a9 f3       	breq	.-22     	; 0x61b2 <__divsf3_pse+0x10>
    61c8:	33 d0       	rcall	.+102    	; 0x6230 <__divsf3_pse+0x8e>
    61ca:	0e 2e       	mov	r0, r30
    61cc:	3a f0       	brmi	.+14     	; 0x61dc <__divsf3_pse+0x3a>
    61ce:	e0 e8       	ldi	r30, 0x80	; 128
    61d0:	30 d0       	rcall	.+96     	; 0x6232 <__divsf3_pse+0x90>
    61d2:	91 50       	subi	r25, 0x01	; 1
    61d4:	50 40       	sbci	r21, 0x00	; 0
    61d6:	e6 95       	lsr	r30
    61d8:	00 1c       	adc	r0, r0
    61da:	ca f7       	brpl	.-14     	; 0x61ce <__divsf3_pse+0x2c>
    61dc:	29 d0       	rcall	.+82     	; 0x6230 <__divsf3_pse+0x8e>
    61de:	fe 2f       	mov	r31, r30
    61e0:	27 d0       	rcall	.+78     	; 0x6230 <__divsf3_pse+0x8e>
    61e2:	66 0f       	add	r22, r22
    61e4:	77 1f       	adc	r23, r23
    61e6:	88 1f       	adc	r24, r24
    61e8:	bb 1f       	adc	r27, r27
    61ea:	26 17       	cp	r18, r22
    61ec:	37 07       	cpc	r19, r23
    61ee:	48 07       	cpc	r20, r24
    61f0:	ab 07       	cpc	r26, r27
    61f2:	b0 e8       	ldi	r27, 0x80	; 128
    61f4:	09 f0       	breq	.+2      	; 0x61f8 <__divsf3_pse+0x56>
    61f6:	bb 0b       	sbc	r27, r27
    61f8:	80 2d       	mov	r24, r0
    61fa:	bf 01       	movw	r22, r30
    61fc:	ff 27       	eor	r31, r31
    61fe:	93 58       	subi	r25, 0x83	; 131
    6200:	5f 4f       	sbci	r21, 0xFF	; 255
    6202:	2a f0       	brmi	.+10     	; 0x620e <__divsf3_pse+0x6c>
    6204:	9e 3f       	cpi	r25, 0xFE	; 254
    6206:	51 05       	cpc	r21, r1
    6208:	68 f0       	brcs	.+26     	; 0x6224 <__divsf3_pse+0x82>
    620a:	b6 c0       	rjmp	.+364    	; 0x6378 <__fp_inf>
    620c:	00 c1       	rjmp	.+512    	; 0x640e <__fp_szero>
    620e:	5f 3f       	cpi	r21, 0xFF	; 255
    6210:	ec f3       	brlt	.-6      	; 0x620c <__divsf3_pse+0x6a>
    6212:	98 3e       	cpi	r25, 0xE8	; 232
    6214:	dc f3       	brlt	.-10     	; 0x620c <__divsf3_pse+0x6a>
    6216:	86 95       	lsr	r24
    6218:	77 95       	ror	r23
    621a:	67 95       	ror	r22
    621c:	b7 95       	ror	r27
    621e:	f7 95       	ror	r31
    6220:	9f 5f       	subi	r25, 0xFF	; 255
    6222:	c9 f7       	brne	.-14     	; 0x6216 <__divsf3_pse+0x74>
    6224:	88 0f       	add	r24, r24
    6226:	91 1d       	adc	r25, r1
    6228:	96 95       	lsr	r25
    622a:	87 95       	ror	r24
    622c:	97 f9       	bld	r25, 7
    622e:	08 95       	ret
    6230:	e1 e0       	ldi	r30, 0x01	; 1
    6232:	66 0f       	add	r22, r22
    6234:	77 1f       	adc	r23, r23
    6236:	88 1f       	adc	r24, r24
    6238:	bb 1f       	adc	r27, r27
    623a:	62 17       	cp	r22, r18
    623c:	73 07       	cpc	r23, r19
    623e:	84 07       	cpc	r24, r20
    6240:	ba 07       	cpc	r27, r26
    6242:	20 f0       	brcs	.+8      	; 0x624c <__divsf3_pse+0xaa>
    6244:	62 1b       	sub	r22, r18
    6246:	73 0b       	sbc	r23, r19
    6248:	84 0b       	sbc	r24, r20
    624a:	ba 0b       	sbc	r27, r26
    624c:	ee 1f       	adc	r30, r30
    624e:	88 f7       	brcc	.-30     	; 0x6232 <__divsf3_pse+0x90>
    6250:	e0 95       	com	r30
    6252:	08 95       	ret

00006254 <__fixsfsi>:
    6254:	04 d0       	rcall	.+8      	; 0x625e <__fixunssfsi>
    6256:	68 94       	set
    6258:	b1 11       	cpse	r27, r1
    625a:	d9 c0       	rjmp	.+434    	; 0x640e <__fp_szero>
    625c:	08 95       	ret

0000625e <__fixunssfsi>:
    625e:	bc d0       	rcall	.+376    	; 0x63d8 <__fp_splitA>
    6260:	88 f0       	brcs	.+34     	; 0x6284 <__fixunssfsi+0x26>
    6262:	9f 57       	subi	r25, 0x7F	; 127
    6264:	90 f0       	brcs	.+36     	; 0x628a <__fixunssfsi+0x2c>
    6266:	b9 2f       	mov	r27, r25
    6268:	99 27       	eor	r25, r25
    626a:	b7 51       	subi	r27, 0x17	; 23
    626c:	a0 f0       	brcs	.+40     	; 0x6296 <__fixunssfsi+0x38>
    626e:	d1 f0       	breq	.+52     	; 0x62a4 <__fixunssfsi+0x46>
    6270:	66 0f       	add	r22, r22
    6272:	77 1f       	adc	r23, r23
    6274:	88 1f       	adc	r24, r24
    6276:	99 1f       	adc	r25, r25
    6278:	1a f0       	brmi	.+6      	; 0x6280 <__fixunssfsi+0x22>
    627a:	ba 95       	dec	r27
    627c:	c9 f7       	brne	.-14     	; 0x6270 <__fixunssfsi+0x12>
    627e:	12 c0       	rjmp	.+36     	; 0x62a4 <__fixunssfsi+0x46>
    6280:	b1 30       	cpi	r27, 0x01	; 1
    6282:	81 f0       	breq	.+32     	; 0x62a4 <__fixunssfsi+0x46>
    6284:	c3 d0       	rcall	.+390    	; 0x640c <__fp_zero>
    6286:	b1 e0       	ldi	r27, 0x01	; 1
    6288:	08 95       	ret
    628a:	c0 c0       	rjmp	.+384    	; 0x640c <__fp_zero>
    628c:	67 2f       	mov	r22, r23
    628e:	78 2f       	mov	r23, r24
    6290:	88 27       	eor	r24, r24
    6292:	b8 5f       	subi	r27, 0xF8	; 248
    6294:	39 f0       	breq	.+14     	; 0x62a4 <__fixunssfsi+0x46>
    6296:	b9 3f       	cpi	r27, 0xF9	; 249
    6298:	cc f3       	brlt	.-14     	; 0x628c <__fixunssfsi+0x2e>
    629a:	86 95       	lsr	r24
    629c:	77 95       	ror	r23
    629e:	67 95       	ror	r22
    62a0:	b3 95       	inc	r27
    62a2:	d9 f7       	brne	.-10     	; 0x629a <__fixunssfsi+0x3c>
    62a4:	3e f4       	brtc	.+14     	; 0x62b4 <__fixunssfsi+0x56>
    62a6:	90 95       	com	r25
    62a8:	80 95       	com	r24
    62aa:	70 95       	com	r23
    62ac:	61 95       	neg	r22
    62ae:	7f 4f       	sbci	r23, 0xFF	; 255
    62b0:	8f 4f       	sbci	r24, 0xFF	; 255
    62b2:	9f 4f       	sbci	r25, 0xFF	; 255
    62b4:	08 95       	ret

000062b6 <__floatunsisf>:
    62b6:	e8 94       	clt
    62b8:	09 c0       	rjmp	.+18     	; 0x62cc <__floatsisf+0x12>

000062ba <__floatsisf>:
    62ba:	97 fb       	bst	r25, 7
    62bc:	3e f4       	brtc	.+14     	; 0x62cc <__floatsisf+0x12>
    62be:	90 95       	com	r25
    62c0:	80 95       	com	r24
    62c2:	70 95       	com	r23
    62c4:	61 95       	neg	r22
    62c6:	7f 4f       	sbci	r23, 0xFF	; 255
    62c8:	8f 4f       	sbci	r24, 0xFF	; 255
    62ca:	9f 4f       	sbci	r25, 0xFF	; 255
    62cc:	99 23       	and	r25, r25
    62ce:	a9 f0       	breq	.+42     	; 0x62fa <__floatsisf+0x40>
    62d0:	f9 2f       	mov	r31, r25
    62d2:	96 e9       	ldi	r25, 0x96	; 150
    62d4:	bb 27       	eor	r27, r27
    62d6:	93 95       	inc	r25
    62d8:	f6 95       	lsr	r31
    62da:	87 95       	ror	r24
    62dc:	77 95       	ror	r23
    62de:	67 95       	ror	r22
    62e0:	b7 95       	ror	r27
    62e2:	f1 11       	cpse	r31, r1
    62e4:	f8 cf       	rjmp	.-16     	; 0x62d6 <__floatsisf+0x1c>
    62e6:	fa f4       	brpl	.+62     	; 0x6326 <__floatsisf+0x6c>
    62e8:	bb 0f       	add	r27, r27
    62ea:	11 f4       	brne	.+4      	; 0x62f0 <__floatsisf+0x36>
    62ec:	60 ff       	sbrs	r22, 0
    62ee:	1b c0       	rjmp	.+54     	; 0x6326 <__floatsisf+0x6c>
    62f0:	6f 5f       	subi	r22, 0xFF	; 255
    62f2:	7f 4f       	sbci	r23, 0xFF	; 255
    62f4:	8f 4f       	sbci	r24, 0xFF	; 255
    62f6:	9f 4f       	sbci	r25, 0xFF	; 255
    62f8:	16 c0       	rjmp	.+44     	; 0x6326 <__floatsisf+0x6c>
    62fa:	88 23       	and	r24, r24
    62fc:	11 f0       	breq	.+4      	; 0x6302 <__floatsisf+0x48>
    62fe:	96 e9       	ldi	r25, 0x96	; 150
    6300:	11 c0       	rjmp	.+34     	; 0x6324 <__floatsisf+0x6a>
    6302:	77 23       	and	r23, r23
    6304:	21 f0       	breq	.+8      	; 0x630e <__floatsisf+0x54>
    6306:	9e e8       	ldi	r25, 0x8E	; 142
    6308:	87 2f       	mov	r24, r23
    630a:	76 2f       	mov	r23, r22
    630c:	05 c0       	rjmp	.+10     	; 0x6318 <__floatsisf+0x5e>
    630e:	66 23       	and	r22, r22
    6310:	71 f0       	breq	.+28     	; 0x632e <__floatsisf+0x74>
    6312:	96 e8       	ldi	r25, 0x86	; 134
    6314:	86 2f       	mov	r24, r22
    6316:	70 e0       	ldi	r23, 0x00	; 0
    6318:	60 e0       	ldi	r22, 0x00	; 0
    631a:	2a f0       	brmi	.+10     	; 0x6326 <__floatsisf+0x6c>
    631c:	9a 95       	dec	r25
    631e:	66 0f       	add	r22, r22
    6320:	77 1f       	adc	r23, r23
    6322:	88 1f       	adc	r24, r24
    6324:	da f7       	brpl	.-10     	; 0x631c <__floatsisf+0x62>
    6326:	88 0f       	add	r24, r24
    6328:	96 95       	lsr	r25
    632a:	87 95       	ror	r24
    632c:	97 f9       	bld	r25, 7
    632e:	08 95       	ret

00006330 <__fp_cmp>:
    6330:	99 0f       	add	r25, r25
    6332:	00 08       	sbc	r0, r0
    6334:	55 0f       	add	r21, r21
    6336:	aa 0b       	sbc	r26, r26
    6338:	e0 e8       	ldi	r30, 0x80	; 128
    633a:	fe ef       	ldi	r31, 0xFE	; 254
    633c:	16 16       	cp	r1, r22
    633e:	17 06       	cpc	r1, r23
    6340:	e8 07       	cpc	r30, r24
    6342:	f9 07       	cpc	r31, r25
    6344:	c0 f0       	brcs	.+48     	; 0x6376 <__fp_cmp+0x46>
    6346:	12 16       	cp	r1, r18
    6348:	13 06       	cpc	r1, r19
    634a:	e4 07       	cpc	r30, r20
    634c:	f5 07       	cpc	r31, r21
    634e:	98 f0       	brcs	.+38     	; 0x6376 <__fp_cmp+0x46>
    6350:	62 1b       	sub	r22, r18
    6352:	73 0b       	sbc	r23, r19
    6354:	84 0b       	sbc	r24, r20
    6356:	95 0b       	sbc	r25, r21
    6358:	39 f4       	brne	.+14     	; 0x6368 <__fp_cmp+0x38>
    635a:	0a 26       	eor	r0, r26
    635c:	61 f0       	breq	.+24     	; 0x6376 <__fp_cmp+0x46>
    635e:	23 2b       	or	r18, r19
    6360:	24 2b       	or	r18, r20
    6362:	25 2b       	or	r18, r21
    6364:	21 f4       	brne	.+8      	; 0x636e <__fp_cmp+0x3e>
    6366:	08 95       	ret
    6368:	0a 26       	eor	r0, r26
    636a:	09 f4       	brne	.+2      	; 0x636e <__fp_cmp+0x3e>
    636c:	a1 40       	sbci	r26, 0x01	; 1
    636e:	a6 95       	lsr	r26
    6370:	8f ef       	ldi	r24, 0xFF	; 255
    6372:	81 1d       	adc	r24, r1
    6374:	81 1d       	adc	r24, r1
    6376:	08 95       	ret

00006378 <__fp_inf>:
    6378:	97 f9       	bld	r25, 7
    637a:	9f 67       	ori	r25, 0x7F	; 127
    637c:	80 e8       	ldi	r24, 0x80	; 128
    637e:	70 e0       	ldi	r23, 0x00	; 0
    6380:	60 e0       	ldi	r22, 0x00	; 0
    6382:	08 95       	ret

00006384 <__fp_nan>:
    6384:	9f ef       	ldi	r25, 0xFF	; 255
    6386:	80 ec       	ldi	r24, 0xC0	; 192
    6388:	08 95       	ret

0000638a <__fp_pscA>:
    638a:	00 24       	eor	r0, r0
    638c:	0a 94       	dec	r0
    638e:	16 16       	cp	r1, r22
    6390:	17 06       	cpc	r1, r23
    6392:	18 06       	cpc	r1, r24
    6394:	09 06       	cpc	r0, r25
    6396:	08 95       	ret

00006398 <__fp_pscB>:
    6398:	00 24       	eor	r0, r0
    639a:	0a 94       	dec	r0
    639c:	12 16       	cp	r1, r18
    639e:	13 06       	cpc	r1, r19
    63a0:	14 06       	cpc	r1, r20
    63a2:	05 06       	cpc	r0, r21
    63a4:	08 95       	ret

000063a6 <__fp_round>:
    63a6:	09 2e       	mov	r0, r25
    63a8:	03 94       	inc	r0
    63aa:	00 0c       	add	r0, r0
    63ac:	11 f4       	brne	.+4      	; 0x63b2 <__fp_round+0xc>
    63ae:	88 23       	and	r24, r24
    63b0:	52 f0       	brmi	.+20     	; 0x63c6 <__fp_round+0x20>
    63b2:	bb 0f       	add	r27, r27
    63b4:	40 f4       	brcc	.+16     	; 0x63c6 <__fp_round+0x20>
    63b6:	bf 2b       	or	r27, r31
    63b8:	11 f4       	brne	.+4      	; 0x63be <__fp_round+0x18>
    63ba:	60 ff       	sbrs	r22, 0
    63bc:	04 c0       	rjmp	.+8      	; 0x63c6 <__fp_round+0x20>
    63be:	6f 5f       	subi	r22, 0xFF	; 255
    63c0:	7f 4f       	sbci	r23, 0xFF	; 255
    63c2:	8f 4f       	sbci	r24, 0xFF	; 255
    63c4:	9f 4f       	sbci	r25, 0xFF	; 255
    63c6:	08 95       	ret

000063c8 <__fp_split3>:
    63c8:	57 fd       	sbrc	r21, 7
    63ca:	90 58       	subi	r25, 0x80	; 128
    63cc:	44 0f       	add	r20, r20
    63ce:	55 1f       	adc	r21, r21
    63d0:	59 f0       	breq	.+22     	; 0x63e8 <__fp_splitA+0x10>
    63d2:	5f 3f       	cpi	r21, 0xFF	; 255
    63d4:	71 f0       	breq	.+28     	; 0x63f2 <__fp_splitA+0x1a>
    63d6:	47 95       	ror	r20

000063d8 <__fp_splitA>:
    63d8:	88 0f       	add	r24, r24
    63da:	97 fb       	bst	r25, 7
    63dc:	99 1f       	adc	r25, r25
    63de:	61 f0       	breq	.+24     	; 0x63f8 <__fp_splitA+0x20>
    63e0:	9f 3f       	cpi	r25, 0xFF	; 255
    63e2:	79 f0       	breq	.+30     	; 0x6402 <__fp_splitA+0x2a>
    63e4:	87 95       	ror	r24
    63e6:	08 95       	ret
    63e8:	12 16       	cp	r1, r18
    63ea:	13 06       	cpc	r1, r19
    63ec:	14 06       	cpc	r1, r20
    63ee:	55 1f       	adc	r21, r21
    63f0:	f2 cf       	rjmp	.-28     	; 0x63d6 <__fp_split3+0xe>
    63f2:	46 95       	lsr	r20
    63f4:	f1 df       	rcall	.-30     	; 0x63d8 <__fp_splitA>
    63f6:	08 c0       	rjmp	.+16     	; 0x6408 <__fp_splitA+0x30>
    63f8:	16 16       	cp	r1, r22
    63fa:	17 06       	cpc	r1, r23
    63fc:	18 06       	cpc	r1, r24
    63fe:	99 1f       	adc	r25, r25
    6400:	f1 cf       	rjmp	.-30     	; 0x63e4 <__fp_splitA+0xc>
    6402:	86 95       	lsr	r24
    6404:	71 05       	cpc	r23, r1
    6406:	61 05       	cpc	r22, r1
    6408:	08 94       	sec
    640a:	08 95       	ret

0000640c <__fp_zero>:
    640c:	e8 94       	clt

0000640e <__fp_szero>:
    640e:	bb 27       	eor	r27, r27
    6410:	66 27       	eor	r22, r22
    6412:	77 27       	eor	r23, r23
    6414:	cb 01       	movw	r24, r22
    6416:	97 f9       	bld	r25, 7
    6418:	08 95       	ret

0000641a <__mulsf3>:
    641a:	0b d0       	rcall	.+22     	; 0x6432 <__mulsf3x>
    641c:	c4 cf       	rjmp	.-120    	; 0x63a6 <__fp_round>
    641e:	b5 df       	rcall	.-150    	; 0x638a <__fp_pscA>
    6420:	28 f0       	brcs	.+10     	; 0x642c <__mulsf3+0x12>
    6422:	ba df       	rcall	.-140    	; 0x6398 <__fp_pscB>
    6424:	18 f0       	brcs	.+6      	; 0x642c <__mulsf3+0x12>
    6426:	95 23       	and	r25, r21
    6428:	09 f0       	breq	.+2      	; 0x642c <__mulsf3+0x12>
    642a:	a6 cf       	rjmp	.-180    	; 0x6378 <__fp_inf>
    642c:	ab cf       	rjmp	.-170    	; 0x6384 <__fp_nan>
    642e:	11 24       	eor	r1, r1
    6430:	ee cf       	rjmp	.-36     	; 0x640e <__fp_szero>

00006432 <__mulsf3x>:
    6432:	ca df       	rcall	.-108    	; 0x63c8 <__fp_split3>
    6434:	a0 f3       	brcs	.-24     	; 0x641e <__mulsf3+0x4>

00006436 <__mulsf3_pse>:
    6436:	95 9f       	mul	r25, r21
    6438:	d1 f3       	breq	.-12     	; 0x642e <__mulsf3+0x14>
    643a:	95 0f       	add	r25, r21
    643c:	50 e0       	ldi	r21, 0x00	; 0
    643e:	55 1f       	adc	r21, r21
    6440:	62 9f       	mul	r22, r18
    6442:	f0 01       	movw	r30, r0
    6444:	72 9f       	mul	r23, r18
    6446:	bb 27       	eor	r27, r27
    6448:	f0 0d       	add	r31, r0
    644a:	b1 1d       	adc	r27, r1
    644c:	63 9f       	mul	r22, r19
    644e:	aa 27       	eor	r26, r26
    6450:	f0 0d       	add	r31, r0
    6452:	b1 1d       	adc	r27, r1
    6454:	aa 1f       	adc	r26, r26
    6456:	64 9f       	mul	r22, r20
    6458:	66 27       	eor	r22, r22
    645a:	b0 0d       	add	r27, r0
    645c:	a1 1d       	adc	r26, r1
    645e:	66 1f       	adc	r22, r22
    6460:	82 9f       	mul	r24, r18
    6462:	22 27       	eor	r18, r18
    6464:	b0 0d       	add	r27, r0
    6466:	a1 1d       	adc	r26, r1
    6468:	62 1f       	adc	r22, r18
    646a:	73 9f       	mul	r23, r19
    646c:	b0 0d       	add	r27, r0
    646e:	a1 1d       	adc	r26, r1
    6470:	62 1f       	adc	r22, r18
    6472:	83 9f       	mul	r24, r19
    6474:	a0 0d       	add	r26, r0
    6476:	61 1d       	adc	r22, r1
    6478:	22 1f       	adc	r18, r18
    647a:	74 9f       	mul	r23, r20
    647c:	33 27       	eor	r19, r19
    647e:	a0 0d       	add	r26, r0
    6480:	61 1d       	adc	r22, r1
    6482:	23 1f       	adc	r18, r19
    6484:	84 9f       	mul	r24, r20
    6486:	60 0d       	add	r22, r0
    6488:	21 1d       	adc	r18, r1
    648a:	82 2f       	mov	r24, r18
    648c:	76 2f       	mov	r23, r22
    648e:	6a 2f       	mov	r22, r26
    6490:	11 24       	eor	r1, r1
    6492:	9f 57       	subi	r25, 0x7F	; 127
    6494:	50 40       	sbci	r21, 0x00	; 0
    6496:	8a f0       	brmi	.+34     	; 0x64ba <__mulsf3_pse+0x84>
    6498:	e1 f0       	breq	.+56     	; 0x64d2 <__mulsf3_pse+0x9c>
    649a:	88 23       	and	r24, r24
    649c:	4a f0       	brmi	.+18     	; 0x64b0 <__mulsf3_pse+0x7a>
    649e:	ee 0f       	add	r30, r30
    64a0:	ff 1f       	adc	r31, r31
    64a2:	bb 1f       	adc	r27, r27
    64a4:	66 1f       	adc	r22, r22
    64a6:	77 1f       	adc	r23, r23
    64a8:	88 1f       	adc	r24, r24
    64aa:	91 50       	subi	r25, 0x01	; 1
    64ac:	50 40       	sbci	r21, 0x00	; 0
    64ae:	a9 f7       	brne	.-22     	; 0x649a <__mulsf3_pse+0x64>
    64b0:	9e 3f       	cpi	r25, 0xFE	; 254
    64b2:	51 05       	cpc	r21, r1
    64b4:	70 f0       	brcs	.+28     	; 0x64d2 <__mulsf3_pse+0x9c>
    64b6:	60 cf       	rjmp	.-320    	; 0x6378 <__fp_inf>
    64b8:	aa cf       	rjmp	.-172    	; 0x640e <__fp_szero>
    64ba:	5f 3f       	cpi	r21, 0xFF	; 255
    64bc:	ec f3       	brlt	.-6      	; 0x64b8 <__mulsf3_pse+0x82>
    64be:	98 3e       	cpi	r25, 0xE8	; 232
    64c0:	dc f3       	brlt	.-10     	; 0x64b8 <__mulsf3_pse+0x82>
    64c2:	86 95       	lsr	r24
    64c4:	77 95       	ror	r23
    64c6:	67 95       	ror	r22
    64c8:	b7 95       	ror	r27
    64ca:	f7 95       	ror	r31
    64cc:	e7 95       	ror	r30
    64ce:	9f 5f       	subi	r25, 0xFF	; 255
    64d0:	c1 f7       	brne	.-16     	; 0x64c2 <__mulsf3_pse+0x8c>
    64d2:	fe 2b       	or	r31, r30
    64d4:	88 0f       	add	r24, r24
    64d6:	91 1d       	adc	r25, r1
    64d8:	96 95       	lsr	r25
    64da:	87 95       	ror	r24
    64dc:	97 f9       	bld	r25, 7
    64de:	08 95       	ret

000064e0 <atoi>:
    64e0:	fc 01       	movw	r30, r24
    64e2:	88 27       	eor	r24, r24
    64e4:	99 27       	eor	r25, r25
    64e6:	e8 94       	clt
    64e8:	21 91       	ld	r18, Z+
    64ea:	20 32       	cpi	r18, 0x20	; 32
    64ec:	e9 f3       	breq	.-6      	; 0x64e8 <atoi+0x8>
    64ee:	29 30       	cpi	r18, 0x09	; 9
    64f0:	10 f0       	brcs	.+4      	; 0x64f6 <atoi+0x16>
    64f2:	2e 30       	cpi	r18, 0x0E	; 14
    64f4:	c8 f3       	brcs	.-14     	; 0x64e8 <atoi+0x8>
    64f6:	2b 32       	cpi	r18, 0x2B	; 43
    64f8:	41 f0       	breq	.+16     	; 0x650a <atoi+0x2a>
    64fa:	2d 32       	cpi	r18, 0x2D	; 45
    64fc:	39 f4       	brne	.+14     	; 0x650c <atoi+0x2c>
    64fe:	68 94       	set
    6500:	04 c0       	rjmp	.+8      	; 0x650a <atoi+0x2a>
    6502:	0e 94 8e 32 	call	0x651c	; 0x651c <__mulhi_const_10>
    6506:	82 0f       	add	r24, r18
    6508:	91 1d       	adc	r25, r1
    650a:	21 91       	ld	r18, Z+
    650c:	20 53       	subi	r18, 0x30	; 48
    650e:	2a 30       	cpi	r18, 0x0A	; 10
    6510:	c0 f3       	brcs	.-16     	; 0x6502 <atoi+0x22>
    6512:	1e f4       	brtc	.+6      	; 0x651a <atoi+0x3a>
    6514:	90 95       	com	r25
    6516:	81 95       	neg	r24
    6518:	9f 4f       	sbci	r25, 0xFF	; 255
    651a:	08 95       	ret

0000651c <__mulhi_const_10>:
    651c:	7a e0       	ldi	r23, 0x0A	; 10
    651e:	97 9f       	mul	r25, r23
    6520:	90 2d       	mov	r25, r0
    6522:	87 9f       	mul	r24, r23
    6524:	80 2d       	mov	r24, r0
    6526:	91 0d       	add	r25, r1
    6528:	11 24       	eor	r1, r1
    652a:	08 95       	ret

0000652c <utoa>:
    652c:	fb 01       	movw	r30, r22
    652e:	9f 01       	movw	r18, r30
    6530:	42 30       	cpi	r20, 0x02	; 2
    6532:	74 f0       	brlt	.+28     	; 0x6550 <utoa+0x24>
    6534:	45 32       	cpi	r20, 0x25	; 37
    6536:	64 f4       	brge	.+24     	; 0x6550 <utoa+0x24>
    6538:	64 2f       	mov	r22, r20
    653a:	77 27       	eor	r23, r23
    653c:	0e 94 0e 33 	call	0x661c	; 0x661c <__udivmodhi4>
    6540:	80 5d       	subi	r24, 0xD0	; 208
    6542:	8a 33       	cpi	r24, 0x3A	; 58
    6544:	0c f0       	brlt	.+2      	; 0x6548 <utoa+0x1c>
    6546:	89 5d       	subi	r24, 0xD9	; 217
    6548:	81 93       	st	Z+, r24
    654a:	cb 01       	movw	r24, r22
    654c:	00 97       	sbiw	r24, 0x00	; 0
    654e:	a1 f7       	brne	.-24     	; 0x6538 <utoa+0xc>
    6550:	10 82       	st	Z, r1
    6552:	c9 01       	movw	r24, r18
    6554:	0c 94 fe 32 	jmp	0x65fc	; 0x65fc <strrev>

00006558 <__eerd_block_x128a1>:
    6558:	e0 ec       	ldi	r30, 0xC0	; 192
    655a:	f1 e0       	ldi	r31, 0x01	; 1
    655c:	a7 85       	ldd	r26, Z+15	; 0x0f
    655e:	a7 fd       	sbrc	r26, 7
    6560:	fd cf       	rjmp	.-6      	; 0x655c <__eerd_block_x128a1+0x4>
    6562:	a4 85       	ldd	r26, Z+12	; 0x0c
    6564:	a8 60       	ori	r26, 0x08	; 8
    6566:	a4 87       	std	Z+12, r26	; 0x0c
    6568:	60 50       	subi	r22, 0x00	; 0
    656a:	70 4f       	sbci	r23, 0xF0	; 240
    656c:	0c 94 f5 32 	jmp	0x65ea	; 0x65ea <memcpy>

00006570 <__eerd_byte_x128a1>:
    6570:	03 d0       	rcall	.+6      	; 0x6578 <eeprom_mapen>
    6572:	80 81       	ld	r24, Z
    6574:	99 27       	eor	r25, r25
    6576:	08 95       	ret

00006578 <eeprom_mapen>:
    6578:	e0 ec       	ldi	r30, 0xC0	; 192
    657a:	f1 e0       	ldi	r31, 0x01	; 1
    657c:	37 85       	ldd	r19, Z+15	; 0x0f
    657e:	37 fd       	sbrc	r19, 7
    6580:	fd cf       	rjmp	.-6      	; 0x657c <eeprom_mapen+0x4>
    6582:	34 85       	ldd	r19, Z+12	; 0x0c
    6584:	38 60       	ori	r19, 0x08	; 8
    6586:	34 87       	std	Z+12, r19	; 0x0c
    6588:	fc 01       	movw	r30, r24
    658a:	e0 50       	subi	r30, 0x00	; 0
    658c:	f0 4f       	sbci	r31, 0xF0	; 240
    658e:	08 95       	ret

00006590 <__eewr_block_x128a1>:
    6590:	dc 01       	movw	r26, r24
    6592:	cb 01       	movw	r24, r22
    6594:	03 c0       	rjmp	.+6      	; 0x659c <__eewr_block_x128a1+0xc>
    6596:	2d 91       	ld	r18, X+
    6598:	0e 94 d3 32 	call	0x65a6	; 0x65a6 <__eewr_r18_x128a1>
    659c:	41 50       	subi	r20, 0x01	; 1
    659e:	50 40       	sbci	r21, 0x00	; 0
    65a0:	d0 f7       	brcc	.-12     	; 0x6596 <__eewr_block_x128a1+0x6>
    65a2:	08 95       	ret

000065a4 <__eewr_byte_x128a1>:
    65a4:	26 2f       	mov	r18, r22

000065a6 <__eewr_r18_x128a1>:
    65a6:	e0 ec       	ldi	r30, 0xC0	; 192
    65a8:	f1 e0       	ldi	r31, 0x01	; 1
    65aa:	37 85       	ldd	r19, Z+15	; 0x0f
    65ac:	37 fd       	sbrc	r19, 7
    65ae:	fd cf       	rjmp	.-6      	; 0x65aa <__eewr_r18_x128a1+0x4>
    65b0:	34 85       	ldd	r19, Z+12	; 0x0c
    65b2:	37 7f       	andi	r19, 0xF7	; 247
    65b4:	34 87       	std	Z+12, r19	; 0x0c
    65b6:	37 85       	ldd	r19, Z+15	; 0x0f
    65b8:	31 ff       	sbrs	r19, 1
    65ba:	09 c0       	rjmp	.+18     	; 0x65ce <__eewr_r18_x128a1+0x28>
    65bc:	36 e3       	ldi	r19, 0x36	; 54
    65be:	32 87       	std	Z+10, r19	; 0x0a
    65c0:	38 ed       	ldi	r19, 0xD8	; 216
    65c2:	34 bf       	out	0x34, r19	; 52
    65c4:	31 e0       	ldi	r19, 0x01	; 1
    65c6:	33 87       	std	Z+11, r19	; 0x0b
    65c8:	37 85       	ldd	r19, Z+15	; 0x0f
    65ca:	37 fd       	sbrc	r19, 7
    65cc:	fd cf       	rjmp	.-6      	; 0x65c8 <__eewr_r18_x128a1+0x22>
    65ce:	33 e3       	ldi	r19, 0x33	; 51
    65d0:	32 87       	std	Z+10, r19	; 0x0a
    65d2:	80 83       	st	Z, r24
    65d4:	91 83       	std	Z+1, r25	; 0x01
    65d6:	12 82       	std	Z+2, r1	; 0x02
    65d8:	24 83       	std	Z+4, r18	; 0x04
    65da:	25 e3       	ldi	r18, 0x35	; 53
    65dc:	22 87       	std	Z+10, r18	; 0x0a
    65de:	28 ed       	ldi	r18, 0xD8	; 216
    65e0:	31 e0       	ldi	r19, 0x01	; 1
    65e2:	24 bf       	out	0x34, r18	; 52
    65e4:	33 87       	std	Z+11, r19	; 0x0b
    65e6:	01 96       	adiw	r24, 0x01	; 1
    65e8:	08 95       	ret

000065ea <memcpy>:
    65ea:	fb 01       	movw	r30, r22
    65ec:	dc 01       	movw	r26, r24
    65ee:	02 c0       	rjmp	.+4      	; 0x65f4 <memcpy+0xa>
    65f0:	01 90       	ld	r0, Z+
    65f2:	0d 92       	st	X+, r0
    65f4:	41 50       	subi	r20, 0x01	; 1
    65f6:	50 40       	sbci	r21, 0x00	; 0
    65f8:	d8 f7       	brcc	.-10     	; 0x65f0 <memcpy+0x6>
    65fa:	08 95       	ret

000065fc <strrev>:
    65fc:	dc 01       	movw	r26, r24
    65fe:	fc 01       	movw	r30, r24
    6600:	67 2f       	mov	r22, r23
    6602:	71 91       	ld	r23, Z+
    6604:	77 23       	and	r23, r23
    6606:	e1 f7       	brne	.-8      	; 0x6600 <strrev+0x4>
    6608:	32 97       	sbiw	r30, 0x02	; 2
    660a:	04 c0       	rjmp	.+8      	; 0x6614 <strrev+0x18>
    660c:	7c 91       	ld	r23, X
    660e:	6d 93       	st	X+, r22
    6610:	70 83       	st	Z, r23
    6612:	62 91       	ld	r22, -Z
    6614:	ae 17       	cp	r26, r30
    6616:	bf 07       	cpc	r27, r31
    6618:	c8 f3       	brcs	.-14     	; 0x660c <strrev+0x10>
    661a:	08 95       	ret

0000661c <__udivmodhi4>:
    661c:	aa 1b       	sub	r26, r26
    661e:	bb 1b       	sub	r27, r27
    6620:	51 e1       	ldi	r21, 0x11	; 17
    6622:	07 c0       	rjmp	.+14     	; 0x6632 <__udivmodhi4_ep>

00006624 <__udivmodhi4_loop>:
    6624:	aa 1f       	adc	r26, r26
    6626:	bb 1f       	adc	r27, r27
    6628:	a6 17       	cp	r26, r22
    662a:	b7 07       	cpc	r27, r23
    662c:	10 f0       	brcs	.+4      	; 0x6632 <__udivmodhi4_ep>
    662e:	a6 1b       	sub	r26, r22
    6630:	b7 0b       	sbc	r27, r23

00006632 <__udivmodhi4_ep>:
    6632:	88 1f       	adc	r24, r24
    6634:	99 1f       	adc	r25, r25
    6636:	5a 95       	dec	r21
    6638:	a9 f7       	brne	.-22     	; 0x6624 <__udivmodhi4_loop>
    663a:	80 95       	com	r24
    663c:	90 95       	com	r25
    663e:	bc 01       	movw	r22, r24
    6640:	cd 01       	movw	r24, r26
    6642:	08 95       	ret

00006644 <_exit>:
    6644:	f8 94       	cli

00006646 <__stop_program>:
    6646:	ff cf       	rjmp	.-2      	; 0x6646 <__stop_program>
