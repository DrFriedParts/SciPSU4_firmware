
SciPSU4-Firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005eea  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000214  00802000  00005eea  00005f9e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00001cc4  00802214  00802214  000061b2  2**0
                  ALLOC
  3 .eeprom       00000011  00810000  00810000  000061b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         000025a4  00000000  00000000  000061c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      0000095f  00000000  00000000  00008768  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 00000260  00000000  00000000  000090c8  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00007658  00000000  00000000  00009328  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001450  00000000  00000000  00010980  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000270c  00000000  00000000  00011dd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000010d4  00000000  00000000  000144dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000163c  00000000  00000000  000155b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00003e75  00000000  00000000  00016bec  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000840  00000000  00000000  0001aa61  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__ctors_end>
       4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
       8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
       c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      10:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      14:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      18:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      1c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      20:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      24:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      28:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      2c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      30:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      34:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      38:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      3c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      40:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      44:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      48:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      4c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      50:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      54:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      58:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      5c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      60:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      64:	0c 94 29 18 	jmp	0x3052	; 0x3052 <__vector_25>
      68:	0c 94 bc 19 	jmp	0x3378	; 0x3378 <__vector_26>
      6c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      70:	0c 94 97 18 	jmp	0x312e	; 0x312e <__vector_28>
      74:	0c 94 19 19 	jmp	0x3232	; 0x3232 <__vector_29>
      78:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      7c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      80:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      84:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      88:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      8c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      90:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      94:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      98:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      9c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      a0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      a4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      a8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      ac:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      b0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      b4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      b8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      bc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      c0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      c4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      c8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      cc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      d0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      d4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      d8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      dc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      e0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      e4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      e8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      ec:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      f0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      f4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      f8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      fc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     100:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     104:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     108:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     10c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     110:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     114:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     118:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     11c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     120:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     124:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     128:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     12c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     130:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     134:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     138:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     13c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     140:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     144:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     148:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     14c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     150:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     154:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     158:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     15c:	0c 94 dc 10 	jmp	0x21b8	; 0x21b8 <__vector_87>
     160:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     164:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     168:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     16c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     170:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     174:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     178:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     17c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     180:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     184:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     188:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     18c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     190:	0c 94 c3 12 	jmp	0x2586	; 0x2586 <__vector_100>
     194:	0c 94 2b 13 	jmp	0x2656	; 0x2656 <__vector_101>
     198:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     19c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1a0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1a4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1a8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1ac:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1b0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1b4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1b8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1bc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1c0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1c4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1c8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1cc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1d0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1d4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1d8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1dc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1e0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1e4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1e8:	0c 94 2b 1f 	jmp	0x3e56	; 0x3e56 <__vector_122>
     1ec:	0c 94 59 1d 	jmp	0x3ab2	; 0x3ab2 <__vector_123>
     1f0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>

000001f4 <__ctors_end>:
     1f4:	11 24       	eor	r1, r1
     1f6:	1f be       	out	0x3f, r1	; 63
     1f8:	cf ef       	ldi	r28, 0xFF	; 255
     1fa:	df e3       	ldi	r29, 0x3F	; 63
     1fc:	de bf       	out	0x3e, r29	; 62
     1fe:	cd bf       	out	0x3d, r28	; 61
     200:	00 e0       	ldi	r16, 0x00	; 0
     202:	0c bf       	out	0x3c, r16	; 60
     204:	18 be       	out	0x38, r1	; 56
     206:	19 be       	out	0x39, r1	; 57
     208:	1a be       	out	0x3a, r1	; 58
     20a:	1b be       	out	0x3b, r1	; 59

0000020c <__do_copy_data>:
     20c:	12 e2       	ldi	r17, 0x22	; 34
     20e:	a0 e0       	ldi	r26, 0x00	; 0
     210:	b0 e2       	ldi	r27, 0x20	; 32
     212:	ea ee       	ldi	r30, 0xEA	; 234
     214:	fe e5       	ldi	r31, 0x5E	; 94
     216:	00 e0       	ldi	r16, 0x00	; 0
     218:	0b bf       	out	0x3b, r16	; 59
     21a:	02 c0       	rjmp	.+4      	; 0x220 <__do_copy_data+0x14>
     21c:	07 90       	elpm	r0, Z+
     21e:	0d 92       	st	X+, r0
     220:	a4 31       	cpi	r26, 0x14	; 20
     222:	b1 07       	cpc	r27, r17
     224:	d9 f7       	brne	.-10     	; 0x21c <__do_copy_data+0x10>

00000226 <__do_clear_bss>:
     226:	1e e3       	ldi	r17, 0x3E	; 62
     228:	a4 e1       	ldi	r26, 0x14	; 20
     22a:	b2 e2       	ldi	r27, 0x22	; 34
     22c:	01 c0       	rjmp	.+2      	; 0x230 <.do_clear_bss_start>

0000022e <.do_clear_bss_loop>:
     22e:	1d 92       	st	X+, r1

00000230 <.do_clear_bss_start>:
     230:	a8 3d       	cpi	r26, 0xD8	; 216
     232:	b1 07       	cpc	r27, r17
     234:	e1 f7       	brne	.-8      	; 0x22e <.do_clear_bss_loop>
     236:	0e 94 02 12 	call	0x2404	; 0x2404 <main>
     23a:	0c 94 73 2f 	jmp	0x5ee6	; 0x5ee6 <_exit>

0000023e <__bad_interrupt>:
     23e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000242 <adc_read_cal_byte>:

///http://www.bostonandroid.com/manuals/xmega-precision-adc-howto.html
uint8_t adc_read_cal_byte( uint8_t index ){
	uint8_t result;
	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
     242:	aa ec       	ldi	r26, 0xCA	; 202
     244:	b1 e0       	ldi	r27, 0x01	; 1
     246:	92 e0       	ldi	r25, 0x02	; 2
     248:	9c 93       	st	X, r25
	result = pgm_read_byte(index);
     24a:	e8 2f       	mov	r30, r24
     24c:	f0 e0       	ldi	r31, 0x00	; 0
     24e:	84 91       	lpm	r24, Z
	/* Clean up NVM Command register. */
	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
     250:	1c 92       	st	X, r1
	return( result );
}
     252:	08 95       	ret

00000254 <adc_bank_select>:
//#############################################################
//## ADCs -- OPERATION
//#############################################################

void adc_bank_select(uint8_t which){
	if(which % 2){
     254:	80 ff       	sbrs	r24, 0
     256:	10 c0       	rjmp	.+32     	; 0x278 <adc_bank_select+0x24>
		ADCA.CH0.MUXCTRL = B8(00000000); //CH0 converts from PA0
     258:	e0 e0       	ldi	r30, 0x00	; 0
     25a:	f2 e0       	ldi	r31, 0x02	; 2
     25c:	11 a2       	lds	r17, 0x91
		ADCA.CH1.MUXCTRL = B8(00001000); //CH1 converts from PA1
     25e:	28 e0       	ldi	r18, 0x08	; 8
     260:	21 a7       	lds	r18, 0x71
		ADCA.CH2.MUXCTRL = B8(00010000); //CH2 converts from PA2
     262:	90 e1       	ldi	r25, 0x10	; 16
     264:	91 ab       	sts	0x51, r25
		ADCA.CH3.MUXCTRL = B8(00011000); //CH3 converts from PA3
     266:	88 e1       	ldi	r24, 0x18	; 24
     268:	81 af       	sts	0x71, r24
		ADCB.CH0.MUXCTRL = B8(00000000); //CH0 converts from PB0
     26a:	e0 e4       	ldi	r30, 0x40	; 64
     26c:	f2 e0       	ldi	r31, 0x02	; 2
     26e:	11 a2       	lds	r17, 0x91
		ADCB.CH1.MUXCTRL = B8(00001000); //CH1 converts from PB1
     270:	21 a7       	lds	r18, 0x71
		ADCB.CH2.MUXCTRL = B8(00010000); //CH2 converts from PB2
     272:	91 ab       	sts	0x51, r25
		ADCB.CH3.MUXCTRL = B8(00011000); //CH3 converts from PB3
     274:	81 af       	sts	0x71, r24
     276:	08 95       	ret
	}
	else {
		ADCA.CH0.MUXCTRL = B8(00100000); //CH0 converts from PA4
     278:	e0 e0       	ldi	r30, 0x00	; 0
     27a:	f2 e0       	ldi	r31, 0x02	; 2
     27c:	30 e2       	ldi	r19, 0x20	; 32
     27e:	31 a3       	lds	r19, 0x51
		ADCA.CH1.MUXCTRL = B8(00101000); //CH1 converts from PA5
     280:	28 e2       	ldi	r18, 0x28	; 40
     282:	21 a7       	lds	r18, 0x71
		ADCA.CH2.MUXCTRL = B8(00110000); //CH2 converts from PA6
     284:	90 e3       	ldi	r25, 0x30	; 48
     286:	91 ab       	sts	0x51, r25
		ADCA.CH3.MUXCTRL = B8(00111000); //CH3 converts from PA7
     288:	88 e3       	ldi	r24, 0x38	; 56
     28a:	81 af       	sts	0x71, r24
		ADCB.CH0.MUXCTRL = B8(00100000); //CH0 converts from PB4
     28c:	e0 e4       	ldi	r30, 0x40	; 64
     28e:	f2 e0       	ldi	r31, 0x02	; 2
     290:	31 a3       	lds	r19, 0x51
		ADCB.CH1.MUXCTRL = B8(00101000); //CH1 converts from PB5
     292:	21 a7       	lds	r18, 0x71
		ADCB.CH2.MUXCTRL = B8(00110000); //CH2 converts from PB6
     294:	91 ab       	sts	0x51, r25
		ADCB.CH3.MUXCTRL = B8(00111000); //CH3 converts from PB7	
     296:	81 af       	sts	0x71, r24
     298:	08 95       	ret

0000029a <adc_convert>:
	}
}	

void adc_convert(){
	ADCA.CTRLA |= B8(00111100); //Start conversions on all four channels
     29a:	e0 e0       	ldi	r30, 0x00	; 0
     29c:	f2 e0       	ldi	r31, 0x02	; 2
     29e:	80 81       	ld	r24, Z
     2a0:	8c 63       	ori	r24, 0x3C	; 60
     2a2:	80 83       	st	Z, r24
	ADCB.CTRLA |= B8(00111100); //Start conversions on all four channels
     2a4:	e0 e4       	ldi	r30, 0x40	; 64
     2a6:	f2 e0       	ldi	r31, 0x02	; 2
     2a8:	80 81       	ld	r24, Z
     2aa:	8c 63       	ori	r24, 0x3C	; 60
     2ac:	80 83       	st	Z, r24
}
     2ae:	08 95       	ret

000002b0 <init_adc>:

//#############################################################
//## ADCs -- INITIALIZATION
//#############################################################

void init_adc(){	
     2b0:	cf 92       	push	r12
     2b2:	df 92       	push	r13
     2b4:	ef 92       	push	r14
     2b6:	ff 92       	push	r15
     2b8:	0f 93       	push	r16
     2ba:	1f 93       	push	r17
     2bc:	cf 93       	push	r28
     2be:	df 93       	push	r29
	//ADC A
	ADCA.CALL = adc_read_cal_byte( offsetof(NVM_PROD_SIGNATURES_t, ADCACAL0) );
     2c0:	80 e2       	ldi	r24, 0x20	; 32
     2c2:	0e 94 21 01 	call	0x242	; 0x242 <adc_read_cal_byte>
     2c6:	c0 e0       	ldi	r28, 0x00	; 0
     2c8:	d2 e0       	ldi	r29, 0x02	; 2
     2ca:	8c 87       	std	Y+12, r24	; 0x0c
	ADCA.CALH = adc_read_cal_byte( offsetof(NVM_PROD_SIGNATURES_t, ADCACAL1) );
     2cc:	81 e2       	ldi	r24, 0x21	; 33
     2ce:	0e 94 21 01 	call	0x242	; 0x242 <adc_read_cal_byte>
     2d2:	8d 87       	std	Y+13, r24	; 0x0d
	ADCA.PRESCALER = B8(00000111); //ADC clock = Peripheral clock / 512 (maximum resolution/accuracy)
     2d4:	0f 2e       	mov	r0, r31
     2d6:	f7 e0       	ldi	r31, 0x07	; 7
     2d8:	ef 2e       	mov	r14, r31
     2da:	f0 2d       	mov	r31, r0
     2dc:	ec 82       	std	Y+4, r14	; 0x04
	ADCA.REFCTRL = B8(00010011); //Use AVCC/1.6 = 2.063V as reference (highest allowed); Enable BandGap Reference and Temperature Sensor (internal)
     2de:	0f 2e       	mov	r0, r31
     2e0:	f3 e1       	ldi	r31, 0x13	; 19
     2e2:	df 2e       	mov	r13, r31
     2e4:	f0 2d       	mov	r31, r0
     2e6:	da 82       	std	Y+2, r13	; 0x02
	ADCA.CTRLB = B8(00000110); //12bit-left adjusted; One-shot conversion; unsigned mode;
     2e8:	0f 2e       	mov	r0, r31
     2ea:	f6 e0       	ldi	r31, 0x06	; 6
     2ec:	cf 2e       	mov	r12, r31
     2ee:	f0 2d       	mov	r31, r0
     2f0:	c9 82       	std	Y+1, r12	; 0x01
	ADCA.CTRLA = B8(00000001); //Enable ADC;
     2f2:	ff 24       	eor	r15, r15
     2f4:	f3 94       	inc	r15
     2f6:	f8 82       	st	Y, r15
	ADCA.CH0.CTRL = B8(00000001); //Single ended input mode; No gain
     2f8:	f8 a2       	lds	r31, 0x98
	ADCA.CH1.CTRL = B8(00000001); //Single ended input mode; No gain
     2fa:	f8 a6       	lds	r31, 0xb8
	ADCA.CH2.CTRL = B8(00000001); //Single ended input mode; No gain
     2fc:	f8 aa       	sts	0x98, r31
	ADCA.CH3.CTRL = B8(00000001); //Single ended input mode; No gain
     2fe:	f8 ae       	sts	0xb8, r31
	
	//ADC B
	ADCB.CALL = adc_read_cal_byte( offsetof(NVM_PROD_SIGNATURES_t, ADCBCAL0) );
     300:	84 e2       	ldi	r24, 0x24	; 36
     302:	0e 94 21 01 	call	0x242	; 0x242 <adc_read_cal_byte>
     306:	00 e4       	ldi	r16, 0x40	; 64
     308:	12 e0       	ldi	r17, 0x02	; 2
     30a:	f8 01       	movw	r30, r16
     30c:	84 87       	std	Z+12, r24	; 0x0c
	ADCB.CALH = adc_read_cal_byte( offsetof(NVM_PROD_SIGNATURES_t, ADCBCAL1) );
     30e:	85 e2       	ldi	r24, 0x25	; 37
     310:	0e 94 21 01 	call	0x242	; 0x242 <adc_read_cal_byte>
     314:	f8 01       	movw	r30, r16
     316:	85 87       	std	Z+13, r24	; 0x0d
	ADCB.PRESCALER = B8(00000111); //ADC clock = Peripheral clock / 512 (maximum resolution/accuracy)
     318:	e4 82       	std	Z+4, r14	; 0x04
	ADCB.REFCTRL = B8(00010011); //Use AVCC/1.6 = 2.063V as reference (highest allowed); Enable BandGap Reference and Temperature Sensor (internal)
     31a:	d2 82       	std	Z+2, r13	; 0x02
	ADCB.CTRLB = B8(00000110); //12bit-left adjusted; One-shot conversion; unsigned mode;
     31c:	c1 82       	std	Z+1, r12	; 0x01
	ADCB.CTRLA = B8(00000001); //Enable ADC;
     31e:	f0 82       	st	Z, r15
	ADCB.CH0.CTRL = B8(00000001); //Single ended input mode; No gain
     320:	f0 a2       	lds	r31, 0x90
	ADCB.CH1.CTRL = B8(00000001); //Single ended input mode; No gain
     322:	f0 a6       	lds	r31, 0xb0
	ADCB.CH2.CTRL = B8(00000001); //Single ended input mode; No gain
     324:	f0 aa       	sts	0x90, r31
	ADCB.CH3.CTRL = B8(00000001); //Single ended input mode; No gain
     326:	f0 ae       	sts	0xb0, r31
	
	//STATE
	adc_bank = 0;
     328:	10 92 86 26 	sts	0x2686, r1
	adc_head = 0;
     32c:	10 92 85 26 	sts	0x2685, r1
	adc_bank_select(adc_bank);
     330:	80 e0       	ldi	r24, 0x00	; 0
     332:	0e 94 2a 01 	call	0x254	; 0x254 <adc_bank_select>
	
	//FLUSH
	ADCA.CTRLA |= 0x02;
     336:	88 81       	ld	r24, Y
     338:	82 60       	ori	r24, 0x02	; 2
     33a:	88 83       	st	Y, r24
	ADCB.CTRLB |= 0x02;
     33c:	f8 01       	movw	r30, r16
     33e:	81 81       	ldd	r24, Z+1	; 0x01
     340:	82 60       	ori	r24, 0x02	; 2
     342:	81 83       	std	Z+1, r24	; 0x01
	adc_convert();
     344:	0e 94 4d 01 	call	0x29a	; 0x29a <adc_convert>
}
     348:	df 91       	pop	r29
     34a:	cf 91       	pop	r28
     34c:	1f 91       	pop	r17
     34e:	0f 91       	pop	r16
     350:	ff 90       	pop	r15
     352:	ef 90       	pop	r14
     354:	df 90       	pop	r13
     356:	cf 90       	pop	r12
     358:	08 95       	ret

0000035a <adc_ftoa>:
//#############################################################
//## ADCs -- DATA PROCESSING
//#############################################################

//Float-to-ASCII: uses scaler to shift position, does not include fractional component, null-terminates result, handles pos & neg numbers
void adc_ftoa(float x, uint16_t scaler, char* result){
     35a:	cf 92       	push	r12
     35c:	df 92       	push	r13
     35e:	ef 92       	push	r14
     360:	ff 92       	push	r15
     362:	cf 93       	push	r28
     364:	df 93       	push	r29
     366:	6b 01       	movw	r12, r22
     368:	7c 01       	movw	r14, r24
     36a:	e9 01       	movw	r28, r18
	x = x * scaler;
     36c:	ba 01       	movw	r22, r20
     36e:	80 e0       	ldi	r24, 0x00	; 0
     370:	90 e0       	ldi	r25, 0x00	; 0
     372:	0e 94 d2 2d 	call	0x5ba4	; 0x5ba4 <__floatunsisf>
     376:	a7 01       	movw	r20, r14
     378:	96 01       	movw	r18, r12
     37a:	0e 94 84 2e 	call	0x5d08	; 0x5d08 <__mulsf3>
	utoa((int)x, result, 10);
     37e:	0e 94 a1 2d 	call	0x5b42	; 0x5b42 <__fixsfsi>
     382:	dc 01       	movw	r26, r24
     384:	cb 01       	movw	r24, r22
     386:	be 01       	movw	r22, r28
     388:	4a e0       	ldi	r20, 0x0A	; 10
     38a:	50 e0       	ldi	r21, 0x00	; 0
     38c:	0e 94 e7 2e 	call	0x5dce	; 0x5dce <utoa>
}
     390:	df 91       	pop	r29
     392:	cf 91       	pop	r28
     394:	ff 90       	pop	r15
     396:	ef 90       	pop	r14
     398:	df 90       	pop	r13
     39a:	cf 90       	pop	r12
     39c:	08 95       	ret

0000039e <adc_data>:

///result = char[6] = 15324\0 --> 15.324 V or A (don't forget string terminator byte)
void adc_data(uint8_t channel_num, uint8_t measurement_type, char* result){
     39e:	ef 92       	push	r14
     3a0:	ff 92       	push	r15
     3a2:	0f 93       	push	r16
     3a4:	1f 93       	push	r17
     3a6:	cf 93       	push	r28
     3a8:	df 93       	push	r29
     3aa:	7a 01       	movw	r14, r20
		uint16_t summation = 0;
		float voltage;
		
	//Average
		for (uint8_t i=0;i<ADC_NUM_CONVERSIONS;i++){
			summation += adc_results[channel_num][i];
     3ac:	a8 2f       	mov	r26, r24
     3ae:	b0 e0       	ldi	r27, 0x00	; 0
	x = x * scaler;
	utoa((int)x, result, 10);
}

///result = char[6] = 15324\0 --> 15.324 V or A (don't forget string terminator byte)
void adc_data(uint8_t channel_num, uint8_t measurement_type, char* result){
     3b0:	ad 01       	movw	r20, r26
     3b2:	42 95       	swap	r20
     3b4:	52 95       	swap	r21
     3b6:	50 7f       	andi	r21, 0xF0	; 240
     3b8:	54 27       	eor	r21, r20
     3ba:	40 7f       	andi	r20, 0xF0	; 240
     3bc:	54 27       	eor	r21, r20
     3be:	fa 01       	movw	r30, r20
     3c0:	eb 57       	subi	r30, 0x7B	; 123
     3c2:	fa 4d       	sbci	r31, 0xDA	; 218
     3c4:	4b 56       	subi	r20, 0x6B	; 107
     3c6:	5a 4d       	sbci	r21, 0xDA	; 218
	uint16_t current_offset;
	
	//Init
		uint16_t summation = 0;
     3c8:	80 e0       	ldi	r24, 0x00	; 0
     3ca:	90 e0       	ldi	r25, 0x00	; 0
		float voltage;
		
	//Average
		for (uint8_t i=0;i<ADC_NUM_CONVERSIONS;i++){
			summation += adc_results[channel_num][i];
     3cc:	21 91       	ld	r18, Z+
     3ce:	31 91       	ld	r19, Z+
     3d0:	82 0f       	add	r24, r18
     3d2:	93 1f       	adc	r25, r19
	//Init
		uint16_t summation = 0;
		float voltage;
		
	//Average
		for (uint8_t i=0;i<ADC_NUM_CONVERSIONS;i++){
     3d4:	e4 17       	cp	r30, r20
     3d6:	f5 07       	cpc	r31, r21
     3d8:	c9 f7       	brne	.-14     	; 0x3cc <adc_data+0x2e>
			summation += adc_results[channel_num][i];
		}
		summation = summation >> 3; //divide by 8
     3da:	96 95       	lsr	r25
     3dc:	87 95       	ror	r24
     3de:	96 95       	lsr	r25
     3e0:	87 95       	ror	r24
     3e2:	96 95       	lsr	r25
     3e4:	87 95       	ror	r24
		
	//Offset
		switch (measurement_type){
     3e6:	68 36       	cpi	r22, 0x68	; 104
     3e8:	51 f0       	breq	.+20     	; 0x3fe <adc_data+0x60>
     3ea:	6a 36       	cpi	r22, 0x6A	; 106
     3ec:	71 f0       	breq	.+28     	; 0x40a <adc_data+0x6c>
     3ee:	67 36       	cpi	r22, 0x67	; 103
     3f0:	e1 f4       	brne	.+56     	; 0x42a <adc_data+0x8c>
			case VOLTAGE_POS:
				if(summation<CODE_ZERO){summation = 0;}
     3f2:	81 3a       	cpi	r24, 0xA1	; 161
     3f4:	91 05       	cpc	r25, r1
     3f6:	10 f1       	brcs	.+68     	; 0x43c <adc_data+0x9e>
				else{summation -= CODE_ZERO;}
     3f8:	81 5a       	subi	r24, 0xA1	; 161
     3fa:	90 40       	sbci	r25, 0x00	; 0
     3fc:	21 c0       	rjmp	.+66     	; 0x440 <adc_data+0xa2>
				break;
			case VOLTAGE_NEG:
				if(summation<VOLTAGE_NEG_OFFSET){summation = 0;}
     3fe:	84 3b       	cpi	r24, 0xB4	; 180
     400:	91 05       	cpc	r25, r1
     402:	88 f0       	brcs	.+34     	; 0x426 <adc_data+0x88>
				else{summation -= VOLTAGE_NEG_OFFSET;}
     404:	84 5b       	subi	r24, 0xB4	; 180
     406:	90 40       	sbci	r25, 0x00	; 0
     408:	32 c0       	rjmp	.+100    	; 0x46e <adc_data+0xd0>
				break;
			case CURRENT_HI_RES:
				current_offset = adc_current_offset[(channel_num-1)>>1];
     40a:	11 97       	sbiw	r26, 0x01	; 1
     40c:	ae 7f       	andi	r26, 0xFE	; 254
     40e:	a6 5e       	subi	r26, 0xE6	; 230
     410:	bd 4d       	sbci	r27, 0xDD	; 221
     412:	2d 91       	ld	r18, X+
     414:	3c 91       	ld	r19, X
     416:	11 97       	sbiw	r26, 0x01	; 1
				if(summation<current_offset){summation=0;}
     418:	82 17       	cp	r24, r18
     41a:	93 07       	cpc	r25, r19
     41c:	08 f4       	brcc	.+2      	; 0x420 <adc_data+0x82>
     41e:	5a c0       	rjmp	.+180    	; 0x4d4 <adc_data+0x136>
				else{summation -= current_offset;}
     420:	82 1b       	sub	r24, r18
     422:	93 0b       	sbc	r25, r19
     424:	59 c0       	rjmp	.+178    	; 0x4d8 <adc_data+0x13a>
			case VOLTAGE_POS:
				if(summation<CODE_ZERO){summation = 0;}
				else{summation -= CODE_ZERO;}
				break;
			case VOLTAGE_NEG:
				if(summation<VOLTAGE_NEG_OFFSET){summation = 0;}
     426:	80 e0       	ldi	r24, 0x00	; 0
     428:	90 e0       	ldi	r25, 0x00	; 0
				//TODO: add scaler for the low-res mode
				break;
		}
		
	//Format & Return
		switch (measurement_type){
     42a:	68 36       	cpi	r22, 0x68	; 104
     42c:	01 f1       	breq	.+64     	; 0x46e <adc_data+0xd0>
     42e:	6a 36       	cpi	r22, 0x6A	; 106
     430:	09 f4       	brne	.+2      	; 0x434 <adc_data+0x96>
     432:	52 c0       	rjmp	.+164    	; 0x4d8 <adc_data+0x13a>
     434:	67 36       	cpi	r22, 0x67	; 103
     436:	09 f0       	breq	.+2      	; 0x43a <adc_data+0x9c>
     438:	5f c0       	rjmp	.+190    	; 0x4f8 <adc_data+0x15a>
     43a:	02 c0       	rjmp	.+4      	; 0x440 <adc_data+0xa2>
		summation = summation >> 3; //divide by 8
		
	//Offset
		switch (measurement_type){
			case VOLTAGE_POS:
				if(summation<CODE_ZERO){summation = 0;}
     43c:	80 e0       	ldi	r24, 0x00	; 0
     43e:	90 e0       	ldi	r25, 0x00	; 0
		}
		
	//Format & Return
		switch (measurement_type){
			case VOLTAGE_POS:
				voltage = (float)summation * CODE_TO_VOLTS * VOLTAGE_DESCALE_FACTOR;
     440:	bc 01       	movw	r22, r24
     442:	80 e0       	ldi	r24, 0x00	; 0
     444:	90 e0       	ldi	r25, 0x00	; 0
     446:	0e 94 d2 2d 	call	0x5ba4	; 0x5ba4 <__floatunsisf>
     44a:	27 e9       	ldi	r18, 0x97	; 151
     44c:	38 ea       	ldi	r19, 0xA8	; 168
     44e:	4f ef       	ldi	r20, 0xFF	; 255
     450:	59 e3       	ldi	r21, 0x39	; 57
     452:	0e 94 84 2e 	call	0x5d08	; 0x5d08 <__mulsf3>
     456:	25 e8       	ldi	r18, 0x85	; 133
     458:	3b ee       	ldi	r19, 0xEB	; 235
     45a:	41 e5       	ldi	r20, 0x51	; 81
     45c:	51 e4       	ldi	r21, 0x41	; 65
     45e:	0e 94 84 2e 	call	0x5d08	; 0x5d08 <__mulsf3>
				adc_ftoa(voltage, 100, result);
     462:	44 e6       	ldi	r20, 0x64	; 100
     464:	50 e0       	ldi	r21, 0x00	; 0
     466:	97 01       	movw	r18, r14
     468:	0e 94 ad 01 	call	0x35a	; 0x35a <adc_ftoa>
				return;
     46c:	45 c0       	rjmp	.+138    	; 0x4f8 <adc_data+0x15a>
			case VOLTAGE_NEG:
				voltage = (float)summation * CODE_TO_VOLTS * VOLTAGE_DESCALE_FACTOR;
     46e:	bc 01       	movw	r22, r24
     470:	80 e0       	ldi	r24, 0x00	; 0
     472:	90 e0       	ldi	r25, 0x00	; 0
     474:	0e 94 d2 2d 	call	0x5ba4	; 0x5ba4 <__floatunsisf>
     478:	27 e9       	ldi	r18, 0x97	; 151
     47a:	38 ea       	ldi	r19, 0xA8	; 168
     47c:	4f ef       	ldi	r20, 0xFF	; 255
     47e:	59 e3       	ldi	r21, 0x39	; 57
     480:	0e 94 84 2e 	call	0x5d08	; 0x5d08 <__mulsf3>
     484:	25 e8       	ldi	r18, 0x85	; 133
     486:	3b ee       	ldi	r19, 0xEB	; 235
     488:	41 e5       	ldi	r20, 0x51	; 81
     48a:	51 e4       	ldi	r21, 0x41	; 65
     48c:	0e 94 84 2e 	call	0x5d08	; 0x5d08 <__mulsf3>
     490:	06 2f       	mov	r16, r22
     492:	17 2f       	mov	r17, r23
     494:	d8 2f       	mov	r29, r24
     496:	c9 2f       	mov	r28, r25
				if (voltage < 2.2) voltage = 0; //blank anything inside the amp offset (can't actually offset this because it adds huge error to the linear fit)
     498:	86 2f       	mov	r24, r22
     49a:	91 2f       	mov	r25, r17
     49c:	ad 2f       	mov	r26, r29
     49e:	bc 2f       	mov	r27, r28
     4a0:	bc 01       	movw	r22, r24
     4a2:	cd 01       	movw	r24, r26
     4a4:	2d ec       	ldi	r18, 0xCD	; 205
     4a6:	3c ec       	ldi	r19, 0xCC	; 204
     4a8:	4c e0       	ldi	r20, 0x0C	; 12
     4aa:	50 e4       	ldi	r21, 0x40	; 64
     4ac:	0e 94 35 2d 	call	0x5a6a	; 0x5a6a <__cmpsf2>
     4b0:	88 23       	and	r24, r24
     4b2:	24 f4       	brge	.+8      	; 0x4bc <adc_data+0x11e>
     4b4:	00 e0       	ldi	r16, 0x00	; 0
     4b6:	10 e0       	ldi	r17, 0x00	; 0
     4b8:	d0 e0       	ldi	r29, 0x00	; 0
     4ba:	c0 e0       	ldi	r28, 0x00	; 0
				adc_ftoa(voltage, 100, result);
     4bc:	80 2f       	mov	r24, r16
     4be:	91 2f       	mov	r25, r17
     4c0:	ad 2f       	mov	r26, r29
     4c2:	bc 2f       	mov	r27, r28
     4c4:	bc 01       	movw	r22, r24
     4c6:	cd 01       	movw	r24, r26
     4c8:	44 e6       	ldi	r20, 0x64	; 100
     4ca:	50 e0       	ldi	r21, 0x00	; 0
     4cc:	97 01       	movw	r18, r14
     4ce:	0e 94 ad 01 	call	0x35a	; 0x35a <adc_ftoa>
				return;
     4d2:	12 c0       	rjmp	.+36     	; 0x4f8 <adc_data+0x15a>
				if(summation<VOLTAGE_NEG_OFFSET){summation = 0;}
				else{summation -= VOLTAGE_NEG_OFFSET;}
				break;
			case CURRENT_HI_RES:
				current_offset = adc_current_offset[(channel_num-1)>>1];
				if(summation<current_offset){summation=0;}
     4d4:	80 e0       	ldi	r24, 0x00	; 0
     4d6:	90 e0       	ldi	r25, 0x00	; 0
				voltage = (float)summation * CODE_TO_VOLTS * VOLTAGE_DESCALE_FACTOR;
				if (voltage < 2.2) voltage = 0; //blank anything inside the amp offset (can't actually offset this because it adds huge error to the linear fit)
				adc_ftoa(voltage, 100, result);
				return;
			case CURRENT_HI_RES:
				adc_ftoa((float)summation * CODE_TO_AMPS, 1000, result);
     4d8:	bc 01       	movw	r22, r24
     4da:	80 e0       	ldi	r24, 0x00	; 0
     4dc:	90 e0       	ldi	r25, 0x00	; 0
     4de:	0e 94 d2 2d 	call	0x5ba4	; 0x5ba4 <__floatunsisf>
     4e2:	23 e7       	ldi	r18, 0x73	; 115
     4e4:	30 e3       	ldi	r19, 0x30	; 48
     4e6:	4b e1       	ldi	r20, 0x1B	; 27
     4e8:	5a e3       	ldi	r21, 0x3A	; 58
     4ea:	0e 94 84 2e 	call	0x5d08	; 0x5d08 <__mulsf3>
     4ee:	48 ee       	ldi	r20, 0xE8	; 232
     4f0:	53 e0       	ldi	r21, 0x03	; 3
     4f2:	97 01       	movw	r18, r14
     4f4:	0e 94 ad 01 	call	0x35a	; 0x35a <adc_ftoa>
				return;
			case CURRENT_LO_RES:
				//TODO: add scaler for the low-res mode
				return;
		}
}
     4f8:	df 91       	pop	r29
     4fa:	cf 91       	pop	r28
     4fc:	1f 91       	pop	r17
     4fe:	0f 91       	pop	r16
     500:	ff 90       	pop	r15
     502:	ef 90       	pop	r14
     504:	08 95       	ret

00000506 <adc_max>:

//Returns the maximum value seen in the buffer for the specified channel
uint16_t adc_max(uint8_t channel_num){
	uint16_t maxValue = 0;
	for(uint8_t i=0;i<ADC_NUM_CONVERSIONS;i++){
		if (adc_results[channel_num][i]>maxValue){maxValue=adc_results[channel_num][i];};
     506:	48 2f       	mov	r20, r24
     508:	50 e0       	ldi	r21, 0x00	; 0
				return;
		}
}

//Returns the maximum value seen in the buffer for the specified channel
uint16_t adc_max(uint8_t channel_num){
     50a:	42 95       	swap	r20
     50c:	52 95       	swap	r21
     50e:	50 7f       	andi	r21, 0xF0	; 240
     510:	54 27       	eor	r21, r20
     512:	40 7f       	andi	r20, 0xF0	; 240
     514:	54 27       	eor	r21, r20
     516:	fa 01       	movw	r30, r20
     518:	eb 57       	subi	r30, 0x7B	; 123
     51a:	fa 4d       	sbci	r31, 0xDA	; 218
     51c:	4b 56       	subi	r20, 0x6B	; 107
     51e:	5a 4d       	sbci	r21, 0xDA	; 218
	uint16_t maxValue = 0;
     520:	20 e0       	ldi	r18, 0x00	; 0
     522:	30 e0       	ldi	r19, 0x00	; 0
	for(uint8_t i=0;i<ADC_NUM_CONVERSIONS;i++){
		if (adc_results[channel_num][i]>maxValue){maxValue=adc_results[channel_num][i];};
     524:	81 91       	ld	r24, Z+
     526:	91 91       	ld	r25, Z+
     528:	28 17       	cp	r18, r24
     52a:	39 07       	cpc	r19, r25
     52c:	08 f4       	brcc	.+2      	; 0x530 <adc_max+0x2a>
     52e:	9c 01       	movw	r18, r24
}

//Returns the maximum value seen in the buffer for the specified channel
uint16_t adc_max(uint8_t channel_num){
	uint16_t maxValue = 0;
	for(uint8_t i=0;i<ADC_NUM_CONVERSIONS;i++){
     530:	e4 17       	cp	r30, r20
     532:	f5 07       	cpc	r31, r21
     534:	b9 f7       	brne	.-18     	; 0x524 <adc_max+0x1e>
		if (adc_results[channel_num][i]>maxValue){maxValue=adc_results[channel_num][i];};
	}		
	return maxValue;
}
     536:	82 2f       	mov	r24, r18
     538:	93 2f       	mov	r25, r19
     53a:	08 95       	ret

0000053c <adjust>:
//## ADCs -- SERVICE
//#############################################################

uint16_t adjust(uint16_t theValue){
	uint16_t working = theValue;
	working = theValue >> 4;
     53c:	92 95       	swap	r25
     53e:	82 95       	swap	r24
     540:	8f 70       	andi	r24, 0x0F	; 15
     542:	89 27       	eor	r24, r25
     544:	9f 70       	andi	r25, 0x0F	; 15
     546:	89 27       	eor	r24, r25
	if (working < CODE_ZERO){working = CODE_ZERO;}; //clip on overflow
     548:	81 3a       	cpi	r24, 0xA1	; 161
     54a:	91 05       	cpc	r25, r1
     54c:	10 f4       	brcc	.+4      	; 0x552 <adjust+0x16>
     54e:	81 ea       	ldi	r24, 0xA1	; 161
     550:	90 e0       	ldi	r25, 0x00	; 0
	return working;
}
     552:	08 95       	ret

00000554 <service_adc>:

// Implemented with polling for conversion complete
void service_adc(){	
     554:	df 92       	push	r13
     556:	ef 92       	push	r14
     558:	ff 92       	push	r15
     55a:	0f 93       	push	r16
     55c:	1f 93       	push	r17
     55e:	cf 93       	push	r28
     560:	df 93       	push	r29
	//Did all conversions complete?
	if ((ADCA.INTFLAGS == 0x0F) && (ADCB.INTFLAGS == 0x0F)){
     562:	e0 e0       	ldi	r30, 0x00	; 0
     564:	f2 e0       	ldi	r31, 0x02	; 2
     566:	86 81       	ldd	r24, Z+6	; 0x06
     568:	8f 30       	cpi	r24, 0x0F	; 15
     56a:	09 f0       	breq	.+2      	; 0x56e <service_adc+0x1a>
     56c:	16 c1       	rjmp	.+556    	; 0x79a <service_adc+0x246>
     56e:	e0 e4       	ldi	r30, 0x40	; 64
     570:	f2 e0       	ldi	r31, 0x02	; 2
     572:	86 81       	ldd	r24, Z+6	; 0x06
     574:	8f 30       	cpi	r24, 0x0F	; 15
     576:	09 f0       	breq	.+2      	; 0x57a <service_adc+0x26>
     578:	10 c1       	rjmp	.+544    	; 0x79a <service_adc+0x246>
		//Write Results
		if(adc_bank % 2){
     57a:	80 91 86 26 	lds	r24, 0x2686
     57e:	80 ff       	sbrs	r24, 0
     580:	71 c0       	rjmp	.+226    	; 0x664 <service_adc+0x110>
			//lower bank
			adc_results[0][adc_head] = adjust(ADCA.CH0RES); //PSU Channel A
     582:	00 91 85 26 	lds	r16, 0x2685
     586:	10 e0       	ldi	r17, 0x00	; 0
     588:	c0 e0       	ldi	r28, 0x00	; 0
     58a:	d2 e0       	ldi	r29, 0x02	; 2
     58c:	88 89       	ldd	r24, Y+16	; 0x10
     58e:	99 89       	ldd	r25, Y+17	; 0x11
     590:	0e 94 9e 02 	call	0x53c	; 0x53c <adjust>
     594:	0f 2e       	mov	r0, r31
     596:	f5 e8       	ldi	r31, 0x85	; 133
     598:	ef 2e       	mov	r14, r31
     59a:	f5 e2       	ldi	r31, 0x25	; 37
     59c:	ff 2e       	mov	r15, r31
     59e:	f0 2d       	mov	r31, r0
     5a0:	f8 01       	movw	r30, r16
     5a2:	ee 0f       	add	r30, r30
     5a4:	ff 1f       	adc	r31, r31
     5a6:	ee 0d       	add	r30, r14
     5a8:	ff 1d       	adc	r31, r15
     5aa:	80 83       	st	Z, r24
     5ac:	91 83       	std	Z+1, r25	; 0x01
			adc_results[1][adc_head] = adjust(ADCA.CH1RES);
     5ae:	8a 89       	ldd	r24, Y+18	; 0x12
     5b0:	9b 89       	ldd	r25, Y+19	; 0x13
     5b2:	0e 94 9e 02 	call	0x53c	; 0x53c <adjust>
     5b6:	f8 01       	movw	r30, r16
     5b8:	38 96       	adiw	r30, 0x08	; 8
     5ba:	ee 0f       	add	r30, r30
     5bc:	ff 1f       	adc	r31, r31
     5be:	ee 0d       	add	r30, r14
     5c0:	ff 1d       	adc	r31, r15
     5c2:	80 83       	st	Z, r24
     5c4:	91 83       	std	Z+1, r25	; 0x01
			adc_results[2][adc_head] = adjust(ADCA.CH2RES);
     5c6:	8c 89       	ldd	r24, Y+20	; 0x14
     5c8:	9d 89       	ldd	r25, Y+21	; 0x15
     5ca:	0e 94 9e 02 	call	0x53c	; 0x53c <adjust>
     5ce:	f8 01       	movw	r30, r16
     5d0:	70 96       	adiw	r30, 0x10	; 16
     5d2:	ee 0f       	add	r30, r30
     5d4:	ff 1f       	adc	r31, r31
     5d6:	ee 0d       	add	r30, r14
     5d8:	ff 1d       	adc	r31, r15
     5da:	80 83       	st	Z, r24
     5dc:	91 83       	std	Z+1, r25	; 0x01
			adc_results[3][adc_head] = adjust(ADCA.CH3RES);
     5de:	8e 89       	ldd	r24, Y+22	; 0x16
     5e0:	9f 89       	ldd	r25, Y+23	; 0x17
     5e2:	0e 94 9e 02 	call	0x53c	; 0x53c <adjust>
     5e6:	f8 01       	movw	r30, r16
     5e8:	78 96       	adiw	r30, 0x18	; 24
     5ea:	ee 0f       	add	r30, r30
     5ec:	ff 1f       	adc	r31, r31
     5ee:	ee 0d       	add	r30, r14
     5f0:	ff 1d       	adc	r31, r15
     5f2:	80 83       	st	Z, r24
     5f4:	91 83       	std	Z+1, r25	; 0x01
			adc_results[8][adc_head] = adjust(ADCB.CH0.RES); //PSU Channel C
     5f6:	c0 e4       	ldi	r28, 0x40	; 64
     5f8:	d2 e0       	ldi	r29, 0x02	; 2
     5fa:	8c a1       	lds	r24, 0x4c
     5fc:	9d a1       	lds	r25, 0x4d
     5fe:	0e 94 9e 02 	call	0x53c	; 0x53c <adjust>
     602:	f8 01       	movw	r30, r16
     604:	e0 5c       	subi	r30, 0xC0	; 192
     606:	ff 4f       	sbci	r31, 0xFF	; 255
     608:	ee 0f       	add	r30, r30
     60a:	ff 1f       	adc	r31, r31
     60c:	ee 0d       	add	r30, r14
     60e:	ff 1d       	adc	r31, r15
     610:	80 83       	st	Z, r24
     612:	91 83       	std	Z+1, r25	; 0x01
			adc_results[9][adc_head] = adjust(ADCB.CH1.RES);
     614:	8c a5       	lds	r24, 0x6c
     616:	9d a5       	lds	r25, 0x6d
     618:	0e 94 9e 02 	call	0x53c	; 0x53c <adjust>
     61c:	f8 01       	movw	r30, r16
     61e:	e8 5b       	subi	r30, 0xB8	; 184
     620:	ff 4f       	sbci	r31, 0xFF	; 255
     622:	ee 0f       	add	r30, r30
     624:	ff 1f       	adc	r31, r31
     626:	ee 0d       	add	r30, r14
     628:	ff 1d       	adc	r31, r15
     62a:	80 83       	st	Z, r24
     62c:	91 83       	std	Z+1, r25	; 0x01
			adc_results[10][adc_head] = adjust(ADCB.CH2.RES);
     62e:	8c a9       	sts	0x4c, r24
     630:	9d a9       	sts	0x4d, r25
     632:	0e 94 9e 02 	call	0x53c	; 0x53c <adjust>
     636:	f8 01       	movw	r30, r16
     638:	e0 5b       	subi	r30, 0xB0	; 176
     63a:	ff 4f       	sbci	r31, 0xFF	; 255
     63c:	ee 0f       	add	r30, r30
     63e:	ff 1f       	adc	r31, r31
     640:	ee 0d       	add	r30, r14
     642:	ff 1d       	adc	r31, r15
     644:	80 83       	st	Z, r24
     646:	91 83       	std	Z+1, r25	; 0x01
			adc_results[11][adc_head] = adjust(ADCB.CH3.RES);
     648:	8c ad       	sts	0x6c, r24
     64a:	9d ad       	sts	0x6d, r25
     64c:	0e 94 9e 02 	call	0x53c	; 0x53c <adjust>
     650:	08 5a       	subi	r16, 0xA8	; 168
     652:	1f 4f       	sbci	r17, 0xFF	; 255
     654:	00 0f       	add	r16, r16
     656:	11 1f       	adc	r17, r17
     658:	e0 0e       	add	r14, r16
     65a:	f1 1e       	adc	r15, r17
     65c:	f7 01       	movw	r30, r14
     65e:	80 83       	st	Z, r24
     660:	91 83       	std	Z+1, r25	; 0x01
     662:	7a c0       	rjmp	.+244    	; 0x758 <service_adc+0x204>
		}
		else {
			//upper bank
			adc_results[4][adc_head] = adjust(ADCA.CH0.RES); //PSU Channel B
     664:	d0 90 85 26 	lds	r13, 0x2685
     668:	0d 2d       	mov	r16, r13
     66a:	10 e0       	ldi	r17, 0x00	; 0
     66c:	c0 e0       	ldi	r28, 0x00	; 0
     66e:	d2 e0       	ldi	r29, 0x02	; 2
     670:	8c a1       	lds	r24, 0x4c
     672:	9d a1       	lds	r25, 0x4d
     674:	0e 94 9e 02 	call	0x53c	; 0x53c <adjust>
     678:	f8 01       	movw	r30, r16
     67a:	b0 96       	adiw	r30, 0x20	; 32
     67c:	0f 2e       	mov	r0, r31
     67e:	f5 e8       	ldi	r31, 0x85	; 133
     680:	ef 2e       	mov	r14, r31
     682:	f5 e2       	ldi	r31, 0x25	; 37
     684:	ff 2e       	mov	r15, r31
     686:	f0 2d       	mov	r31, r0
     688:	ee 0f       	add	r30, r30
     68a:	ff 1f       	adc	r31, r31
     68c:	ee 0d       	add	r30, r14
     68e:	ff 1d       	adc	r31, r15
     690:	80 83       	st	Z, r24
     692:	91 83       	std	Z+1, r25	; 0x01
			adc_results[5][adc_head] = adjust(ADCA.CH1.RES);
     694:	8c a5       	lds	r24, 0x6c
     696:	9d a5       	lds	r25, 0x6d
     698:	0e 94 9e 02 	call	0x53c	; 0x53c <adjust>
     69c:	f8 01       	movw	r30, r16
     69e:	b8 96       	adiw	r30, 0x28	; 40
     6a0:	ee 0f       	add	r30, r30
     6a2:	ff 1f       	adc	r31, r31
     6a4:	ee 0d       	add	r30, r14
     6a6:	ff 1d       	adc	r31, r15
     6a8:	80 83       	st	Z, r24
     6aa:	91 83       	std	Z+1, r25	; 0x01
			adc_results[6][adc_head] = adjust(ADCA.CH2.RES);
     6ac:	8c a9       	sts	0x4c, r24
     6ae:	9d a9       	sts	0x4d, r25
     6b0:	0e 94 9e 02 	call	0x53c	; 0x53c <adjust>
     6b4:	f8 01       	movw	r30, r16
     6b6:	f0 96       	adiw	r30, 0x30	; 48
     6b8:	ee 0f       	add	r30, r30
     6ba:	ff 1f       	adc	r31, r31
     6bc:	ee 0d       	add	r30, r14
     6be:	ff 1d       	adc	r31, r15
     6c0:	80 83       	st	Z, r24
     6c2:	91 83       	std	Z+1, r25	; 0x01
			adc_results[7][adc_head] = adjust(ADCA.CH3.RES);
     6c4:	8c ad       	sts	0x6c, r24
     6c6:	9d ad       	sts	0x6d, r25
     6c8:	0e 94 9e 02 	call	0x53c	; 0x53c <adjust>
     6cc:	f8 01       	movw	r30, r16
     6ce:	f8 96       	adiw	r30, 0x38	; 56
     6d0:	ee 0f       	add	r30, r30
     6d2:	ff 1f       	adc	r31, r31
     6d4:	ee 0d       	add	r30, r14
     6d6:	ff 1d       	adc	r31, r15
     6d8:	80 83       	st	Z, r24
     6da:	91 83       	std	Z+1, r25	; 0x01
			adc_results[12][adc_head] = adjust(ADCB.CH0.RES); //PSU Channel D
     6dc:	c0 e4       	ldi	r28, 0x40	; 64
     6de:	d2 e0       	ldi	r29, 0x02	; 2
     6e0:	8c a1       	lds	r24, 0x4c
     6e2:	9d a1       	lds	r25, 0x4d
     6e4:	0e 94 9e 02 	call	0x53c	; 0x53c <adjust>
     6e8:	f8 01       	movw	r30, r16
     6ea:	e0 5a       	subi	r30, 0xA0	; 160
     6ec:	ff 4f       	sbci	r31, 0xFF	; 255
     6ee:	ee 0f       	add	r30, r30
     6f0:	ff 1f       	adc	r31, r31
     6f2:	ee 0d       	add	r30, r14
     6f4:	ff 1d       	adc	r31, r15
     6f6:	80 83       	st	Z, r24
     6f8:	91 83       	std	Z+1, r25	; 0x01
			adc_results[13][adc_head] = adjust(ADCB.CH1RES);
     6fa:	8a 89       	ldd	r24, Y+18	; 0x12
     6fc:	9b 89       	ldd	r25, Y+19	; 0x13
     6fe:	0e 94 9e 02 	call	0x53c	; 0x53c <adjust>
     702:	f8 01       	movw	r30, r16
     704:	e8 59       	subi	r30, 0x98	; 152
     706:	ff 4f       	sbci	r31, 0xFF	; 255
     708:	ee 0f       	add	r30, r30
     70a:	ff 1f       	adc	r31, r31
     70c:	ee 0d       	add	r30, r14
     70e:	ff 1d       	adc	r31, r15
     710:	80 83       	st	Z, r24
     712:	91 83       	std	Z+1, r25	; 0x01
			adc_results[14][adc_head] = adjust(ADCB.CH2RES);
     714:	8c 89       	ldd	r24, Y+20	; 0x14
     716:	9d 89       	ldd	r25, Y+21	; 0x15
     718:	0e 94 9e 02 	call	0x53c	; 0x53c <adjust>
     71c:	f8 01       	movw	r30, r16
     71e:	e0 59       	subi	r30, 0x90	; 144
     720:	ff 4f       	sbci	r31, 0xFF	; 255
     722:	ee 0f       	add	r30, r30
     724:	ff 1f       	adc	r31, r31
     726:	ee 0d       	add	r30, r14
     728:	ff 1d       	adc	r31, r15
     72a:	80 83       	st	Z, r24
     72c:	91 83       	std	Z+1, r25	; 0x01
			adc_results[15][adc_head] = adjust(ADCB.CH3RES);
     72e:	8e 89       	ldd	r24, Y+22	; 0x16
     730:	9f 89       	ldd	r25, Y+23	; 0x17
     732:	0e 94 9e 02 	call	0x53c	; 0x53c <adjust>
     736:	08 58       	subi	r16, 0x88	; 136
     738:	1f 4f       	sbci	r17, 0xFF	; 255
     73a:	00 0f       	add	r16, r16
     73c:	11 1f       	adc	r17, r17
     73e:	e0 0e       	add	r14, r16
     740:	f1 1e       	adc	r15, r17
     742:	f7 01       	movw	r30, r14
     744:	80 83       	st	Z, r24
     746:	91 83       	std	Z+1, r25	; 0x01
			
			//next column
			adc_head++;
     748:	8d 2d       	mov	r24, r13
     74a:	8f 5f       	subi	r24, 0xFF	; 255
     74c:	80 93 85 26 	sts	0x2685, r24
			if (adc_head >= ADC_NUM_CONVERSIONS){adc_head=0;}
     750:	88 30       	cpi	r24, 0x08	; 8
     752:	10 f0       	brcs	.+4      	; 0x758 <service_adc+0x204>
     754:	10 92 85 26 	sts	0x2685, r1
		}
		
		//Clear Flags to Reset ADC
		ADCA.INTFLAGS = 0x0F;
     758:	8f e0       	ldi	r24, 0x0F	; 15
     75a:	e0 e0       	ldi	r30, 0x00	; 0
     75c:	f2 e0       	ldi	r31, 0x02	; 2
     75e:	86 83       	std	Z+6, r24	; 0x06
		ADCB.INTFLAGS = 0x0F;
     760:	e0 e4       	ldi	r30, 0x40	; 64
     762:	f2 e0       	ldi	r31, 0x02	; 2
     764:	86 83       	std	Z+6, r24	; 0x06
		
		//Toggle Channel Bank
		adc_bank++;
     766:	80 91 86 26 	lds	r24, 0x2686
     76a:	8f 5f       	subi	r24, 0xFF	; 255
     76c:	80 93 86 26 	sts	0x2686, r24
		adc_bank_select(adc_bank);
     770:	0e 94 2a 01 	call	0x254	; 0x254 <adc_bank_select>
		
		//Start Next Round of Conversions
		adc_convert();
     774:	0e 94 4d 01 	call	0x29a	; 0x29a <adc_convert>
		
		//Auto-calibrate Current Offsets (when output is disabled)
		if(STATE_power_output == DISABLE){
     778:	80 91 84 25 	lds	r24, 0x2584
     77c:	89 32       	cpi	r24, 0x29	; 41
     77e:	69 f4       	brne	.+26     	; 0x79a <service_adc+0x246>
     780:	ca e1       	ldi	r28, 0x1A	; 26
     782:	d2 e2       	ldi	r29, 0x22	; 34
     784:	00 e0       	ldi	r16, 0x00	; 0
			for(uint8_t i=0;i<(ADC_NUM_CHANNELS>>1);i++){
				adc_current_offset[i] = adc_max((i<<1)+1);
     786:	80 2f       	mov	r24, r16
     788:	88 0f       	add	r24, r24
     78a:	8f 5f       	subi	r24, 0xFF	; 255
     78c:	0e 94 83 02 	call	0x506	; 0x506 <adc_max>
     790:	89 93       	st	Y+, r24
     792:	99 93       	st	Y+, r25
		//Start Next Round of Conversions
		adc_convert();
		
		//Auto-calibrate Current Offsets (when output is disabled)
		if(STATE_power_output == DISABLE){
			for(uint8_t i=0;i<(ADC_NUM_CHANNELS>>1);i++){
     794:	0f 5f       	subi	r16, 0xFF	; 255
     796:	08 30       	cpi	r16, 0x08	; 8
     798:	b1 f7       	brne	.-20     	; 0x786 <service_adc+0x232>
				adc_current_offset[i] = adc_max((i<<1)+1);
			}			
		}
	}
}
     79a:	df 91       	pop	r29
     79c:	cf 91       	pop	r28
     79e:	1f 91       	pop	r17
     7a0:	0f 91       	pop	r16
     7a2:	ff 90       	pop	r15
     7a4:	ef 90       	pop	r14
     7a6:	df 90       	pop	r13
     7a8:	08 95       	ret

000007aa <brain_debug>:
void brain_debug(){
	static uint8_t c = 0;
	//uart_enqueue_string(&uctrl, "0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789----100---012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789---<200---012345678901234567890123456789---250>---ABCDEFGHIJ");

	//Channel values (from ADC)
	if (STATE_menu == MENU_CONSOLE){
     7aa:	80 91 83 25 	lds	r24, 0x2583
     7ae:	82 32       	cpi	r24, 0x22	; 34
     7b0:	89 f4       	brne	.+34     	; 0x7d4 <brain_debug+0x2a>
		c++;
     7b2:	80 91 14 22 	lds	r24, 0x2214
     7b6:	8f 5f       	subi	r24, 0xFF	; 255
     7b8:	80 93 14 22 	sts	0x2214, r24
		if(c%2){lcd_console_write("Hello World...");}
     7bc:	80 ff       	sbrs	r24, 0
     7be:	05 c0       	rjmp	.+10     	; 0x7ca <brain_debug+0x20>
     7c0:	80 e0       	ldi	r24, 0x00	; 0
     7c2:	90 e2       	ldi	r25, 0x20	; 32
     7c4:	0e 94 86 0c 	call	0x190c	; 0x190c <lcd_console_write>
     7c8:	08 95       	ret
		else{lcd_console_write("No! I refuse!");}
     7ca:	8f e0       	ldi	r24, 0x0F	; 15
     7cc:	90 e2       	ldi	r25, 0x20	; 32
     7ce:	0e 94 86 0c 	call	0x190c	; 0x190c <lcd_console_write>
     7d2:	08 95       	ret
	}
	else {		
		lcd_command("75 1 1234");
     7d4:	8d e1       	ldi	r24, 0x1D	; 29
     7d6:	90 e2       	ldi	r25, 0x20	; 32
     7d8:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <lcd_command>
		lcd_command("75 11 5678");
     7dc:	87 e2       	ldi	r24, 0x27	; 39
     7de:	90 e2       	ldi	r25, 0x20	; 32
     7e0:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <lcd_command>
		lcd_command("75 2 8765");
     7e4:	82 e3       	ldi	r24, 0x32	; 50
     7e6:	90 e2       	ldi	r25, 0x20	; 32
     7e8:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <lcd_command>
		lcd_command("75 21 4321");
     7ec:	8c e3       	ldi	r24, 0x3C	; 60
     7ee:	90 e2       	ldi	r25, 0x20	; 32
     7f0:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <lcd_command>
     7f4:	08 95       	ret

000007f6 <brain_power_reset>:
}


//Safe and reset all channels (all disabled, master off)
void brain_power_reset(){
	STATE_power_channels = 0;
     7f6:	10 92 82 25 	sts	0x2582, r1
	STATE_power_output = DISABLE;
     7fa:	89 e2       	ldi	r24, 0x29	; 41
     7fc:	80 93 84 25 	sts	0x2584, r24
	pwr_main_off(CHANNEL_ALL); //Actually shutoff power
     800:	8a e3       	ldi	r24, 0x3A	; 58
     802:	0e 94 9b 11 	call	0x2336	; 0x2336 <pwr_main_off>
	fp_led_disable(CHANNEL_M); //Update LED display to indicate this
     806:	85 e0       	ldi	r24, 0x05	; 5
     808:	0e 94 6f 09 	call	0x12de	; 0x12de <fp_led_disable>
}
     80c:	08 95       	ret

0000080e <init_brain>:
//#############################################################
//## INITIALIZATION ROUTINE
//#############################################################

void init_brain(){
	brain_power_reset();
     80e:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <brain_power_reset>
	STATE_menu = MENU_STARTUP;
     812:	8f e1       	ldi	r24, 0x1F	; 31
     814:	80 93 83 25 	sts	0x2583, r24
}
     818:	08 95       	ret

0000081a <brain_menu_output>:
}

//=================
//== OUTPUT Menu
void brain_menu_output(){
	STATE_menu = MENU_OUTPUT;
     81a:	80 e2       	ldi	r24, 0x20	; 32
     81c:	80 93 83 25 	sts	0x2583, r24
	lcd_command("31 M_OUT");
     820:	87 e4       	ldi	r24, 0x47	; 71
     822:	90 e2       	ldi	r25, 0x20	; 32
     824:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <lcd_command>
}
     828:	08 95       	ret

0000082a <brain_menu_output_detail>:

void brain_menu_output_detail(uint8_t which_detail){
     82a:	cf 93       	push	r28
     82c:	c8 2f       	mov	r28, r24
	audio_beep(BRAIN_BEEPS, BRAIN_VOLUME);
     82e:	81 e0       	ldi	r24, 0x01	; 1
     830:	64 e6       	ldi	r22, 0x64	; 100
     832:	70 e0       	ldi	r23, 0x00	; 0
     834:	0e 94 fc 2c 	call	0x59f8	; 0x59f8 <audio_beep>
	switch(which_detail){
     838:	cf 30       	cpi	r28, 0x0F	; 15
     83a:	19 f0       	breq	.+6      	; 0x842 <brain_menu_output_detail+0x18>
     83c:	c0 31       	cpi	r28, 0x10	; 16
     83e:	01 f5       	brne	.+64     	; 0x880 <brain_menu_output_detail+0x56>
     840:	10 c0       	rjmp	.+32     	; 0x862 <brain_menu_output_detail+0x38>
		case LCD_TOUCH_OPEN_DETAIL_AB:
			STATE_menu = MENU_DETAIL_AB;
     842:	83 e2       	ldi	r24, 0x23	; 35
     844:	80 93 83 25 	sts	0x2583, r24
			lcd_command("31 M_DETAIL");
     848:	80 e5       	ldi	r24, 0x50	; 80
     84a:	90 e2       	ldi	r25, 0x20	; 32
     84c:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <lcd_command>
			lcd_command("88 58 A");
     850:	8c e5       	ldi	r24, 0x5C	; 92
     852:	90 e2       	ldi	r25, 0x20	; 32
     854:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <lcd_command>
			lcd_command("88 59 B");
     858:	84 e6       	ldi	r24, 0x64	; 100
     85a:	90 e2       	ldi	r25, 0x20	; 32
     85c:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <lcd_command>
			break;
     860:	0f c0       	rjmp	.+30     	; 0x880 <brain_menu_output_detail+0x56>
		case LCD_TOUCH_OPEN_DETAIL_CD:
			STATE_menu = MENU_DETAIL_CD;
     862:	84 e2       	ldi	r24, 0x24	; 36
     864:	80 93 83 25 	sts	0x2583, r24
			lcd_command("31 M_DETAIL");
     868:	80 e5       	ldi	r24, 0x50	; 80
     86a:	90 e2       	ldi	r25, 0x20	; 32
     86c:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <lcd_command>
			lcd_command("88 58 C");
     870:	8c e6       	ldi	r24, 0x6C	; 108
     872:	90 e2       	ldi	r25, 0x20	; 32
     874:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <lcd_command>
			lcd_command("88 59 D");
     878:	84 e7       	ldi	r24, 0x74	; 116
     87a:	90 e2       	ldi	r25, 0x20	; 32
     87c:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <lcd_command>
			break;
	}
}
     880:	cf 91       	pop	r28
     882:	08 95       	ret

00000884 <brain_menu_control>:

//=================
//== CONTROL Menu

void brain_menu_control(){
	STATE_menu = MENU_CONTROL;
     884:	81 e2       	ldi	r24, 0x21	; 33
     886:	80 93 83 25 	sts	0x2583, r24
	lcd_command("31 M_CTRL");
     88a:	8c e7       	ldi	r24, 0x7C	; 124
     88c:	90 e2       	ldi	r25, 0x20	; 32
     88e:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <lcd_command>
}
     892:	08 95       	ret

00000894 <brain_menu_control_dial>:

void brain_menu_control_dial(uint8_t which_channel){
     894:	cf 93       	push	r28
     896:	c8 2f       	mov	r28, r24
	audio_beep(BRAIN_BEEPS, BRAIN_VOLUME);
     898:	81 e0       	ldi	r24, 0x01	; 1
     89a:	64 e6       	ldi	r22, 0x64	; 100
     89c:	70 e0       	ldi	r23, 0x00	; 0
     89e:	0e 94 fc 2c 	call	0x59f8	; 0x59f8 <audio_beep>
	lcd_command("31 M_DIAL");
     8a2:	86 e8       	ldi	r24, 0x86	; 134
     8a4:	90 e2       	ldi	r25, 0x20	; 32
     8a6:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <lcd_command>
	pwr_adj_channel_dirty = 0xFF; //mark all channels dirty (so load initial values)
     8aa:	8f ef       	ldi	r24, 0xFF	; 255
     8ac:	80 93 ac 26 	sts	0x26AC, r24
	switch(which_channel){
     8b0:	c2 31       	cpi	r28, 0x12	; 18
     8b2:	91 f0       	breq	.+36     	; 0x8d8 <brain_menu_control_dial+0x44>
     8b4:	c3 31       	cpi	r28, 0x13	; 19
     8b6:	18 f4       	brcc	.+6      	; 0x8be <brain_menu_control_dial+0x2a>
     8b8:	c1 31       	cpi	r28, 0x11	; 17
     8ba:	29 f5       	brne	.+74     	; 0x906 <brain_menu_control_dial+0x72>
     8bc:	05 c0       	rjmp	.+10     	; 0x8c8 <brain_menu_control_dial+0x34>
     8be:	c3 31       	cpi	r28, 0x13	; 19
     8c0:	99 f0       	breq	.+38     	; 0x8e8 <brain_menu_control_dial+0x54>
     8c2:	c4 31       	cpi	r28, 0x14	; 20
     8c4:	01 f5       	brne	.+64     	; 0x906 <brain_menu_control_dial+0x72>
     8c6:	18 c0       	rjmp	.+48     	; 0x8f8 <brain_menu_control_dial+0x64>
		case LCD_TOUCH_ROW_A:
			STATE_menu = MENU_DIAL_A;
     8c8:	85 e2       	ldi	r24, 0x25	; 37
     8ca:	80 93 83 25 	sts	0x2583, r24
			lcd_command("88 90 A");
     8ce:	80 e9       	ldi	r24, 0x90	; 144
     8d0:	90 e2       	ldi	r25, 0x20	; 32
     8d2:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <lcd_command>
			break;
     8d6:	17 c0       	rjmp	.+46     	; 0x906 <brain_menu_control_dial+0x72>
		case LCD_TOUCH_ROW_B:
			STATE_menu = MENU_DIAL_B;
     8d8:	86 e2       	ldi	r24, 0x26	; 38
     8da:	80 93 83 25 	sts	0x2583, r24
			lcd_command("88 90 B");
     8de:	88 e9       	ldi	r24, 0x98	; 152
     8e0:	90 e2       	ldi	r25, 0x20	; 32
     8e2:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <lcd_command>
			break;
     8e6:	0f c0       	rjmp	.+30     	; 0x906 <brain_menu_control_dial+0x72>
		case LCD_TOUCH_ROW_C:
			STATE_menu = MENU_DIAL_C;
     8e8:	87 e2       	ldi	r24, 0x27	; 39
     8ea:	80 93 83 25 	sts	0x2583, r24
			lcd_command("88 90 C");
     8ee:	80 ea       	ldi	r24, 0xA0	; 160
     8f0:	90 e2       	ldi	r25, 0x20	; 32
     8f2:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <lcd_command>
			break;
     8f6:	07 c0       	rjmp	.+14     	; 0x906 <brain_menu_control_dial+0x72>
		case LCD_TOUCH_ROW_D:
			STATE_menu = MENU_DIAL_D;
     8f8:	88 e2       	ldi	r24, 0x28	; 40
     8fa:	80 93 83 25 	sts	0x2583, r24
			lcd_command("88 90 D");
     8fe:	88 ea       	ldi	r24, 0xA8	; 168
     900:	90 e2       	ldi	r25, 0x20	; 32
     902:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <lcd_command>
			break;
	}
}
     906:	cf 91       	pop	r28
     908:	08 95       	ret

0000090a <brain_menu_control_dial_select>:

void brain_menu_control_dial_select(uint8_t which_one){
     90a:	cf 93       	push	r28
     90c:	c8 2f       	mov	r28, r24
	//Announce
	audio_beep(BRAIN_BEEPS, BRAIN_VOLUME);
     90e:	81 e0       	ldi	r24, 0x01	; 1
     910:	64 e6       	ldi	r22, 0x64	; 100
     912:	70 e0       	ldi	r23, 0x00	; 0
     914:	0e 94 fc 2c 	call	0x59f8	; 0x59f8 <audio_beep>
	//Update Stat
	pwr_adj_left_right = which_one;
     918:	c0 93 97 26 	sts	0x2697, r28
	//Update Display
	switch(which_one){
     91c:	c1 36       	cpi	r28, 0x61	; 97
     91e:	19 f0       	breq	.+6      	; 0x926 <brain_menu_control_dial_select+0x1c>
     920:	c2 36       	cpi	r28, 0x62	; 98
     922:	51 f4       	brne	.+20     	; 0x938 <brain_menu_control_dial_select+0x2e>
     924:	05 c0       	rjmp	.+10     	; 0x930 <brain_menu_control_dial_select+0x26>
		case LCD_TOUCH_LEFT:
			lcd_command("31 L_SEL");
     926:	80 eb       	ldi	r24, 0xB0	; 176
     928:	90 e2       	ldi	r25, 0x20	; 32
     92a:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <lcd_command>
			break;
     92e:	04 c0       	rjmp	.+8      	; 0x938 <brain_menu_control_dial_select+0x2e>
		case LCD_TOUCH_RIGHT:
			lcd_command("31 R_SEL");
     930:	89 eb       	ldi	r24, 0xB9	; 185
     932:	90 e2       	ldi	r25, 0x20	; 32
     934:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <lcd_command>
			break;
	}
}
     938:	cf 91       	pop	r28
     93a:	08 95       	ret

0000093c <brain_menu_console>:

//=================
//== CONSOLE Menu

void brain_menu_console(){
	STATE_menu = MENU_CONSOLE;
     93c:	82 e2       	ldi	r24, 0x22	; 34
     93e:	80 93 83 25 	sts	0x2583, r24
	lcd_command("31 M_CON");
     942:	82 ec       	ldi	r24, 0xC2	; 194
     944:	90 e2       	ldi	r25, 0x20	; 32
     946:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <lcd_command>
}
     94a:	08 95       	ret

0000094c <brain_menu_update>:

//Update channel enabled indicators
void brain_menu_update(){
	if ((STATE_menu == MENU_OUTPUT) || (STATE_menu == MENU_CONTROL)) {
     94c:	80 91 83 25 	lds	r24, 0x2583
     950:	80 52       	subi	r24, 0x20	; 32
     952:	82 30       	cpi	r24, 0x02	; 2
     954:	08 f0       	brcs	.+2      	; 0x958 <brain_menu_update+0xc>
     956:	54 c0       	rjmp	.+168    	; 0xa00 <brain_menu_update+0xb4>
		if ((STATE_power_channels & _BV(0)) == 0){lcd_a(LCD_DISABLED);}
     958:	80 91 82 25 	lds	r24, 0x2582
     95c:	80 fd       	sbrc	r24, 0
     95e:	04 c0       	rjmp	.+8      	; 0x968 <brain_menu_update+0x1c>
     960:	81 e2       	ldi	r24, 0x21	; 33
     962:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <lcd_a>
     966:	0d c0       	rjmp	.+26     	; 0x982 <brain_menu_update+0x36>
		else {
			if (STATE_power_output == DISABLE){lcd_a(LCD_STANDBY);}
     968:	80 91 84 25 	lds	r24, 0x2584
     96c:	89 32       	cpi	r24, 0x29	; 41
     96e:	21 f4       	brne	.+8      	; 0x978 <brain_menu_update+0x2c>
     970:	80 e2       	ldi	r24, 0x20	; 32
     972:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <lcd_a>
     976:	05 c0       	rjmp	.+10     	; 0x982 <brain_menu_update+0x36>
			else if (STATE_power_output == ENABLE){lcd_a(LCD_ENABLED);}
     978:	8a 32       	cpi	r24, 0x2A	; 42
     97a:	19 f4       	brne	.+6      	; 0x982 <brain_menu_update+0x36>
     97c:	8f e1       	ldi	r24, 0x1F	; 31
     97e:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <lcd_a>
		}	
				
		if ((STATE_power_channels & _BV(1)) == 0){lcd_b(LCD_DISABLED);}
     982:	80 91 82 25 	lds	r24, 0x2582
     986:	81 fd       	sbrc	r24, 1
     988:	04 c0       	rjmp	.+8      	; 0x992 <brain_menu_update+0x46>
     98a:	81 e2       	ldi	r24, 0x21	; 33
     98c:	0e 94 ce 0b 	call	0x179c	; 0x179c <lcd_b>
     990:	0d c0       	rjmp	.+26     	; 0x9ac <brain_menu_update+0x60>
		else {
			if (STATE_power_output == DISABLE){lcd_b(LCD_STANDBY);}
     992:	80 91 84 25 	lds	r24, 0x2584
     996:	89 32       	cpi	r24, 0x29	; 41
     998:	21 f4       	brne	.+8      	; 0x9a2 <brain_menu_update+0x56>
     99a:	80 e2       	ldi	r24, 0x20	; 32
     99c:	0e 94 ce 0b 	call	0x179c	; 0x179c <lcd_b>
     9a0:	05 c0       	rjmp	.+10     	; 0x9ac <brain_menu_update+0x60>
			else if (STATE_power_output == ENABLE){lcd_b(LCD_ENABLED);}
     9a2:	8a 32       	cpi	r24, 0x2A	; 42
     9a4:	19 f4       	brne	.+6      	; 0x9ac <brain_menu_update+0x60>
     9a6:	8f e1       	ldi	r24, 0x1F	; 31
     9a8:	0e 94 ce 0b 	call	0x179c	; 0x179c <lcd_b>
		}	

		if ((STATE_power_channels & _BV(2)) == 0){lcd_c(LCD_DISABLED);}
     9ac:	80 91 82 25 	lds	r24, 0x2582
     9b0:	82 fd       	sbrc	r24, 2
     9b2:	04 c0       	rjmp	.+8      	; 0x9bc <brain_menu_update+0x70>
     9b4:	81 e2       	ldi	r24, 0x21	; 33
     9b6:	0e 94 ba 0b 	call	0x1774	; 0x1774 <lcd_c>
     9ba:	0d c0       	rjmp	.+26     	; 0x9d6 <brain_menu_update+0x8a>
		else {
			if (STATE_power_output == DISABLE){lcd_c(LCD_STANDBY);}
     9bc:	80 91 84 25 	lds	r24, 0x2584
     9c0:	89 32       	cpi	r24, 0x29	; 41
     9c2:	21 f4       	brne	.+8      	; 0x9cc <brain_menu_update+0x80>
     9c4:	80 e2       	ldi	r24, 0x20	; 32
     9c6:	0e 94 ba 0b 	call	0x1774	; 0x1774 <lcd_c>
     9ca:	05 c0       	rjmp	.+10     	; 0x9d6 <brain_menu_update+0x8a>
			else if (STATE_power_output == ENABLE){lcd_c(LCD_ENABLED);}
     9cc:	8a 32       	cpi	r24, 0x2A	; 42
     9ce:	19 f4       	brne	.+6      	; 0x9d6 <brain_menu_update+0x8a>
     9d0:	8f e1       	ldi	r24, 0x1F	; 31
     9d2:	0e 94 ba 0b 	call	0x1774	; 0x1774 <lcd_c>
		}

		if ((STATE_power_channels & _BV(3)) == 0){lcd_d(LCD_DISABLED);}
     9d6:	80 91 82 25 	lds	r24, 0x2582
     9da:	83 fd       	sbrc	r24, 3
     9dc:	04 c0       	rjmp	.+8      	; 0x9e6 <brain_menu_update+0x9a>
     9de:	81 e2       	ldi	r24, 0x21	; 33
     9e0:	0e 94 a6 0b 	call	0x174c	; 0x174c <lcd_d>
     9e4:	08 95       	ret
		else {
			if (STATE_power_output == DISABLE){lcd_d(LCD_STANDBY);}
     9e6:	80 91 84 25 	lds	r24, 0x2584
     9ea:	89 32       	cpi	r24, 0x29	; 41
     9ec:	21 f4       	brne	.+8      	; 0x9f6 <brain_menu_update+0xaa>
     9ee:	80 e2       	ldi	r24, 0x20	; 32
     9f0:	0e 94 a6 0b 	call	0x174c	; 0x174c <lcd_d>
     9f4:	08 95       	ret
			else if (STATE_power_output == ENABLE){lcd_d(LCD_ENABLED);}
     9f6:	8a 32       	cpi	r24, 0x2A	; 42
     9f8:	19 f4       	brne	.+6      	; 0xa00 <brain_menu_update+0xb4>
     9fa:	8f e1       	ldi	r24, 0x1F	; 31
     9fc:	0e 94 a6 0b 	call	0x174c	; 0x174c <lcd_d>
     a00:	08 95       	ret

00000a02 <brain_menu_load>:

void brain_button_pressed(){
	if (STATE_menu == MENU_STARTUP){brain_rotary_change(0);}
}

void brain_menu_load(uint8_t which_menu){
     a02:	cf 93       	push	r28
     a04:	c8 2f       	mov	r28, r24
	//Announce!
	audio_beep(BRAIN_BEEPS, BRAIN_VOLUME);
     a06:	81 e0       	ldi	r24, 0x01	; 1
     a08:	64 e6       	ldi	r22, 0x64	; 100
     a0a:	70 e0       	ldi	r23, 0x00	; 0
     a0c:	0e 94 fc 2c 	call	0x59f8	; 0x59f8 <audio_beep>
	
	//Reset LCD state for menu change (no need to update screen with old stuff)
	init_uart_buffer(&ulcd); //flush outgoing buffer
     a10:	80 eb       	ldi	r24, 0xB0	; 176
     a12:	9b e0       	ldi	r25, 0x0B	; 11
     a14:	0e 94 c3 29 	call	0x5386	; 0x5386 <init_uart_buffer>
	lcd_flow_control = LCD_READY; //clear any current transmissions
     a18:	82 e5       	ldi	r24, 0x52	; 82
     a1a:	80 93 ab 26 	sts	0x26AB, r24
	lcd_last_touch_command = LCD_TOUCH_NONE; //clear out any latent touch actions
     a1e:	85 e1       	ldi	r24, 0x15	; 21
     a20:	80 93 99 26 	sts	0x2699, r24
	lcd_command(""); //send \r to flush any existing partially transmitted commands
     a24:	8b ec       	ldi	r24, 0xCB	; 203
     a26:	90 e2       	ldi	r25, 0x20	; 32
     a28:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <lcd_command>
	
	switch (which_menu){
     a2c:	c0 32       	cpi	r28, 0x20	; 32
     a2e:	69 f0       	breq	.+26     	; 0xa4a <brain_menu_load+0x48>
     a30:	c1 32       	cpi	r28, 0x21	; 33
     a32:	18 f4       	brcc	.+6      	; 0xa3a <brain_menu_load+0x38>
     a34:	cf 31       	cpi	r28, 0x1F	; 31
     a36:	89 f4       	brne	.+34     	; 0xa5a <brain_menu_load+0x58>
     a38:	05 c0       	rjmp	.+10     	; 0xa44 <brain_menu_load+0x42>
     a3a:	c1 32       	cpi	r28, 0x21	; 33
     a3c:	49 f0       	breq	.+18     	; 0xa50 <brain_menu_load+0x4e>
     a3e:	c2 32       	cpi	r28, 0x22	; 34
     a40:	61 f4       	brne	.+24     	; 0xa5a <brain_menu_load+0x58>
     a42:	09 c0       	rjmp	.+18     	; 0xa56 <brain_menu_load+0x54>
		case MENU_STARTUP:
			brain_menu_output();
     a44:	0e 94 0d 04 	call	0x81a	; 0x81a <brain_menu_output>
			break;
     a48:	08 c0       	rjmp	.+16     	; 0xa5a <brain_menu_load+0x58>
		case MENU_OUTPUT:
			brain_menu_output();
     a4a:	0e 94 0d 04 	call	0x81a	; 0x81a <brain_menu_output>
			break;
     a4e:	05 c0       	rjmp	.+10     	; 0xa5a <brain_menu_load+0x58>
		case MENU_CONTROL:
			brain_menu_control();
     a50:	0e 94 42 04 	call	0x884	; 0x884 <brain_menu_control>
			break;
     a54:	02 c0       	rjmp	.+4      	; 0xa5a <brain_menu_load+0x58>
		case MENU_CONSOLE:
			brain_menu_console();
     a56:	0e 94 9e 04 	call	0x93c	; 0x93c <brain_menu_console>
			break;
	}
	brain_menu_update(); //Update channel indicators
     a5a:	0e 94 a6 04 	call	0x94c	; 0x94c <brain_menu_update>
}
     a5e:	cf 91       	pop	r28
     a60:	08 95       	ret

00000a62 <brain_rotary_change>:

//When the user turns the rotary dial...
void brain_rotary_change(uint8_t which_way){
     a62:	68 2f       	mov	r22, r24
	switch (STATE_menu){
     a64:	80 91 83 25 	lds	r24, 0x2583
     a68:	82 32       	cpi	r24, 0x22	; 34
     a6a:	c1 f1       	breq	.+112    	; 0xadc <brain_rotary_change+0x7a>
     a6c:	83 32       	cpi	r24, 0x23	; 35
     a6e:	40 f4       	brcc	.+16     	; 0xa80 <brain_rotary_change+0x1e>
     a70:	80 32       	cpi	r24, 0x20	; 32
     a72:	d1 f0       	breq	.+52     	; 0xaa8 <brain_rotary_change+0x46>
     a74:	81 32       	cpi	r24, 0x21	; 33
     a76:	28 f5       	brcc	.+74     	; 0xac2 <brain_rotary_change+0x60>
     a78:	8f 31       	cpi	r24, 0x1F	; 31
     a7a:	09 f0       	breq	.+2      	; 0xa7e <brain_rotary_change+0x1c>
     a7c:	77 c0       	rjmp	.+238    	; 0xb6c <brain_rotary_change+0x10a>
     a7e:	10 c0       	rjmp	.+32     	; 0xaa0 <brain_rotary_change+0x3e>
     a80:	86 32       	cpi	r24, 0x26	; 38
     a82:	09 f4       	brne	.+2      	; 0xa86 <brain_rotary_change+0x24>
     a84:	47 c0       	rjmp	.+142    	; 0xb14 <brain_rotary_change+0xb2>
     a86:	87 32       	cpi	r24, 0x27	; 39
     a88:	20 f4       	brcc	.+8      	; 0xa92 <brain_rotary_change+0x30>
     a8a:	85 32       	cpi	r24, 0x25	; 37
     a8c:	09 f0       	breq	.+2      	; 0xa90 <brain_rotary_change+0x2e>
     a8e:	6e c0       	rjmp	.+220    	; 0xb6c <brain_rotary_change+0x10a>
     a90:	32 c0       	rjmp	.+100    	; 0xaf6 <brain_rotary_change+0x94>
     a92:	87 32       	cpi	r24, 0x27	; 39
     a94:	09 f4       	brne	.+2      	; 0xa98 <brain_rotary_change+0x36>
     a96:	4d c0       	rjmp	.+154    	; 0xb32 <brain_rotary_change+0xd0>
     a98:	88 32       	cpi	r24, 0x28	; 40
     a9a:	09 f0       	breq	.+2      	; 0xa9e <brain_rotary_change+0x3c>
     a9c:	67 c0       	rjmp	.+206    	; 0xb6c <brain_rotary_change+0x10a>
     a9e:	58 c0       	rjmp	.+176    	; 0xb50 <brain_rotary_change+0xee>
		case MENU_STARTUP:
			brain_menu_load(MENU_OUTPUT);
     aa0:	80 e2       	ldi	r24, 0x20	; 32
     aa2:	0e 94 01 05 	call	0xa02	; 0xa02 <brain_menu_load>
			break;
     aa6:	08 95       	ret
		case MENU_OUTPUT:
			if (which_way == QUAD_DOWN){brain_menu_load(MENU_CONTROL);}
     aa8:	6e 32       	cpi	r22, 0x2E	; 46
     aaa:	21 f4       	brne	.+8      	; 0xab4 <brain_rotary_change+0x52>
     aac:	81 e2       	ldi	r24, 0x21	; 33
     aae:	0e 94 01 05 	call	0xa02	; 0xa02 <brain_menu_load>
     ab2:	08 95       	ret
			if (which_way == QUAD_UP){brain_menu_load(MENU_CONSOLE);}
     ab4:	6d 32       	cpi	r22, 0x2D	; 45
     ab6:	09 f0       	breq	.+2      	; 0xaba <brain_rotary_change+0x58>
     ab8:	59 c0       	rjmp	.+178    	; 0xb6c <brain_rotary_change+0x10a>
     aba:	82 e2       	ldi	r24, 0x22	; 34
     abc:	0e 94 01 05 	call	0xa02	; 0xa02 <brain_menu_load>
     ac0:	08 95       	ret
			break;
		case MENU_CONTROL:
			if (which_way == QUAD_DOWN){brain_menu_load(MENU_CONSOLE);}
     ac2:	6e 32       	cpi	r22, 0x2E	; 46
     ac4:	21 f4       	brne	.+8      	; 0xace <brain_rotary_change+0x6c>
     ac6:	82 e2       	ldi	r24, 0x22	; 34
     ac8:	0e 94 01 05 	call	0xa02	; 0xa02 <brain_menu_load>
     acc:	08 95       	ret
			if (which_way == QUAD_UP){brain_menu_load(MENU_OUTPUT);}
     ace:	6d 32       	cpi	r22, 0x2D	; 45
     ad0:	09 f0       	breq	.+2      	; 0xad4 <brain_rotary_change+0x72>
     ad2:	4c c0       	rjmp	.+152    	; 0xb6c <brain_rotary_change+0x10a>
     ad4:	80 e2       	ldi	r24, 0x20	; 32
     ad6:	0e 94 01 05 	call	0xa02	; 0xa02 <brain_menu_load>
     ada:	08 95       	ret
			break;
		case MENU_CONSOLE:
			if (which_way == QUAD_DOWN){brain_menu_load(MENU_OUTPUT);}
     adc:	6e 32       	cpi	r22, 0x2E	; 46
     ade:	21 f4       	brne	.+8      	; 0xae8 <brain_rotary_change+0x86>
     ae0:	80 e2       	ldi	r24, 0x20	; 32
     ae2:	0e 94 01 05 	call	0xa02	; 0xa02 <brain_menu_load>
     ae6:	08 95       	ret
			if (which_way == QUAD_UP){brain_menu_load(MENU_CONTROL);}
     ae8:	6d 32       	cpi	r22, 0x2D	; 45
     aea:	09 f0       	breq	.+2      	; 0xaee <brain_rotary_change+0x8c>
     aec:	3f c0       	rjmp	.+126    	; 0xb6c <brain_rotary_change+0x10a>
     aee:	81 e2       	ldi	r24, 0x21	; 33
     af0:	0e 94 01 05 	call	0xa02	; 0xa02 <brain_menu_load>
     af4:	08 95       	ret
			break;
		case MENU_DIAL_A:
			switch(pwr_adj_left_right){
     af6:	80 91 97 26 	lds	r24, 0x2697
     afa:	81 36       	cpi	r24, 0x61	; 97
     afc:	19 f0       	breq	.+6      	; 0xb04 <brain_rotary_change+0xa2>
     afe:	82 36       	cpi	r24, 0x62	; 98
     b00:	a9 f5       	brne	.+106    	; 0xb6c <brain_rotary_change+0x10a>
     b02:	04 c0       	rjmp	.+8      	; 0xb0c <brain_rotary_change+0xaa>
			case LCD_TOUCH_LEFT:					
				pwr_adj_change_increment(0, which_way);
     b04:	80 e0       	ldi	r24, 0x00	; 0
     b06:	0e 94 35 10 	call	0x206a	; 0x206a <pwr_adj_change_increment>
				break;
     b0a:	08 95       	ret
			case LCD_TOUCH_RIGHT:
				pwr_adj_change_increment(1, which_way);
     b0c:	81 e0       	ldi	r24, 0x01	; 1
     b0e:	0e 94 35 10 	call	0x206a	; 0x206a <pwr_adj_change_increment>
				break;
     b12:	08 95       	ret
			}
			break;
		case MENU_DIAL_B:
			switch(pwr_adj_left_right){
     b14:	80 91 97 26 	lds	r24, 0x2697
     b18:	81 36       	cpi	r24, 0x61	; 97
     b1a:	19 f0       	breq	.+6      	; 0xb22 <brain_rotary_change+0xc0>
     b1c:	82 36       	cpi	r24, 0x62	; 98
     b1e:	31 f5       	brne	.+76     	; 0xb6c <brain_rotary_change+0x10a>
     b20:	04 c0       	rjmp	.+8      	; 0xb2a <brain_rotary_change+0xc8>
			case LCD_TOUCH_LEFT:
				pwr_adj_change_increment(2, which_way);
     b22:	82 e0       	ldi	r24, 0x02	; 2
     b24:	0e 94 35 10 	call	0x206a	; 0x206a <pwr_adj_change_increment>
				break;
     b28:	08 95       	ret
			case LCD_TOUCH_RIGHT:
				pwr_adj_change_increment(3, which_way);
     b2a:	83 e0       	ldi	r24, 0x03	; 3
     b2c:	0e 94 35 10 	call	0x206a	; 0x206a <pwr_adj_change_increment>
				break;
     b30:	08 95       	ret
			}
			break;
		case MENU_DIAL_C:
			switch(pwr_adj_left_right){
     b32:	80 91 97 26 	lds	r24, 0x2697
     b36:	81 36       	cpi	r24, 0x61	; 97
     b38:	19 f0       	breq	.+6      	; 0xb40 <brain_rotary_change+0xde>
     b3a:	82 36       	cpi	r24, 0x62	; 98
     b3c:	b9 f4       	brne	.+46     	; 0xb6c <brain_rotary_change+0x10a>
     b3e:	04 c0       	rjmp	.+8      	; 0xb48 <brain_rotary_change+0xe6>
			case LCD_TOUCH_LEFT:
				pwr_adj_change_increment(4, which_way);
     b40:	84 e0       	ldi	r24, 0x04	; 4
     b42:	0e 94 35 10 	call	0x206a	; 0x206a <pwr_adj_change_increment>
				break;
     b46:	08 95       	ret
			case LCD_TOUCH_RIGHT:
				pwr_adj_change_increment(5, which_way);
     b48:	85 e0       	ldi	r24, 0x05	; 5
     b4a:	0e 94 35 10 	call	0x206a	; 0x206a <pwr_adj_change_increment>
				break;
     b4e:	08 95       	ret
			}
			break;
		case MENU_DIAL_D:
			switch(pwr_adj_left_right){
     b50:	80 91 97 26 	lds	r24, 0x2697
     b54:	81 36       	cpi	r24, 0x61	; 97
     b56:	19 f0       	breq	.+6      	; 0xb5e <brain_rotary_change+0xfc>
     b58:	82 36       	cpi	r24, 0x62	; 98
     b5a:	41 f4       	brne	.+16     	; 0xb6c <brain_rotary_change+0x10a>
     b5c:	04 c0       	rjmp	.+8      	; 0xb66 <brain_rotary_change+0x104>
			case LCD_TOUCH_LEFT:
				pwr_adj_change_increment(6, which_way);
     b5e:	86 e0       	ldi	r24, 0x06	; 6
     b60:	0e 94 35 10 	call	0x206a	; 0x206a <pwr_adj_change_increment>
				break;
     b64:	08 95       	ret
			case LCD_TOUCH_RIGHT:
				pwr_adj_change_increment(7, which_way);
     b66:	87 e0       	ldi	r24, 0x07	; 7
     b68:	0e 94 35 10 	call	0x206a	; 0x206a <pwr_adj_change_increment>
     b6c:	08 95       	ret

00000b6e <brain_button_pressed>:
	//Update LCD
	brain_menu_update();
}	

void brain_button_pressed(){
	if (STATE_menu == MENU_STARTUP){brain_rotary_change(0);}
     b6e:	80 91 83 25 	lds	r24, 0x2583
     b72:	8f 31       	cpi	r24, 0x1F	; 31
     b74:	19 f4       	brne	.+6      	; 0xb7c <brain_button_pressed+0xe>
     b76:	80 e0       	ldi	r24, 0x00	; 0
     b78:	0e 94 31 05 	call	0xa62	; 0xa62 <brain_rotary_change>
     b7c:	08 95       	ret

00000b7e <brain_power_master>:
		brain_menu_update();
}

void brain_power_master(){
	//Go to STANDBY (DISABLE)
	if (STATE_power_output == ENABLE){
     b7e:	80 91 84 25 	lds	r24, 0x2584
     b82:	8a 32       	cpi	r24, 0x2A	; 42
     b84:	89 f4       	brne	.+34     	; 0xba8 <brain_power_master+0x2a>
			STATE_power_output = DISABLE;
     b86:	89 e2       	ldi	r24, 0x29	; 41
     b88:	80 93 84 25 	sts	0x2584, r24
			pwr_main_off(CHANNEL_ALL);
     b8c:	8a e3       	ldi	r24, 0x3A	; 58
     b8e:	0e 94 9b 11 	call	0x2336	; 0x2336 <pwr_main_off>
			pwr_adj_off(CHANNEL_ALL);
     b92:	8a e3       	ldi	r24, 0x3A	; 58
     b94:	0e 94 de 0f 	call	0x1fbc	; 0x1fbc <pwr_adj_off>
			fp_led_disable(CHANNEL_M);		
     b98:	85 e0       	ldi	r24, 0x05	; 5
     b9a:	0e 94 6f 09 	call	0x12de	; 0x12de <fp_led_disable>
			PORTH.OUTCLR = _BV(0); //xxx -- Toggle 5V Control output with master	
     b9e:	81 e0       	ldi	r24, 0x01	; 1
     ba0:	e0 ee       	ldi	r30, 0xE0	; 224
     ba2:	f6 e0       	ldi	r31, 0x06	; 6
     ba4:	86 83       	std	Z+6, r24	; 0x06
     ba6:	12 c0       	rjmp	.+36     	; 0xbcc <brain_power_master+0x4e>
	}
	
	//Enable OUTPUT! (ENABLE)
	else {	
		if (STATE_power_output == DISABLE){
     ba8:	89 32       	cpi	r24, 0x29	; 41
     baa:	81 f4       	brne	.+32     	; 0xbcc <brain_power_master+0x4e>
			STATE_power_output = ENABLE;
     bac:	8a e2       	ldi	r24, 0x2A	; 42
     bae:	80 93 84 25 	sts	0x2584, r24
			pwr_main_on(CHANNEL_RESTORE);
     bb2:	8c e3       	ldi	r24, 0x3C	; 60
     bb4:	0e 94 65 11 	call	0x22ca	; 0x22ca <pwr_main_on>
			pwr_adj_on(CHANNEL_RESTORE);
     bb8:	8c e3       	ldi	r24, 0x3C	; 60
     bba:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <pwr_adj_on>
			fp_led_enable(CHANNEL_M);
     bbe:	85 e0       	ldi	r24, 0x05	; 5
     bc0:	0e 94 43 09 	call	0x1286	; 0x1286 <fp_led_enable>
			PORTH.OUTSET = _BV(0); //xxx -- Toggle 5V Control output with master
     bc4:	81 e0       	ldi	r24, 0x01	; 1
     bc6:	e0 ee       	ldi	r30, 0xE0	; 224
     bc8:	f6 e0       	ldi	r31, 0x06	; 6
     bca:	85 83       	std	Z+5, r24	; 0x05
		}			
	}
	
	//Update LCD
	brain_menu_update();
     bcc:	0e 94 a6 04 	call	0x94c	; 0x94c <brain_menu_update>
}	
     bd0:	08 95       	ret

00000bd2 <brain_power>:
	fp_led_disable(CHANNEL_M); //Update LED display to indicate this
}

//Toggle power state and effect the new behavior
//Toggle adjustable and fixed channels together
void brain_power(uint8_t which){
     bd2:	cf 93       	push	r28
     bd4:	c8 2f       	mov	r28, r24
	//Toggle channel state
		STATE_power_channels ^= _BV(which); 
     bd6:	81 e0       	ldi	r24, 0x01	; 1
     bd8:	90 e0       	ldi	r25, 0x00	; 0
     bda:	0c 2e       	mov	r0, r28
     bdc:	02 c0       	rjmp	.+4      	; 0xbe2 <brain_power+0x10>
     bde:	88 0f       	add	r24, r24
     be0:	99 1f       	adc	r25, r25
     be2:	0a 94       	dec	r0
     be4:	e2 f7       	brpl	.-8      	; 0xbde <brain_power+0xc>
     be6:	90 91 82 25 	lds	r25, 0x2582
     bea:	89 27       	eor	r24, r25
     bec:	80 93 82 25 	sts	0x2582, r24
	//Channel disabled
		if ((STATE_power_channels & _BV(which))==0){		
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	0c 2e       	mov	r0, r28
     bf4:	02 c0       	rjmp	.+4      	; 0xbfa <brain_power+0x28>
     bf6:	95 95       	asr	r25
     bf8:	87 95       	ror	r24
     bfa:	0a 94       	dec	r0
     bfc:	e2 f7       	brpl	.-8      	; 0xbf6 <brain_power+0x24>
     bfe:	80 fd       	sbrc	r24, 0
     c00:	0a c0       	rjmp	.+20     	; 0xc16 <brain_power+0x44>
			pwr_main_off(which);
     c02:	8c 2f       	mov	r24, r28
     c04:	0e 94 9b 11 	call	0x2336	; 0x2336 <pwr_main_off>
			pwr_adj_off(which);
     c08:	8c 2f       	mov	r24, r28
     c0a:	0e 94 de 0f 	call	0x1fbc	; 0x1fbc <pwr_adj_off>
			fp_led_disable(which);
     c0e:	8c 2f       	mov	r24, r28
     c10:	0e 94 6f 09 	call	0x12de	; 0x12de <fp_led_disable>
     c14:	0d c0       	rjmp	.+26     	; 0xc30 <brain_power+0x5e>
		}	
	//Channel enabled
		else {
			fp_led_enable(which);
     c16:	8c 2f       	mov	r24, r28
     c18:	0e 94 43 09 	call	0x1286	; 0x1286 <fp_led_enable>
			if (STATE_power_output == ENABLE) {pwr_main_on(which); pwr_adj_on(which);}
     c1c:	80 91 84 25 	lds	r24, 0x2584
     c20:	8a 32       	cpi	r24, 0x2A	; 42
     c22:	31 f4       	brne	.+12     	; 0xc30 <brain_power+0x5e>
     c24:	8c 2f       	mov	r24, r28
     c26:	0e 94 65 11 	call	0x22ca	; 0x22ca <pwr_main_on>
     c2a:	8c 2f       	mov	r24, r28
     c2c:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <pwr_adj_on>
			if (STATE_power_output == DISABLE) {}		
		}	
	//Update LCD
		brain_menu_update();
     c30:	0e 94 a6 04 	call	0x94c	; 0x94c <brain_menu_update>
}
     c34:	cf 91       	pop	r28
     c36:	08 95       	ret

00000c38 <service_brain>:

//#############################################################
//## SERVICE ROUTINE
//#############################################################

void service_brain(){
     c38:	cf 93       	push	r28
     c3a:	df 93       	push	r29
     c3c:	cd b7       	in	r28, 0x3d	; 61
     c3e:	de b7       	in	r29, 0x3e	; 62
     c40:	2c 97       	sbiw	r28, 0x0c	; 12
     c42:	cd bf       	out	0x3d, r28	; 61
     c44:	de bf       	out	0x3e, r29	; 62
	static uint16_t menu_update_counter = 0;
	char meter_value[12];
	//Decide when to update Power output measurements
	menu_update_counter++;
     c46:	80 91 15 22 	lds	r24, 0x2215
     c4a:	90 91 16 22 	lds	r25, 0x2216
     c4e:	01 96       	adiw	r24, 0x01	; 1
     c50:	80 93 15 22 	sts	0x2215, r24
     c54:	90 93 16 22 	sts	0x2216, r25
	if (menu_update_counter >= 500){
     c58:	21 e0       	ldi	r18, 0x01	; 1
     c5a:	84 3f       	cpi	r24, 0xF4	; 244
     c5c:	92 07       	cpc	r25, r18
     c5e:	08 f4       	brcc	.+2      	; 0xc62 <service_brain+0x2a>
     c60:	c8 c2       	rjmp	.+1424   	; 0x11f2 <service_brain+0x5ba>
		menu_update_counter = 0;
     c62:	10 92 15 22 	sts	0x2215, r1
     c66:	10 92 16 22 	sts	0x2216, r1
		switch(STATE_menu){
     c6a:	80 91 83 25 	lds	r24, 0x2583
     c6e:	84 32       	cpi	r24, 0x24	; 36
     c70:	09 f4       	brne	.+2      	; 0xc74 <service_brain+0x3c>
     c72:	fb c0       	rjmp	.+502    	; 0xe6a <service_brain+0x232>
     c74:	85 32       	cpi	r24, 0x25	; 37
     c76:	50 f4       	brcc	.+20     	; 0xc8c <service_brain+0x54>
     c78:	81 32       	cpi	r24, 0x21	; 33
     c7a:	09 f4       	brne	.+2      	; 0xc7e <service_brain+0x46>
     c7c:	67 c1       	rjmp	.+718    	; 0xf4c <service_brain+0x314>
     c7e:	83 32       	cpi	r24, 0x23	; 35
     c80:	09 f4       	brne	.+2      	; 0xc84 <service_brain+0x4c>
     c82:	82 c0       	rjmp	.+260    	; 0xd88 <service_brain+0x150>
     c84:	80 32       	cpi	r24, 0x20	; 32
     c86:	09 f0       	breq	.+2      	; 0xc8a <service_brain+0x52>
     c88:	b4 c2       	rjmp	.+1384   	; 0x11f2 <service_brain+0x5ba>
     c8a:	0d c0       	rjmp	.+26     	; 0xca6 <service_brain+0x6e>
     c8c:	86 32       	cpi	r24, 0x26	; 38
     c8e:	09 f4       	brne	.+2      	; 0xc92 <service_brain+0x5a>
     c90:	04 c2       	rjmp	.+1032   	; 0x109a <service_brain+0x462>
     c92:	86 32       	cpi	r24, 0x26	; 38
     c94:	08 f4       	brcc	.+2      	; 0xc98 <service_brain+0x60>
     c96:	c3 c1       	rjmp	.+902    	; 0x101e <service_brain+0x3e6>
     c98:	87 32       	cpi	r24, 0x27	; 39
     c9a:	09 f4       	brne	.+2      	; 0xc9e <service_brain+0x66>
     c9c:	38 c2       	rjmp	.+1136   	; 0x110e <service_brain+0x4d6>
     c9e:	88 32       	cpi	r24, 0x28	; 40
     ca0:	09 f0       	breq	.+2      	; 0xca4 <service_brain+0x6c>
     ca2:	a7 c2       	rjmp	.+1358   	; 0x11f2 <service_brain+0x5ba>
     ca4:	6e c2       	rjmp	.+1244   	; 0x1182 <service_brain+0x54a>
			case MENU_OUTPUT:
				adc_data(0, VOLTAGE_POS, meter_value); //A V+
     ca6:	80 e0       	ldi	r24, 0x00	; 0
     ca8:	67 e6       	ldi	r22, 0x67	; 103
     caa:	ae 01       	movw	r20, r28
     cac:	4f 5f       	subi	r20, 0xFF	; 255
     cae:	5f 4f       	sbci	r21, 0xFF	; 255
     cb0:	0e 94 cf 01 	call	0x39e	; 0x39e <adc_data>
				lcd_update("75 1 ", meter_value);
     cb4:	8c ec       	ldi	r24, 0xCC	; 204
     cb6:	90 e2       	ldi	r25, 0x20	; 32
     cb8:	be 01       	movw	r22, r28
     cba:	6f 5f       	subi	r22, 0xFF	; 255
     cbc:	7f 4f       	sbci	r23, 0xFF	; 255
     cbe:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <lcd_update>
				adc_data(1, CURRENT_HI_RES, meter_value); //A I+
     cc2:	81 e0       	ldi	r24, 0x01	; 1
     cc4:	6a e6       	ldi	r22, 0x6A	; 106
     cc6:	ae 01       	movw	r20, r28
     cc8:	4f 5f       	subi	r20, 0xFF	; 255
     cca:	5f 4f       	sbci	r21, 0xFF	; 255
     ccc:	0e 94 cf 01 	call	0x39e	; 0x39e <adc_data>
				lcd_update("75 11 ", meter_value);
     cd0:	82 ed       	ldi	r24, 0xD2	; 210
     cd2:	90 e2       	ldi	r25, 0x20	; 32
     cd4:	be 01       	movw	r22, r28
     cd6:	6f 5f       	subi	r22, 0xFF	; 255
     cd8:	7f 4f       	sbci	r23, 0xFF	; 255
     cda:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <lcd_update>
				adc_data(4, VOLTAGE_POS, meter_value); //B V+
     cde:	84 e0       	ldi	r24, 0x04	; 4
     ce0:	67 e6       	ldi	r22, 0x67	; 103
     ce2:	ae 01       	movw	r20, r28
     ce4:	4f 5f       	subi	r20, 0xFF	; 255
     ce6:	5f 4f       	sbci	r21, 0xFF	; 255
     ce8:	0e 94 cf 01 	call	0x39e	; 0x39e <adc_data>
				lcd_update("75 2 ", meter_value);
     cec:	89 ed       	ldi	r24, 0xD9	; 217
     cee:	90 e2       	ldi	r25, 0x20	; 32
     cf0:	be 01       	movw	r22, r28
     cf2:	6f 5f       	subi	r22, 0xFF	; 255
     cf4:	7f 4f       	sbci	r23, 0xFF	; 255
     cf6:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <lcd_update>
				adc_data(5, CURRENT_HI_RES, meter_value); //B I+
     cfa:	85 e0       	ldi	r24, 0x05	; 5
     cfc:	6a e6       	ldi	r22, 0x6A	; 106
     cfe:	ae 01       	movw	r20, r28
     d00:	4f 5f       	subi	r20, 0xFF	; 255
     d02:	5f 4f       	sbci	r21, 0xFF	; 255
     d04:	0e 94 cf 01 	call	0x39e	; 0x39e <adc_data>
				lcd_update("75 21 ", meter_value);
     d08:	8f ed       	ldi	r24, 0xDF	; 223
     d0a:	90 e2       	ldi	r25, 0x20	; 32
     d0c:	be 01       	movw	r22, r28
     d0e:	6f 5f       	subi	r22, 0xFF	; 255
     d10:	7f 4f       	sbci	r23, 0xFF	; 255
     d12:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <lcd_update>
				adc_data(8, VOLTAGE_POS, meter_value); //C V+
     d16:	88 e0       	ldi	r24, 0x08	; 8
     d18:	67 e6       	ldi	r22, 0x67	; 103
     d1a:	ae 01       	movw	r20, r28
     d1c:	4f 5f       	subi	r20, 0xFF	; 255
     d1e:	5f 4f       	sbci	r21, 0xFF	; 255
     d20:	0e 94 cf 01 	call	0x39e	; 0x39e <adc_data>
				lcd_update("75 3 ", meter_value);
     d24:	86 ee       	ldi	r24, 0xE6	; 230
     d26:	90 e2       	ldi	r25, 0x20	; 32
     d28:	be 01       	movw	r22, r28
     d2a:	6f 5f       	subi	r22, 0xFF	; 255
     d2c:	7f 4f       	sbci	r23, 0xFF	; 255
     d2e:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <lcd_update>
				adc_data(9, CURRENT_HI_RES, meter_value); //C I+
     d32:	89 e0       	ldi	r24, 0x09	; 9
     d34:	6a e6       	ldi	r22, 0x6A	; 106
     d36:	ae 01       	movw	r20, r28
     d38:	4f 5f       	subi	r20, 0xFF	; 255
     d3a:	5f 4f       	sbci	r21, 0xFF	; 255
     d3c:	0e 94 cf 01 	call	0x39e	; 0x39e <adc_data>
				lcd_update("75 31 ", meter_value);
     d40:	8c ee       	ldi	r24, 0xEC	; 236
     d42:	90 e2       	ldi	r25, 0x20	; 32
     d44:	be 01       	movw	r22, r28
     d46:	6f 5f       	subi	r22, 0xFF	; 255
     d48:	7f 4f       	sbci	r23, 0xFF	; 255
     d4a:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <lcd_update>
				adc_data(12, VOLTAGE_POS, meter_value); //D V+
     d4e:	8c e0       	ldi	r24, 0x0C	; 12
     d50:	67 e6       	ldi	r22, 0x67	; 103
     d52:	ae 01       	movw	r20, r28
     d54:	4f 5f       	subi	r20, 0xFF	; 255
     d56:	5f 4f       	sbci	r21, 0xFF	; 255
     d58:	0e 94 cf 01 	call	0x39e	; 0x39e <adc_data>
				lcd_update("75 4 ", meter_value);
     d5c:	83 ef       	ldi	r24, 0xF3	; 243
     d5e:	90 e2       	ldi	r25, 0x20	; 32
     d60:	be 01       	movw	r22, r28
     d62:	6f 5f       	subi	r22, 0xFF	; 255
     d64:	7f 4f       	sbci	r23, 0xFF	; 255
     d66:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <lcd_update>
				adc_data(13, CURRENT_HI_RES, meter_value); //D I+
     d6a:	8d e0       	ldi	r24, 0x0D	; 13
     d6c:	6a e6       	ldi	r22, 0x6A	; 106
     d6e:	ae 01       	movw	r20, r28
     d70:	4f 5f       	subi	r20, 0xFF	; 255
     d72:	5f 4f       	sbci	r21, 0xFF	; 255
     d74:	0e 94 cf 01 	call	0x39e	; 0x39e <adc_data>
				lcd_update("75 41 ", meter_value);
     d78:	89 ef       	ldi	r24, 0xF9	; 249
     d7a:	90 e2       	ldi	r25, 0x20	; 32
     d7c:	be 01       	movw	r22, r28
     d7e:	6f 5f       	subi	r22, 0xFF	; 255
     d80:	7f 4f       	sbci	r23, 0xFF	; 255
     d82:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <lcd_update>
				break;
     d86:	35 c2       	rjmp	.+1130   	; 0x11f2 <service_brain+0x5ba>
			case MENU_DETAIL_AB:
				adc_data(0, VOLTAGE_POS, meter_value); //A V+
     d88:	80 e0       	ldi	r24, 0x00	; 0
     d8a:	67 e6       	ldi	r22, 0x67	; 103
     d8c:	ae 01       	movw	r20, r28
     d8e:	4f 5f       	subi	r20, 0xFF	; 255
     d90:	5f 4f       	sbci	r21, 0xFF	; 255
     d92:	0e 94 cf 01 	call	0x39e	; 0x39e <adc_data>
				lcd_update("75 50 ", meter_value);
     d96:	80 e0       	ldi	r24, 0x00	; 0
     d98:	91 e2       	ldi	r25, 0x21	; 33
     d9a:	be 01       	movw	r22, r28
     d9c:	6f 5f       	subi	r22, 0xFF	; 255
     d9e:	7f 4f       	sbci	r23, 0xFF	; 255
     da0:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <lcd_update>
				adc_data(1, CURRENT_HI_RES, meter_value); //A I+
     da4:	81 e0       	ldi	r24, 0x01	; 1
     da6:	6a e6       	ldi	r22, 0x6A	; 106
     da8:	ae 01       	movw	r20, r28
     daa:	4f 5f       	subi	r20, 0xFF	; 255
     dac:	5f 4f       	sbci	r21, 0xFF	; 255
     dae:	0e 94 cf 01 	call	0x39e	; 0x39e <adc_data>
				lcd_update("75 51 ", meter_value);
     db2:	87 e0       	ldi	r24, 0x07	; 7
     db4:	91 e2       	ldi	r25, 0x21	; 33
     db6:	be 01       	movw	r22, r28
     db8:	6f 5f       	subi	r22, 0xFF	; 255
     dba:	7f 4f       	sbci	r23, 0xFF	; 255
     dbc:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <lcd_update>
				adc_data(2, VOLTAGE_NEG, meter_value); //A V-
     dc0:	82 e0       	ldi	r24, 0x02	; 2
     dc2:	68 e6       	ldi	r22, 0x68	; 104
     dc4:	ae 01       	movw	r20, r28
     dc6:	4f 5f       	subi	r20, 0xFF	; 255
     dc8:	5f 4f       	sbci	r21, 0xFF	; 255
     dca:	0e 94 cf 01 	call	0x39e	; 0x39e <adc_data>
				lcd_update("75 52 -", meter_value);
     dce:	8e e0       	ldi	r24, 0x0E	; 14
     dd0:	91 e2       	ldi	r25, 0x21	; 33
     dd2:	be 01       	movw	r22, r28
     dd4:	6f 5f       	subi	r22, 0xFF	; 255
     dd6:	7f 4f       	sbci	r23, 0xFF	; 255
     dd8:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <lcd_update>
				adc_data(3, CURRENT_HI_RES, meter_value); //A I-
     ddc:	83 e0       	ldi	r24, 0x03	; 3
     dde:	6a e6       	ldi	r22, 0x6A	; 106
     de0:	ae 01       	movw	r20, r28
     de2:	4f 5f       	subi	r20, 0xFF	; 255
     de4:	5f 4f       	sbci	r21, 0xFF	; 255
     de6:	0e 94 cf 01 	call	0x39e	; 0x39e <adc_data>
				lcd_update("75 53 -", meter_value);
     dea:	86 e1       	ldi	r24, 0x16	; 22
     dec:	91 e2       	ldi	r25, 0x21	; 33
     dee:	be 01       	movw	r22, r28
     df0:	6f 5f       	subi	r22, 0xFF	; 255
     df2:	7f 4f       	sbci	r23, 0xFF	; 255
     df4:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <lcd_update>
				adc_data(4, VOLTAGE_POS, meter_value); //B V+
     df8:	84 e0       	ldi	r24, 0x04	; 4
     dfa:	67 e6       	ldi	r22, 0x67	; 103
     dfc:	ae 01       	movw	r20, r28
     dfe:	4f 5f       	subi	r20, 0xFF	; 255
     e00:	5f 4f       	sbci	r21, 0xFF	; 255
     e02:	0e 94 cf 01 	call	0x39e	; 0x39e <adc_data>
				lcd_update("75 54 ", meter_value);
     e06:	8e e1       	ldi	r24, 0x1E	; 30
     e08:	91 e2       	ldi	r25, 0x21	; 33
     e0a:	be 01       	movw	r22, r28
     e0c:	6f 5f       	subi	r22, 0xFF	; 255
     e0e:	7f 4f       	sbci	r23, 0xFF	; 255
     e10:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <lcd_update>
				adc_data(5, CURRENT_HI_RES, meter_value); //B I+
     e14:	85 e0       	ldi	r24, 0x05	; 5
     e16:	6a e6       	ldi	r22, 0x6A	; 106
     e18:	ae 01       	movw	r20, r28
     e1a:	4f 5f       	subi	r20, 0xFF	; 255
     e1c:	5f 4f       	sbci	r21, 0xFF	; 255
     e1e:	0e 94 cf 01 	call	0x39e	; 0x39e <adc_data>
				lcd_update("75 55 ", meter_value);
     e22:	85 e2       	ldi	r24, 0x25	; 37
     e24:	91 e2       	ldi	r25, 0x21	; 33
     e26:	be 01       	movw	r22, r28
     e28:	6f 5f       	subi	r22, 0xFF	; 255
     e2a:	7f 4f       	sbci	r23, 0xFF	; 255
     e2c:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <lcd_update>
				adc_data(6, VOLTAGE_NEG, meter_value); //B V-
     e30:	86 e0       	ldi	r24, 0x06	; 6
     e32:	68 e6       	ldi	r22, 0x68	; 104
     e34:	ae 01       	movw	r20, r28
     e36:	4f 5f       	subi	r20, 0xFF	; 255
     e38:	5f 4f       	sbci	r21, 0xFF	; 255
     e3a:	0e 94 cf 01 	call	0x39e	; 0x39e <adc_data>
				lcd_update("75 56 -", meter_value);
     e3e:	8c e2       	ldi	r24, 0x2C	; 44
     e40:	91 e2       	ldi	r25, 0x21	; 33
     e42:	be 01       	movw	r22, r28
     e44:	6f 5f       	subi	r22, 0xFF	; 255
     e46:	7f 4f       	sbci	r23, 0xFF	; 255
     e48:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <lcd_update>
				adc_data(7, CURRENT_HI_RES, meter_value); //B I-
     e4c:	87 e0       	ldi	r24, 0x07	; 7
     e4e:	6a e6       	ldi	r22, 0x6A	; 106
     e50:	ae 01       	movw	r20, r28
     e52:	4f 5f       	subi	r20, 0xFF	; 255
     e54:	5f 4f       	sbci	r21, 0xFF	; 255
     e56:	0e 94 cf 01 	call	0x39e	; 0x39e <adc_data>
				lcd_update("75 57 -", meter_value);
     e5a:	84 e3       	ldi	r24, 0x34	; 52
     e5c:	91 e2       	ldi	r25, 0x21	; 33
     e5e:	be 01       	movw	r22, r28
     e60:	6f 5f       	subi	r22, 0xFF	; 255
     e62:	7f 4f       	sbci	r23, 0xFF	; 255
     e64:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <lcd_update>
				break;
     e68:	c4 c1       	rjmp	.+904    	; 0x11f2 <service_brain+0x5ba>
			case MENU_DETAIL_CD:
				adc_data(8, VOLTAGE_POS, meter_value); //C V+
     e6a:	88 e0       	ldi	r24, 0x08	; 8
     e6c:	67 e6       	ldi	r22, 0x67	; 103
     e6e:	ae 01       	movw	r20, r28
     e70:	4f 5f       	subi	r20, 0xFF	; 255
     e72:	5f 4f       	sbci	r21, 0xFF	; 255
     e74:	0e 94 cf 01 	call	0x39e	; 0x39e <adc_data>
				lcd_update("75 50 ", meter_value);
     e78:	80 e0       	ldi	r24, 0x00	; 0
     e7a:	91 e2       	ldi	r25, 0x21	; 33
     e7c:	be 01       	movw	r22, r28
     e7e:	6f 5f       	subi	r22, 0xFF	; 255
     e80:	7f 4f       	sbci	r23, 0xFF	; 255
     e82:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <lcd_update>
				adc_data(9, CURRENT_HI_RES, meter_value); //C I+
     e86:	89 e0       	ldi	r24, 0x09	; 9
     e88:	6a e6       	ldi	r22, 0x6A	; 106
     e8a:	ae 01       	movw	r20, r28
     e8c:	4f 5f       	subi	r20, 0xFF	; 255
     e8e:	5f 4f       	sbci	r21, 0xFF	; 255
     e90:	0e 94 cf 01 	call	0x39e	; 0x39e <adc_data>
				lcd_update("75 51 ", meter_value);
     e94:	87 e0       	ldi	r24, 0x07	; 7
     e96:	91 e2       	ldi	r25, 0x21	; 33
     e98:	be 01       	movw	r22, r28
     e9a:	6f 5f       	subi	r22, 0xFF	; 255
     e9c:	7f 4f       	sbci	r23, 0xFF	; 255
     e9e:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <lcd_update>
				adc_data(10, VOLTAGE_NEG, meter_value); //C V-
     ea2:	8a e0       	ldi	r24, 0x0A	; 10
     ea4:	68 e6       	ldi	r22, 0x68	; 104
     ea6:	ae 01       	movw	r20, r28
     ea8:	4f 5f       	subi	r20, 0xFF	; 255
     eaa:	5f 4f       	sbci	r21, 0xFF	; 255
     eac:	0e 94 cf 01 	call	0x39e	; 0x39e <adc_data>
				lcd_update("75 52 -", meter_value);
     eb0:	8e e0       	ldi	r24, 0x0E	; 14
     eb2:	91 e2       	ldi	r25, 0x21	; 33
     eb4:	be 01       	movw	r22, r28
     eb6:	6f 5f       	subi	r22, 0xFF	; 255
     eb8:	7f 4f       	sbci	r23, 0xFF	; 255
     eba:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <lcd_update>
				adc_data(11, CURRENT_HI_RES, meter_value); //C I-
     ebe:	8b e0       	ldi	r24, 0x0B	; 11
     ec0:	6a e6       	ldi	r22, 0x6A	; 106
     ec2:	ae 01       	movw	r20, r28
     ec4:	4f 5f       	subi	r20, 0xFF	; 255
     ec6:	5f 4f       	sbci	r21, 0xFF	; 255
     ec8:	0e 94 cf 01 	call	0x39e	; 0x39e <adc_data>
				lcd_update("75 53 -", meter_value);
     ecc:	86 e1       	ldi	r24, 0x16	; 22
     ece:	91 e2       	ldi	r25, 0x21	; 33
     ed0:	be 01       	movw	r22, r28
     ed2:	6f 5f       	subi	r22, 0xFF	; 255
     ed4:	7f 4f       	sbci	r23, 0xFF	; 255
     ed6:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <lcd_update>
				adc_data(12, VOLTAGE_POS, meter_value); //D V+
     eda:	8c e0       	ldi	r24, 0x0C	; 12
     edc:	67 e6       	ldi	r22, 0x67	; 103
     ede:	ae 01       	movw	r20, r28
     ee0:	4f 5f       	subi	r20, 0xFF	; 255
     ee2:	5f 4f       	sbci	r21, 0xFF	; 255
     ee4:	0e 94 cf 01 	call	0x39e	; 0x39e <adc_data>
				lcd_update("75 54 ", meter_value);
     ee8:	8e e1       	ldi	r24, 0x1E	; 30
     eea:	91 e2       	ldi	r25, 0x21	; 33
     eec:	be 01       	movw	r22, r28
     eee:	6f 5f       	subi	r22, 0xFF	; 255
     ef0:	7f 4f       	sbci	r23, 0xFF	; 255
     ef2:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <lcd_update>
				adc_data(13, CURRENT_HI_RES, meter_value); //D I+
     ef6:	8d e0       	ldi	r24, 0x0D	; 13
     ef8:	6a e6       	ldi	r22, 0x6A	; 106
     efa:	ae 01       	movw	r20, r28
     efc:	4f 5f       	subi	r20, 0xFF	; 255
     efe:	5f 4f       	sbci	r21, 0xFF	; 255
     f00:	0e 94 cf 01 	call	0x39e	; 0x39e <adc_data>
				lcd_update("75 55 ", meter_value);
     f04:	85 e2       	ldi	r24, 0x25	; 37
     f06:	91 e2       	ldi	r25, 0x21	; 33
     f08:	be 01       	movw	r22, r28
     f0a:	6f 5f       	subi	r22, 0xFF	; 255
     f0c:	7f 4f       	sbci	r23, 0xFF	; 255
     f0e:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <lcd_update>
				adc_data(14, VOLTAGE_NEG, meter_value); //D V-
     f12:	8e e0       	ldi	r24, 0x0E	; 14
     f14:	68 e6       	ldi	r22, 0x68	; 104
     f16:	ae 01       	movw	r20, r28
     f18:	4f 5f       	subi	r20, 0xFF	; 255
     f1a:	5f 4f       	sbci	r21, 0xFF	; 255
     f1c:	0e 94 cf 01 	call	0x39e	; 0x39e <adc_data>
				lcd_update("75 56 -", meter_value);
     f20:	8c e2       	ldi	r24, 0x2C	; 44
     f22:	91 e2       	ldi	r25, 0x21	; 33
     f24:	be 01       	movw	r22, r28
     f26:	6f 5f       	subi	r22, 0xFF	; 255
     f28:	7f 4f       	sbci	r23, 0xFF	; 255
     f2a:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <lcd_update>
				adc_data(15, CURRENT_HI_RES, meter_value); //D I-
     f2e:	8f e0       	ldi	r24, 0x0F	; 15
     f30:	6a e6       	ldi	r22, 0x6A	; 106
     f32:	ae 01       	movw	r20, r28
     f34:	4f 5f       	subi	r20, 0xFF	; 255
     f36:	5f 4f       	sbci	r21, 0xFF	; 255
     f38:	0e 94 cf 01 	call	0x39e	; 0x39e <adc_data>
				lcd_update("75 57 -", meter_value);
     f3c:	84 e3       	ldi	r24, 0x34	; 52
     f3e:	91 e2       	ldi	r25, 0x21	; 33
     f40:	be 01       	movw	r22, r28
     f42:	6f 5f       	subi	r22, 0xFF	; 255
     f44:	7f 4f       	sbci	r23, 0xFF	; 255
     f46:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <lcd_update>
				break;
     f4a:	53 c1       	rjmp	.+678    	; 0x11f2 <service_brain+0x5ba>
			case MENU_CONTROL:
				pwr_adj_data(0, meter_value);
     f4c:	80 e0       	ldi	r24, 0x00	; 0
     f4e:	be 01       	movw	r22, r28
     f50:	6f 5f       	subi	r22, 0xFF	; 255
     f52:	7f 4f       	sbci	r23, 0xFF	; 255
     f54:	0e 94 92 10 	call	0x2124	; 0x2124 <pwr_adj_data>
				lcd_update("75 1 ", meter_value);
     f58:	8c ec       	ldi	r24, 0xCC	; 204
     f5a:	90 e2       	ldi	r25, 0x20	; 32
     f5c:	be 01       	movw	r22, r28
     f5e:	6f 5f       	subi	r22, 0xFF	; 255
     f60:	7f 4f       	sbci	r23, 0xFF	; 255
     f62:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <lcd_update>
				pwr_adj_data(1, meter_value);
     f66:	81 e0       	ldi	r24, 0x01	; 1
     f68:	be 01       	movw	r22, r28
     f6a:	6f 5f       	subi	r22, 0xFF	; 255
     f6c:	7f 4f       	sbci	r23, 0xFF	; 255
     f6e:	0e 94 92 10 	call	0x2124	; 0x2124 <pwr_adj_data>
				lcd_update("75 11 ", meter_value);
     f72:	82 ed       	ldi	r24, 0xD2	; 210
     f74:	90 e2       	ldi	r25, 0x20	; 32
     f76:	be 01       	movw	r22, r28
     f78:	6f 5f       	subi	r22, 0xFF	; 255
     f7a:	7f 4f       	sbci	r23, 0xFF	; 255
     f7c:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <lcd_update>
				pwr_adj_data(2, meter_value);
     f80:	82 e0       	ldi	r24, 0x02	; 2
     f82:	be 01       	movw	r22, r28
     f84:	6f 5f       	subi	r22, 0xFF	; 255
     f86:	7f 4f       	sbci	r23, 0xFF	; 255
     f88:	0e 94 92 10 	call	0x2124	; 0x2124 <pwr_adj_data>
				lcd_update("75 2 ", meter_value);
     f8c:	89 ed       	ldi	r24, 0xD9	; 217
     f8e:	90 e2       	ldi	r25, 0x20	; 32
     f90:	be 01       	movw	r22, r28
     f92:	6f 5f       	subi	r22, 0xFF	; 255
     f94:	7f 4f       	sbci	r23, 0xFF	; 255
     f96:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <lcd_update>
				pwr_adj_data(3, meter_value);
     f9a:	83 e0       	ldi	r24, 0x03	; 3
     f9c:	be 01       	movw	r22, r28
     f9e:	6f 5f       	subi	r22, 0xFF	; 255
     fa0:	7f 4f       	sbci	r23, 0xFF	; 255
     fa2:	0e 94 92 10 	call	0x2124	; 0x2124 <pwr_adj_data>
				lcd_update("75 21 ", meter_value);
     fa6:	8f ed       	ldi	r24, 0xDF	; 223
     fa8:	90 e2       	ldi	r25, 0x20	; 32
     faa:	be 01       	movw	r22, r28
     fac:	6f 5f       	subi	r22, 0xFF	; 255
     fae:	7f 4f       	sbci	r23, 0xFF	; 255
     fb0:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <lcd_update>
				pwr_adj_data(4, meter_value);
     fb4:	84 e0       	ldi	r24, 0x04	; 4
     fb6:	be 01       	movw	r22, r28
     fb8:	6f 5f       	subi	r22, 0xFF	; 255
     fba:	7f 4f       	sbci	r23, 0xFF	; 255
     fbc:	0e 94 92 10 	call	0x2124	; 0x2124 <pwr_adj_data>
				lcd_update("75 3 ", meter_value);
     fc0:	86 ee       	ldi	r24, 0xE6	; 230
     fc2:	90 e2       	ldi	r25, 0x20	; 32
     fc4:	be 01       	movw	r22, r28
     fc6:	6f 5f       	subi	r22, 0xFF	; 255
     fc8:	7f 4f       	sbci	r23, 0xFF	; 255
     fca:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <lcd_update>
				pwr_adj_data(5, meter_value);
     fce:	85 e0       	ldi	r24, 0x05	; 5
     fd0:	be 01       	movw	r22, r28
     fd2:	6f 5f       	subi	r22, 0xFF	; 255
     fd4:	7f 4f       	sbci	r23, 0xFF	; 255
     fd6:	0e 94 92 10 	call	0x2124	; 0x2124 <pwr_adj_data>
				lcd_update("75 31 ", meter_value);
     fda:	8c ee       	ldi	r24, 0xEC	; 236
     fdc:	90 e2       	ldi	r25, 0x20	; 32
     fde:	be 01       	movw	r22, r28
     fe0:	6f 5f       	subi	r22, 0xFF	; 255
     fe2:	7f 4f       	sbci	r23, 0xFF	; 255
     fe4:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <lcd_update>
				pwr_adj_data(6, meter_value);
     fe8:	86 e0       	ldi	r24, 0x06	; 6
     fea:	be 01       	movw	r22, r28
     fec:	6f 5f       	subi	r22, 0xFF	; 255
     fee:	7f 4f       	sbci	r23, 0xFF	; 255
     ff0:	0e 94 92 10 	call	0x2124	; 0x2124 <pwr_adj_data>
				lcd_update("75 4 ", meter_value);
     ff4:	83 ef       	ldi	r24, 0xF3	; 243
     ff6:	90 e2       	ldi	r25, 0x20	; 32
     ff8:	be 01       	movw	r22, r28
     ffa:	6f 5f       	subi	r22, 0xFF	; 255
     ffc:	7f 4f       	sbci	r23, 0xFF	; 255
     ffe:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <lcd_update>
				pwr_adj_data(7, meter_value);
    1002:	87 e0       	ldi	r24, 0x07	; 7
    1004:	be 01       	movw	r22, r28
    1006:	6f 5f       	subi	r22, 0xFF	; 255
    1008:	7f 4f       	sbci	r23, 0xFF	; 255
    100a:	0e 94 92 10 	call	0x2124	; 0x2124 <pwr_adj_data>
				lcd_update("75 41 ", meter_value);
    100e:	89 ef       	ldi	r24, 0xF9	; 249
    1010:	90 e2       	ldi	r25, 0x20	; 32
    1012:	be 01       	movw	r22, r28
    1014:	6f 5f       	subi	r22, 0xFF	; 255
    1016:	7f 4f       	sbci	r23, 0xFF	; 255
    1018:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <lcd_update>
				break;
    101c:	ea c0       	rjmp	.+468    	; 0x11f2 <service_brain+0x5ba>
			case MENU_DIAL_A:
				if ((pwr_adj_channel_dirty & B8(00000011)) > 0){
    101e:	80 91 ac 26 	lds	r24, 0x26AC
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	83 70       	andi	r24, 0x03	; 3
    1026:	90 70       	andi	r25, 0x00	; 0
    1028:	18 16       	cp	r1, r24
    102a:	19 06       	cpc	r1, r25
    102c:	0c f0       	brlt	.+2      	; 0x1030 <service_brain+0x3f8>
    102e:	e1 c0       	rjmp	.+450    	; 0x11f2 <service_brain+0x5ba>
					//Control Inputs
					pwr_adj_control(0, meter_value);
    1030:	80 e0       	ldi	r24, 0x00	; 0
    1032:	be 01       	movw	r22, r28
    1034:	6f 5f       	subi	r22, 0xFF	; 255
    1036:	7f 4f       	sbci	r23, 0xFF	; 255
    1038:	0e 94 cf 10 	call	0x219e	; 0x219e <pwr_adj_control>
					lcd_update("75 94 ", meter_value);
    103c:	8c e3       	ldi	r24, 0x3C	; 60
    103e:	91 e2       	ldi	r25, 0x21	; 33
    1040:	be 01       	movw	r22, r28
    1042:	6f 5f       	subi	r22, 0xFF	; 255
    1044:	7f 4f       	sbci	r23, 0xFF	; 255
    1046:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <lcd_update>
					pwr_adj_control(1, meter_value);
    104a:	81 e0       	ldi	r24, 0x01	; 1
    104c:	be 01       	movw	r22, r28
    104e:	6f 5f       	subi	r22, 0xFF	; 255
    1050:	7f 4f       	sbci	r23, 0xFF	; 255
    1052:	0e 94 cf 10 	call	0x219e	; 0x219e <pwr_adj_control>
					lcd_update("75 95 ", meter_value);
    1056:	83 e4       	ldi	r24, 0x43	; 67
    1058:	91 e2       	ldi	r25, 0x21	; 33
    105a:	be 01       	movw	r22, r28
    105c:	6f 5f       	subi	r22, 0xFF	; 255
    105e:	7f 4f       	sbci	r23, 0xFF	; 255
    1060:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <lcd_update>
					//Voltage Monitors
					pwr_adj_data(0, meter_value);
    1064:	80 e0       	ldi	r24, 0x00	; 0
    1066:	be 01       	movw	r22, r28
    1068:	6f 5f       	subi	r22, 0xFF	; 255
    106a:	7f 4f       	sbci	r23, 0xFF	; 255
    106c:	0e 94 92 10 	call	0x2124	; 0x2124 <pwr_adj_data>
					lcd_update("75 92 ", meter_value);
    1070:	8a e4       	ldi	r24, 0x4A	; 74
    1072:	91 e2       	ldi	r25, 0x21	; 33
    1074:	be 01       	movw	r22, r28
    1076:	6f 5f       	subi	r22, 0xFF	; 255
    1078:	7f 4f       	sbci	r23, 0xFF	; 255
    107a:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <lcd_update>
					pwr_adj_data(1, meter_value);
    107e:	81 e0       	ldi	r24, 0x01	; 1
    1080:	be 01       	movw	r22, r28
    1082:	6f 5f       	subi	r22, 0xFF	; 255
    1084:	7f 4f       	sbci	r23, 0xFF	; 255
    1086:	0e 94 92 10 	call	0x2124	; 0x2124 <pwr_adj_data>
					lcd_update("75 93 ", meter_value);
    108a:	81 e5       	ldi	r24, 0x51	; 81
    108c:	91 e2       	ldi	r25, 0x21	; 33
    108e:	be 01       	movw	r22, r28
    1090:	6f 5f       	subi	r22, 0xFF	; 255
    1092:	7f 4f       	sbci	r23, 0xFF	; 255
    1094:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <lcd_update>
    1098:	ac c0       	rjmp	.+344    	; 0x11f2 <service_brain+0x5ba>
				}					
				break;
			case MENU_DIAL_B:
				if ((pwr_adj_channel_dirty & B8(00001100)) > 0){
    109a:	80 91 ac 26 	lds	r24, 0x26AC
    109e:	8c 70       	andi	r24, 0x0C	; 12
    10a0:	09 f4       	brne	.+2      	; 0x10a4 <service_brain+0x46c>
    10a2:	a7 c0       	rjmp	.+334    	; 0x11f2 <service_brain+0x5ba>
					//Control Inputs
					pwr_adj_control(2, meter_value);
    10a4:	82 e0       	ldi	r24, 0x02	; 2
    10a6:	be 01       	movw	r22, r28
    10a8:	6f 5f       	subi	r22, 0xFF	; 255
    10aa:	7f 4f       	sbci	r23, 0xFF	; 255
    10ac:	0e 94 cf 10 	call	0x219e	; 0x219e <pwr_adj_control>
					lcd_update("75 94 ", meter_value);
    10b0:	8c e3       	ldi	r24, 0x3C	; 60
    10b2:	91 e2       	ldi	r25, 0x21	; 33
    10b4:	be 01       	movw	r22, r28
    10b6:	6f 5f       	subi	r22, 0xFF	; 255
    10b8:	7f 4f       	sbci	r23, 0xFF	; 255
    10ba:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <lcd_update>
					pwr_adj_control(3, meter_value);
    10be:	83 e0       	ldi	r24, 0x03	; 3
    10c0:	be 01       	movw	r22, r28
    10c2:	6f 5f       	subi	r22, 0xFF	; 255
    10c4:	7f 4f       	sbci	r23, 0xFF	; 255
    10c6:	0e 94 cf 10 	call	0x219e	; 0x219e <pwr_adj_control>
					lcd_update("75 95 ", meter_value);
    10ca:	83 e4       	ldi	r24, 0x43	; 67
    10cc:	91 e2       	ldi	r25, 0x21	; 33
    10ce:	be 01       	movw	r22, r28
    10d0:	6f 5f       	subi	r22, 0xFF	; 255
    10d2:	7f 4f       	sbci	r23, 0xFF	; 255
    10d4:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <lcd_update>
					//Voltage Monitors
					pwr_adj_data(2, meter_value);
    10d8:	82 e0       	ldi	r24, 0x02	; 2
    10da:	be 01       	movw	r22, r28
    10dc:	6f 5f       	subi	r22, 0xFF	; 255
    10de:	7f 4f       	sbci	r23, 0xFF	; 255
    10e0:	0e 94 92 10 	call	0x2124	; 0x2124 <pwr_adj_data>
					lcd_update("75 92 ", meter_value);
    10e4:	8a e4       	ldi	r24, 0x4A	; 74
    10e6:	91 e2       	ldi	r25, 0x21	; 33
    10e8:	be 01       	movw	r22, r28
    10ea:	6f 5f       	subi	r22, 0xFF	; 255
    10ec:	7f 4f       	sbci	r23, 0xFF	; 255
    10ee:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <lcd_update>
					pwr_adj_data(3, meter_value);
    10f2:	83 e0       	ldi	r24, 0x03	; 3
    10f4:	be 01       	movw	r22, r28
    10f6:	6f 5f       	subi	r22, 0xFF	; 255
    10f8:	7f 4f       	sbci	r23, 0xFF	; 255
    10fa:	0e 94 92 10 	call	0x2124	; 0x2124 <pwr_adj_data>
					lcd_update("75 93 ", meter_value);
    10fe:	81 e5       	ldi	r24, 0x51	; 81
    1100:	91 e2       	ldi	r25, 0x21	; 33
    1102:	be 01       	movw	r22, r28
    1104:	6f 5f       	subi	r22, 0xFF	; 255
    1106:	7f 4f       	sbci	r23, 0xFF	; 255
    1108:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <lcd_update>
    110c:	72 c0       	rjmp	.+228    	; 0x11f2 <service_brain+0x5ba>
				}
				break;
			case MENU_DIAL_C:
				if ((pwr_adj_channel_dirty & B8(00110000)) > 0){
    110e:	80 91 ac 26 	lds	r24, 0x26AC
    1112:	80 73       	andi	r24, 0x30	; 48
    1114:	09 f4       	brne	.+2      	; 0x1118 <service_brain+0x4e0>
    1116:	6d c0       	rjmp	.+218    	; 0x11f2 <service_brain+0x5ba>
					//Control Inputs
					pwr_adj_control(4, meter_value);
    1118:	84 e0       	ldi	r24, 0x04	; 4
    111a:	be 01       	movw	r22, r28
    111c:	6f 5f       	subi	r22, 0xFF	; 255
    111e:	7f 4f       	sbci	r23, 0xFF	; 255
    1120:	0e 94 cf 10 	call	0x219e	; 0x219e <pwr_adj_control>
					lcd_update("75 94 ", meter_value);
    1124:	8c e3       	ldi	r24, 0x3C	; 60
    1126:	91 e2       	ldi	r25, 0x21	; 33
    1128:	be 01       	movw	r22, r28
    112a:	6f 5f       	subi	r22, 0xFF	; 255
    112c:	7f 4f       	sbci	r23, 0xFF	; 255
    112e:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <lcd_update>
					pwr_adj_control(5, meter_value);
    1132:	85 e0       	ldi	r24, 0x05	; 5
    1134:	be 01       	movw	r22, r28
    1136:	6f 5f       	subi	r22, 0xFF	; 255
    1138:	7f 4f       	sbci	r23, 0xFF	; 255
    113a:	0e 94 cf 10 	call	0x219e	; 0x219e <pwr_adj_control>
					lcd_update("75 95 ", meter_value);
    113e:	83 e4       	ldi	r24, 0x43	; 67
    1140:	91 e2       	ldi	r25, 0x21	; 33
    1142:	be 01       	movw	r22, r28
    1144:	6f 5f       	subi	r22, 0xFF	; 255
    1146:	7f 4f       	sbci	r23, 0xFF	; 255
    1148:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <lcd_update>
					//Voltage Monitors
					pwr_adj_data(4, meter_value);
    114c:	84 e0       	ldi	r24, 0x04	; 4
    114e:	be 01       	movw	r22, r28
    1150:	6f 5f       	subi	r22, 0xFF	; 255
    1152:	7f 4f       	sbci	r23, 0xFF	; 255
    1154:	0e 94 92 10 	call	0x2124	; 0x2124 <pwr_adj_data>
					lcd_update("75 92 ", meter_value);
    1158:	8a e4       	ldi	r24, 0x4A	; 74
    115a:	91 e2       	ldi	r25, 0x21	; 33
    115c:	be 01       	movw	r22, r28
    115e:	6f 5f       	subi	r22, 0xFF	; 255
    1160:	7f 4f       	sbci	r23, 0xFF	; 255
    1162:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <lcd_update>
					pwr_adj_data(5, meter_value);
    1166:	85 e0       	ldi	r24, 0x05	; 5
    1168:	be 01       	movw	r22, r28
    116a:	6f 5f       	subi	r22, 0xFF	; 255
    116c:	7f 4f       	sbci	r23, 0xFF	; 255
    116e:	0e 94 92 10 	call	0x2124	; 0x2124 <pwr_adj_data>
					lcd_update("75 93 ", meter_value);
    1172:	81 e5       	ldi	r24, 0x51	; 81
    1174:	91 e2       	ldi	r25, 0x21	; 33
    1176:	be 01       	movw	r22, r28
    1178:	6f 5f       	subi	r22, 0xFF	; 255
    117a:	7f 4f       	sbci	r23, 0xFF	; 255
    117c:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <lcd_update>
    1180:	38 c0       	rjmp	.+112    	; 0x11f2 <service_brain+0x5ba>
				}
				break;
			case MENU_DIAL_D:
				if ((pwr_adj_channel_dirty & B8(11000000)) > 0){
    1182:	80 91 ac 26 	lds	r24, 0x26AC
    1186:	80 7c       	andi	r24, 0xC0	; 192
    1188:	a1 f1       	breq	.+104    	; 0x11f2 <service_brain+0x5ba>
					//Control Inputs
					pwr_adj_control(6, meter_value);
    118a:	86 e0       	ldi	r24, 0x06	; 6
    118c:	be 01       	movw	r22, r28
    118e:	6f 5f       	subi	r22, 0xFF	; 255
    1190:	7f 4f       	sbci	r23, 0xFF	; 255
    1192:	0e 94 cf 10 	call	0x219e	; 0x219e <pwr_adj_control>
					lcd_update("75 94 ", meter_value);
    1196:	8c e3       	ldi	r24, 0x3C	; 60
    1198:	91 e2       	ldi	r25, 0x21	; 33
    119a:	be 01       	movw	r22, r28
    119c:	6f 5f       	subi	r22, 0xFF	; 255
    119e:	7f 4f       	sbci	r23, 0xFF	; 255
    11a0:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <lcd_update>
					pwr_adj_control(7, meter_value);
    11a4:	87 e0       	ldi	r24, 0x07	; 7
    11a6:	be 01       	movw	r22, r28
    11a8:	6f 5f       	subi	r22, 0xFF	; 255
    11aa:	7f 4f       	sbci	r23, 0xFF	; 255
    11ac:	0e 94 cf 10 	call	0x219e	; 0x219e <pwr_adj_control>
					lcd_update("75 95 ", meter_value);
    11b0:	83 e4       	ldi	r24, 0x43	; 67
    11b2:	91 e2       	ldi	r25, 0x21	; 33
    11b4:	be 01       	movw	r22, r28
    11b6:	6f 5f       	subi	r22, 0xFF	; 255
    11b8:	7f 4f       	sbci	r23, 0xFF	; 255
    11ba:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <lcd_update>
					//Voltage Monitors
					pwr_adj_data(6, meter_value);
    11be:	86 e0       	ldi	r24, 0x06	; 6
    11c0:	be 01       	movw	r22, r28
    11c2:	6f 5f       	subi	r22, 0xFF	; 255
    11c4:	7f 4f       	sbci	r23, 0xFF	; 255
    11c6:	0e 94 92 10 	call	0x2124	; 0x2124 <pwr_adj_data>
					lcd_update("75 92 ", meter_value);
    11ca:	8a e4       	ldi	r24, 0x4A	; 74
    11cc:	91 e2       	ldi	r25, 0x21	; 33
    11ce:	be 01       	movw	r22, r28
    11d0:	6f 5f       	subi	r22, 0xFF	; 255
    11d2:	7f 4f       	sbci	r23, 0xFF	; 255
    11d4:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <lcd_update>
					pwr_adj_data(7, meter_value);
    11d8:	87 e0       	ldi	r24, 0x07	; 7
    11da:	be 01       	movw	r22, r28
    11dc:	6f 5f       	subi	r22, 0xFF	; 255
    11de:	7f 4f       	sbci	r23, 0xFF	; 255
    11e0:	0e 94 92 10 	call	0x2124	; 0x2124 <pwr_adj_data>
					lcd_update("75 93 ", meter_value);
    11e4:	81 e5       	ldi	r24, 0x51	; 81
    11e6:	91 e2       	ldi	r25, 0x21	; 33
    11e8:	be 01       	movw	r22, r28
    11ea:	6f 5f       	subi	r22, 0xFF	; 255
    11ec:	7f 4f       	sbci	r23, 0xFF	; 255
    11ee:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <lcd_update>
				}
				break;
		}	
	}
}
    11f2:	2c 96       	adiw	r28, 0x0c	; 12
    11f4:	cd bf       	out	0x3d, r28	; 61
    11f6:	de bf       	out	0x3e, r29	; 62
    11f8:	df 91       	pop	r29
    11fa:	cf 91       	pop	r28
    11fc:	08 95       	ret

000011fe <eeprom_save>:
//#############################################################
//## API
//#############################################################

void eeprom_save(){
	eeprom_write_byte(&nv_STATE_power_channels, STATE_power_channels);
    11fe:	80 e0       	ldi	r24, 0x00	; 0
    1200:	90 e0       	ldi	r25, 0x00	; 0
    1202:	60 91 82 25 	lds	r22, 0x2582
    1206:	0e 94 23 2f 	call	0x5e46	; 0x5e46 <__eewr_byte_x128a1>
	eeprom_write_block((void*)&pwr_adj_values, (void*)&nv_pwr_adj_values, PWR_ADJ_NUM_CHANNELS*2); //multiple size by 2 since uint16_t = 2 bytes
    120a:	8d ea       	ldi	r24, 0xAD	; 173
    120c:	96 e2       	ldi	r25, 0x26	; 38
    120e:	61 e0       	ldi	r22, 0x01	; 1
    1210:	70 e0       	ldi	r23, 0x00	; 0
    1212:	40 e1       	ldi	r20, 0x10	; 16
    1214:	50 e0       	ldi	r21, 0x00	; 0
    1216:	0e 94 19 2f 	call	0x5e32	; 0x5e32 <__eewr_block_x128a1>
}
    121a:	08 95       	ret

0000121c <eeprom_restore>:

void eeprom_restore(){
	STATE_power_channels = eeprom_read_byte(&nv_STATE_power_channels);
    121c:	80 e0       	ldi	r24, 0x00	; 0
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	0e 94 09 2f 	call	0x5e12	; 0x5e12 <__eerd_byte_x128a1>
    1224:	80 93 82 25 	sts	0x2582, r24
	eeprom_read_block((void*)&pwr_adj_values, (void*)&nv_pwr_adj_values, PWR_ADJ_NUM_CHANNELS*2);
    1228:	8d ea       	ldi	r24, 0xAD	; 173
    122a:	96 e2       	ldi	r25, 0x26	; 38
    122c:	61 e0       	ldi	r22, 0x01	; 1
    122e:	70 e0       	ldi	r23, 0x00	; 0
    1230:	40 e1       	ldi	r20, 0x10	; 16
    1232:	50 e0       	ldi	r21, 0x00	; 0
    1234:	0e 94 fd 2e 	call	0x5dfa	; 0x5dfa <__eerd_block_x128a1>
}
    1238:	08 95       	ret

0000123a <init_eeprom>:
//#############################################################
//## Initialization
//#############################################################

void init_eeprom(){
	eeprom_restore();
    123a:	0e 94 0e 09 	call	0x121c	; 0x121c <eeprom_restore>
}
    123e:	08 95       	ret

00001240 <eeprom_read>:
	eeprom_read_block((void*)&pwr_adj_values, (void*)&nv_pwr_adj_values, PWR_ADJ_NUM_CHANNELS*2);
}

//mostly for debugging
uint8_t eeprom_read(){
	return eeprom_read_byte(&nv_STATE_power_channels);
    1240:	80 e0       	ldi	r24, 0x00	; 0
    1242:	90 e0       	ldi	r25, 0x00	; 0
    1244:	0e 94 09 2f 	call	0x5e12	; 0x5e12 <__eerd_byte_x128a1>
}
    1248:	08 95       	ret

0000124a <service_eeprom>:
//#############################################################

//2ms Service Loop -- Call once every 2ms
void service_eeprom(){
	
}
    124a:	08 95       	ret

0000124c <init_fp>:
		PK6: Rotary Channel A
		PK7: Rotary Channel B
				
	*/
	//LED's
	PORTJ.PIN1CTRL = B8(01000000); //invert pin logic
    124c:	e0 e0       	ldi	r30, 0x00	; 0
    124e:	f7 e0       	ldi	r31, 0x07	; 7
    1250:	80 e4       	ldi	r24, 0x40	; 64
    1252:	81 8b       	std	Z+17, r24	; 0x11
	PORTJ.PIN2CTRL = B8(01000000); //invert pin logic
    1254:	82 8b       	std	Z+18, r24	; 0x12
	PORTJ.PIN3CTRL = B8(01000000); //invert pin logic
    1256:	83 8b       	std	Z+19, r24	; 0x13
	PORTJ.PIN4CTRL = B8(01000000); //invert pin logic
    1258:	84 8b       	std	Z+20, r24	; 0x14
	PORTJ.OUTCLR = B8(00011110); //pins to low (LED's off, remember: inverted!)	
    125a:	8e e1       	ldi	r24, 0x1E	; 30
    125c:	86 83       	std	Z+6, r24	; 0x06
	PORTJ.DIRSET = B8(00011110); //pins to output	
    125e:	81 83       	std	Z+1, r24	; 0x01
	
	fp_channel_mask = 0x00;
    1260:	10 92 9a 26 	sts	0x269A, r1
	
	//Switches
	//	SciPSU FP switches have hardware pull-up and hardware debounce
	PORTK.DIRCLR = B8(00111111); //This is the default condition, but just to be safe
    1264:	8f e3       	ldi	r24, 0x3F	; 63
    1266:	e0 e2       	ldi	r30, 0x20	; 32
    1268:	f7 e0       	ldi	r31, 0x07	; 7
    126a:	82 83       	std	Z+2, r24	; 0x02
	fp_rot_status = RELEASED; fp_master_status = RELEASED;
    126c:	89 e2       	ldi	r24, 0x29	; 41
    126e:	80 93 94 26 	sts	0x2694, r24
    1272:	80 93 91 26 	sts	0x2691, r24
	
	//Button state (open switch = 1, ergo...)
	fp_button_time0 = 0xFF;
    1276:	8f ef       	ldi	r24, 0xFF	; 255
    1278:	80 93 a9 26 	sts	0x26A9, r24
	fp_button_time1 = 0xFF;
    127c:	80 93 96 26 	sts	0x2696, r24
	fp_button_time2 = 0xFF;
    1280:	80 93 90 26 	sts	0x2690, r24
}
    1284:	08 95       	ret

00001286 <fp_led_enable>:
//## LEDs
//#############################################################

// Uses generic defines for channel (see main.h)
void fp_led_enable(uint8_t which){
	switch(which){
    1286:	82 30       	cpi	r24, 0x02	; 2
    1288:	b1 f0       	breq	.+44     	; 0x12b6 <fp_led_enable+0x30>
    128a:	83 30       	cpi	r24, 0x03	; 3
    128c:	28 f4       	brcc	.+10     	; 0x1298 <fp_led_enable+0x12>
    128e:	88 23       	and	r24, r24
    1290:	41 f0       	breq	.+16     	; 0x12a2 <fp_led_enable+0x1c>
    1292:	81 30       	cpi	r24, 0x01	; 1
    1294:	19 f5       	brne	.+70     	; 0x12dc <fp_led_enable+0x56>
    1296:	0a c0       	rjmp	.+20     	; 0x12ac <fp_led_enable+0x26>
    1298:	83 30       	cpi	r24, 0x03	; 3
    129a:	91 f0       	breq	.+36     	; 0x12c0 <fp_led_enable+0x3a>
    129c:	85 30       	cpi	r24, 0x05	; 5
    129e:	f1 f4       	brne	.+60     	; 0x12dc <fp_led_enable+0x56>
    12a0:	14 c0       	rjmp	.+40     	; 0x12ca <fp_led_enable+0x44>
		case CHANNEL_A:
			PORTJ.OUTSET = B8(00000010); //PJ1
    12a2:	82 e0       	ldi	r24, 0x02	; 2
    12a4:	e0 e0       	ldi	r30, 0x00	; 0
    12a6:	f7 e0       	ldi	r31, 0x07	; 7
    12a8:	85 83       	std	Z+5, r24	; 0x05
			break;
    12aa:	08 95       	ret
		case CHANNEL_B:
			PORTJ.OUTSET = B8(00000100); //PJ2
    12ac:	84 e0       	ldi	r24, 0x04	; 4
    12ae:	e0 e0       	ldi	r30, 0x00	; 0
    12b0:	f7 e0       	ldi	r31, 0x07	; 7
    12b2:	85 83       	std	Z+5, r24	; 0x05
			break;
    12b4:	08 95       	ret
		case CHANNEL_C:
			PORTJ.OUTSET = B8(00001000); //PJ3
    12b6:	88 e0       	ldi	r24, 0x08	; 8
    12b8:	e0 e0       	ldi	r30, 0x00	; 0
    12ba:	f7 e0       	ldi	r31, 0x07	; 7
    12bc:	85 83       	std	Z+5, r24	; 0x05
			break;
    12be:	08 95       	ret
		case CHANNEL_D:
			PORTJ.OUTSET = B8(00010000); //PJ4
    12c0:	80 e1       	ldi	r24, 0x10	; 16
    12c2:	e0 e0       	ldi	r30, 0x00	; 0
    12c4:	f7 e0       	ldi	r31, 0x07	; 7
    12c6:	85 83       	std	Z+5, r24	; 0x05
			break;			
    12c8:	08 95       	ret
		case CHANNEL_M:
			PORTJ.OUTSET = STATE_power_channels << 1; //left shift 1 to move [0-3] state to [1-4] pin locations
    12ca:	80 91 82 25 	lds	r24, 0x2582
    12ce:	88 0f       	add	r24, r24
    12d0:	e0 e0       	ldi	r30, 0x00	; 0
    12d2:	f7 e0       	ldi	r31, 0x07	; 7
    12d4:	85 83       	std	Z+5, r24	; 0x05
			led_on(LED_3); //Master LED is dimmable so its over in the ui.h module
    12d6:	82 e0       	ldi	r24, 0x02	; 2
    12d8:	0e 94 60 2c 	call	0x58c0	; 0x58c0 <led_on>
    12dc:	08 95       	ret

000012de <fp_led_disable>:
			break;
	}
}

void fp_led_disable(uint8_t which){
	switch(which){
    12de:	82 30       	cpi	r24, 0x02	; 2
    12e0:	b1 f0       	breq	.+44     	; 0x130e <fp_led_disable+0x30>
    12e2:	83 30       	cpi	r24, 0x03	; 3
    12e4:	28 f4       	brcc	.+10     	; 0x12f0 <fp_led_disable+0x12>
    12e6:	88 23       	and	r24, r24
    12e8:	41 f0       	breq	.+16     	; 0x12fa <fp_led_disable+0x1c>
    12ea:	81 30       	cpi	r24, 0x01	; 1
    12ec:	09 f5       	brne	.+66     	; 0x1330 <fp_led_disable+0x52>
    12ee:	0a c0       	rjmp	.+20     	; 0x1304 <fp_led_disable+0x26>
    12f0:	83 30       	cpi	r24, 0x03	; 3
    12f2:	91 f0       	breq	.+36     	; 0x1318 <fp_led_disable+0x3a>
    12f4:	85 30       	cpi	r24, 0x05	; 5
    12f6:	e1 f4       	brne	.+56     	; 0x1330 <fp_led_disable+0x52>
    12f8:	14 c0       	rjmp	.+40     	; 0x1322 <fp_led_disable+0x44>
		case CHANNEL_A:
			PORTJ.OUTCLR = B8(00000010); //PJ1
    12fa:	82 e0       	ldi	r24, 0x02	; 2
    12fc:	e0 e0       	ldi	r30, 0x00	; 0
    12fe:	f7 e0       	ldi	r31, 0x07	; 7
    1300:	86 83       	std	Z+6, r24	; 0x06
			break;
    1302:	08 95       	ret
		case CHANNEL_B:
			PORTJ.OUTCLR = B8(00000100); //PJ2
    1304:	84 e0       	ldi	r24, 0x04	; 4
    1306:	e0 e0       	ldi	r30, 0x00	; 0
    1308:	f7 e0       	ldi	r31, 0x07	; 7
    130a:	86 83       	std	Z+6, r24	; 0x06
			break;
    130c:	08 95       	ret
		case CHANNEL_C:
			PORTJ.OUTCLR = B8(00001000); //PJ3
    130e:	88 e0       	ldi	r24, 0x08	; 8
    1310:	e0 e0       	ldi	r30, 0x00	; 0
    1312:	f7 e0       	ldi	r31, 0x07	; 7
    1314:	86 83       	std	Z+6, r24	; 0x06
			break;
    1316:	08 95       	ret
		case CHANNEL_D:
			PORTJ.OUTCLR = B8(00010000); //PJ4
    1318:	80 e1       	ldi	r24, 0x10	; 16
    131a:	e0 e0       	ldi	r30, 0x00	; 0
    131c:	f7 e0       	ldi	r31, 0x07	; 7
    131e:	86 83       	std	Z+6, r24	; 0x06
			break;
    1320:	08 95       	ret
		case CHANNEL_M:
			fp_counter = 0; fp_counter2 = 0; fp_updown = 1;
    1322:	10 92 95 26 	sts	0x2695, r1
    1326:	10 92 9c 26 	sts	0x269C, r1
    132a:	81 e0       	ldi	r24, 0x01	; 1
    132c:	80 93 9d 26 	sts	0x269D, r24
    1330:	08 95       	ret

00001332 <_fp_read_switches>:
//#############################################################

//t0 = most recent --> t2 = oldest values
void _fp_read_switches(){
	//rotate
	fp_button_time2 = fp_button_time1;
    1332:	80 91 96 26 	lds	r24, 0x2696
    1336:	80 93 90 26 	sts	0x2690, r24
	fp_button_time1 = fp_button_time0;
    133a:	80 91 a9 26 	lds	r24, 0x26A9
    133e:	80 93 96 26 	sts	0x2696, r24
	fp_button_time0 = PORTK.IN;
    1342:	e0 e2       	ldi	r30, 0x20	; 32
    1344:	f7 e0       	ldi	r31, 0x07	; 7
    1346:	80 85       	ldd	r24, Z+8	; 0x08
    1348:	80 93 a9 26 	sts	0x26A9, r24
}
    134c:	08 95       	ret

0000134e <_fp_switch_pressed>:

//Button was pressed
void _fp_switch_pressed(uint8_t which){
    134e:	cf 93       	push	r28
    1350:	c8 2f       	mov	r28, r24
	audio_beep(1, 10);
    1352:	81 e0       	ldi	r24, 0x01	; 1
    1354:	6a e0       	ldi	r22, 0x0A	; 10
    1356:	70 e0       	ldi	r23, 0x00	; 0
    1358:	0e 94 fc 2c 	call	0x59f8	; 0x59f8 <audio_beep>
	brain_button_pressed();
    135c:	0e 94 b7 05 	call	0xb6e	; 0xb6e <brain_button_pressed>
	switch(which){
    1360:	c2 30       	cpi	r28, 0x02	; 2
    1362:	b1 f0       	breq	.+44     	; 0x1390 <_fp_switch_pressed+0x42>
    1364:	c3 30       	cpi	r28, 0x03	; 3
    1366:	28 f4       	brcc	.+10     	; 0x1372 <_fp_switch_pressed+0x24>
    1368:	cc 23       	and	r28, r28
    136a:	51 f0       	breq	.+20     	; 0x1380 <_fp_switch_pressed+0x32>
    136c:	c1 30       	cpi	r28, 0x01	; 1
    136e:	39 f5       	brne	.+78     	; 0x13be <_fp_switch_pressed+0x70>
    1370:	0b c0       	rjmp	.+22     	; 0x1388 <_fp_switch_pressed+0x3a>
    1372:	c4 30       	cpi	r28, 0x04	; 4
    1374:	a9 f0       	breq	.+42     	; 0x13a0 <_fp_switch_pressed+0x52>
    1376:	c4 30       	cpi	r28, 0x04	; 4
    1378:	78 f0       	brcs	.+30     	; 0x1398 <_fp_switch_pressed+0x4a>
    137a:	c5 30       	cpi	r28, 0x05	; 5
    137c:	01 f5       	brne	.+64     	; 0x13be <_fp_switch_pressed+0x70>
    137e:	18 c0       	rjmp	.+48     	; 0x13b0 <_fp_switch_pressed+0x62>
		case FP_SWITCH_A:
			brain_power(CHANNEL_A);			
    1380:	80 e0       	ldi	r24, 0x00	; 0
    1382:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <brain_power>
			break;
    1386:	1b c0       	rjmp	.+54     	; 0x13be <_fp_switch_pressed+0x70>
		case FP_SWITCH_B:
			brain_power(CHANNEL_B);
    1388:	81 e0       	ldi	r24, 0x01	; 1
    138a:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <brain_power>
			break;
    138e:	17 c0       	rjmp	.+46     	; 0x13be <_fp_switch_pressed+0x70>
		case FP_SWITCH_C:
			brain_power(CHANNEL_C);
    1390:	82 e0       	ldi	r24, 0x02	; 2
    1392:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <brain_power>
			break;
    1396:	13 c0       	rjmp	.+38     	; 0x13be <_fp_switch_pressed+0x70>
		case FP_SWITCH_D:
			brain_power(CHANNEL_D);
    1398:	83 e0       	ldi	r24, 0x03	; 3
    139a:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <brain_power>
			break;
    139e:	0f c0       	rjmp	.+30     	; 0x13be <_fp_switch_pressed+0x70>
		case FP_SWITCH_M:
			fp_press_counter = 0;
    13a0:	10 92 a7 26 	sts	0x26A7, r1
    13a4:	10 92 a8 26 	sts	0x26A8, r1
			fp_master_status = PRESSED;
    13a8:	8a e2       	ldi	r24, 0x2A	; 42
    13aa:	80 93 91 26 	sts	0x2691, r24
			break;
    13ae:	07 c0       	rjmp	.+14     	; 0x13be <_fp_switch_pressed+0x70>
		case FP_SWITCH_R:
			fp_press_counter = 0;
    13b0:	10 92 a7 26 	sts	0x26A7, r1
    13b4:	10 92 a8 26 	sts	0x26A8, r1
			fp_rot_status = PRESSED;
    13b8:	8a e2       	ldi	r24, 0x2A	; 42
    13ba:	80 93 94 26 	sts	0x2694, r24
			break;		
	}
}
    13be:	cf 91       	pop	r28
    13c0:	08 95       	ret

000013c2 <_fp_switch_released>:

//Button was released
void _fp_switch_released(uint8_t which){
	switch(which){
    13c2:	84 30       	cpi	r24, 0x04	; 4
    13c4:	19 f0       	breq	.+6      	; 0x13cc <_fp_switch_released+0xa>
    13c6:	85 30       	cpi	r24, 0x05	; 5
    13c8:	59 f5       	brne	.+86     	; 0x1420 <_fp_switch_released+0x5e>
    13ca:	15 c0       	rjmp	.+42     	; 0x13f6 <_fp_switch_released+0x34>
		case FP_SWITCH_C:
			break;
		case FP_SWITCH_D:
			break;
		case FP_SWITCH_M:
			fp_master_status = RELEASED;
    13cc:	89 e2       	ldi	r24, 0x29	; 41
    13ce:	80 93 91 26 	sts	0x2691, r24
			if (fp_press_counter > EEPROM_HOLD_TO_SAVE_TIME){
    13d2:	80 91 a7 26 	lds	r24, 0x26A7
    13d6:	90 91 a8 26 	lds	r25, 0x26A8
    13da:	23 e0       	ldi	r18, 0x03	; 3
    13dc:	89 3e       	cpi	r24, 0xE9	; 233
    13de:	92 07       	cpc	r25, r18
    13e0:	38 f0       	brcs	.+14     	; 0x13f0 <_fp_switch_released+0x2e>
				//Reboot LCD logic
				lcd_reboot();
    13e2:	0e 94 33 0b 	call	0x1666	; 0x1666 <lcd_reboot>
				fp_press_counter = 0;
    13e6:	10 92 a7 26 	sts	0x26A7, r1
    13ea:	10 92 a8 26 	sts	0x26A8, r1
    13ee:	08 95       	ret
			}
			else {
				brain_power_master();
    13f0:	0e 94 bf 05 	call	0xb7e	; 0xb7e <brain_power_master>
    13f4:	08 95       	ret
			}
			break;
		case FP_SWITCH_R:
			fp_rot_status = RELEASED;
    13f6:	89 e2       	ldi	r24, 0x29	; 41
    13f8:	80 93 94 26 	sts	0x2694, r24
			//Write to disk logic (save to non-volatile memory)
			if	((STATE_menu == MENU_CONTROL) && (fp_press_counter>EEPROM_HOLD_TO_SAVE_TIME)){
    13fc:	80 91 83 25 	lds	r24, 0x2583
    1400:	81 32       	cpi	r24, 0x21	; 33
    1402:	71 f4       	brne	.+28     	; 0x1420 <_fp_switch_released+0x5e>
    1404:	80 91 a7 26 	lds	r24, 0x26A7
    1408:	90 91 a8 26 	lds	r25, 0x26A8
    140c:	23 e0       	ldi	r18, 0x03	; 3
    140e:	89 3e       	cpi	r24, 0xE9	; 233
    1410:	92 07       	cpc	r25, r18
    1412:	30 f0       	brcs	.+12     	; 0x1420 <_fp_switch_released+0x5e>
				eeprom_save(); 
    1414:	0e 94 ff 08 	call	0x11fe	; 0x11fe <eeprom_save>
				fp_press_counter = 0;
    1418:	10 92 a7 26 	sts	0x26A7, r1
    141c:	10 92 a8 26 	sts	0x26A8, r1
    1420:	08 95       	ret

00001422 <_process_switch>:
			break;
	}
}

void _process_switch(uint8_t current, uint8_t change, uint8_t which){
	if ((current & _BV(which)) != 0) {return;} //unstable -- wait for things to settle
    1422:	28 2f       	mov	r18, r24
    1424:	30 e0       	ldi	r19, 0x00	; 0
    1426:	04 2e       	mov	r0, r20
    1428:	02 c0       	rjmp	.+4      	; 0x142e <_process_switch+0xc>
    142a:	35 95       	asr	r19
    142c:	27 95       	ror	r18
    142e:	0a 94       	dec	r0
    1430:	e2 f7       	brpl	.-8      	; 0x142a <_process_switch+0x8>
    1432:	20 fd       	sbrc	r18, 0
    1434:	1b c0       	rjmp	.+54     	; 0x146c <_process_switch+0x4a>
	if ((change & _BV(which)) == 0){return;} //no change
    1436:	70 e0       	ldi	r23, 0x00	; 0
    1438:	04 2e       	mov	r0, r20
    143a:	02 c0       	rjmp	.+4      	; 0x1440 <_process_switch+0x1e>
    143c:	75 95       	asr	r23
    143e:	67 95       	ror	r22
    1440:	0a 94       	dec	r0
    1442:	e2 f7       	brpl	.-8      	; 0x143c <_process_switch+0x1a>
    1444:	60 ff       	sbrs	r22, 0
    1446:	12 c0       	rjmp	.+36     	; 0x146c <_process_switch+0x4a>
	//Pin has been changed!
	if ((fp_button_time0 & _BV(which)) == 0){_fp_switch_pressed(which);}
    1448:	20 91 a9 26 	lds	r18, 0x26A9
    144c:	30 e0       	ldi	r19, 0x00	; 0
    144e:	04 2e       	mov	r0, r20
    1450:	02 c0       	rjmp	.+4      	; 0x1456 <_process_switch+0x34>
    1452:	35 95       	asr	r19
    1454:	27 95       	ror	r18
    1456:	0a 94       	dec	r0
    1458:	e2 f7       	brpl	.-8      	; 0x1452 <_process_switch+0x30>
    145a:	20 fd       	sbrc	r18, 0
    145c:	04 c0       	rjmp	.+8      	; 0x1466 <_process_switch+0x44>
    145e:	84 2f       	mov	r24, r20
    1460:	0e 94 a7 09 	call	0x134e	; 0x134e <_fp_switch_pressed>
    1464:	08 95       	ret
	else {_fp_switch_released(which);}
    1466:	84 2f       	mov	r24, r20
    1468:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <_fp_switch_released>
    146c:	08 95       	ret

0000146e <_fp_process_switches>:
	
}

void _fp_process_switches(){
    146e:	cf 93       	push	r28
    1470:	df 93       	push	r29
	//Debounce Logic
	uint8_t current = fp_button_time0 ^ fp_button_time1;
    1472:	80 91 96 26 	lds	r24, 0x2696
    1476:	c0 91 a9 26 	lds	r28, 0x26A9
    147a:	c8 27       	eor	r28, r24
	uint8_t change = fp_button_time1 ^ fp_button_time2;
    147c:	d0 91 90 26 	lds	r29, 0x2690
    1480:	d8 27       	eor	r29, r24
	
	//EEPROM Logic
	if (fp_rot_status == PRESSED){
    1482:	80 91 94 26 	lds	r24, 0x2694
    1486:	8a 32       	cpi	r24, 0x2A	; 42
    1488:	b1 f4       	brne	.+44     	; 0x14b6 <_fp_process_switches+0x48>
		fp_press_counter++;
    148a:	80 91 a7 26 	lds	r24, 0x26A7
    148e:	90 91 a8 26 	lds	r25, 0x26A8
    1492:	01 96       	adiw	r24, 0x01	; 1
    1494:	80 93 a7 26 	sts	0x26A7, r24
    1498:	90 93 a8 26 	sts	0x26A8, r25
		if ((STATE_menu == MENU_CONTROL) && (fp_press_counter > EEPROM_HOLD_TO_SAVE_TIME)){
    149c:	20 91 83 25 	lds	r18, 0x2583
    14a0:	21 32       	cpi	r18, 0x21	; 33
    14a2:	49 f4       	brne	.+18     	; 0x14b6 <_fp_process_switches+0x48>
    14a4:	23 e0       	ldi	r18, 0x03	; 3
    14a6:	89 3e       	cpi	r24, 0xE9	; 233
    14a8:	92 07       	cpc	r25, r18
    14aa:	28 f0       	brcs	.+10     	; 0x14b6 <_fp_process_switches+0x48>
			audio_beep(BRAIN_BEEPS, BRAIN_VOLUME);
    14ac:	81 e0       	ldi	r24, 0x01	; 1
    14ae:	64 e6       	ldi	r22, 0x64	; 100
    14b0:	70 e0       	ldi	r23, 0x00	; 0
    14b2:	0e 94 fc 2c 	call	0x59f8	; 0x59f8 <audio_beep>
		}
	}
	
	if (fp_master_status == PRESSED){
    14b6:	80 91 91 26 	lds	r24, 0x2691
    14ba:	8a 32       	cpi	r24, 0x2A	; 42
    14bc:	91 f4       	brne	.+36     	; 0x14e2 <_fp_process_switches+0x74>
		fp_press_counter++;
    14be:	80 91 a7 26 	lds	r24, 0x26A7
    14c2:	90 91 a8 26 	lds	r25, 0x26A8
    14c6:	01 96       	adiw	r24, 0x01	; 1
    14c8:	80 93 a7 26 	sts	0x26A7, r24
    14cc:	90 93 a8 26 	sts	0x26A8, r25
		if (fp_press_counter == EEPROM_HOLD_TO_SAVE_TIME){
    14d0:	23 e0       	ldi	r18, 0x03	; 3
    14d2:	88 3e       	cpi	r24, 0xE8	; 232
    14d4:	92 07       	cpc	r25, r18
    14d6:	29 f4       	brne	.+10     	; 0x14e2 <_fp_process_switches+0x74>
			audio_beep(BRAIN_BEEPS, BRAIN_VOLUME);
    14d8:	81 e0       	ldi	r24, 0x01	; 1
    14da:	64 e6       	ldi	r22, 0x64	; 100
    14dc:	70 e0       	ldi	r23, 0x00	; 0
    14de:	0e 94 fc 2c 	call	0x59f8	; 0x59f8 <audio_beep>
		}
	}
		
	//Switch Logic
	_process_switch(current, change, FP_SWITCH_A);
    14e2:	8c 2f       	mov	r24, r28
    14e4:	6d 2f       	mov	r22, r29
    14e6:	40 e0       	ldi	r20, 0x00	; 0
    14e8:	0e 94 11 0a 	call	0x1422	; 0x1422 <_process_switch>
	_process_switch(current, change, FP_SWITCH_B);
    14ec:	8c 2f       	mov	r24, r28
    14ee:	6d 2f       	mov	r22, r29
    14f0:	41 e0       	ldi	r20, 0x01	; 1
    14f2:	0e 94 11 0a 	call	0x1422	; 0x1422 <_process_switch>
	_process_switch(current, change, FP_SWITCH_C);
    14f6:	8c 2f       	mov	r24, r28
    14f8:	6d 2f       	mov	r22, r29
    14fa:	42 e0       	ldi	r20, 0x02	; 2
    14fc:	0e 94 11 0a 	call	0x1422	; 0x1422 <_process_switch>
	_process_switch(current, change, FP_SWITCH_D);
    1500:	8c 2f       	mov	r24, r28
    1502:	6d 2f       	mov	r22, r29
    1504:	43 e0       	ldi	r20, 0x03	; 3
    1506:	0e 94 11 0a 	call	0x1422	; 0x1422 <_process_switch>
	_process_switch(current, change, FP_SWITCH_M);
    150a:	8c 2f       	mov	r24, r28
    150c:	6d 2f       	mov	r22, r29
    150e:	44 e0       	ldi	r20, 0x04	; 4
    1510:	0e 94 11 0a 	call	0x1422	; 0x1422 <_process_switch>
	_process_switch(current, change, FP_SWITCH_R);
    1514:	8c 2f       	mov	r24, r28
    1516:	6d 2f       	mov	r22, r29
    1518:	45 e0       	ldi	r20, 0x05	; 5
    151a:	0e 94 11 0a 	call	0x1422	; 0x1422 <_process_switch>
}
    151e:	df 91       	pop	r29
    1520:	cf 91       	pop	r28
    1522:	08 95       	ret

00001524 <_fp_process_rotary>:

void _fp_process_rotary(){
	static int16_t blanking_counter = -1;
	
	//Software blank rotary dial in menu navigation mode
	if ((STATE_menu == MENU_STARTUP) || (STATE_menu == MENU_OUTPUT) || (STATE_menu == MENU_CONTROL) || (STATE_menu == MENU_CONSOLE)) {
    1524:	80 91 83 25 	lds	r24, 0x2583
    1528:	8f 51       	subi	r24, 0x1F	; 31
    152a:	84 30       	cpi	r24, 0x04	; 4
    152c:	a8 f5       	brcc	.+106    	; 0x1598 <_fp_process_rotary+0x74>
		if (blanking_counter >= 0){
    152e:	80 91 58 21 	lds	r24, 0x2158
    1532:	90 91 59 21 	lds	r25, 0x2159
    1536:	99 23       	and	r25, r25
    1538:	c4 f0       	brlt	.+48     	; 0x156a <_fp_process_rotary+0x46>
			blanking_counter++;
    153a:	01 96       	adiw	r24, 0x01	; 1
    153c:	80 93 58 21 	sts	0x2158, r24
    1540:	90 93 59 21 	sts	0x2159, r25
			quad_up(); quad_down(); //clear state changes during blanking period
    1544:	0e 94 ad 12 	call	0x255a	; 0x255a <quad_up>
    1548:	0e 94 b8 12 	call	0x2570	; 0x2570 <quad_down>
			if (blanking_counter > 500){blanking_counter = -1;}
    154c:	80 91 58 21 	lds	r24, 0x2158
    1550:	90 91 59 21 	lds	r25, 0x2159
    1554:	21 e0       	ldi	r18, 0x01	; 1
    1556:	85 3f       	cpi	r24, 0xF5	; 245
    1558:	92 07       	cpc	r25, r18
    155a:	64 f1       	brlt	.+88     	; 0x15b4 <_fp_process_rotary+0x90>
    155c:	8f ef       	ldi	r24, 0xFF	; 255
    155e:	9f ef       	ldi	r25, 0xFF	; 255
    1560:	80 93 58 21 	sts	0x2158, r24
    1564:	90 93 59 21 	sts	0x2159, r25
    1568:	08 95       	ret
		}
		else {
			if (quad_up()) {blanking_counter = 0; brain_rotary_change(QUAD_UP);}
    156a:	0e 94 ad 12 	call	0x255a	; 0x255a <quad_up>
    156e:	88 23       	and	r24, r24
    1570:	39 f0       	breq	.+14     	; 0x1580 <_fp_process_rotary+0x5c>
    1572:	10 92 58 21 	sts	0x2158, r1
    1576:	10 92 59 21 	sts	0x2159, r1
    157a:	8d e2       	ldi	r24, 0x2D	; 45
    157c:	0e 94 31 05 	call	0xa62	; 0xa62 <brain_rotary_change>
			if (quad_down()) {blanking_counter = 0; brain_rotary_change(QUAD_DOWN);}
    1580:	0e 94 b8 12 	call	0x2570	; 0x2570 <quad_down>
    1584:	88 23       	and	r24, r24
    1586:	b1 f0       	breq	.+44     	; 0x15b4 <_fp_process_rotary+0x90>
    1588:	10 92 58 21 	sts	0x2158, r1
    158c:	10 92 59 21 	sts	0x2159, r1
    1590:	8e e2       	ldi	r24, 0x2E	; 46
    1592:	0e 94 31 05 	call	0xa62	; 0xa62 <brain_rotary_change>
    1596:	08 95       	ret
		}		
	}
	//Use full dial resolution in adjustment mode
	else {
		if (quad_up()) {brain_rotary_change(QUAD_UP);}
    1598:	0e 94 ad 12 	call	0x255a	; 0x255a <quad_up>
    159c:	88 23       	and	r24, r24
    159e:	19 f0       	breq	.+6      	; 0x15a6 <_fp_process_rotary+0x82>
    15a0:	8d e2       	ldi	r24, 0x2D	; 45
    15a2:	0e 94 31 05 	call	0xa62	; 0xa62 <brain_rotary_change>
		if (quad_down()) {brain_rotary_change(QUAD_DOWN);}
    15a6:	0e 94 b8 12 	call	0x2570	; 0x2570 <quad_down>
    15aa:	88 23       	and	r24, r24
    15ac:	19 f0       	breq	.+6      	; 0x15b4 <_fp_process_rotary+0x90>
    15ae:	8e e2       	ldi	r24, 0x2E	; 46
    15b0:	0e 94 31 05 	call	0xa62	; 0xa62 <brain_rotary_change>
    15b4:	08 95       	ret

000015b6 <service_fp>:
//## SERVICE ROUTINE
//#############################################################

void service_fp(){	
	
	uint8_t fp_channel_mask = STATE_power_channels << 1;
    15b6:	90 91 82 25 	lds	r25, 0x2582
	//LEDs
	if (STATE_power_output == DISABLE){
    15ba:	80 91 84 25 	lds	r24, 0x2584
    15be:	89 32       	cpi	r24, 0x29	; 41
    15c0:	09 f0       	breq	.+2      	; 0x15c4 <service_fp+0xe>
    15c2:	43 c0       	rjmp	.+134    	; 0x164a <service_fp+0x94>
//## SERVICE ROUTINE
//#############################################################

void service_fp(){	
	
	uint8_t fp_channel_mask = STATE_power_channels << 1;
    15c4:	99 0f       	add	r25, r25
	//LEDs
	if (STATE_power_output == DISABLE){
				
		//Channel LED's			
		if (fp_counter == 0) {PORTJ.OUTSET = fp_channel_mask;} 
    15c6:	80 91 95 26 	lds	r24, 0x2695
    15ca:	88 23       	and	r24, r24
    15cc:	39 f4       	brne	.+14     	; 0x15dc <service_fp+0x26>
    15ce:	e0 e0       	ldi	r30, 0x00	; 0
    15d0:	f7 e0       	ldi	r31, 0x07	; 7
    15d2:	95 83       	std	Z+5, r25	; 0x05
		if (fp_counter == FP_ON_LENGTH) {PORTJ.OUTCLR = fp_channel_mask;}
		fp_counter++;
    15d4:	8f 5f       	subi	r24, 0xFF	; 255
    15d6:	80 93 95 26 	sts	0x2695, r24
    15da:	10 c0       	rjmp	.+32     	; 0x15fc <service_fp+0x46>
	//LEDs
	if (STATE_power_output == DISABLE){
				
		//Channel LED's			
		if (fp_counter == 0) {PORTJ.OUTSET = fp_channel_mask;} 
		if (fp_counter == FP_ON_LENGTH) {PORTJ.OUTCLR = fp_channel_mask;}
    15dc:	81 30       	cpi	r24, 0x01	; 1
    15de:	39 f4       	brne	.+14     	; 0x15ee <service_fp+0x38>
    15e0:	e0 e0       	ldi	r30, 0x00	; 0
    15e2:	f7 e0       	ldi	r31, 0x07	; 7
    15e4:	96 83       	std	Z+6, r25	; 0x06
		fp_counter++;
    15e6:	82 e0       	ldi	r24, 0x02	; 2
    15e8:	80 93 95 26 	sts	0x2695, r24
    15ec:	07 c0       	rjmp	.+14     	; 0x15fc <service_fp+0x46>
    15ee:	8f 5f       	subi	r24, 0xFF	; 255
    15f0:	80 93 95 26 	sts	0x2695, r24
		if (fp_counter >= FP_ON_LENGTH + FP_OFF_LENGTH) {fp_counter = 0;}
    15f4:	8b 30       	cpi	r24, 0x0B	; 11
    15f6:	10 f0       	brcs	.+4      	; 0x15fc <service_fp+0x46>
    15f8:	10 92 95 26 	sts	0x2695, r1
			
		//Master LED
		fp_counter2 += fp_updown;
    15fc:	80 91 9d 26 	lds	r24, 0x269D
    1600:	60 91 9c 26 	lds	r22, 0x269C
    1604:	68 0f       	add	r22, r24
    1606:	60 93 9c 26 	sts	0x269C, r22
		if (fp_counter2 < 128) {
    160a:	66 23       	and	r22, r22
    160c:	34 f0       	brlt	.+12     	; 0x161a <service_fp+0x64>
			if (fp_counter2 % 2 == 0){
    160e:	60 fd       	sbrc	r22, 0
    1610:	12 c0       	rjmp	.+36     	; 0x1636 <service_fp+0x80>
				led_dim(LED_3, fp_counter2);
    1612:	82 e0       	ldi	r24, 0x02	; 2
    1614:	0e 94 92 2c 	call	0x5924	; 0x5924 <led_dim>
    1618:	0e c0       	rjmp	.+28     	; 0x1636 <service_fp+0x80>
			}
		}
		else {
			if (fp_updown > 0) {fp_counter2 += 2;}
    161a:	88 23       	and	r24, r24
    161c:	21 f0       	breq	.+8      	; 0x1626 <service_fp+0x70>
    161e:	6e 5f       	subi	r22, 0xFE	; 254
    1620:	60 93 9c 26 	sts	0x269C, r22
    1624:	03 c0       	rjmp	.+6      	; 0x162c <service_fp+0x76>
			else {fp_counter2 += 2;}
    1626:	6e 5f       	subi	r22, 0xFE	; 254
    1628:	60 93 9c 26 	sts	0x269C, r22
			led_dim(LED_3, fp_counter2);
    162c:	82 e0       	ldi	r24, 0x02	; 2
    162e:	60 91 9c 26 	lds	r22, 0x269C
    1632:	0e 94 92 2c 	call	0x5924	; 0x5924 <led_dim>
		}			
		if ((fp_counter2 >= 255) || (fp_counter2 <= 0)) {
    1636:	80 91 9c 26 	lds	r24, 0x269C
    163a:	81 50       	subi	r24, 0x01	; 1
    163c:	8e 3f       	cpi	r24, 0xFE	; 254
    163e:	28 f0       	brcs	.+10     	; 0x164a <service_fp+0x94>
			fp_updown = -1 * fp_updown;
    1640:	80 91 9d 26 	lds	r24, 0x269D
    1644:	81 95       	neg	r24
    1646:	80 93 9d 26 	sts	0x269D, r24
		}
	}
	//SWITCHes
	_fp_read_switches();
    164a:	0e 94 99 09 	call	0x1332	; 0x1332 <_fp_read_switches>
	_fp_process_switches();
    164e:	0e 94 37 0a 	call	0x146e	; 0x146e <_fp_process_switches>
	_fp_process_rotary();
    1652:	0e 94 92 0a 	call	0x1524	; 0x1524 <_fp_process_rotary>
}
    1656:	08 95       	ret

00001658 <init_lcd>:
//#############################################################
//## INITIALIZATION ROUTINE
//#############################################################

void init_lcd(){
	lcd_flow_control = LCD_BUSY; //Wait for LCD to bootup -- queue all commands prior to start
    1658:	8e e4       	ldi	r24, 0x4E	; 78
    165a:	80 93 ab 26 	sts	0x26AB, r24
	lcd_flow_reboot = LCD_ENABLED;
    165e:	8f e1       	ldi	r24, 0x1F	; 31
    1660:	80 93 93 26 	sts	0x2693, r24
}
    1664:	08 95       	ret

00001666 <lcd_reboot>:

//Reboot the LCD because it f's up a lot due to its lack of correctly implemented flow-control.
void lcd_reboot(){
    1666:	cf 93       	push	r28
	//flush command buffer
	uart_rxbuffer_disable(&ulcd);
    1668:	80 eb       	ldi	r24, 0xB0	; 176
    166a:	9b e0       	ldi	r25, 0x0B	; 11
    166c:	0e 94 0a 19 	call	0x3214	; 0x3214 <uart_rxbuffer_disable>
	uart_txbuffer_disable(&ulcd);
    1670:	80 eb       	ldi	r24, 0xB0	; 176
    1672:	9b e0       	ldi	r25, 0x0B	; 11
    1674:	0e 94 14 19 	call	0x3228	; 0x3228 <uart_txbuffer_disable>
	init_uart_obuffer(&ulcd);
    1678:	80 eb       	ldi	r24, 0xB0	; 176
    167a:	9b e0       	ldi	r25, 0x0B	; 11
    167c:	0e 94 46 22 	call	0x448c	; 0x448c <init_uart_obuffer>
	init_uart_ibuffer(&ulcd);
    1680:	80 eb       	ldi	r24, 0xB0	; 176
    1682:	9b e0       	ldi	r25, 0x0B	; 11
    1684:	0e 94 a2 29 	call	0x5344	; 0x5344 <init_uart_ibuffer>
	uart_rxbuffer_enable(&ulcd);
    1688:	80 eb       	ldi	r24, 0xB0	; 176
    168a:	9b e0       	ldi	r25, 0x0B	; 11
    168c:	0e 94 05 19 	call	0x320a	; 0x320a <uart_rxbuffer_enable>
	uart_txbuffer_enable(&ulcd);
    1690:	80 eb       	ldi	r24, 0xB0	; 176
    1692:	9b e0       	ldi	r25, 0x0B	; 11
    1694:	0e 94 0f 19 	call	0x321e	; 0x321e <uart_txbuffer_enable>
	lcd_flow_control = LCD_READY; //unlock if stuck
    1698:	82 e5       	ldi	r24, 0x52	; 82
    169a:	80 93 ab 26 	sts	0x26AB, r24
	//state recovery
	lcd_flow_reboot = LCD_REBOOT; //suppress normal output from OS (dropped silently)
    169e:	c1 e9       	ldi	r28, 0x91	; 145
    16a0:	c0 93 93 26 	sts	0x2693, r28
	//transmit flush to LCD
	uart_enqueue_string(&ulcd, "\r"); //transmit \r to terminate anything currently in the buffer
    16a4:	80 eb       	ldi	r24, 0xB0	; 176
    16a6:	9b e0       	ldi	r25, 0x0B	; 11
    16a8:	6a e5       	ldi	r22, 0x5A	; 90
    16aa:	71 e2       	ldi	r23, 0x21	; 33
    16ac:	0e 94 ae 22 	call	0x455c	; 0x455c <uart_enqueue_string>
	//send reboot commands
	uart_enqueue_string(&ulcd, "RESET\r");
    16b0:	80 eb       	ldi	r24, 0xB0	; 176
    16b2:	9b e0       	ldi	r25, 0x0B	; 11
    16b4:	6c e5       	ldi	r22, 0x5C	; 92
    16b6:	71 e2       	ldi	r23, 0x21	; 33
    16b8:	0e 94 ae 22 	call	0x455c	; 0x455c <uart_enqueue_string>
	//state recovery
	lcd_flow_reboot = LCD_REBOOT;
    16bc:	c0 93 93 26 	sts	0x2693, r28
}
    16c0:	cf 91       	pop	r28
    16c2:	08 95       	ret

000016c4 <lcd_command>:
//#############################################################
//## API
//#############################################################

//Only supports RUN (capital) and 31 (PLAY command as number) for detecting macros
void lcd_command(char* theCommand){
    16c4:	cf 93       	push	r28
    16c6:	df 93       	push	r29
    16c8:	ec 01       	movw	r28, r24
	if ((lcd_flow_reboot == LCD_ENABLED)&&(uart_count(&ulcd)<MAX_BUFFER_LEN-100)){
    16ca:	80 91 93 26 	lds	r24, 0x2693
    16ce:	8f 31       	cpi	r24, 0x1F	; 31
    16d0:	91 f4       	brne	.+36     	; 0x16f6 <lcd_command+0x32>
    16d2:	80 eb       	ldi	r24, 0xB0	; 176
    16d4:	9b e0       	ldi	r25, 0x0B	; 11
    16d6:	0e 94 67 22 	call	0x44ce	; 0x44ce <uart_count>
    16da:	23 e0       	ldi	r18, 0x03	; 3
    16dc:	8c 39       	cpi	r24, 0x9C	; 156
    16de:	92 07       	cpc	r25, r18
    16e0:	50 f4       	brcc	.+20     	; 0x16f6 <lcd_command+0x32>
		uart_enqueue_string(&ulcd, theCommand); //the command
    16e2:	80 eb       	ldi	r24, 0xB0	; 176
    16e4:	9b e0       	ldi	r25, 0x0B	; 11
    16e6:	be 01       	movw	r22, r28
    16e8:	0e 94 ae 22 	call	0x455c	; 0x455c <uart_enqueue_string>
		uart_enqueue(&ulcd, 0x0D); //command terminator
    16ec:	80 eb       	ldi	r24, 0xB0	; 176
    16ee:	9b e0       	ldi	r25, 0x0B	; 11
    16f0:	6d e0       	ldi	r22, 0x0D	; 13
    16f2:	0e 94 34 26 	call	0x4c68	; 0x4c68 <uart_enqueue>
	}		
}
    16f6:	df 91       	pop	r29
    16f8:	cf 91       	pop	r28
    16fa:	08 95       	ret

000016fc <_lcd_bubble>:
	lcd_command("COLOR BLUE");
	lcd_command("BOX 30 30 F");
}

void _lcd_bubble(uint8_t mode){
	switch(mode){
    16fc:	8f 31       	cpi	r24, 0x1F	; 31
    16fe:	19 f0       	breq	.+6      	; 0x1706 <_lcd_bubble+0xa>
    1700:	80 32       	cpi	r24, 0x20	; 32
    1702:	51 f4       	brne	.+20     	; 0x1718 <_lcd_bubble+0x1c>
    1704:	05 c0       	rjmp	.+10     	; 0x1710 <_lcd_bubble+0x14>
		case LCD_ENABLED:
		lcd_command("COLOR 69");
    1706:	83 e6       	ldi	r24, 0x63	; 99
    1708:	91 e2       	ldi	r25, 0x21	; 33
    170a:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <lcd_command>
		break;
    170e:	04 c0       	rjmp	.+8      	; 0x1718 <_lcd_bubble+0x1c>
		case LCD_STANDBY:
		lcd_command("COLOR 16");
    1710:	8c e6       	ldi	r24, 0x6C	; 108
    1712:	91 e2       	ldi	r25, 0x21	; 33
    1714:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <lcd_command>
		break;
	}
	lcd_command("CIRCLE 10 F");
    1718:	85 e7       	ldi	r24, 0x75	; 117
    171a:	91 e2       	ldi	r25, 0x21	; 33
    171c:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <lcd_command>
	lcd_command("COLOR WHITE");
    1720:	81 e8       	ldi	r24, 0x81	; 129
    1722:	91 e2       	ldi	r25, 0x21	; 33
    1724:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <lcd_command>
	lcd_command("CIRCLE 10");
    1728:	8d e8       	ldi	r24, 0x8D	; 141
    172a:	91 e2       	ldi	r25, 0x21	; 33
    172c:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <lcd_command>
	lcd_command("ARC 8 125 145");
    1730:	87 e9       	ldi	r24, 0x97	; 151
    1732:	91 e2       	ldi	r25, 0x21	; 33
    1734:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <lcd_command>
}
    1738:	08 95       	ret

0000173a <_lcd_no_bubble>:
//#############################################################
//## SCREENS: OUTPUT STATUS
//#############################################################

void _lcd_no_bubble(){
	lcd_command("COLOR BLUE");
    173a:	85 ea       	ldi	r24, 0xA5	; 165
    173c:	91 e2       	ldi	r25, 0x21	; 33
    173e:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <lcd_command>
	lcd_command("BOX 30 30 F");
    1742:	80 eb       	ldi	r24, 0xB0	; 176
    1744:	91 e2       	ldi	r25, 0x21	; 33
    1746:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <lcd_command>
}
    174a:	08 95       	ret

0000174c <lcd_d>:
		lcd_command("XY 380 161");
		_lcd_bubble(mode);
	}
}

void lcd_d(uint8_t mode){
    174c:	cf 93       	push	r28
    174e:	c8 2f       	mov	r28, r24
	if (mode == LCD_DISABLED){
    1750:	81 32       	cpi	r24, 0x21	; 33
    1752:	39 f4       	brne	.+14     	; 0x1762 <lcd_d+0x16>
		lcd_command("XY 365 199");
    1754:	8c eb       	ldi	r24, 0xBC	; 188
    1756:	91 e2       	ldi	r25, 0x21	; 33
    1758:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <lcd_command>
		_lcd_no_bubble();
    175c:	0e 94 9d 0b 	call	0x173a	; 0x173a <_lcd_no_bubble>
    1760:	07 c0       	rjmp	.+14     	; 0x1770 <lcd_d+0x24>
	}
	else {
		lcd_command("XY 380 209");
    1762:	87 ec       	ldi	r24, 0xC7	; 199
    1764:	91 e2       	ldi	r25, 0x21	; 33
    1766:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <lcd_command>
		_lcd_bubble(mode);
    176a:	8c 2f       	mov	r24, r28
    176c:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <_lcd_bubble>
	}
}
    1770:	cf 91       	pop	r28
    1772:	08 95       	ret

00001774 <lcd_c>:
		lcd_command("XY 380 113");
		_lcd_bubble(mode);
	}
}

void lcd_c(uint8_t mode){
    1774:	cf 93       	push	r28
    1776:	c8 2f       	mov	r28, r24
	if (mode == LCD_DISABLED){
    1778:	81 32       	cpi	r24, 0x21	; 33
    177a:	39 f4       	brne	.+14     	; 0x178a <lcd_c+0x16>
		lcd_command("XY 365 151");
    177c:	82 ed       	ldi	r24, 0xD2	; 210
    177e:	91 e2       	ldi	r25, 0x21	; 33
    1780:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <lcd_command>
		_lcd_no_bubble();
    1784:	0e 94 9d 0b 	call	0x173a	; 0x173a <_lcd_no_bubble>
    1788:	07 c0       	rjmp	.+14     	; 0x1798 <lcd_c+0x24>
	}
	else {
		lcd_command("XY 380 161");
    178a:	8d ed       	ldi	r24, 0xDD	; 221
    178c:	91 e2       	ldi	r25, 0x21	; 33
    178e:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <lcd_command>
		_lcd_bubble(mode);
    1792:	8c 2f       	mov	r24, r28
    1794:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <_lcd_bubble>
	}
}
    1798:	cf 91       	pop	r28
    179a:	08 95       	ret

0000179c <lcd_b>:
		lcd_command("XY 380 65");
		_lcd_bubble(mode);
	}		
}

void lcd_b(uint8_t mode){
    179c:	cf 93       	push	r28
    179e:	c8 2f       	mov	r28, r24
	if (mode == LCD_DISABLED){
    17a0:	81 32       	cpi	r24, 0x21	; 33
    17a2:	39 f4       	brne	.+14     	; 0x17b2 <lcd_b+0x16>
		lcd_command("XY 365 103");
    17a4:	88 ee       	ldi	r24, 0xE8	; 232
    17a6:	91 e2       	ldi	r25, 0x21	; 33
    17a8:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <lcd_command>
		_lcd_no_bubble();
    17ac:	0e 94 9d 0b 	call	0x173a	; 0x173a <_lcd_no_bubble>
    17b0:	07 c0       	rjmp	.+14     	; 0x17c0 <lcd_b+0x24>
	}
	else {
		lcd_command("XY 380 113");
    17b2:	83 ef       	ldi	r24, 0xF3	; 243
    17b4:	91 e2       	ldi	r25, 0x21	; 33
    17b6:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <lcd_command>
		_lcd_bubble(mode);
    17ba:	8c 2f       	mov	r24, r28
    17bc:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <_lcd_bubble>
	}
}
    17c0:	cf 91       	pop	r28
    17c2:	08 95       	ret

000017c4 <lcd_a>:
	lcd_command("COLOR WHITE");
	lcd_command("CIRCLE 10");
	lcd_command("ARC 8 125 145");
}

void lcd_a(uint8_t mode){
    17c4:	cf 93       	push	r28
    17c6:	c8 2f       	mov	r28, r24
	if (mode == LCD_DISABLED){
    17c8:	81 32       	cpi	r24, 0x21	; 33
    17ca:	39 f4       	brne	.+14     	; 0x17da <lcd_a+0x16>
		lcd_command("XY 365 55");
    17cc:	8e ef       	ldi	r24, 0xFE	; 254
    17ce:	91 e2       	ldi	r25, 0x21	; 33
    17d0:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <lcd_command>
		_lcd_no_bubble();		
    17d4:	0e 94 9d 0b 	call	0x173a	; 0x173a <_lcd_no_bubble>
    17d8:	07 c0       	rjmp	.+14     	; 0x17e8 <lcd_a+0x24>
	}
	else {
		lcd_command("XY 380 65");
    17da:	88 e0       	ldi	r24, 0x08	; 8
    17dc:	92 e2       	ldi	r25, 0x22	; 34
    17de:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <lcd_command>
		_lcd_bubble(mode);
    17e2:	8c 2f       	mov	r24, r28
    17e4:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <_lcd_bubble>
	}		
}
    17e8:	cf 91       	pop	r28
    17ea:	08 95       	ret

000017ec <lcd_update>:

//Don't forget to end theCommand with a SPACE!
//--it's that way to support negation
//--Positive example: "75 1 "
//--Negative example: "75 1 -" 
void lcd_update(char* theCommand, char* theValue){
    17ec:	0f 93       	push	r16
    17ee:	1f 93       	push	r17
    17f0:	cf 93       	push	r28
    17f2:	df 93       	push	r29
    17f4:	ec 01       	movw	r28, r24
    17f6:	8b 01       	movw	r16, r22
	if ((lcd_flow_reboot == LCD_ENABLED)&&(uart_count(&ulcd)<MAX_BUFFER_LEN-100)){
    17f8:	80 91 93 26 	lds	r24, 0x2693
    17fc:	8f 31       	cpi	r24, 0x1F	; 31
    17fe:	b9 f4       	brne	.+46     	; 0x182e <lcd_update+0x42>
    1800:	80 eb       	ldi	r24, 0xB0	; 176
    1802:	9b e0       	ldi	r25, 0x0B	; 11
    1804:	0e 94 67 22 	call	0x44ce	; 0x44ce <uart_count>
    1808:	23 e0       	ldi	r18, 0x03	; 3
    180a:	8c 39       	cpi	r24, 0x9C	; 156
    180c:	92 07       	cpc	r25, r18
    180e:	78 f4       	brcc	.+30     	; 0x182e <lcd_update+0x42>
		uart_enqueue_string(&ulcd, theCommand);
    1810:	80 eb       	ldi	r24, 0xB0	; 176
    1812:	9b e0       	ldi	r25, 0x0B	; 11
    1814:	be 01       	movw	r22, r28
    1816:	0e 94 ae 22 	call	0x455c	; 0x455c <uart_enqueue_string>
		uart_enqueue_string(&ulcd, theValue);
    181a:	80 eb       	ldi	r24, 0xB0	; 176
    181c:	9b e0       	ldi	r25, 0x0B	; 11
    181e:	b8 01       	movw	r22, r16
    1820:	0e 94 ae 22 	call	0x455c	; 0x455c <uart_enqueue_string>
		uart_enqueue(&ulcd, 0x0D); //command terminator
    1824:	80 eb       	ldi	r24, 0xB0	; 176
    1826:	9b e0       	ldi	r25, 0x0B	; 11
    1828:	6d e0       	ldi	r22, 0x0D	; 13
    182a:	0e 94 34 26 	call	0x4c68	; 0x4c68 <uart_enqueue>
	}	
}
    182e:	df 91       	pop	r29
    1830:	cf 91       	pop	r28
    1832:	1f 91       	pop	r17
    1834:	0f 91       	pop	r16
    1836:	08 95       	ret

00001838 <service_lcd>:

void service_lcd(){	
	static uint16_t decimator = 0;

	//Flow control indicator
	if (lcd_flow_control != LCD_READY){led_on(LED_1);}
    1838:	80 91 ab 26 	lds	r24, 0x26AB
    183c:	82 35       	cpi	r24, 0x52	; 82
    183e:	21 f0       	breq	.+8      	; 0x1848 <service_lcd+0x10>
    1840:	81 e0       	ldi	r24, 0x01	; 1
    1842:	0e 94 60 2c 	call	0x58c0	; 0x58c0 <led_on>
    1846:	03 c0       	rjmp	.+6      	; 0x184e <service_lcd+0x16>
	else {led_off(LED_1);}
    1848:	81 e0       	ldi	r24, 0x01	; 1
    184a:	0e 94 7c 2c 	call	0x58f8	; 0x58f8 <led_off>
	
	//Reboot logic
	switch(lcd_flow_reboot){
    184e:	80 91 93 26 	lds	r24, 0x2693
    1852:	80 39       	cpi	r24, 0x90	; 144
    1854:	51 f0       	breq	.+20     	; 0x186a <service_lcd+0x32>
    1856:	81 39       	cpi	r24, 0x91	; 145
    1858:	f1 f4       	brne	.+60     	; 0x1896 <service_lcd+0x5e>
		case LCD_ENABLED:
			//for efficiency test this case first (since it is normal case)
			break;
		case LCD_REBOOT:
			decimator = 0;
    185a:	10 92 17 22 	sts	0x2217, r1
    185e:	10 92 18 22 	sts	0x2218, r1
			lcd_flow_reboot = LCD_BOOTING;
    1862:	80 e9       	ldi	r24, 0x90	; 144
    1864:	80 93 93 26 	sts	0x2693, r24
			break;
    1868:	16 c0       	rjmp	.+44     	; 0x1896 <service_lcd+0x5e>
		case LCD_BOOTING:
			decimator++;
    186a:	80 91 17 22 	lds	r24, 0x2217
    186e:	90 91 18 22 	lds	r25, 0x2218
    1872:	01 96       	adiw	r24, 0x01	; 1
    1874:	80 93 17 22 	sts	0x2217, r24
    1878:	90 93 18 22 	sts	0x2218, r25
			if (decimator >= 4999){
    187c:	23 e1       	ldi	r18, 0x13	; 19
    187e:	87 38       	cpi	r24, 0x87	; 135
    1880:	92 07       	cpc	r25, r18
    1882:	48 f0       	brcs	.+18     	; 0x1896 <service_lcd+0x5e>
				decimator = 0;
    1884:	10 92 17 22 	sts	0x2217, r1
    1888:	10 92 18 22 	sts	0x2218, r1
				lcd_flow_reboot = LCD_ENABLED;
    188c:	8f e1       	ldi	r24, 0x1F	; 31
    188e:	80 93 93 26 	sts	0x2693, r24
				STATE_menu = MENU_STARTUP;
    1892:	80 93 83 25 	sts	0x2583, r24
			}
			break;
	}
	
	//Command processing logic
	if(lcd_flow_control == LCD_DONE_COMMAND) {lcd_flow_control = LCD_READY;}
    1896:	80 91 ab 26 	lds	r24, 0x26AB
    189a:	8f 34       	cpi	r24, 0x4F	; 79
    189c:	19 f4       	brne	.+6      	; 0x18a4 <service_lcd+0x6c>
    189e:	82 e5       	ldi	r24, 0x52	; 82
    18a0:	80 93 ab 26 	sts	0x26AB, r24
	
	//Boot up logic (show start screen and let LCD bootup so commands are understood)
	if (decimator < 5000) {decimator++;}
    18a4:	80 91 17 22 	lds	r24, 0x2217
    18a8:	90 91 18 22 	lds	r25, 0x2218
    18ac:	23 e1       	ldi	r18, 0x13	; 19
    18ae:	88 38       	cpi	r24, 0x88	; 136
    18b0:	92 07       	cpc	r25, r18
    18b2:	30 f4       	brcc	.+12     	; 0x18c0 <service_lcd+0x88>
    18b4:	01 96       	adiw	r24, 0x01	; 1
    18b6:	80 93 17 22 	sts	0x2217, r24
    18ba:	90 93 18 22 	sts	0x2218, r25
    18be:	08 95       	ret
	else if (decimator == 5000) {lcd_flow_control = LCD_READY; decimator = 9000;}
    18c0:	23 e1       	ldi	r18, 0x13	; 19
    18c2:	88 38       	cpi	r24, 0x88	; 136
    18c4:	92 07       	cpc	r25, r18
    18c6:	49 f4       	brne	.+18     	; 0x18da <service_lcd+0xa2>
    18c8:	82 e5       	ldi	r24, 0x52	; 82
    18ca:	80 93 ab 26 	sts	0x26AB, r24
    18ce:	88 e2       	ldi	r24, 0x28	; 40
    18d0:	93 e2       	ldi	r25, 0x23	; 35
    18d2:	80 93 17 22 	sts	0x2217, r24
    18d6:	90 93 18 22 	sts	0x2218, r25
    18da:	08 95       	ret

000018dc <init_lcd_console>:

//#############################################################
//## INITIALIZATION ROUTINE
//#############################################################

void init_lcd_console(){
    18dc:	ea e2       	ldi	r30, 0x2A	; 42
    18de:	f2 e2       	ldi	r31, 0x22	; 34
    18e0:	a8 e8       	ldi	r26, 0x88	; 136
    18e2:	b6 e2       	ldi	r27, 0x26	; 38
    18e4:	82 e8       	ldi	r24, 0x82	; 130
    18e6:	95 e2       	ldi	r25, 0x25	; 37
	char* line_buffer;
	//Load the command bytes into the console buffer
	for(uint8_t i=0;i<LCD_CONSOLE_NUM_ROWS;i++){
		line_buffer = lcd_console[i];
		line_buffer[0] = '8'; line_buffer[1]='8'; line_buffer[2]=' '; line_buffer[4]=' '; line_buffer[5]='"'; line_buffer[6]='"';		
    18e8:	48 e3       	ldi	r20, 0x38	; 56
    18ea:	30 e2       	ldi	r19, 0x20	; 32
    18ec:	22 e2       	ldi	r18, 0x22	; 34
    18ee:	40 83       	st	Z, r20
    18f0:	41 83       	std	Z+1, r20	; 0x01
    18f2:	32 83       	std	Z+2, r19	; 0x02
    18f4:	34 83       	std	Z+4, r19	; 0x04
    18f6:	25 83       	std	Z+5, r18	; 0x05
    18f8:	26 83       	std	Z+6, r18	; 0x06
		lcd_buffer_dirty[i] = false;
    18fa:	1d 92       	st	X+, r1
    18fc:	e5 59       	subi	r30, 0x95	; 149
    18fe:	ff 4f       	sbci	r31, 0xFF	; 255
//#############################################################

void init_lcd_console(){
	char* line_buffer;
	//Load the command bytes into the console buffer
	for(uint8_t i=0;i<LCD_CONSOLE_NUM_ROWS;i++){
    1900:	e8 17       	cp	r30, r24
    1902:	f9 07       	cpc	r31, r25
    1904:	a1 f7       	brne	.-24     	; 0x18ee <init_lcd_console+0x12>
		line_buffer = lcd_console[i];
		line_buffer[0] = '8'; line_buffer[1]='8'; line_buffer[2]=' '; line_buffer[4]=' '; line_buffer[5]='"'; line_buffer[6]='"';		
		lcd_buffer_dirty[i] = false;
	}
	//Init state
	lcd_console_head = 0;
    1906:	10 92 87 26 	sts	0x2687, r1
}
    190a:	08 95       	ret

0000190c <lcd_console_write>:

//#############################################################
//## SCREENS: CONSOLE
//#############################################################

void lcd_console_write(char* theString){
    190c:	ef 92       	push	r14
    190e:	ff 92       	push	r15
    1910:	0f 93       	push	r16
    1912:	1f 93       	push	r17
    1914:	cf 93       	push	r28
    1916:	df 93       	push	r29
    1918:	8c 01       	movw	r16, r24
	int8_t head = (int8_t)lcd_console_head;
    191a:	70 91 87 26 	lds	r23, 0x2687
    191e:	67 2f       	mov	r22, r23
	char* line_buffer = lcd_console[lcd_console_head];
    1920:	27 2f       	mov	r18, r23
    1922:	30 e0       	ldi	r19, 0x00	; 0
    1924:	8b e6       	ldi	r24, 0x6B	; 107
    1926:	90 e0       	ldi	r25, 0x00	; 0
    1928:	28 9f       	mul	r18, r24
    192a:	a0 01       	movw	r20, r0
    192c:	29 9f       	mul	r18, r25
    192e:	50 0d       	add	r21, r0
    1930:	38 9f       	mul	r19, r24
    1932:	50 0d       	add	r21, r0
    1934:	11 24       	eor	r1, r1
    1936:	0f 2e       	mov	r0, r31
    1938:	fa e2       	ldi	r31, 0x2A	; 42
    193a:	ef 2e       	mov	r14, r31
    193c:	f2 e2       	ldi	r31, 0x22	; 34
    193e:	ff 2e       	mov	r15, r31
    1940:	f0 2d       	mov	r31, r0
    1942:	e4 0e       	add	r14, r20
    1944:	f5 1e       	adc	r15, r21
    1946:	a1 e3       	ldi	r26, 0x31	; 49
	//Destination
	for(uint8_t i=0;i<LCD_CONSOLE_NUM_ROWS;i++){
		lcd_console[head][3] = 0x31 + i; //id of static control (Row) to write to 
    1948:	4a e2       	ldi	r20, 0x2A	; 42
    194a:	52 e2       	ldi	r21, 0x22	; 34
    194c:	eb e6       	ldi	r30, 0x6B	; 107
    194e:	f0 e0       	ldi	r31, 0x00	; 0
    1950:	86 2f       	mov	r24, r22
    1952:	99 27       	eor	r25, r25
    1954:	87 fd       	sbrc	r24, 7
    1956:	90 95       	com	r25
    1958:	8e 9f       	mul	r24, r30
    195a:	90 01       	movw	r18, r0
    195c:	8f 9f       	mul	r24, r31
    195e:	30 0d       	add	r19, r0
    1960:	9e 9f       	mul	r25, r30
    1962:	30 0d       	add	r19, r0
    1964:	11 24       	eor	r1, r1
    1966:	24 0f       	add	r18, r20
    1968:	35 1f       	adc	r19, r21
    196a:	e9 01       	movw	r28, r18
    196c:	ab 83       	std	Y+3, r26	; 0x03
		head--;
    196e:	61 50       	subi	r22, 0x01	; 1
		if(head < 0){head = LCD_CONSOLE_NUM_ROWS-1;}
    1970:	0a f4       	brpl	.+2      	; 0x1974 <lcd_console_write+0x68>
    1972:	67 e0       	ldi	r22, 0x07	; 7
    1974:	af 5f       	subi	r26, 0xFF	; 255

void lcd_console_write(char* theString){
	int8_t head = (int8_t)lcd_console_head;
	char* line_buffer = lcd_console[lcd_console_head];
	//Destination
	for(uint8_t i=0;i<LCD_CONSOLE_NUM_ROWS;i++){
    1976:	a9 33       	cpi	r26, 0x39	; 57
    1978:	59 f7       	brne	.-42     	; 0x1950 <lcd_console_write+0x44>
		head--;
		if(head < 0){head = LCD_CONSOLE_NUM_ROWS-1;}
	}	
	//Content
	for (uint8_t i=0; i<LCD_CONSOLE_NUM_COLS; i++){
		if (theString[i] == 0){
    197a:	f8 01       	movw	r30, r16
    197c:	80 81       	ld	r24, Z
    197e:	88 23       	and	r24, r24
    1980:	99 f5       	brne	.+102    	; 0x19e8 <lcd_console_write+0xdc>
    1982:	05 c0       	rjmp	.+10     	; 0x198e <lcd_console_write+0x82>
    1984:	94 2f       	mov	r25, r20
    1986:	81 91       	ld	r24, Z+
    1988:	88 23       	and	r24, r24
    198a:	21 f5       	brne	.+72     	; 0x19d4 <lcd_console_write+0xc8>
    198c:	03 c0       	rjmp	.+6      	; 0x1994 <lcd_console_write+0x88>
    198e:	40 e0       	ldi	r20, 0x00	; 0
    1990:	50 e0       	ldi	r21, 0x00	; 0
    1992:	90 e0       	ldi	r25, 0x00	; 0
			line_buffer[6+i] = '"';
    1994:	f7 01       	movw	r30, r14
    1996:	e9 0f       	add	r30, r25
    1998:	f1 1d       	adc	r31, r1
    199a:	82 e2       	ldi	r24, 0x22	; 34
    199c:	86 83       	std	Z+6, r24	; 0x06
			line_buffer[6+i+1] = 0;
    199e:	e7 01       	movw	r28, r14
    19a0:	c4 0f       	add	r28, r20
    19a2:	d5 1f       	adc	r29, r21
    19a4:	1f 82       	std	Y+7, r1	; 0x07
			break;
		}
		line_buffer[6+i] = theString[i];
	}
	//Dirty all rows (so all rows get printed to screen)
	for (uint8_t i=0; i<LCD_CONSOLE_NUM_ROWS; i++){lcd_buffer_dirty[i] = true;}	
    19a6:	81 e0       	ldi	r24, 0x01	; 1
    19a8:	80 93 88 26 	sts	0x2688, r24
    19ac:	80 93 89 26 	sts	0x2689, r24
    19b0:	80 93 8a 26 	sts	0x268A, r24
    19b4:	80 93 8b 26 	sts	0x268B, r24
    19b8:	80 93 8c 26 	sts	0x268C, r24
    19bc:	80 93 8d 26 	sts	0x268D, r24
    19c0:	80 93 8e 26 	sts	0x268E, r24
    19c4:	80 93 8f 26 	sts	0x268F, r24
	//Move row pointer
	lcd_console_head++;
    19c8:	7f 5f       	subi	r23, 0xFF	; 255
    19ca:	70 93 87 26 	sts	0x2687, r23
	if (lcd_console_head >= LCD_CONSOLE_NUM_ROWS){lcd_console_head = 0;}
    19ce:	78 30       	cpi	r23, 0x08	; 8
    19d0:	40 f4       	brcc	.+16     	; 0x19e2 <lcd_console_write+0xd6>
    19d2:	13 c0       	rjmp	.+38     	; 0x19fa <lcd_console_write+0xee>
		if (theString[i] == 0){
			line_buffer[6+i] = '"';
			line_buffer[6+i+1] = 0;
			break;
		}
		line_buffer[6+i] = theString[i];
    19d4:	8d 93       	st	X+, r24
    19d6:	4f 5f       	subi	r20, 0xFF	; 255
    19d8:	5f 4f       	sbci	r21, 0xFF	; 255
		lcd_console[head][3] = 0x31 + i; //id of static control (Row) to write to 
		head--;
		if(head < 0){head = LCD_CONSOLE_NUM_ROWS-1;}
	}	
	//Content
	for (uint8_t i=0; i<LCD_CONSOLE_NUM_COLS; i++){
    19da:	44 36       	cpi	r20, 0x64	; 100
    19dc:	51 05       	cpc	r21, r1
    19de:	91 f6       	brne	.-92     	; 0x1984 <lcd_console_write+0x78>
    19e0:	e2 cf       	rjmp	.-60     	; 0x19a6 <lcd_console_write+0x9a>
	}
	//Dirty all rows (so all rows get printed to screen)
	for (uint8_t i=0; i<LCD_CONSOLE_NUM_ROWS; i++){lcd_buffer_dirty[i] = true;}	
	//Move row pointer
	lcd_console_head++;
	if (lcd_console_head >= LCD_CONSOLE_NUM_ROWS){lcd_console_head = 0;}
    19e2:	10 92 87 26 	sts	0x2687, r1
    19e6:	09 c0       	rjmp	.+18     	; 0x19fa <lcd_console_write+0xee>
		if (theString[i] == 0){
			line_buffer[6+i] = '"';
			line_buffer[6+i+1] = 0;
			break;
		}
		line_buffer[6+i] = theString[i];
    19e8:	e7 01       	movw	r28, r14
    19ea:	8e 83       	std	Y+6, r24	; 0x06

//#############################################################
//## SCREENS: CONSOLE
//#############################################################

void lcd_console_write(char* theString){
    19ec:	f8 01       	movw	r30, r16
    19ee:	31 96       	adiw	r30, 0x01	; 1
    19f0:	d7 01       	movw	r26, r14
    19f2:	17 96       	adiw	r26, 0x07	; 7
    19f4:	41 e0       	ldi	r20, 0x01	; 1
    19f6:	50 e0       	ldi	r21, 0x00	; 0
    19f8:	c5 cf       	rjmp	.-118    	; 0x1984 <lcd_console_write+0x78>
	//Dirty all rows (so all rows get printed to screen)
	for (uint8_t i=0; i<LCD_CONSOLE_NUM_ROWS; i++){lcd_buffer_dirty[i] = true;}	
	//Move row pointer
	lcd_console_head++;
	if (lcd_console_head >= LCD_CONSOLE_NUM_ROWS){lcd_console_head = 0;}
}
    19fa:	df 91       	pop	r29
    19fc:	cf 91       	pop	r28
    19fe:	1f 91       	pop	r17
    1a00:	0f 91       	pop	r16
    1a02:	ff 90       	pop	r15
    1a04:	ef 90       	pop	r14
    1a06:	08 95       	ret

00001a08 <service_lcd_console>:
//#############################################################
//## SERVICE ROUTINE
//#############################################################

//Used to refresh the console
void service_lcd_console(){
    1a08:	ef 92       	push	r14
    1a0a:	ff 92       	push	r15
    1a0c:	0f 93       	push	r16
    1a0e:	1f 93       	push	r17
    1a10:	cf 93       	push	r28
	static uint8_t next_row_to_output = 0;
	uint8_t num_rows_output = 0;
	if (STATE_menu != MENU_CONSOLE){return;}
    1a12:	80 91 83 25 	lds	r24, 0x2583
    1a16:	82 32       	cpi	r24, 0x22	; 34
    1a18:	b1 f5       	brne	.+108    	; 0x1a86 <service_lcd_console+0x7e>
    1a1a:	c9 e0       	ldi	r28, 0x09	; 9
	while((uart_count(&ulcd) < 512)&&(num_rows_output<LCD_CONSOLE_NUM_ROWS)){
		if(lcd_buffer_dirty[next_row_to_output]){
    1a1c:	08 e8       	ldi	r16, 0x88	; 136
    1a1e:	16 e2       	ldi	r17, 0x26	; 38
			lcd_command(lcd_console[next_row_to_output]);
    1a20:	0f 2e       	mov	r0, r31
    1a22:	fb e6       	ldi	r31, 0x6B	; 107
    1a24:	ef 2e       	mov	r14, r31
    1a26:	ff 24       	eor	r15, r15
    1a28:	f0 2d       	mov	r31, r0
    1a2a:	23 c0       	rjmp	.+70     	; 0x1a72 <service_lcd_console+0x6a>
void service_lcd_console(){
	static uint8_t next_row_to_output = 0;
	uint8_t num_rows_output = 0;
	if (STATE_menu != MENU_CONSOLE){return;}
	while((uart_count(&ulcd) < 512)&&(num_rows_output<LCD_CONSOLE_NUM_ROWS)){
		if(lcd_buffer_dirty[next_row_to_output]){
    1a2c:	20 91 19 22 	lds	r18, 0x2219
    1a30:	f8 01       	movw	r30, r16
    1a32:	e2 0f       	add	r30, r18
    1a34:	f1 1d       	adc	r31, r1
    1a36:	80 81       	ld	r24, Z
    1a38:	88 23       	and	r24, r24
    1a3a:	91 f0       	breq	.+36     	; 0x1a60 <service_lcd_console+0x58>
			lcd_command(lcd_console[next_row_to_output]);
    1a3c:	30 e0       	ldi	r19, 0x00	; 0
    1a3e:	2e 9d       	mul	r18, r14
    1a40:	c0 01       	movw	r24, r0
    1a42:	2f 9d       	mul	r18, r15
    1a44:	90 0d       	add	r25, r0
    1a46:	3e 9d       	mul	r19, r14
    1a48:	90 0d       	add	r25, r0
    1a4a:	11 24       	eor	r1, r1
    1a4c:	86 5d       	subi	r24, 0xD6	; 214
    1a4e:	9d 4d       	sbci	r25, 0xDD	; 221
    1a50:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <lcd_command>
			lcd_buffer_dirty[next_row_to_output] = false;
    1a54:	80 91 19 22 	lds	r24, 0x2219
    1a58:	f8 01       	movw	r30, r16
    1a5a:	e8 0f       	add	r30, r24
    1a5c:	f1 1d       	adc	r31, r1
    1a5e:	10 82       	st	Z, r1
		}
		next_row_to_output++; num_rows_output++;
    1a60:	80 91 19 22 	lds	r24, 0x2219
    1a64:	8f 5f       	subi	r24, 0xFF	; 255
    1a66:	80 93 19 22 	sts	0x2219, r24
		if(next_row_to_output>=LCD_CONSOLE_NUM_ROWS){next_row_to_output=0;}
    1a6a:	88 30       	cpi	r24, 0x08	; 8
    1a6c:	10 f0       	brcs	.+4      	; 0x1a72 <service_lcd_console+0x6a>
    1a6e:	10 92 19 22 	sts	0x2219, r1
//Used to refresh the console
void service_lcd_console(){
	static uint8_t next_row_to_output = 0;
	uint8_t num_rows_output = 0;
	if (STATE_menu != MENU_CONSOLE){return;}
	while((uart_count(&ulcd) < 512)&&(num_rows_output<LCD_CONSOLE_NUM_ROWS)){
    1a72:	80 eb       	ldi	r24, 0xB0	; 176
    1a74:	9b e0       	ldi	r25, 0x0B	; 11
    1a76:	0e 94 67 22 	call	0x44ce	; 0x44ce <uart_count>
    1a7a:	22 e0       	ldi	r18, 0x02	; 2
    1a7c:	80 30       	cpi	r24, 0x00	; 0
    1a7e:	92 07       	cpc	r25, r18
    1a80:	10 f4       	brcc	.+4      	; 0x1a86 <service_lcd_console+0x7e>
    1a82:	c1 50       	subi	r28, 0x01	; 1
    1a84:	99 f6       	brne	.-90     	; 0x1a2c <service_lcd_console+0x24>
			lcd_buffer_dirty[next_row_to_output] = false;
		}
		next_row_to_output++; num_rows_output++;
		if(next_row_to_output>=LCD_CONSOLE_NUM_ROWS){next_row_to_output=0;}
	}
    1a86:	cf 91       	pop	r28
    1a88:	1f 91       	pop	r17
    1a8a:	0f 91       	pop	r16
    1a8c:	ff 90       	pop	r15
    1a8e:	ef 90       	pop	r14
    1a90:	08 95       	ret

00001a92 <init_lcd_touch>:
//#############################################################
//## INITIALIZATION ROUTINE
//#############################################################

void init_lcd_touch(){
	lcd_last_touch_command = LCD_TOUCH_NONE;
    1a92:	85 e1       	ldi	r24, 0x15	; 21
    1a94:	80 93 99 26 	sts	0x2699, r24
	lcd_touch_buffer[LCD_TOUCH_BUFFER_LEN] = 0; //string termination to help with debug printing of the buffer	
    1a98:	10 92 a6 26 	sts	0x26A6, r1
}
    1a9c:	08 95       	ret

00001a9e <lcd_get_touch>:
//#############################################################

/// Returns the code for the last thing touched by user
/** Clears the touch history on read*/
uint8_t lcd_get_touch(){
	uint8_t last = lcd_last_touch_command;
    1a9e:	80 91 99 26 	lds	r24, 0x2699
	lcd_last_touch_command = LCD_TOUCH_NONE;
    1aa2:	95 e1       	ldi	r25, 0x15	; 21
    1aa4:	90 93 99 26 	sts	0x2699, r25
	return last;
}
    1aa8:	08 95       	ret

00001aaa <lcd_set_touch>:
	
void lcd_set_touch(uint8_t latest){
	//Rotate buffer
	for (uint8_t i=0;i<LCD_TOUCH_BUFFER_LEN-1;i++){lcd_touch_buffer[LCD_TOUCH_BUFFER_LEN-1-i] = lcd_touch_buffer[LCD_TOUCH_BUFFER_LEN-2-i];}
    1aaa:	24 ea       	ldi	r18, 0xA4	; 164
    1aac:	36 e2       	ldi	r19, 0x26	; 38
    1aae:	90 91 a4 26 	lds	r25, 0x26A4
    1ab2:	90 93 a5 26 	sts	0x26A5, r25
    1ab6:	d9 01       	movw	r26, r18
    1ab8:	9e 91       	ld	r25, -X
    1aba:	90 93 a4 26 	sts	0x26A4, r25
    1abe:	f9 01       	movw	r30, r18
    1ac0:	32 97       	sbiw	r30, 0x02	; 2
    1ac2:	90 81       	ld	r25, Z
    1ac4:	9c 93       	st	X, r25
    1ac6:	d9 01       	movw	r26, r18
    1ac8:	13 97       	sbiw	r26, 0x03	; 3
    1aca:	9c 91       	ld	r25, X
    1acc:	90 83       	st	Z, r25
    1ace:	f9 01       	movw	r30, r18
    1ad0:	34 97       	sbiw	r30, 0x04	; 4
    1ad2:	90 81       	ld	r25, Z
    1ad4:	9c 93       	st	X, r25
	//Add to front (0-index)
	lcd_touch_buffer[0] = latest;
    1ad6:	80 83       	st	Z, r24

	//Analyze (remember reverse order)

	//Top Menu Navigation
		if ((lcd_touch_buffer[0]==0x0D)&&(lcd_touch_buffer[1]=='2')&&(lcd_touch_buffer[2]=='1')&&(lcd_touch_buffer[3]=='P')&&(lcd_touch_buffer[4]=='Z')&&(lcd_touch_buffer[5]=='T')){lcd_last_touch_command=LCD_TOUCH_OUTPUT;return;}
    1ad8:	80 81       	ld	r24, Z
    1ada:	8d 30       	cpi	r24, 0x0D	; 13
    1adc:	c1 f4       	brne	.+48     	; 0x1b0e <lcd_set_touch+0x64>
    1ade:	80 91 a1 26 	lds	r24, 0x26A1
    1ae2:	82 33       	cpi	r24, 0x32	; 50
    1ae4:	a1 f4       	brne	.+40     	; 0x1b0e <lcd_set_touch+0x64>
    1ae6:	80 91 a2 26 	lds	r24, 0x26A2
    1aea:	81 33       	cpi	r24, 0x31	; 49
    1aec:	81 f4       	brne	.+32     	; 0x1b0e <lcd_set_touch+0x64>
    1aee:	80 91 a3 26 	lds	r24, 0x26A3
    1af2:	80 35       	cpi	r24, 0x50	; 80
    1af4:	61 f4       	brne	.+24     	; 0x1b0e <lcd_set_touch+0x64>
    1af6:	80 91 a4 26 	lds	r24, 0x26A4
    1afa:	8a 35       	cpi	r24, 0x5A	; 90
    1afc:	41 f4       	brne	.+16     	; 0x1b0e <lcd_set_touch+0x64>
    1afe:	80 91 a5 26 	lds	r24, 0x26A5
    1b02:	84 35       	cpi	r24, 0x54	; 84
    1b04:	21 f4       	brne	.+8      	; 0x1b0e <lcd_set_touch+0x64>
    1b06:	8c e0       	ldi	r24, 0x0C	; 12
    1b08:	80 93 99 26 	sts	0x2699, r24
    1b0c:	08 95       	ret
		if ((lcd_touch_buffer[0]==0x0D)&&(lcd_touch_buffer[1]=='3')&&(lcd_touch_buffer[2]=='1')&&(lcd_touch_buffer[3]=='P')&&(lcd_touch_buffer[4]=='Z')&&(lcd_touch_buffer[5]=='T')){lcd_last_touch_command=LCD_TOUCH_CONTROL;return;}
    1b0e:	80 91 a0 26 	lds	r24, 0x26A0
    1b12:	8d 30       	cpi	r24, 0x0D	; 13
    1b14:	c1 f4       	brne	.+48     	; 0x1b46 <lcd_set_touch+0x9c>
    1b16:	80 91 a1 26 	lds	r24, 0x26A1
    1b1a:	83 33       	cpi	r24, 0x33	; 51
    1b1c:	a1 f4       	brne	.+40     	; 0x1b46 <lcd_set_touch+0x9c>
    1b1e:	80 91 a2 26 	lds	r24, 0x26A2
    1b22:	81 33       	cpi	r24, 0x31	; 49
    1b24:	81 f4       	brne	.+32     	; 0x1b46 <lcd_set_touch+0x9c>
    1b26:	80 91 a3 26 	lds	r24, 0x26A3
    1b2a:	80 35       	cpi	r24, 0x50	; 80
    1b2c:	61 f4       	brne	.+24     	; 0x1b46 <lcd_set_touch+0x9c>
    1b2e:	80 91 a4 26 	lds	r24, 0x26A4
    1b32:	8a 35       	cpi	r24, 0x5A	; 90
    1b34:	41 f4       	brne	.+16     	; 0x1b46 <lcd_set_touch+0x9c>
    1b36:	80 91 a5 26 	lds	r24, 0x26A5
    1b3a:	84 35       	cpi	r24, 0x54	; 84
    1b3c:	21 f4       	brne	.+8      	; 0x1b46 <lcd_set_touch+0x9c>
    1b3e:	8d e0       	ldi	r24, 0x0D	; 13
    1b40:	80 93 99 26 	sts	0x2699, r24
    1b44:	08 95       	ret
		if ((lcd_touch_buffer[0]==0x0D)&&(lcd_touch_buffer[1]=='4')&&(lcd_touch_buffer[2]=='1')&&(lcd_touch_buffer[3]=='P')&&(lcd_touch_buffer[4]=='Z')&&(lcd_touch_buffer[5]=='T')){lcd_last_touch_command=LCD_TOUCH_CONSOLE;return;}
    1b46:	80 91 a0 26 	lds	r24, 0x26A0
    1b4a:	8d 30       	cpi	r24, 0x0D	; 13
    1b4c:	c1 f4       	brne	.+48     	; 0x1b7e <lcd_set_touch+0xd4>
    1b4e:	80 91 a1 26 	lds	r24, 0x26A1
    1b52:	84 33       	cpi	r24, 0x34	; 52
    1b54:	a1 f4       	brne	.+40     	; 0x1b7e <lcd_set_touch+0xd4>
    1b56:	80 91 a2 26 	lds	r24, 0x26A2
    1b5a:	81 33       	cpi	r24, 0x31	; 49
    1b5c:	81 f4       	brne	.+32     	; 0x1b7e <lcd_set_touch+0xd4>
    1b5e:	80 91 a3 26 	lds	r24, 0x26A3
    1b62:	80 35       	cpi	r24, 0x50	; 80
    1b64:	61 f4       	brne	.+24     	; 0x1b7e <lcd_set_touch+0xd4>
    1b66:	80 91 a4 26 	lds	r24, 0x26A4
    1b6a:	8a 35       	cpi	r24, 0x5A	; 90
    1b6c:	41 f4       	brne	.+16     	; 0x1b7e <lcd_set_touch+0xd4>
    1b6e:	80 91 a5 26 	lds	r24, 0x26A5
    1b72:	84 35       	cpi	r24, 0x54	; 84
    1b74:	21 f4       	brne	.+8      	; 0x1b7e <lcd_set_touch+0xd4>
    1b76:	8e e0       	ldi	r24, 0x0E	; 14
    1b78:	80 93 99 26 	sts	0x2699, r24
    1b7c:	08 95       	ret
	//Control Screen		
		if ((lcd_touch_buffer[0]==0x0D)&&(lcd_touch_buffer[1]=='7')&&(lcd_touch_buffer[2]=='1')&&(lcd_touch_buffer[3]=='P')&&(lcd_touch_buffer[4]=='Z')&&(lcd_touch_buffer[5]=='T')){lcd_last_touch_command=LCD_TOUCH_ROW_A;return;}
    1b7e:	80 91 a0 26 	lds	r24, 0x26A0
    1b82:	8d 30       	cpi	r24, 0x0D	; 13
    1b84:	c1 f4       	brne	.+48     	; 0x1bb6 <lcd_set_touch+0x10c>
    1b86:	80 91 a1 26 	lds	r24, 0x26A1
    1b8a:	87 33       	cpi	r24, 0x37	; 55
    1b8c:	a1 f4       	brne	.+40     	; 0x1bb6 <lcd_set_touch+0x10c>
    1b8e:	80 91 a2 26 	lds	r24, 0x26A2
    1b92:	81 33       	cpi	r24, 0x31	; 49
    1b94:	81 f4       	brne	.+32     	; 0x1bb6 <lcd_set_touch+0x10c>
    1b96:	80 91 a3 26 	lds	r24, 0x26A3
    1b9a:	80 35       	cpi	r24, 0x50	; 80
    1b9c:	61 f4       	brne	.+24     	; 0x1bb6 <lcd_set_touch+0x10c>
    1b9e:	80 91 a4 26 	lds	r24, 0x26A4
    1ba2:	8a 35       	cpi	r24, 0x5A	; 90
    1ba4:	41 f4       	brne	.+16     	; 0x1bb6 <lcd_set_touch+0x10c>
    1ba6:	80 91 a5 26 	lds	r24, 0x26A5
    1baa:	84 35       	cpi	r24, 0x54	; 84
    1bac:	21 f4       	brne	.+8      	; 0x1bb6 <lcd_set_touch+0x10c>
    1bae:	81 e1       	ldi	r24, 0x11	; 17
    1bb0:	80 93 99 26 	sts	0x2699, r24
    1bb4:	08 95       	ret
		if ((lcd_touch_buffer[0]==0x0D)&&(lcd_touch_buffer[1]=='8')&&(lcd_touch_buffer[2]=='1')&&(lcd_touch_buffer[3]=='P')&&(lcd_touch_buffer[4]=='Z')&&(lcd_touch_buffer[5]=='T')){lcd_last_touch_command=LCD_TOUCH_ROW_B;return;}
    1bb6:	80 91 a0 26 	lds	r24, 0x26A0
    1bba:	8d 30       	cpi	r24, 0x0D	; 13
    1bbc:	c1 f4       	brne	.+48     	; 0x1bee <lcd_set_touch+0x144>
    1bbe:	80 91 a1 26 	lds	r24, 0x26A1
    1bc2:	88 33       	cpi	r24, 0x38	; 56
    1bc4:	a1 f4       	brne	.+40     	; 0x1bee <lcd_set_touch+0x144>
    1bc6:	80 91 a2 26 	lds	r24, 0x26A2
    1bca:	81 33       	cpi	r24, 0x31	; 49
    1bcc:	81 f4       	brne	.+32     	; 0x1bee <lcd_set_touch+0x144>
    1bce:	80 91 a3 26 	lds	r24, 0x26A3
    1bd2:	80 35       	cpi	r24, 0x50	; 80
    1bd4:	61 f4       	brne	.+24     	; 0x1bee <lcd_set_touch+0x144>
    1bd6:	80 91 a4 26 	lds	r24, 0x26A4
    1bda:	8a 35       	cpi	r24, 0x5A	; 90
    1bdc:	41 f4       	brne	.+16     	; 0x1bee <lcd_set_touch+0x144>
    1bde:	80 91 a5 26 	lds	r24, 0x26A5
    1be2:	84 35       	cpi	r24, 0x54	; 84
    1be4:	21 f4       	brne	.+8      	; 0x1bee <lcd_set_touch+0x144>
    1be6:	82 e1       	ldi	r24, 0x12	; 18
    1be8:	80 93 99 26 	sts	0x2699, r24
    1bec:	08 95       	ret
		if ((lcd_touch_buffer[0]==0x0D)&&(lcd_touch_buffer[1]=='9')&&(lcd_touch_buffer[2]=='1')&&(lcd_touch_buffer[3]=='P')&&(lcd_touch_buffer[4]=='Z')&&(lcd_touch_buffer[5]=='T')){lcd_last_touch_command=LCD_TOUCH_ROW_C;return;}
    1bee:	80 91 a0 26 	lds	r24, 0x26A0
    1bf2:	8d 30       	cpi	r24, 0x0D	; 13
    1bf4:	c1 f4       	brne	.+48     	; 0x1c26 <lcd_set_touch+0x17c>
    1bf6:	80 91 a1 26 	lds	r24, 0x26A1
    1bfa:	89 33       	cpi	r24, 0x39	; 57
    1bfc:	a1 f4       	brne	.+40     	; 0x1c26 <lcd_set_touch+0x17c>
    1bfe:	80 91 a2 26 	lds	r24, 0x26A2
    1c02:	81 33       	cpi	r24, 0x31	; 49
    1c04:	81 f4       	brne	.+32     	; 0x1c26 <lcd_set_touch+0x17c>
    1c06:	80 91 a3 26 	lds	r24, 0x26A3
    1c0a:	80 35       	cpi	r24, 0x50	; 80
    1c0c:	61 f4       	brne	.+24     	; 0x1c26 <lcd_set_touch+0x17c>
    1c0e:	80 91 a4 26 	lds	r24, 0x26A4
    1c12:	8a 35       	cpi	r24, 0x5A	; 90
    1c14:	41 f4       	brne	.+16     	; 0x1c26 <lcd_set_touch+0x17c>
    1c16:	80 91 a5 26 	lds	r24, 0x26A5
    1c1a:	84 35       	cpi	r24, 0x54	; 84
    1c1c:	21 f4       	brne	.+8      	; 0x1c26 <lcd_set_touch+0x17c>
    1c1e:	83 e1       	ldi	r24, 0x13	; 19
    1c20:	80 93 99 26 	sts	0x2699, r24
    1c24:	08 95       	ret
		if ((lcd_touch_buffer[0]==0x0D)&&(lcd_touch_buffer[1]=='0')&&(lcd_touch_buffer[2]=='2')&&(lcd_touch_buffer[3]=='P')&&(lcd_touch_buffer[4]=='Z')&&(lcd_touch_buffer[5]=='T')){lcd_last_touch_command=LCD_TOUCH_ROW_D;return;}
    1c26:	80 91 a0 26 	lds	r24, 0x26A0
    1c2a:	8d 30       	cpi	r24, 0x0D	; 13
    1c2c:	c1 f4       	brne	.+48     	; 0x1c5e <lcd_set_touch+0x1b4>
    1c2e:	80 91 a1 26 	lds	r24, 0x26A1
    1c32:	80 33       	cpi	r24, 0x30	; 48
    1c34:	a1 f4       	brne	.+40     	; 0x1c5e <lcd_set_touch+0x1b4>
    1c36:	80 91 a2 26 	lds	r24, 0x26A2
    1c3a:	82 33       	cpi	r24, 0x32	; 50
    1c3c:	81 f4       	brne	.+32     	; 0x1c5e <lcd_set_touch+0x1b4>
    1c3e:	80 91 a3 26 	lds	r24, 0x26A3
    1c42:	80 35       	cpi	r24, 0x50	; 80
    1c44:	61 f4       	brne	.+24     	; 0x1c5e <lcd_set_touch+0x1b4>
    1c46:	80 91 a4 26 	lds	r24, 0x26A4
    1c4a:	8a 35       	cpi	r24, 0x5A	; 90
    1c4c:	41 f4       	brne	.+16     	; 0x1c5e <lcd_set_touch+0x1b4>
    1c4e:	80 91 a5 26 	lds	r24, 0x26A5
    1c52:	84 35       	cpi	r24, 0x54	; 84
    1c54:	21 f4       	brne	.+8      	; 0x1c5e <lcd_set_touch+0x1b4>
    1c56:	84 e1       	ldi	r24, 0x14	; 20
    1c58:	80 93 99 26 	sts	0x2699, r24
    1c5c:	08 95       	ret
	//Control Dialog Window
		if ((lcd_touch_buffer[0]==0x0D)&&(lcd_touch_buffer[1]=='6')&&(lcd_touch_buffer[2]=='9')&&(lcd_touch_buffer[3]=='P')&&(lcd_touch_buffer[4]=='Z')&&(lcd_touch_buffer[5]=='T')){lcd_last_touch_command=LCD_TOUCH_CLOSE_DIAL;return;}
    1c5e:	80 91 a0 26 	lds	r24, 0x26A0
    1c62:	8d 30       	cpi	r24, 0x0D	; 13
    1c64:	c1 f4       	brne	.+48     	; 0x1c96 <lcd_set_touch+0x1ec>
    1c66:	80 91 a1 26 	lds	r24, 0x26A1
    1c6a:	86 33       	cpi	r24, 0x36	; 54
    1c6c:	a1 f4       	brne	.+40     	; 0x1c96 <lcd_set_touch+0x1ec>
    1c6e:	80 91 a2 26 	lds	r24, 0x26A2
    1c72:	89 33       	cpi	r24, 0x39	; 57
    1c74:	81 f4       	brne	.+32     	; 0x1c96 <lcd_set_touch+0x1ec>
    1c76:	80 91 a3 26 	lds	r24, 0x26A3
    1c7a:	80 35       	cpi	r24, 0x50	; 80
    1c7c:	61 f4       	brne	.+24     	; 0x1c96 <lcd_set_touch+0x1ec>
    1c7e:	80 91 a4 26 	lds	r24, 0x26A4
    1c82:	8a 35       	cpi	r24, 0x5A	; 90
    1c84:	41 f4       	brne	.+16     	; 0x1c96 <lcd_set_touch+0x1ec>
    1c86:	80 91 a5 26 	lds	r24, 0x26A5
    1c8a:	84 35       	cpi	r24, 0x54	; 84
    1c8c:	21 f4       	brne	.+8      	; 0x1c96 <lcd_set_touch+0x1ec>
    1c8e:	80 e6       	ldi	r24, 0x60	; 96
    1c90:	80 93 99 26 	sts	0x2699, r24
    1c94:	08 95       	ret
		if ((lcd_touch_buffer[0]==0x0D)&&(lcd_touch_buffer[1]=='7')&&(lcd_touch_buffer[2]=='9')&&(lcd_touch_buffer[3]=='P')&&(lcd_touch_buffer[4]=='Z')&&(lcd_touch_buffer[5]=='T')){lcd_last_touch_command=LCD_TOUCH_LEFT;return;}
    1c96:	80 91 a0 26 	lds	r24, 0x26A0
    1c9a:	8d 30       	cpi	r24, 0x0D	; 13
    1c9c:	c1 f4       	brne	.+48     	; 0x1cce <lcd_set_touch+0x224>
    1c9e:	80 91 a1 26 	lds	r24, 0x26A1
    1ca2:	87 33       	cpi	r24, 0x37	; 55
    1ca4:	a1 f4       	brne	.+40     	; 0x1cce <lcd_set_touch+0x224>
    1ca6:	80 91 a2 26 	lds	r24, 0x26A2
    1caa:	89 33       	cpi	r24, 0x39	; 57
    1cac:	81 f4       	brne	.+32     	; 0x1cce <lcd_set_touch+0x224>
    1cae:	80 91 a3 26 	lds	r24, 0x26A3
    1cb2:	80 35       	cpi	r24, 0x50	; 80
    1cb4:	61 f4       	brne	.+24     	; 0x1cce <lcd_set_touch+0x224>
    1cb6:	80 91 a4 26 	lds	r24, 0x26A4
    1cba:	8a 35       	cpi	r24, 0x5A	; 90
    1cbc:	41 f4       	brne	.+16     	; 0x1cce <lcd_set_touch+0x224>
    1cbe:	80 91 a5 26 	lds	r24, 0x26A5
    1cc2:	84 35       	cpi	r24, 0x54	; 84
    1cc4:	21 f4       	brne	.+8      	; 0x1cce <lcd_set_touch+0x224>
    1cc6:	81 e6       	ldi	r24, 0x61	; 97
    1cc8:	80 93 99 26 	sts	0x2699, r24
    1ccc:	08 95       	ret
		if ((lcd_touch_buffer[0]==0x0D)&&(lcd_touch_buffer[1]=='8')&&(lcd_touch_buffer[2]=='9')&&(lcd_touch_buffer[3]=='P')&&(lcd_touch_buffer[4]=='Z')&&(lcd_touch_buffer[5]=='T')){lcd_last_touch_command=LCD_TOUCH_RIGHT;return;}
    1cce:	80 91 a0 26 	lds	r24, 0x26A0
    1cd2:	8d 30       	cpi	r24, 0x0D	; 13
    1cd4:	c1 f4       	brne	.+48     	; 0x1d06 <lcd_set_touch+0x25c>
    1cd6:	80 91 a1 26 	lds	r24, 0x26A1
    1cda:	88 33       	cpi	r24, 0x38	; 56
    1cdc:	a1 f4       	brne	.+40     	; 0x1d06 <lcd_set_touch+0x25c>
    1cde:	80 91 a2 26 	lds	r24, 0x26A2
    1ce2:	89 33       	cpi	r24, 0x39	; 57
    1ce4:	81 f4       	brne	.+32     	; 0x1d06 <lcd_set_touch+0x25c>
    1ce6:	80 91 a3 26 	lds	r24, 0x26A3
    1cea:	80 35       	cpi	r24, 0x50	; 80
    1cec:	61 f4       	brne	.+24     	; 0x1d06 <lcd_set_touch+0x25c>
    1cee:	80 91 a4 26 	lds	r24, 0x26A4
    1cf2:	8a 35       	cpi	r24, 0x5A	; 90
    1cf4:	41 f4       	brne	.+16     	; 0x1d06 <lcd_set_touch+0x25c>
    1cf6:	80 91 a5 26 	lds	r24, 0x26A5
    1cfa:	84 35       	cpi	r24, 0x54	; 84
    1cfc:	21 f4       	brne	.+8      	; 0x1d06 <lcd_set_touch+0x25c>
    1cfe:	82 e6       	ldi	r24, 0x62	; 98
    1d00:	80 93 99 26 	sts	0x2699, r24
    1d04:	08 95       	ret
	//Output Screen
		if ((lcd_touch_buffer[0]==0x0D)&&(lcd_touch_buffer[1]=='9')&&(lcd_touch_buffer[2]=='9')&&(lcd_touch_buffer[3]=='P')&&(lcd_touch_buffer[4]=='Z')&&(lcd_touch_buffer[5]=='T')){lcd_last_touch_command=LCD_TOUCH_CLOSE_DETAIL;return;}
    1d06:	80 91 a0 26 	lds	r24, 0x26A0
    1d0a:	8d 30       	cpi	r24, 0x0D	; 13
    1d0c:	c1 f4       	brne	.+48     	; 0x1d3e <lcd_set_touch+0x294>
    1d0e:	80 91 a1 26 	lds	r24, 0x26A1
    1d12:	89 33       	cpi	r24, 0x39	; 57
    1d14:	a1 f4       	brne	.+40     	; 0x1d3e <lcd_set_touch+0x294>
    1d16:	80 91 a2 26 	lds	r24, 0x26A2
    1d1a:	89 33       	cpi	r24, 0x39	; 57
    1d1c:	81 f4       	brne	.+32     	; 0x1d3e <lcd_set_touch+0x294>
    1d1e:	80 91 a3 26 	lds	r24, 0x26A3
    1d22:	80 35       	cpi	r24, 0x50	; 80
    1d24:	61 f4       	brne	.+24     	; 0x1d3e <lcd_set_touch+0x294>
    1d26:	80 91 a4 26 	lds	r24, 0x26A4
    1d2a:	8a 35       	cpi	r24, 0x5A	; 90
    1d2c:	41 f4       	brne	.+16     	; 0x1d3e <lcd_set_touch+0x294>
    1d2e:	80 91 a5 26 	lds	r24, 0x26A5
    1d32:	84 35       	cpi	r24, 0x54	; 84
    1d34:	21 f4       	brne	.+8      	; 0x1d3e <lcd_set_touch+0x294>
    1d36:	83 e6       	ldi	r24, 0x63	; 99
    1d38:	80 93 99 26 	sts	0x2699, r24
    1d3c:	08 95       	ret
		if ((lcd_touch_buffer[0]==0x0D)&&(lcd_touch_buffer[1]=='5')&&(lcd_touch_buffer[2]=='1')&&(lcd_touch_buffer[3]=='P')&&(lcd_touch_buffer[4]=='Z')&&(lcd_touch_buffer[5]=='T')){lcd_last_touch_command=LCD_TOUCH_OPEN_DETAIL_AB;return;}
    1d3e:	80 91 a0 26 	lds	r24, 0x26A0
    1d42:	8d 30       	cpi	r24, 0x0D	; 13
    1d44:	c1 f4       	brne	.+48     	; 0x1d76 <lcd_set_touch+0x2cc>
    1d46:	80 91 a1 26 	lds	r24, 0x26A1
    1d4a:	85 33       	cpi	r24, 0x35	; 53
    1d4c:	a1 f4       	brne	.+40     	; 0x1d76 <lcd_set_touch+0x2cc>
    1d4e:	80 91 a2 26 	lds	r24, 0x26A2
    1d52:	81 33       	cpi	r24, 0x31	; 49
    1d54:	81 f4       	brne	.+32     	; 0x1d76 <lcd_set_touch+0x2cc>
    1d56:	80 91 a3 26 	lds	r24, 0x26A3
    1d5a:	80 35       	cpi	r24, 0x50	; 80
    1d5c:	61 f4       	brne	.+24     	; 0x1d76 <lcd_set_touch+0x2cc>
    1d5e:	80 91 a4 26 	lds	r24, 0x26A4
    1d62:	8a 35       	cpi	r24, 0x5A	; 90
    1d64:	41 f4       	brne	.+16     	; 0x1d76 <lcd_set_touch+0x2cc>
    1d66:	80 91 a5 26 	lds	r24, 0x26A5
    1d6a:	84 35       	cpi	r24, 0x54	; 84
    1d6c:	21 f4       	brne	.+8      	; 0x1d76 <lcd_set_touch+0x2cc>
    1d6e:	8f e0       	ldi	r24, 0x0F	; 15
    1d70:	80 93 99 26 	sts	0x2699, r24
    1d74:	08 95       	ret
		if ((lcd_touch_buffer[0]==0x0D)&&(lcd_touch_buffer[1]=='6')&&(lcd_touch_buffer[2]=='1')&&(lcd_touch_buffer[3]=='P')&&(lcd_touch_buffer[4]=='Z')&&(lcd_touch_buffer[5]=='T')){lcd_last_touch_command=LCD_TOUCH_OPEN_DETAIL_CD;return;}
    1d76:	80 91 a0 26 	lds	r24, 0x26A0
    1d7a:	8d 30       	cpi	r24, 0x0D	; 13
    1d7c:	b9 f4       	brne	.+46     	; 0x1dac <lcd_set_touch+0x302>
    1d7e:	80 91 a1 26 	lds	r24, 0x26A1
    1d82:	86 33       	cpi	r24, 0x36	; 54
    1d84:	99 f4       	brne	.+38     	; 0x1dac <lcd_set_touch+0x302>
    1d86:	80 91 a2 26 	lds	r24, 0x26A2
    1d8a:	81 33       	cpi	r24, 0x31	; 49
    1d8c:	79 f4       	brne	.+30     	; 0x1dac <lcd_set_touch+0x302>
    1d8e:	80 91 a3 26 	lds	r24, 0x26A3
    1d92:	80 35       	cpi	r24, 0x50	; 80
    1d94:	59 f4       	brne	.+22     	; 0x1dac <lcd_set_touch+0x302>
    1d96:	80 91 a4 26 	lds	r24, 0x26A4
    1d9a:	8a 35       	cpi	r24, 0x5A	; 90
    1d9c:	39 f4       	brne	.+14     	; 0x1dac <lcd_set_touch+0x302>
    1d9e:	80 91 a5 26 	lds	r24, 0x26A5
    1da2:	84 35       	cpi	r24, 0x54	; 84
    1da4:	19 f4       	brne	.+6      	; 0x1dac <lcd_set_touch+0x302>
    1da6:	80 e1       	ldi	r24, 0x10	; 16
    1da8:	80 93 99 26 	sts	0x2699, r24
    1dac:	08 95       	ret

00001dae <service_lcd_touch>:
//## SERVICE ROUTINE
//#############################################################

//Used to refresh the console
void service_lcd_touch(){
	if (lcd_last_touch_command==LCD_TOUCH_NONE) return; //exit if nothing has been pressed
    1dae:	80 91 99 26 	lds	r24, 0x2699
    1db2:	85 31       	cpi	r24, 0x15	; 21
    1db4:	09 f4       	brne	.+2      	; 0x1db8 <service_lcd_touch+0xa>
    1db6:	59 c0       	rjmp	.+178    	; 0x1e6a <service_lcd_touch+0xbc>
	switch(lcd_get_touch()){
    1db8:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <lcd_get_touch>
    1dbc:	82 31       	cpi	r24, 0x12	; 18
    1dbe:	91 f1       	breq	.+100    	; 0x1e24 <service_lcd_touch+0x76>
    1dc0:	83 31       	cpi	r24, 0x13	; 19
    1dc2:	80 f4       	brcc	.+32     	; 0x1de4 <service_lcd_touch+0x36>
    1dc4:	8e 30       	cpi	r24, 0x0E	; 14
    1dc6:	31 f1       	breq	.+76     	; 0x1e14 <service_lcd_touch+0x66>
    1dc8:	8f 30       	cpi	r24, 0x0F	; 15
    1dca:	30 f4       	brcc	.+12     	; 0x1dd8 <service_lcd_touch+0x2a>
    1dcc:	8c 30       	cpi	r24, 0x0C	; 12
    1dce:	d1 f0       	breq	.+52     	; 0x1e04 <service_lcd_touch+0x56>
    1dd0:	8d 30       	cpi	r24, 0x0D	; 13
    1dd2:	09 f0       	breq	.+2      	; 0x1dd6 <service_lcd_touch+0x28>
    1dd4:	4a c0       	rjmp	.+148    	; 0x1e6a <service_lcd_touch+0xbc>
    1dd6:	1a c0       	rjmp	.+52     	; 0x1e0c <service_lcd_touch+0x5e>
    1dd8:	80 31       	cpi	r24, 0x10	; 16
    1dda:	09 f4       	brne	.+2      	; 0x1dde <service_lcd_touch+0x30>
    1ddc:	43 c0       	rjmp	.+134    	; 0x1e64 <service_lcd_touch+0xb6>
    1dde:	81 31       	cpi	r24, 0x11	; 17
    1de0:	e8 f4       	brcc	.+58     	; 0x1e1c <service_lcd_touch+0x6e>
    1de2:	3c c0       	rjmp	.+120    	; 0x1e5c <service_lcd_touch+0xae>
    1de4:	80 36       	cpi	r24, 0x60	; 96
    1de6:	91 f1       	breq	.+100    	; 0x1e4c <service_lcd_touch+0x9e>
    1de8:	81 36       	cpi	r24, 0x61	; 97
    1dea:	28 f4       	brcc	.+10     	; 0x1df6 <service_lcd_touch+0x48>
    1dec:	83 31       	cpi	r24, 0x13	; 19
    1dee:	f1 f0       	breq	.+60     	; 0x1e2c <service_lcd_touch+0x7e>
    1df0:	84 31       	cpi	r24, 0x14	; 20
    1df2:	d9 f5       	brne	.+118    	; 0x1e6a <service_lcd_touch+0xbc>
    1df4:	1f c0       	rjmp	.+62     	; 0x1e34 <service_lcd_touch+0x86>
    1df6:	82 36       	cpi	r24, 0x62	; 98
    1df8:	29 f1       	breq	.+74     	; 0x1e44 <service_lcd_touch+0x96>
    1dfa:	82 36       	cpi	r24, 0x62	; 98
    1dfc:	f8 f0       	brcs	.+62     	; 0x1e3c <service_lcd_touch+0x8e>
    1dfe:	83 36       	cpi	r24, 0x63	; 99
    1e00:	a1 f5       	brne	.+104    	; 0x1e6a <service_lcd_touch+0xbc>
    1e02:	28 c0       	rjmp	.+80     	; 0x1e54 <service_lcd_touch+0xa6>
		
		//MENU NAVIGATION
		case LCD_TOUCH_OUTPUT:
			brain_menu_load(MENU_OUTPUT);
    1e04:	80 e2       	ldi	r24, 0x20	; 32
    1e06:	0e 94 01 05 	call	0xa02	; 0xa02 <brain_menu_load>
			break;
    1e0a:	08 95       	ret
		case LCD_TOUCH_CONTROL:
			brain_menu_load(MENU_CONTROL);
    1e0c:	81 e2       	ldi	r24, 0x21	; 33
    1e0e:	0e 94 01 05 	call	0xa02	; 0xa02 <brain_menu_load>
			break;
    1e12:	08 95       	ret
		case LCD_TOUCH_CONSOLE:
			brain_menu_load(MENU_CONSOLE);
    1e14:	82 e2       	ldi	r24, 0x22	; 34
    1e16:	0e 94 01 05 	call	0xa02	; 0xa02 <brain_menu_load>
			break;
    1e1a:	08 95       	ret
			
		//CONTROL MENU
		case LCD_TOUCH_ROW_A:
			brain_menu_control_dial(LCD_TOUCH_ROW_A);
    1e1c:	81 e1       	ldi	r24, 0x11	; 17
    1e1e:	0e 94 4a 04 	call	0x894	; 0x894 <brain_menu_control_dial>
			break;
    1e22:	08 95       	ret
		case LCD_TOUCH_ROW_B:
			brain_menu_control_dial(LCD_TOUCH_ROW_B);
    1e24:	82 e1       	ldi	r24, 0x12	; 18
    1e26:	0e 94 4a 04 	call	0x894	; 0x894 <brain_menu_control_dial>
			break;
    1e2a:	08 95       	ret
		case LCD_TOUCH_ROW_C:
			brain_menu_control_dial(LCD_TOUCH_ROW_C);
    1e2c:	83 e1       	ldi	r24, 0x13	; 19
    1e2e:	0e 94 4a 04 	call	0x894	; 0x894 <brain_menu_control_dial>
			break;
    1e32:	08 95       	ret
		case LCD_TOUCH_ROW_D:
			brain_menu_control_dial(LCD_TOUCH_ROW_D);
    1e34:	84 e1       	ldi	r24, 0x14	; 20
    1e36:	0e 94 4a 04 	call	0x894	; 0x894 <brain_menu_control_dial>
			break;
    1e3a:	08 95       	ret
		
		//CONTROL DIALOG WINDOW
		case LCD_TOUCH_LEFT:
			brain_menu_control_dial_select(LCD_TOUCH_LEFT);
    1e3c:	81 e6       	ldi	r24, 0x61	; 97
    1e3e:	0e 94 85 04 	call	0x90a	; 0x90a <brain_menu_control_dial_select>
			break;
    1e42:	08 95       	ret
		case LCD_TOUCH_RIGHT:
			brain_menu_control_dial_select(LCD_TOUCH_RIGHT);
    1e44:	82 e6       	ldi	r24, 0x62	; 98
    1e46:	0e 94 85 04 	call	0x90a	; 0x90a <brain_menu_control_dial_select>
			break;
    1e4a:	08 95       	ret
		case LCD_TOUCH_CLOSE_DIAL:
			brain_menu_load(MENU_CONTROL);
    1e4c:	81 e2       	ldi	r24, 0x21	; 33
    1e4e:	0e 94 01 05 	call	0xa02	; 0xa02 <brain_menu_load>
			break;
    1e52:	08 95       	ret
		
		//OUTPUT MENU
		case LCD_TOUCH_CLOSE_DETAIL:
			brain_menu_load(MENU_OUTPUT);
    1e54:	80 e2       	ldi	r24, 0x20	; 32
    1e56:	0e 94 01 05 	call	0xa02	; 0xa02 <brain_menu_load>
			break;
    1e5a:	08 95       	ret
		case LCD_TOUCH_OPEN_DETAIL_AB:
			brain_menu_output_detail(LCD_TOUCH_OPEN_DETAIL_AB);
    1e5c:	8f e0       	ldi	r24, 0x0F	; 15
    1e5e:	0e 94 15 04 	call	0x82a	; 0x82a <brain_menu_output_detail>
			break;
    1e62:	08 95       	ret
		case LCD_TOUCH_OPEN_DETAIL_CD:
			brain_menu_output_detail(LCD_TOUCH_OPEN_DETAIL_CD);
    1e64:	80 e1       	ldi	r24, 0x10	; 16
    1e66:	0e 94 15 04 	call	0x82a	; 0x82a <brain_menu_output_detail>
    1e6a:	08 95       	ret

00001e6c <init_pwr_adjust>:
//## INITIALIZATION ROUTINE
//#############################################################

void init_pwr_adjust(){
	//Enable lines
	PORTH.OUTCLR = 0x00;
    1e6c:	e0 ee       	ldi	r30, 0xE0	; 224
    1e6e:	f6 e0       	ldi	r31, 0x06	; 6
    1e70:	16 82       	std	Z+6, r1	; 0x06
	PORTH.DIRSET = B8(00011111); //ADJ Outputs & 5V fixed output to out direction
    1e72:	8f e1       	ldi	r24, 0x1F	; 31
    1e74:	81 83       	std	Z+1, r24	; 0x01
	
	//Chip Select lines
	PORTD.OUTSET = B8(00011111); //set all output pins high prior to enabling output (deselect SPI peripherals)
    1e76:	e0 e6       	ldi	r30, 0x60	; 96
    1e78:	f6 e0       	ldi	r31, 0x06	; 6
    1e7a:	85 83       	std	Z+5, r24	; 0x05
	PORTD.DIRSET = B8(11111011); //ADJ_CS, TC_CS, SPI_MOSI, SPI_CLOCK to outputs	
    1e7c:	8b ef       	ldi	r24, 0xFB	; 251
    1e7e:	81 83       	std	Z+1, r24	; 0x01
		--Master reads on the rising clock edge
		--Clock idles HIGH
		--Shifted MSB-first 
		--Max clock = 7MHz
	*/
	SPID.CTRL = B8(11011101); //2X Clock (with 16x prescale) = 1/8 System Frequency = 4MHz; Master Mode; Clock idle high; Master sample on rising edge
    1e80:	e0 ec       	ldi	r30, 0xC0	; 192
    1e82:	f9 e0       	ldi	r31, 0x09	; 9
    1e84:	8d ed       	ldi	r24, 0xDD	; 221
    1e86:	80 83       	st	Z, r24
	SPID.INTCTRL = 2; //medium priority interrupt
    1e88:	82 e0       	ldi	r24, 0x02	; 2
    1e8a:	81 83       	std	Z+1, r24	; 0x01
	
	pwr_adj_spi_state = PWR_ADJ_SPI_IDLE;
    1e8c:	10 92 aa 26 	sts	0x26AA, r1
	pwr_adj_send_channels = 0x00;
    1e90:	10 92 92 26 	sts	0x2692, r1
	pwr_adj_channel_dirty = 0x00;
    1e94:	10 92 ac 26 	sts	0x26AC, r1
	pwr_adj_left_right = LCD_TOUCH_LEFT;
    1e98:	81 e6       	ldi	r24, 0x61	; 97
    1e9a:	80 93 97 26 	sts	0x2697, r24
}
    1e9e:	08 95       	ret

00001ea0 <pwr_adj_spi_send>:
	}
}	
	
void pwr_adj_spi_send(uint8_t channel_num){
	//STATE
	pwr_adj_spi_state = PWR_ADJ_SPI_COMMAND;
    1ea0:	91 e0       	ldi	r25, 0x01	; 1
    1ea2:	90 93 aa 26 	sts	0x26AA, r25
	pwr_adj_channel_num_in_progress = channel_num;
    1ea6:	80 93 98 26 	sts	0x2698, r24
	
	//CHIP SELECT
	switch(channel_num){
    1eaa:	84 30       	cpi	r24, 0x04	; 4
    1eac:	18 f4       	brcc	.+6      	; 0x1eb4 <pwr_adj_spi_send+0x14>
    1eae:	82 30       	cpi	r24, 0x02	; 2
    1eb0:	58 f4       	brcc	.+22     	; 0x1ec8 <pwr_adj_spi_send+0x28>
    1eb2:	05 c0       	rjmp	.+10     	; 0x1ebe <pwr_adj_spi_send+0x1e>
    1eb4:	86 30       	cpi	r24, 0x06	; 6
    1eb6:	68 f0       	brcs	.+26     	; 0x1ed2 <pwr_adj_spi_send+0x32>
    1eb8:	88 30       	cpi	r24, 0x08	; 8
    1eba:	a0 f4       	brcc	.+40     	; 0x1ee4 <pwr_adj_spi_send+0x44>
    1ebc:	0f c0       	rjmp	.+30     	; 0x1edc <pwr_adj_spi_send+0x3c>
	case 0:
	case 1:
		PORTD.OUTCLR = _BV(0); //CS low, start transmitting
    1ebe:	91 e0       	ldi	r25, 0x01	; 1
    1ec0:	e0 e6       	ldi	r30, 0x60	; 96
    1ec2:	f6 e0       	ldi	r31, 0x06	; 6
    1ec4:	96 83       	std	Z+6, r25	; 0x06
		break;
    1ec6:	0e c0       	rjmp	.+28     	; 0x1ee4 <pwr_adj_spi_send+0x44>
	case 2:
	case 3:
		PORTD.OUTCLR = _BV(1); //CS low, start transmitting
    1ec8:	92 e0       	ldi	r25, 0x02	; 2
    1eca:	e0 e6       	ldi	r30, 0x60	; 96
    1ecc:	f6 e0       	ldi	r31, 0x06	; 6
    1ece:	96 83       	std	Z+6, r25	; 0x06
		break;
    1ed0:	09 c0       	rjmp	.+18     	; 0x1ee4 <pwr_adj_spi_send+0x44>
	case 4:
	case 5:
		PORTD.OUTCLR = _BV(2); //CS low, start transmitting
    1ed2:	94 e0       	ldi	r25, 0x04	; 4
    1ed4:	e0 e6       	ldi	r30, 0x60	; 96
    1ed6:	f6 e0       	ldi	r31, 0x06	; 6
    1ed8:	96 83       	std	Z+6, r25	; 0x06
		break;
    1eda:	04 c0       	rjmp	.+8      	; 0x1ee4 <pwr_adj_spi_send+0x44>
	case 6:
	case 7:
		PORTD.OUTCLR = _BV(3); //CS low, start transmitting
    1edc:	98 e0       	ldi	r25, 0x08	; 8
    1ede:	e0 e6       	ldi	r30, 0x60	; 96
    1ee0:	f6 e0       	ldi	r31, 0x06	; 6
    1ee2:	96 83       	std	Z+6, r25	; 0x06
		break;
	}
	
	//SEND COMMAND BYTE
	if(channel_num % 2){
    1ee4:	80 ff       	sbrs	r24, 0
    1ee6:	05 c0       	rjmp	.+10     	; 0x1ef2 <pwr_adj_spi_send+0x52>
		//channel_num = 1,3,5,7 (0 == false in C)
		SPID.DATA = MAX5494_SET2;
    1ee8:	82 e0       	ldi	r24, 0x02	; 2
    1eea:	e0 ec       	ldi	r30, 0xC0	; 192
    1eec:	f9 e0       	ldi	r31, 0x09	; 9
    1eee:	83 83       	std	Z+3, r24	; 0x03
    1ef0:	08 95       	ret
	} 
	else {
		SPID.DATA = MAX5494_SET1;
    1ef2:	81 e0       	ldi	r24, 0x01	; 1
    1ef4:	e0 ec       	ldi	r30, 0xC0	; 192
    1ef6:	f9 e0       	ldi	r31, 0x09	; 9
    1ef8:	83 83       	std	Z+3, r24	; 0x03
    1efa:	08 95       	ret

00001efc <_pwr_adj_next>:
//#############################################################
//## SPI LOW-LEVEL FUNCTIONS
//#############################################################

void _pwr_adj_next(){
	pwr_adj_send_channels &= ~_BV(pwr_adj_channel_num_in_progress); //clear channel we just finished sending
    1efc:	61 e0       	ldi	r22, 0x01	; 1
    1efe:	70 e0       	ldi	r23, 0x00	; 0
    1f00:	00 90 98 26 	lds	r0, 0x2698
    1f04:	02 c0       	rjmp	.+4      	; 0x1f0a <_pwr_adj_next+0xe>
    1f06:	66 0f       	add	r22, r22
    1f08:	77 1f       	adc	r23, r23
    1f0a:	0a 94       	dec	r0
    1f0c:	e2 f7       	brpl	.-8      	; 0x1f06 <_pwr_adj_next+0xa>
    1f0e:	60 95       	com	r22
    1f10:	80 91 92 26 	lds	r24, 0x2692
    1f14:	68 23       	and	r22, r24
    1f16:	60 93 92 26 	sts	0x2692, r22
	if (pwr_adj_send_channels > 0){
    1f1a:	66 23       	and	r22, r22
    1f1c:	f1 f0       	breq	.+60     	; 0x1f5a <_pwr_adj_next+0x5e>
		//Some other channels need to be sent
		for(uint8_t i=0;i<PWR_ADJ_NUM_CHANNELS;i++){
			if((pwr_adj_send_channels & _BV(i)) > 0){
    1f1e:	70 e0       	ldi	r23, 0x00	; 0
    1f20:	60 fd       	sbrc	r22, 0
    1f22:	12 c0       	rjmp	.+36     	; 0x1f48 <_pwr_adj_next+0x4c>
    1f24:	21 e0       	ldi	r18, 0x01	; 1
    1f26:	30 e0       	ldi	r19, 0x00	; 0
    1f28:	e1 e0       	ldi	r30, 0x01	; 1
    1f2a:	f0 e0       	ldi	r31, 0x00	; 0
    1f2c:	82 2f       	mov	r24, r18
    1f2e:	af 01       	movw	r20, r30
    1f30:	02 2e       	mov	r0, r18
    1f32:	02 c0       	rjmp	.+4      	; 0x1f38 <_pwr_adj_next+0x3c>
    1f34:	44 0f       	add	r20, r20
    1f36:	55 1f       	adc	r21, r21
    1f38:	0a 94       	dec	r0
    1f3a:	e2 f7       	brpl	.-8      	; 0x1f34 <_pwr_adj_next+0x38>
    1f3c:	46 23       	and	r20, r22
    1f3e:	57 23       	and	r21, r23
    1f40:	14 16       	cp	r1, r20
    1f42:	15 06       	cpc	r1, r21
    1f44:	2c f4       	brge	.+10     	; 0x1f50 <_pwr_adj_next+0x54>
    1f46:	01 c0       	rjmp	.+2      	; 0x1f4a <_pwr_adj_next+0x4e>
    1f48:	80 e0       	ldi	r24, 0x00	; 0
				pwr_adj_spi_send(i);
    1f4a:	0e 94 50 0f 	call	0x1ea0	; 0x1ea0 <pwr_adj_spi_send>
				return; //exit for
    1f4e:	08 95       	ret
    1f50:	2f 5f       	subi	r18, 0xFF	; 255
    1f52:	3f 4f       	sbci	r19, 0xFF	; 255

void _pwr_adj_next(){
	pwr_adj_send_channels &= ~_BV(pwr_adj_channel_num_in_progress); //clear channel we just finished sending
	if (pwr_adj_send_channels > 0){
		//Some other channels need to be sent
		for(uint8_t i=0;i<PWR_ADJ_NUM_CHANNELS;i++){
    1f54:	28 30       	cpi	r18, 0x08	; 8
    1f56:	31 05       	cpc	r19, r1
    1f58:	49 f7       	brne	.-46     	; 0x1f2c <_pwr_adj_next+0x30>
    1f5a:	08 95       	ret

00001f5c <pwr_adj_on>:
//#############################################################
//## API
//#############################################################

void pwr_adj_on(uint8_t channel){
	switch(channel){
    1f5c:	82 30       	cpi	r24, 0x02	; 2
    1f5e:	c1 f0       	breq	.+48     	; 0x1f90 <pwr_adj_on+0x34>
    1f60:	83 30       	cpi	r24, 0x03	; 3
    1f62:	28 f4       	brcc	.+10     	; 0x1f6e <pwr_adj_on+0x12>
    1f64:	88 23       	and	r24, r24
    1f66:	51 f0       	breq	.+20     	; 0x1f7c <pwr_adj_on+0x20>
    1f68:	81 30       	cpi	r24, 0x01	; 1
    1f6a:	39 f5       	brne	.+78     	; 0x1fba <pwr_adj_on+0x5e>
    1f6c:	0c c0       	rjmp	.+24     	; 0x1f86 <pwr_adj_on+0x2a>
    1f6e:	8a 33       	cpi	r24, 0x3A	; 58
    1f70:	c9 f0       	breq	.+50     	; 0x1fa4 <pwr_adj_on+0x48>
    1f72:	8c 33       	cpi	r24, 0x3C	; 60
    1f74:	e1 f0       	breq	.+56     	; 0x1fae <pwr_adj_on+0x52>
    1f76:	83 30       	cpi	r24, 0x03	; 3
    1f78:	01 f5       	brne	.+64     	; 0x1fba <pwr_adj_on+0x5e>
    1f7a:	0f c0       	rjmp	.+30     	; 0x1f9a <pwr_adj_on+0x3e>
		case CHANNEL_A:
			PORTH.OUTSET = _BV(1);
    1f7c:	82 e0       	ldi	r24, 0x02	; 2
    1f7e:	e0 ee       	ldi	r30, 0xE0	; 224
    1f80:	f6 e0       	ldi	r31, 0x06	; 6
    1f82:	85 83       	std	Z+5, r24	; 0x05
			break;
    1f84:	08 95       	ret
		case CHANNEL_B:
			PORTH.OUTSET = _BV(2);
    1f86:	84 e0       	ldi	r24, 0x04	; 4
    1f88:	e0 ee       	ldi	r30, 0xE0	; 224
    1f8a:	f6 e0       	ldi	r31, 0x06	; 6
    1f8c:	85 83       	std	Z+5, r24	; 0x05
			break;
    1f8e:	08 95       	ret
		case CHANNEL_C:
			PORTH.OUTSET = _BV(3);
    1f90:	88 e0       	ldi	r24, 0x08	; 8
    1f92:	e0 ee       	ldi	r30, 0xE0	; 224
    1f94:	f6 e0       	ldi	r31, 0x06	; 6
    1f96:	85 83       	std	Z+5, r24	; 0x05
			break;
    1f98:	08 95       	ret
		case CHANNEL_D:
			PORTH.OUTSET = _BV(4);
    1f9a:	80 e1       	ldi	r24, 0x10	; 16
    1f9c:	e0 ee       	ldi	r30, 0xE0	; 224
    1f9e:	f6 e0       	ldi	r31, 0x06	; 6
    1fa0:	85 83       	std	Z+5, r24	; 0x05
			break;
    1fa2:	08 95       	ret
		case CHANNEL_ALL:
			PORTH.OUTSET = B8(00011110);
    1fa4:	8e e1       	ldi	r24, 0x1E	; 30
    1fa6:	e0 ee       	ldi	r30, 0xE0	; 224
    1fa8:	f6 e0       	ldi	r31, 0x06	; 6
    1faa:	85 83       	std	Z+5, r24	; 0x05
			break;
    1fac:	08 95       	ret
		case CHANNEL_RESTORE:
			PORTH.OUTSET = STATE_power_channels << 1; //[000DCBA0] align to port
    1fae:	80 91 82 25 	lds	r24, 0x2582
    1fb2:	88 0f       	add	r24, r24
    1fb4:	e0 ee       	ldi	r30, 0xE0	; 224
    1fb6:	f6 e0       	ldi	r31, 0x06	; 6
    1fb8:	85 83       	std	Z+5, r24	; 0x05
    1fba:	08 95       	ret

00001fbc <pwr_adj_off>:
			break;
	}
}
void pwr_adj_off(uint8_t channel){
	switch(channel){
    1fbc:	82 30       	cpi	r24, 0x02	; 2
    1fbe:	b1 f0       	breq	.+44     	; 0x1fec <pwr_adj_off+0x30>
    1fc0:	83 30       	cpi	r24, 0x03	; 3
    1fc2:	28 f4       	brcc	.+10     	; 0x1fce <pwr_adj_off+0x12>
    1fc4:	88 23       	and	r24, r24
    1fc6:	41 f0       	breq	.+16     	; 0x1fd8 <pwr_adj_off+0x1c>
    1fc8:	81 30       	cpi	r24, 0x01	; 1
    1fca:	f1 f4       	brne	.+60     	; 0x2008 <pwr_adj_off+0x4c>
    1fcc:	0a c0       	rjmp	.+20     	; 0x1fe2 <pwr_adj_off+0x26>
    1fce:	83 30       	cpi	r24, 0x03	; 3
    1fd0:	91 f0       	breq	.+36     	; 0x1ff6 <pwr_adj_off+0x3a>
    1fd2:	8a 33       	cpi	r24, 0x3A	; 58
    1fd4:	c9 f4       	brne	.+50     	; 0x2008 <pwr_adj_off+0x4c>
    1fd6:	14 c0       	rjmp	.+40     	; 0x2000 <pwr_adj_off+0x44>
		case CHANNEL_A:
			PORTH.OUTCLR = _BV(1);
    1fd8:	82 e0       	ldi	r24, 0x02	; 2
    1fda:	e0 ee       	ldi	r30, 0xE0	; 224
    1fdc:	f6 e0       	ldi	r31, 0x06	; 6
    1fde:	86 83       	std	Z+6, r24	; 0x06
			break;
    1fe0:	08 95       	ret
		case CHANNEL_B:
			PORTH.OUTCLR = _BV(2);
    1fe2:	84 e0       	ldi	r24, 0x04	; 4
    1fe4:	e0 ee       	ldi	r30, 0xE0	; 224
    1fe6:	f6 e0       	ldi	r31, 0x06	; 6
    1fe8:	86 83       	std	Z+6, r24	; 0x06
			break;
    1fea:	08 95       	ret
		case CHANNEL_C:
			PORTH.OUTCLR = _BV(3);
    1fec:	88 e0       	ldi	r24, 0x08	; 8
    1fee:	e0 ee       	ldi	r30, 0xE0	; 224
    1ff0:	f6 e0       	ldi	r31, 0x06	; 6
    1ff2:	86 83       	std	Z+6, r24	; 0x06
			break;
    1ff4:	08 95       	ret
		case CHANNEL_D:
			PORTH.OUTCLR = _BV(4);
    1ff6:	80 e1       	ldi	r24, 0x10	; 16
    1ff8:	e0 ee       	ldi	r30, 0xE0	; 224
    1ffa:	f6 e0       	ldi	r31, 0x06	; 6
    1ffc:	86 83       	std	Z+6, r24	; 0x06
			break;
    1ffe:	08 95       	ret
		case CHANNEL_ALL:
			PORTH.OUTCLR = B8(00011110);
    2000:	8e e1       	ldi	r24, 0x1E	; 30
    2002:	e0 ee       	ldi	r30, 0xE0	; 224
    2004:	f6 e0       	ldi	r31, 0x06	; 6
    2006:	86 83       	std	Z+6, r24	; 0x06
    2008:	08 95       	ret

0000200a <pwr_adj_change>:
	}
}

//Will drop (ignore) this value change request if in the middle of writing a different value to the channel
void pwr_adj_change(uint8_t channel_num, uint16_t new_value){
	if ((pwr_adj_spi_state == PWR_ADJ_SPI_IDLE) || (pwr_adj_channel_num_in_progress != channel_num)){
    200a:	90 91 aa 26 	lds	r25, 0x26AA
    200e:	99 23       	and	r25, r25
    2010:	21 f0       	breq	.+8      	; 0x201a <pwr_adj_change+0x10>
    2012:	20 91 98 26 	lds	r18, 0x2698
    2016:	28 17       	cp	r18, r24
    2018:	39 f1       	breq	.+78     	; 0x2068 <pwr_adj_change+0x5e>
		pwr_adj_channel_dirty |= _BV(channel_num); //mark this channel for update to screen
    201a:	e8 2f       	mov	r30, r24
    201c:	f0 e0       	ldi	r31, 0x00	; 0
    201e:	21 e0       	ldi	r18, 0x01	; 1
    2020:	30 e0       	ldi	r19, 0x00	; 0
    2022:	08 2e       	mov	r0, r24
    2024:	02 c0       	rjmp	.+4      	; 0x202a <pwr_adj_change+0x20>
    2026:	22 0f       	add	r18, r18
    2028:	33 1f       	adc	r19, r19
    202a:	0a 94       	dec	r0
    202c:	e2 f7       	brpl	.-8      	; 0x2026 <pwr_adj_change+0x1c>
    202e:	42 2f       	mov	r20, r18
    2030:	20 91 ac 26 	lds	r18, 0x26AC
    2034:	24 2b       	or	r18, r20
    2036:	20 93 ac 26 	sts	0x26AC, r18
		if (new_value >= 1024){new_value = 1023;} //sanity check
		pwr_adj_values[channel_num] = new_value; //buffer value
    203a:	ee 0f       	add	r30, r30
    203c:	ff 1f       	adc	r31, r31
    203e:	e3 55       	subi	r30, 0x53	; 83
    2040:	f9 4d       	sbci	r31, 0xD9	; 217
    2042:	26 2f       	mov	r18, r22
    2044:	37 2f       	mov	r19, r23
    2046:	54 e0       	ldi	r21, 0x04	; 4
    2048:	20 30       	cpi	r18, 0x00	; 0
    204a:	35 07       	cpc	r19, r21
    204c:	10 f0       	brcs	.+4      	; 0x2052 <pwr_adj_change+0x48>
    204e:	2f ef       	ldi	r18, 0xFF	; 255
    2050:	33 e0       	ldi	r19, 0x03	; 3
    2052:	20 83       	st	Z, r18
    2054:	31 83       	std	Z+1, r19	; 0x01
		pwr_adj_send_channels |= _BV(channel_num); //flag channel for transmission
    2056:	20 91 92 26 	lds	r18, 0x2692
    205a:	42 2b       	or	r20, r18
    205c:	40 93 92 26 	sts	0x2692, r20
		if (pwr_adj_spi_state == PWR_ADJ_SPI_IDLE){pwr_adj_spi_send(channel_num);}
    2060:	99 23       	and	r25, r25
    2062:	11 f4       	brne	.+4      	; 0x2068 <pwr_adj_change+0x5e>
    2064:	0e 94 50 0f 	call	0x1ea0	; 0x1ea0 <pwr_adj_spi_send>
    2068:	08 95       	ret

0000206a <pwr_adj_change_increment>:
	}	
}

//QUAD_DOWN = CLOCKWISE, ergo it is more natural to make this INCREASE the counters
void pwr_adj_change_increment(uint8_t channel_num, uint8_t which_way){
	if ((which_way == QUAD_DOWN) && (pwr_adj_values[channel_num]<1024)) pwr_adj_values[channel_num]++;
    206a:	6e 32       	cpi	r22, 0x2E	; 46
    206c:	b9 f4       	brne	.+46     	; 0x209c <pwr_adj_change_increment+0x32>
    206e:	28 2f       	mov	r18, r24
    2070:	30 e0       	ldi	r19, 0x00	; 0
    2072:	f9 01       	movw	r30, r18
    2074:	ee 0f       	add	r30, r30
    2076:	ff 1f       	adc	r31, r31
    2078:	e3 55       	subi	r30, 0x53	; 83
    207a:	f9 4d       	sbci	r31, 0xD9	; 217
    207c:	40 81       	ld	r20, Z
    207e:	51 81       	ldd	r21, Z+1	; 0x01
    2080:	94 e0       	ldi	r25, 0x04	; 4
    2082:	40 30       	cpi	r20, 0x00	; 0
    2084:	59 07       	cpc	r21, r25
    2086:	08 f5       	brcc	.+66     	; 0x20ca <pwr_adj_change_increment+0x60>
    2088:	f9 01       	movw	r30, r18
    208a:	ee 0f       	add	r30, r30
    208c:	ff 1f       	adc	r31, r31
    208e:	e3 55       	subi	r30, 0x53	; 83
    2090:	f9 4d       	sbci	r31, 0xD9	; 217
    2092:	4f 5f       	subi	r20, 0xFF	; 255
    2094:	5f 4f       	sbci	r21, 0xFF	; 255
    2096:	40 83       	st	Z, r20
    2098:	51 83       	std	Z+1, r21	; 0x01
    209a:	17 c0       	rjmp	.+46     	; 0x20ca <pwr_adj_change_increment+0x60>
	if ((which_way == QUAD_UP) && (pwr_adj_values[channel_num]>0)) pwr_adj_values[channel_num]--;
    209c:	6d 32       	cpi	r22, 0x2D	; 45
    209e:	a9 f4       	brne	.+42     	; 0x20ca <pwr_adj_change_increment+0x60>
    20a0:	28 2f       	mov	r18, r24
    20a2:	30 e0       	ldi	r19, 0x00	; 0
    20a4:	f9 01       	movw	r30, r18
    20a6:	ee 0f       	add	r30, r30
    20a8:	ff 1f       	adc	r31, r31
    20aa:	e3 55       	subi	r30, 0x53	; 83
    20ac:	f9 4d       	sbci	r31, 0xD9	; 217
    20ae:	40 81       	ld	r20, Z
    20b0:	51 81       	ldd	r21, Z+1	; 0x01
    20b2:	41 15       	cp	r20, r1
    20b4:	51 05       	cpc	r21, r1
    20b6:	49 f0       	breq	.+18     	; 0x20ca <pwr_adj_change_increment+0x60>
    20b8:	f9 01       	movw	r30, r18
    20ba:	ee 0f       	add	r30, r30
    20bc:	ff 1f       	adc	r31, r31
    20be:	e3 55       	subi	r30, 0x53	; 83
    20c0:	f9 4d       	sbci	r31, 0xD9	; 217
    20c2:	41 50       	subi	r20, 0x01	; 1
    20c4:	50 40       	sbci	r21, 0x00	; 0
    20c6:	40 83       	st	Z, r20
    20c8:	51 83       	std	Z+1, r21	; 0x01
	pwr_adj_change(channel_num, pwr_adj_values[channel_num]);
    20ca:	e8 2f       	mov	r30, r24
    20cc:	f0 e0       	ldi	r31, 0x00	; 0
    20ce:	ee 0f       	add	r30, r30
    20d0:	ff 1f       	adc	r31, r31
    20d2:	e3 55       	subi	r30, 0x53	; 83
    20d4:	f9 4d       	sbci	r31, 0xD9	; 217
    20d6:	60 81       	ld	r22, Z
    20d8:	71 81       	ldd	r23, Z+1	; 0x01
    20da:	0e 94 05 10 	call	0x200a	; 0x200a <pwr_adj_change>
}
    20de:	08 95       	ret

000020e0 <pwr_adj_touch_dial>:
//#############################################################
//## SELECTION AND TOUCH PANEL
//#############################################################

inline void pwr_adj_touch_dial(uint8_t which_one){
	pwr_adj_left_right = which_one;
    20e0:	80 93 97 26 	sts	0x2697, r24
}
    20e4:	08 95       	ret

000020e6 <_pwr_adj_data>:
//## DISPLAY ROUTINES
//#############################################################

//Calculate the output for the first voltage divider
float _pwr_adj_data(uint8_t channel_num){
	return PWR_ADJ_SUPPLY_VOLTAGE * (float)pwr_adj_values[channel_num]/1023;
    20e6:	e8 2f       	mov	r30, r24
    20e8:	f0 e0       	ldi	r31, 0x00	; 0
    20ea:	ee 0f       	add	r30, r30
    20ec:	ff 1f       	adc	r31, r31
    20ee:	e3 55       	subi	r30, 0x53	; 83
    20f0:	f9 4d       	sbci	r31, 0xD9	; 217
    20f2:	60 81       	ld	r22, Z
    20f4:	71 81       	ldd	r23, Z+1	; 0x01
    20f6:	80 e0       	ldi	r24, 0x00	; 0
    20f8:	90 e0       	ldi	r25, 0x00	; 0
    20fa:	0e 94 d2 2d 	call	0x5ba4	; 0x5ba4 <__floatunsisf>
    20fe:	20 e0       	ldi	r18, 0x00	; 0
    2100:	30 e0       	ldi	r19, 0x00	; 0
    2102:	40 ea       	ldi	r20, 0xA0	; 160
    2104:	50 e4       	ldi	r21, 0x40	; 64
    2106:	0e 94 84 2e 	call	0x5d08	; 0x5d08 <__mulsf3>
    210a:	20 e0       	ldi	r18, 0x00	; 0
    210c:	30 ec       	ldi	r19, 0xC0	; 192
    210e:	4f e7       	ldi	r20, 0x7F	; 127
    2110:	54 e4       	ldi	r21, 0x44	; 68
    2112:	0e 94 39 2d 	call	0x5a72	; 0x5a72 <__divsf3>
}
    2116:	46 2f       	mov	r20, r22
    2118:	57 2f       	mov	r21, r23
    211a:	68 2f       	mov	r22, r24
    211c:	79 2f       	mov	r23, r25
    211e:	cb 01       	movw	r24, r22
    2120:	ba 01       	movw	r22, r20
    2122:	08 95       	ret

00002124 <pwr_adj_data>:

void pwr_adj_data(uint8_t channel_num, char* result){
    2124:	cf 92       	push	r12
    2126:	df 92       	push	r13
    2128:	ef 92       	push	r14
    212a:	ff 92       	push	r15
    212c:	1f 93       	push	r17
    212e:	cf 93       	push	r28
    2130:	df 93       	push	r29
    2132:	18 2f       	mov	r17, r24
    2134:	eb 01       	movw	r28, r22
	if ((channel_num % 2)==0){
    2136:	80 fd       	sbrc	r24, 0
    2138:	08 c0       	rjmp	.+16     	; 0x214a <pwr_adj_data+0x26>
		//channel_num is 0,2,4,etc...
		adc_ftoa(_pwr_adj_data(channel_num), 1000, result);
    213a:	0e 94 73 10 	call	0x20e6	; 0x20e6 <_pwr_adj_data>
    213e:	48 ee       	ldi	r20, 0xE8	; 232
    2140:	53 e0       	ldi	r21, 0x03	; 3
    2142:	9e 01       	movw	r18, r28
    2144:	0e 94 ad 01 	call	0x35a	; 0x35a <adc_ftoa>
    2148:	22 c0       	rjmp	.+68     	; 0x218e <pwr_adj_data+0x6a>
	}
	else{
		//channel_num is 1,3,5,etc...
		adc_ftoa(_pwr_adj_data(channel_num-1)*(float)pwr_adj_values[channel_num]/1023, 1000, result);		
    214a:	81 50       	subi	r24, 0x01	; 1
    214c:	0e 94 73 10 	call	0x20e6	; 0x20e6 <_pwr_adj_data>
    2150:	6b 01       	movw	r12, r22
    2152:	7c 01       	movw	r14, r24
    2154:	e1 2f       	mov	r30, r17
    2156:	f0 e0       	ldi	r31, 0x00	; 0
    2158:	ee 0f       	add	r30, r30
    215a:	ff 1f       	adc	r31, r31
    215c:	e3 55       	subi	r30, 0x53	; 83
    215e:	f9 4d       	sbci	r31, 0xD9	; 217
    2160:	60 81       	ld	r22, Z
    2162:	71 81       	ldd	r23, Z+1	; 0x01
    2164:	80 e0       	ldi	r24, 0x00	; 0
    2166:	90 e0       	ldi	r25, 0x00	; 0
    2168:	0e 94 d2 2d 	call	0x5ba4	; 0x5ba4 <__floatunsisf>
    216c:	9b 01       	movw	r18, r22
    216e:	ac 01       	movw	r20, r24
    2170:	c7 01       	movw	r24, r14
    2172:	b6 01       	movw	r22, r12
    2174:	0e 94 84 2e 	call	0x5d08	; 0x5d08 <__mulsf3>
    2178:	20 e0       	ldi	r18, 0x00	; 0
    217a:	30 ec       	ldi	r19, 0xC0	; 192
    217c:	4f e7       	ldi	r20, 0x7F	; 127
    217e:	54 e4       	ldi	r21, 0x44	; 68
    2180:	0e 94 39 2d 	call	0x5a72	; 0x5a72 <__divsf3>
    2184:	48 ee       	ldi	r20, 0xE8	; 232
    2186:	53 e0       	ldi	r21, 0x03	; 3
    2188:	9e 01       	movw	r18, r28
    218a:	0e 94 ad 01 	call	0x35a	; 0x35a <adc_ftoa>
	}
}	
    218e:	df 91       	pop	r29
    2190:	cf 91       	pop	r28
    2192:	1f 91       	pop	r17
    2194:	ff 90       	pop	r15
    2196:	ef 90       	pop	r14
    2198:	df 90       	pop	r13
    219a:	cf 90       	pop	r12
    219c:	08 95       	ret

0000219e <pwr_adj_control>:

void pwr_adj_control(uint8_t channel_num, char* result){
	utoa(pwr_adj_values[channel_num], result, 10);
    219e:	e8 2f       	mov	r30, r24
    21a0:	f0 e0       	ldi	r31, 0x00	; 0
    21a2:	ee 0f       	add	r30, r30
    21a4:	ff 1f       	adc	r31, r31
    21a6:	e3 55       	subi	r30, 0x53	; 83
    21a8:	f9 4d       	sbci	r31, 0xD9	; 217
    21aa:	80 81       	ld	r24, Z
    21ac:	91 81       	ldd	r25, Z+1	; 0x01
    21ae:	4a e0       	ldi	r20, 0x0A	; 10
    21b0:	50 e0       	ldi	r21, 0x00	; 0
    21b2:	0e 94 e7 2e 	call	0x5dce	; 0x5dce <utoa>
}
    21b6:	08 95       	ret

000021b8 <__vector_87>:

//#############################################################
//## SERVICE ROUTINES
//#############################################################

ISR(SPID_INT_vect){
    21b8:	1f 92       	push	r1
    21ba:	0f 92       	push	r0
    21bc:	0f b6       	in	r0, 0x3f	; 63
    21be:	0f 92       	push	r0
    21c0:	08 b6       	in	r0, 0x38	; 56
    21c2:	0f 92       	push	r0
    21c4:	09 b6       	in	r0, 0x39	; 57
    21c6:	0f 92       	push	r0
    21c8:	0b b6       	in	r0, 0x3b	; 59
    21ca:	0f 92       	push	r0
    21cc:	11 24       	eor	r1, r1
    21ce:	2f 93       	push	r18
    21d0:	3f 93       	push	r19
    21d2:	4f 93       	push	r20
    21d4:	5f 93       	push	r21
    21d6:	6f 93       	push	r22
    21d8:	7f 93       	push	r23
    21da:	8f 93       	push	r24
    21dc:	9f 93       	push	r25
    21de:	af 93       	push	r26
    21e0:	bf 93       	push	r27
    21e2:	ef 93       	push	r30
    21e4:	ff 93       	push	r31
	led_on(LED_1);
    21e6:	81 e0       	ldi	r24, 0x01	; 1
    21e8:	0e 94 60 2c 	call	0x58c0	; 0x58c0 <led_on>
	switch(pwr_adj_spi_state){
    21ec:	80 91 aa 26 	lds	r24, 0x26AA
    21f0:	82 30       	cpi	r24, 0x02	; 2
    21f2:	c9 f0       	breq	.+50     	; 0x2226 <__vector_87+0x6e>
    21f4:	83 30       	cpi	r24, 0x03	; 3
    21f6:	39 f1       	breq	.+78     	; 0x2246 <__vector_87+0x8e>
    21f8:	81 30       	cpi	r24, 0x01	; 1
    21fa:	09 f0       	breq	.+2      	; 0x21fe <__vector_87+0x46>
    21fc:	47 c0       	rjmp	.+142    	; 0x228c <__vector_87+0xd4>
		case PWR_ADJ_SPI_COMMAND:
			//finished sending first byte... send next
			pwr_adj_spi_state = PWR_ADJ_SPI_DATAH;
    21fe:	82 e0       	ldi	r24, 0x02	; 2
    2200:	80 93 aa 26 	sts	0x26AA, r24
			SPID.DATA = (uint8_t)(pwr_adj_values[pwr_adj_channel_num_in_progress] >> 2); //extract the 8 MSb's from the 10-bit number
    2204:	e0 91 98 26 	lds	r30, 0x2698
    2208:	f0 e0       	ldi	r31, 0x00	; 0
    220a:	ee 0f       	add	r30, r30
    220c:	ff 1f       	adc	r31, r31
    220e:	e3 55       	subi	r30, 0x53	; 83
    2210:	f9 4d       	sbci	r31, 0xD9	; 217
    2212:	80 81       	ld	r24, Z
    2214:	91 81       	ldd	r25, Z+1	; 0x01
    2216:	96 95       	lsr	r25
    2218:	87 95       	ror	r24
    221a:	96 95       	lsr	r25
    221c:	87 95       	ror	r24
    221e:	e0 ec       	ldi	r30, 0xC0	; 192
    2220:	f9 e0       	ldi	r31, 0x09	; 9
    2222:	83 83       	std	Z+3, r24	; 0x03
			break;
    2224:	33 c0       	rjmp	.+102    	; 0x228c <__vector_87+0xd4>
		case PWR_ADJ_SPI_DATAH:
			//finished sending second byte... send next
			pwr_adj_spi_state = PWR_ADJ_SPI_DATAL;
    2226:	83 e0       	ldi	r24, 0x03	; 3
    2228:	80 93 aa 26 	sts	0x26AA, r24
			SPID.DATA = (uint8_t)(pwr_adj_values[pwr_adj_channel_num_in_progress]) & B8(00000011); //extract the 2 LSb's from the 10-bit number
    222c:	e0 91 98 26 	lds	r30, 0x2698
    2230:	f0 e0       	ldi	r31, 0x00	; 0
    2232:	ee 0f       	add	r30, r30
    2234:	ff 1f       	adc	r31, r31
    2236:	e3 55       	subi	r30, 0x53	; 83
    2238:	f9 4d       	sbci	r31, 0xD9	; 217
    223a:	80 81       	ld	r24, Z
    223c:	83 70       	andi	r24, 0x03	; 3
    223e:	e0 ec       	ldi	r30, 0xC0	; 192
    2240:	f9 e0       	ldi	r31, 0x09	; 9
    2242:	83 83       	std	Z+3, r24	; 0x03
			break;
    2244:	23 c0       	rjmp	.+70     	; 0x228c <__vector_87+0xd4>
		case PWR_ADJ_SPI_DATAL:
			//finished sending third byte... all done!
			//DESELECT
			switch(pwr_adj_channel_num_in_progress){
    2246:	80 91 98 26 	lds	r24, 0x2698
    224a:	84 30       	cpi	r24, 0x04	; 4
    224c:	18 f4       	brcc	.+6      	; 0x2254 <__vector_87+0x9c>
    224e:	82 30       	cpi	r24, 0x02	; 2
    2250:	58 f4       	brcc	.+22     	; 0x2268 <__vector_87+0xb0>
    2252:	05 c0       	rjmp	.+10     	; 0x225e <__vector_87+0xa6>
    2254:	86 30       	cpi	r24, 0x06	; 6
    2256:	68 f0       	brcs	.+26     	; 0x2272 <__vector_87+0xba>
    2258:	88 30       	cpi	r24, 0x08	; 8
    225a:	a0 f4       	brcc	.+40     	; 0x2284 <__vector_87+0xcc>
    225c:	0f c0       	rjmp	.+30     	; 0x227c <__vector_87+0xc4>
				case 0:
				case 1:
				PORTD.OUTSET = _BV(0); //CS high, done transmitting
    225e:	81 e0       	ldi	r24, 0x01	; 1
    2260:	e0 e6       	ldi	r30, 0x60	; 96
    2262:	f6 e0       	ldi	r31, 0x06	; 6
    2264:	85 83       	std	Z+5, r24	; 0x05
				break;
    2266:	0e c0       	rjmp	.+28     	; 0x2284 <__vector_87+0xcc>
				case 2:
				case 3:
				PORTD.OUTSET = _BV(1); //CS high, done transmitting
    2268:	82 e0       	ldi	r24, 0x02	; 2
    226a:	e0 e6       	ldi	r30, 0x60	; 96
    226c:	f6 e0       	ldi	r31, 0x06	; 6
    226e:	85 83       	std	Z+5, r24	; 0x05
				break;
    2270:	09 c0       	rjmp	.+18     	; 0x2284 <__vector_87+0xcc>
				case 4:
				case 5:
				PORTD.OUTSET = _BV(2); //CS high, done transmitting
    2272:	84 e0       	ldi	r24, 0x04	; 4
    2274:	e0 e6       	ldi	r30, 0x60	; 96
    2276:	f6 e0       	ldi	r31, 0x06	; 6
    2278:	85 83       	std	Z+5, r24	; 0x05
				break;
    227a:	04 c0       	rjmp	.+8      	; 0x2284 <__vector_87+0xcc>
				case 6:
				case 7:
				PORTD.OUTSET = _BV(3); //CS high, done transmitting
    227c:	88 e0       	ldi	r24, 0x08	; 8
    227e:	e0 e6       	ldi	r30, 0x60	; 96
    2280:	f6 e0       	ldi	r31, 0x06	; 6
    2282:	85 83       	std	Z+5, r24	; 0x05
				break;
			}
			//Select Next Channel
			pwr_adj_spi_state = PWR_ADJ_SPI_IDLE;
    2284:	10 92 aa 26 	sts	0x26AA, r1
			_pwr_adj_next();
    2288:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <_pwr_adj_next>
		case PWR_ADJ_SPI_IDLE:
		default:
			//do nothing
			break;
	}
}
    228c:	ff 91       	pop	r31
    228e:	ef 91       	pop	r30
    2290:	bf 91       	pop	r27
    2292:	af 91       	pop	r26
    2294:	9f 91       	pop	r25
    2296:	8f 91       	pop	r24
    2298:	7f 91       	pop	r23
    229a:	6f 91       	pop	r22
    229c:	5f 91       	pop	r21
    229e:	4f 91       	pop	r20
    22a0:	3f 91       	pop	r19
    22a2:	2f 91       	pop	r18
    22a4:	0f 90       	pop	r0
    22a6:	0b be       	out	0x3b, r0	; 59
    22a8:	0f 90       	pop	r0
    22aa:	09 be       	out	0x39, r0	; 57
    22ac:	0f 90       	pop	r0
    22ae:	08 be       	out	0x38, r0	; 56
    22b0:	0f 90       	pop	r0
    22b2:	0f be       	out	0x3f, r0	; 63
    22b4:	0f 90       	pop	r0
    22b6:	1f 90       	pop	r1
    22b8:	18 95       	reti

000022ba <service_pwr_adjust>:

void service_pwr_adjust(){	
	
}
    22ba:	08 95       	ret

000022bc <init_pwr_main>:

//Handles control of the main power channels

void init_pwr_main(){
	//LED's are located at PF0 (Lower) and PF1 (Upper)
	PORTC.DIRSET = B8(00110011); //pins 0,1,4,5 to output
    22bc:	e0 e4       	ldi	r30, 0x40	; 64
    22be:	f6 e0       	ldi	r31, 0x06	; 6
    22c0:	83 e3       	ldi	r24, 0x33	; 51
    22c2:	81 83       	std	Z+1, r24	; 0x01
	PORTC.OUTCLR = B8(00110011); //pins 0,1,4,5 to low output value (off)
    22c4:	86 83       	std	Z+6, r24	; 0x06
		break;
		case CHANNEL_D:
		PORTC.OUTCLR = B8(00100000);
		break;
		case CHANNEL_ALL:
		PORTC.OUTCLR = B8(00110011);
    22c6:	86 83       	std	Z+6, r24	; 0x06
void init_pwr_main(){
	//LED's are located at PF0 (Lower) and PF1 (Upper)
	PORTC.DIRSET = B8(00110011); //pins 0,1,4,5 to output
	PORTC.OUTCLR = B8(00110011); //pins 0,1,4,5 to low output value (off)
	pwr_main_off(CHANNEL_ALL);				
}
    22c8:	08 95       	ret

000022ca <pwr_main_on>:
//## OUTPUT MUTE
//#############################################################

void inline pwr_main_on(uint8_t which){
	uint8_t mask;
	switch(which){
    22ca:	82 30       	cpi	r24, 0x02	; 2
    22cc:	c1 f0       	breq	.+48     	; 0x22fe <pwr_main_on+0x34>
    22ce:	83 30       	cpi	r24, 0x03	; 3
    22d0:	28 f4       	brcc	.+10     	; 0x22dc <pwr_main_on+0x12>
    22d2:	88 23       	and	r24, r24
    22d4:	51 f0       	breq	.+20     	; 0x22ea <pwr_main_on+0x20>
    22d6:	81 30       	cpi	r24, 0x01	; 1
    22d8:	69 f5       	brne	.+90     	; 0x2334 <pwr_main_on+0x6a>
    22da:	0c c0       	rjmp	.+24     	; 0x22f4 <pwr_main_on+0x2a>
    22dc:	8a 33       	cpi	r24, 0x3A	; 58
    22de:	c9 f0       	breq	.+50     	; 0x2312 <pwr_main_on+0x48>
    22e0:	8c 33       	cpi	r24, 0x3C	; 60
    22e2:	e1 f0       	breq	.+56     	; 0x231c <pwr_main_on+0x52>
    22e4:	83 30       	cpi	r24, 0x03	; 3
    22e6:	31 f5       	brne	.+76     	; 0x2334 <pwr_main_on+0x6a>
    22e8:	0f c0       	rjmp	.+30     	; 0x2308 <pwr_main_on+0x3e>
		case CHANNEL_A:
			PORTC.OUTSET = B8(00000001);
    22ea:	81 e0       	ldi	r24, 0x01	; 1
    22ec:	e0 e4       	ldi	r30, 0x40	; 64
    22ee:	f6 e0       	ldi	r31, 0x06	; 6
    22f0:	85 83       	std	Z+5, r24	; 0x05
			break;
    22f2:	08 95       	ret
		case CHANNEL_B:
			PORTC.OUTSET = B8(00000010);
    22f4:	82 e0       	ldi	r24, 0x02	; 2
    22f6:	e0 e4       	ldi	r30, 0x40	; 64
    22f8:	f6 e0       	ldi	r31, 0x06	; 6
    22fa:	85 83       	std	Z+5, r24	; 0x05
			break;
    22fc:	08 95       	ret
		case CHANNEL_C:
			PORTC.OUTSET = B8(00010000);
    22fe:	80 e1       	ldi	r24, 0x10	; 16
    2300:	e0 e4       	ldi	r30, 0x40	; 64
    2302:	f6 e0       	ldi	r31, 0x06	; 6
    2304:	85 83       	std	Z+5, r24	; 0x05
			break;
    2306:	08 95       	ret
		case CHANNEL_D:
			PORTC.OUTSET = B8(00100000);
    2308:	80 e2       	ldi	r24, 0x20	; 32
    230a:	e0 e4       	ldi	r30, 0x40	; 64
    230c:	f6 e0       	ldi	r31, 0x06	; 6
    230e:	85 83       	std	Z+5, r24	; 0x05
			break;
    2310:	08 95       	ret
		case CHANNEL_ALL:
			PORTC.OUTSET = B8(00110011);
    2312:	83 e3       	ldi	r24, 0x33	; 51
    2314:	e0 e4       	ldi	r30, 0x40	; 64
    2316:	f6 e0       	ldi	r31, 0x06	; 6
    2318:	85 83       	std	Z+5, r24	; 0x05
			break;
    231a:	08 95       	ret
		case CHANNEL_RESTORE:
			mask = STATE_power_channels >> 2; //[000000DC] remove lower channels
    231c:	80 91 82 25 	lds	r24, 0x2582
    2320:	98 2f       	mov	r25, r24
    2322:	96 95       	lsr	r25
    2324:	96 95       	lsr	r25
			mask = mask << 4; //[00DC0000] position upper channels
    2326:	92 95       	swap	r25
    2328:	90 7f       	andi	r25, 0xF0	; 240
			mask |= (STATE_power_channels & B8(00000011)); //[00DC00BA] merge in lower channels
    232a:	83 70       	andi	r24, 0x03	; 3
    232c:	89 2b       	or	r24, r25
			PORTC.OUTSET = mask;
    232e:	e0 e4       	ldi	r30, 0x40	; 64
    2330:	f6 e0       	ldi	r31, 0x06	; 6
    2332:	85 83       	std	Z+5, r24	; 0x05
    2334:	08 95       	ret

00002336 <pwr_main_off>:
			break;
	}
}

void inline pwr_main_off(uint8_t which){
	switch(which){
    2336:	82 30       	cpi	r24, 0x02	; 2
    2338:	b1 f0       	breq	.+44     	; 0x2366 <pwr_main_off+0x30>
    233a:	83 30       	cpi	r24, 0x03	; 3
    233c:	28 f4       	brcc	.+10     	; 0x2348 <pwr_main_off+0x12>
    233e:	88 23       	and	r24, r24
    2340:	41 f0       	breq	.+16     	; 0x2352 <pwr_main_off+0x1c>
    2342:	81 30       	cpi	r24, 0x01	; 1
    2344:	f1 f4       	brne	.+60     	; 0x2382 <pwr_main_off+0x4c>
    2346:	0a c0       	rjmp	.+20     	; 0x235c <pwr_main_off+0x26>
    2348:	83 30       	cpi	r24, 0x03	; 3
    234a:	91 f0       	breq	.+36     	; 0x2370 <pwr_main_off+0x3a>
    234c:	8a 33       	cpi	r24, 0x3A	; 58
    234e:	c9 f4       	brne	.+50     	; 0x2382 <pwr_main_off+0x4c>
    2350:	14 c0       	rjmp	.+40     	; 0x237a <pwr_main_off+0x44>
		case CHANNEL_A:
		PORTC.OUTCLR = B8(00000001);
    2352:	81 e0       	ldi	r24, 0x01	; 1
    2354:	e0 e4       	ldi	r30, 0x40	; 64
    2356:	f6 e0       	ldi	r31, 0x06	; 6
    2358:	86 83       	std	Z+6, r24	; 0x06
		break;
    235a:	08 95       	ret
		case CHANNEL_B:
		PORTC.OUTCLR = B8(00000010);
    235c:	82 e0       	ldi	r24, 0x02	; 2
    235e:	e0 e4       	ldi	r30, 0x40	; 64
    2360:	f6 e0       	ldi	r31, 0x06	; 6
    2362:	86 83       	std	Z+6, r24	; 0x06
		break;
    2364:	08 95       	ret
		case CHANNEL_C:
		PORTC.OUTCLR = B8(00010000);
    2366:	80 e1       	ldi	r24, 0x10	; 16
    2368:	e0 e4       	ldi	r30, 0x40	; 64
    236a:	f6 e0       	ldi	r31, 0x06	; 6
    236c:	86 83       	std	Z+6, r24	; 0x06
		break;
    236e:	08 95       	ret
		case CHANNEL_D:
		PORTC.OUTCLR = B8(00100000);
    2370:	80 e2       	ldi	r24, 0x20	; 32
    2372:	e0 e4       	ldi	r30, 0x40	; 64
    2374:	f6 e0       	ldi	r31, 0x06	; 6
    2376:	86 83       	std	Z+6, r24	; 0x06
		break;
    2378:	08 95       	ret
		case CHANNEL_ALL:
		PORTC.OUTCLR = B8(00110011);
    237a:	83 e3       	ldi	r24, 0x33	; 51
    237c:	e0 e4       	ldi	r30, 0x40	; 64
    237e:	f6 e0       	ldi	r31, 0x06	; 6
    2380:	86 83       	std	Z+6, r24	; 0x06
    2382:	08 95       	ret

00002384 <service_pwr_main>:
		break;
	}
}

void service_pwr_main(){
}
    2384:	08 95       	ret

00002386 <init_rtos_clock_external>:
#include "quadrature.h"
#include "eeprom.h"

int init_rtos_clock_external(void){
	//Boot up and configure oscillator
	OSC.XOSCCTRL = B8(00100010); //enable external 32kHz Xtal using low-power (e.g. low-swing) mode
    2386:	e0 e5       	ldi	r30, 0x50	; 80
    2388:	f0 e0       	ldi	r31, 0x00	; 0
    238a:	82 e2       	ldi	r24, 0x22	; 34
    238c:	82 83       	std	Z+2, r24	; 0x02
	OSC.CTRL = B8(00001011); //enable 32M-RC & External Xtal -- also "enable" 2M-RC since its already running b/c we booted from it and can't actually disable it until we switch sources
    238e:	8b e0       	ldi	r24, 0x0B	; 11
    2390:	80 83       	st	Z, r24
	//Wait for stability
	led_on(LED_0);
    2392:	80 e0       	ldi	r24, 0x00	; 0
    2394:	0e 94 60 2c 	call	0x58c0	; 0x58c0 <led_on>
	//This is actually tricky sequencing because we boot from the 2MHz internal RC so previous write to OSC.CTRL was ineffective at shutting down the 2M-RC so OSC.STATUS will still reflect that it is running
	while(OSC.STATUS != B8(00001011)); //stall for external xtal and 32M-RC stability
    2398:	e0 e5       	ldi	r30, 0x50	; 80
    239a:	f0 e0       	ldi	r31, 0x00	; 0
    239c:	81 81       	ldd	r24, Z+1	; 0x01
    239e:	8b 30       	cpi	r24, 0x0B	; 11
    23a0:	e9 f7       	brne	.-6      	; 0x239c <init_rtos_clock_external+0x16>
	led_off(LED_0);
    23a2:	80 e0       	ldi	r24, 0x00	; 0
    23a4:	0e 94 7c 2c 	call	0x58f8	; 0x58f8 <led_off>
	//Configure
	OSC.DFLLCTRL = B8(00000010); //use external xtal for 32M-RC calibration
    23a8:	e0 e5       	ldi	r30, 0x50	; 80
    23aa:	f0 e0       	ldi	r31, 0x00	; 0
    23ac:	82 e0       	ldi	r24, 0x02	; 2
    23ae:	86 83       	std	Z+6, r24	; 0x06
	DFLLRC32M.CTRL = B8(00000001); //enable Xtal calibration of internal 32MHz RC oscillator
    23b0:	81 e0       	ldi	r24, 0x01	; 1
    23b2:	80 93 60 00 	sts	0x0060, r24
	//Switch system clock over to stable RC oscillator
	//Switch to 32M-RC as system clock source and disable the 2M-RC that we booted from.
	//----REQUIRES CONFIGURATION PROTECTION REGISTER
	CCP = CCP_IOREG_gc; //disable change protection for IO register
    23b6:	98 ed       	ldi	r25, 0xD8	; 216
    23b8:	94 bf       	out	0x34, r25	; 52
	CLK.CTRL = CLK_SCLKSEL_RC32M_gc;
    23ba:	80 93 40 00 	sts	0x0040, r24
	OSC.CTRL = B8(00001010); //re-execute this write -- this will shutdown the 2M-RC since we are no longer running from it.
    23be:	8a e0       	ldi	r24, 0x0A	; 10
    23c0:	80 83       	st	Z, r24
	//Now running live at 32MHz
	return 0;
}
    23c2:	80 e0       	ldi	r24, 0x00	; 0
    23c4:	90 e0       	ldi	r25, 0x00	; 0
    23c6:	08 95       	ret

000023c8 <init_rtos_clock_internal>:

int init_rtos_clock_internal(void){
	//Boot up and configure oscillator
	OSC.CTRL = B8(00000111); //enable 32M-RC & INTERNAL 32kHz -- also "enable" 2M-RC since its already running b/c we booted from it and can't actually disable it until we switch sources
    23c8:	87 e0       	ldi	r24, 0x07	; 7
    23ca:	80 93 50 00 	sts	0x0050, r24
	//Wait for stability
	led_on(LED_0);
    23ce:	80 e0       	ldi	r24, 0x00	; 0
    23d0:	0e 94 60 2c 	call	0x58c0	; 0x58c0 <led_on>
	//This is actually tricky sequencing because we boot from the 2MHz internal RC so previous write to OSC.CTRL was ineffective at shutting down the 2M-RC so OSC.STATUS will still reflect that it is running
	while(OSC.STATUS != B8(00000111)); //stall for INTERNAL 32k-RC and 32MHz-RC stability
    23d4:	e0 e5       	ldi	r30, 0x50	; 80
    23d6:	f0 e0       	ldi	r31, 0x00	; 0
    23d8:	81 81       	ldd	r24, Z+1	; 0x01
    23da:	87 30       	cpi	r24, 0x07	; 7
    23dc:	e9 f7       	brne	.-6      	; 0x23d8 <init_rtos_clock_internal+0x10>
	led_off(LED_0);
    23de:	80 e0       	ldi	r24, 0x00	; 0
    23e0:	0e 94 7c 2c 	call	0x58f8	; 0x58f8 <led_off>
	//Configure
	OSC.DFLLCTRL = B8(00000010); //use external xtal for 32M-RC calibration
    23e4:	e0 e5       	ldi	r30, 0x50	; 80
    23e6:	f0 e0       	ldi	r31, 0x00	; 0
    23e8:	82 e0       	ldi	r24, 0x02	; 2
    23ea:	86 83       	std	Z+6, r24	; 0x06
	DFLLRC32M.CTRL = B8(00000001); //enable Xtal calibration of internal 32MHz RC oscillator
    23ec:	81 e0       	ldi	r24, 0x01	; 1
    23ee:	80 93 60 00 	sts	0x0060, r24
	//Switch system clock over to stable RC oscillator
	//Switch to 32M-RC as system clock source and disable the 2M-RC that we booted from.
	//----REQUIRES CONFIGURATION PROTECTION REGISTER
	CCP = CCP_IOREG_gc; //disable change protection for IO register
    23f2:	98 ed       	ldi	r25, 0xD8	; 216
    23f4:	94 bf       	out	0x34, r25	; 52
	CLK.CTRL = CLK_SCLKSEL_RC32M_gc;
    23f6:	80 93 40 00 	sts	0x0040, r24
	OSC.CTRL = B8(00001010); //re-execute this write -- this will shutdown the 2M-RC since we are no longer running from it.
    23fa:	8a e0       	ldi	r24, 0x0A	; 10
    23fc:	80 83       	st	Z, r24
	//Now running live at 32MHz
	return 0;
}
    23fe:	80 e0       	ldi	r24, 0x00	; 0
    2400:	90 e0       	ldi	r25, 0x00	; 0
    2402:	08 95       	ret

00002404 <main>:
	//[BLINK ALIVE]
	uint8_t blah;
	int8_t updown;

	//[LED's, Button, & Switches]
	init_ui(); //init LED's first so that they are available for debugging
    2404:	0e 94 ca 2c 	call	0x5994	; 0x5994 <init_ui>
	init_fp(); //init Front Panel LED's and Switches so that they are available for debugging
    2408:	0e 94 26 09 	call	0x124c	; 0x124c <init_fp>
	init_quadrature(); //init quadrature decoder for front panel rotary encoder
    240c:	0e 94 85 12 	call	0x250a	; 0x250a <init_quadrature>
	
	//[CPU CLOCK]
	init_rtos_clock_internal();
    2410:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <init_rtos_clock_internal>

	//[LCD]
	init_lcd();
    2414:	0e 94 2c 0b 	call	0x1658	; 0x1658 <init_lcd>
	init_lcd_console();
    2418:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <init_lcd_console>
	init_lcd_touch();
    241c:	0e 94 49 0d 	call	0x1a92	; 0x1a92 <init_lcd_touch>

	//[UARTs]
	init_uart(&uctrl, BAUD_115200);
    2420:	80 ea       	ldi	r24, 0xA0	; 160
    2422:	98 e0       	ldi	r25, 0x08	; 8
    2424:	60 e0       	ldi	r22, 0x00	; 0
    2426:	0e 94 aa 13 	call	0x2754	; 0x2754 <init_uart>
	init_uart(&udata, BAUD_115200);
    242a:	80 eb       	ldi	r24, 0xB0	; 176
    242c:	98 e0       	ldi	r25, 0x08	; 8
    242e:	60 e0       	ldi	r22, 0x00	; 0
    2430:	0e 94 aa 13 	call	0x2754	; 0x2754 <init_uart>
	init_uart(&ulcd, BAUD_115200);
    2434:	80 eb       	ldi	r24, 0xB0	; 176
    2436:	9b e0       	ldi	r25, 0x0B	; 11
    2438:	60 e0       	ldi	r22, 0x00	; 0
    243a:	0e 94 aa 13 	call	0x2754	; 0x2754 <init_uart>
	init_uart_buffers();
    243e:	0e 94 d4 29 	call	0x53a8	; 0x53a8 <init_uart_buffers>
	
	//[ADC]
	init_adc();		
    2442:	0e 94 58 01 	call	0x2b0	; 0x2b0 <init_adc>

	//[POWER PATH]
	init_pwr_main();
    2446:	0e 94 5e 11 	call	0x22bc	; 0x22bc <init_pwr_main>
	init_pwr_adjust();
    244a:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <init_pwr_adjust>

	//[BRAIN]
	init_brain();
    244e:	0e 94 07 04 	call	0x80e	; 0x80e <init_brain>
	
	//[EEPROM] -- do this last
	init_eeprom();
    2452:	0e 94 1d 09 	call	0x123a	; 0x123a <init_eeprom>
		
	//[Realtime Loop Timer]
	//Use PortC's T/C0
	TCC0.CTRLA = 0x07; //Start the timer; Div1024 operation = 32M/1024 = 31250
    2456:	e0 e0       	ldi	r30, 0x00	; 0
    2458:	f8 e0       	ldi	r31, 0x08	; 8
    245a:	87 e0       	ldi	r24, 0x07	; 7
    245c:	80 83       	st	Z, r24
	TCC0.PER = 62; //2ms Loop Time
    245e:	8e e3       	ldi	r24, 0x3E	; 62
    2460:	90 e0       	ldi	r25, 0x00	; 0
    2462:	86 a3       	lds	r24, 0x56
    2464:	97 a3       	lds	r25, 0x57

	//[PMIC (Interrupt Controller)]
	PMIC.CTRL = B8(10000111); //enable all three interrupt levels (lowest one with round-robin)
    2466:	87 e8       	ldi	r24, 0x87	; 135
    2468:	e0 ea       	ldi	r30, 0xA0	; 160
    246a:	f0 e0       	ldi	r31, 0x00	; 0
    246c:	82 83       	std	Z+2, r24	; 0x02
	sei(); //ENABLE INTERRUPTS AND GO LIVE!
    246e:	78 94       	sei

	//[RTOS START!]
	blah = 1;
	updown = 1;
	led_off(LED_0);
    2470:	80 e0       	ldi	r24, 0x00	; 0
    2472:	0e 94 7c 2c 	call	0x58f8	; 0x58f8 <led_off>
	led_off(LED_1);
    2476:	81 e0       	ldi	r24, 0x01	; 1
    2478:	0e 94 7c 2c 	call	0x58f8	; 0x58f8 <led_off>
	audio_beep(2, 100);
    247c:	82 e0       	ldi	r24, 0x02	; 2
    247e:	64 e6       	ldi	r22, 0x64	; 100
    2480:	70 e0       	ldi	r23, 0x00	; 0
    2482:	0e 94 fc 2c 	call	0x59f8	; 0x59f8 <audio_beep>
	PORTE.DIRSET = B8(00000011); //PE0, PE1 to output pin for loop timer
    2486:	e0 e8       	ldi	r30, 0x80	; 128
    2488:	f6 e0       	ldi	r31, 0x06	; 6
    248a:	83 e0       	ldi	r24, 0x03	; 3
    248c:	81 83       	std	Z+1, r24	; 0x01

	while(1){
		PORTE.OUTSET = 0x02; //Set PE1 on start of loop and lower after work is done.
    248e:	82 e0       	ldi	r24, 0x02	; 2
    2490:	85 83       	std	Z+5, r24	; 0x05
		//Blink alive
		led_dim(LED_0, blah);	
    2492:	80 e0       	ldi	r24, 0x00	; 0
    2494:	61 e0       	ldi	r22, 0x01	; 1
    2496:	0e 94 92 2c 	call	0x5924	; 0x5924 <led_dim>
		blah += updown;
    249a:	12 e0       	ldi	r17, 0x02	; 2
	PMIC.CTRL = B8(10000111); //enable all three interrupt levels (lowest one with round-robin)
	sei(); //ENABLE INTERRUPTS AND GO LIVE!

	//[RTOS START!]
	blah = 1;
	updown = 1;
    249c:	01 e0       	ldi	r16, 0x01	; 1
		led_dim(LED_0, blah);	
		blah += updown;
		if ((blah == 255) || (blah == 0)) {
			updown = -1 * updown;
		}
		PORTE.OUTTGL = 0x01; //wiggle pin to indicate loop timing
    249e:	0f 2e       	mov	r0, r31
    24a0:	f0 e8       	ldi	r31, 0x80	; 128
    24a2:	ef 2e       	mov	r14, r31
    24a4:	f6 e0       	ldi	r31, 0x06	; 6
    24a6:	ff 2e       	mov	r15, r31
    24a8:	f0 2d       	mov	r31, r0
    24aa:	cc 24       	eor	r12, r12
    24ac:	c3 94       	inc	r12
    24ae:	bc 2c       	mov	r11, r12
		service_lcd_console();
		service_lcd_touch();
		service_pwr_adjust();
		
		//Wait out RTOS loop
		PORTE.OUTCLR = 0x02; //Indicate work for this cycle has finished on PE1
    24b0:	dd 24       	eor	r13, r13
    24b2:	68 94       	set
    24b4:	d1 f8       	bld	r13, 1
		while((TCC0.INTFLAGS & _BV(0)) != 0x01); //Wait for the loop time to expire
    24b6:	c0 e0       	ldi	r28, 0x00	; 0
    24b8:	d8 e0       	ldi	r29, 0x08	; 8
    24ba:	01 c0       	rjmp	.+2      	; 0x24be <main+0xba>
		PORTE.OUTSET = 0x02; //Set PE1 on start of loop and lower after work is done.
		//Blink alive
		led_dim(LED_0, blah);	
		blah += updown;
		if ((blah == 255) || (blah == 0)) {
			updown = -1 * updown;
    24bc:	01 95       	neg	r16
		}
		PORTE.OUTTGL = 0x01; //wiggle pin to indicate loop timing
    24be:	f7 01       	movw	r30, r14
    24c0:	b7 82       	std	Z+7, r11	; 0x07
		
		//Call services
		service_audio();
    24c2:	0e 94 08 2d 	call	0x5a10	; 0x5a10 <service_audio>
		service_fp();
    24c6:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <service_fp>
		service_adc();
    24ca:	0e 94 aa 02 	call	0x554	; 0x554 <service_adc>
		service_brain();	
    24ce:	0e 94 1c 06 	call	0xc38	; 0xc38 <service_brain>
		service_uart_buffer();
    24d2:	0e 94 9a 2a 	call	0x5534	; 0x5534 <service_uart_buffer>
		service_lcd();
    24d6:	0e 94 1c 0c 	call	0x1838	; 0x1838 <service_lcd>
		service_lcd_console();
    24da:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <service_lcd_console>
		service_lcd_touch();
    24de:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <service_lcd_touch>
		service_pwr_adjust();
    24e2:	0e 94 5d 11 	call	0x22ba	; 0x22ba <service_pwr_adjust>
		
		//Wait out RTOS loop
		PORTE.OUTCLR = 0x02; //Indicate work for this cycle has finished on PE1
    24e6:	f7 01       	movw	r30, r14
    24e8:	d6 82       	std	Z+6, r13	; 0x06
		while((TCC0.INTFLAGS & _BV(0)) != 0x01); //Wait for the loop time to expire
    24ea:	8c 85       	ldd	r24, Y+12	; 0x0c
    24ec:	80 ff       	sbrs	r24, 0
    24ee:	fd cf       	rjmp	.-6      	; 0x24ea <main+0xe6>
		TCC0.INTFLAGS = 0x01; //Clear the interrupt flag
    24f0:	cc 86       	std	Y+12, r12	; 0x0c
	led_off(LED_1);
	audio_beep(2, 100);
	PORTE.DIRSET = B8(00000011); //PE0, PE1 to output pin for loop timer

	while(1){
		PORTE.OUTSET = 0x02; //Set PE1 on start of loop and lower after work is done.
    24f2:	f7 01       	movw	r30, r14
    24f4:	d5 82       	std	Z+5, r13	; 0x05
		//Blink alive
		led_dim(LED_0, blah);	
    24f6:	80 e0       	ldi	r24, 0x00	; 0
    24f8:	61 2f       	mov	r22, r17
    24fa:	0e 94 92 2c 	call	0x5924	; 0x5924 <led_dim>
		blah += updown;
    24fe:	10 0f       	add	r17, r16
		if ((blah == 255) || (blah == 0)) {
    2500:	81 2f       	mov	r24, r17
    2502:	81 50       	subi	r24, 0x01	; 1
    2504:	8e 3f       	cpi	r24, 0xFE	; 254
    2506:	d0 f6       	brcc	.-76     	; 0x24bc <main+0xb8>
    2508:	da cf       	rjmp	.-76     	; 0x24be <main+0xba>

0000250a <init_quadrature>:
		============		
		PK6: Rotary Channel A
		PK7: Rotary Channel B
	*/
	//	SciPSU FP switches have hardware pull-up and hardware debounce
	PORTK.DIRCLR = B8(11000000); //This is the default condition, but just to be safe
    250a:	e0 e2       	ldi	r30, 0x20	; 32
    250c:	f7 e0       	ldi	r31, 0x07	; 7
    250e:	80 ec       	ldi	r24, 0xC0	; 192
    2510:	82 83       	std	Z+2, r24	; 0x02
	PORTK.INT0MASK = B8(01000000); //Enable PORTK.Interrupt0 channel for PK6 
    2512:	80 e4       	ldi	r24, 0x40	; 64
    2514:	82 87       	std	Z+10, r24	; 0x0a
	PORTK.INT1MASK = B8(10000000); //Enable PORTK.Interrupt1 channel for PK7 
    2516:	80 e8       	ldi	r24, 0x80	; 128
    2518:	83 87       	std	Z+11, r24	; 0x0b
	PORTK.INTCTRL = B8(00001111); //interrupt 0 & 1 channels set to highest priority
    251a:	8f e0       	ldi	r24, 0x0F	; 15
    251c:	81 87       	std	Z+9, r24	; 0x09
	//Setup initial edge look directions -- need to enable global interrupts shortly after doing this (so init the quadrature module last in main.c)
	if ((PORTK.IN & _BV(6)) == 0){PORTK.PIN6CTRL = RISING_EDGE;} 
    251e:	80 85       	ldd	r24, Z+8	; 0x08
    2520:	86 fd       	sbrc	r24, 6
    2522:	03 c0       	rjmp	.+6      	; 0x252a <init_quadrature+0x20>
    2524:	89 e9       	ldi	r24, 0x99	; 153
    2526:	86 8b       	std	Z+22, r24	; 0x16
    2528:	04 c0       	rjmp	.+8      	; 0x2532 <init_quadrature+0x28>
	else {PORTK.PIN6CTRL = FALLING_EDGE;}
    252a:	8a e9       	ldi	r24, 0x9A	; 154
    252c:	e0 e2       	ldi	r30, 0x20	; 32
    252e:	f7 e0       	ldi	r31, 0x07	; 7
    2530:	86 8b       	std	Z+22, r24	; 0x16
	if ((PORTK.IN & _BV(7)) == 0){PORTK.PIN7CTRL = RISING_EDGE;}
    2532:	e0 e2       	ldi	r30, 0x20	; 32
    2534:	f7 e0       	ldi	r31, 0x07	; 7
    2536:	80 85       	ldd	r24, Z+8	; 0x08
    2538:	88 23       	and	r24, r24
    253a:	1c f0       	brlt	.+6      	; 0x2542 <init_quadrature+0x38>
    253c:	89 e9       	ldi	r24, 0x99	; 153
    253e:	87 8b       	std	Z+23, r24	; 0x17
    2540:	04 c0       	rjmp	.+8      	; 0x254a <init_quadrature+0x40>
	else {PORTK.PIN7CTRL = FALLING_EDGE;}
    2542:	8a e9       	ldi	r24, 0x9A	; 154
    2544:	e0 e2       	ldi	r30, 0x20	; 32
    2546:	f7 e0       	ldi	r31, 0x07	; 7
    2548:	87 8b       	std	Z+23, r24	; 0x17
		
	quad_count = 0;
    254a:	10 92 9e 26 	sts	0x269E, r1
    254e:	10 92 9f 26 	sts	0x269F, r1
	quad_state = QUAD_IDLE;
    2552:	8c e2       	ldi	r24, 0x2C	; 44
    2554:	80 93 9b 26 	sts	0x269B, r24
	
}
    2558:	08 95       	ret

0000255a <quad_up>:

/// Reports if the quadrature encoded control has moved up since the last time this function was called.
/* SIDE EFFECT: modifies internal state. If you call this twice, only the first call will report true.*/
boolean quad_up(){
	if (quad_state == QUAD_UP){quad_state = QUAD_IDLE; return true;}
    255a:	80 91 9b 26 	lds	r24, 0x269B
    255e:	8d 32       	cpi	r24, 0x2D	; 45
    2560:	29 f4       	brne	.+10     	; 0x256c <quad_up+0x12>
    2562:	8c e2       	ldi	r24, 0x2C	; 44
    2564:	80 93 9b 26 	sts	0x269B, r24
    2568:	81 e0       	ldi	r24, 0x01	; 1
    256a:	08 95       	ret
	return false;
    256c:	80 e0       	ldi	r24, 0x00	; 0
}
    256e:	08 95       	ret

00002570 <quad_down>:

/// Reports if the quadrature encoded control has moved down since the last time this function was called.
/* SIDE EFFECT: modifies internal state. If you call this twice, only the first call will report true.*/
boolean quad_down(){
if (quad_state == QUAD_DOWN){quad_state = QUAD_IDLE; return true;}
    2570:	80 91 9b 26 	lds	r24, 0x269B
    2574:	8e 32       	cpi	r24, 0x2E	; 46
    2576:	29 f4       	brne	.+10     	; 0x2582 <quad_down+0x12>
    2578:	8c e2       	ldi	r24, 0x2C	; 44
    257a:	80 93 9b 26 	sts	0x269B, r24
    257e:	81 e0       	ldi	r24, 0x01	; 1
    2580:	08 95       	ret
return false;
    2582:	80 e0       	ldi	r24, 0x00	; 0
}
    2584:	08 95       	ret

00002586 <__vector_100>:
//#############################################################
//## ROTARY CONTROL
//#############################################################

///Interrupt Service Routine (ISR) for quadrature encoder Channel A (PORTK Int0; PK6)
ISR(PORTK_INT0_vect){
    2586:	1f 92       	push	r1
    2588:	0f 92       	push	r0
    258a:	0f b6       	in	r0, 0x3f	; 63
    258c:	0f 92       	push	r0
    258e:	08 b6       	in	r0, 0x38	; 56
    2590:	0f 92       	push	r0
    2592:	0b b6       	in	r0, 0x3b	; 59
    2594:	0f 92       	push	r0
    2596:	11 24       	eor	r1, r1
    2598:	8f 93       	push	r24
    259a:	9f 93       	push	r25
    259c:	ef 93       	push	r30
    259e:	ff 93       	push	r31
	if (PORTK.PIN6CTRL == FALLING_EDGE){
    25a0:	e0 e2       	ldi	r30, 0x20	; 32
    25a2:	f7 e0       	ldi	r31, 0x07	; 7
    25a4:	86 89       	ldd	r24, Z+22	; 0x16
    25a6:	8a 39       	cpi	r24, 0x9A	; 154
    25a8:	01 f5       	brne	.+64     	; 0x25ea <__vector_100+0x64>
		//Detected FALLING edge on channel A
		if ((PORTK.IN & _BV(7)) == 0){
    25aa:	80 85       	ldd	r24, Z+8	; 0x08
    25ac:	88 23       	and	r24, r24
    25ae:	6c f0       	brlt	.+26     	; 0x25ca <__vector_100+0x44>
			//if channel A is falling and channel B is low, direction = DOWN
			quad_count--;
    25b0:	80 91 9e 26 	lds	r24, 0x269E
    25b4:	90 91 9f 26 	lds	r25, 0x269F
    25b8:	01 97       	sbiw	r24, 0x01	; 1
    25ba:	80 93 9e 26 	sts	0x269E, r24
    25be:	90 93 9f 26 	sts	0x269F, r25
			quad_state = QUAD_DOWN;
    25c2:	8e e2       	ldi	r24, 0x2E	; 46
    25c4:	80 93 9b 26 	sts	0x269B, r24
    25c8:	0c c0       	rjmp	.+24     	; 0x25e2 <__vector_100+0x5c>
		}
		else{
			//if channel A is falling and channel B is high, direction = UP
			quad_count++;
    25ca:	80 91 9e 26 	lds	r24, 0x269E
    25ce:	90 91 9f 26 	lds	r25, 0x269F
    25d2:	01 96       	adiw	r24, 0x01	; 1
    25d4:	80 93 9e 26 	sts	0x269E, r24
    25d8:	90 93 9f 26 	sts	0x269F, r25
			quad_state = QUAD_UP;
    25dc:	8d e2       	ldi	r24, 0x2D	; 45
    25de:	80 93 9b 26 	sts	0x269B, r24
		}
		//Now, look for rising edge
		PORTK.PIN6CTRL = RISING_EDGE;
    25e2:	89 e9       	ldi	r24, 0x99	; 153
    25e4:	e0 e2       	ldi	r30, 0x20	; 32
    25e6:	f7 e0       	ldi	r31, 0x07	; 7
    25e8:	86 8b       	std	Z+22, r24	; 0x16
	}
	if (PORTK.PIN6CTRL == RISING_EDGE){
    25ea:	e0 e2       	ldi	r30, 0x20	; 32
    25ec:	f7 e0       	ldi	r31, 0x07	; 7
    25ee:	86 89       	ldd	r24, Z+22	; 0x16
    25f0:	89 39       	cpi	r24, 0x99	; 153
    25f2:	01 f5       	brne	.+64     	; 0x2634 <__vector_100+0xae>
		//Detected RISING edge on channel A
		if ((PORTK.IN & _BV(7)) == 0){
    25f4:	80 85       	ldd	r24, Z+8	; 0x08
    25f6:	88 23       	and	r24, r24
    25f8:	6c f0       	brlt	.+26     	; 0x2614 <__vector_100+0x8e>
			//if channel A is rising and channel B is low, direction = UP
			quad_count++;
    25fa:	80 91 9e 26 	lds	r24, 0x269E
    25fe:	90 91 9f 26 	lds	r25, 0x269F
    2602:	01 96       	adiw	r24, 0x01	; 1
    2604:	80 93 9e 26 	sts	0x269E, r24
    2608:	90 93 9f 26 	sts	0x269F, r25
			quad_state = QUAD_UP;
    260c:	8d e2       	ldi	r24, 0x2D	; 45
    260e:	80 93 9b 26 	sts	0x269B, r24
    2612:	0c c0       	rjmp	.+24     	; 0x262c <__vector_100+0xa6>
		}
		else{
			//if channel A is rising and channel B is high, direction = DOWN
			quad_count--;
    2614:	80 91 9e 26 	lds	r24, 0x269E
    2618:	90 91 9f 26 	lds	r25, 0x269F
    261c:	01 97       	sbiw	r24, 0x01	; 1
    261e:	80 93 9e 26 	sts	0x269E, r24
    2622:	90 93 9f 26 	sts	0x269F, r25
			quad_state = QUAD_DOWN;
    2626:	8e e2       	ldi	r24, 0x2E	; 46
    2628:	80 93 9b 26 	sts	0x269B, r24
		}
		//Now, look for falling edge
		PORTK.PIN6CTRL = FALLING_EDGE;
    262c:	8a e9       	ldi	r24, 0x9A	; 154
    262e:	e0 e2       	ldi	r30, 0x20	; 32
    2630:	f7 e0       	ldi	r31, 0x07	; 7
    2632:	86 8b       	std	Z+22, r24	; 0x16
	}
	PORTK.INTFLAGS = B8(00000001); //clear interrupt flag just in case
    2634:	81 e0       	ldi	r24, 0x01	; 1
    2636:	e0 e2       	ldi	r30, 0x20	; 32
    2638:	f7 e0       	ldi	r31, 0x07	; 7
    263a:	84 87       	std	Z+12, r24	; 0x0c
}
    263c:	ff 91       	pop	r31
    263e:	ef 91       	pop	r30
    2640:	9f 91       	pop	r25
    2642:	8f 91       	pop	r24
    2644:	0f 90       	pop	r0
    2646:	0b be       	out	0x3b, r0	; 59
    2648:	0f 90       	pop	r0
    264a:	08 be       	out	0x38, r0	; 56
    264c:	0f 90       	pop	r0
    264e:	0f be       	out	0x3f, r0	; 63
    2650:	0f 90       	pop	r0
    2652:	1f 90       	pop	r1
    2654:	18 95       	reti

00002656 <__vector_101>:

///Interrupt Service Routine (ISR) for quadrature encoder Channel B (PORTK Int1; PK7)
ISR(PORTK_INT1_vect){
    2656:	1f 92       	push	r1
    2658:	0f 92       	push	r0
    265a:	0f b6       	in	r0, 0x3f	; 63
    265c:	0f 92       	push	r0
    265e:	08 b6       	in	r0, 0x38	; 56
    2660:	0f 92       	push	r0
    2662:	0b b6       	in	r0, 0x3b	; 59
    2664:	0f 92       	push	r0
    2666:	11 24       	eor	r1, r1
    2668:	8f 93       	push	r24
    266a:	9f 93       	push	r25
    266c:	ef 93       	push	r30
    266e:	ff 93       	push	r31
	if (PORTK.PIN7CTRL == FALLING_EDGE){
    2670:	e0 e2       	ldi	r30, 0x20	; 32
    2672:	f7 e0       	ldi	r31, 0x07	; 7
    2674:	87 89       	ldd	r24, Z+23	; 0x17
    2676:	8a 39       	cpi	r24, 0x9A	; 154
    2678:	01 f5       	brne	.+64     	; 0x26ba <__vector_101+0x64>
		//Detected FALLING edge on channel A
		if ((PORTK.IN & _BV(6)) == 0){
    267a:	80 85       	ldd	r24, Z+8	; 0x08
    267c:	86 fd       	sbrc	r24, 6
    267e:	0d c0       	rjmp	.+26     	; 0x269a <__vector_101+0x44>
			//if channel B is falling and channel A is low, direction = UP
			quad_count++;
    2680:	80 91 9e 26 	lds	r24, 0x269E
    2684:	90 91 9f 26 	lds	r25, 0x269F
    2688:	01 96       	adiw	r24, 0x01	; 1
    268a:	80 93 9e 26 	sts	0x269E, r24
    268e:	90 93 9f 26 	sts	0x269F, r25
			quad_state = QUAD_UP;
    2692:	8d e2       	ldi	r24, 0x2D	; 45
    2694:	80 93 9b 26 	sts	0x269B, r24
    2698:	0c c0       	rjmp	.+24     	; 0x26b2 <__vector_101+0x5c>
		}
		else{
			//if channel B is falling and channel A is high, direction = DOWN
			quad_count--;
    269a:	80 91 9e 26 	lds	r24, 0x269E
    269e:	90 91 9f 26 	lds	r25, 0x269F
    26a2:	01 97       	sbiw	r24, 0x01	; 1
    26a4:	80 93 9e 26 	sts	0x269E, r24
    26a8:	90 93 9f 26 	sts	0x269F, r25
			quad_state = QUAD_DOWN;
    26ac:	8e e2       	ldi	r24, 0x2E	; 46
    26ae:	80 93 9b 26 	sts	0x269B, r24
		}
		//Now, look for rising edge
		PORTK.PIN7CTRL = RISING_EDGE;
    26b2:	89 e9       	ldi	r24, 0x99	; 153
    26b4:	e0 e2       	ldi	r30, 0x20	; 32
    26b6:	f7 e0       	ldi	r31, 0x07	; 7
    26b8:	87 8b       	std	Z+23, r24	; 0x17
	}
	if (PORTK.PIN7CTRL == RISING_EDGE){
    26ba:	e0 e2       	ldi	r30, 0x20	; 32
    26bc:	f7 e0       	ldi	r31, 0x07	; 7
    26be:	87 89       	ldd	r24, Z+23	; 0x17
    26c0:	89 39       	cpi	r24, 0x99	; 153
    26c2:	01 f5       	brne	.+64     	; 0x2704 <__vector_101+0xae>
		//Detected RISING edge on channel B
		if ((PORTK.IN & _BV(6)) == 0){
    26c4:	80 85       	ldd	r24, Z+8	; 0x08
    26c6:	86 fd       	sbrc	r24, 6
    26c8:	0d c0       	rjmp	.+26     	; 0x26e4 <__vector_101+0x8e>
			//if channel B is rising and channel A is low, direction = DOWN
			quad_count--;
    26ca:	80 91 9e 26 	lds	r24, 0x269E
    26ce:	90 91 9f 26 	lds	r25, 0x269F
    26d2:	01 97       	sbiw	r24, 0x01	; 1
    26d4:	80 93 9e 26 	sts	0x269E, r24
    26d8:	90 93 9f 26 	sts	0x269F, r25
			quad_state = QUAD_DOWN;
    26dc:	8e e2       	ldi	r24, 0x2E	; 46
    26de:	80 93 9b 26 	sts	0x269B, r24
    26e2:	0c c0       	rjmp	.+24     	; 0x26fc <__vector_101+0xa6>
		}
		else{
			//if channel B is rising and channel A is high, direction = UP
			quad_count++;
    26e4:	80 91 9e 26 	lds	r24, 0x269E
    26e8:	90 91 9f 26 	lds	r25, 0x269F
    26ec:	01 96       	adiw	r24, 0x01	; 1
    26ee:	80 93 9e 26 	sts	0x269E, r24
    26f2:	90 93 9f 26 	sts	0x269F, r25
			quad_state = QUAD_UP;
    26f6:	8d e2       	ldi	r24, 0x2D	; 45
    26f8:	80 93 9b 26 	sts	0x269B, r24
		}
		//Now, look for falling edge
		PORTK.PIN7CTRL = FALLING_EDGE;
    26fc:	8a e9       	ldi	r24, 0x9A	; 154
    26fe:	e0 e2       	ldi	r30, 0x20	; 32
    2700:	f7 e0       	ldi	r31, 0x07	; 7
    2702:	87 8b       	std	Z+23, r24	; 0x17
	}
	PORTK.INTFLAGS = B8(00000010); //clear interrupt flag just in case
    2704:	82 e0       	ldi	r24, 0x02	; 2
    2706:	e0 e2       	ldi	r30, 0x20	; 32
    2708:	f7 e0       	ldi	r31, 0x07	; 7
    270a:	84 87       	std	Z+12, r24	; 0x0c
}
    270c:	ff 91       	pop	r31
    270e:	ef 91       	pop	r30
    2710:	9f 91       	pop	r25
    2712:	8f 91       	pop	r24
    2714:	0f 90       	pop	r0
    2716:	0b be       	out	0x3b, r0	; 59
    2718:	0f 90       	pop	r0
    271a:	08 be       	out	0x38, r0	; 56
    271c:	0f 90       	pop	r0
    271e:	0f be       	out	0x3f, r0	; 63
    2720:	0f 90       	pop	r0
    2722:	1f 90       	pop	r1
    2724:	18 95       	reti

00002726 <service_quadrature>:
//## SERVICE ROUTINE
//#############################################################

void service_quadrature(){	
	
}
    2726:	08 95       	ret

00002728 <init_thermal>:
 */ 


void init_thermal(){
	//FANS are located at PF4 (Fan0) and PF5 (Fan1)
	PORTF.DIRSET = 0x30; //pins 4 and 5 to output
    2728:	e0 ea       	ldi	r30, 0xA0	; 160
    272a:	f6 e0       	ldi	r31, 0x06	; 6
    272c:	80 e3       	ldi	r24, 0x30	; 48
    272e:	81 83       	std	Z+1, r24	; 0x01
	PORTF.OUTSET &= B8(11001111); //pins 4 and 5 to low (off)
    2730:	85 81       	ldd	r24, Z+5	; 0x05
    2732:	8f 7c       	andi	r24, 0xCF	; 207
    2734:	85 83       	std	Z+5, r24	; 0x05
		
	TCF1.CTRLA = 0x07; //enable; div1024
    2736:	e0 e4       	ldi	r30, 0x40	; 64
    2738:	fb e0       	ldi	r31, 0x0B	; 11
    273a:	87 e0       	ldi	r24, 0x07	; 7
    273c:	80 83       	st	Z, r24
	TCF1.CTRLB = 0x13; //Output Channel A enable; Single-slope PWM
    273e:	83 e1       	ldi	r24, 0x13	; 19
    2740:	81 83       	std	Z+1, r24	; 0x01
	TCF1.PER = 0x00FF; //Set the top of the counter to basically force 8 bit operation; we do this for speed when calling dimming functions in the future
    2742:	8f ef       	ldi	r24, 0xFF	; 255
    2744:	90 e0       	ldi	r25, 0x00	; 0
    2746:	86 a3       	lds	r24, 0x56
    2748:	97 a3       	lds	r25, 0x57
	TCF1.CCA = 0x0010; //Default to off-level brightness
    274a:	80 e1       	ldi	r24, 0x10	; 16
    274c:	90 e0       	ldi	r25, 0x00	; 0
    274e:	80 a7       	lds	r24, 0x70
    2750:	91 a7       	lds	r25, 0x71
}
    2752:	08 95       	ret

00002754 <init_uart>:
//= INITIALIZATION ROUTINES
//==================================

//Select which uart to initialize from the list of defined constants in the io.h
//Pass in Baud rate from a list of defined constants
void init_uart(USART_t* which, uint8_t baud_rate){
    2754:	fc 01       	movw	r30, r24
	//Config the PORT
		if (&(*which) == &USARTC0){
    2756:	88 e0       	ldi	r24, 0x08	; 8
    2758:	e0 3a       	cpi	r30, 0xA0	; 160
    275a:	f8 07       	cpc	r31, r24
    275c:	51 f4       	brne	.+20     	; 0x2772 <init_uart+0x1e>
			PORTC.DIRSET = B8(00001000); //TX pin as output
    275e:	a0 e4       	ldi	r26, 0x40	; 64
    2760:	b6 e0       	ldi	r27, 0x06	; 6
    2762:	88 e0       	ldi	r24, 0x08	; 8
    2764:	11 96       	adiw	r26, 0x01	; 1
    2766:	8c 93       	st	X, r24
    2768:	11 97       	sbiw	r26, 0x01	; 1
			PORTC.OUTSET = B8(00001000); //TX initial output value is high
    276a:	15 96       	adiw	r26, 0x05	; 5
    276c:	8c 93       	st	X, r24
    276e:	15 97       	sbiw	r26, 0x05	; 5
    2770:	61 c0       	rjmp	.+194    	; 0x2834 <init_uart+0xe0>
		}
		else if (&(*which) == &USARTC1) {
    2772:	88 e0       	ldi	r24, 0x08	; 8
    2774:	e0 3b       	cpi	r30, 0xB0	; 176
    2776:	f8 07       	cpc	r31, r24
    2778:	51 f4       	brne	.+20     	; 0x278e <init_uart+0x3a>
			PORTC.DIRSET = B8(10000000); //TX pin as output
    277a:	a0 e4       	ldi	r26, 0x40	; 64
    277c:	b6 e0       	ldi	r27, 0x06	; 6
    277e:	80 e8       	ldi	r24, 0x80	; 128
    2780:	11 96       	adiw	r26, 0x01	; 1
    2782:	8c 93       	st	X, r24
    2784:	11 97       	sbiw	r26, 0x01	; 1
			PORTC.OUTSET = B8(10000000); //TX initial output value is high
    2786:	15 96       	adiw	r26, 0x05	; 5
    2788:	8c 93       	st	X, r24
    278a:	15 97       	sbiw	r26, 0x05	; 5
    278c:	53 c0       	rjmp	.+166    	; 0x2834 <init_uart+0xe0>
		}
		else if (&(*which) == &USARTD0) {
    278e:	89 e0       	ldi	r24, 0x09	; 9
    2790:	e0 3a       	cpi	r30, 0xA0	; 160
    2792:	f8 07       	cpc	r31, r24
    2794:	51 f4       	brne	.+20     	; 0x27aa <init_uart+0x56>
			PORTD.DIRSET = B8(00001000); //TX pin as output
    2796:	a0 e6       	ldi	r26, 0x60	; 96
    2798:	b6 e0       	ldi	r27, 0x06	; 6
    279a:	88 e0       	ldi	r24, 0x08	; 8
    279c:	11 96       	adiw	r26, 0x01	; 1
    279e:	8c 93       	st	X, r24
    27a0:	11 97       	sbiw	r26, 0x01	; 1
			PORTD.OUTSET = B8(00001000); //TX initial output value is high
    27a2:	15 96       	adiw	r26, 0x05	; 5
    27a4:	8c 93       	st	X, r24
    27a6:	15 97       	sbiw	r26, 0x05	; 5
    27a8:	45 c0       	rjmp	.+138    	; 0x2834 <init_uart+0xe0>
		}	
		else if (&(*which) == &USARTD1) {
    27aa:	89 e0       	ldi	r24, 0x09	; 9
    27ac:	e0 3b       	cpi	r30, 0xB0	; 176
    27ae:	f8 07       	cpc	r31, r24
    27b0:	51 f4       	brne	.+20     	; 0x27c6 <init_uart+0x72>
			PORTD.DIRSET = B8(10000000); //TX pin as output
    27b2:	a0 e6       	ldi	r26, 0x60	; 96
    27b4:	b6 e0       	ldi	r27, 0x06	; 6
    27b6:	80 e8       	ldi	r24, 0x80	; 128
    27b8:	11 96       	adiw	r26, 0x01	; 1
    27ba:	8c 93       	st	X, r24
    27bc:	11 97       	sbiw	r26, 0x01	; 1
			PORTD.OUTSET = B8(10000000); //TX initial output value is high
    27be:	15 96       	adiw	r26, 0x05	; 5
    27c0:	8c 93       	st	X, r24
    27c2:	15 97       	sbiw	r26, 0x05	; 5
    27c4:	37 c0       	rjmp	.+110    	; 0x2834 <init_uart+0xe0>
		}
		else if (&(*which) == &USARTE0) {
    27c6:	8a e0       	ldi	r24, 0x0A	; 10
    27c8:	e0 3a       	cpi	r30, 0xA0	; 160
    27ca:	f8 07       	cpc	r31, r24
    27cc:	51 f4       	brne	.+20     	; 0x27e2 <init_uart+0x8e>
			PORTE.DIRSET = B8(00001000); //TX pin as output
    27ce:	a0 e8       	ldi	r26, 0x80	; 128
    27d0:	b6 e0       	ldi	r27, 0x06	; 6
    27d2:	88 e0       	ldi	r24, 0x08	; 8
    27d4:	11 96       	adiw	r26, 0x01	; 1
    27d6:	8c 93       	st	X, r24
    27d8:	11 97       	sbiw	r26, 0x01	; 1
			PORTE.OUTSET = B8(00001000); //TX initial output value is high
    27da:	15 96       	adiw	r26, 0x05	; 5
    27dc:	8c 93       	st	X, r24
    27de:	15 97       	sbiw	r26, 0x05	; 5
    27e0:	29 c0       	rjmp	.+82     	; 0x2834 <init_uart+0xe0>
		}
		else if (&(*which) == &USARTE1) {
    27e2:	8a e0       	ldi	r24, 0x0A	; 10
    27e4:	e0 3b       	cpi	r30, 0xB0	; 176
    27e6:	f8 07       	cpc	r31, r24
    27e8:	51 f4       	brne	.+20     	; 0x27fe <init_uart+0xaa>
			PORTE.DIRSET = B8(10000000); //TX pin as output
    27ea:	a0 e8       	ldi	r26, 0x80	; 128
    27ec:	b6 e0       	ldi	r27, 0x06	; 6
    27ee:	80 e8       	ldi	r24, 0x80	; 128
    27f0:	11 96       	adiw	r26, 0x01	; 1
    27f2:	8c 93       	st	X, r24
    27f4:	11 97       	sbiw	r26, 0x01	; 1
			PORTE.OUTSET = B8(10000000); //TX initial output value is high
    27f6:	15 96       	adiw	r26, 0x05	; 5
    27f8:	8c 93       	st	X, r24
    27fa:	15 97       	sbiw	r26, 0x05	; 5
    27fc:	1b c0       	rjmp	.+54     	; 0x2834 <init_uart+0xe0>
		}
		else if (&(*which) == &USARTF0) {
    27fe:	8b e0       	ldi	r24, 0x0B	; 11
    2800:	e0 3a       	cpi	r30, 0xA0	; 160
    2802:	f8 07       	cpc	r31, r24
    2804:	51 f4       	brne	.+20     	; 0x281a <init_uart+0xc6>
			PORTF.DIRSET = B8(00001000); //TX pin as output
    2806:	a0 ea       	ldi	r26, 0xA0	; 160
    2808:	b6 e0       	ldi	r27, 0x06	; 6
    280a:	88 e0       	ldi	r24, 0x08	; 8
    280c:	11 96       	adiw	r26, 0x01	; 1
    280e:	8c 93       	st	X, r24
    2810:	11 97       	sbiw	r26, 0x01	; 1
			PORTF.OUTSET = B8(00001000); //TX initial output value is high
    2812:	15 96       	adiw	r26, 0x05	; 5
    2814:	8c 93       	st	X, r24
    2816:	15 97       	sbiw	r26, 0x05	; 5
    2818:	0d c0       	rjmp	.+26     	; 0x2834 <init_uart+0xe0>
		}
		else if (&(*which) == &USARTF1) {
    281a:	8b e0       	ldi	r24, 0x0B	; 11
    281c:	e0 3b       	cpi	r30, 0xB0	; 176
    281e:	f8 07       	cpc	r31, r24
    2820:	49 f4       	brne	.+18     	; 0x2834 <init_uart+0xe0>
			PORTF.DIRSET = B8(10000000); //TX pin as output
    2822:	a0 ea       	ldi	r26, 0xA0	; 160
    2824:	b6 e0       	ldi	r27, 0x06	; 6
    2826:	80 e8       	ldi	r24, 0x80	; 128
    2828:	11 96       	adiw	r26, 0x01	; 1
    282a:	8c 93       	st	X, r24
    282c:	11 97       	sbiw	r26, 0x01	; 1
			PORTF.OUTSET = B8(10000000); //TX initial output value is high
    282e:	15 96       	adiw	r26, 0x05	; 5
    2830:	8c 93       	st	X, r24
    2832:	15 97       	sbiw	r26, 0x05	; 5
		}
		else {
		}
	//Set baud rate
		switch(baud_rate){
    2834:	61 30       	cpi	r22, 0x01	; 1
    2836:	39 f0       	breq	.+14     	; 0x2846 <init_uart+0xf2>
    2838:	62 30       	cpi	r22, 0x02	; 2
    283a:	51 f4       	brne	.+20     	; 0x2850 <init_uart+0xfc>
		case BAUD_38400:
			//BSEL = 0xCC5; BSCALE = -6; error = 0.01%
			which->BAUDCTRLB = 0xAC;
    283c:	8c ea       	ldi	r24, 0xAC	; 172
    283e:	87 83       	std	Z+7, r24	; 0x07
			which->BAUDCTRLA = 0xC5;
    2840:	85 ec       	ldi	r24, 0xC5	; 197
    2842:	86 83       	std	Z+6, r24	; 0x06
			break;
    2844:	09 c0       	rjmp	.+18     	; 0x2858 <init_uart+0x104>
		case BAUD_57600:
			//BSEL = 0x86E; BSCALE = -6; error = 0.01%
			which->BAUDCTRLB = 0xA8;
    2846:	88 ea       	ldi	r24, 0xA8	; 168
    2848:	87 83       	std	Z+7, r24	; 0x07
			which->BAUDCTRLA = 0x6E;
    284a:	8e e6       	ldi	r24, 0x6E	; 110
    284c:	86 83       	std	Z+6, r24	; 0x06
			break;
    284e:	04 c0       	rjmp	.+8      	; 0x2858 <init_uart+0x104>
		case BAUD_115200:
		default:
			//BSEL = 0x417; BSCALE = -6; error = 0.01%
			//BSEL = 0x453; BSCALE = -6; fbaud = 115.212k @ 32MHz
			which->BAUDCTRLB = 0xA4; //write to BAUDCTRLB first, updated on write to A
    2850:	84 ea       	ldi	r24, 0xA4	; 164
    2852:	87 83       	std	Z+7, r24	; 0x07
			which->BAUDCTRLA = 0x32; //0x17; = 8.44uS = 118kHz		
    2854:	82 e3       	ldi	r24, 0x32	; 50
    2856:	86 83       	std	Z+6, r24	; 0x06
		}
	//Config USART Module
		which->CTRLA = 0x00; //Current driver does not enable any interrupts
    2858:	13 82       	std	Z+3, r1	; 0x03
		which->CTRLB = B8(00011000); //Enable Rx and TX; Do not use double speed mode
    285a:	88 e1       	ldi	r24, 0x18	; 24
    285c:	84 83       	std	Z+4, r24	; 0x04
		which->CTRLC = B8(00000011); //uart Mode; Use N-8-1 frame configuration
    285e:	83 e0       	ldi	r24, 0x03	; 3
    2860:	85 83       	std	Z+5, r24	; 0x05
	//
}
    2862:	08 95       	ret

00002864 <uart_send_byte>:
//= DISPLAY (BLOCKING) FUNCTIONS
//==================================


//Sends one byte; Spin-lock until UART is ready to transmit (BE CAREFUL!)
void uart_send_byte( USART_t* which, unsigned char dataB){
    2864:	fc 01       	movw	r30, r24
	while((which->STATUS & USART_DREIF_bm) == 0x00); //wait until the transmit buffer is ready to receive new data (DREIF flag is 1 when empty)
    2866:	81 81       	ldd	r24, Z+1	; 0x01
    2868:	85 ff       	sbrs	r24, 5
    286a:	fd cf       	rjmp	.-6      	; 0x2866 <uart_send_byte+0x2>
	which->DATA = dataB;	
    286c:	60 83       	st	Z, r22
}
    286e:	08 95       	ret

00002870 <uart_send_string>:

//Sends an entire string (blocking)
void uart_send_string(USART_t* which, char* theString){
    2870:	cf 92       	push	r12
    2872:	df 92       	push	r13
    2874:	ef 92       	push	r14
    2876:	ff 92       	push	r15
    2878:	0f 93       	push	r16
    287a:	1f 93       	push	r17
    287c:	cf 93       	push	r28
    287e:	df 93       	push	r29
    2880:	6c 01       	movw	r12, r24
	uint16_t length = (uint16_t)strlen(theString);
    2882:	e6 2f       	mov	r30, r22
    2884:	f7 2f       	mov	r31, r23
    2886:	ef 01       	movw	r28, r30
    2888:	09 90       	ld	r0, Y+
    288a:	00 20       	and	r0, r0
    288c:	e9 f7       	brne	.-6      	; 0x2888 <uart_send_string+0x18>
    288e:	21 97       	sbiw	r28, 0x01	; 1
    2890:	ce 1b       	sub	r28, r30
    2892:	df 0b       	sbc	r29, r31
	for (uint16_t i=0; i<length; i++){uart_send_byte(which, theString[i]);}	
    2894:	79 f0       	breq	.+30     	; 0x28b4 <uart_send_string+0x44>
    2896:	e6 2e       	mov	r14, r22
    2898:	f7 2e       	mov	r15, r23
    289a:	00 e0       	ldi	r16, 0x00	; 0
    289c:	10 e0       	ldi	r17, 0x00	; 0
    289e:	f7 01       	movw	r30, r14
    28a0:	61 91       	ld	r22, Z+
    28a2:	7f 01       	movw	r14, r30
    28a4:	c6 01       	movw	r24, r12
    28a6:	0e 94 32 14 	call	0x2864	; 0x2864 <uart_send_byte>
    28aa:	0f 5f       	subi	r16, 0xFF	; 255
    28ac:	1f 4f       	sbci	r17, 0xFF	; 255
    28ae:	0c 17       	cp	r16, r28
    28b0:	1d 07       	cpc	r17, r29
    28b2:	a9 f7       	brne	.-22     	; 0x289e <uart_send_string+0x2e>
}
    28b4:	df 91       	pop	r29
    28b6:	cf 91       	pop	r28
    28b8:	1f 91       	pop	r17
    28ba:	0f 91       	pop	r16
    28bc:	ff 90       	pop	r15
    28be:	ef 90       	pop	r14
    28c0:	df 90       	pop	r13
    28c2:	cf 90       	pop	r12
    28c4:	08 95       	ret

000028c6 <uart_send_BIN4>:
	
//Most Significant Bit first
void uart_send_BIN4(USART_t* which, uint8_t lowb){
    28c6:	cf 93       	push	r28
    28c8:	df 93       	push	r29
    28ca:	ec 01       	movw	r28, r24
	switch(lowb){
    28cc:	67 30       	cpi	r22, 0x07	; 7
    28ce:	09 f4       	brne	.+2      	; 0x28d2 <uart_send_BIN4+0xc>
    28d0:	9d c0       	rjmp	.+314    	; 0x2a0c <uart_send_BIN4+0x146>
    28d2:	68 30       	cpi	r22, 0x08	; 8
    28d4:	90 f4       	brcc	.+36     	; 0x28fa <uart_send_BIN4+0x34>
    28d6:	63 30       	cpi	r22, 0x03	; 3
    28d8:	09 f4       	brne	.+2      	; 0x28dc <uart_send_BIN4+0x16>
    28da:	58 c0       	rjmp	.+176    	; 0x298c <uart_send_BIN4+0xc6>
    28dc:	64 30       	cpi	r22, 0x04	; 4
    28de:	30 f4       	brcc	.+12     	; 0x28ec <uart_send_BIN4+0x26>
    28e0:	61 30       	cpi	r22, 0x01	; 1
    28e2:	a1 f1       	breq	.+104    	; 0x294c <uart_send_BIN4+0x86>
    28e4:	62 30       	cpi	r22, 0x02	; 2
    28e6:	08 f0       	brcs	.+2      	; 0x28ea <uart_send_BIN4+0x24>
    28e8:	41 c0       	rjmp	.+130    	; 0x296c <uart_send_BIN4+0xa6>
    28ea:	20 c0       	rjmp	.+64     	; 0x292c <uart_send_BIN4+0x66>
    28ec:	65 30       	cpi	r22, 0x05	; 5
    28ee:	09 f4       	brne	.+2      	; 0x28f2 <uart_send_BIN4+0x2c>
    28f0:	6d c0       	rjmp	.+218    	; 0x29cc <uart_send_BIN4+0x106>
    28f2:	66 30       	cpi	r22, 0x06	; 6
    28f4:	08 f0       	brcs	.+2      	; 0x28f8 <uart_send_BIN4+0x32>
    28f6:	7a c0       	rjmp	.+244    	; 0x29ec <uart_send_BIN4+0x126>
    28f8:	59 c0       	rjmp	.+178    	; 0x29ac <uart_send_BIN4+0xe6>
    28fa:	6b 30       	cpi	r22, 0x0B	; 11
    28fc:	09 f4       	brne	.+2      	; 0x2900 <uart_send_BIN4+0x3a>
    28fe:	c6 c0       	rjmp	.+396    	; 0x2a8c <uart_send_BIN4+0x1c6>
    2900:	6c 30       	cpi	r22, 0x0C	; 12
    2902:	38 f4       	brcc	.+14     	; 0x2912 <uart_send_BIN4+0x4c>
    2904:	69 30       	cpi	r22, 0x09	; 9
    2906:	09 f4       	brne	.+2      	; 0x290a <uart_send_BIN4+0x44>
    2908:	a1 c0       	rjmp	.+322    	; 0x2a4c <uart_send_BIN4+0x186>
    290a:	6a 30       	cpi	r22, 0x0A	; 10
    290c:	08 f0       	brcs	.+2      	; 0x2910 <uart_send_BIN4+0x4a>
    290e:	ae c0       	rjmp	.+348    	; 0x2a6c <uart_send_BIN4+0x1a6>
    2910:	8d c0       	rjmp	.+282    	; 0x2a2c <uart_send_BIN4+0x166>
    2912:	6d 30       	cpi	r22, 0x0D	; 13
    2914:	09 f4       	brne	.+2      	; 0x2918 <uart_send_BIN4+0x52>
    2916:	da c0       	rjmp	.+436    	; 0x2acc <uart_send_BIN4+0x206>
    2918:	6d 30       	cpi	r22, 0x0D	; 13
    291a:	08 f4       	brcc	.+2      	; 0x291e <uart_send_BIN4+0x58>
    291c:	c7 c0       	rjmp	.+398    	; 0x2aac <uart_send_BIN4+0x1e6>
    291e:	6e 30       	cpi	r22, 0x0E	; 14
    2920:	09 f4       	brne	.+2      	; 0x2924 <uart_send_BIN4+0x5e>
    2922:	e4 c0       	rjmp	.+456    	; 0x2aec <uart_send_BIN4+0x226>
    2924:	6f 30       	cpi	r22, 0x0F	; 15
    2926:	09 f0       	breq	.+2      	; 0x292a <uart_send_BIN4+0x64>
    2928:	00 c1       	rjmp	.+512    	; 0x2b2a <uart_send_BIN4+0x264>
    292a:	f0 c0       	rjmp	.+480    	; 0x2b0c <uart_send_BIN4+0x246>
	case(0):
		uart_send_byte(which,'0');
    292c:	60 e3       	ldi	r22, 0x30	; 48
    292e:	0e 94 32 14 	call	0x2864	; 0x2864 <uart_send_byte>
		uart_send_byte(which,'0');
    2932:	ce 01       	movw	r24, r28
    2934:	60 e3       	ldi	r22, 0x30	; 48
    2936:	0e 94 32 14 	call	0x2864	; 0x2864 <uart_send_byte>
		uart_send_byte(which,'0');
    293a:	ce 01       	movw	r24, r28
    293c:	60 e3       	ldi	r22, 0x30	; 48
    293e:	0e 94 32 14 	call	0x2864	; 0x2864 <uart_send_byte>
		uart_send_byte(which,'0');
    2942:	ce 01       	movw	r24, r28
    2944:	60 e3       	ldi	r22, 0x30	; 48
    2946:	0e 94 32 14 	call	0x2864	; 0x2864 <uart_send_byte>
		break;
    294a:	ef c0       	rjmp	.+478    	; 0x2b2a <uart_send_BIN4+0x264>
	case(1):
		uart_send_byte(which,'0');
    294c:	60 e3       	ldi	r22, 0x30	; 48
    294e:	0e 94 32 14 	call	0x2864	; 0x2864 <uart_send_byte>
		uart_send_byte(which,'0');
    2952:	ce 01       	movw	r24, r28
    2954:	60 e3       	ldi	r22, 0x30	; 48
    2956:	0e 94 32 14 	call	0x2864	; 0x2864 <uart_send_byte>
		uart_send_byte(which,'0');
    295a:	ce 01       	movw	r24, r28
    295c:	60 e3       	ldi	r22, 0x30	; 48
    295e:	0e 94 32 14 	call	0x2864	; 0x2864 <uart_send_byte>
		uart_send_byte(which,'1');
    2962:	ce 01       	movw	r24, r28
    2964:	61 e3       	ldi	r22, 0x31	; 49
    2966:	0e 94 32 14 	call	0x2864	; 0x2864 <uart_send_byte>
		break;
    296a:	df c0       	rjmp	.+446    	; 0x2b2a <uart_send_BIN4+0x264>
	case(2):
		uart_send_byte(which,'0');
    296c:	60 e3       	ldi	r22, 0x30	; 48
    296e:	0e 94 32 14 	call	0x2864	; 0x2864 <uart_send_byte>
		uart_send_byte(which,'0');
    2972:	ce 01       	movw	r24, r28
    2974:	60 e3       	ldi	r22, 0x30	; 48
    2976:	0e 94 32 14 	call	0x2864	; 0x2864 <uart_send_byte>
		uart_send_byte(which,'1');
    297a:	ce 01       	movw	r24, r28
    297c:	61 e3       	ldi	r22, 0x31	; 49
    297e:	0e 94 32 14 	call	0x2864	; 0x2864 <uart_send_byte>
		uart_send_byte(which,'0');
    2982:	ce 01       	movw	r24, r28
    2984:	60 e3       	ldi	r22, 0x30	; 48
    2986:	0e 94 32 14 	call	0x2864	; 0x2864 <uart_send_byte>
		break;
    298a:	cf c0       	rjmp	.+414    	; 0x2b2a <uart_send_BIN4+0x264>
	case(3):
		uart_send_byte(which,'0');
    298c:	60 e3       	ldi	r22, 0x30	; 48
    298e:	0e 94 32 14 	call	0x2864	; 0x2864 <uart_send_byte>
		uart_send_byte(which,'0');
    2992:	ce 01       	movw	r24, r28
    2994:	60 e3       	ldi	r22, 0x30	; 48
    2996:	0e 94 32 14 	call	0x2864	; 0x2864 <uart_send_byte>
		uart_send_byte(which,'1');
    299a:	ce 01       	movw	r24, r28
    299c:	61 e3       	ldi	r22, 0x31	; 49
    299e:	0e 94 32 14 	call	0x2864	; 0x2864 <uart_send_byte>
		uart_send_byte(which,'1');
    29a2:	ce 01       	movw	r24, r28
    29a4:	61 e3       	ldi	r22, 0x31	; 49
    29a6:	0e 94 32 14 	call	0x2864	; 0x2864 <uart_send_byte>
		break;
    29aa:	bf c0       	rjmp	.+382    	; 0x2b2a <uart_send_BIN4+0x264>
	case(4):
		uart_send_byte(which,'0');
    29ac:	60 e3       	ldi	r22, 0x30	; 48
    29ae:	0e 94 32 14 	call	0x2864	; 0x2864 <uart_send_byte>
		uart_send_byte(which,'1');
    29b2:	ce 01       	movw	r24, r28
    29b4:	61 e3       	ldi	r22, 0x31	; 49
    29b6:	0e 94 32 14 	call	0x2864	; 0x2864 <uart_send_byte>
		uart_send_byte(which,'0');
    29ba:	ce 01       	movw	r24, r28
    29bc:	60 e3       	ldi	r22, 0x30	; 48
    29be:	0e 94 32 14 	call	0x2864	; 0x2864 <uart_send_byte>
		uart_send_byte(which,'0');
    29c2:	ce 01       	movw	r24, r28
    29c4:	60 e3       	ldi	r22, 0x30	; 48
    29c6:	0e 94 32 14 	call	0x2864	; 0x2864 <uart_send_byte>
		break;
    29ca:	af c0       	rjmp	.+350    	; 0x2b2a <uart_send_BIN4+0x264>
	case(5):
		uart_send_byte(which,'0');
    29cc:	60 e3       	ldi	r22, 0x30	; 48
    29ce:	0e 94 32 14 	call	0x2864	; 0x2864 <uart_send_byte>
		uart_send_byte(which,'1');
    29d2:	ce 01       	movw	r24, r28
    29d4:	61 e3       	ldi	r22, 0x31	; 49
    29d6:	0e 94 32 14 	call	0x2864	; 0x2864 <uart_send_byte>
		uart_send_byte(which,'0');
    29da:	ce 01       	movw	r24, r28
    29dc:	60 e3       	ldi	r22, 0x30	; 48
    29de:	0e 94 32 14 	call	0x2864	; 0x2864 <uart_send_byte>
		uart_send_byte(which,'1');
    29e2:	ce 01       	movw	r24, r28
    29e4:	61 e3       	ldi	r22, 0x31	; 49
    29e6:	0e 94 32 14 	call	0x2864	; 0x2864 <uart_send_byte>
		break;
    29ea:	9f c0       	rjmp	.+318    	; 0x2b2a <uart_send_BIN4+0x264>
	case(6):
		uart_send_byte(which,'0');
    29ec:	60 e3       	ldi	r22, 0x30	; 48
    29ee:	0e 94 32 14 	call	0x2864	; 0x2864 <uart_send_byte>
		uart_send_byte(which,'1');
    29f2:	ce 01       	movw	r24, r28
    29f4:	61 e3       	ldi	r22, 0x31	; 49
    29f6:	0e 94 32 14 	call	0x2864	; 0x2864 <uart_send_byte>
		uart_send_byte(which,'1');
    29fa:	ce 01       	movw	r24, r28
    29fc:	61 e3       	ldi	r22, 0x31	; 49
    29fe:	0e 94 32 14 	call	0x2864	; 0x2864 <uart_send_byte>
		uart_send_byte(which,'0');
    2a02:	ce 01       	movw	r24, r28
    2a04:	60 e3       	ldi	r22, 0x30	; 48
    2a06:	0e 94 32 14 	call	0x2864	; 0x2864 <uart_send_byte>
		break;
    2a0a:	8f c0       	rjmp	.+286    	; 0x2b2a <uart_send_BIN4+0x264>
	case(7):
		uart_send_byte(which,'0');
    2a0c:	60 e3       	ldi	r22, 0x30	; 48
    2a0e:	0e 94 32 14 	call	0x2864	; 0x2864 <uart_send_byte>
		uart_send_byte(which,'1');
    2a12:	ce 01       	movw	r24, r28
    2a14:	61 e3       	ldi	r22, 0x31	; 49
    2a16:	0e 94 32 14 	call	0x2864	; 0x2864 <uart_send_byte>
		uart_send_byte(which,'1');
    2a1a:	ce 01       	movw	r24, r28
    2a1c:	61 e3       	ldi	r22, 0x31	; 49
    2a1e:	0e 94 32 14 	call	0x2864	; 0x2864 <uart_send_byte>
		uart_send_byte(which,'1');
    2a22:	ce 01       	movw	r24, r28
    2a24:	61 e3       	ldi	r22, 0x31	; 49
    2a26:	0e 94 32 14 	call	0x2864	; 0x2864 <uart_send_byte>
		break;
    2a2a:	7f c0       	rjmp	.+254    	; 0x2b2a <uart_send_BIN4+0x264>
	case(8):
		uart_send_byte(which,'1');
    2a2c:	61 e3       	ldi	r22, 0x31	; 49
    2a2e:	0e 94 32 14 	call	0x2864	; 0x2864 <uart_send_byte>
		uart_send_byte(which,'0');
    2a32:	ce 01       	movw	r24, r28
    2a34:	60 e3       	ldi	r22, 0x30	; 48
    2a36:	0e 94 32 14 	call	0x2864	; 0x2864 <uart_send_byte>
		uart_send_byte(which,'0');
    2a3a:	ce 01       	movw	r24, r28
    2a3c:	60 e3       	ldi	r22, 0x30	; 48
    2a3e:	0e 94 32 14 	call	0x2864	; 0x2864 <uart_send_byte>
		uart_send_byte(which,'0');
    2a42:	ce 01       	movw	r24, r28
    2a44:	60 e3       	ldi	r22, 0x30	; 48
    2a46:	0e 94 32 14 	call	0x2864	; 0x2864 <uart_send_byte>
		break;
    2a4a:	6f c0       	rjmp	.+222    	; 0x2b2a <uart_send_BIN4+0x264>
	case(9):
		uart_send_byte(which,'1');
    2a4c:	61 e3       	ldi	r22, 0x31	; 49
    2a4e:	0e 94 32 14 	call	0x2864	; 0x2864 <uart_send_byte>
		uart_send_byte(which,'0');
    2a52:	ce 01       	movw	r24, r28
    2a54:	60 e3       	ldi	r22, 0x30	; 48
    2a56:	0e 94 32 14 	call	0x2864	; 0x2864 <uart_send_byte>
		uart_send_byte(which,'0');
    2a5a:	ce 01       	movw	r24, r28
    2a5c:	60 e3       	ldi	r22, 0x30	; 48
    2a5e:	0e 94 32 14 	call	0x2864	; 0x2864 <uart_send_byte>
		uart_send_byte(which,'1');
    2a62:	ce 01       	movw	r24, r28
    2a64:	61 e3       	ldi	r22, 0x31	; 49
    2a66:	0e 94 32 14 	call	0x2864	; 0x2864 <uart_send_byte>
		break;
    2a6a:	5f c0       	rjmp	.+190    	; 0x2b2a <uart_send_BIN4+0x264>
	case(10):
		uart_send_byte(which,'1');
    2a6c:	61 e3       	ldi	r22, 0x31	; 49
    2a6e:	0e 94 32 14 	call	0x2864	; 0x2864 <uart_send_byte>
		uart_send_byte(which,'0');
    2a72:	ce 01       	movw	r24, r28
    2a74:	60 e3       	ldi	r22, 0x30	; 48
    2a76:	0e 94 32 14 	call	0x2864	; 0x2864 <uart_send_byte>
		uart_send_byte(which,'1');
    2a7a:	ce 01       	movw	r24, r28
    2a7c:	61 e3       	ldi	r22, 0x31	; 49
    2a7e:	0e 94 32 14 	call	0x2864	; 0x2864 <uart_send_byte>
		uart_send_byte(which,'0');
    2a82:	ce 01       	movw	r24, r28
    2a84:	60 e3       	ldi	r22, 0x30	; 48
    2a86:	0e 94 32 14 	call	0x2864	; 0x2864 <uart_send_byte>
		break;
    2a8a:	4f c0       	rjmp	.+158    	; 0x2b2a <uart_send_BIN4+0x264>
	case(11):
		uart_send_byte(which,'1');
    2a8c:	61 e3       	ldi	r22, 0x31	; 49
    2a8e:	0e 94 32 14 	call	0x2864	; 0x2864 <uart_send_byte>
		uart_send_byte(which,'0');
    2a92:	ce 01       	movw	r24, r28
    2a94:	60 e3       	ldi	r22, 0x30	; 48
    2a96:	0e 94 32 14 	call	0x2864	; 0x2864 <uart_send_byte>
		uart_send_byte(which,'1');
    2a9a:	ce 01       	movw	r24, r28
    2a9c:	61 e3       	ldi	r22, 0x31	; 49
    2a9e:	0e 94 32 14 	call	0x2864	; 0x2864 <uart_send_byte>
		uart_send_byte(which,'1');
    2aa2:	ce 01       	movw	r24, r28
    2aa4:	61 e3       	ldi	r22, 0x31	; 49
    2aa6:	0e 94 32 14 	call	0x2864	; 0x2864 <uart_send_byte>
		break;
    2aaa:	3f c0       	rjmp	.+126    	; 0x2b2a <uart_send_BIN4+0x264>
	case(12):
		uart_send_byte(which,'1');
    2aac:	61 e3       	ldi	r22, 0x31	; 49
    2aae:	0e 94 32 14 	call	0x2864	; 0x2864 <uart_send_byte>
		uart_send_byte(which,'1');
    2ab2:	ce 01       	movw	r24, r28
    2ab4:	61 e3       	ldi	r22, 0x31	; 49
    2ab6:	0e 94 32 14 	call	0x2864	; 0x2864 <uart_send_byte>
		uart_send_byte(which,'0');
    2aba:	ce 01       	movw	r24, r28
    2abc:	60 e3       	ldi	r22, 0x30	; 48
    2abe:	0e 94 32 14 	call	0x2864	; 0x2864 <uart_send_byte>
		uart_send_byte(which,'0');
    2ac2:	ce 01       	movw	r24, r28
    2ac4:	60 e3       	ldi	r22, 0x30	; 48
    2ac6:	0e 94 32 14 	call	0x2864	; 0x2864 <uart_send_byte>
		break;
    2aca:	2f c0       	rjmp	.+94     	; 0x2b2a <uart_send_BIN4+0x264>
	case(13):
		uart_send_byte(which,'1');
    2acc:	61 e3       	ldi	r22, 0x31	; 49
    2ace:	0e 94 32 14 	call	0x2864	; 0x2864 <uart_send_byte>
		uart_send_byte(which,'1');
    2ad2:	ce 01       	movw	r24, r28
    2ad4:	61 e3       	ldi	r22, 0x31	; 49
    2ad6:	0e 94 32 14 	call	0x2864	; 0x2864 <uart_send_byte>
		uart_send_byte(which,'0');
    2ada:	ce 01       	movw	r24, r28
    2adc:	60 e3       	ldi	r22, 0x30	; 48
    2ade:	0e 94 32 14 	call	0x2864	; 0x2864 <uart_send_byte>
		uart_send_byte(which,'1');
    2ae2:	ce 01       	movw	r24, r28
    2ae4:	61 e3       	ldi	r22, 0x31	; 49
    2ae6:	0e 94 32 14 	call	0x2864	; 0x2864 <uart_send_byte>
		break;
    2aea:	1f c0       	rjmp	.+62     	; 0x2b2a <uart_send_BIN4+0x264>
	case(14):
		uart_send_byte(which,'1');
    2aec:	61 e3       	ldi	r22, 0x31	; 49
    2aee:	0e 94 32 14 	call	0x2864	; 0x2864 <uart_send_byte>
		uart_send_byte(which,'1');
    2af2:	ce 01       	movw	r24, r28
    2af4:	61 e3       	ldi	r22, 0x31	; 49
    2af6:	0e 94 32 14 	call	0x2864	; 0x2864 <uart_send_byte>
		uart_send_byte(which,'1');
    2afa:	ce 01       	movw	r24, r28
    2afc:	61 e3       	ldi	r22, 0x31	; 49
    2afe:	0e 94 32 14 	call	0x2864	; 0x2864 <uart_send_byte>
		uart_send_byte(which,'0');
    2b02:	ce 01       	movw	r24, r28
    2b04:	60 e3       	ldi	r22, 0x30	; 48
    2b06:	0e 94 32 14 	call	0x2864	; 0x2864 <uart_send_byte>
		break;
    2b0a:	0f c0       	rjmp	.+30     	; 0x2b2a <uart_send_BIN4+0x264>
	case(15):
		uart_send_byte(which,'1');
    2b0c:	61 e3       	ldi	r22, 0x31	; 49
    2b0e:	0e 94 32 14 	call	0x2864	; 0x2864 <uart_send_byte>
		uart_send_byte(which,'1');
    2b12:	ce 01       	movw	r24, r28
    2b14:	61 e3       	ldi	r22, 0x31	; 49
    2b16:	0e 94 32 14 	call	0x2864	; 0x2864 <uart_send_byte>
		uart_send_byte(which,'1');
    2b1a:	ce 01       	movw	r24, r28
    2b1c:	61 e3       	ldi	r22, 0x31	; 49
    2b1e:	0e 94 32 14 	call	0x2864	; 0x2864 <uart_send_byte>
		uart_send_byte(which,'1');
    2b22:	ce 01       	movw	r24, r28
    2b24:	61 e3       	ldi	r22, 0x31	; 49
    2b26:	0e 94 32 14 	call	0x2864	; 0x2864 <uart_send_byte>
		break;
	}	
}
    2b2a:	df 91       	pop	r29
    2b2c:	cf 91       	pop	r28
    2b2e:	08 95       	ret

00002b30 <uart_send_BIN8>:

//Sends out tosend as ASCII text in 'b01101010' format
void uart_send_BIN8(USART_t* which, uint8_t lowb){
    2b30:	1f 93       	push	r17
    2b32:	cf 93       	push	r28
    2b34:	df 93       	push	r29
    2b36:	ec 01       	movw	r28, r24
    2b38:	16 2f       	mov	r17, r22
	uart_send_byte(which,'b');
    2b3a:	62 e6       	ldi	r22, 0x62	; 98
    2b3c:	0e 94 32 14 	call	0x2864	; 0x2864 <uart_send_byte>
	uart_send_BIN4(which, lowb>>4);
    2b40:	61 2f       	mov	r22, r17
    2b42:	62 95       	swap	r22
    2b44:	6f 70       	andi	r22, 0x0F	; 15
    2b46:	ce 01       	movw	r24, r28
    2b48:	0e 94 63 14 	call	0x28c6	; 0x28c6 <uart_send_BIN4>
	uart_send_BIN4(which, lowb & 0x0F);
    2b4c:	61 2f       	mov	r22, r17
    2b4e:	6f 70       	andi	r22, 0x0F	; 15
    2b50:	ce 01       	movw	r24, r28
    2b52:	0e 94 63 14 	call	0x28c6	; 0x28c6 <uart_send_BIN4>
}
    2b56:	df 91       	pop	r29
    2b58:	cf 91       	pop	r28
    2b5a:	1f 91       	pop	r17
    2b5c:	08 95       	ret

00002b5e <uart_send_HEX4>:
	
void uart_send_HEX4(USART_t* which, uint8_t lowb){
	switch(lowb){
    2b5e:	67 30       	cpi	r22, 0x07	; 7
    2b60:	09 f4       	brne	.+2      	; 0x2b64 <uart_send_HEX4+0x6>
    2b62:	3f c0       	rjmp	.+126    	; 0x2be2 <uart_send_HEX4+0x84>
    2b64:	68 30       	cpi	r22, 0x08	; 8
    2b66:	70 f4       	brcc	.+28     	; 0x2b84 <uart_send_HEX4+0x26>
    2b68:	63 30       	cpi	r22, 0x03	; 3
    2b6a:	59 f1       	breq	.+86     	; 0x2bc2 <uart_send_HEX4+0x64>
    2b6c:	64 30       	cpi	r22, 0x04	; 4
    2b6e:	28 f4       	brcc	.+10     	; 0x2b7a <uart_send_HEX4+0x1c>
    2b70:	61 30       	cpi	r22, 0x01	; 1
    2b72:	f9 f0       	breq	.+62     	; 0x2bb2 <uart_send_HEX4+0x54>
    2b74:	62 30       	cpi	r22, 0x02	; 2
    2b76:	08 f5       	brcc	.+66     	; 0x2bba <uart_send_HEX4+0x5c>
    2b78:	18 c0       	rjmp	.+48     	; 0x2baa <uart_send_HEX4+0x4c>
    2b7a:	65 30       	cpi	r22, 0x05	; 5
    2b7c:	51 f1       	breq	.+84     	; 0x2bd2 <uart_send_HEX4+0x74>
    2b7e:	66 30       	cpi	r22, 0x06	; 6
    2b80:	60 f5       	brcc	.+88     	; 0x2bda <uart_send_HEX4+0x7c>
    2b82:	23 c0       	rjmp	.+70     	; 0x2bca <uart_send_HEX4+0x6c>
    2b84:	6b 30       	cpi	r22, 0x0B	; 11
    2b86:	e9 f1       	breq	.+122    	; 0x2c02 <uart_send_HEX4+0xa4>
    2b88:	6c 30       	cpi	r22, 0x0C	; 12
    2b8a:	28 f4       	brcc	.+10     	; 0x2b96 <uart_send_HEX4+0x38>
    2b8c:	69 30       	cpi	r22, 0x09	; 9
    2b8e:	89 f1       	breq	.+98     	; 0x2bf2 <uart_send_HEX4+0x94>
    2b90:	6a 30       	cpi	r22, 0x0A	; 10
    2b92:	98 f5       	brcc	.+102    	; 0x2bfa <uart_send_HEX4+0x9c>
    2b94:	2a c0       	rjmp	.+84     	; 0x2bea <uart_send_HEX4+0x8c>
    2b96:	6d 30       	cpi	r22, 0x0D	; 13
    2b98:	e1 f1       	breq	.+120    	; 0x2c12 <uart_send_HEX4+0xb4>
    2b9a:	6d 30       	cpi	r22, 0x0D	; 13
    2b9c:	b0 f1       	brcs	.+108    	; 0x2c0a <uart_send_HEX4+0xac>
    2b9e:	6e 30       	cpi	r22, 0x0E	; 14
    2ba0:	e1 f1       	breq	.+120    	; 0x2c1a <uart_send_HEX4+0xbc>
    2ba2:	6f 30       	cpi	r22, 0x0F	; 15
    2ba4:	09 f0       	breq	.+2      	; 0x2ba8 <uart_send_HEX4+0x4a>
    2ba6:	40 c0       	rjmp	.+128    	; 0x2c28 <uart_send_HEX4+0xca>
    2ba8:	3c c0       	rjmp	.+120    	; 0x2c22 <uart_send_HEX4+0xc4>
	case(0):
		uart_send_byte( which, '0');
    2baa:	60 e3       	ldi	r22, 0x30	; 48
    2bac:	0e 94 32 14 	call	0x2864	; 0x2864 <uart_send_byte>
		break;
    2bb0:	08 95       	ret
	case(1):
		uart_send_byte( which, '1');
    2bb2:	61 e3       	ldi	r22, 0x31	; 49
    2bb4:	0e 94 32 14 	call	0x2864	; 0x2864 <uart_send_byte>
		break;
    2bb8:	08 95       	ret
	case(2):
		uart_send_byte( which, '2');
    2bba:	62 e3       	ldi	r22, 0x32	; 50
    2bbc:	0e 94 32 14 	call	0x2864	; 0x2864 <uart_send_byte>
		break;
    2bc0:	08 95       	ret
	case(3):
		uart_send_byte( which, '3');
    2bc2:	63 e3       	ldi	r22, 0x33	; 51
    2bc4:	0e 94 32 14 	call	0x2864	; 0x2864 <uart_send_byte>
		break;
    2bc8:	08 95       	ret
	case(4):
		uart_send_byte( which, '4');
    2bca:	64 e3       	ldi	r22, 0x34	; 52
    2bcc:	0e 94 32 14 	call	0x2864	; 0x2864 <uart_send_byte>
		break;
    2bd0:	08 95       	ret
	case(5):
		uart_send_byte( which, '5');
    2bd2:	65 e3       	ldi	r22, 0x35	; 53
    2bd4:	0e 94 32 14 	call	0x2864	; 0x2864 <uart_send_byte>
		break;
    2bd8:	08 95       	ret
	case(6):
		uart_send_byte( which, '6');
    2bda:	66 e3       	ldi	r22, 0x36	; 54
    2bdc:	0e 94 32 14 	call	0x2864	; 0x2864 <uart_send_byte>
		break;
    2be0:	08 95       	ret
	case(7):
		uart_send_byte( which, '7');
    2be2:	67 e3       	ldi	r22, 0x37	; 55
    2be4:	0e 94 32 14 	call	0x2864	; 0x2864 <uart_send_byte>
		break;
    2be8:	08 95       	ret
	case(8):
		uart_send_byte( which, '8');
    2bea:	68 e3       	ldi	r22, 0x38	; 56
    2bec:	0e 94 32 14 	call	0x2864	; 0x2864 <uart_send_byte>
		break;
    2bf0:	08 95       	ret
	case(9):
		uart_send_byte( which, '9');
    2bf2:	69 e3       	ldi	r22, 0x39	; 57
    2bf4:	0e 94 32 14 	call	0x2864	; 0x2864 <uart_send_byte>
		break;
    2bf8:	08 95       	ret
	case(10):
		uart_send_byte( which, 'A');
    2bfa:	61 e4       	ldi	r22, 0x41	; 65
    2bfc:	0e 94 32 14 	call	0x2864	; 0x2864 <uart_send_byte>
		break;
    2c00:	08 95       	ret
	case(11):
		uart_send_byte( which, 'B');
    2c02:	62 e4       	ldi	r22, 0x42	; 66
    2c04:	0e 94 32 14 	call	0x2864	; 0x2864 <uart_send_byte>
		break;
    2c08:	08 95       	ret
	case(12):
		uart_send_byte( which, 'C');
    2c0a:	63 e4       	ldi	r22, 0x43	; 67
    2c0c:	0e 94 32 14 	call	0x2864	; 0x2864 <uart_send_byte>
		break;
    2c10:	08 95       	ret
	case(13):
		uart_send_byte( which, 'D');
    2c12:	64 e4       	ldi	r22, 0x44	; 68
    2c14:	0e 94 32 14 	call	0x2864	; 0x2864 <uart_send_byte>
		break;
    2c18:	08 95       	ret
	case(14):
		uart_send_byte( which, 'E');
    2c1a:	65 e4       	ldi	r22, 0x45	; 69
    2c1c:	0e 94 32 14 	call	0x2864	; 0x2864 <uart_send_byte>
		break;
    2c20:	08 95       	ret
	case(15):
		uart_send_byte( which, 'F');
    2c22:	66 e4       	ldi	r22, 0x46	; 70
    2c24:	0e 94 32 14 	call	0x2864	; 0x2864 <uart_send_byte>
    2c28:	08 95       	ret

00002c2a <uart_send_HEX8>:
		break;
	}	
}

void uart_send_HEX8(USART_t* which, uint8_t lowb){
    2c2a:	1f 93       	push	r17
    2c2c:	cf 93       	push	r28
    2c2e:	df 93       	push	r29
    2c30:	ec 01       	movw	r28, r24
    2c32:	16 2f       	mov	r17, r22
	uart_send_HEX4(which, lowb>>4);
    2c34:	62 95       	swap	r22
    2c36:	6f 70       	andi	r22, 0x0F	; 15
    2c38:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <uart_send_HEX4>
	uart_send_HEX4(which, lowb & 0x0F);
    2c3c:	61 2f       	mov	r22, r17
    2c3e:	6f 70       	andi	r22, 0x0F	; 15
    2c40:	ce 01       	movw	r24, r28
    2c42:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <uart_send_HEX4>
}
    2c46:	df 91       	pop	r29
    2c48:	cf 91       	pop	r28
    2c4a:	1f 91       	pop	r17
    2c4c:	08 95       	ret

00002c4e <uart_send_HEX16b>:

void uart_send_HEX16b(USART_t* which, uint8_t highb, uint8_t lowb){
    2c4e:	1f 93       	push	r17
    2c50:	cf 93       	push	r28
    2c52:	df 93       	push	r29
    2c54:	ec 01       	movw	r28, r24
    2c56:	14 2f       	mov	r17, r20
	uart_send_HEX8(which, highb);
    2c58:	0e 94 15 16 	call	0x2c2a	; 0x2c2a <uart_send_HEX8>
	uart_send_HEX8(which, lowb);
    2c5c:	ce 01       	movw	r24, r28
    2c5e:	61 2f       	mov	r22, r17
    2c60:	0e 94 15 16 	call	0x2c2a	; 0x2c2a <uart_send_HEX8>
}
    2c64:	df 91       	pop	r29
    2c66:	cf 91       	pop	r28
    2c68:	1f 91       	pop	r17
    2c6a:	08 95       	ret

00002c6c <uart_send_HEX16>:

void uart_send_HEX16(USART_t* which, uint16_t highb){
    2c6c:	1f 93       	push	r17
    2c6e:	cf 93       	push	r28
    2c70:	df 93       	push	r29
    2c72:	ec 01       	movw	r28, r24
    2c74:	16 2f       	mov	r17, r22
    2c76:	67 2f       	mov	r22, r23
	uint8_t blah;
	blah = (uint8_t)(highb>>8);
	uart_send_HEX8(which, blah);
    2c78:	0e 94 15 16 	call	0x2c2a	; 0x2c2a <uart_send_HEX8>
	blah = (uint8_t)(highb & 0x00FF);
	uart_send_HEX8(which, blah);
    2c7c:	ce 01       	movw	r24, r28
    2c7e:	61 2f       	mov	r22, r17
    2c80:	0e 94 15 16 	call	0x2c2a	; 0x2c2a <uart_send_HEX8>
}
    2c84:	df 91       	pop	r29
    2c86:	cf 91       	pop	r28
    2c88:	1f 91       	pop	r17
    2c8a:	08 95       	ret

00002c8c <uart_enq_BIN4>:
//== The Queue-based versions (NON-BLOCKING) of the display functions ==
//======================================================================


//Most Significant Bit first
void uart_enq_BIN4(USART_t* which, uint8_t lowb){
    2c8c:	cf 93       	push	r28
    2c8e:	df 93       	push	r29
    2c90:	ec 01       	movw	r28, r24
	switch(lowb){
    2c92:	67 30       	cpi	r22, 0x07	; 7
    2c94:	09 f4       	brne	.+2      	; 0x2c98 <uart_enq_BIN4+0xc>
    2c96:	9d c0       	rjmp	.+314    	; 0x2dd2 <uart_enq_BIN4+0x146>
    2c98:	68 30       	cpi	r22, 0x08	; 8
    2c9a:	90 f4       	brcc	.+36     	; 0x2cc0 <uart_enq_BIN4+0x34>
    2c9c:	63 30       	cpi	r22, 0x03	; 3
    2c9e:	09 f4       	brne	.+2      	; 0x2ca2 <uart_enq_BIN4+0x16>
    2ca0:	58 c0       	rjmp	.+176    	; 0x2d52 <uart_enq_BIN4+0xc6>
    2ca2:	64 30       	cpi	r22, 0x04	; 4
    2ca4:	30 f4       	brcc	.+12     	; 0x2cb2 <uart_enq_BIN4+0x26>
    2ca6:	61 30       	cpi	r22, 0x01	; 1
    2ca8:	a1 f1       	breq	.+104    	; 0x2d12 <uart_enq_BIN4+0x86>
    2caa:	62 30       	cpi	r22, 0x02	; 2
    2cac:	08 f0       	brcs	.+2      	; 0x2cb0 <uart_enq_BIN4+0x24>
    2cae:	41 c0       	rjmp	.+130    	; 0x2d32 <uart_enq_BIN4+0xa6>
    2cb0:	20 c0       	rjmp	.+64     	; 0x2cf2 <uart_enq_BIN4+0x66>
    2cb2:	65 30       	cpi	r22, 0x05	; 5
    2cb4:	09 f4       	brne	.+2      	; 0x2cb8 <uart_enq_BIN4+0x2c>
    2cb6:	6d c0       	rjmp	.+218    	; 0x2d92 <uart_enq_BIN4+0x106>
    2cb8:	66 30       	cpi	r22, 0x06	; 6
    2cba:	08 f0       	brcs	.+2      	; 0x2cbe <uart_enq_BIN4+0x32>
    2cbc:	7a c0       	rjmp	.+244    	; 0x2db2 <uart_enq_BIN4+0x126>
    2cbe:	59 c0       	rjmp	.+178    	; 0x2d72 <uart_enq_BIN4+0xe6>
    2cc0:	6b 30       	cpi	r22, 0x0B	; 11
    2cc2:	09 f4       	brne	.+2      	; 0x2cc6 <uart_enq_BIN4+0x3a>
    2cc4:	c6 c0       	rjmp	.+396    	; 0x2e52 <uart_enq_BIN4+0x1c6>
    2cc6:	6c 30       	cpi	r22, 0x0C	; 12
    2cc8:	38 f4       	brcc	.+14     	; 0x2cd8 <uart_enq_BIN4+0x4c>
    2cca:	69 30       	cpi	r22, 0x09	; 9
    2ccc:	09 f4       	brne	.+2      	; 0x2cd0 <uart_enq_BIN4+0x44>
    2cce:	a1 c0       	rjmp	.+322    	; 0x2e12 <uart_enq_BIN4+0x186>
    2cd0:	6a 30       	cpi	r22, 0x0A	; 10
    2cd2:	08 f0       	brcs	.+2      	; 0x2cd6 <uart_enq_BIN4+0x4a>
    2cd4:	ae c0       	rjmp	.+348    	; 0x2e32 <uart_enq_BIN4+0x1a6>
    2cd6:	8d c0       	rjmp	.+282    	; 0x2df2 <uart_enq_BIN4+0x166>
    2cd8:	6d 30       	cpi	r22, 0x0D	; 13
    2cda:	09 f4       	brne	.+2      	; 0x2cde <uart_enq_BIN4+0x52>
    2cdc:	da c0       	rjmp	.+436    	; 0x2e92 <uart_enq_BIN4+0x206>
    2cde:	6d 30       	cpi	r22, 0x0D	; 13
    2ce0:	08 f4       	brcc	.+2      	; 0x2ce4 <uart_enq_BIN4+0x58>
    2ce2:	c7 c0       	rjmp	.+398    	; 0x2e72 <uart_enq_BIN4+0x1e6>
    2ce4:	6e 30       	cpi	r22, 0x0E	; 14
    2ce6:	09 f4       	brne	.+2      	; 0x2cea <uart_enq_BIN4+0x5e>
    2ce8:	e4 c0       	rjmp	.+456    	; 0x2eb2 <uart_enq_BIN4+0x226>
    2cea:	6f 30       	cpi	r22, 0x0F	; 15
    2cec:	09 f0       	breq	.+2      	; 0x2cf0 <uart_enq_BIN4+0x64>
    2cee:	00 c1       	rjmp	.+512    	; 0x2ef0 <uart_enq_BIN4+0x264>
    2cf0:	f0 c0       	rjmp	.+480    	; 0x2ed2 <uart_enq_BIN4+0x246>
	case(0):
		uart_enqueue(which, '0');
    2cf2:	60 e3       	ldi	r22, 0x30	; 48
    2cf4:	0e 94 34 26 	call	0x4c68	; 0x4c68 <uart_enqueue>
		uart_enqueue(which, '0');
    2cf8:	ce 01       	movw	r24, r28
    2cfa:	60 e3       	ldi	r22, 0x30	; 48
    2cfc:	0e 94 34 26 	call	0x4c68	; 0x4c68 <uart_enqueue>
		uart_enqueue(which, '0');
    2d00:	ce 01       	movw	r24, r28
    2d02:	60 e3       	ldi	r22, 0x30	; 48
    2d04:	0e 94 34 26 	call	0x4c68	; 0x4c68 <uart_enqueue>
		uart_enqueue(which, '0');
    2d08:	ce 01       	movw	r24, r28
    2d0a:	60 e3       	ldi	r22, 0x30	; 48
    2d0c:	0e 94 34 26 	call	0x4c68	; 0x4c68 <uart_enqueue>
		break;
    2d10:	ef c0       	rjmp	.+478    	; 0x2ef0 <uart_enq_BIN4+0x264>
	case(1):
		uart_enqueue(which, '0');
    2d12:	60 e3       	ldi	r22, 0x30	; 48
    2d14:	0e 94 34 26 	call	0x4c68	; 0x4c68 <uart_enqueue>
		uart_enqueue(which, '0');
    2d18:	ce 01       	movw	r24, r28
    2d1a:	60 e3       	ldi	r22, 0x30	; 48
    2d1c:	0e 94 34 26 	call	0x4c68	; 0x4c68 <uart_enqueue>
		uart_enqueue(which, '0');
    2d20:	ce 01       	movw	r24, r28
    2d22:	60 e3       	ldi	r22, 0x30	; 48
    2d24:	0e 94 34 26 	call	0x4c68	; 0x4c68 <uart_enqueue>
		uart_enqueue(which, '1');
    2d28:	ce 01       	movw	r24, r28
    2d2a:	61 e3       	ldi	r22, 0x31	; 49
    2d2c:	0e 94 34 26 	call	0x4c68	; 0x4c68 <uart_enqueue>
		break;
    2d30:	df c0       	rjmp	.+446    	; 0x2ef0 <uart_enq_BIN4+0x264>
	case(2):
		uart_enqueue(which, '0');
    2d32:	60 e3       	ldi	r22, 0x30	; 48
    2d34:	0e 94 34 26 	call	0x4c68	; 0x4c68 <uart_enqueue>
		uart_enqueue(which, '0');
    2d38:	ce 01       	movw	r24, r28
    2d3a:	60 e3       	ldi	r22, 0x30	; 48
    2d3c:	0e 94 34 26 	call	0x4c68	; 0x4c68 <uart_enqueue>
		uart_enqueue(which, '1');
    2d40:	ce 01       	movw	r24, r28
    2d42:	61 e3       	ldi	r22, 0x31	; 49
    2d44:	0e 94 34 26 	call	0x4c68	; 0x4c68 <uart_enqueue>
		uart_enqueue(which, '0');
    2d48:	ce 01       	movw	r24, r28
    2d4a:	60 e3       	ldi	r22, 0x30	; 48
    2d4c:	0e 94 34 26 	call	0x4c68	; 0x4c68 <uart_enqueue>
		break;
    2d50:	cf c0       	rjmp	.+414    	; 0x2ef0 <uart_enq_BIN4+0x264>
	case(3):
		uart_enqueue(which, '0');
    2d52:	60 e3       	ldi	r22, 0x30	; 48
    2d54:	0e 94 34 26 	call	0x4c68	; 0x4c68 <uart_enqueue>
		uart_enqueue(which, '0');
    2d58:	ce 01       	movw	r24, r28
    2d5a:	60 e3       	ldi	r22, 0x30	; 48
    2d5c:	0e 94 34 26 	call	0x4c68	; 0x4c68 <uart_enqueue>
		uart_enqueue(which, '1');
    2d60:	ce 01       	movw	r24, r28
    2d62:	61 e3       	ldi	r22, 0x31	; 49
    2d64:	0e 94 34 26 	call	0x4c68	; 0x4c68 <uart_enqueue>
		uart_enqueue(which, '1');
    2d68:	ce 01       	movw	r24, r28
    2d6a:	61 e3       	ldi	r22, 0x31	; 49
    2d6c:	0e 94 34 26 	call	0x4c68	; 0x4c68 <uart_enqueue>
		break;
    2d70:	bf c0       	rjmp	.+382    	; 0x2ef0 <uart_enq_BIN4+0x264>
	case(4):
		uart_enqueue(which, '0');
    2d72:	60 e3       	ldi	r22, 0x30	; 48
    2d74:	0e 94 34 26 	call	0x4c68	; 0x4c68 <uart_enqueue>
		uart_enqueue(which, '1');
    2d78:	ce 01       	movw	r24, r28
    2d7a:	61 e3       	ldi	r22, 0x31	; 49
    2d7c:	0e 94 34 26 	call	0x4c68	; 0x4c68 <uart_enqueue>
		uart_enqueue(which, '0');
    2d80:	ce 01       	movw	r24, r28
    2d82:	60 e3       	ldi	r22, 0x30	; 48
    2d84:	0e 94 34 26 	call	0x4c68	; 0x4c68 <uart_enqueue>
		uart_enqueue(which, '0');
    2d88:	ce 01       	movw	r24, r28
    2d8a:	60 e3       	ldi	r22, 0x30	; 48
    2d8c:	0e 94 34 26 	call	0x4c68	; 0x4c68 <uart_enqueue>
		break;
    2d90:	af c0       	rjmp	.+350    	; 0x2ef0 <uart_enq_BIN4+0x264>
	case(5):
		uart_enqueue(which, '0');
    2d92:	60 e3       	ldi	r22, 0x30	; 48
    2d94:	0e 94 34 26 	call	0x4c68	; 0x4c68 <uart_enqueue>
		uart_enqueue(which, '1');
    2d98:	ce 01       	movw	r24, r28
    2d9a:	61 e3       	ldi	r22, 0x31	; 49
    2d9c:	0e 94 34 26 	call	0x4c68	; 0x4c68 <uart_enqueue>
		uart_enqueue(which, '0');
    2da0:	ce 01       	movw	r24, r28
    2da2:	60 e3       	ldi	r22, 0x30	; 48
    2da4:	0e 94 34 26 	call	0x4c68	; 0x4c68 <uart_enqueue>
		uart_enqueue(which, '1');
    2da8:	ce 01       	movw	r24, r28
    2daa:	61 e3       	ldi	r22, 0x31	; 49
    2dac:	0e 94 34 26 	call	0x4c68	; 0x4c68 <uart_enqueue>
		break;
    2db0:	9f c0       	rjmp	.+318    	; 0x2ef0 <uart_enq_BIN4+0x264>
	case(6):
		uart_enqueue(which, '0');
    2db2:	60 e3       	ldi	r22, 0x30	; 48
    2db4:	0e 94 34 26 	call	0x4c68	; 0x4c68 <uart_enqueue>
		uart_enqueue(which, '1');
    2db8:	ce 01       	movw	r24, r28
    2dba:	61 e3       	ldi	r22, 0x31	; 49
    2dbc:	0e 94 34 26 	call	0x4c68	; 0x4c68 <uart_enqueue>
		uart_enqueue(which, '1');
    2dc0:	ce 01       	movw	r24, r28
    2dc2:	61 e3       	ldi	r22, 0x31	; 49
    2dc4:	0e 94 34 26 	call	0x4c68	; 0x4c68 <uart_enqueue>
		uart_enqueue(which, '0');
    2dc8:	ce 01       	movw	r24, r28
    2dca:	60 e3       	ldi	r22, 0x30	; 48
    2dcc:	0e 94 34 26 	call	0x4c68	; 0x4c68 <uart_enqueue>
		break;
    2dd0:	8f c0       	rjmp	.+286    	; 0x2ef0 <uart_enq_BIN4+0x264>
	case(7):
		uart_enqueue(which, '0');
    2dd2:	60 e3       	ldi	r22, 0x30	; 48
    2dd4:	0e 94 34 26 	call	0x4c68	; 0x4c68 <uart_enqueue>
		uart_enqueue(which, '1');
    2dd8:	ce 01       	movw	r24, r28
    2dda:	61 e3       	ldi	r22, 0x31	; 49
    2ddc:	0e 94 34 26 	call	0x4c68	; 0x4c68 <uart_enqueue>
		uart_enqueue(which, '1');
    2de0:	ce 01       	movw	r24, r28
    2de2:	61 e3       	ldi	r22, 0x31	; 49
    2de4:	0e 94 34 26 	call	0x4c68	; 0x4c68 <uart_enqueue>
		uart_enqueue(which, '1');
    2de8:	ce 01       	movw	r24, r28
    2dea:	61 e3       	ldi	r22, 0x31	; 49
    2dec:	0e 94 34 26 	call	0x4c68	; 0x4c68 <uart_enqueue>
		break;
    2df0:	7f c0       	rjmp	.+254    	; 0x2ef0 <uart_enq_BIN4+0x264>
	case(8):
		uart_enqueue(which, '1');
    2df2:	61 e3       	ldi	r22, 0x31	; 49
    2df4:	0e 94 34 26 	call	0x4c68	; 0x4c68 <uart_enqueue>
		uart_enqueue(which, '0');
    2df8:	ce 01       	movw	r24, r28
    2dfa:	60 e3       	ldi	r22, 0x30	; 48
    2dfc:	0e 94 34 26 	call	0x4c68	; 0x4c68 <uart_enqueue>
		uart_enqueue(which, '0');
    2e00:	ce 01       	movw	r24, r28
    2e02:	60 e3       	ldi	r22, 0x30	; 48
    2e04:	0e 94 34 26 	call	0x4c68	; 0x4c68 <uart_enqueue>
		uart_enqueue(which, '0');
    2e08:	ce 01       	movw	r24, r28
    2e0a:	60 e3       	ldi	r22, 0x30	; 48
    2e0c:	0e 94 34 26 	call	0x4c68	; 0x4c68 <uart_enqueue>
		break;
    2e10:	6f c0       	rjmp	.+222    	; 0x2ef0 <uart_enq_BIN4+0x264>
	case(9):
		uart_enqueue(which, '1');
    2e12:	61 e3       	ldi	r22, 0x31	; 49
    2e14:	0e 94 34 26 	call	0x4c68	; 0x4c68 <uart_enqueue>
		uart_enqueue(which, '0');
    2e18:	ce 01       	movw	r24, r28
    2e1a:	60 e3       	ldi	r22, 0x30	; 48
    2e1c:	0e 94 34 26 	call	0x4c68	; 0x4c68 <uart_enqueue>
		uart_enqueue(which, '0');
    2e20:	ce 01       	movw	r24, r28
    2e22:	60 e3       	ldi	r22, 0x30	; 48
    2e24:	0e 94 34 26 	call	0x4c68	; 0x4c68 <uart_enqueue>
		uart_enqueue(which, '1');
    2e28:	ce 01       	movw	r24, r28
    2e2a:	61 e3       	ldi	r22, 0x31	; 49
    2e2c:	0e 94 34 26 	call	0x4c68	; 0x4c68 <uart_enqueue>
		break;
    2e30:	5f c0       	rjmp	.+190    	; 0x2ef0 <uart_enq_BIN4+0x264>
	case(10):
		uart_enqueue(which, '1');
    2e32:	61 e3       	ldi	r22, 0x31	; 49
    2e34:	0e 94 34 26 	call	0x4c68	; 0x4c68 <uart_enqueue>
		uart_enqueue(which, '0');
    2e38:	ce 01       	movw	r24, r28
    2e3a:	60 e3       	ldi	r22, 0x30	; 48
    2e3c:	0e 94 34 26 	call	0x4c68	; 0x4c68 <uart_enqueue>
		uart_enqueue(which, '1');
    2e40:	ce 01       	movw	r24, r28
    2e42:	61 e3       	ldi	r22, 0x31	; 49
    2e44:	0e 94 34 26 	call	0x4c68	; 0x4c68 <uart_enqueue>
		uart_enqueue(which, '0');
    2e48:	ce 01       	movw	r24, r28
    2e4a:	60 e3       	ldi	r22, 0x30	; 48
    2e4c:	0e 94 34 26 	call	0x4c68	; 0x4c68 <uart_enqueue>
		break;
    2e50:	4f c0       	rjmp	.+158    	; 0x2ef0 <uart_enq_BIN4+0x264>
	case(11):
		uart_enqueue(which, '1');
    2e52:	61 e3       	ldi	r22, 0x31	; 49
    2e54:	0e 94 34 26 	call	0x4c68	; 0x4c68 <uart_enqueue>
		uart_enqueue(which, '0');
    2e58:	ce 01       	movw	r24, r28
    2e5a:	60 e3       	ldi	r22, 0x30	; 48
    2e5c:	0e 94 34 26 	call	0x4c68	; 0x4c68 <uart_enqueue>
		uart_enqueue(which, '1');
    2e60:	ce 01       	movw	r24, r28
    2e62:	61 e3       	ldi	r22, 0x31	; 49
    2e64:	0e 94 34 26 	call	0x4c68	; 0x4c68 <uart_enqueue>
		uart_enqueue(which, '1');
    2e68:	ce 01       	movw	r24, r28
    2e6a:	61 e3       	ldi	r22, 0x31	; 49
    2e6c:	0e 94 34 26 	call	0x4c68	; 0x4c68 <uart_enqueue>
		break;
    2e70:	3f c0       	rjmp	.+126    	; 0x2ef0 <uart_enq_BIN4+0x264>
	case(12):
		uart_enqueue(which, '1');
    2e72:	61 e3       	ldi	r22, 0x31	; 49
    2e74:	0e 94 34 26 	call	0x4c68	; 0x4c68 <uart_enqueue>
		uart_enqueue(which, '1');
    2e78:	ce 01       	movw	r24, r28
    2e7a:	61 e3       	ldi	r22, 0x31	; 49
    2e7c:	0e 94 34 26 	call	0x4c68	; 0x4c68 <uart_enqueue>
		uart_enqueue(which, '0');
    2e80:	ce 01       	movw	r24, r28
    2e82:	60 e3       	ldi	r22, 0x30	; 48
    2e84:	0e 94 34 26 	call	0x4c68	; 0x4c68 <uart_enqueue>
		uart_enqueue(which, '0');
    2e88:	ce 01       	movw	r24, r28
    2e8a:	60 e3       	ldi	r22, 0x30	; 48
    2e8c:	0e 94 34 26 	call	0x4c68	; 0x4c68 <uart_enqueue>
		break;
    2e90:	2f c0       	rjmp	.+94     	; 0x2ef0 <uart_enq_BIN4+0x264>
	case(13):
		uart_enqueue(which, '1');
    2e92:	61 e3       	ldi	r22, 0x31	; 49
    2e94:	0e 94 34 26 	call	0x4c68	; 0x4c68 <uart_enqueue>
		uart_enqueue(which, '1');
    2e98:	ce 01       	movw	r24, r28
    2e9a:	61 e3       	ldi	r22, 0x31	; 49
    2e9c:	0e 94 34 26 	call	0x4c68	; 0x4c68 <uart_enqueue>
		uart_enqueue(which, '0');
    2ea0:	ce 01       	movw	r24, r28
    2ea2:	60 e3       	ldi	r22, 0x30	; 48
    2ea4:	0e 94 34 26 	call	0x4c68	; 0x4c68 <uart_enqueue>
		uart_enqueue(which, '1');
    2ea8:	ce 01       	movw	r24, r28
    2eaa:	61 e3       	ldi	r22, 0x31	; 49
    2eac:	0e 94 34 26 	call	0x4c68	; 0x4c68 <uart_enqueue>
		break;
    2eb0:	1f c0       	rjmp	.+62     	; 0x2ef0 <uart_enq_BIN4+0x264>
	case(14):
		uart_enqueue(which, '1');
    2eb2:	61 e3       	ldi	r22, 0x31	; 49
    2eb4:	0e 94 34 26 	call	0x4c68	; 0x4c68 <uart_enqueue>
		uart_enqueue(which, '1');
    2eb8:	ce 01       	movw	r24, r28
    2eba:	61 e3       	ldi	r22, 0x31	; 49
    2ebc:	0e 94 34 26 	call	0x4c68	; 0x4c68 <uart_enqueue>
		uart_enqueue(which, '1');
    2ec0:	ce 01       	movw	r24, r28
    2ec2:	61 e3       	ldi	r22, 0x31	; 49
    2ec4:	0e 94 34 26 	call	0x4c68	; 0x4c68 <uart_enqueue>
		uart_enqueue(which, '0');
    2ec8:	ce 01       	movw	r24, r28
    2eca:	60 e3       	ldi	r22, 0x30	; 48
    2ecc:	0e 94 34 26 	call	0x4c68	; 0x4c68 <uart_enqueue>
		break;
    2ed0:	0f c0       	rjmp	.+30     	; 0x2ef0 <uart_enq_BIN4+0x264>
	case(15):
		uart_enqueue(which, '1');
    2ed2:	61 e3       	ldi	r22, 0x31	; 49
    2ed4:	0e 94 34 26 	call	0x4c68	; 0x4c68 <uart_enqueue>
		uart_enqueue(which, '1');
    2ed8:	ce 01       	movw	r24, r28
    2eda:	61 e3       	ldi	r22, 0x31	; 49
    2edc:	0e 94 34 26 	call	0x4c68	; 0x4c68 <uart_enqueue>
		uart_enqueue(which, '1');
    2ee0:	ce 01       	movw	r24, r28
    2ee2:	61 e3       	ldi	r22, 0x31	; 49
    2ee4:	0e 94 34 26 	call	0x4c68	; 0x4c68 <uart_enqueue>
		uart_enqueue(which, '1');
    2ee8:	ce 01       	movw	r24, r28
    2eea:	61 e3       	ldi	r22, 0x31	; 49
    2eec:	0e 94 34 26 	call	0x4c68	; 0x4c68 <uart_enqueue>
		break;
	}	
}
    2ef0:	df 91       	pop	r29
    2ef2:	cf 91       	pop	r28
    2ef4:	08 95       	ret

00002ef6 <uart_enq_BIN8>:

//enqs out toenq as ASCII text in 'b01101010' format
void uart_enq_BIN8(USART_t* which, uint8_t lowb){
    2ef6:	1f 93       	push	r17
    2ef8:	cf 93       	push	r28
    2efa:	df 93       	push	r29
    2efc:	ec 01       	movw	r28, r24
    2efe:	16 2f       	mov	r17, r22
	uart_enqueue(which, 'b');
    2f00:	62 e6       	ldi	r22, 0x62	; 98
    2f02:	0e 94 34 26 	call	0x4c68	; 0x4c68 <uart_enqueue>
	uart_enq_BIN4(which, lowb>>4);
    2f06:	61 2f       	mov	r22, r17
    2f08:	62 95       	swap	r22
    2f0a:	6f 70       	andi	r22, 0x0F	; 15
    2f0c:	ce 01       	movw	r24, r28
    2f0e:	0e 94 46 16 	call	0x2c8c	; 0x2c8c <uart_enq_BIN4>
	uart_enq_BIN4(which, lowb & 0x0F);
    2f12:	61 2f       	mov	r22, r17
    2f14:	6f 70       	andi	r22, 0x0F	; 15
    2f16:	ce 01       	movw	r24, r28
    2f18:	0e 94 46 16 	call	0x2c8c	; 0x2c8c <uart_enq_BIN4>
}
    2f1c:	df 91       	pop	r29
    2f1e:	cf 91       	pop	r28
    2f20:	1f 91       	pop	r17
    2f22:	08 95       	ret

00002f24 <uart_enq_HEX4>:
	

void uart_enq_HEX4(USART_t* which, uint8_t lowb){
	switch(lowb){
    2f24:	67 30       	cpi	r22, 0x07	; 7
    2f26:	09 f4       	brne	.+2      	; 0x2f2a <uart_enq_HEX4+0x6>
    2f28:	3f c0       	rjmp	.+126    	; 0x2fa8 <uart_enq_HEX4+0x84>
    2f2a:	68 30       	cpi	r22, 0x08	; 8
    2f2c:	70 f4       	brcc	.+28     	; 0x2f4a <uart_enq_HEX4+0x26>
    2f2e:	63 30       	cpi	r22, 0x03	; 3
    2f30:	59 f1       	breq	.+86     	; 0x2f88 <uart_enq_HEX4+0x64>
    2f32:	64 30       	cpi	r22, 0x04	; 4
    2f34:	28 f4       	brcc	.+10     	; 0x2f40 <uart_enq_HEX4+0x1c>
    2f36:	61 30       	cpi	r22, 0x01	; 1
    2f38:	f9 f0       	breq	.+62     	; 0x2f78 <uart_enq_HEX4+0x54>
    2f3a:	62 30       	cpi	r22, 0x02	; 2
    2f3c:	08 f5       	brcc	.+66     	; 0x2f80 <uart_enq_HEX4+0x5c>
    2f3e:	18 c0       	rjmp	.+48     	; 0x2f70 <uart_enq_HEX4+0x4c>
    2f40:	65 30       	cpi	r22, 0x05	; 5
    2f42:	51 f1       	breq	.+84     	; 0x2f98 <uart_enq_HEX4+0x74>
    2f44:	66 30       	cpi	r22, 0x06	; 6
    2f46:	60 f5       	brcc	.+88     	; 0x2fa0 <uart_enq_HEX4+0x7c>
    2f48:	23 c0       	rjmp	.+70     	; 0x2f90 <uart_enq_HEX4+0x6c>
    2f4a:	6b 30       	cpi	r22, 0x0B	; 11
    2f4c:	e9 f1       	breq	.+122    	; 0x2fc8 <uart_enq_HEX4+0xa4>
    2f4e:	6c 30       	cpi	r22, 0x0C	; 12
    2f50:	28 f4       	brcc	.+10     	; 0x2f5c <uart_enq_HEX4+0x38>
    2f52:	69 30       	cpi	r22, 0x09	; 9
    2f54:	89 f1       	breq	.+98     	; 0x2fb8 <uart_enq_HEX4+0x94>
    2f56:	6a 30       	cpi	r22, 0x0A	; 10
    2f58:	98 f5       	brcc	.+102    	; 0x2fc0 <uart_enq_HEX4+0x9c>
    2f5a:	2a c0       	rjmp	.+84     	; 0x2fb0 <uart_enq_HEX4+0x8c>
    2f5c:	6d 30       	cpi	r22, 0x0D	; 13
    2f5e:	e1 f1       	breq	.+120    	; 0x2fd8 <uart_enq_HEX4+0xb4>
    2f60:	6d 30       	cpi	r22, 0x0D	; 13
    2f62:	b0 f1       	brcs	.+108    	; 0x2fd0 <uart_enq_HEX4+0xac>
    2f64:	6e 30       	cpi	r22, 0x0E	; 14
    2f66:	e1 f1       	breq	.+120    	; 0x2fe0 <uart_enq_HEX4+0xbc>
    2f68:	6f 30       	cpi	r22, 0x0F	; 15
    2f6a:	09 f0       	breq	.+2      	; 0x2f6e <uart_enq_HEX4+0x4a>
    2f6c:	40 c0       	rjmp	.+128    	; 0x2fee <uart_enq_HEX4+0xca>
    2f6e:	3c c0       	rjmp	.+120    	; 0x2fe8 <uart_enq_HEX4+0xc4>
	case(0):
		uart_enqueue(which,  '0');
    2f70:	60 e3       	ldi	r22, 0x30	; 48
    2f72:	0e 94 34 26 	call	0x4c68	; 0x4c68 <uart_enqueue>
		break;
    2f76:	08 95       	ret
	case(1):
		uart_enqueue(which,  '1');
    2f78:	61 e3       	ldi	r22, 0x31	; 49
    2f7a:	0e 94 34 26 	call	0x4c68	; 0x4c68 <uart_enqueue>
		break;
    2f7e:	08 95       	ret
	case(2):
		uart_enqueue(which,  '2');
    2f80:	62 e3       	ldi	r22, 0x32	; 50
    2f82:	0e 94 34 26 	call	0x4c68	; 0x4c68 <uart_enqueue>
		break;
    2f86:	08 95       	ret
	case(3):
		uart_enqueue(which,  '3');
    2f88:	63 e3       	ldi	r22, 0x33	; 51
    2f8a:	0e 94 34 26 	call	0x4c68	; 0x4c68 <uart_enqueue>
		break;
    2f8e:	08 95       	ret
	case(4):
		uart_enqueue(which,  '4');
    2f90:	64 e3       	ldi	r22, 0x34	; 52
    2f92:	0e 94 34 26 	call	0x4c68	; 0x4c68 <uart_enqueue>
		break;
    2f96:	08 95       	ret
	case(5):
		uart_enqueue(which,  '5');
    2f98:	65 e3       	ldi	r22, 0x35	; 53
    2f9a:	0e 94 34 26 	call	0x4c68	; 0x4c68 <uart_enqueue>
		break;
    2f9e:	08 95       	ret
	case(6):
		uart_enqueue(which,  '6');
    2fa0:	66 e3       	ldi	r22, 0x36	; 54
    2fa2:	0e 94 34 26 	call	0x4c68	; 0x4c68 <uart_enqueue>
		break;
    2fa6:	08 95       	ret
	case(7):
		uart_enqueue(which,  '7');
    2fa8:	67 e3       	ldi	r22, 0x37	; 55
    2faa:	0e 94 34 26 	call	0x4c68	; 0x4c68 <uart_enqueue>
		break;
    2fae:	08 95       	ret
	case(8):
		uart_enqueue(which,  '8');
    2fb0:	68 e3       	ldi	r22, 0x38	; 56
    2fb2:	0e 94 34 26 	call	0x4c68	; 0x4c68 <uart_enqueue>
		break;
    2fb6:	08 95       	ret
	case(9):
		uart_enqueue(which,  '9');
    2fb8:	69 e3       	ldi	r22, 0x39	; 57
    2fba:	0e 94 34 26 	call	0x4c68	; 0x4c68 <uart_enqueue>
		break;
    2fbe:	08 95       	ret
	case(10):
		uart_enqueue(which,  'A');
    2fc0:	61 e4       	ldi	r22, 0x41	; 65
    2fc2:	0e 94 34 26 	call	0x4c68	; 0x4c68 <uart_enqueue>
		break;
    2fc6:	08 95       	ret
	case(11):
		uart_enqueue(which,  'B');
    2fc8:	62 e4       	ldi	r22, 0x42	; 66
    2fca:	0e 94 34 26 	call	0x4c68	; 0x4c68 <uart_enqueue>
		break;
    2fce:	08 95       	ret
	case(12):
		uart_enqueue(which,  'C');
    2fd0:	63 e4       	ldi	r22, 0x43	; 67
    2fd2:	0e 94 34 26 	call	0x4c68	; 0x4c68 <uart_enqueue>
		break;
    2fd6:	08 95       	ret
	case(13):
		uart_enqueue(which,  'D');
    2fd8:	64 e4       	ldi	r22, 0x44	; 68
    2fda:	0e 94 34 26 	call	0x4c68	; 0x4c68 <uart_enqueue>
		break;
    2fde:	08 95       	ret
	case(14):
		uart_enqueue(which,  'E');
    2fe0:	65 e4       	ldi	r22, 0x45	; 69
    2fe2:	0e 94 34 26 	call	0x4c68	; 0x4c68 <uart_enqueue>
		break;
    2fe6:	08 95       	ret
	case(15):
		uart_enqueue(which,  'F');
    2fe8:	66 e4       	ldi	r22, 0x46	; 70
    2fea:	0e 94 34 26 	call	0x4c68	; 0x4c68 <uart_enqueue>
    2fee:	08 95       	ret

00002ff0 <uart_enq_HEX8>:
		break;
	}	
}

void uart_enq_HEX8(USART_t* which, uint8_t lowb){
    2ff0:	1f 93       	push	r17
    2ff2:	cf 93       	push	r28
    2ff4:	df 93       	push	r29
    2ff6:	ec 01       	movw	r28, r24
    2ff8:	16 2f       	mov	r17, r22
	uart_enq_HEX4(which, lowb>>4);
    2ffa:	62 95       	swap	r22
    2ffc:	6f 70       	andi	r22, 0x0F	; 15
    2ffe:	0e 94 92 17 	call	0x2f24	; 0x2f24 <uart_enq_HEX4>
	uart_enq_HEX4(which, lowb & 0x0F);
    3002:	61 2f       	mov	r22, r17
    3004:	6f 70       	andi	r22, 0x0F	; 15
    3006:	ce 01       	movw	r24, r28
    3008:	0e 94 92 17 	call	0x2f24	; 0x2f24 <uart_enq_HEX4>
}
    300c:	df 91       	pop	r29
    300e:	cf 91       	pop	r28
    3010:	1f 91       	pop	r17
    3012:	08 95       	ret

00003014 <uart_enq_HEX16b>:

void uart_enq_HEX16b(USART_t* which, uint8_t highb, uint8_t lowb){
    3014:	1f 93       	push	r17
    3016:	cf 93       	push	r28
    3018:	df 93       	push	r29
    301a:	ec 01       	movw	r28, r24
    301c:	14 2f       	mov	r17, r20
	uart_enq_HEX8(which, highb);
    301e:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <uart_enq_HEX8>
	uart_enq_HEX8(which, lowb);
    3022:	ce 01       	movw	r24, r28
    3024:	61 2f       	mov	r22, r17
    3026:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <uart_enq_HEX8>
}
    302a:	df 91       	pop	r29
    302c:	cf 91       	pop	r28
    302e:	1f 91       	pop	r17
    3030:	08 95       	ret

00003032 <uart_enq_HEX16>:

void uart_enq_HEX16(USART_t* which, uint16_t highb){
    3032:	1f 93       	push	r17
    3034:	cf 93       	push	r28
    3036:	df 93       	push	r29
    3038:	ec 01       	movw	r28, r24
    303a:	16 2f       	mov	r17, r22
    303c:	67 2f       	mov	r22, r23
	uint8_t blah;
	blah = (uint8_t)(highb>>8);
	uart_enq_HEX8(which, blah);
    303e:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <uart_enq_HEX8>
	blah = (uint8_t)(highb & 0x00FF);
	uart_enq_HEX8(which, blah);
    3042:	ce 01       	movw	r24, r28
    3044:	61 2f       	mov	r22, r17
    3046:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <uart_enq_HEX8>
}
    304a:	df 91       	pop	r29
    304c:	cf 91       	pop	r28
    304e:	1f 91       	pop	r17
    3050:	08 95       	ret

00003052 <__vector_25>:
//************************************************************************
//************************************************************************

//Must correspond to definitions in uart.h
ISR(USARTC0_DRE_vect) {uart_transmit(&uctrl);}//TX Interrupt
ISR(USARTC0_RXC_vect) {uart_receive(&uctrl);} //RX Interrupt
    3052:	1f 92       	push	r1
    3054:	0f 92       	push	r0
    3056:	0f b6       	in	r0, 0x3f	; 63
    3058:	0f 92       	push	r0
    305a:	08 b6       	in	r0, 0x38	; 56
    305c:	0f 92       	push	r0
    305e:	09 b6       	in	r0, 0x39	; 57
    3060:	0f 92       	push	r0
    3062:	0a b6       	in	r0, 0x3a	; 58
    3064:	0f 92       	push	r0
    3066:	0b b6       	in	r0, 0x3b	; 59
    3068:	0f 92       	push	r0
    306a:	11 24       	eor	r1, r1
    306c:	2f 93       	push	r18
    306e:	3f 93       	push	r19
    3070:	4f 93       	push	r20
    3072:	5f 93       	push	r21
    3074:	8f 93       	push	r24
    3076:	9f 93       	push	r25
    3078:	af 93       	push	r26
    307a:	bf 93       	push	r27
    307c:	cf 93       	push	r28
    307e:	df 93       	push	r29
    3080:	ef 93       	push	r30
    3082:	ff 93       	push	r31
//= RECEPTION ENGINE (ISR BASED)
//==================================

void inline uart_receive(USART_t* port){
	//keep receiving until data register is empty or incoming queue is full
	while (((port->STATUS & _BV(7)) == B8(10000000)) && (uart_icount(port) < MAX_IBUFFER_LEN)){		
    3084:	c0 ea       	ldi	r28, 0xA0	; 160
    3086:	d8 e0       	ldi	r29, 0x08	; 8
	uart_itail[idx] = 0;
}

inline uint16_t uart_icount(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_ihead[idx] >= uart_itail[idx]){	
    3088:	eb ec       	ldi	r30, 0xCB	; 203
    308a:	fe e3       	ldi	r31, 0x3E	; 62
    308c:	4f eb       	ldi	r20, 0xBF	; 191
    308e:	56 e2       	ldi	r21, 0x26	; 38
    3090:	13 c0       	rjmp	.+38     	; 0x30b8 <__vector_25+0x66>
//==================================

void inline uart_receive(USART_t* port){
	//keep receiving until data register is empty or incoming queue is full
	while (((port->STATUS & _BV(7)) == B8(10000000)) && (uart_icount(port) < MAX_IBUFFER_LEN)){		
		uart_ienqueue(port, port->DATA);
    3092:	88 81       	ld	r24, Y
	}
}

inline void uart_ienqueue(USART_t* port, uint8_t datain){
	uint8_t idx = port_map(port);
	uart_ibuffer[idx][uart_ihead[idx]] = datain;
    3094:	a0 81       	ld	r26, Z
    3096:	b1 81       	ldd	r27, Z+1	; 0x01
    3098:	ad 53       	subi	r26, 0x3D	; 61
    309a:	b5 4d       	sbci	r27, 0xD5	; 213
    309c:	8c 93       	st	X, r24
	uart_ihead[idx]++;
    309e:	80 81       	ld	r24, Z
    30a0:	91 81       	ldd	r25, Z+1	; 0x01
    30a2:	01 96       	adiw	r24, 0x01	; 1
    30a4:	80 83       	st	Z, r24
    30a6:	91 83       	std	Z+1, r25	; 0x01
	if (uart_ihead[idx] >= MAX_IBUFFER_LEN){
    30a8:	80 81       	ld	r24, Z
    30aa:	91 81       	ldd	r25, Z+1	; 0x01
    30ac:	24 e0       	ldi	r18, 0x04	; 4
    30ae:	80 30       	cpi	r24, 0x00	; 0
    30b0:	92 07       	cpc	r25, r18
    30b2:	10 f0       	brcs	.+4      	; 0x30b8 <__vector_25+0x66>
		uart_ihead[idx] = 0;
    30b4:	10 82       	st	Z, r1
    30b6:	11 82       	std	Z+1, r1	; 0x01
//= RECEPTION ENGINE (ISR BASED)
//==================================

void inline uart_receive(USART_t* port){
	//keep receiving until data register is empty or incoming queue is full
	while (((port->STATUS & _BV(7)) == B8(10000000)) && (uart_icount(port) < MAX_IBUFFER_LEN)){		
    30b8:	89 81       	ldd	r24, Y+1	; 0x01
    30ba:	88 23       	and	r24, r24
    30bc:	fc f4       	brge	.+62     	; 0x30fc <__vector_25+0xaa>
	uart_itail[idx] = 0;
}

inline uint16_t uart_icount(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_ihead[idx] >= uart_itail[idx]){	
    30be:	80 81       	ld	r24, Z
    30c0:	91 81       	ldd	r25, Z+1	; 0x01
    30c2:	da 01       	movw	r26, r20
    30c4:	2d 91       	ld	r18, X+
    30c6:	3c 91       	ld	r19, X
    30c8:	11 97       	sbiw	r26, 0x01	; 1
    30ca:	82 17       	cp	r24, r18
    30cc:	93 07       	cpc	r25, r19
    30ce:	40 f0       	brcs	.+16     	; 0x30e0 <__vector_25+0x8e>
		return (uart_ihead[idx] - uart_itail[idx]);
    30d0:	80 81       	ld	r24, Z
    30d2:	91 81       	ldd	r25, Z+1	; 0x01
    30d4:	2d 91       	ld	r18, X+
    30d6:	3c 91       	ld	r19, X
    30d8:	11 97       	sbiw	r26, 0x01	; 1
    30da:	82 1b       	sub	r24, r18
    30dc:	93 0b       	sbc	r25, r19
    30de:	0a c0       	rjmp	.+20     	; 0x30f4 <__vector_25+0xa2>
	}
	else {
		return ((MAX_IBUFFER_LEN-uart_itail[idx])+uart_ihead[idx]);
    30e0:	80 81       	ld	r24, Z
    30e2:	91 81       	ldd	r25, Z+1	; 0x01
    30e4:	da 01       	movw	r26, r20
    30e6:	2d 91       	ld	r18, X+
    30e8:	3c 91       	ld	r19, X
    30ea:	11 97       	sbiw	r26, 0x01	; 1
    30ec:	80 50       	subi	r24, 0x00	; 0
    30ee:	9c 4f       	sbci	r25, 0xFC	; 252
    30f0:	82 1b       	sub	r24, r18
    30f2:	93 0b       	sbc	r25, r19
//= RECEPTION ENGINE (ISR BASED)
//==================================

void inline uart_receive(USART_t* port){
	//keep receiving until data register is empty or incoming queue is full
	while (((port->STATUS & _BV(7)) == B8(10000000)) && (uart_icount(port) < MAX_IBUFFER_LEN)){		
    30f4:	b4 e0       	ldi	r27, 0x04	; 4
    30f6:	80 30       	cpi	r24, 0x00	; 0
    30f8:	9b 07       	cpc	r25, r27
    30fa:	58 f2       	brcs	.-106    	; 0x3092 <__vector_25+0x40>
//************************************************************************
//************************************************************************

//Must correspond to definitions in uart.h
ISR(USARTC0_DRE_vect) {uart_transmit(&uctrl);}//TX Interrupt
ISR(USARTC0_RXC_vect) {uart_receive(&uctrl);} //RX Interrupt
    30fc:	ff 91       	pop	r31
    30fe:	ef 91       	pop	r30
    3100:	df 91       	pop	r29
    3102:	cf 91       	pop	r28
    3104:	bf 91       	pop	r27
    3106:	af 91       	pop	r26
    3108:	9f 91       	pop	r25
    310a:	8f 91       	pop	r24
    310c:	5f 91       	pop	r21
    310e:	4f 91       	pop	r20
    3110:	3f 91       	pop	r19
    3112:	2f 91       	pop	r18
    3114:	0f 90       	pop	r0
    3116:	0b be       	out	0x3b, r0	; 59
    3118:	0f 90       	pop	r0
    311a:	0a be       	out	0x3a, r0	; 58
    311c:	0f 90       	pop	r0
    311e:	09 be       	out	0x39, r0	; 57
    3120:	0f 90       	pop	r0
    3122:	08 be       	out	0x38, r0	; 56
    3124:	0f 90       	pop	r0
    3126:	0f be       	out	0x3f, r0	; 63
    3128:	0f 90       	pop	r0
    312a:	1f 90       	pop	r1
    312c:	18 95       	reti

0000312e <__vector_28>:
ISR(USARTC1_DRE_vect) {uart_transmit(&udata);}//TX Interrupt
ISR(USARTC1_RXC_vect) {uart_receive(&udata);} //RX Interrupt
    312e:	1f 92       	push	r1
    3130:	0f 92       	push	r0
    3132:	0f b6       	in	r0, 0x3f	; 63
    3134:	0f 92       	push	r0
    3136:	08 b6       	in	r0, 0x38	; 56
    3138:	0f 92       	push	r0
    313a:	09 b6       	in	r0, 0x39	; 57
    313c:	0f 92       	push	r0
    313e:	0a b6       	in	r0, 0x3a	; 58
    3140:	0f 92       	push	r0
    3142:	0b b6       	in	r0, 0x3b	; 59
    3144:	0f 92       	push	r0
    3146:	11 24       	eor	r1, r1
    3148:	2f 93       	push	r18
    314a:	3f 93       	push	r19
    314c:	4f 93       	push	r20
    314e:	5f 93       	push	r21
    3150:	8f 93       	push	r24
    3152:	9f 93       	push	r25
    3154:	af 93       	push	r26
    3156:	bf 93       	push	r27
    3158:	cf 93       	push	r28
    315a:	df 93       	push	r29
    315c:	ef 93       	push	r30
    315e:	ff 93       	push	r31
//= RECEPTION ENGINE (ISR BASED)
//==================================

void inline uart_receive(USART_t* port){
	//keep receiving until data register is empty or incoming queue is full
	while (((port->STATUS & _BV(7)) == B8(10000000)) && (uart_icount(port) < MAX_IBUFFER_LEN)){		
    3160:	c0 eb       	ldi	r28, 0xB0	; 176
    3162:	d8 e0       	ldi	r29, 0x08	; 8
	uart_itail[idx] = 0;
}

inline uint16_t uart_icount(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_ihead[idx] >= uart_itail[idx]){	
    3164:	ed ec       	ldi	r30, 0xCD	; 205
    3166:	fe e3       	ldi	r31, 0x3E	; 62
    3168:	41 ec       	ldi	r20, 0xC1	; 193
    316a:	56 e2       	ldi	r21, 0x26	; 38
    316c:	13 c0       	rjmp	.+38     	; 0x3194 <__vector_28+0x66>
//==================================

void inline uart_receive(USART_t* port){
	//keep receiving until data register is empty or incoming queue is full
	while (((port->STATUS & _BV(7)) == B8(10000000)) && (uart_icount(port) < MAX_IBUFFER_LEN)){		
		uart_ienqueue(port, port->DATA);
    316e:	88 81       	ld	r24, Y
	}
}

inline void uart_ienqueue(USART_t* port, uint8_t datain){
	uint8_t idx = port_map(port);
	uart_ibuffer[idx][uart_ihead[idx]] = datain;
    3170:	a0 81       	ld	r26, Z
    3172:	b1 81       	ldd	r27, Z+1	; 0x01
    3174:	ad 53       	subi	r26, 0x3D	; 61
    3176:	b1 4d       	sbci	r27, 0xD1	; 209
    3178:	8c 93       	st	X, r24
	uart_ihead[idx]++;
    317a:	80 81       	ld	r24, Z
    317c:	91 81       	ldd	r25, Z+1	; 0x01
    317e:	01 96       	adiw	r24, 0x01	; 1
    3180:	80 83       	st	Z, r24
    3182:	91 83       	std	Z+1, r25	; 0x01
	if (uart_ihead[idx] >= MAX_IBUFFER_LEN){
    3184:	80 81       	ld	r24, Z
    3186:	91 81       	ldd	r25, Z+1	; 0x01
    3188:	24 e0       	ldi	r18, 0x04	; 4
    318a:	80 30       	cpi	r24, 0x00	; 0
    318c:	92 07       	cpc	r25, r18
    318e:	10 f0       	brcs	.+4      	; 0x3194 <__vector_28+0x66>
		uart_ihead[idx] = 0;
    3190:	10 82       	st	Z, r1
    3192:	11 82       	std	Z+1, r1	; 0x01
//= RECEPTION ENGINE (ISR BASED)
//==================================

void inline uart_receive(USART_t* port){
	//keep receiving until data register is empty or incoming queue is full
	while (((port->STATUS & _BV(7)) == B8(10000000)) && (uart_icount(port) < MAX_IBUFFER_LEN)){		
    3194:	89 81       	ldd	r24, Y+1	; 0x01
    3196:	88 23       	and	r24, r24
    3198:	fc f4       	brge	.+62     	; 0x31d8 <__vector_28+0xaa>
	uart_itail[idx] = 0;
}

inline uint16_t uart_icount(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_ihead[idx] >= uart_itail[idx]){	
    319a:	80 81       	ld	r24, Z
    319c:	91 81       	ldd	r25, Z+1	; 0x01
    319e:	da 01       	movw	r26, r20
    31a0:	2d 91       	ld	r18, X+
    31a2:	3c 91       	ld	r19, X
    31a4:	11 97       	sbiw	r26, 0x01	; 1
    31a6:	82 17       	cp	r24, r18
    31a8:	93 07       	cpc	r25, r19
    31aa:	40 f0       	brcs	.+16     	; 0x31bc <__vector_28+0x8e>
		return (uart_ihead[idx] - uart_itail[idx]);
    31ac:	80 81       	ld	r24, Z
    31ae:	91 81       	ldd	r25, Z+1	; 0x01
    31b0:	2d 91       	ld	r18, X+
    31b2:	3c 91       	ld	r19, X
    31b4:	11 97       	sbiw	r26, 0x01	; 1
    31b6:	82 1b       	sub	r24, r18
    31b8:	93 0b       	sbc	r25, r19
    31ba:	0a c0       	rjmp	.+20     	; 0x31d0 <__vector_28+0xa2>
	}
	else {
		return ((MAX_IBUFFER_LEN-uart_itail[idx])+uart_ihead[idx]);
    31bc:	80 81       	ld	r24, Z
    31be:	91 81       	ldd	r25, Z+1	; 0x01
    31c0:	da 01       	movw	r26, r20
    31c2:	2d 91       	ld	r18, X+
    31c4:	3c 91       	ld	r19, X
    31c6:	11 97       	sbiw	r26, 0x01	; 1
    31c8:	80 50       	subi	r24, 0x00	; 0
    31ca:	9c 4f       	sbci	r25, 0xFC	; 252
    31cc:	82 1b       	sub	r24, r18
    31ce:	93 0b       	sbc	r25, r19
//= RECEPTION ENGINE (ISR BASED)
//==================================

void inline uart_receive(USART_t* port){
	//keep receiving until data register is empty or incoming queue is full
	while (((port->STATUS & _BV(7)) == B8(10000000)) && (uart_icount(port) < MAX_IBUFFER_LEN)){		
    31d0:	b4 e0       	ldi	r27, 0x04	; 4
    31d2:	80 30       	cpi	r24, 0x00	; 0
    31d4:	9b 07       	cpc	r25, r27
    31d6:	58 f2       	brcs	.-106    	; 0x316e <__vector_28+0x40>

//Must correspond to definitions in uart.h
ISR(USARTC0_DRE_vect) {uart_transmit(&uctrl);}//TX Interrupt
ISR(USARTC0_RXC_vect) {uart_receive(&uctrl);} //RX Interrupt
ISR(USARTC1_DRE_vect) {uart_transmit(&udata);}//TX Interrupt
ISR(USARTC1_RXC_vect) {uart_receive(&udata);} //RX Interrupt
    31d8:	ff 91       	pop	r31
    31da:	ef 91       	pop	r30
    31dc:	df 91       	pop	r29
    31de:	cf 91       	pop	r28
    31e0:	bf 91       	pop	r27
    31e2:	af 91       	pop	r26
    31e4:	9f 91       	pop	r25
    31e6:	8f 91       	pop	r24
    31e8:	5f 91       	pop	r21
    31ea:	4f 91       	pop	r20
    31ec:	3f 91       	pop	r19
    31ee:	2f 91       	pop	r18
    31f0:	0f 90       	pop	r0
    31f2:	0b be       	out	0x3b, r0	; 59
    31f4:	0f 90       	pop	r0
    31f6:	0a be       	out	0x3a, r0	; 58
    31f8:	0f 90       	pop	r0
    31fa:	09 be       	out	0x39, r0	; 57
    31fc:	0f 90       	pop	r0
    31fe:	08 be       	out	0x38, r0	; 56
    3200:	0f 90       	pop	r0
    3202:	0f be       	out	0x3f, r0	; 63
    3204:	0f 90       	pop	r0
    3206:	1f 90       	pop	r1
    3208:	18 95       	reti

0000320a <uart_rxbuffer_enable>:
		uart_rxbuffer_enable(port);
		uart_txbuffer_enable(port);
}

//Enable Receive Complete (high priority) -- so incoming is always handled first
void uart_rxbuffer_enable(USART_t* port){
    320a:	fc 01       	movw	r30, r24
	port->CTRLA = (port->CTRLA | B8(00110000));	//Set the Data Register Empty Interrupt to Medium Priority (timer needs to be higher!)
    320c:	83 81       	ldd	r24, Z+3	; 0x03
    320e:	80 63       	ori	r24, 0x30	; 48
    3210:	83 83       	std	Z+3, r24	; 0x03
}
    3212:	08 95       	ret

00003214 <uart_rxbuffer_disable>:

void uart_rxbuffer_disable(USART_t* port){
    3214:	fc 01       	movw	r30, r24
	port->CTRLA = (port->CTRLA & B8(11001111));	//Disable the Data Register Empty Interrupt
    3216:	83 81       	ldd	r24, Z+3	; 0x03
    3218:	8f 7c       	andi	r24, 0xCF	; 207
    321a:	83 83       	std	Z+3, r24	; 0x03
}
    321c:	08 95       	ret

0000321e <uart_txbuffer_enable>:

//Enable Transmit Ready (med priority) 
void uart_txbuffer_enable(USART_t* port){
    321e:	fc 01       	movw	r30, r24
	port->CTRLA = (port->CTRLA | B8(00000010));	//Set the Data Register Empty Interrupt to Medium Priority (timer needs to be higher!)
    3220:	83 81       	ldd	r24, Z+3	; 0x03
    3222:	82 60       	ori	r24, 0x02	; 2
    3224:	83 83       	std	Z+3, r24	; 0x03
}
    3226:	08 95       	ret

00003228 <uart_txbuffer_disable>:

void uart_txbuffer_disable(USART_t* port){
    3228:	fc 01       	movw	r30, r24
	port->CTRLA = (port->CTRLA & B8(11111100));	//Disable the Data Register Empty Interrupt
    322a:	83 81       	ldd	r24, Z+3	; 0x03
    322c:	8c 7f       	andi	r24, 0xFC	; 252
    322e:	83 83       	std	Z+3, r24	; 0x03
}
    3230:	08 95       	ret

00003232 <__vector_29>:
//************************************************************************

//Must correspond to definitions in uart.h
ISR(USARTC0_DRE_vect) {uart_transmit(&uctrl);}//TX Interrupt
ISR(USARTC0_RXC_vect) {uart_receive(&uctrl);} //RX Interrupt
ISR(USARTC1_DRE_vect) {uart_transmit(&udata);}//TX Interrupt
    3232:	1f 92       	push	r1
    3234:	0f 92       	push	r0
    3236:	0f b6       	in	r0, 0x3f	; 63
    3238:	0f 92       	push	r0
    323a:	08 b6       	in	r0, 0x38	; 56
    323c:	0f 92       	push	r0
    323e:	09 b6       	in	r0, 0x39	; 57
    3240:	0f 92       	push	r0
    3242:	0a b6       	in	r0, 0x3a	; 58
    3244:	0f 92       	push	r0
    3246:	0b b6       	in	r0, 0x3b	; 59
    3248:	0f 92       	push	r0
    324a:	11 24       	eor	r1, r1
    324c:	2f 93       	push	r18
    324e:	3f 93       	push	r19
    3250:	4f 93       	push	r20
    3252:	5f 93       	push	r21
    3254:	6f 93       	push	r22
    3256:	7f 93       	push	r23
    3258:	8f 93       	push	r24
    325a:	9f 93       	push	r25
    325c:	af 93       	push	r26
    325e:	bf 93       	push	r27
    3260:	cf 93       	push	r28
    3262:	df 93       	push	r29
    3264:	ef 93       	push	r30
    3266:	ff 93       	push	r31
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    3268:	e0 eb       	ldi	r30, 0xB0	; 176
    326a:	f8 e0       	ldi	r31, 0x08	; 8
    326c:	81 81       	ldd	r24, Z+1	; 0x01
    326e:	85 fd       	sbrc	r24, 5
    3270:	1a c0       	rjmp	.+52     	; 0x32a6 <__vector_29+0x74>
    3272:	3a c0       	rjmp	.+116    	; 0x32e8 <__vector_29+0xb6>
}

inline uint8_t uart_dequeue(USART_t* port){
	uint8_t idx = port_map(port);
	uint16_t oldtail;
	oldtail = uart_tail[idx];
    3274:	20 81       	ld	r18, Z
    3276:	31 81       	ldd	r19, Z+1	; 0x01
	uart_tail[idx]++;
    3278:	80 81       	ld	r24, Z
    327a:	91 81       	ldd	r25, Z+1	; 0x01
    327c:	01 96       	adiw	r24, 0x01	; 1
    327e:	80 83       	st	Z, r24
    3280:	91 83       	std	Z+1, r25	; 0x01
	if (uart_tail[idx] >= MAX_BUFFER_LEN){
    3282:	80 81       	ld	r24, Z
    3284:	91 81       	ldd	r25, Z+1	; 0x01
    3286:	44 e0       	ldi	r20, 0x04	; 4
    3288:	80 30       	cpi	r24, 0x00	; 0
    328a:	94 07       	cpc	r25, r20
    328c:	10 f0       	brcs	.+4      	; 0x3292 <__vector_29+0x60>
		uart_tail[idx] = 0;
    328e:	10 82       	st	Z, r1
    3290:	11 82       	std	Z+1, r1	; 0x01
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    3292:	27 53       	subi	r18, 0x37	; 55
    3294:	35 4c       	sbci	r19, 0xC5	; 197
    3296:	e9 01       	movw	r28, r18
    3298:	88 81       	ld	r24, Y
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
    329a:	eb 01       	movw	r28, r22
    329c:	88 83       	st	Y, r24
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    329e:	89 81       	ldd	r24, Y+1	; 0x01
    32a0:	85 fd       	sbrc	r24, 5
    32a2:	07 c0       	rjmp	.+14     	; 0x32b2 <__vector_29+0x80>
    32a4:	21 c0       	rjmp	.+66     	; 0x32e8 <__vector_29+0xb6>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    32a6:	a7 ec       	ldi	r26, 0xC7	; 199
    32a8:	b2 e3       	ldi	r27, 0x32	; 50
    32aa:	e3 ed       	ldi	r30, 0xD3	; 211
    32ac:	fe e3       	ldi	r31, 0x3E	; 62
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
    32ae:	60 eb       	ldi	r22, 0xB0	; 176
    32b0:	78 e0       	ldi	r23, 0x08	; 8
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    32b2:	8d 91       	ld	r24, X+
    32b4:	9c 91       	ld	r25, X
    32b6:	11 97       	sbiw	r26, 0x01	; 1
    32b8:	20 81       	ld	r18, Z
    32ba:	31 81       	ldd	r19, Z+1	; 0x01
    32bc:	82 17       	cp	r24, r18
    32be:	93 07       	cpc	r25, r19
    32c0:	40 f0       	brcs	.+16     	; 0x32d2 <__vector_29+0xa0>
		return (uart_head[idx] - uart_tail[idx]);
    32c2:	8d 91       	ld	r24, X+
    32c4:	9c 91       	ld	r25, X
    32c6:	11 97       	sbiw	r26, 0x01	; 1
    32c8:	20 81       	ld	r18, Z
    32ca:	31 81       	ldd	r19, Z+1	; 0x01
    32cc:	82 1b       	sub	r24, r18
    32ce:	93 0b       	sbc	r25, r19
    32d0:	09 c0       	rjmp	.+18     	; 0x32e4 <__vector_29+0xb2>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    32d2:	8d 91       	ld	r24, X+
    32d4:	9c 91       	ld	r25, X
    32d6:	11 97       	sbiw	r26, 0x01	; 1
    32d8:	20 81       	ld	r18, Z
    32da:	31 81       	ldd	r19, Z+1	; 0x01
    32dc:	80 50       	subi	r24, 0x00	; 0
    32de:	9c 4f       	sbci	r25, 0xFC	; 252
    32e0:	82 1b       	sub	r24, r18
    32e2:	93 0b       	sbc	r25, r19
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    32e4:	00 97       	sbiw	r24, 0x00	; 0
    32e6:	31 f6       	brne	.-116    	; 0x3274 <__vector_29+0x42>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    32e8:	20 91 c7 32 	lds	r18, 0x32C7
    32ec:	30 91 c8 32 	lds	r19, 0x32C8
    32f0:	80 91 d3 3e 	lds	r24, 0x3ED3
    32f4:	90 91 d4 3e 	lds	r25, 0x3ED4
    32f8:	28 17       	cp	r18, r24
    32fa:	39 07       	cpc	r19, r25
    32fc:	58 f0       	brcs	.+22     	; 0x3314 <__vector_29+0xe2>
		return (uart_head[idx] - uart_tail[idx]);
    32fe:	80 91 c7 32 	lds	r24, 0x32C7
    3302:	90 91 c8 32 	lds	r25, 0x32C8
    3306:	20 91 d3 3e 	lds	r18, 0x3ED3
    330a:	30 91 d4 3e 	lds	r19, 0x3ED4
    330e:	82 1b       	sub	r24, r18
    3310:	93 0b       	sbc	r25, r19
    3312:	0c c0       	rjmp	.+24     	; 0x332c <__vector_29+0xfa>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    3314:	80 91 c7 32 	lds	r24, 0x32C7
    3318:	90 91 c8 32 	lds	r25, 0x32C8
    331c:	20 91 d3 3e 	lds	r18, 0x3ED3
    3320:	30 91 d4 3e 	lds	r19, 0x3ED4
    3324:	80 50       	subi	r24, 0x00	; 0
    3326:	9c 4f       	sbci	r25, 0xFC	; 252
    3328:	82 1b       	sub	r24, r18
    332a:	93 0b       	sbc	r25, r19
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
	}
	//disable the tx outgoing hardware buffer ready interrupt if we have nothing more to put in it.
	if(uart_count(port)>0) uart_txbuffer_enable(port);
    332c:	00 97       	sbiw	r24, 0x00	; 0
    332e:	29 f0       	breq	.+10     	; 0x333a <__vector_29+0x108>
    3330:	80 eb       	ldi	r24, 0xB0	; 176
    3332:	98 e0       	ldi	r25, 0x08	; 8
    3334:	0e 94 0f 19 	call	0x321e	; 0x321e <uart_txbuffer_enable>
    3338:	04 c0       	rjmp	.+8      	; 0x3342 <__vector_29+0x110>
	else uart_txbuffer_disable(port);
    333a:	80 eb       	ldi	r24, 0xB0	; 176
    333c:	98 e0       	ldi	r25, 0x08	; 8
    333e:	0e 94 14 19 	call	0x3228	; 0x3228 <uart_txbuffer_disable>
//************************************************************************

//Must correspond to definitions in uart.h
ISR(USARTC0_DRE_vect) {uart_transmit(&uctrl);}//TX Interrupt
ISR(USARTC0_RXC_vect) {uart_receive(&uctrl);} //RX Interrupt
ISR(USARTC1_DRE_vect) {uart_transmit(&udata);}//TX Interrupt
    3342:	ff 91       	pop	r31
    3344:	ef 91       	pop	r30
    3346:	df 91       	pop	r29
    3348:	cf 91       	pop	r28
    334a:	bf 91       	pop	r27
    334c:	af 91       	pop	r26
    334e:	9f 91       	pop	r25
    3350:	8f 91       	pop	r24
    3352:	7f 91       	pop	r23
    3354:	6f 91       	pop	r22
    3356:	5f 91       	pop	r21
    3358:	4f 91       	pop	r20
    335a:	3f 91       	pop	r19
    335c:	2f 91       	pop	r18
    335e:	0f 90       	pop	r0
    3360:	0b be       	out	0x3b, r0	; 59
    3362:	0f 90       	pop	r0
    3364:	0a be       	out	0x3a, r0	; 58
    3366:	0f 90       	pop	r0
    3368:	09 be       	out	0x39, r0	; 57
    336a:	0f 90       	pop	r0
    336c:	08 be       	out	0x38, r0	; 56
    336e:	0f 90       	pop	r0
    3370:	0f be       	out	0x3f, r0	; 63
    3372:	0f 90       	pop	r0
    3374:	1f 90       	pop	r1
    3376:	18 95       	reti

00003378 <__vector_26>:
//** [PORT SPECIFIC CODE]
//************************************************************************
//************************************************************************

//Must correspond to definitions in uart.h
ISR(USARTC0_DRE_vect) {uart_transmit(&uctrl);}//TX Interrupt
    3378:	1f 92       	push	r1
    337a:	0f 92       	push	r0
    337c:	0f b6       	in	r0, 0x3f	; 63
    337e:	0f 92       	push	r0
    3380:	08 b6       	in	r0, 0x38	; 56
    3382:	0f 92       	push	r0
    3384:	09 b6       	in	r0, 0x39	; 57
    3386:	0f 92       	push	r0
    3388:	0a b6       	in	r0, 0x3a	; 58
    338a:	0f 92       	push	r0
    338c:	0b b6       	in	r0, 0x3b	; 59
    338e:	0f 92       	push	r0
    3390:	11 24       	eor	r1, r1
    3392:	2f 93       	push	r18
    3394:	3f 93       	push	r19
    3396:	4f 93       	push	r20
    3398:	5f 93       	push	r21
    339a:	6f 93       	push	r22
    339c:	7f 93       	push	r23
    339e:	8f 93       	push	r24
    33a0:	9f 93       	push	r25
    33a2:	af 93       	push	r26
    33a4:	bf 93       	push	r27
    33a6:	cf 93       	push	r28
    33a8:	df 93       	push	r29
    33aa:	ef 93       	push	r30
    33ac:	ff 93       	push	r31
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    33ae:	e0 ea       	ldi	r30, 0xA0	; 160
    33b0:	f8 e0       	ldi	r31, 0x08	; 8
    33b2:	81 81       	ldd	r24, Z+1	; 0x01
    33b4:	85 fd       	sbrc	r24, 5
    33b6:	1a c0       	rjmp	.+52     	; 0x33ec <__vector_26+0x74>
    33b8:	3a c0       	rjmp	.+116    	; 0x342e <__vector_26+0xb6>
}

inline uint8_t uart_dequeue(USART_t* port){
	uint8_t idx = port_map(port);
	uint16_t oldtail;
	oldtail = uart_tail[idx];
    33ba:	20 81       	ld	r18, Z
    33bc:	31 81       	ldd	r19, Z+1	; 0x01
	uart_tail[idx]++;
    33be:	80 81       	ld	r24, Z
    33c0:	91 81       	ldd	r25, Z+1	; 0x01
    33c2:	01 96       	adiw	r24, 0x01	; 1
    33c4:	80 83       	st	Z, r24
    33c6:	91 83       	std	Z+1, r25	; 0x01
	if (uart_tail[idx] >= MAX_BUFFER_LEN){
    33c8:	80 81       	ld	r24, Z
    33ca:	91 81       	ldd	r25, Z+1	; 0x01
    33cc:	44 e0       	ldi	r20, 0x04	; 4
    33ce:	80 30       	cpi	r24, 0x00	; 0
    33d0:	94 07       	cpc	r25, r20
    33d2:	10 f0       	brcs	.+4      	; 0x33d8 <__vector_26+0x60>
		uart_tail[idx] = 0;
    33d4:	10 82       	st	Z, r1
    33d6:	11 82       	std	Z+1, r1	; 0x01
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    33d8:	27 53       	subi	r18, 0x37	; 55
    33da:	39 4c       	sbci	r19, 0xC9	; 201
    33dc:	e9 01       	movw	r28, r18
    33de:	88 81       	ld	r24, Y
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
    33e0:	eb 01       	movw	r28, r22
    33e2:	88 83       	st	Y, r24
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    33e4:	89 81       	ldd	r24, Y+1	; 0x01
    33e6:	85 fd       	sbrc	r24, 5
    33e8:	07 c0       	rjmp	.+14     	; 0x33f8 <__vector_26+0x80>
    33ea:	21 c0       	rjmp	.+66     	; 0x342e <__vector_26+0xb6>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    33ec:	a5 ec       	ldi	r26, 0xC5	; 197
    33ee:	b2 e3       	ldi	r27, 0x32	; 50
    33f0:	e1 ed       	ldi	r30, 0xD1	; 209
    33f2:	fe e3       	ldi	r31, 0x3E	; 62
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
    33f4:	60 ea       	ldi	r22, 0xA0	; 160
    33f6:	78 e0       	ldi	r23, 0x08	; 8
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    33f8:	8d 91       	ld	r24, X+
    33fa:	9c 91       	ld	r25, X
    33fc:	11 97       	sbiw	r26, 0x01	; 1
    33fe:	20 81       	ld	r18, Z
    3400:	31 81       	ldd	r19, Z+1	; 0x01
    3402:	82 17       	cp	r24, r18
    3404:	93 07       	cpc	r25, r19
    3406:	40 f0       	brcs	.+16     	; 0x3418 <__vector_26+0xa0>
		return (uart_head[idx] - uart_tail[idx]);
    3408:	8d 91       	ld	r24, X+
    340a:	9c 91       	ld	r25, X
    340c:	11 97       	sbiw	r26, 0x01	; 1
    340e:	20 81       	ld	r18, Z
    3410:	31 81       	ldd	r19, Z+1	; 0x01
    3412:	82 1b       	sub	r24, r18
    3414:	93 0b       	sbc	r25, r19
    3416:	09 c0       	rjmp	.+18     	; 0x342a <__vector_26+0xb2>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    3418:	8d 91       	ld	r24, X+
    341a:	9c 91       	ld	r25, X
    341c:	11 97       	sbiw	r26, 0x01	; 1
    341e:	20 81       	ld	r18, Z
    3420:	31 81       	ldd	r19, Z+1	; 0x01
    3422:	80 50       	subi	r24, 0x00	; 0
    3424:	9c 4f       	sbci	r25, 0xFC	; 252
    3426:	82 1b       	sub	r24, r18
    3428:	93 0b       	sbc	r25, r19
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    342a:	00 97       	sbiw	r24, 0x00	; 0
    342c:	31 f6       	brne	.-116    	; 0x33ba <__vector_26+0x42>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    342e:	20 91 c5 32 	lds	r18, 0x32C5
    3432:	30 91 c6 32 	lds	r19, 0x32C6
    3436:	80 91 d1 3e 	lds	r24, 0x3ED1
    343a:	90 91 d2 3e 	lds	r25, 0x3ED2
    343e:	28 17       	cp	r18, r24
    3440:	39 07       	cpc	r19, r25
    3442:	58 f0       	brcs	.+22     	; 0x345a <__vector_26+0xe2>
		return (uart_head[idx] - uart_tail[idx]);
    3444:	80 91 c5 32 	lds	r24, 0x32C5
    3448:	90 91 c6 32 	lds	r25, 0x32C6
    344c:	20 91 d1 3e 	lds	r18, 0x3ED1
    3450:	30 91 d2 3e 	lds	r19, 0x3ED2
    3454:	82 1b       	sub	r24, r18
    3456:	93 0b       	sbc	r25, r19
    3458:	0c c0       	rjmp	.+24     	; 0x3472 <__vector_26+0xfa>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    345a:	80 91 c5 32 	lds	r24, 0x32C5
    345e:	90 91 c6 32 	lds	r25, 0x32C6
    3462:	20 91 d1 3e 	lds	r18, 0x3ED1
    3466:	30 91 d2 3e 	lds	r19, 0x3ED2
    346a:	80 50       	subi	r24, 0x00	; 0
    346c:	9c 4f       	sbci	r25, 0xFC	; 252
    346e:	82 1b       	sub	r24, r18
    3470:	93 0b       	sbc	r25, r19
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
	}
	//disable the tx outgoing hardware buffer ready interrupt if we have nothing more to put in it.
	if(uart_count(port)>0) uart_txbuffer_enable(port);
    3472:	00 97       	sbiw	r24, 0x00	; 0
    3474:	29 f0       	breq	.+10     	; 0x3480 <__vector_26+0x108>
    3476:	80 ea       	ldi	r24, 0xA0	; 160
    3478:	98 e0       	ldi	r25, 0x08	; 8
    347a:	0e 94 0f 19 	call	0x321e	; 0x321e <uart_txbuffer_enable>
    347e:	04 c0       	rjmp	.+8      	; 0x3488 <__vector_26+0x110>
	else uart_txbuffer_disable(port);
    3480:	80 ea       	ldi	r24, 0xA0	; 160
    3482:	98 e0       	ldi	r25, 0x08	; 8
    3484:	0e 94 14 19 	call	0x3228	; 0x3228 <uart_txbuffer_disable>
//** [PORT SPECIFIC CODE]
//************************************************************************
//************************************************************************

//Must correspond to definitions in uart.h
ISR(USARTC0_DRE_vect) {uart_transmit(&uctrl);}//TX Interrupt
    3488:	ff 91       	pop	r31
    348a:	ef 91       	pop	r30
    348c:	df 91       	pop	r29
    348e:	cf 91       	pop	r28
    3490:	bf 91       	pop	r27
    3492:	af 91       	pop	r26
    3494:	9f 91       	pop	r25
    3496:	8f 91       	pop	r24
    3498:	7f 91       	pop	r23
    349a:	6f 91       	pop	r22
    349c:	5f 91       	pop	r21
    349e:	4f 91       	pop	r20
    34a0:	3f 91       	pop	r19
    34a2:	2f 91       	pop	r18
    34a4:	0f 90       	pop	r0
    34a6:	0b be       	out	0x3b, r0	; 59
    34a8:	0f 90       	pop	r0
    34aa:	0a be       	out	0x3a, r0	; 58
    34ac:	0f 90       	pop	r0
    34ae:	09 be       	out	0x39, r0	; 57
    34b0:	0f 90       	pop	r0
    34b2:	08 be       	out	0x38, r0	; 56
    34b4:	0f 90       	pop	r0
    34b6:	0f be       	out	0x3f, r0	; 63
    34b8:	0f 90       	pop	r0
    34ba:	1f 90       	pop	r1
    34bc:	18 95       	reti

000034be <uart_transmit>:
//==================================

//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
    34be:	0f 93       	push	r16
    34c0:	1f 93       	push	r17
    34c2:	cf 93       	push	r28
    34c4:	df 93       	push	r29
    34c6:	dc 01       	movw	r26, r24
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    34c8:	11 96       	adiw	r26, 0x01	; 1
    34ca:	8c 91       	ld	r24, X
    34cc:	11 97       	sbiw	r26, 0x01	; 1
    34ce:	85 fd       	sbrc	r24, 5
    34d0:	42 c0       	rjmp	.+132    	; 0x3556 <uart_transmit+0x98>
    34d2:	91 c0       	rjmp	.+290    	; 0x35f6 <uart_transmit+0x138>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    34d4:	2b e0       	ldi	r18, 0x0B	; 11
    34d6:	a0 3b       	cpi	r26, 0xB0	; 176
    34d8:	b2 07       	cpc	r27, r18
    34da:	51 f0       	breq	.+20     	; 0x34f0 <uart_transmit+0x32>
	if (port == &uctrl) {return 1;}
    34dc:	38 e0       	ldi	r19, 0x08	; 8
    34de:	a0 3a       	cpi	r26, 0xA0	; 160
    34e0:	b3 07       	cpc	r27, r19
    34e2:	41 f0       	breq	.+16     	; 0x34f4 <uart_transmit+0x36>
	if (port == &udata) {return 2;}
    34e4:	88 e0       	ldi	r24, 0x08	; 8
    34e6:	a0 3b       	cpi	r26, 0xB0	; 176
    34e8:	b8 07       	cpc	r27, r24
    34ea:	31 f4       	brne	.+12     	; 0x34f8 <uart_transmit+0x3a>
    34ec:	22 e0       	ldi	r18, 0x02	; 2
    34ee:	05 c0       	rjmp	.+10     	; 0x34fa <uart_transmit+0x3c>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    34f0:	20 e0       	ldi	r18, 0x00	; 0
    34f2:	03 c0       	rjmp	.+6      	; 0x34fa <uart_transmit+0x3c>
	if (port == &uctrl) {return 1;}
    34f4:	21 e0       	ldi	r18, 0x01	; 1
    34f6:	01 c0       	rjmp	.+2      	; 0x34fa <uart_transmit+0x3c>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    34f8:	20 e0       	ldi	r18, 0x00	; 0
}

inline uint8_t uart_dequeue(USART_t* port){
	uint8_t idx = port_map(port);
	uint16_t oldtail;
	oldtail = uart_tail[idx];
    34fa:	30 e0       	ldi	r19, 0x00	; 0
    34fc:	c9 01       	movw	r24, r18
    34fe:	88 0f       	add	r24, r24
    3500:	99 1f       	adc	r25, r25
    3502:	fb 01       	movw	r30, r22
    3504:	e8 0f       	add	r30, r24
    3506:	f9 1f       	adc	r31, r25
    3508:	40 81       	ld	r20, Z
    350a:	51 81       	ldd	r21, Z+1	; 0x01
	uart_tail[idx]++;
    350c:	80 81       	ld	r24, Z
    350e:	91 81       	ldd	r25, Z+1	; 0x01
    3510:	01 96       	adiw	r24, 0x01	; 1
    3512:	80 83       	st	Z, r24
    3514:	91 83       	std	Z+1, r25	; 0x01
	if (uart_tail[idx] >= MAX_BUFFER_LEN){
    3516:	80 81       	ld	r24, Z
    3518:	91 81       	ldd	r25, Z+1	; 0x01
    351a:	e4 e0       	ldi	r30, 0x04	; 4
    351c:	80 30       	cpi	r24, 0x00	; 0
    351e:	9e 07       	cpc	r25, r30
    3520:	40 f0       	brcs	.+16     	; 0x3532 <uart_transmit+0x74>
		uart_tail[idx] = 0;
    3522:	c9 01       	movw	r24, r18
    3524:	88 0f       	add	r24, r24
    3526:	99 1f       	adc	r25, r25
    3528:	86 0f       	add	r24, r22
    352a:	97 1f       	adc	r25, r23
    352c:	fc 01       	movw	r30, r24
    352e:	10 82       	st	Z, r1
    3530:	11 82       	std	Z+1, r1	; 0x01
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    3532:	c9 01       	movw	r24, r18
    3534:	98 2f       	mov	r25, r24
    3536:	88 27       	eor	r24, r24
    3538:	99 0f       	add	r25, r25
    353a:	99 0f       	add	r25, r25
    353c:	84 0f       	add	r24, r20
    353e:	95 1f       	adc	r25, r21
    3540:	f8 01       	movw	r30, r16
    3542:	e8 0f       	add	r30, r24
    3544:	f9 1f       	adc	r31, r25
    3546:	80 81       	ld	r24, Z
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
    3548:	8c 93       	st	X, r24
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    354a:	11 96       	adiw	r26, 0x01	; 1
    354c:	8c 91       	ld	r24, X
    354e:	11 97       	sbiw	r26, 0x01	; 1
    3550:	85 fd       	sbrc	r24, 5
    3552:	07 c0       	rjmp	.+14     	; 0x3562 <uart_transmit+0xa4>
    3554:	50 c0       	rjmp	.+160    	; 0x35f6 <uart_transmit+0x138>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    3556:	c3 ec       	ldi	r28, 0xC3	; 195
    3558:	d2 e3       	ldi	r29, 0x32	; 50
    355a:	6f ec       	ldi	r22, 0xCF	; 207
    355c:	7e e3       	ldi	r23, 0x3E	; 62
		uart_tail[idx] = 0;
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    355e:	09 ec       	ldi	r16, 0xC9	; 201
    3560:	12 e3       	ldi	r17, 0x32	; 50
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    3562:	fb e0       	ldi	r31, 0x0B	; 11
    3564:	a0 3b       	cpi	r26, 0xB0	; 176
    3566:	bf 07       	cpc	r27, r31
    3568:	51 f0       	breq	.+20     	; 0x357e <uart_transmit+0xc0>
	if (port == &uctrl) {return 1;}
    356a:	28 e0       	ldi	r18, 0x08	; 8
    356c:	a0 3a       	cpi	r26, 0xA0	; 160
    356e:	b2 07       	cpc	r27, r18
    3570:	41 f0       	breq	.+16     	; 0x3582 <uart_transmit+0xc4>
	if (port == &udata) {return 2;}
    3572:	38 e0       	ldi	r19, 0x08	; 8
    3574:	a0 3b       	cpi	r26, 0xB0	; 176
    3576:	b3 07       	cpc	r27, r19
    3578:	31 f4       	brne	.+12     	; 0x3586 <uart_transmit+0xc8>
    357a:	22 e0       	ldi	r18, 0x02	; 2
    357c:	05 c0       	rjmp	.+10     	; 0x3588 <uart_transmit+0xca>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    357e:	20 e0       	ldi	r18, 0x00	; 0
    3580:	03 c0       	rjmp	.+6      	; 0x3588 <uart_transmit+0xca>
	if (port == &uctrl) {return 1;}
    3582:	21 e0       	ldi	r18, 0x01	; 1
    3584:	01 c0       	rjmp	.+2      	; 0x3588 <uart_transmit+0xca>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    3586:	20 e0       	ldi	r18, 0x00	; 0
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    3588:	30 e0       	ldi	r19, 0x00	; 0
    358a:	c9 01       	movw	r24, r18
    358c:	88 0f       	add	r24, r24
    358e:	99 1f       	adc	r25, r25
    3590:	fe 01       	movw	r30, r28
    3592:	e8 0f       	add	r30, r24
    3594:	f9 1f       	adc	r31, r25
    3596:	40 81       	ld	r20, Z
    3598:	51 81       	ldd	r21, Z+1	; 0x01
    359a:	fb 01       	movw	r30, r22
    359c:	e8 0f       	add	r30, r24
    359e:	f9 1f       	adc	r31, r25
    35a0:	80 81       	ld	r24, Z
    35a2:	91 81       	ldd	r25, Z+1	; 0x01
    35a4:	48 17       	cp	r20, r24
    35a6:	59 07       	cpc	r21, r25
    35a8:	88 f0       	brcs	.+34     	; 0x35cc <uart_transmit+0x10e>
		return (uart_head[idx] - uart_tail[idx]);
    35aa:	22 0f       	add	r18, r18
    35ac:	33 1f       	adc	r19, r19
    35ae:	fe 01       	movw	r30, r28
    35b0:	e2 0f       	add	r30, r18
    35b2:	f3 1f       	adc	r31, r19
    35b4:	40 81       	ld	r20, Z
    35b6:	51 81       	ldd	r21, Z+1	; 0x01
    35b8:	fb 01       	movw	r30, r22
    35ba:	e2 0f       	add	r30, r18
    35bc:	f3 1f       	adc	r31, r19
    35be:	80 81       	ld	r24, Z
    35c0:	91 81       	ldd	r25, Z+1	; 0x01
    35c2:	fa 01       	movw	r30, r20
    35c4:	e8 1b       	sub	r30, r24
    35c6:	f9 0b       	sbc	r31, r25
    35c8:	cf 01       	movw	r24, r30
    35ca:	12 c0       	rjmp	.+36     	; 0x35f0 <uart_transmit+0x132>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    35cc:	c9 01       	movw	r24, r18
    35ce:	88 0f       	add	r24, r24
    35d0:	99 1f       	adc	r25, r25
    35d2:	fe 01       	movw	r30, r28
    35d4:	e8 0f       	add	r30, r24
    35d6:	f9 1f       	adc	r31, r25
    35d8:	40 81       	ld	r20, Z
    35da:	51 81       	ldd	r21, Z+1	; 0x01
    35dc:	fb 01       	movw	r30, r22
    35de:	e8 0f       	add	r30, r24
    35e0:	f9 1f       	adc	r31, r25
    35e2:	20 81       	ld	r18, Z
    35e4:	31 81       	ldd	r19, Z+1	; 0x01
    35e6:	ca 01       	movw	r24, r20
    35e8:	80 50       	subi	r24, 0x00	; 0
    35ea:	9c 4f       	sbci	r25, 0xFC	; 252
    35ec:	82 1b       	sub	r24, r18
    35ee:	93 0b       	sbc	r25, r19
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    35f0:	00 97       	sbiw	r24, 0x00	; 0
    35f2:	09 f0       	breq	.+2      	; 0x35f6 <uart_transmit+0x138>
    35f4:	6f cf       	rjmp	.-290    	; 0x34d4 <uart_transmit+0x16>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    35f6:	fb e0       	ldi	r31, 0x0B	; 11
    35f8:	a0 3b       	cpi	r26, 0xB0	; 176
    35fa:	bf 07       	cpc	r27, r31
    35fc:	51 f0       	breq	.+20     	; 0x3612 <uart_transmit+0x154>
	if (port == &uctrl) {return 1;}
    35fe:	28 e0       	ldi	r18, 0x08	; 8
    3600:	a0 3a       	cpi	r26, 0xA0	; 160
    3602:	b2 07       	cpc	r27, r18
    3604:	41 f0       	breq	.+16     	; 0x3616 <uart_transmit+0x158>
	if (port == &udata) {return 2;}
    3606:	38 e0       	ldi	r19, 0x08	; 8
    3608:	a0 3b       	cpi	r26, 0xB0	; 176
    360a:	b3 07       	cpc	r27, r19
    360c:	31 f4       	brne	.+12     	; 0x361a <uart_transmit+0x15c>
    360e:	22 e0       	ldi	r18, 0x02	; 2
    3610:	05 c0       	rjmp	.+10     	; 0x361c <uart_transmit+0x15e>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    3612:	20 e0       	ldi	r18, 0x00	; 0
    3614:	03 c0       	rjmp	.+6      	; 0x361c <uart_transmit+0x15e>
	if (port == &uctrl) {return 1;}
    3616:	21 e0       	ldi	r18, 0x01	; 1
    3618:	01 c0       	rjmp	.+2      	; 0x361c <uart_transmit+0x15e>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    361a:	20 e0       	ldi	r18, 0x00	; 0
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    361c:	30 e0       	ldi	r19, 0x00	; 0
    361e:	c9 01       	movw	r24, r18
    3620:	88 0f       	add	r24, r24
    3622:	99 1f       	adc	r25, r25
    3624:	fc 01       	movw	r30, r24
    3626:	ed 53       	subi	r30, 0x3D	; 61
    3628:	fd 4c       	sbci	r31, 0xCD	; 205
    362a:	40 81       	ld	r20, Z
    362c:	51 81       	ldd	r21, Z+1	; 0x01
    362e:	81 53       	subi	r24, 0x31	; 49
    3630:	91 4c       	sbci	r25, 0xC1	; 193
    3632:	fc 01       	movw	r30, r24
    3634:	80 81       	ld	r24, Z
    3636:	91 81       	ldd	r25, Z+1	; 0x01
    3638:	48 17       	cp	r20, r24
    363a:	59 07       	cpc	r21, r25
    363c:	78 f0       	brcs	.+30     	; 0x365c <uart_transmit+0x19e>
		return (uart_head[idx] - uart_tail[idx]);
    363e:	22 0f       	add	r18, r18
    3640:	33 1f       	adc	r19, r19
    3642:	f9 01       	movw	r30, r18
    3644:	ed 53       	subi	r30, 0x3D	; 61
    3646:	fd 4c       	sbci	r31, 0xCD	; 205
    3648:	40 81       	ld	r20, Z
    364a:	51 81       	ldd	r21, Z+1	; 0x01
    364c:	21 53       	subi	r18, 0x31	; 49
    364e:	31 4c       	sbci	r19, 0xC1	; 193
    3650:	f9 01       	movw	r30, r18
    3652:	80 81       	ld	r24, Z
    3654:	91 81       	ldd	r25, Z+1	; 0x01
    3656:	48 1b       	sub	r20, r24
    3658:	59 0b       	sbc	r21, r25
    365a:	10 c0       	rjmp	.+32     	; 0x367c <uart_transmit+0x1be>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    365c:	22 0f       	add	r18, r18
    365e:	33 1f       	adc	r19, r19
    3660:	f9 01       	movw	r30, r18
    3662:	ed 53       	subi	r30, 0x3D	; 61
    3664:	fd 4c       	sbci	r31, 0xCD	; 205
    3666:	40 81       	ld	r20, Z
    3668:	51 81       	ldd	r21, Z+1	; 0x01
    366a:	21 53       	subi	r18, 0x31	; 49
    366c:	31 4c       	sbci	r19, 0xC1	; 193
    366e:	f9 01       	movw	r30, r18
    3670:	80 81       	ld	r24, Z
    3672:	91 81       	ldd	r25, Z+1	; 0x01
    3674:	40 50       	subi	r20, 0x00	; 0
    3676:	5c 4f       	sbci	r21, 0xFC	; 252
    3678:	48 1b       	sub	r20, r24
    367a:	59 0b       	sbc	r21, r25
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
	}
	//disable the tx outgoing hardware buffer ready interrupt if we have nothing more to put in it.
	if(uart_count(port)>0) uart_txbuffer_enable(port);
    367c:	41 15       	cp	r20, r1
    367e:	51 05       	cpc	r21, r1
    3680:	21 f0       	breq	.+8      	; 0x368a <uart_transmit+0x1cc>
    3682:	cd 01       	movw	r24, r26
    3684:	0e 94 0f 19 	call	0x321e	; 0x321e <uart_txbuffer_enable>
    3688:	03 c0       	rjmp	.+6      	; 0x3690 <uart_transmit+0x1d2>
	else uart_txbuffer_disable(port);
    368a:	cd 01       	movw	r24, r26
    368c:	0e 94 14 19 	call	0x3228	; 0x3228 <uart_txbuffer_disable>
}
    3690:	df 91       	pop	r29
    3692:	cf 91       	pop	r28
    3694:	1f 91       	pop	r17
    3696:	0f 91       	pop	r16
    3698:	08 95       	ret

0000369a <uart_transmit_lcd>:

void inline uart_transmit_lcd(USART_t* port){
    369a:	3f 92       	push	r3
    369c:	4f 92       	push	r4
    369e:	5f 92       	push	r5
    36a0:	6f 92       	push	r6
    36a2:	7f 92       	push	r7
    36a4:	8f 92       	push	r8
    36a6:	9f 92       	push	r9
    36a8:	af 92       	push	r10
    36aa:	bf 92       	push	r11
    36ac:	cf 92       	push	r12
    36ae:	df 92       	push	r13
    36b0:	ef 92       	push	r14
    36b2:	ff 92       	push	r15
    36b4:	0f 93       	push	r16
    36b6:	1f 93       	push	r17
    36b8:	cf 93       	push	r28
    36ba:	df 93       	push	r29
    36bc:	6c 01       	movw	r12, r24
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0) && (lcd_flow_control == LCD_READY)){
    36be:	fc 01       	movw	r30, r24
    36c0:	81 81       	ldd	r24, Z+1	; 0x01
    36c2:	85 fd       	sbrc	r24, 5
    36c4:	1d c1       	rjmp	.+570    	; 0x3900 <uart_transmit_lcd+0x266>
    36c6:	8f c1       	rjmp	.+798    	; 0x39e6 <uart_transmit_lcd+0x34c>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    36c8:	f0 eb       	ldi	r31, 0xB0	; 176
    36ca:	cf 16       	cp	r12, r31
    36cc:	fb e0       	ldi	r31, 0x0B	; 11
    36ce:	df 06       	cpc	r13, r31
    36d0:	61 f0       	breq	.+24     	; 0x36ea <uart_transmit_lcd+0x50>
	if (port == &uctrl) {return 1;}
    36d2:	20 ea       	ldi	r18, 0xA0	; 160
    36d4:	c2 16       	cp	r12, r18
    36d6:	28 e0       	ldi	r18, 0x08	; 8
    36d8:	d2 06       	cpc	r13, r18
    36da:	49 f0       	breq	.+18     	; 0x36ee <uart_transmit_lcd+0x54>
	if (port == &udata) {return 2;}
    36dc:	30 eb       	ldi	r19, 0xB0	; 176
    36de:	c3 16       	cp	r12, r19
    36e0:	38 e0       	ldi	r19, 0x08	; 8
    36e2:	d3 06       	cpc	r13, r19
    36e4:	31 f4       	brne	.+12     	; 0x36f2 <uart_transmit_lcd+0x58>
    36e6:	22 e0       	ldi	r18, 0x02	; 2
    36e8:	05 c0       	rjmp	.+10     	; 0x36f4 <uart_transmit_lcd+0x5a>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    36ea:	20 e0       	ldi	r18, 0x00	; 0
    36ec:	03 c0       	rjmp	.+6      	; 0x36f4 <uart_transmit_lcd+0x5a>
	if (port == &uctrl) {return 1;}
    36ee:	21 e0       	ldi	r18, 0x01	; 1
    36f0:	01 c0       	rjmp	.+2      	; 0x36f4 <uart_transmit_lcd+0x5a>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    36f2:	20 e0       	ldi	r18, 0x00	; 0
}

inline uint8_t uart_dequeue(USART_t* port){
	uint8_t idx = port_map(port);
	uint16_t oldtail;
	oldtail = uart_tail[idx];
    36f4:	30 e0       	ldi	r19, 0x00	; 0
    36f6:	c9 01       	movw	r24, r18
    36f8:	88 0f       	add	r24, r24
    36fa:	99 1f       	adc	r25, r25
    36fc:	f4 01       	movw	r30, r8
    36fe:	e8 0f       	add	r30, r24
    3700:	f9 1f       	adc	r31, r25
    3702:	40 81       	ld	r20, Z
    3704:	51 81       	ldd	r21, Z+1	; 0x01
	uart_tail[idx]++;
    3706:	80 81       	ld	r24, Z
    3708:	91 81       	ldd	r25, Z+1	; 0x01
    370a:	01 96       	adiw	r24, 0x01	; 1
    370c:	80 83       	st	Z, r24
    370e:	91 83       	std	Z+1, r25	; 0x01
	if (uart_tail[idx] >= MAX_BUFFER_LEN){
    3710:	80 81       	ld	r24, Z
    3712:	91 81       	ldd	r25, Z+1	; 0x01
    3714:	64 e0       	ldi	r22, 0x04	; 4
    3716:	80 30       	cpi	r24, 0x00	; 0
    3718:	96 07       	cpc	r25, r22
    371a:	10 f0       	brcs	.+4      	; 0x3720 <uart_transmit_lcd+0x86>
		uart_tail[idx] = 0;
    371c:	10 82       	st	Z, r1
    371e:	11 82       	std	Z+1, r1	; 0x01
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    3720:	c9 01       	movw	r24, r18
    3722:	98 2f       	mov	r25, r24
    3724:	88 27       	eor	r24, r24
    3726:	99 0f       	add	r25, r25
    3728:	99 0f       	add	r25, r25
    372a:	84 0f       	add	r24, r20
    372c:	95 1f       	adc	r25, r21
    372e:	84 0d       	add	r24, r4
    3730:	95 1d       	adc	r25, r5
    3732:	fc 01       	movw	r30, r24
    3734:	b0 80       	ld	r11, Z
void inline uart_transmit_lcd(USART_t* port){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0) && (lcd_flow_control == LCD_READY)){
		toSend = uart_dequeue(port);
		if (toSend == 0x0D) {lcd_flow_control = LCD_BUSY;}
    3736:	fd e0       	ldi	r31, 0x0D	; 13
    3738:	bf 16       	cp	r11, r31
    373a:	11 f4       	brne	.+4      	; 0x3740 <uart_transmit_lcd+0xa6>
    373c:	30 92 ab 26 	sts	0x26AB, r3
#ifndef UART_DEBUG
	uint8_t idx = port_map(port);
	
	//if (idx==0){uart_enqueue(&uctrl, datain);} //xxx
	
	uart_buffer[idx][uart_head[idx]] = datain;
    3740:	f8 01       	movw	r30, r16
    3742:	80 81       	ld	r24, Z
    3744:	91 81       	ldd	r25, Z+1	; 0x01
    3746:	87 53       	subi	r24, 0x37	; 55
    3748:	95 4c       	sbci	r25, 0xC5	; 197
    374a:	fc 01       	movw	r30, r24
    374c:	a0 82       	st	Z, r10
	uart_head[idx]++;
    374e:	f8 01       	movw	r30, r16
    3750:	80 81       	ld	r24, Z
    3752:	91 81       	ldd	r25, Z+1	; 0x01
    3754:	01 96       	adiw	r24, 0x01	; 1
    3756:	80 83       	st	Z, r24
    3758:	91 83       	std	Z+1, r25	; 0x01
	if (uart_head[idx] >= MAX_BUFFER_LEN){
    375a:	80 81       	ld	r24, Z
    375c:	91 81       	ldd	r25, Z+1	; 0x01
    375e:	f4 e0       	ldi	r31, 0x04	; 4
    3760:	80 30       	cpi	r24, 0x00	; 0
    3762:	9f 07       	cpc	r25, r31
    3764:	18 f0       	brcs	.+6      	; 0x376c <uart_transmit_lcd+0xd2>
		uart_head[idx] = 0;
    3766:	f8 01       	movw	r30, r16
    3768:	10 82       	st	Z, r1
    376a:	11 82       	std	Z+1, r1	; 0x01
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    376c:	f7 01       	movw	r30, r14
    376e:	81 81       	ldd	r24, Z+1	; 0x01
    3770:	85 fd       	sbrc	r24, 5
    3772:	18 c0       	rjmp	.+48     	; 0x37a4 <uart_transmit_lcd+0x10a>
    3774:	31 c0       	rjmp	.+98     	; 0x37d8 <uart_transmit_lcd+0x13e>
}

inline uint8_t uart_dequeue(USART_t* port){
	uint8_t idx = port_map(port);
	uint16_t oldtail;
	oldtail = uart_tail[idx];
    3776:	e8 81       	ld	r30, Y
    3778:	f9 81       	ldd	r31, Y+1	; 0x01
	uart_tail[idx]++;
    377a:	88 81       	ld	r24, Y
    377c:	99 81       	ldd	r25, Y+1	; 0x01
    377e:	01 96       	adiw	r24, 0x01	; 1
    3780:	88 83       	st	Y, r24
    3782:	99 83       	std	Y+1, r25	; 0x01
	if (uart_tail[idx] >= MAX_BUFFER_LEN){
    3784:	88 81       	ld	r24, Y
    3786:	99 81       	ldd	r25, Y+1	; 0x01
    3788:	24 e0       	ldi	r18, 0x04	; 4
    378a:	80 30       	cpi	r24, 0x00	; 0
    378c:	92 07       	cpc	r25, r18
    378e:	10 f0       	brcs	.+4      	; 0x3794 <uart_transmit_lcd+0xfa>
		uart_tail[idx] = 0;
    3790:	18 82       	st	Y, r1
    3792:	19 82       	std	Y+1, r1	; 0x01
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    3794:	e7 53       	subi	r30, 0x37	; 55
    3796:	f5 4c       	sbci	r31, 0xC5	; 197
    3798:	80 81       	ld	r24, Z
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
    379a:	f7 01       	movw	r30, r14
    379c:	80 83       	st	Z, r24
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    379e:	81 81       	ldd	r24, Z+1	; 0x01
    37a0:	85 ff       	sbrs	r24, 5
    37a2:	1a c0       	rjmp	.+52     	; 0x37d8 <uart_transmit_lcd+0x13e>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    37a4:	f8 01       	movw	r30, r16
    37a6:	80 81       	ld	r24, Z
    37a8:	91 81       	ldd	r25, Z+1	; 0x01
    37aa:	28 81       	ld	r18, Y
    37ac:	39 81       	ldd	r19, Y+1	; 0x01
    37ae:	82 17       	cp	r24, r18
    37b0:	93 07       	cpc	r25, r19
    37b2:	38 f0       	brcs	.+14     	; 0x37c2 <uart_transmit_lcd+0x128>
		return (uart_head[idx] - uart_tail[idx]);
    37b4:	80 81       	ld	r24, Z
    37b6:	91 81       	ldd	r25, Z+1	; 0x01
    37b8:	28 81       	ld	r18, Y
    37ba:	39 81       	ldd	r19, Y+1	; 0x01
    37bc:	82 1b       	sub	r24, r18
    37be:	93 0b       	sbc	r25, r19
    37c0:	09 c0       	rjmp	.+18     	; 0x37d4 <uart_transmit_lcd+0x13a>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    37c2:	f8 01       	movw	r30, r16
    37c4:	80 81       	ld	r24, Z
    37c6:	91 81       	ldd	r25, Z+1	; 0x01
    37c8:	28 81       	ld	r18, Y
    37ca:	39 81       	ldd	r19, Y+1	; 0x01
    37cc:	80 50       	subi	r24, 0x00	; 0
    37ce:	9c 4f       	sbci	r25, 0xFC	; 252
    37d0:	82 1b       	sub	r24, r18
    37d2:	93 0b       	sbc	r25, r19
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    37d4:	00 97       	sbiw	r24, 0x00	; 0
    37d6:	79 f6       	brne	.-98     	; 0x3776 <uart_transmit_lcd+0xdc>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    37d8:	f8 01       	movw	r30, r16
    37da:	80 81       	ld	r24, Z
    37dc:	91 81       	ldd	r25, Z+1	; 0x01
    37de:	28 81       	ld	r18, Y
    37e0:	39 81       	ldd	r19, Y+1	; 0x01
    37e2:	82 17       	cp	r24, r18
    37e4:	93 07       	cpc	r25, r19
    37e6:	38 f0       	brcs	.+14     	; 0x37f6 <uart_transmit_lcd+0x15c>
		return (uart_head[idx] - uart_tail[idx]);
    37e8:	80 81       	ld	r24, Z
    37ea:	91 81       	ldd	r25, Z+1	; 0x01
    37ec:	28 81       	ld	r18, Y
    37ee:	39 81       	ldd	r19, Y+1	; 0x01
    37f0:	82 1b       	sub	r24, r18
    37f2:	93 0b       	sbc	r25, r19
    37f4:	09 c0       	rjmp	.+18     	; 0x3808 <uart_transmit_lcd+0x16e>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    37f6:	f8 01       	movw	r30, r16
    37f8:	80 81       	ld	r24, Z
    37fa:	91 81       	ldd	r25, Z+1	; 0x01
    37fc:	28 81       	ld	r18, Y
    37fe:	39 81       	ldd	r19, Y+1	; 0x01
    3800:	80 50       	subi	r24, 0x00	; 0
    3802:	9c 4f       	sbci	r25, 0xFC	; 252
    3804:	82 1b       	sub	r24, r18
    3806:	93 0b       	sbc	r25, r19
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
	}
	//disable the tx outgoing hardware buffer ready interrupt if we have nothing more to put in it.
	if(uart_count(port)>0) uart_txbuffer_enable(port);
    3808:	00 97       	sbiw	r24, 0x00	; 0
    380a:	21 f0       	breq	.+8      	; 0x3814 <uart_transmit_lcd+0x17a>
    380c:	c7 01       	movw	r24, r14
    380e:	0e 94 0f 19 	call	0x321e	; 0x321e <uart_txbuffer_enable>
    3812:	03 c0       	rjmp	.+6      	; 0x381a <uart_transmit_lcd+0x180>
	else uart_txbuffer_disable(port);
    3814:	c7 01       	movw	r24, r14
    3816:	0e 94 14 19 	call	0x3228	; 0x3228 <uart_txbuffer_disable>
#ifndef UART_DEBUG
	uint8_t idx = port_map(port);
	
	//if (idx==0){uart_enqueue(&uctrl, datain);} //xxx
	
	uart_buffer[idx][uart_head[idx]] = datain;
    381a:	f8 01       	movw	r30, r16
    381c:	80 81       	ld	r24, Z
    381e:	91 81       	ldd	r25, Z+1	; 0x01
    3820:	87 53       	subi	r24, 0x37	; 55
    3822:	95 4c       	sbci	r25, 0xC5	; 197
    3824:	fc 01       	movw	r30, r24
    3826:	b0 82       	st	Z, r11
	uart_head[idx]++;
    3828:	f8 01       	movw	r30, r16
    382a:	80 81       	ld	r24, Z
    382c:	91 81       	ldd	r25, Z+1	; 0x01
    382e:	01 96       	adiw	r24, 0x01	; 1
    3830:	80 83       	st	Z, r24
    3832:	91 83       	std	Z+1, r25	; 0x01
	if (uart_head[idx] >= MAX_BUFFER_LEN){
    3834:	80 81       	ld	r24, Z
    3836:	91 81       	ldd	r25, Z+1	; 0x01
    3838:	f4 e0       	ldi	r31, 0x04	; 4
    383a:	80 30       	cpi	r24, 0x00	; 0
    383c:	9f 07       	cpc	r25, r31
    383e:	18 f0       	brcs	.+6      	; 0x3846 <uart_transmit_lcd+0x1ac>
		uart_head[idx] = 0;
    3840:	f8 01       	movw	r30, r16
    3842:	10 82       	st	Z, r1
    3844:	11 82       	std	Z+1, r1	; 0x01
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    3846:	f7 01       	movw	r30, r14
    3848:	81 81       	ldd	r24, Z+1	; 0x01
    384a:	85 fd       	sbrc	r24, 5
    384c:	18 c0       	rjmp	.+48     	; 0x387e <uart_transmit_lcd+0x1e4>
    384e:	31 c0       	rjmp	.+98     	; 0x38b2 <uart_transmit_lcd+0x218>
}

inline uint8_t uart_dequeue(USART_t* port){
	uint8_t idx = port_map(port);
	uint16_t oldtail;
	oldtail = uart_tail[idx];
    3850:	e8 81       	ld	r30, Y
    3852:	f9 81       	ldd	r31, Y+1	; 0x01
	uart_tail[idx]++;
    3854:	88 81       	ld	r24, Y
    3856:	99 81       	ldd	r25, Y+1	; 0x01
    3858:	01 96       	adiw	r24, 0x01	; 1
    385a:	88 83       	st	Y, r24
    385c:	99 83       	std	Y+1, r25	; 0x01
	if (uart_tail[idx] >= MAX_BUFFER_LEN){
    385e:	88 81       	ld	r24, Y
    3860:	99 81       	ldd	r25, Y+1	; 0x01
    3862:	24 e0       	ldi	r18, 0x04	; 4
    3864:	80 30       	cpi	r24, 0x00	; 0
    3866:	92 07       	cpc	r25, r18
    3868:	10 f0       	brcs	.+4      	; 0x386e <uart_transmit_lcd+0x1d4>
		uart_tail[idx] = 0;
    386a:	18 82       	st	Y, r1
    386c:	19 82       	std	Y+1, r1	; 0x01
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    386e:	e7 53       	subi	r30, 0x37	; 55
    3870:	f5 4c       	sbci	r31, 0xC5	; 197
    3872:	80 81       	ld	r24, Z
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
    3874:	f7 01       	movw	r30, r14
    3876:	80 83       	st	Z, r24
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    3878:	81 81       	ldd	r24, Z+1	; 0x01
    387a:	85 ff       	sbrs	r24, 5
    387c:	1a c0       	rjmp	.+52     	; 0x38b2 <uart_transmit_lcd+0x218>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    387e:	f8 01       	movw	r30, r16
    3880:	80 81       	ld	r24, Z
    3882:	91 81       	ldd	r25, Z+1	; 0x01
    3884:	28 81       	ld	r18, Y
    3886:	39 81       	ldd	r19, Y+1	; 0x01
    3888:	82 17       	cp	r24, r18
    388a:	93 07       	cpc	r25, r19
    388c:	38 f0       	brcs	.+14     	; 0x389c <uart_transmit_lcd+0x202>
		return (uart_head[idx] - uart_tail[idx]);
    388e:	80 81       	ld	r24, Z
    3890:	91 81       	ldd	r25, Z+1	; 0x01
    3892:	28 81       	ld	r18, Y
    3894:	39 81       	ldd	r19, Y+1	; 0x01
    3896:	82 1b       	sub	r24, r18
    3898:	93 0b       	sbc	r25, r19
    389a:	09 c0       	rjmp	.+18     	; 0x38ae <uart_transmit_lcd+0x214>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    389c:	f8 01       	movw	r30, r16
    389e:	80 81       	ld	r24, Z
    38a0:	91 81       	ldd	r25, Z+1	; 0x01
    38a2:	28 81       	ld	r18, Y
    38a4:	39 81       	ldd	r19, Y+1	; 0x01
    38a6:	80 50       	subi	r24, 0x00	; 0
    38a8:	9c 4f       	sbci	r25, 0xFC	; 252
    38aa:	82 1b       	sub	r24, r18
    38ac:	93 0b       	sbc	r25, r19
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    38ae:	00 97       	sbiw	r24, 0x00	; 0
    38b0:	79 f6       	brne	.-98     	; 0x3850 <uart_transmit_lcd+0x1b6>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    38b2:	f8 01       	movw	r30, r16
    38b4:	80 81       	ld	r24, Z
    38b6:	91 81       	ldd	r25, Z+1	; 0x01
    38b8:	28 81       	ld	r18, Y
    38ba:	39 81       	ldd	r19, Y+1	; 0x01
    38bc:	82 17       	cp	r24, r18
    38be:	93 07       	cpc	r25, r19
    38c0:	38 f0       	brcs	.+14     	; 0x38d0 <uart_transmit_lcd+0x236>
		return (uart_head[idx] - uart_tail[idx]);
    38c2:	80 81       	ld	r24, Z
    38c4:	91 81       	ldd	r25, Z+1	; 0x01
    38c6:	28 81       	ld	r18, Y
    38c8:	39 81       	ldd	r19, Y+1	; 0x01
    38ca:	82 1b       	sub	r24, r18
    38cc:	93 0b       	sbc	r25, r19
    38ce:	09 c0       	rjmp	.+18     	; 0x38e2 <uart_transmit_lcd+0x248>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    38d0:	f8 01       	movw	r30, r16
    38d2:	80 81       	ld	r24, Z
    38d4:	91 81       	ldd	r25, Z+1	; 0x01
    38d6:	28 81       	ld	r18, Y
    38d8:	39 81       	ldd	r19, Y+1	; 0x01
    38da:	80 50       	subi	r24, 0x00	; 0
    38dc:	9c 4f       	sbci	r25, 0xFC	; 252
    38de:	82 1b       	sub	r24, r18
    38e0:	93 0b       	sbc	r25, r19
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
	}
	//disable the tx outgoing hardware buffer ready interrupt if we have nothing more to put in it.
	if(uart_count(port)>0) uart_txbuffer_enable(port);
    38e2:	00 97       	sbiw	r24, 0x00	; 0
    38e4:	21 f0       	breq	.+8      	; 0x38ee <uart_transmit_lcd+0x254>
    38e6:	c7 01       	movw	r24, r14
    38e8:	0e 94 0f 19 	call	0x321e	; 0x321e <uart_txbuffer_enable>
    38ec:	03 c0       	rjmp	.+6      	; 0x38f4 <uart_transmit_lcd+0x25a>
	else uart_txbuffer_disable(port);
    38ee:	c7 01       	movw	r24, r14
    38f0:	0e 94 14 19 	call	0x3228	; 0x3228 <uart_txbuffer_disable>
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0) && (lcd_flow_control == LCD_READY)){
		toSend = uart_dequeue(port);
		if (toSend == 0x0D) {lcd_flow_control = LCD_BUSY;}
		uart_enqueue(&udata, '`'); //xxx - echo to data port
		uart_enqueue(&udata, toSend); //xxx - echo to data port
		port->DATA = toSend;
    38f4:	f6 01       	movw	r30, r12
    38f6:	b0 82       	st	Z, r11
}

void inline uart_transmit_lcd(USART_t* port){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0) && (lcd_flow_control == LCD_READY)){
    38f8:	81 81       	ldd	r24, Z+1	; 0x01
    38fa:	85 fd       	sbrc	r24, 5
    38fc:	25 c0       	rjmp	.+74     	; 0x3948 <uart_transmit_lcd+0x2ae>
    38fe:	73 c0       	rjmp	.+230    	; 0x39e6 <uart_transmit_lcd+0x34c>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    3900:	0f 2e       	mov	r0, r31
    3902:	f3 ec       	ldi	r31, 0xC3	; 195
    3904:	6f 2e       	mov	r6, r31
    3906:	f2 e3       	ldi	r31, 0x32	; 50
    3908:	7f 2e       	mov	r7, r31
    390a:	f0 2d       	mov	r31, r0
    390c:	0f 2e       	mov	r0, r31
    390e:	ff ec       	ldi	r31, 0xCF	; 207
    3910:	8f 2e       	mov	r8, r31
    3912:	fe e3       	ldi	r31, 0x3E	; 62
    3914:	9f 2e       	mov	r9, r31
    3916:	f0 2d       	mov	r31, r0
		uart_tail[idx] = 0;
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    3918:	0f 2e       	mov	r0, r31
    391a:	f9 ec       	ldi	r31, 0xC9	; 201
    391c:	4f 2e       	mov	r4, r31
    391e:	f2 e3       	ldi	r31, 0x32	; 50
    3920:	5f 2e       	mov	r5, r31
    3922:	f0 2d       	mov	r31, r0
void inline uart_transmit_lcd(USART_t* port){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0) && (lcd_flow_control == LCD_READY)){
		toSend = uart_dequeue(port);
		if (toSend == 0x0D) {lcd_flow_control = LCD_BUSY;}
    3924:	0f 2e       	mov	r0, r31
    3926:	fe e4       	ldi	r31, 0x4E	; 78
    3928:	3f 2e       	mov	r3, r31
    392a:	f0 2d       	mov	r31, r0
#ifndef UART_DEBUG
	uint8_t idx = port_map(port);
	
	//if (idx==0){uart_enqueue(&uctrl, datain);} //xxx
	
	uart_buffer[idx][uart_head[idx]] = datain;
    392c:	07 ec       	ldi	r16, 0xC7	; 199
    392e:	12 e3       	ldi	r17, 0x32	; 50
    3930:	0f 2e       	mov	r0, r31
    3932:	f0 e6       	ldi	r31, 0x60	; 96
    3934:	af 2e       	mov	r10, r31
    3936:	f0 2d       	mov	r31, r0
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    3938:	0f 2e       	mov	r0, r31
    393a:	f0 eb       	ldi	r31, 0xB0	; 176
    393c:	ef 2e       	mov	r14, r31
    393e:	f8 e0       	ldi	r31, 0x08	; 8
    3940:	ff 2e       	mov	r15, r31
    3942:	f0 2d       	mov	r31, r0
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    3944:	c3 ed       	ldi	r28, 0xD3	; 211
    3946:	de e3       	ldi	r29, 0x3E	; 62
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    3948:	f0 eb       	ldi	r31, 0xB0	; 176
    394a:	cf 16       	cp	r12, r31
    394c:	fb e0       	ldi	r31, 0x0B	; 11
    394e:	df 06       	cpc	r13, r31
    3950:	61 f0       	breq	.+24     	; 0x396a <uart_transmit_lcd+0x2d0>
	if (port == &uctrl) {return 1;}
    3952:	20 ea       	ldi	r18, 0xA0	; 160
    3954:	c2 16       	cp	r12, r18
    3956:	28 e0       	ldi	r18, 0x08	; 8
    3958:	d2 06       	cpc	r13, r18
    395a:	49 f0       	breq	.+18     	; 0x396e <uart_transmit_lcd+0x2d4>
	if (port == &udata) {return 2;}
    395c:	30 eb       	ldi	r19, 0xB0	; 176
    395e:	c3 16       	cp	r12, r19
    3960:	38 e0       	ldi	r19, 0x08	; 8
    3962:	d3 06       	cpc	r13, r19
    3964:	31 f4       	brne	.+12     	; 0x3972 <uart_transmit_lcd+0x2d8>
    3966:	22 e0       	ldi	r18, 0x02	; 2
    3968:	05 c0       	rjmp	.+10     	; 0x3974 <uart_transmit_lcd+0x2da>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    396a:	20 e0       	ldi	r18, 0x00	; 0
    396c:	03 c0       	rjmp	.+6      	; 0x3974 <uart_transmit_lcd+0x2da>
	if (port == &uctrl) {return 1;}
    396e:	21 e0       	ldi	r18, 0x01	; 1
    3970:	01 c0       	rjmp	.+2      	; 0x3974 <uart_transmit_lcd+0x2da>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    3972:	20 e0       	ldi	r18, 0x00	; 0
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    3974:	30 e0       	ldi	r19, 0x00	; 0
    3976:	c9 01       	movw	r24, r18
    3978:	88 0f       	add	r24, r24
    397a:	99 1f       	adc	r25, r25
    397c:	f3 01       	movw	r30, r6
    397e:	e8 0f       	add	r30, r24
    3980:	f9 1f       	adc	r31, r25
    3982:	40 81       	ld	r20, Z
    3984:	51 81       	ldd	r21, Z+1	; 0x01
    3986:	f4 01       	movw	r30, r8
    3988:	e8 0f       	add	r30, r24
    398a:	f9 1f       	adc	r31, r25
    398c:	80 81       	ld	r24, Z
    398e:	91 81       	ldd	r25, Z+1	; 0x01
    3990:	48 17       	cp	r20, r24
    3992:	59 07       	cpc	r21, r25
    3994:	88 f0       	brcs	.+34     	; 0x39b8 <uart_transmit_lcd+0x31e>
		return (uart_head[idx] - uart_tail[idx]);
    3996:	22 0f       	add	r18, r18
    3998:	33 1f       	adc	r19, r19
    399a:	f3 01       	movw	r30, r6
    399c:	e2 0f       	add	r30, r18
    399e:	f3 1f       	adc	r31, r19
    39a0:	40 81       	ld	r20, Z
    39a2:	51 81       	ldd	r21, Z+1	; 0x01
    39a4:	f4 01       	movw	r30, r8
    39a6:	e2 0f       	add	r30, r18
    39a8:	f3 1f       	adc	r31, r19
    39aa:	80 81       	ld	r24, Z
    39ac:	91 81       	ldd	r25, Z+1	; 0x01
    39ae:	fa 01       	movw	r30, r20
    39b0:	e8 1b       	sub	r30, r24
    39b2:	f9 0b       	sbc	r31, r25
    39b4:	cf 01       	movw	r24, r30
    39b6:	10 c0       	rjmp	.+32     	; 0x39d8 <uart_transmit_lcd+0x33e>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    39b8:	22 0f       	add	r18, r18
    39ba:	33 1f       	adc	r19, r19
    39bc:	f3 01       	movw	r30, r6
    39be:	e2 0f       	add	r30, r18
    39c0:	f3 1f       	adc	r31, r19
    39c2:	80 81       	ld	r24, Z
    39c4:	91 81       	ldd	r25, Z+1	; 0x01
    39c6:	f4 01       	movw	r30, r8
    39c8:	e2 0f       	add	r30, r18
    39ca:	f3 1f       	adc	r31, r19
    39cc:	20 81       	ld	r18, Z
    39ce:	31 81       	ldd	r19, Z+1	; 0x01
    39d0:	80 50       	subi	r24, 0x00	; 0
    39d2:	9c 4f       	sbci	r25, 0xFC	; 252
    39d4:	82 1b       	sub	r24, r18
    39d6:	93 0b       	sbc	r25, r19
}

void inline uart_transmit_lcd(USART_t* port){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0) && (lcd_flow_control == LCD_READY)){
    39d8:	00 97       	sbiw	r24, 0x00	; 0
    39da:	29 f0       	breq	.+10     	; 0x39e6 <uart_transmit_lcd+0x34c>
    39dc:	80 91 ab 26 	lds	r24, 0x26AB
    39e0:	82 35       	cpi	r24, 0x52	; 82
    39e2:	09 f4       	brne	.+2      	; 0x39e6 <uart_transmit_lcd+0x34c>
    39e4:	71 ce       	rjmp	.-798    	; 0x36c8 <uart_transmit_lcd+0x2e>
		if (toSend == 0x0D) {lcd_flow_control = LCD_BUSY;}
		uart_enqueue(&udata, '`'); //xxx - echo to data port
		uart_enqueue(&udata, toSend); //xxx - echo to data port
		port->DATA = toSend;
	}
	uart_txbuffer_disable(port); //implemented this way to prevent periodic stalls that happen when uart_txbuffer isn't disabled quickly enough
    39e6:	c6 01       	movw	r24, r12
    39e8:	0e 94 14 19 	call	0x3228	; 0x3228 <uart_txbuffer_disable>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    39ec:	f0 eb       	ldi	r31, 0xB0	; 176
    39ee:	cf 16       	cp	r12, r31
    39f0:	fb e0       	ldi	r31, 0x0B	; 11
    39f2:	df 06       	cpc	r13, r31
    39f4:	61 f0       	breq	.+24     	; 0x3a0e <uart_transmit_lcd+0x374>
	if (port == &uctrl) {return 1;}
    39f6:	20 ea       	ldi	r18, 0xA0	; 160
    39f8:	c2 16       	cp	r12, r18
    39fa:	28 e0       	ldi	r18, 0x08	; 8
    39fc:	d2 06       	cpc	r13, r18
    39fe:	49 f0       	breq	.+18     	; 0x3a12 <uart_transmit_lcd+0x378>
	if (port == &udata) {return 2;}
    3a00:	30 eb       	ldi	r19, 0xB0	; 176
    3a02:	c3 16       	cp	r12, r19
    3a04:	38 e0       	ldi	r19, 0x08	; 8
    3a06:	d3 06       	cpc	r13, r19
    3a08:	31 f4       	brne	.+12     	; 0x3a16 <uart_transmit_lcd+0x37c>
    3a0a:	22 e0       	ldi	r18, 0x02	; 2
    3a0c:	05 c0       	rjmp	.+10     	; 0x3a18 <uart_transmit_lcd+0x37e>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    3a0e:	20 e0       	ldi	r18, 0x00	; 0
    3a10:	03 c0       	rjmp	.+6      	; 0x3a18 <uart_transmit_lcd+0x37e>
	if (port == &uctrl) {return 1;}
    3a12:	21 e0       	ldi	r18, 0x01	; 1
    3a14:	01 c0       	rjmp	.+2      	; 0x3a18 <uart_transmit_lcd+0x37e>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    3a16:	20 e0       	ldi	r18, 0x00	; 0
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    3a18:	30 e0       	ldi	r19, 0x00	; 0
    3a1a:	c9 01       	movw	r24, r18
    3a1c:	88 0f       	add	r24, r24
    3a1e:	99 1f       	adc	r25, r25
    3a20:	fc 01       	movw	r30, r24
    3a22:	ed 53       	subi	r30, 0x3D	; 61
    3a24:	fd 4c       	sbci	r31, 0xCD	; 205
    3a26:	40 81       	ld	r20, Z
    3a28:	51 81       	ldd	r21, Z+1	; 0x01
    3a2a:	81 53       	subi	r24, 0x31	; 49
    3a2c:	91 4c       	sbci	r25, 0xC1	; 193
    3a2e:	fc 01       	movw	r30, r24
    3a30:	80 81       	ld	r24, Z
    3a32:	91 81       	ldd	r25, Z+1	; 0x01
    3a34:	48 17       	cp	r20, r24
    3a36:	59 07       	cpc	r21, r25
    3a38:	78 f0       	brcs	.+30     	; 0x3a58 <uart_transmit_lcd+0x3be>
		return (uart_head[idx] - uart_tail[idx]);
    3a3a:	22 0f       	add	r18, r18
    3a3c:	33 1f       	adc	r19, r19
    3a3e:	f9 01       	movw	r30, r18
    3a40:	ed 53       	subi	r30, 0x3D	; 61
    3a42:	fd 4c       	sbci	r31, 0xCD	; 205
    3a44:	80 81       	ld	r24, Z
    3a46:	91 81       	ldd	r25, Z+1	; 0x01
    3a48:	21 53       	subi	r18, 0x31	; 49
    3a4a:	31 4c       	sbci	r19, 0xC1	; 193
    3a4c:	f9 01       	movw	r30, r18
    3a4e:	20 81       	ld	r18, Z
    3a50:	31 81       	ldd	r19, Z+1	; 0x01
    3a52:	82 1b       	sub	r24, r18
    3a54:	93 0b       	sbc	r25, r19
    3a56:	12 c0       	rjmp	.+36     	; 0x3a7c <uart_transmit_lcd+0x3e2>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    3a58:	22 0f       	add	r18, r18
    3a5a:	33 1f       	adc	r19, r19
    3a5c:	f9 01       	movw	r30, r18
    3a5e:	ed 53       	subi	r30, 0x3D	; 61
    3a60:	fd 4c       	sbci	r31, 0xCD	; 205
    3a62:	40 81       	ld	r20, Z
    3a64:	51 81       	ldd	r21, Z+1	; 0x01
    3a66:	21 53       	subi	r18, 0x31	; 49
    3a68:	31 4c       	sbci	r19, 0xC1	; 193
    3a6a:	f9 01       	movw	r30, r18
    3a6c:	80 81       	ld	r24, Z
    3a6e:	91 81       	ldd	r25, Z+1	; 0x01
    3a70:	40 50       	subi	r20, 0x00	; 0
    3a72:	5c 4f       	sbci	r21, 0xFC	; 252
    3a74:	9a 01       	movw	r18, r20
    3a76:	28 1b       	sub	r18, r24
    3a78:	39 0b       	sbc	r19, r25
    3a7a:	c9 01       	movw	r24, r18
		uart_enqueue(&udata, '`'); //xxx - echo to data port
		uart_enqueue(&udata, toSend); //xxx - echo to data port
		port->DATA = toSend;
	}
	uart_txbuffer_disable(port); //implemented this way to prevent periodic stalls that happen when uart_txbuffer isn't disabled quickly enough
	if ((uart_count(port)>0) && (lcd_flow_control == LCD_READY)){ //...something is waiting to go out
    3a7c:	00 97       	sbiw	r24, 0x00	; 0
    3a7e:	39 f0       	breq	.+14     	; 0x3a8e <uart_transmit_lcd+0x3f4>
    3a80:	80 91 ab 26 	lds	r24, 0x26AB
    3a84:	82 35       	cpi	r24, 0x52	; 82
    3a86:	19 f4       	brne	.+6      	; 0x3a8e <uart_transmit_lcd+0x3f4>
		uart_txbuffer_enable(port);	
    3a88:	c6 01       	movw	r24, r12
    3a8a:	0e 94 0f 19 	call	0x321e	; 0x321e <uart_txbuffer_enable>
	}	
}
    3a8e:	df 91       	pop	r29
    3a90:	cf 91       	pop	r28
    3a92:	1f 91       	pop	r17
    3a94:	0f 91       	pop	r16
    3a96:	ff 90       	pop	r15
    3a98:	ef 90       	pop	r14
    3a9a:	df 90       	pop	r13
    3a9c:	cf 90       	pop	r12
    3a9e:	bf 90       	pop	r11
    3aa0:	af 90       	pop	r10
    3aa2:	9f 90       	pop	r9
    3aa4:	8f 90       	pop	r8
    3aa6:	7f 90       	pop	r7
    3aa8:	6f 90       	pop	r6
    3aaa:	5f 90       	pop	r5
    3aac:	4f 90       	pop	r4
    3aae:	3f 90       	pop	r3
    3ab0:	08 95       	ret

00003ab2 <__vector_123>:
//Must correspond to definitions in uart.h
ISR(USARTC0_DRE_vect) {uart_transmit(&uctrl);}//TX Interrupt
ISR(USARTC0_RXC_vect) {uart_receive(&uctrl);} //RX Interrupt
ISR(USARTC1_DRE_vect) {uart_transmit(&udata);}//TX Interrupt
ISR(USARTC1_RXC_vect) {uart_receive(&udata);} //RX Interrupt
ISR(USARTF1_DRE_vect) {uart_transmit_lcd(&ulcd);}//TX Interrupt
    3ab2:	1f 92       	push	r1
    3ab4:	0f 92       	push	r0
    3ab6:	0f b6       	in	r0, 0x3f	; 63
    3ab8:	0f 92       	push	r0
    3aba:	08 b6       	in	r0, 0x38	; 56
    3abc:	0f 92       	push	r0
    3abe:	09 b6       	in	r0, 0x39	; 57
    3ac0:	0f 92       	push	r0
    3ac2:	0a b6       	in	r0, 0x3a	; 58
    3ac4:	0f 92       	push	r0
    3ac6:	0b b6       	in	r0, 0x3b	; 59
    3ac8:	0f 92       	push	r0
    3aca:	11 24       	eor	r1, r1
    3acc:	3f 92       	push	r3
    3ace:	4f 92       	push	r4
    3ad0:	5f 92       	push	r5
    3ad2:	6f 92       	push	r6
    3ad4:	7f 92       	push	r7
    3ad6:	8f 92       	push	r8
    3ad8:	9f 92       	push	r9
    3ada:	af 92       	push	r10
    3adc:	bf 92       	push	r11
    3ade:	cf 92       	push	r12
    3ae0:	df 92       	push	r13
    3ae2:	ef 92       	push	r14
    3ae4:	ff 92       	push	r15
    3ae6:	0f 93       	push	r16
    3ae8:	1f 93       	push	r17
    3aea:	2f 93       	push	r18
    3aec:	3f 93       	push	r19
    3aee:	4f 93       	push	r20
    3af0:	5f 93       	push	r21
    3af2:	6f 93       	push	r22
    3af4:	7f 93       	push	r23
    3af6:	8f 93       	push	r24
    3af8:	9f 93       	push	r25
    3afa:	af 93       	push	r26
    3afc:	bf 93       	push	r27
    3afe:	cf 93       	push	r28
    3b00:	df 93       	push	r29
    3b02:	ef 93       	push	r30
    3b04:	ff 93       	push	r31
}

void inline uart_transmit_lcd(USART_t* port){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0) && (lcd_flow_control == LCD_READY)){
    3b06:	e0 eb       	ldi	r30, 0xB0	; 176
    3b08:	fb e0       	ldi	r31, 0x0B	; 11
    3b0a:	81 81       	ldd	r24, Z+1	; 0x01
    3b0c:	85 fd       	sbrc	r24, 5
    3b0e:	fb c0       	rjmp	.+502    	; 0x3d06 <__vector_123+0x254>
    3b10:	48 c1       	rjmp	.+656    	; 0x3da2 <__vector_123+0x2f0>
}

inline uint8_t uart_dequeue(USART_t* port){
	uint8_t idx = port_map(port);
	uint16_t oldtail;
	oldtail = uart_tail[idx];
    3b12:	d6 01       	movw	r26, r12
    3b14:	ed 91       	ld	r30, X+
    3b16:	fc 91       	ld	r31, X
    3b18:	11 97       	sbiw	r26, 0x01	; 1
	uart_tail[idx]++;
    3b1a:	8d 91       	ld	r24, X+
    3b1c:	9c 91       	ld	r25, X
    3b1e:	11 97       	sbiw	r26, 0x01	; 1
    3b20:	01 96       	adiw	r24, 0x01	; 1
    3b22:	8d 93       	st	X+, r24
    3b24:	9c 93       	st	X, r25
    3b26:	11 97       	sbiw	r26, 0x01	; 1
	if (uart_tail[idx] >= MAX_BUFFER_LEN){
    3b28:	8d 91       	ld	r24, X+
    3b2a:	9c 91       	ld	r25, X
    3b2c:	11 97       	sbiw	r26, 0x01	; 1
    3b2e:	b4 e0       	ldi	r27, 0x04	; 4
    3b30:	80 30       	cpi	r24, 0x00	; 0
    3b32:	9b 07       	cpc	r25, r27
    3b34:	20 f0       	brcs	.+8      	; 0x3b3e <__vector_123+0x8c>
		uart_tail[idx] = 0;
    3b36:	d6 01       	movw	r26, r12
    3b38:	1d 92       	st	X+, r1
    3b3a:	1c 92       	st	X, r1
    3b3c:	11 97       	sbiw	r26, 0x01	; 1
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    3b3e:	e4 0d       	add	r30, r4
    3b40:	f5 1d       	adc	r31, r5
    3b42:	b0 80       	ld	r11, Z
void inline uart_transmit_lcd(USART_t* port){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0) && (lcd_flow_control == LCD_READY)){
		toSend = uart_dequeue(port);
		if (toSend == 0x0D) {lcd_flow_control = LCD_BUSY;}
    3b44:	bd e0       	ldi	r27, 0x0D	; 13
    3b46:	bb 16       	cp	r11, r27
    3b48:	11 f4       	brne	.+4      	; 0x3b4e <__vector_123+0x9c>
    3b4a:	30 92 ab 26 	sts	0x26AB, r3
#ifndef UART_DEBUG
	uint8_t idx = port_map(port);
	
	//if (idx==0){uart_enqueue(&uctrl, datain);} //xxx
	
	uart_buffer[idx][uart_head[idx]] = datain;
    3b4e:	f8 01       	movw	r30, r16
    3b50:	80 81       	ld	r24, Z
    3b52:	91 81       	ldd	r25, Z+1	; 0x01
    3b54:	87 53       	subi	r24, 0x37	; 55
    3b56:	95 4c       	sbci	r25, 0xC5	; 197
    3b58:	dc 01       	movw	r26, r24
    3b5a:	ac 92       	st	X, r10
	uart_head[idx]++;
    3b5c:	80 81       	ld	r24, Z
    3b5e:	91 81       	ldd	r25, Z+1	; 0x01
    3b60:	01 96       	adiw	r24, 0x01	; 1
    3b62:	80 83       	st	Z, r24
    3b64:	91 83       	std	Z+1, r25	; 0x01
	if (uart_head[idx] >= MAX_BUFFER_LEN){
    3b66:	80 81       	ld	r24, Z
    3b68:	91 81       	ldd	r25, Z+1	; 0x01
    3b6a:	b4 e0       	ldi	r27, 0x04	; 4
    3b6c:	80 30       	cpi	r24, 0x00	; 0
    3b6e:	9b 07       	cpc	r25, r27
    3b70:	10 f0       	brcs	.+4      	; 0x3b76 <__vector_123+0xc4>
		uart_head[idx] = 0;
    3b72:	10 82       	st	Z, r1
    3b74:	11 82       	std	Z+1, r1	; 0x01
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    3b76:	f7 01       	movw	r30, r14
    3b78:	81 81       	ldd	r24, Z+1	; 0x01
    3b7a:	85 fd       	sbrc	r24, 5
    3b7c:	1a c0       	rjmp	.+52     	; 0x3bb2 <__vector_123+0x100>
    3b7e:	32 c0       	rjmp	.+100    	; 0x3be4 <__vector_123+0x132>
}

inline uint8_t uart_dequeue(USART_t* port){
	uint8_t idx = port_map(port);
	uint16_t oldtail;
	oldtail = uart_tail[idx];
    3b80:	e8 81       	ld	r30, Y
    3b82:	f9 81       	ldd	r31, Y+1	; 0x01
	uart_tail[idx]++;
    3b84:	88 81       	ld	r24, Y
    3b86:	99 81       	ldd	r25, Y+1	; 0x01
    3b88:	01 96       	adiw	r24, 0x01	; 1
    3b8a:	88 83       	st	Y, r24
    3b8c:	99 83       	std	Y+1, r25	; 0x01
	if (uart_tail[idx] >= MAX_BUFFER_LEN){
    3b8e:	88 81       	ld	r24, Y
    3b90:	99 81       	ldd	r25, Y+1	; 0x01
    3b92:	24 e0       	ldi	r18, 0x04	; 4
    3b94:	80 30       	cpi	r24, 0x00	; 0
    3b96:	92 07       	cpc	r25, r18
    3b98:	10 f0       	brcs	.+4      	; 0x3b9e <__vector_123+0xec>
		uart_tail[idx] = 0;
    3b9a:	18 82       	st	Y, r1
    3b9c:	19 82       	std	Y+1, r1	; 0x01
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    3b9e:	e7 53       	subi	r30, 0x37	; 55
    3ba0:	f5 4c       	sbci	r31, 0xC5	; 197
    3ba2:	80 81       	ld	r24, Z
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
    3ba4:	d7 01       	movw	r26, r14
    3ba6:	8c 93       	st	X, r24
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    3ba8:	11 96       	adiw	r26, 0x01	; 1
    3baa:	8c 91       	ld	r24, X
    3bac:	11 97       	sbiw	r26, 0x01	; 1
    3bae:	85 ff       	sbrs	r24, 5
    3bb0:	19 c0       	rjmp	.+50     	; 0x3be4 <__vector_123+0x132>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    3bb2:	f8 01       	movw	r30, r16
    3bb4:	80 81       	ld	r24, Z
    3bb6:	91 81       	ldd	r25, Z+1	; 0x01
    3bb8:	28 81       	ld	r18, Y
    3bba:	39 81       	ldd	r19, Y+1	; 0x01
    3bbc:	82 17       	cp	r24, r18
    3bbe:	93 07       	cpc	r25, r19
    3bc0:	38 f0       	brcs	.+14     	; 0x3bd0 <__vector_123+0x11e>
		return (uart_head[idx] - uart_tail[idx]);
    3bc2:	80 81       	ld	r24, Z
    3bc4:	91 81       	ldd	r25, Z+1	; 0x01
    3bc6:	28 81       	ld	r18, Y
    3bc8:	39 81       	ldd	r19, Y+1	; 0x01
    3bca:	82 1b       	sub	r24, r18
    3bcc:	93 0b       	sbc	r25, r19
    3bce:	08 c0       	rjmp	.+16     	; 0x3be0 <__vector_123+0x12e>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    3bd0:	80 81       	ld	r24, Z
    3bd2:	91 81       	ldd	r25, Z+1	; 0x01
    3bd4:	28 81       	ld	r18, Y
    3bd6:	39 81       	ldd	r19, Y+1	; 0x01
    3bd8:	80 50       	subi	r24, 0x00	; 0
    3bda:	9c 4f       	sbci	r25, 0xFC	; 252
    3bdc:	82 1b       	sub	r24, r18
    3bde:	93 0b       	sbc	r25, r19
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    3be0:	00 97       	sbiw	r24, 0x00	; 0
    3be2:	71 f6       	brne	.-100    	; 0x3b80 <__vector_123+0xce>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    3be4:	f8 01       	movw	r30, r16
    3be6:	80 81       	ld	r24, Z
    3be8:	91 81       	ldd	r25, Z+1	; 0x01
    3bea:	28 81       	ld	r18, Y
    3bec:	39 81       	ldd	r19, Y+1	; 0x01
    3bee:	82 17       	cp	r24, r18
    3bf0:	93 07       	cpc	r25, r19
    3bf2:	38 f0       	brcs	.+14     	; 0x3c02 <__vector_123+0x150>
		return (uart_head[idx] - uart_tail[idx]);
    3bf4:	80 81       	ld	r24, Z
    3bf6:	91 81       	ldd	r25, Z+1	; 0x01
    3bf8:	28 81       	ld	r18, Y
    3bfa:	39 81       	ldd	r19, Y+1	; 0x01
    3bfc:	82 1b       	sub	r24, r18
    3bfe:	93 0b       	sbc	r25, r19
    3c00:	08 c0       	rjmp	.+16     	; 0x3c12 <__vector_123+0x160>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    3c02:	80 81       	ld	r24, Z
    3c04:	91 81       	ldd	r25, Z+1	; 0x01
    3c06:	28 81       	ld	r18, Y
    3c08:	39 81       	ldd	r19, Y+1	; 0x01
    3c0a:	80 50       	subi	r24, 0x00	; 0
    3c0c:	9c 4f       	sbci	r25, 0xFC	; 252
    3c0e:	82 1b       	sub	r24, r18
    3c10:	93 0b       	sbc	r25, r19
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
	}
	//disable the tx outgoing hardware buffer ready interrupt if we have nothing more to put in it.
	if(uart_count(port)>0) uart_txbuffer_enable(port);
    3c12:	00 97       	sbiw	r24, 0x00	; 0
    3c14:	21 f0       	breq	.+8      	; 0x3c1e <__vector_123+0x16c>
    3c16:	c7 01       	movw	r24, r14
    3c18:	0e 94 0f 19 	call	0x321e	; 0x321e <uart_txbuffer_enable>
    3c1c:	03 c0       	rjmp	.+6      	; 0x3c24 <__vector_123+0x172>
	else uart_txbuffer_disable(port);
    3c1e:	c7 01       	movw	r24, r14
    3c20:	0e 94 14 19 	call	0x3228	; 0x3228 <uart_txbuffer_disable>
#ifndef UART_DEBUG
	uint8_t idx = port_map(port);
	
	//if (idx==0){uart_enqueue(&uctrl, datain);} //xxx
	
	uart_buffer[idx][uart_head[idx]] = datain;
    3c24:	f8 01       	movw	r30, r16
    3c26:	80 81       	ld	r24, Z
    3c28:	91 81       	ldd	r25, Z+1	; 0x01
    3c2a:	87 53       	subi	r24, 0x37	; 55
    3c2c:	95 4c       	sbci	r25, 0xC5	; 197
    3c2e:	dc 01       	movw	r26, r24
    3c30:	bc 92       	st	X, r11
	uart_head[idx]++;
    3c32:	80 81       	ld	r24, Z
    3c34:	91 81       	ldd	r25, Z+1	; 0x01
    3c36:	01 96       	adiw	r24, 0x01	; 1
    3c38:	80 83       	st	Z, r24
    3c3a:	91 83       	std	Z+1, r25	; 0x01
	if (uart_head[idx] >= MAX_BUFFER_LEN){
    3c3c:	80 81       	ld	r24, Z
    3c3e:	91 81       	ldd	r25, Z+1	; 0x01
    3c40:	b4 e0       	ldi	r27, 0x04	; 4
    3c42:	80 30       	cpi	r24, 0x00	; 0
    3c44:	9b 07       	cpc	r25, r27
    3c46:	10 f0       	brcs	.+4      	; 0x3c4c <__vector_123+0x19a>
		uart_head[idx] = 0;
    3c48:	10 82       	st	Z, r1
    3c4a:	11 82       	std	Z+1, r1	; 0x01
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    3c4c:	f7 01       	movw	r30, r14
    3c4e:	81 81       	ldd	r24, Z+1	; 0x01
    3c50:	85 fd       	sbrc	r24, 5
    3c52:	1a c0       	rjmp	.+52     	; 0x3c88 <__vector_123+0x1d6>
    3c54:	32 c0       	rjmp	.+100    	; 0x3cba <__vector_123+0x208>
}

inline uint8_t uart_dequeue(USART_t* port){
	uint8_t idx = port_map(port);
	uint16_t oldtail;
	oldtail = uart_tail[idx];
    3c56:	e8 81       	ld	r30, Y
    3c58:	f9 81       	ldd	r31, Y+1	; 0x01
	uart_tail[idx]++;
    3c5a:	88 81       	ld	r24, Y
    3c5c:	99 81       	ldd	r25, Y+1	; 0x01
    3c5e:	01 96       	adiw	r24, 0x01	; 1
    3c60:	88 83       	st	Y, r24
    3c62:	99 83       	std	Y+1, r25	; 0x01
	if (uart_tail[idx] >= MAX_BUFFER_LEN){
    3c64:	88 81       	ld	r24, Y
    3c66:	99 81       	ldd	r25, Y+1	; 0x01
    3c68:	24 e0       	ldi	r18, 0x04	; 4
    3c6a:	80 30       	cpi	r24, 0x00	; 0
    3c6c:	92 07       	cpc	r25, r18
    3c6e:	10 f0       	brcs	.+4      	; 0x3c74 <__vector_123+0x1c2>
		uart_tail[idx] = 0;
    3c70:	18 82       	st	Y, r1
    3c72:	19 82       	std	Y+1, r1	; 0x01
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    3c74:	e7 53       	subi	r30, 0x37	; 55
    3c76:	f5 4c       	sbci	r31, 0xC5	; 197
    3c78:	80 81       	ld	r24, Z
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
    3c7a:	d7 01       	movw	r26, r14
    3c7c:	8c 93       	st	X, r24
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    3c7e:	11 96       	adiw	r26, 0x01	; 1
    3c80:	8c 91       	ld	r24, X
    3c82:	11 97       	sbiw	r26, 0x01	; 1
    3c84:	85 ff       	sbrs	r24, 5
    3c86:	19 c0       	rjmp	.+50     	; 0x3cba <__vector_123+0x208>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    3c88:	f8 01       	movw	r30, r16
    3c8a:	80 81       	ld	r24, Z
    3c8c:	91 81       	ldd	r25, Z+1	; 0x01
    3c8e:	28 81       	ld	r18, Y
    3c90:	39 81       	ldd	r19, Y+1	; 0x01
    3c92:	82 17       	cp	r24, r18
    3c94:	93 07       	cpc	r25, r19
    3c96:	38 f0       	brcs	.+14     	; 0x3ca6 <__vector_123+0x1f4>
		return (uart_head[idx] - uart_tail[idx]);
    3c98:	80 81       	ld	r24, Z
    3c9a:	91 81       	ldd	r25, Z+1	; 0x01
    3c9c:	28 81       	ld	r18, Y
    3c9e:	39 81       	ldd	r19, Y+1	; 0x01
    3ca0:	82 1b       	sub	r24, r18
    3ca2:	93 0b       	sbc	r25, r19
    3ca4:	08 c0       	rjmp	.+16     	; 0x3cb6 <__vector_123+0x204>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    3ca6:	80 81       	ld	r24, Z
    3ca8:	91 81       	ldd	r25, Z+1	; 0x01
    3caa:	28 81       	ld	r18, Y
    3cac:	39 81       	ldd	r19, Y+1	; 0x01
    3cae:	80 50       	subi	r24, 0x00	; 0
    3cb0:	9c 4f       	sbci	r25, 0xFC	; 252
    3cb2:	82 1b       	sub	r24, r18
    3cb4:	93 0b       	sbc	r25, r19
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    3cb6:	00 97       	sbiw	r24, 0x00	; 0
    3cb8:	71 f6       	brne	.-100    	; 0x3c56 <__vector_123+0x1a4>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    3cba:	f8 01       	movw	r30, r16
    3cbc:	80 81       	ld	r24, Z
    3cbe:	91 81       	ldd	r25, Z+1	; 0x01
    3cc0:	28 81       	ld	r18, Y
    3cc2:	39 81       	ldd	r19, Y+1	; 0x01
    3cc4:	82 17       	cp	r24, r18
    3cc6:	93 07       	cpc	r25, r19
    3cc8:	38 f0       	brcs	.+14     	; 0x3cd8 <__vector_123+0x226>
		return (uart_head[idx] - uart_tail[idx]);
    3cca:	80 81       	ld	r24, Z
    3ccc:	91 81       	ldd	r25, Z+1	; 0x01
    3cce:	28 81       	ld	r18, Y
    3cd0:	39 81       	ldd	r19, Y+1	; 0x01
    3cd2:	82 1b       	sub	r24, r18
    3cd4:	93 0b       	sbc	r25, r19
    3cd6:	08 c0       	rjmp	.+16     	; 0x3ce8 <__vector_123+0x236>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    3cd8:	80 81       	ld	r24, Z
    3cda:	91 81       	ldd	r25, Z+1	; 0x01
    3cdc:	28 81       	ld	r18, Y
    3cde:	39 81       	ldd	r19, Y+1	; 0x01
    3ce0:	80 50       	subi	r24, 0x00	; 0
    3ce2:	9c 4f       	sbci	r25, 0xFC	; 252
    3ce4:	82 1b       	sub	r24, r18
    3ce6:	93 0b       	sbc	r25, r19
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
	}
	//disable the tx outgoing hardware buffer ready interrupt if we have nothing more to put in it.
	if(uart_count(port)>0) uart_txbuffer_enable(port);
    3ce8:	00 97       	sbiw	r24, 0x00	; 0
    3cea:	21 f0       	breq	.+8      	; 0x3cf4 <__vector_123+0x242>
    3cec:	c7 01       	movw	r24, r14
    3cee:	0e 94 0f 19 	call	0x321e	; 0x321e <uart_txbuffer_enable>
    3cf2:	03 c0       	rjmp	.+6      	; 0x3cfa <__vector_123+0x248>
	else uart_txbuffer_disable(port);
    3cf4:	c7 01       	movw	r24, r14
    3cf6:	0e 94 14 19 	call	0x3228	; 0x3228 <uart_txbuffer_disable>
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0) && (lcd_flow_control == LCD_READY)){
		toSend = uart_dequeue(port);
		if (toSend == 0x0D) {lcd_flow_control = LCD_BUSY;}
		uart_enqueue(&udata, '`'); //xxx - echo to data port
		uart_enqueue(&udata, toSend); //xxx - echo to data port
		port->DATA = toSend;
    3cfa:	f3 01       	movw	r30, r6
    3cfc:	b0 82       	st	Z, r11
}

void inline uart_transmit_lcd(USART_t* port){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0) && (lcd_flow_control == LCD_READY)){
    3cfe:	81 81       	ldd	r24, Z+1	; 0x01
    3d00:	85 fd       	sbrc	r24, 5
    3d02:	2b c0       	rjmp	.+86     	; 0x3d5a <__vector_123+0x2a8>
    3d04:	4e c0       	rjmp	.+156    	; 0x3da2 <__vector_123+0x2f0>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    3d06:	0f 2e       	mov	r0, r31
    3d08:	f3 ec       	ldi	r31, 0xC3	; 195
    3d0a:	8f 2e       	mov	r8, r31
    3d0c:	f2 e3       	ldi	r31, 0x32	; 50
    3d0e:	9f 2e       	mov	r9, r31
    3d10:	f0 2d       	mov	r31, r0
    3d12:	0f 2e       	mov	r0, r31
    3d14:	ff ec       	ldi	r31, 0xCF	; 207
    3d16:	cf 2e       	mov	r12, r31
    3d18:	fe e3       	ldi	r31, 0x3E	; 62
    3d1a:	df 2e       	mov	r13, r31
    3d1c:	f0 2d       	mov	r31, r0
		uart_tail[idx] = 0;
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    3d1e:	0f 2e       	mov	r0, r31
    3d20:	f9 ec       	ldi	r31, 0xC9	; 201
    3d22:	4f 2e       	mov	r4, r31
    3d24:	f2 e3       	ldi	r31, 0x32	; 50
    3d26:	5f 2e       	mov	r5, r31
    3d28:	f0 2d       	mov	r31, r0
void inline uart_transmit_lcd(USART_t* port){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0) && (lcd_flow_control == LCD_READY)){
		toSend = uart_dequeue(port);
		if (toSend == 0x0D) {lcd_flow_control = LCD_BUSY;}
    3d2a:	0f 2e       	mov	r0, r31
    3d2c:	fe e4       	ldi	r31, 0x4E	; 78
    3d2e:	3f 2e       	mov	r3, r31
    3d30:	f0 2d       	mov	r31, r0
#ifndef UART_DEBUG
	uint8_t idx = port_map(port);
	
	//if (idx==0){uart_enqueue(&uctrl, datain);} //xxx
	
	uart_buffer[idx][uart_head[idx]] = datain;
    3d32:	07 ec       	ldi	r16, 0xC7	; 199
    3d34:	12 e3       	ldi	r17, 0x32	; 50
    3d36:	0f 2e       	mov	r0, r31
    3d38:	f0 e6       	ldi	r31, 0x60	; 96
    3d3a:	af 2e       	mov	r10, r31
    3d3c:	f0 2d       	mov	r31, r0
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    3d3e:	0f 2e       	mov	r0, r31
    3d40:	f0 eb       	ldi	r31, 0xB0	; 176
    3d42:	ef 2e       	mov	r14, r31
    3d44:	f8 e0       	ldi	r31, 0x08	; 8
    3d46:	ff 2e       	mov	r15, r31
    3d48:	f0 2d       	mov	r31, r0
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    3d4a:	c3 ed       	ldi	r28, 0xD3	; 211
    3d4c:	de e3       	ldi	r29, 0x3E	; 62
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0) && (lcd_flow_control == LCD_READY)){
		toSend = uart_dequeue(port);
		if (toSend == 0x0D) {lcd_flow_control = LCD_BUSY;}
		uart_enqueue(&udata, '`'); //xxx - echo to data port
		uart_enqueue(&udata, toSend); //xxx - echo to data port
		port->DATA = toSend;
    3d4e:	0f 2e       	mov	r0, r31
    3d50:	f0 eb       	ldi	r31, 0xB0	; 176
    3d52:	6f 2e       	mov	r6, r31
    3d54:	fb e0       	ldi	r31, 0x0B	; 11
    3d56:	7f 2e       	mov	r7, r31
    3d58:	f0 2d       	mov	r31, r0
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    3d5a:	d4 01       	movw	r26, r8
    3d5c:	8d 91       	ld	r24, X+
    3d5e:	9c 91       	ld	r25, X
    3d60:	11 97       	sbiw	r26, 0x01	; 1
    3d62:	f6 01       	movw	r30, r12
    3d64:	20 81       	ld	r18, Z
    3d66:	31 81       	ldd	r19, Z+1	; 0x01
    3d68:	82 17       	cp	r24, r18
    3d6a:	93 07       	cpc	r25, r19
    3d6c:	40 f0       	brcs	.+16     	; 0x3d7e <__vector_123+0x2cc>
		return (uart_head[idx] - uart_tail[idx]);
    3d6e:	8d 91       	ld	r24, X+
    3d70:	9c 91       	ld	r25, X
    3d72:	11 97       	sbiw	r26, 0x01	; 1
    3d74:	20 81       	ld	r18, Z
    3d76:	31 81       	ldd	r19, Z+1	; 0x01
    3d78:	82 1b       	sub	r24, r18
    3d7a:	93 0b       	sbc	r25, r19
    3d7c:	0b c0       	rjmp	.+22     	; 0x3d94 <__vector_123+0x2e2>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    3d7e:	d4 01       	movw	r26, r8
    3d80:	8d 91       	ld	r24, X+
    3d82:	9c 91       	ld	r25, X
    3d84:	11 97       	sbiw	r26, 0x01	; 1
    3d86:	f6 01       	movw	r30, r12
    3d88:	20 81       	ld	r18, Z
    3d8a:	31 81       	ldd	r19, Z+1	; 0x01
    3d8c:	80 50       	subi	r24, 0x00	; 0
    3d8e:	9c 4f       	sbci	r25, 0xFC	; 252
    3d90:	82 1b       	sub	r24, r18
    3d92:	93 0b       	sbc	r25, r19
}

void inline uart_transmit_lcd(USART_t* port){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0) && (lcd_flow_control == LCD_READY)){
    3d94:	00 97       	sbiw	r24, 0x00	; 0
    3d96:	29 f0       	breq	.+10     	; 0x3da2 <__vector_123+0x2f0>
    3d98:	80 91 ab 26 	lds	r24, 0x26AB
    3d9c:	82 35       	cpi	r24, 0x52	; 82
    3d9e:	09 f4       	brne	.+2      	; 0x3da2 <__vector_123+0x2f0>
    3da0:	b8 ce       	rjmp	.-656    	; 0x3b12 <__vector_123+0x60>
		if (toSend == 0x0D) {lcd_flow_control = LCD_BUSY;}
		uart_enqueue(&udata, '`'); //xxx - echo to data port
		uart_enqueue(&udata, toSend); //xxx - echo to data port
		port->DATA = toSend;
	}
	uart_txbuffer_disable(port); //implemented this way to prevent periodic stalls that happen when uart_txbuffer isn't disabled quickly enough
    3da2:	80 eb       	ldi	r24, 0xB0	; 176
    3da4:	9b e0       	ldi	r25, 0x0B	; 11
    3da6:	0e 94 14 19 	call	0x3228	; 0x3228 <uart_txbuffer_disable>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    3daa:	20 91 c3 32 	lds	r18, 0x32C3
    3dae:	30 91 c4 32 	lds	r19, 0x32C4
    3db2:	80 91 cf 3e 	lds	r24, 0x3ECF
    3db6:	90 91 d0 3e 	lds	r25, 0x3ED0
    3dba:	28 17       	cp	r18, r24
    3dbc:	39 07       	cpc	r19, r25
    3dbe:	58 f0       	brcs	.+22     	; 0x3dd6 <__vector_123+0x324>
		return (uart_head[idx] - uart_tail[idx]);
    3dc0:	80 91 c3 32 	lds	r24, 0x32C3
    3dc4:	90 91 c4 32 	lds	r25, 0x32C4
    3dc8:	20 91 cf 3e 	lds	r18, 0x3ECF
    3dcc:	30 91 d0 3e 	lds	r19, 0x3ED0
    3dd0:	82 1b       	sub	r24, r18
    3dd2:	93 0b       	sbc	r25, r19
    3dd4:	0c c0       	rjmp	.+24     	; 0x3dee <__vector_123+0x33c>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    3dd6:	80 91 c3 32 	lds	r24, 0x32C3
    3dda:	90 91 c4 32 	lds	r25, 0x32C4
    3dde:	20 91 cf 3e 	lds	r18, 0x3ECF
    3de2:	30 91 d0 3e 	lds	r19, 0x3ED0
    3de6:	80 50       	subi	r24, 0x00	; 0
    3de8:	9c 4f       	sbci	r25, 0xFC	; 252
    3dea:	82 1b       	sub	r24, r18
    3dec:	93 0b       	sbc	r25, r19
		uart_enqueue(&udata, '`'); //xxx - echo to data port
		uart_enqueue(&udata, toSend); //xxx - echo to data port
		port->DATA = toSend;
	}
	uart_txbuffer_disable(port); //implemented this way to prevent periodic stalls that happen when uart_txbuffer isn't disabled quickly enough
	if ((uart_count(port)>0) && (lcd_flow_control == LCD_READY)){ //...something is waiting to go out
    3dee:	00 97       	sbiw	r24, 0x00	; 0
    3df0:	41 f0       	breq	.+16     	; 0x3e02 <__vector_123+0x350>
    3df2:	80 91 ab 26 	lds	r24, 0x26AB
    3df6:	82 35       	cpi	r24, 0x52	; 82
    3df8:	21 f4       	brne	.+8      	; 0x3e02 <__vector_123+0x350>
		uart_txbuffer_enable(port);	
    3dfa:	80 eb       	ldi	r24, 0xB0	; 176
    3dfc:	9b e0       	ldi	r25, 0x0B	; 11
    3dfe:	0e 94 0f 19 	call	0x321e	; 0x321e <uart_txbuffer_enable>
//Must correspond to definitions in uart.h
ISR(USARTC0_DRE_vect) {uart_transmit(&uctrl);}//TX Interrupt
ISR(USARTC0_RXC_vect) {uart_receive(&uctrl);} //RX Interrupt
ISR(USARTC1_DRE_vect) {uart_transmit(&udata);}//TX Interrupt
ISR(USARTC1_RXC_vect) {uart_receive(&udata);} //RX Interrupt
ISR(USARTF1_DRE_vect) {uart_transmit_lcd(&ulcd);}//TX Interrupt
    3e02:	ff 91       	pop	r31
    3e04:	ef 91       	pop	r30
    3e06:	df 91       	pop	r29
    3e08:	cf 91       	pop	r28
    3e0a:	bf 91       	pop	r27
    3e0c:	af 91       	pop	r26
    3e0e:	9f 91       	pop	r25
    3e10:	8f 91       	pop	r24
    3e12:	7f 91       	pop	r23
    3e14:	6f 91       	pop	r22
    3e16:	5f 91       	pop	r21
    3e18:	4f 91       	pop	r20
    3e1a:	3f 91       	pop	r19
    3e1c:	2f 91       	pop	r18
    3e1e:	1f 91       	pop	r17
    3e20:	0f 91       	pop	r16
    3e22:	ff 90       	pop	r15
    3e24:	ef 90       	pop	r14
    3e26:	df 90       	pop	r13
    3e28:	cf 90       	pop	r12
    3e2a:	bf 90       	pop	r11
    3e2c:	af 90       	pop	r10
    3e2e:	9f 90       	pop	r9
    3e30:	8f 90       	pop	r8
    3e32:	7f 90       	pop	r7
    3e34:	6f 90       	pop	r6
    3e36:	5f 90       	pop	r5
    3e38:	4f 90       	pop	r4
    3e3a:	3f 90       	pop	r3
    3e3c:	0f 90       	pop	r0
    3e3e:	0b be       	out	0x3b, r0	; 59
    3e40:	0f 90       	pop	r0
    3e42:	0a be       	out	0x3a, r0	; 58
    3e44:	0f 90       	pop	r0
    3e46:	09 be       	out	0x39, r0	; 57
    3e48:	0f 90       	pop	r0
    3e4a:	08 be       	out	0x38, r0	; 56
    3e4c:	0f 90       	pop	r0
    3e4e:	0f be       	out	0x3f, r0	; 63
    3e50:	0f 90       	pop	r0
    3e52:	1f 90       	pop	r1
    3e54:	18 95       	reti

00003e56 <__vector_122>:
ISR(USARTF1_RXC_vect) {uart_receive_lcd(&ulcd);} //RX Interrupt
    3e56:	1f 92       	push	r1
    3e58:	0f 92       	push	r0
    3e5a:	0f b6       	in	r0, 0x3f	; 63
    3e5c:	0f 92       	push	r0
    3e5e:	08 b6       	in	r0, 0x38	; 56
    3e60:	0f 92       	push	r0
    3e62:	09 b6       	in	r0, 0x39	; 57
    3e64:	0f 92       	push	r0
    3e66:	0a b6       	in	r0, 0x3a	; 58
    3e68:	0f 92       	push	r0
    3e6a:	0b b6       	in	r0, 0x3b	; 59
    3e6c:	0f 92       	push	r0
    3e6e:	11 24       	eor	r1, r1
    3e70:	4f 92       	push	r4
    3e72:	5f 92       	push	r5
    3e74:	6f 92       	push	r6
    3e76:	7f 92       	push	r7
    3e78:	8f 92       	push	r8
    3e7a:	9f 92       	push	r9
    3e7c:	af 92       	push	r10
    3e7e:	bf 92       	push	r11
    3e80:	cf 92       	push	r12
    3e82:	df 92       	push	r13
    3e84:	ef 92       	push	r14
    3e86:	ff 92       	push	r15
    3e88:	0f 93       	push	r16
    3e8a:	1f 93       	push	r17
    3e8c:	2f 93       	push	r18
    3e8e:	3f 93       	push	r19
    3e90:	4f 93       	push	r20
    3e92:	5f 93       	push	r21
    3e94:	6f 93       	push	r22
    3e96:	7f 93       	push	r23
    3e98:	8f 93       	push	r24
    3e9a:	9f 93       	push	r25
    3e9c:	af 93       	push	r26
    3e9e:	bf 93       	push	r27
    3ea0:	cf 93       	push	r28
    3ea2:	df 93       	push	r29
    3ea4:	ef 93       	push	r30
    3ea6:	ff 93       	push	r31
}

void inline uart_receive_lcd(USART_t* port){
	uint8_t incomingByte;
	//keep receiving until data register is empty or incoming queue is full
	while (((port->STATUS & _BV(7)) == B8(10000000)) && (uart_icount(port) < MAX_IBUFFER_LEN)){
    3ea8:	0f 2e       	mov	r0, r31
    3eaa:	f0 eb       	ldi	r31, 0xB0	; 176
    3eac:	8f 2e       	mov	r8, r31
    3eae:	fb e0       	ldi	r31, 0x0B	; 11
    3eb0:	9f 2e       	mov	r9, r31
    3eb2:	f0 2d       	mov	r31, r0
	uart_itail[idx] = 0;
}

inline uint16_t uart_icount(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_ihead[idx] >= uart_itail[idx]){	
    3eb4:	0f 2e       	mov	r0, r31
    3eb6:	f9 ec       	ldi	r31, 0xC9	; 201
    3eb8:	af 2e       	mov	r10, r31
    3eba:	fe e3       	ldi	r31, 0x3E	; 62
    3ebc:	bf 2e       	mov	r11, r31
    3ebe:	f0 2d       	mov	r31, r0
    3ec0:	0f 2e       	mov	r0, r31
    3ec2:	fd eb       	ldi	r31, 0xBD	; 189
    3ec4:	6f 2e       	mov	r6, r31
    3ec6:	f6 e2       	ldi	r31, 0x26	; 38
    3ec8:	7f 2e       	mov	r7, r31
    3eca:	f0 2d       	mov	r31, r0
#ifndef UART_DEBUG
	uint8_t idx = port_map(port);
	
	//if (idx==0){uart_enqueue(&uctrl, datain);} //xxx
	
	uart_buffer[idx][uart_head[idx]] = datain;
    3ecc:	07 ec       	ldi	r16, 0xC7	; 199
    3ece:	12 e3       	ldi	r17, 0x32	; 50
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    3ed0:	0f 2e       	mov	r0, r31
    3ed2:	f0 eb       	ldi	r31, 0xB0	; 176
    3ed4:	ef 2e       	mov	r14, r31
    3ed6:	f8 e0       	ldi	r31, 0x08	; 8
    3ed8:	ff 2e       	mov	r15, r31
    3eda:	f0 2d       	mov	r31, r0
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    3edc:	c3 ed       	ldi	r28, 0xD3	; 211
    3ede:	de e3       	ldi	r29, 0x3E	; 62
	uint8_t incomingByte;
	//keep receiving until data register is empty or incoming queue is full
	while (((port->STATUS & _BV(7)) == B8(10000000)) && (uart_icount(port) < MAX_IBUFFER_LEN)){
		incomingByte = port->DATA;
		uart_enqueue(&udata, incomingByte); //xxx - echo to data port
		if (incomingByte == 0x0D) {lcd_flow_control = LCD_DONE_COMMAND;}
    3ee0:	0f 2e       	mov	r0, r31
    3ee2:	ff e4       	ldi	r31, 0x4F	; 79
    3ee4:	cf 2e       	mov	r12, r31
    3ee6:	f0 2d       	mov	r31, r0
	}
}

inline void uart_ienqueue(USART_t* port, uint8_t datain){
	uint8_t idx = port_map(port);
	uart_ibuffer[idx][uart_ihead[idx]] = datain;
    3ee8:	0f 2e       	mov	r0, r31
    3eea:	f3 ec       	ldi	r31, 0xC3	; 195
    3eec:	4f 2e       	mov	r4, r31
    3eee:	f6 e2       	ldi	r31, 0x26	; 38
    3ef0:	5f 2e       	mov	r5, r31
    3ef2:	f0 2d       	mov	r31, r0
    3ef4:	8d c0       	rjmp	.+282    	; 0x4010 <__stack+0x11>

void inline uart_receive_lcd(USART_t* port){
	uint8_t incomingByte;
	//keep receiving until data register is empty or incoming queue is full
	while (((port->STATUS & _BV(7)) == B8(10000000)) && (uart_icount(port) < MAX_IBUFFER_LEN)){
		incomingByte = port->DATA;
    3ef6:	f4 01       	movw	r30, r8
    3ef8:	d0 80       	ld	r13, Z
#ifndef UART_DEBUG
	uint8_t idx = port_map(port);
	
	//if (idx==0){uart_enqueue(&uctrl, datain);} //xxx
	
	uart_buffer[idx][uart_head[idx]] = datain;
    3efa:	f8 01       	movw	r30, r16
    3efc:	80 81       	ld	r24, Z
    3efe:	91 81       	ldd	r25, Z+1	; 0x01
    3f00:	87 53       	subi	r24, 0x37	; 55
    3f02:	95 4c       	sbci	r25, 0xC5	; 197
    3f04:	fc 01       	movw	r30, r24
    3f06:	d0 82       	st	Z, r13
	uart_head[idx]++;
    3f08:	f8 01       	movw	r30, r16
    3f0a:	80 81       	ld	r24, Z
    3f0c:	91 81       	ldd	r25, Z+1	; 0x01
    3f0e:	01 96       	adiw	r24, 0x01	; 1
    3f10:	80 83       	st	Z, r24
    3f12:	91 83       	std	Z+1, r25	; 0x01
	if (uart_head[idx] >= MAX_BUFFER_LEN){
    3f14:	80 81       	ld	r24, Z
    3f16:	91 81       	ldd	r25, Z+1	; 0x01
    3f18:	f4 e0       	ldi	r31, 0x04	; 4
    3f1a:	80 30       	cpi	r24, 0x00	; 0
    3f1c:	9f 07       	cpc	r25, r31
    3f1e:	18 f0       	brcs	.+6      	; 0x3f26 <__vector_122+0xd0>
		uart_head[idx] = 0;
    3f20:	f8 01       	movw	r30, r16
    3f22:	10 82       	st	Z, r1
    3f24:	11 82       	std	Z+1, r1	; 0x01
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    3f26:	f7 01       	movw	r30, r14
    3f28:	81 81       	ldd	r24, Z+1	; 0x01
    3f2a:	85 fd       	sbrc	r24, 5
    3f2c:	18 c0       	rjmp	.+48     	; 0x3f5e <__vector_122+0x108>
    3f2e:	31 c0       	rjmp	.+98     	; 0x3f92 <__vector_122+0x13c>
}

inline uint8_t uart_dequeue(USART_t* port){
	uint8_t idx = port_map(port);
	uint16_t oldtail;
	oldtail = uart_tail[idx];
    3f30:	e8 81       	ld	r30, Y
    3f32:	f9 81       	ldd	r31, Y+1	; 0x01
	uart_tail[idx]++;
    3f34:	88 81       	ld	r24, Y
    3f36:	99 81       	ldd	r25, Y+1	; 0x01
    3f38:	01 96       	adiw	r24, 0x01	; 1
    3f3a:	88 83       	st	Y, r24
    3f3c:	99 83       	std	Y+1, r25	; 0x01
	if (uart_tail[idx] >= MAX_BUFFER_LEN){
    3f3e:	88 81       	ld	r24, Y
    3f40:	99 81       	ldd	r25, Y+1	; 0x01
    3f42:	24 e0       	ldi	r18, 0x04	; 4
    3f44:	80 30       	cpi	r24, 0x00	; 0
    3f46:	92 07       	cpc	r25, r18
    3f48:	10 f0       	brcs	.+4      	; 0x3f4e <__vector_122+0xf8>
		uart_tail[idx] = 0;
    3f4a:	18 82       	st	Y, r1
    3f4c:	19 82       	std	Y+1, r1	; 0x01
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    3f4e:	e7 53       	subi	r30, 0x37	; 55
    3f50:	f5 4c       	sbci	r31, 0xC5	; 197
    3f52:	80 81       	ld	r24, Z
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
    3f54:	f7 01       	movw	r30, r14
    3f56:	80 83       	st	Z, r24
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    3f58:	81 81       	ldd	r24, Z+1	; 0x01
    3f5a:	85 ff       	sbrs	r24, 5
    3f5c:	1a c0       	rjmp	.+52     	; 0x3f92 <__vector_122+0x13c>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    3f5e:	f8 01       	movw	r30, r16
    3f60:	80 81       	ld	r24, Z
    3f62:	91 81       	ldd	r25, Z+1	; 0x01
    3f64:	28 81       	ld	r18, Y
    3f66:	39 81       	ldd	r19, Y+1	; 0x01
    3f68:	82 17       	cp	r24, r18
    3f6a:	93 07       	cpc	r25, r19
    3f6c:	38 f0       	brcs	.+14     	; 0x3f7c <__vector_122+0x126>
		return (uart_head[idx] - uart_tail[idx]);
    3f6e:	80 81       	ld	r24, Z
    3f70:	91 81       	ldd	r25, Z+1	; 0x01
    3f72:	28 81       	ld	r18, Y
    3f74:	39 81       	ldd	r19, Y+1	; 0x01
    3f76:	82 1b       	sub	r24, r18
    3f78:	93 0b       	sbc	r25, r19
    3f7a:	09 c0       	rjmp	.+18     	; 0x3f8e <__vector_122+0x138>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    3f7c:	f8 01       	movw	r30, r16
    3f7e:	80 81       	ld	r24, Z
    3f80:	91 81       	ldd	r25, Z+1	; 0x01
    3f82:	28 81       	ld	r18, Y
    3f84:	39 81       	ldd	r19, Y+1	; 0x01
    3f86:	80 50       	subi	r24, 0x00	; 0
    3f88:	9c 4f       	sbci	r25, 0xFC	; 252
    3f8a:	82 1b       	sub	r24, r18
    3f8c:	93 0b       	sbc	r25, r19
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    3f8e:	00 97       	sbiw	r24, 0x00	; 0
    3f90:	79 f6       	brne	.-98     	; 0x3f30 <__vector_122+0xda>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    3f92:	f8 01       	movw	r30, r16
    3f94:	80 81       	ld	r24, Z
    3f96:	91 81       	ldd	r25, Z+1	; 0x01
    3f98:	28 81       	ld	r18, Y
    3f9a:	39 81       	ldd	r19, Y+1	; 0x01
    3f9c:	82 17       	cp	r24, r18
    3f9e:	93 07       	cpc	r25, r19
    3fa0:	38 f0       	brcs	.+14     	; 0x3fb0 <__vector_122+0x15a>
		return (uart_head[idx] - uart_tail[idx]);
    3fa2:	80 81       	ld	r24, Z
    3fa4:	91 81       	ldd	r25, Z+1	; 0x01
    3fa6:	28 81       	ld	r18, Y
    3fa8:	39 81       	ldd	r19, Y+1	; 0x01
    3faa:	82 1b       	sub	r24, r18
    3fac:	93 0b       	sbc	r25, r19
    3fae:	09 c0       	rjmp	.+18     	; 0x3fc2 <__vector_122+0x16c>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    3fb0:	f8 01       	movw	r30, r16
    3fb2:	80 81       	ld	r24, Z
    3fb4:	91 81       	ldd	r25, Z+1	; 0x01
    3fb6:	28 81       	ld	r18, Y
    3fb8:	39 81       	ldd	r19, Y+1	; 0x01
    3fba:	80 50       	subi	r24, 0x00	; 0
    3fbc:	9c 4f       	sbci	r25, 0xFC	; 252
    3fbe:	82 1b       	sub	r24, r18
    3fc0:	93 0b       	sbc	r25, r19
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
	}
	//disable the tx outgoing hardware buffer ready interrupt if we have nothing more to put in it.
	if(uart_count(port)>0) uart_txbuffer_enable(port);
    3fc2:	00 97       	sbiw	r24, 0x00	; 0
    3fc4:	21 f0       	breq	.+8      	; 0x3fce <__vector_122+0x178>
    3fc6:	c7 01       	movw	r24, r14
    3fc8:	0e 94 0f 19 	call	0x321e	; 0x321e <uart_txbuffer_enable>
    3fcc:	03 c0       	rjmp	.+6      	; 0x3fd4 <__vector_122+0x17e>
	else uart_txbuffer_disable(port);
    3fce:	c7 01       	movw	r24, r14
    3fd0:	0e 94 14 19 	call	0x3228	; 0x3228 <uart_txbuffer_disable>
	uint8_t incomingByte;
	//keep receiving until data register is empty or incoming queue is full
	while (((port->STATUS & _BV(7)) == B8(10000000)) && (uart_icount(port) < MAX_IBUFFER_LEN)){
		incomingByte = port->DATA;
		uart_enqueue(&udata, incomingByte); //xxx - echo to data port
		if (incomingByte == 0x0D) {lcd_flow_control = LCD_DONE_COMMAND;}
    3fd4:	fd e0       	ldi	r31, 0x0D	; 13
    3fd6:	df 16       	cp	r13, r31
    3fd8:	11 f4       	brne	.+4      	; 0x3fde <__vector_122+0x188>
    3fda:	c0 92 ab 26 	sts	0x26AB, r12
		lcd_set_touch(incomingByte); //write to touch-command listener
    3fde:	8d 2d       	mov	r24, r13
    3fe0:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <lcd_set_touch>
	}
}

inline void uart_ienqueue(USART_t* port, uint8_t datain){
	uint8_t idx = port_map(port);
	uart_ibuffer[idx][uart_ihead[idx]] = datain;
    3fe4:	f5 01       	movw	r30, r10
    3fe6:	80 81       	ld	r24, Z
    3fe8:	91 81       	ldd	r25, Z+1	; 0x01
    3fea:	84 0d       	add	r24, r4
    3fec:	95 1d       	adc	r25, r5
    3fee:	fc 01       	movw	r30, r24
    3ff0:	d0 82       	st	Z, r13
	uart_ihead[idx]++;
    3ff2:	f5 01       	movw	r30, r10
    3ff4:	80 81       	ld	r24, Z
    3ff6:	91 81       	ldd	r25, Z+1	; 0x01
    3ff8:	01 96       	adiw	r24, 0x01	; 1
    3ffa:	80 83       	st	Z, r24
    3ffc:	91 83       	std	Z+1, r25	; 0x01
	if (uart_ihead[idx] >= MAX_IBUFFER_LEN){
    3ffe:	80 81       	ld	r24, Z
    4000:	91 81       	ldd	r25, Z+1	; 0x01
    4002:	f4 e0       	ldi	r31, 0x04	; 4
    4004:	80 30       	cpi	r24, 0x00	; 0
    4006:	9f 07       	cpc	r25, r31
    4008:	18 f0       	brcs	.+6      	; 0x4010 <__stack+0x11>
		uart_ihead[idx] = 0;
    400a:	f5 01       	movw	r30, r10
    400c:	10 82       	st	Z, r1
    400e:	11 82       	std	Z+1, r1	; 0x01
}

void inline uart_receive_lcd(USART_t* port){
	uint8_t incomingByte;
	//keep receiving until data register is empty or incoming queue is full
	while (((port->STATUS & _BV(7)) == B8(10000000)) && (uart_icount(port) < MAX_IBUFFER_LEN)){
    4010:	f4 01       	movw	r30, r8
    4012:	81 81       	ldd	r24, Z+1	; 0x01
    4014:	88 23       	and	r24, r24
    4016:	0c f5       	brge	.+66     	; 0x405a <__stack+0x5b>
	uart_itail[idx] = 0;
}

inline uint16_t uart_icount(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_ihead[idx] >= uart_itail[idx]){	
    4018:	f5 01       	movw	r30, r10
    401a:	80 81       	ld	r24, Z
    401c:	91 81       	ldd	r25, Z+1	; 0x01
    401e:	f3 01       	movw	r30, r6
    4020:	20 81       	ld	r18, Z
    4022:	31 81       	ldd	r19, Z+1	; 0x01
    4024:	82 17       	cp	r24, r18
    4026:	93 07       	cpc	r25, r19
    4028:	48 f0       	brcs	.+18     	; 0x403c <__stack+0x3d>
		return (uart_ihead[idx] - uart_itail[idx]);
    402a:	f5 01       	movw	r30, r10
    402c:	80 81       	ld	r24, Z
    402e:	91 81       	ldd	r25, Z+1	; 0x01
    4030:	f3 01       	movw	r30, r6
    4032:	20 81       	ld	r18, Z
    4034:	31 81       	ldd	r19, Z+1	; 0x01
    4036:	82 1b       	sub	r24, r18
    4038:	93 0b       	sbc	r25, r19
    403a:	0a c0       	rjmp	.+20     	; 0x4050 <__stack+0x51>
	}
	else {
		return ((MAX_IBUFFER_LEN-uart_itail[idx])+uart_ihead[idx]);
    403c:	f5 01       	movw	r30, r10
    403e:	80 81       	ld	r24, Z
    4040:	91 81       	ldd	r25, Z+1	; 0x01
    4042:	f3 01       	movw	r30, r6
    4044:	20 81       	ld	r18, Z
    4046:	31 81       	ldd	r19, Z+1	; 0x01
    4048:	80 50       	subi	r24, 0x00	; 0
    404a:	9c 4f       	sbci	r25, 0xFC	; 252
    404c:	82 1b       	sub	r24, r18
    404e:	93 0b       	sbc	r25, r19
}

void inline uart_receive_lcd(USART_t* port){
	uint8_t incomingByte;
	//keep receiving until data register is empty or incoming queue is full
	while (((port->STATUS & _BV(7)) == B8(10000000)) && (uart_icount(port) < MAX_IBUFFER_LEN)){
    4050:	f4 e0       	ldi	r31, 0x04	; 4
    4052:	80 30       	cpi	r24, 0x00	; 0
    4054:	9f 07       	cpc	r25, r31
    4056:	08 f4       	brcc	.+2      	; 0x405a <__stack+0x5b>
    4058:	4e cf       	rjmp	.-356    	; 0x3ef6 <__vector_122+0xa0>
ISR(USARTC0_DRE_vect) {uart_transmit(&uctrl);}//TX Interrupt
ISR(USARTC0_RXC_vect) {uart_receive(&uctrl);} //RX Interrupt
ISR(USARTC1_DRE_vect) {uart_transmit(&udata);}//TX Interrupt
ISR(USARTC1_RXC_vect) {uart_receive(&udata);} //RX Interrupt
ISR(USARTF1_DRE_vect) {uart_transmit_lcd(&ulcd);}//TX Interrupt
ISR(USARTF1_RXC_vect) {uart_receive_lcd(&ulcd);} //RX Interrupt
    405a:	ff 91       	pop	r31
    405c:	ef 91       	pop	r30
    405e:	df 91       	pop	r29
    4060:	cf 91       	pop	r28
    4062:	bf 91       	pop	r27
    4064:	af 91       	pop	r26
    4066:	9f 91       	pop	r25
    4068:	8f 91       	pop	r24
    406a:	7f 91       	pop	r23
    406c:	6f 91       	pop	r22
    406e:	5f 91       	pop	r21
    4070:	4f 91       	pop	r20
    4072:	3f 91       	pop	r19
    4074:	2f 91       	pop	r18
    4076:	1f 91       	pop	r17
    4078:	0f 91       	pop	r16
    407a:	ff 90       	pop	r15
    407c:	ef 90       	pop	r14
    407e:	df 90       	pop	r13
    4080:	cf 90       	pop	r12
    4082:	bf 90       	pop	r11
    4084:	af 90       	pop	r10
    4086:	9f 90       	pop	r9
    4088:	8f 90       	pop	r8
    408a:	7f 90       	pop	r7
    408c:	6f 90       	pop	r6
    408e:	5f 90       	pop	r5
    4090:	4f 90       	pop	r4
    4092:	0f 90       	pop	r0
    4094:	0b be       	out	0x3b, r0	; 59
    4096:	0f 90       	pop	r0
    4098:	0a be       	out	0x3a, r0	; 58
    409a:	0f 90       	pop	r0
    409c:	09 be       	out	0x39, r0	; 57
    409e:	0f 90       	pop	r0
    40a0:	08 be       	out	0x38, r0	; 56
    40a2:	0f 90       	pop	r0
    40a4:	0f be       	out	0x3f, r0	; 63
    40a6:	0f 90       	pop	r0
    40a8:	1f 90       	pop	r1
    40aa:	18 95       	reti

000040ac <uart_receive>:

//==================================
//= RECEPTION ENGINE (ISR BASED)
//==================================

void inline uart_receive(USART_t* port){
    40ac:	cf 92       	push	r12
    40ae:	df 92       	push	r13
    40b0:	ef 92       	push	r14
    40b2:	ff 92       	push	r15
    40b4:	0f 93       	push	r16
    40b6:	1f 93       	push	r17
    40b8:	cf 93       	push	r28
    40ba:	df 93       	push	r29
    40bc:	dc 01       	movw	r26, r24
	uart_itail[idx] = 0;
}

inline uint16_t uart_icount(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_ihead[idx] >= uart_itail[idx]){	
    40be:	0f 2e       	mov	r0, r31
    40c0:	f9 ec       	ldi	r31, 0xC9	; 201
    40c2:	cf 2e       	mov	r12, r31
    40c4:	fe e3       	ldi	r31, 0x3E	; 62
    40c6:	df 2e       	mov	r13, r31
    40c8:	f0 2d       	mov	r31, r0
    40ca:	0d eb       	ldi	r16, 0xBD	; 189
    40cc:	16 e2       	ldi	r17, 0x26	; 38
	}
}

inline void uart_ienqueue(USART_t* port, uint8_t datain){
	uint8_t idx = port_map(port);
	uart_ibuffer[idx][uart_ihead[idx]] = datain;
    40ce:	0f 2e       	mov	r0, r31
    40d0:	f3 ec       	ldi	r31, 0xC3	; 195
    40d2:	ef 2e       	mov	r14, r31
    40d4:	f6 e2       	ldi	r31, 0x26	; 38
    40d6:	ff 2e       	mov	r15, r31
    40d8:	f0 2d       	mov	r31, r0
//= RECEPTION ENGINE (ISR BASED)
//==================================

void inline uart_receive(USART_t* port){
	//keep receiving until data register is empty or incoming queue is full
	while (((port->STATUS & _BV(7)) == B8(10000000)) && (uart_icount(port) < MAX_IBUFFER_LEN)){		
    40da:	3a c0       	rjmp	.+116    	; 0x4150 <uart_receive+0xa4>
		uart_ienqueue(port, port->DATA);
    40dc:	4c 91       	ld	r20, X
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    40de:	2b e0       	ldi	r18, 0x0B	; 11
    40e0:	a0 3b       	cpi	r26, 0xB0	; 176
    40e2:	b2 07       	cpc	r27, r18
    40e4:	51 f0       	breq	.+20     	; 0x40fa <uart_receive+0x4e>
	if (port == &uctrl) {return 1;}
    40e6:	38 e0       	ldi	r19, 0x08	; 8
    40e8:	a0 3a       	cpi	r26, 0xA0	; 160
    40ea:	b3 07       	cpc	r27, r19
    40ec:	41 f0       	breq	.+16     	; 0x40fe <uart_receive+0x52>
	if (port == &udata) {return 2;}
    40ee:	88 e0       	ldi	r24, 0x08	; 8
    40f0:	a0 3b       	cpi	r26, 0xB0	; 176
    40f2:	b8 07       	cpc	r27, r24
    40f4:	31 f4       	brne	.+12     	; 0x4102 <uart_receive+0x56>
    40f6:	62 e0       	ldi	r22, 0x02	; 2
    40f8:	05 c0       	rjmp	.+10     	; 0x4104 <uart_receive+0x58>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    40fa:	60 e0       	ldi	r22, 0x00	; 0
    40fc:	03 c0       	rjmp	.+6      	; 0x4104 <uart_receive+0x58>
	if (port == &uctrl) {return 1;}
    40fe:	61 e0       	ldi	r22, 0x01	; 1
    4100:	01 c0       	rjmp	.+2      	; 0x4104 <uart_receive+0x58>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    4102:	60 e0       	ldi	r22, 0x00	; 0
	}
}

inline void uart_ienqueue(USART_t* port, uint8_t datain){
	uint8_t idx = port_map(port);
	uart_ibuffer[idx][uart_ihead[idx]] = datain;
    4104:	70 e0       	ldi	r23, 0x00	; 0
    4106:	cb 01       	movw	r24, r22
    4108:	88 0f       	add	r24, r24
    410a:	99 1f       	adc	r25, r25
    410c:	f6 01       	movw	r30, r12
    410e:	e8 0f       	add	r30, r24
    4110:	f9 1f       	adc	r31, r25
    4112:	20 81       	ld	r18, Z
    4114:	31 81       	ldd	r19, Z+1	; 0x01
    4116:	cb 01       	movw	r24, r22
    4118:	98 2f       	mov	r25, r24
    411a:	88 27       	eor	r24, r24
    411c:	99 0f       	add	r25, r25
    411e:	99 0f       	add	r25, r25
    4120:	82 0f       	add	r24, r18
    4122:	93 1f       	adc	r25, r19
    4124:	8e 0d       	add	r24, r14
    4126:	9f 1d       	adc	r25, r15
    4128:	ec 01       	movw	r28, r24
    412a:	48 83       	st	Y, r20
	uart_ihead[idx]++;
    412c:	80 81       	ld	r24, Z
    412e:	91 81       	ldd	r25, Z+1	; 0x01
    4130:	01 96       	adiw	r24, 0x01	; 1
    4132:	80 83       	st	Z, r24
    4134:	91 83       	std	Z+1, r25	; 0x01
	if (uart_ihead[idx] >= MAX_IBUFFER_LEN){
    4136:	80 81       	ld	r24, Z
    4138:	91 81       	ldd	r25, Z+1	; 0x01
    413a:	d4 e0       	ldi	r29, 0x04	; 4
    413c:	80 30       	cpi	r24, 0x00	; 0
    413e:	9d 07       	cpc	r25, r29
    4140:	38 f0       	brcs	.+14     	; 0x4150 <uart_receive+0xa4>
		uart_ihead[idx] = 0;
    4142:	fb 01       	movw	r30, r22
    4144:	ee 0f       	add	r30, r30
    4146:	ff 1f       	adc	r31, r31
    4148:	ec 0d       	add	r30, r12
    414a:	fd 1d       	adc	r31, r13
    414c:	10 82       	st	Z, r1
    414e:	11 82       	std	Z+1, r1	; 0x01
//= RECEPTION ENGINE (ISR BASED)
//==================================

void inline uart_receive(USART_t* port){
	//keep receiving until data register is empty or incoming queue is full
	while (((port->STATUS & _BV(7)) == B8(10000000)) && (uart_icount(port) < MAX_IBUFFER_LEN)){		
    4150:	11 96       	adiw	r26, 0x01	; 1
    4152:	8c 91       	ld	r24, X
    4154:	11 97       	sbiw	r26, 0x01	; 1
    4156:	88 23       	and	r24, r24
    4158:	0c f0       	brlt	.+2      	; 0x415c <uart_receive+0xb0>
    415a:	4c c0       	rjmp	.+152    	; 0x41f4 <uart_receive+0x148>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    415c:	2b e0       	ldi	r18, 0x0B	; 11
    415e:	a0 3b       	cpi	r26, 0xB0	; 176
    4160:	b2 07       	cpc	r27, r18
    4162:	51 f0       	breq	.+20     	; 0x4178 <uart_receive+0xcc>
	if (port == &uctrl) {return 1;}
    4164:	38 e0       	ldi	r19, 0x08	; 8
    4166:	a0 3a       	cpi	r26, 0xA0	; 160
    4168:	b3 07       	cpc	r27, r19
    416a:	41 f0       	breq	.+16     	; 0x417c <uart_receive+0xd0>
	if (port == &udata) {return 2;}
    416c:	88 e0       	ldi	r24, 0x08	; 8
    416e:	a0 3b       	cpi	r26, 0xB0	; 176
    4170:	b8 07       	cpc	r27, r24
    4172:	31 f4       	brne	.+12     	; 0x4180 <uart_receive+0xd4>
    4174:	22 e0       	ldi	r18, 0x02	; 2
    4176:	05 c0       	rjmp	.+10     	; 0x4182 <uart_receive+0xd6>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    4178:	20 e0       	ldi	r18, 0x00	; 0
    417a:	03 c0       	rjmp	.+6      	; 0x4182 <uart_receive+0xd6>
	if (port == &uctrl) {return 1;}
    417c:	21 e0       	ldi	r18, 0x01	; 1
    417e:	01 c0       	rjmp	.+2      	; 0x4182 <uart_receive+0xd6>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    4180:	20 e0       	ldi	r18, 0x00	; 0
	uart_itail[idx] = 0;
}

inline uint16_t uart_icount(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_ihead[idx] >= uart_itail[idx]){	
    4182:	30 e0       	ldi	r19, 0x00	; 0
    4184:	c9 01       	movw	r24, r18
    4186:	88 0f       	add	r24, r24
    4188:	99 1f       	adc	r25, r25
    418a:	f6 01       	movw	r30, r12
    418c:	e8 0f       	add	r30, r24
    418e:	f9 1f       	adc	r31, r25
    4190:	40 81       	ld	r20, Z
    4192:	51 81       	ldd	r21, Z+1	; 0x01
    4194:	f8 01       	movw	r30, r16
    4196:	e8 0f       	add	r30, r24
    4198:	f9 1f       	adc	r31, r25
    419a:	80 81       	ld	r24, Z
    419c:	91 81       	ldd	r25, Z+1	; 0x01
    419e:	48 17       	cp	r20, r24
    41a0:	59 07       	cpc	r21, r25
    41a2:	88 f0       	brcs	.+34     	; 0x41c6 <uart_receive+0x11a>
		return (uart_ihead[idx] - uart_itail[idx]);
    41a4:	22 0f       	add	r18, r18
    41a6:	33 1f       	adc	r19, r19
    41a8:	f6 01       	movw	r30, r12
    41aa:	e2 0f       	add	r30, r18
    41ac:	f3 1f       	adc	r31, r19
    41ae:	40 81       	ld	r20, Z
    41b0:	51 81       	ldd	r21, Z+1	; 0x01
    41b2:	f8 01       	movw	r30, r16
    41b4:	e2 0f       	add	r30, r18
    41b6:	f3 1f       	adc	r31, r19
    41b8:	80 81       	ld	r24, Z
    41ba:	91 81       	ldd	r25, Z+1	; 0x01
    41bc:	ea 01       	movw	r28, r20
    41be:	c8 1b       	sub	r28, r24
    41c0:	d9 0b       	sbc	r29, r25
    41c2:	ce 01       	movw	r24, r28
    41c4:	12 c0       	rjmp	.+36     	; 0x41ea <uart_receive+0x13e>
	}
	else {
		return ((MAX_IBUFFER_LEN-uart_itail[idx])+uart_ihead[idx]);
    41c6:	c9 01       	movw	r24, r18
    41c8:	88 0f       	add	r24, r24
    41ca:	99 1f       	adc	r25, r25
    41cc:	f6 01       	movw	r30, r12
    41ce:	e8 0f       	add	r30, r24
    41d0:	f9 1f       	adc	r31, r25
    41d2:	40 81       	ld	r20, Z
    41d4:	51 81       	ldd	r21, Z+1	; 0x01
    41d6:	f8 01       	movw	r30, r16
    41d8:	e8 0f       	add	r30, r24
    41da:	f9 1f       	adc	r31, r25
    41dc:	20 81       	ld	r18, Z
    41de:	31 81       	ldd	r19, Z+1	; 0x01
    41e0:	ca 01       	movw	r24, r20
    41e2:	80 50       	subi	r24, 0x00	; 0
    41e4:	9c 4f       	sbci	r25, 0xFC	; 252
    41e6:	82 1b       	sub	r24, r18
    41e8:	93 0b       	sbc	r25, r19
//= RECEPTION ENGINE (ISR BASED)
//==================================

void inline uart_receive(USART_t* port){
	//keep receiving until data register is empty or incoming queue is full
	while (((port->STATUS & _BV(7)) == B8(10000000)) && (uart_icount(port) < MAX_IBUFFER_LEN)){		
    41ea:	d4 e0       	ldi	r29, 0x04	; 4
    41ec:	80 30       	cpi	r24, 0x00	; 0
    41ee:	9d 07       	cpc	r25, r29
    41f0:	08 f4       	brcc	.+2      	; 0x41f4 <uart_receive+0x148>
    41f2:	74 cf       	rjmp	.-280    	; 0x40dc <uart_receive+0x30>
		uart_ienqueue(port, port->DATA);
	}	
}
    41f4:	df 91       	pop	r29
    41f6:	cf 91       	pop	r28
    41f8:	1f 91       	pop	r17
    41fa:	0f 91       	pop	r16
    41fc:	ff 90       	pop	r15
    41fe:	ef 90       	pop	r14
    4200:	df 90       	pop	r13
    4202:	cf 90       	pop	r12
    4204:	08 95       	ret

00004206 <uart_receive_lcd>:

void inline uart_receive_lcd(USART_t* port){
    4206:	4f 92       	push	r4
    4208:	5f 92       	push	r5
    420a:	6f 92       	push	r6
    420c:	7f 92       	push	r7
    420e:	8f 92       	push	r8
    4210:	9f 92       	push	r9
    4212:	af 92       	push	r10
    4214:	bf 92       	push	r11
    4216:	cf 92       	push	r12
    4218:	df 92       	push	r13
    421a:	ef 92       	push	r14
    421c:	ff 92       	push	r15
    421e:	0f 93       	push	r16
    4220:	1f 93       	push	r17
    4222:	cf 93       	push	r28
    4224:	df 93       	push	r29
    4226:	5c 01       	movw	r10, r24
	uart_itail[idx] = 0;
}

inline uint16_t uart_icount(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_ihead[idx] >= uart_itail[idx]){	
    4228:	0f 2e       	mov	r0, r31
    422a:	f9 ec       	ldi	r31, 0xC9	; 201
    422c:	8f 2e       	mov	r8, r31
    422e:	fe e3       	ldi	r31, 0x3E	; 62
    4230:	9f 2e       	mov	r9, r31
    4232:	f0 2d       	mov	r31, r0
    4234:	0f 2e       	mov	r0, r31
    4236:	fd eb       	ldi	r31, 0xBD	; 189
    4238:	6f 2e       	mov	r6, r31
    423a:	f6 e2       	ldi	r31, 0x26	; 38
    423c:	7f 2e       	mov	r7, r31
    423e:	f0 2d       	mov	r31, r0
#ifndef UART_DEBUG
	uint8_t idx = port_map(port);
	
	//if (idx==0){uart_enqueue(&uctrl, datain);} //xxx
	
	uart_buffer[idx][uart_head[idx]] = datain;
    4240:	07 ec       	ldi	r16, 0xC7	; 199
    4242:	12 e3       	ldi	r17, 0x32	; 50
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    4244:	0f 2e       	mov	r0, r31
    4246:	f0 eb       	ldi	r31, 0xB0	; 176
    4248:	ef 2e       	mov	r14, r31
    424a:	f8 e0       	ldi	r31, 0x08	; 8
    424c:	ff 2e       	mov	r15, r31
    424e:	f0 2d       	mov	r31, r0
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    4250:	c3 ed       	ldi	r28, 0xD3	; 211
    4252:	de e3       	ldi	r29, 0x3E	; 62
	uint8_t incomingByte;
	//keep receiving until data register is empty or incoming queue is full
	while (((port->STATUS & _BV(7)) == B8(10000000)) && (uart_icount(port) < MAX_IBUFFER_LEN)){
		incomingByte = port->DATA;
		uart_enqueue(&udata, incomingByte); //xxx - echo to data port
		if (incomingByte == 0x0D) {lcd_flow_control = LCD_DONE_COMMAND;}
    4254:	0f 2e       	mov	r0, r31
    4256:	ff e4       	ldi	r31, 0x4F	; 79
    4258:	cf 2e       	mov	r12, r31
    425a:	f0 2d       	mov	r31, r0
	}
}

inline void uart_ienqueue(USART_t* port, uint8_t datain){
	uint8_t idx = port_map(port);
	uart_ibuffer[idx][uart_ihead[idx]] = datain;
    425c:	0f 2e       	mov	r0, r31
    425e:	f3 ec       	ldi	r31, 0xC3	; 195
    4260:	4f 2e       	mov	r4, r31
    4262:	f6 e2       	ldi	r31, 0x26	; 38
    4264:	5f 2e       	mov	r5, r31
    4266:	f0 2d       	mov	r31, r0
}

void inline uart_receive_lcd(USART_t* port){
	uint8_t incomingByte;
	//keep receiving until data register is empty or incoming queue is full
	while (((port->STATUS & _BV(7)) == B8(10000000)) && (uart_icount(port) < MAX_IBUFFER_LEN)){
    4268:	ac c0       	rjmp	.+344    	; 0x43c2 <uart_receive_lcd+0x1bc>
		incomingByte = port->DATA;
    426a:	d5 01       	movw	r26, r10
    426c:	dc 90       	ld	r13, X
#ifndef UART_DEBUG
	uint8_t idx = port_map(port);
	
	//if (idx==0){uart_enqueue(&uctrl, datain);} //xxx
	
	uart_buffer[idx][uart_head[idx]] = datain;
    426e:	f8 01       	movw	r30, r16
    4270:	80 81       	ld	r24, Z
    4272:	91 81       	ldd	r25, Z+1	; 0x01
    4274:	87 53       	subi	r24, 0x37	; 55
    4276:	95 4c       	sbci	r25, 0xC5	; 197
    4278:	dc 01       	movw	r26, r24
    427a:	dc 92       	st	X, r13
	uart_head[idx]++;
    427c:	80 81       	ld	r24, Z
    427e:	91 81       	ldd	r25, Z+1	; 0x01
    4280:	01 96       	adiw	r24, 0x01	; 1
    4282:	80 83       	st	Z, r24
    4284:	91 83       	std	Z+1, r25	; 0x01
	if (uart_head[idx] >= MAX_BUFFER_LEN){
    4286:	80 81       	ld	r24, Z
    4288:	91 81       	ldd	r25, Z+1	; 0x01
    428a:	b4 e0       	ldi	r27, 0x04	; 4
    428c:	80 30       	cpi	r24, 0x00	; 0
    428e:	9b 07       	cpc	r25, r27
    4290:	10 f0       	brcs	.+4      	; 0x4296 <uart_receive_lcd+0x90>
		uart_head[idx] = 0;
    4292:	10 82       	st	Z, r1
    4294:	11 82       	std	Z+1, r1	; 0x01
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    4296:	f7 01       	movw	r30, r14
    4298:	81 81       	ldd	r24, Z+1	; 0x01
    429a:	85 fd       	sbrc	r24, 5
    429c:	1a c0       	rjmp	.+52     	; 0x42d2 <uart_receive_lcd+0xcc>
    429e:	32 c0       	rjmp	.+100    	; 0x4304 <uart_receive_lcd+0xfe>
}

inline uint8_t uart_dequeue(USART_t* port){
	uint8_t idx = port_map(port);
	uint16_t oldtail;
	oldtail = uart_tail[idx];
    42a0:	e8 81       	ld	r30, Y
    42a2:	f9 81       	ldd	r31, Y+1	; 0x01
	uart_tail[idx]++;
    42a4:	88 81       	ld	r24, Y
    42a6:	99 81       	ldd	r25, Y+1	; 0x01
    42a8:	01 96       	adiw	r24, 0x01	; 1
    42aa:	88 83       	st	Y, r24
    42ac:	99 83       	std	Y+1, r25	; 0x01
	if (uart_tail[idx] >= MAX_BUFFER_LEN){
    42ae:	88 81       	ld	r24, Y
    42b0:	99 81       	ldd	r25, Y+1	; 0x01
    42b2:	24 e0       	ldi	r18, 0x04	; 4
    42b4:	80 30       	cpi	r24, 0x00	; 0
    42b6:	92 07       	cpc	r25, r18
    42b8:	10 f0       	brcs	.+4      	; 0x42be <uart_receive_lcd+0xb8>
		uart_tail[idx] = 0;
    42ba:	18 82       	st	Y, r1
    42bc:	19 82       	std	Y+1, r1	; 0x01
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    42be:	e7 53       	subi	r30, 0x37	; 55
    42c0:	f5 4c       	sbci	r31, 0xC5	; 197
    42c2:	80 81       	ld	r24, Z
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
    42c4:	d7 01       	movw	r26, r14
    42c6:	8c 93       	st	X, r24
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    42c8:	11 96       	adiw	r26, 0x01	; 1
    42ca:	8c 91       	ld	r24, X
    42cc:	11 97       	sbiw	r26, 0x01	; 1
    42ce:	85 ff       	sbrs	r24, 5
    42d0:	19 c0       	rjmp	.+50     	; 0x4304 <uart_receive_lcd+0xfe>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    42d2:	f8 01       	movw	r30, r16
    42d4:	80 81       	ld	r24, Z
    42d6:	91 81       	ldd	r25, Z+1	; 0x01
    42d8:	28 81       	ld	r18, Y
    42da:	39 81       	ldd	r19, Y+1	; 0x01
    42dc:	82 17       	cp	r24, r18
    42de:	93 07       	cpc	r25, r19
    42e0:	38 f0       	brcs	.+14     	; 0x42f0 <uart_receive_lcd+0xea>
		return (uart_head[idx] - uart_tail[idx]);
    42e2:	80 81       	ld	r24, Z
    42e4:	91 81       	ldd	r25, Z+1	; 0x01
    42e6:	28 81       	ld	r18, Y
    42e8:	39 81       	ldd	r19, Y+1	; 0x01
    42ea:	82 1b       	sub	r24, r18
    42ec:	93 0b       	sbc	r25, r19
    42ee:	08 c0       	rjmp	.+16     	; 0x4300 <uart_receive_lcd+0xfa>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    42f0:	80 81       	ld	r24, Z
    42f2:	91 81       	ldd	r25, Z+1	; 0x01
    42f4:	28 81       	ld	r18, Y
    42f6:	39 81       	ldd	r19, Y+1	; 0x01
    42f8:	80 50       	subi	r24, 0x00	; 0
    42fa:	9c 4f       	sbci	r25, 0xFC	; 252
    42fc:	82 1b       	sub	r24, r18
    42fe:	93 0b       	sbc	r25, r19
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    4300:	00 97       	sbiw	r24, 0x00	; 0
    4302:	71 f6       	brne	.-100    	; 0x42a0 <uart_receive_lcd+0x9a>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    4304:	f8 01       	movw	r30, r16
    4306:	80 81       	ld	r24, Z
    4308:	91 81       	ldd	r25, Z+1	; 0x01
    430a:	28 81       	ld	r18, Y
    430c:	39 81       	ldd	r19, Y+1	; 0x01
    430e:	82 17       	cp	r24, r18
    4310:	93 07       	cpc	r25, r19
    4312:	38 f0       	brcs	.+14     	; 0x4322 <uart_receive_lcd+0x11c>
		return (uart_head[idx] - uart_tail[idx]);
    4314:	80 81       	ld	r24, Z
    4316:	91 81       	ldd	r25, Z+1	; 0x01
    4318:	28 81       	ld	r18, Y
    431a:	39 81       	ldd	r19, Y+1	; 0x01
    431c:	82 1b       	sub	r24, r18
    431e:	93 0b       	sbc	r25, r19
    4320:	08 c0       	rjmp	.+16     	; 0x4332 <uart_receive_lcd+0x12c>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    4322:	80 81       	ld	r24, Z
    4324:	91 81       	ldd	r25, Z+1	; 0x01
    4326:	28 81       	ld	r18, Y
    4328:	39 81       	ldd	r19, Y+1	; 0x01
    432a:	80 50       	subi	r24, 0x00	; 0
    432c:	9c 4f       	sbci	r25, 0xFC	; 252
    432e:	82 1b       	sub	r24, r18
    4330:	93 0b       	sbc	r25, r19
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
	}
	//disable the tx outgoing hardware buffer ready interrupt if we have nothing more to put in it.
	if(uart_count(port)>0) uart_txbuffer_enable(port);
    4332:	00 97       	sbiw	r24, 0x00	; 0
    4334:	21 f0       	breq	.+8      	; 0x433e <uart_receive_lcd+0x138>
    4336:	c7 01       	movw	r24, r14
    4338:	0e 94 0f 19 	call	0x321e	; 0x321e <uart_txbuffer_enable>
    433c:	03 c0       	rjmp	.+6      	; 0x4344 <uart_receive_lcd+0x13e>
	else uart_txbuffer_disable(port);
    433e:	c7 01       	movw	r24, r14
    4340:	0e 94 14 19 	call	0x3228	; 0x3228 <uart_txbuffer_disable>
	uint8_t incomingByte;
	//keep receiving until data register is empty or incoming queue is full
	while (((port->STATUS & _BV(7)) == B8(10000000)) && (uart_icount(port) < MAX_IBUFFER_LEN)){
		incomingByte = port->DATA;
		uart_enqueue(&udata, incomingByte); //xxx - echo to data port
		if (incomingByte == 0x0D) {lcd_flow_control = LCD_DONE_COMMAND;}
    4344:	bd e0       	ldi	r27, 0x0D	; 13
    4346:	db 16       	cp	r13, r27
    4348:	11 f4       	brne	.+4      	; 0x434e <uart_receive_lcd+0x148>
    434a:	c0 92 ab 26 	sts	0x26AB, r12
		lcd_set_touch(incomingByte); //write to touch-command listener
    434e:	8d 2d       	mov	r24, r13
    4350:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <lcd_set_touch>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    4354:	e0 eb       	ldi	r30, 0xB0	; 176
    4356:	ae 16       	cp	r10, r30
    4358:	eb e0       	ldi	r30, 0x0B	; 11
    435a:	be 06       	cpc	r11, r30
    435c:	61 f0       	breq	.+24     	; 0x4376 <uart_receive_lcd+0x170>
	if (port == &uctrl) {return 1;}
    435e:	f0 ea       	ldi	r31, 0xA0	; 160
    4360:	af 16       	cp	r10, r31
    4362:	f8 e0       	ldi	r31, 0x08	; 8
    4364:	bf 06       	cpc	r11, r31
    4366:	49 f0       	breq	.+18     	; 0x437a <uart_receive_lcd+0x174>
	if (port == &udata) {return 2;}
    4368:	20 eb       	ldi	r18, 0xB0	; 176
    436a:	a2 16       	cp	r10, r18
    436c:	28 e0       	ldi	r18, 0x08	; 8
    436e:	b2 06       	cpc	r11, r18
    4370:	31 f4       	brne	.+12     	; 0x437e <uart_receive_lcd+0x178>
    4372:	42 e0       	ldi	r20, 0x02	; 2
    4374:	05 c0       	rjmp	.+10     	; 0x4380 <uart_receive_lcd+0x17a>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    4376:	40 e0       	ldi	r20, 0x00	; 0
    4378:	03 c0       	rjmp	.+6      	; 0x4380 <uart_receive_lcd+0x17a>
	if (port == &uctrl) {return 1;}
    437a:	41 e0       	ldi	r20, 0x01	; 1
    437c:	01 c0       	rjmp	.+2      	; 0x4380 <uart_receive_lcd+0x17a>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    437e:	40 e0       	ldi	r20, 0x00	; 0
	}
}

inline void uart_ienqueue(USART_t* port, uint8_t datain){
	uint8_t idx = port_map(port);
	uart_ibuffer[idx][uart_ihead[idx]] = datain;
    4380:	50 e0       	ldi	r21, 0x00	; 0
    4382:	ca 01       	movw	r24, r20
    4384:	88 0f       	add	r24, r24
    4386:	99 1f       	adc	r25, r25
    4388:	f4 01       	movw	r30, r8
    438a:	e8 0f       	add	r30, r24
    438c:	f9 1f       	adc	r31, r25
    438e:	20 81       	ld	r18, Z
    4390:	31 81       	ldd	r19, Z+1	; 0x01
    4392:	ca 01       	movw	r24, r20
    4394:	98 2f       	mov	r25, r24
    4396:	88 27       	eor	r24, r24
    4398:	99 0f       	add	r25, r25
    439a:	99 0f       	add	r25, r25
    439c:	82 0f       	add	r24, r18
    439e:	93 1f       	adc	r25, r19
    43a0:	84 0d       	add	r24, r4
    43a2:	95 1d       	adc	r25, r5
    43a4:	dc 01       	movw	r26, r24
    43a6:	dc 92       	st	X, r13
	uart_ihead[idx]++;
    43a8:	80 81       	ld	r24, Z
    43aa:	91 81       	ldd	r25, Z+1	; 0x01
    43ac:	01 96       	adiw	r24, 0x01	; 1
    43ae:	80 83       	st	Z, r24
    43b0:	91 83       	std	Z+1, r25	; 0x01
	if (uart_ihead[idx] >= MAX_IBUFFER_LEN){
    43b2:	80 81       	ld	r24, Z
    43b4:	91 81       	ldd	r25, Z+1	; 0x01
    43b6:	b4 e0       	ldi	r27, 0x04	; 4
    43b8:	80 30       	cpi	r24, 0x00	; 0
    43ba:	9b 07       	cpc	r25, r27
    43bc:	10 f0       	brcs	.+4      	; 0x43c2 <uart_receive_lcd+0x1bc>
		uart_ihead[idx] = 0;
    43be:	10 82       	st	Z, r1
    43c0:	11 82       	std	Z+1, r1	; 0x01
}

void inline uart_receive_lcd(USART_t* port){
	uint8_t incomingByte;
	//keep receiving until data register is empty or incoming queue is full
	while (((port->STATUS & _BV(7)) == B8(10000000)) && (uart_icount(port) < MAX_IBUFFER_LEN)){
    43c2:	d5 01       	movw	r26, r10
    43c4:	11 96       	adiw	r26, 0x01	; 1
    43c6:	8c 91       	ld	r24, X
    43c8:	11 97       	sbiw	r26, 0x01	; 1
    43ca:	88 23       	and	r24, r24
    43cc:	0c f0       	brlt	.+2      	; 0x43d0 <uart_receive_lcd+0x1ca>
    43ce:	4d c0       	rjmp	.+154    	; 0x446a <uart_receive_lcd+0x264>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    43d0:	b0 eb       	ldi	r27, 0xB0	; 176
    43d2:	ab 16       	cp	r10, r27
    43d4:	bb e0       	ldi	r27, 0x0B	; 11
    43d6:	bb 06       	cpc	r11, r27
    43d8:	61 f0       	breq	.+24     	; 0x43f2 <uart_receive_lcd+0x1ec>
	if (port == &uctrl) {return 1;}
    43da:	e0 ea       	ldi	r30, 0xA0	; 160
    43dc:	ae 16       	cp	r10, r30
    43de:	e8 e0       	ldi	r30, 0x08	; 8
    43e0:	be 06       	cpc	r11, r30
    43e2:	49 f0       	breq	.+18     	; 0x43f6 <uart_receive_lcd+0x1f0>
	if (port == &udata) {return 2;}
    43e4:	f0 eb       	ldi	r31, 0xB0	; 176
    43e6:	af 16       	cp	r10, r31
    43e8:	f8 e0       	ldi	r31, 0x08	; 8
    43ea:	bf 06       	cpc	r11, r31
    43ec:	31 f4       	brne	.+12     	; 0x43fa <uart_receive_lcd+0x1f4>
    43ee:	22 e0       	ldi	r18, 0x02	; 2
    43f0:	05 c0       	rjmp	.+10     	; 0x43fc <uart_receive_lcd+0x1f6>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    43f2:	20 e0       	ldi	r18, 0x00	; 0
    43f4:	03 c0       	rjmp	.+6      	; 0x43fc <uart_receive_lcd+0x1f6>
	if (port == &uctrl) {return 1;}
    43f6:	21 e0       	ldi	r18, 0x01	; 1
    43f8:	01 c0       	rjmp	.+2      	; 0x43fc <uart_receive_lcd+0x1f6>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    43fa:	20 e0       	ldi	r18, 0x00	; 0
	uart_itail[idx] = 0;
}

inline uint16_t uart_icount(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_ihead[idx] >= uart_itail[idx]){	
    43fc:	30 e0       	ldi	r19, 0x00	; 0
    43fe:	c9 01       	movw	r24, r18
    4400:	88 0f       	add	r24, r24
    4402:	99 1f       	adc	r25, r25
    4404:	f4 01       	movw	r30, r8
    4406:	e8 0f       	add	r30, r24
    4408:	f9 1f       	adc	r31, r25
    440a:	40 81       	ld	r20, Z
    440c:	51 81       	ldd	r21, Z+1	; 0x01
    440e:	f3 01       	movw	r30, r6
    4410:	e8 0f       	add	r30, r24
    4412:	f9 1f       	adc	r31, r25
    4414:	80 81       	ld	r24, Z
    4416:	91 81       	ldd	r25, Z+1	; 0x01
    4418:	48 17       	cp	r20, r24
    441a:	59 07       	cpc	r21, r25
    441c:	88 f0       	brcs	.+34     	; 0x4440 <uart_receive_lcd+0x23a>
		return (uart_ihead[idx] - uart_itail[idx]);
    441e:	22 0f       	add	r18, r18
    4420:	33 1f       	adc	r19, r19
    4422:	f4 01       	movw	r30, r8
    4424:	e2 0f       	add	r30, r18
    4426:	f3 1f       	adc	r31, r19
    4428:	40 81       	ld	r20, Z
    442a:	51 81       	ldd	r21, Z+1	; 0x01
    442c:	f3 01       	movw	r30, r6
    442e:	e2 0f       	add	r30, r18
    4430:	f3 1f       	adc	r31, r19
    4432:	80 81       	ld	r24, Z
    4434:	91 81       	ldd	r25, Z+1	; 0x01
    4436:	9a 01       	movw	r18, r20
    4438:	28 1b       	sub	r18, r24
    443a:	39 0b       	sbc	r19, r25
    443c:	c9 01       	movw	r24, r18
    443e:	10 c0       	rjmp	.+32     	; 0x4460 <uart_receive_lcd+0x25a>
	}
	else {
		return ((MAX_IBUFFER_LEN-uart_itail[idx])+uart_ihead[idx]);
    4440:	22 0f       	add	r18, r18
    4442:	33 1f       	adc	r19, r19
    4444:	f4 01       	movw	r30, r8
    4446:	e2 0f       	add	r30, r18
    4448:	f3 1f       	adc	r31, r19
    444a:	80 81       	ld	r24, Z
    444c:	91 81       	ldd	r25, Z+1	; 0x01
    444e:	f3 01       	movw	r30, r6
    4450:	e2 0f       	add	r30, r18
    4452:	f3 1f       	adc	r31, r19
    4454:	20 81       	ld	r18, Z
    4456:	31 81       	ldd	r19, Z+1	; 0x01
    4458:	80 50       	subi	r24, 0x00	; 0
    445a:	9c 4f       	sbci	r25, 0xFC	; 252
    445c:	82 1b       	sub	r24, r18
    445e:	93 0b       	sbc	r25, r19
}

void inline uart_receive_lcd(USART_t* port){
	uint8_t incomingByte;
	//keep receiving until data register is empty or incoming queue is full
	while (((port->STATUS & _BV(7)) == B8(10000000)) && (uart_icount(port) < MAX_IBUFFER_LEN)){
    4460:	34 e0       	ldi	r19, 0x04	; 4
    4462:	80 30       	cpi	r24, 0x00	; 0
    4464:	93 07       	cpc	r25, r19
    4466:	08 f4       	brcc	.+2      	; 0x446a <uart_receive_lcd+0x264>
    4468:	00 cf       	rjmp	.-512    	; 0x426a <uart_receive_lcd+0x64>
		uart_enqueue(&udata, incomingByte); //xxx - echo to data port
		if (incomingByte == 0x0D) {lcd_flow_control = LCD_DONE_COMMAND;}
		lcd_set_touch(incomingByte); //write to touch-command listener
		uart_ienqueue(port, incomingByte);
	}
}
    446a:	df 91       	pop	r29
    446c:	cf 91       	pop	r28
    446e:	1f 91       	pop	r17
    4470:	0f 91       	pop	r16
    4472:	ff 90       	pop	r15
    4474:	ef 90       	pop	r14
    4476:	df 90       	pop	r13
    4478:	cf 90       	pop	r12
    447a:	bf 90       	pop	r11
    447c:	af 90       	pop	r10
    447e:	9f 90       	pop	r9
    4480:	8f 90       	pop	r8
    4482:	7f 90       	pop	r7
    4484:	6f 90       	pop	r6
    4486:	5f 90       	pop	r5
    4488:	4f 90       	pop	r4
    448a:	08 95       	ret

0000448c <init_uart_obuffer>:
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    448c:	2b e0       	ldi	r18, 0x0B	; 11
    448e:	80 3b       	cpi	r24, 0xB0	; 176
    4490:	92 07       	cpc	r25, r18
    4492:	51 f0       	breq	.+20     	; 0x44a8 <init_uart_obuffer+0x1c>
	if (port == &uctrl) {return 1;}
    4494:	e8 e0       	ldi	r30, 0x08	; 8
    4496:	80 3a       	cpi	r24, 0xA0	; 160
    4498:	9e 07       	cpc	r25, r30
    449a:	41 f0       	breq	.+16     	; 0x44ac <init_uart_obuffer+0x20>
	if (port == &udata) {return 2;}
    449c:	f8 e0       	ldi	r31, 0x08	; 8
    449e:	80 3b       	cpi	r24, 0xB0	; 176
    44a0:	9f 07       	cpc	r25, r31
    44a2:	31 f4       	brne	.+12     	; 0x44b0 <init_uart_obuffer+0x24>
    44a4:	82 e0       	ldi	r24, 0x02	; 2
    44a6:	05 c0       	rjmp	.+10     	; 0x44b2 <init_uart_obuffer+0x26>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    44a8:	80 e0       	ldi	r24, 0x00	; 0
    44aa:	03 c0       	rjmp	.+6      	; 0x44b2 <init_uart_obuffer+0x26>
	if (port == &uctrl) {return 1;}
    44ac:	81 e0       	ldi	r24, 0x01	; 1
    44ae:	01 c0       	rjmp	.+2      	; 0x44b2 <init_uart_obuffer+0x26>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    44b0:	80 e0       	ldi	r24, 0x00	; 0
	No protection is provided for buffer overflow! Be careful! */
//***************************************************

void init_uart_obuffer(USART_t* port){
	uint8_t idx = port_map(port);
	uart_head[idx] = 0;
    44b2:	90 e0       	ldi	r25, 0x00	; 0
    44b4:	88 0f       	add	r24, r24
    44b6:	99 1f       	adc	r25, r25
    44b8:	fc 01       	movw	r30, r24
    44ba:	ed 53       	subi	r30, 0x3D	; 61
    44bc:	fd 4c       	sbci	r31, 0xCD	; 205
    44be:	10 82       	st	Z, r1
    44c0:	11 82       	std	Z+1, r1	; 0x01
	uart_tail[idx] = 0;
    44c2:	81 53       	subi	r24, 0x31	; 49
    44c4:	91 4c       	sbci	r25, 0xC1	; 193
    44c6:	fc 01       	movw	r30, r24
    44c8:	10 82       	st	Z, r1
    44ca:	11 82       	std	Z+1, r1	; 0x01
}
    44cc:	08 95       	ret

000044ce <uart_count>:
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    44ce:	2b e0       	ldi	r18, 0x0B	; 11
    44d0:	80 3b       	cpi	r24, 0xB0	; 176
    44d2:	92 07       	cpc	r25, r18
    44d4:	51 f0       	breq	.+20     	; 0x44ea <uart_count+0x1c>
	if (port == &uctrl) {return 1;}
    44d6:	e8 e0       	ldi	r30, 0x08	; 8
    44d8:	80 3a       	cpi	r24, 0xA0	; 160
    44da:	9e 07       	cpc	r25, r30
    44dc:	41 f0       	breq	.+16     	; 0x44ee <uart_count+0x20>
	if (port == &udata) {return 2;}
    44de:	f8 e0       	ldi	r31, 0x08	; 8
    44e0:	80 3b       	cpi	r24, 0xB0	; 176
    44e2:	9f 07       	cpc	r25, r31
    44e4:	31 f4       	brne	.+12     	; 0x44f2 <uart_count+0x24>
    44e6:	82 e0       	ldi	r24, 0x02	; 2
    44e8:	05 c0       	rjmp	.+10     	; 0x44f4 <uart_count+0x26>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    44ea:	80 e0       	ldi	r24, 0x00	; 0
    44ec:	03 c0       	rjmp	.+6      	; 0x44f4 <uart_count+0x26>
	if (port == &uctrl) {return 1;}
    44ee:	81 e0       	ldi	r24, 0x01	; 1
    44f0:	01 c0       	rjmp	.+2      	; 0x44f4 <uart_count+0x26>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    44f2:	80 e0       	ldi	r24, 0x00	; 0
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    44f4:	90 e0       	ldi	r25, 0x00	; 0
    44f6:	9c 01       	movw	r18, r24
    44f8:	22 0f       	add	r18, r18
    44fa:	33 1f       	adc	r19, r19
    44fc:	f9 01       	movw	r30, r18
    44fe:	ed 53       	subi	r30, 0x3D	; 61
    4500:	fd 4c       	sbci	r31, 0xCD	; 205
    4502:	40 81       	ld	r20, Z
    4504:	51 81       	ldd	r21, Z+1	; 0x01
    4506:	21 53       	subi	r18, 0x31	; 49
    4508:	31 4c       	sbci	r19, 0xC1	; 193
    450a:	f9 01       	movw	r30, r18
    450c:	20 81       	ld	r18, Z
    450e:	31 81       	ldd	r19, Z+1	; 0x01
    4510:	42 17       	cp	r20, r18
    4512:	53 07       	cpc	r21, r19
    4514:	80 f0       	brcs	.+32     	; 0x4536 <uart_count+0x68>
		return (uart_head[idx] - uart_tail[idx]);
    4516:	9c 01       	movw	r18, r24
    4518:	22 0f       	add	r18, r18
    451a:	33 1f       	adc	r19, r19
    451c:	f9 01       	movw	r30, r18
    451e:	ed 53       	subi	r30, 0x3D	; 61
    4520:	fd 4c       	sbci	r31, 0xCD	; 205
    4522:	80 81       	ld	r24, Z
    4524:	91 81       	ldd	r25, Z+1	; 0x01
    4526:	21 53       	subi	r18, 0x31	; 49
    4528:	31 4c       	sbci	r19, 0xC1	; 193
    452a:	f9 01       	movw	r30, r18
    452c:	20 81       	ld	r18, Z
    452e:	31 81       	ldd	r19, Z+1	; 0x01
    4530:	82 1b       	sub	r24, r18
    4532:	93 0b       	sbc	r25, r19
    4534:	08 95       	ret
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    4536:	9c 01       	movw	r18, r24
    4538:	22 0f       	add	r18, r18
    453a:	33 1f       	adc	r19, r19
    453c:	f9 01       	movw	r30, r18
    453e:	ed 53       	subi	r30, 0x3D	; 61
    4540:	fd 4c       	sbci	r31, 0xCD	; 205
    4542:	40 81       	ld	r20, Z
    4544:	51 81       	ldd	r21, Z+1	; 0x01
    4546:	21 53       	subi	r18, 0x31	; 49
    4548:	31 4c       	sbci	r19, 0xC1	; 193
    454a:	f9 01       	movw	r30, r18
    454c:	20 81       	ld	r18, Z
    454e:	31 81       	ldd	r19, Z+1	; 0x01
    4550:	ca 01       	movw	r24, r20
    4552:	80 50       	subi	r24, 0x00	; 0
    4554:	9c 4f       	sbci	r25, 0xFC	; 252
    4556:	82 1b       	sub	r24, r18
    4558:	93 0b       	sbc	r25, r19
	}
}
    455a:	08 95       	ret

0000455c <uart_enqueue_string>:

///Enqueue a string into the outgoing serial queue. Adds CR terminator to string.
inline void uart_enqueue_string(USART_t* port, char* string_in){
    455c:	2f 92       	push	r2
    455e:	3f 92       	push	r3
    4560:	4f 92       	push	r4
    4562:	5f 92       	push	r5
    4564:	6f 92       	push	r6
    4566:	7f 92       	push	r7
    4568:	8f 92       	push	r8
    456a:	9f 92       	push	r9
    456c:	af 92       	push	r10
    456e:	bf 92       	push	r11
    4570:	cf 92       	push	r12
    4572:	df 92       	push	r13
    4574:	ef 92       	push	r14
    4576:	ff 92       	push	r15
    4578:	0f 93       	push	r16
    457a:	1f 93       	push	r17
    457c:	cf 93       	push	r28
    457e:	df 93       	push	r29
    4580:	00 d0       	rcall	.+0      	; 0x4582 <uart_enqueue_string+0x26>
    4582:	0f 92       	push	r0
    4584:	cd b7       	in	r28, 0x3d	; 61
    4586:	de b7       	in	r29, 0x3e	; 62
    4588:	6c 01       	movw	r12, r24
	uint16_t length = (uint16_t)strlen(string_in);
    458a:	26 2f       	mov	r18, r22
    458c:	37 2f       	mov	r19, r23
    458e:	d9 01       	movw	r26, r18
    4590:	0d 90       	ld	r0, X+
    4592:	00 20       	and	r0, r0
    4594:	e9 f7       	brne	.-6      	; 0x4590 <uart_enqueue_string+0x34>
    4596:	11 97       	sbiw	r26, 0x01	; 1
    4598:	cd 01       	movw	r24, r26
    459a:	82 1b       	sub	r24, r18
    459c:	93 0b       	sbc	r25, r19
    459e:	8b 83       	std	Y+3, r24	; 0x03
    45a0:	9c 83       	std	Y+4, r25	; 0x04
	for (uint16_t i=0; i<length; i++) {uart_enqueue(port, (uint8_t)string_in[i]);}
    45a2:	00 97       	sbiw	r24, 0x00	; 0
    45a4:	09 f4       	brne	.+2      	; 0x45a8 <uart_enqueue_string+0x4c>
    45a6:	4a c3       	rjmp	.+1684   	; 0x4c3c <uart_enqueue_string+0x6e0>
    45a8:	69 83       	std	Y+1, r22	; 0x01
    45aa:	7a 83       	std	Y+2, r23	; 0x02
    45ac:	22 24       	eor	r2, r2
    45ae:	33 24       	eor	r3, r3
#ifndef UART_DEBUG
	uint8_t idx = port_map(port);
	
	//if (idx==0){uart_enqueue(&uctrl, datain);} //xxx
	
	uart_buffer[idx][uart_head[idx]] = datain;
    45b0:	0f 2e       	mov	r0, r31
    45b2:	f3 ec       	ldi	r31, 0xC3	; 195
    45b4:	6f 2e       	mov	r6, r31
    45b6:	f2 e3       	ldi	r31, 0x32	; 50
    45b8:	7f 2e       	mov	r7, r31
    45ba:	f0 2d       	mov	r31, r0
    45bc:	0f 2e       	mov	r0, r31
    45be:	f9 ec       	ldi	r31, 0xC9	; 201
    45c0:	4f 2e       	mov	r4, r31
    45c2:	f2 e3       	ldi	r31, 0x32	; 50
    45c4:	5f 2e       	mov	r5, r31
    45c6:	f0 2d       	mov	r31, r0
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    45c8:	0f 2e       	mov	r0, r31
    45ca:	ff ec       	ldi	r31, 0xCF	; 207
    45cc:	8f 2e       	mov	r8, r31
    45ce:	fe e3       	ldi	r31, 0x3E	; 62
    45d0:	9f 2e       	mov	r9, r31
    45d2:	f0 2d       	mov	r31, r0
#ifndef UART_DEBUG
	uint8_t idx = port_map(port);
	
	//if (idx==0){uart_enqueue(&uctrl, datain);} //xxx
	
	uart_buffer[idx][uart_head[idx]] = datain;
    45d4:	0f 2e       	mov	r0, r31
    45d6:	f7 ec       	ldi	r31, 0xC7	; 199
    45d8:	ef 2e       	mov	r14, r31
    45da:	f2 e3       	ldi	r31, 0x32	; 50
    45dc:	ff 2e       	mov	r15, r31
    45de:	f0 2d       	mov	r31, r0
}

///Enqueue a string into the outgoing serial queue. Adds CR terminator to string.
inline void uart_enqueue_string(USART_t* port, char* string_in){
	uint16_t length = (uint16_t)strlen(string_in);
	for (uint16_t i=0; i<length; i++) {uart_enqueue(port, (uint8_t)string_in[i]);}
    45e0:	a9 81       	ldd	r26, Y+1	; 0x01
    45e2:	ba 81       	ldd	r27, Y+2	; 0x02
    45e4:	7d 91       	ld	r23, X+
    45e6:	a9 83       	std	Y+1, r26	; 0x01
    45e8:	ba 83       	std	Y+2, r27	; 0x02
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    45ea:	b0 eb       	ldi	r27, 0xB0	; 176
    45ec:	cb 16       	cp	r12, r27
    45ee:	bb e0       	ldi	r27, 0x0B	; 11
    45f0:	db 06       	cpc	r13, r27
    45f2:	61 f0       	breq	.+24     	; 0x460c <uart_enqueue_string+0xb0>
	if (port == &uctrl) {return 1;}
    45f4:	e0 ea       	ldi	r30, 0xA0	; 160
    45f6:	ce 16       	cp	r12, r30
    45f8:	e8 e0       	ldi	r30, 0x08	; 8
    45fa:	de 06       	cpc	r13, r30
    45fc:	49 f0       	breq	.+18     	; 0x4610 <uart_enqueue_string+0xb4>
	if (port == &udata) {return 2;}
    45fe:	f0 eb       	ldi	r31, 0xB0	; 176
    4600:	cf 16       	cp	r12, r31
    4602:	f8 e0       	ldi	r31, 0x08	; 8
    4604:	df 06       	cpc	r13, r31
    4606:	31 f4       	brne	.+12     	; 0x4614 <uart_enqueue_string+0xb8>
    4608:	62 e0       	ldi	r22, 0x02	; 2
    460a:	05 c0       	rjmp	.+10     	; 0x4616 <uart_enqueue_string+0xba>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    460c:	60 e0       	ldi	r22, 0x00	; 0
    460e:	03 c0       	rjmp	.+6      	; 0x4616 <uart_enqueue_string+0xba>
	if (port == &uctrl) {return 1;}
    4610:	61 e0       	ldi	r22, 0x01	; 1
    4612:	01 c0       	rjmp	.+2      	; 0x4616 <uart_enqueue_string+0xba>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    4614:	60 e0       	ldi	r22, 0x00	; 0
#ifndef UART_DEBUG
	uint8_t idx = port_map(port);
	
	//if (idx==0){uart_enqueue(&uctrl, datain);} //xxx
	
	uart_buffer[idx][uart_head[idx]] = datain;
    4616:	46 2f       	mov	r20, r22
    4618:	50 e0       	ldi	r21, 0x00	; 0
    461a:	ca 01       	movw	r24, r20
    461c:	88 0f       	add	r24, r24
    461e:	99 1f       	adc	r25, r25
    4620:	f3 01       	movw	r30, r6
    4622:	e8 0f       	add	r30, r24
    4624:	f9 1f       	adc	r31, r25
    4626:	20 81       	ld	r18, Z
    4628:	31 81       	ldd	r19, Z+1	; 0x01
    462a:	ca 01       	movw	r24, r20
    462c:	98 2f       	mov	r25, r24
    462e:	88 27       	eor	r24, r24
    4630:	99 0f       	add	r25, r25
    4632:	99 0f       	add	r25, r25
    4634:	82 0f       	add	r24, r18
    4636:	93 1f       	adc	r25, r19
    4638:	84 0d       	add	r24, r4
    463a:	95 1d       	adc	r25, r5
    463c:	dc 01       	movw	r26, r24
    463e:	7c 93       	st	X, r23
	uart_head[idx]++;
    4640:	80 81       	ld	r24, Z
    4642:	91 81       	ldd	r25, Z+1	; 0x01
    4644:	01 96       	adiw	r24, 0x01	; 1
    4646:	80 83       	st	Z, r24
    4648:	91 83       	std	Z+1, r25	; 0x01
	if (uart_head[idx] >= MAX_BUFFER_LEN){
    464a:	80 81       	ld	r24, Z
    464c:	91 81       	ldd	r25, Z+1	; 0x01
    464e:	b4 e0       	ldi	r27, 0x04	; 4
    4650:	80 30       	cpi	r24, 0x00	; 0
    4652:	9b 07       	cpc	r25, r27
    4654:	10 f0       	brcs	.+4      	; 0x465a <uart_enqueue_string+0xfe>
		uart_head[idx] = 0;
    4656:	10 82       	st	Z, r1
    4658:	11 82       	std	Z+1, r1	; 0x01
	}
	if (idx == 0){uart_transmit_lcd(port);} //start the transmission process.
    465a:	66 23       	and	r22, r22
    465c:	39 f0       	breq	.+14     	; 0x466c <uart_enqueue_string+0x110>
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    465e:	d6 01       	movw	r26, r12
    4660:	11 96       	adiw	r26, 0x01	; 1
    4662:	8c 91       	ld	r24, X
    4664:	11 97       	sbiw	r26, 0x01	; 1
    4666:	85 fd       	sbrc	r24, 5
    4668:	44 c2       	rjmp	.+1160   	; 0x4af2 <uart_enqueue_string+0x596>
    466a:	8e c2       	rjmp	.+1308   	; 0x4b88 <uart_enqueue_string+0x62c>
}

void inline uart_transmit_lcd(USART_t* port){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0) && (lcd_flow_control == LCD_READY)){
    466c:	f6 01       	movw	r30, r12
    466e:	81 81       	ldd	r24, Z+1	; 0x01
    4670:	85 fd       	sbrc	r24, 5
    4672:	54 c1       	rjmp	.+680    	; 0x491c <uart_enqueue_string+0x3c0>
    4674:	a8 c1       	rjmp	.+848    	; 0x49c6 <uart_enqueue_string+0x46a>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    4676:	f0 eb       	ldi	r31, 0xB0	; 176
    4678:	cf 16       	cp	r12, r31
    467a:	fb e0       	ldi	r31, 0x0B	; 11
    467c:	df 06       	cpc	r13, r31
    467e:	61 f0       	breq	.+24     	; 0x4698 <uart_enqueue_string+0x13c>
	if (port == &uctrl) {return 1;}
    4680:	20 ea       	ldi	r18, 0xA0	; 160
    4682:	c2 16       	cp	r12, r18
    4684:	28 e0       	ldi	r18, 0x08	; 8
    4686:	d2 06       	cpc	r13, r18
    4688:	49 f0       	breq	.+18     	; 0x469c <uart_enqueue_string+0x140>
	if (port == &udata) {return 2;}
    468a:	30 eb       	ldi	r19, 0xB0	; 176
    468c:	c3 16       	cp	r12, r19
    468e:	38 e0       	ldi	r19, 0x08	; 8
    4690:	d3 06       	cpc	r13, r19
    4692:	31 f4       	brne	.+12     	; 0x46a0 <uart_enqueue_string+0x144>
    4694:	22 e0       	ldi	r18, 0x02	; 2
    4696:	05 c0       	rjmp	.+10     	; 0x46a2 <uart_enqueue_string+0x146>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    4698:	20 e0       	ldi	r18, 0x00	; 0
    469a:	03 c0       	rjmp	.+6      	; 0x46a2 <uart_enqueue_string+0x146>
	if (port == &uctrl) {return 1;}
    469c:	21 e0       	ldi	r18, 0x01	; 1
    469e:	01 c0       	rjmp	.+2      	; 0x46a2 <uart_enqueue_string+0x146>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    46a0:	20 e0       	ldi	r18, 0x00	; 0
}

inline uint8_t uart_dequeue(USART_t* port){
	uint8_t idx = port_map(port);
	uint16_t oldtail;
	oldtail = uart_tail[idx];
    46a2:	30 e0       	ldi	r19, 0x00	; 0
    46a4:	c9 01       	movw	r24, r18
    46a6:	88 0f       	add	r24, r24
    46a8:	99 1f       	adc	r25, r25
    46aa:	f4 01       	movw	r30, r8
    46ac:	e8 0f       	add	r30, r24
    46ae:	f9 1f       	adc	r31, r25
    46b0:	40 81       	ld	r20, Z
    46b2:	51 81       	ldd	r21, Z+1	; 0x01
	uart_tail[idx]++;
    46b4:	80 81       	ld	r24, Z
    46b6:	91 81       	ldd	r25, Z+1	; 0x01
    46b8:	01 96       	adiw	r24, 0x01	; 1
    46ba:	80 83       	st	Z, r24
    46bc:	91 83       	std	Z+1, r25	; 0x01
	if (uart_tail[idx] >= MAX_BUFFER_LEN){
    46be:	80 81       	ld	r24, Z
    46c0:	91 81       	ldd	r25, Z+1	; 0x01
    46c2:	64 e0       	ldi	r22, 0x04	; 4
    46c4:	80 30       	cpi	r24, 0x00	; 0
    46c6:	96 07       	cpc	r25, r22
    46c8:	10 f0       	brcs	.+4      	; 0x46ce <uart_enqueue_string+0x172>
		uart_tail[idx] = 0;
    46ca:	10 82       	st	Z, r1
    46cc:	11 82       	std	Z+1, r1	; 0x01
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    46ce:	c9 01       	movw	r24, r18
    46d0:	98 2f       	mov	r25, r24
    46d2:	88 27       	eor	r24, r24
    46d4:	99 0f       	add	r25, r25
    46d6:	99 0f       	add	r25, r25
    46d8:	84 0f       	add	r24, r20
    46da:	95 1f       	adc	r25, r21
    46dc:	84 0d       	add	r24, r4
    46de:	95 1d       	adc	r25, r5
    46e0:	fc 01       	movw	r30, r24
    46e2:	b0 80       	ld	r11, Z
void inline uart_transmit_lcd(USART_t* port){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0) && (lcd_flow_control == LCD_READY)){
		toSend = uart_dequeue(port);
		if (toSend == 0x0D) {lcd_flow_control = LCD_BUSY;}
    46e4:	fd e0       	ldi	r31, 0x0D	; 13
    46e6:	bf 16       	cp	r11, r31
    46e8:	19 f4       	brne	.+6      	; 0x46f0 <uart_enqueue_string+0x194>
    46ea:	2e e4       	ldi	r18, 0x4E	; 78
    46ec:	20 93 ab 26 	sts	0x26AB, r18
#ifndef UART_DEBUG
	uint8_t idx = port_map(port);
	
	//if (idx==0){uart_enqueue(&uctrl, datain);} //xxx
	
	uart_buffer[idx][uart_head[idx]] = datain;
    46f0:	d7 01       	movw	r26, r14
    46f2:	8d 91       	ld	r24, X+
    46f4:	9c 91       	ld	r25, X
    46f6:	11 97       	sbiw	r26, 0x01	; 1
    46f8:	87 53       	subi	r24, 0x37	; 55
    46fa:	95 4c       	sbci	r25, 0xC5	; 197
    46fc:	fc 01       	movw	r30, r24
    46fe:	a0 82       	st	Z, r10
	uart_head[idx]++;
    4700:	8d 91       	ld	r24, X+
    4702:	9c 91       	ld	r25, X
    4704:	11 97       	sbiw	r26, 0x01	; 1
    4706:	01 96       	adiw	r24, 0x01	; 1
    4708:	8d 93       	st	X+, r24
    470a:	9c 93       	st	X, r25
    470c:	11 97       	sbiw	r26, 0x01	; 1
	if (uart_head[idx] >= MAX_BUFFER_LEN){
    470e:	8d 91       	ld	r24, X+
    4710:	9c 91       	ld	r25, X
    4712:	11 97       	sbiw	r26, 0x01	; 1
    4714:	f4 e0       	ldi	r31, 0x04	; 4
    4716:	80 30       	cpi	r24, 0x00	; 0
    4718:	9f 07       	cpc	r25, r31
    471a:	18 f0       	brcs	.+6      	; 0x4722 <uart_enqueue_string+0x1c6>
		uart_head[idx] = 0;
    471c:	1d 92       	st	X+, r1
    471e:	1c 92       	st	X, r1
    4720:	11 97       	sbiw	r26, 0x01	; 1
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    4722:	d8 01       	movw	r26, r16
    4724:	11 96       	adiw	r26, 0x01	; 1
    4726:	8c 91       	ld	r24, X
    4728:	11 97       	sbiw	r26, 0x01	; 1
    472a:	85 fd       	sbrc	r24, 5
    472c:	1f c0       	rjmp	.+62     	; 0x476c <uart_enqueue_string+0x210>
    472e:	3f c0       	rjmp	.+126    	; 0x47ae <uart_enqueue_string+0x252>
}

inline uint8_t uart_dequeue(USART_t* port){
	uint8_t idx = port_map(port);
	uint16_t oldtail;
	oldtail = uart_tail[idx];
    4730:	a3 ed       	ldi	r26, 0xD3	; 211
    4732:	be e3       	ldi	r27, 0x3E	; 62
    4734:	ed 91       	ld	r30, X+
    4736:	fc 91       	ld	r31, X
    4738:	11 97       	sbiw	r26, 0x01	; 1
	uart_tail[idx]++;
    473a:	8d 91       	ld	r24, X+
    473c:	9c 91       	ld	r25, X
    473e:	11 97       	sbiw	r26, 0x01	; 1
    4740:	01 96       	adiw	r24, 0x01	; 1
    4742:	8d 93       	st	X+, r24
    4744:	9c 93       	st	X, r25
    4746:	11 97       	sbiw	r26, 0x01	; 1
	if (uart_tail[idx] >= MAX_BUFFER_LEN){
    4748:	8d 91       	ld	r24, X+
    474a:	9c 91       	ld	r25, X
    474c:	11 97       	sbiw	r26, 0x01	; 1
    474e:	b4 e0       	ldi	r27, 0x04	; 4
    4750:	80 30       	cpi	r24, 0x00	; 0
    4752:	9b 07       	cpc	r25, r27
    4754:	18 f0       	brcs	.+6      	; 0x475c <uart_enqueue_string+0x200>
		uart_tail[idx] = 0;
    4756:	1d 92       	st	X+, r1
    4758:	1c 92       	st	X, r1
    475a:	11 97       	sbiw	r26, 0x01	; 1
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    475c:	e7 53       	subi	r30, 0x37	; 55
    475e:	f5 4c       	sbci	r31, 0xC5	; 197
    4760:	80 81       	ld	r24, Z
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
    4762:	f8 01       	movw	r30, r16
    4764:	80 83       	st	Z, r24
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    4766:	81 81       	ldd	r24, Z+1	; 0x01
    4768:	85 ff       	sbrs	r24, 5
    476a:	21 c0       	rjmp	.+66     	; 0x47ae <uart_enqueue_string+0x252>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    476c:	d7 01       	movw	r26, r14
    476e:	8d 91       	ld	r24, X+
    4770:	9c 91       	ld	r25, X
    4772:	11 97       	sbiw	r26, 0x01	; 1
    4774:	e3 ed       	ldi	r30, 0xD3	; 211
    4776:	fe e3       	ldi	r31, 0x3E	; 62
    4778:	20 81       	ld	r18, Z
    477a:	31 81       	ldd	r19, Z+1	; 0x01
    477c:	82 17       	cp	r24, r18
    477e:	93 07       	cpc	r25, r19
    4780:	40 f0       	brcs	.+16     	; 0x4792 <uart_enqueue_string+0x236>
		return (uart_head[idx] - uart_tail[idx]);
    4782:	8d 91       	ld	r24, X+
    4784:	9c 91       	ld	r25, X
    4786:	11 97       	sbiw	r26, 0x01	; 1
    4788:	20 81       	ld	r18, Z
    478a:	31 81       	ldd	r19, Z+1	; 0x01
    478c:	82 1b       	sub	r24, r18
    478e:	93 0b       	sbc	r25, r19
    4790:	0c c0       	rjmp	.+24     	; 0x47aa <uart_enqueue_string+0x24e>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    4792:	d7 01       	movw	r26, r14
    4794:	8d 91       	ld	r24, X+
    4796:	9c 91       	ld	r25, X
    4798:	11 97       	sbiw	r26, 0x01	; 1
    479a:	e3 ed       	ldi	r30, 0xD3	; 211
    479c:	fe e3       	ldi	r31, 0x3E	; 62
    479e:	20 81       	ld	r18, Z
    47a0:	31 81       	ldd	r19, Z+1	; 0x01
    47a2:	80 50       	subi	r24, 0x00	; 0
    47a4:	9c 4f       	sbci	r25, 0xFC	; 252
    47a6:	82 1b       	sub	r24, r18
    47a8:	93 0b       	sbc	r25, r19
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    47aa:	00 97       	sbiw	r24, 0x00	; 0
    47ac:	09 f6       	brne	.-126    	; 0x4730 <uart_enqueue_string+0x1d4>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    47ae:	d7 01       	movw	r26, r14
    47b0:	8d 91       	ld	r24, X+
    47b2:	9c 91       	ld	r25, X
    47b4:	11 97       	sbiw	r26, 0x01	; 1
    47b6:	e3 ed       	ldi	r30, 0xD3	; 211
    47b8:	fe e3       	ldi	r31, 0x3E	; 62
    47ba:	20 81       	ld	r18, Z
    47bc:	31 81       	ldd	r19, Z+1	; 0x01
    47be:	82 17       	cp	r24, r18
    47c0:	93 07       	cpc	r25, r19
    47c2:	40 f0       	brcs	.+16     	; 0x47d4 <uart_enqueue_string+0x278>
		return (uart_head[idx] - uart_tail[idx]);
    47c4:	8d 91       	ld	r24, X+
    47c6:	9c 91       	ld	r25, X
    47c8:	11 97       	sbiw	r26, 0x01	; 1
    47ca:	20 81       	ld	r18, Z
    47cc:	31 81       	ldd	r19, Z+1	; 0x01
    47ce:	82 1b       	sub	r24, r18
    47d0:	93 0b       	sbc	r25, r19
    47d2:	0c c0       	rjmp	.+24     	; 0x47ec <uart_enqueue_string+0x290>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    47d4:	d7 01       	movw	r26, r14
    47d6:	8d 91       	ld	r24, X+
    47d8:	9c 91       	ld	r25, X
    47da:	11 97       	sbiw	r26, 0x01	; 1
    47dc:	e3 ed       	ldi	r30, 0xD3	; 211
    47de:	fe e3       	ldi	r31, 0x3E	; 62
    47e0:	20 81       	ld	r18, Z
    47e2:	31 81       	ldd	r19, Z+1	; 0x01
    47e4:	80 50       	subi	r24, 0x00	; 0
    47e6:	9c 4f       	sbci	r25, 0xFC	; 252
    47e8:	82 1b       	sub	r24, r18
    47ea:	93 0b       	sbc	r25, r19
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
	}
	//disable the tx outgoing hardware buffer ready interrupt if we have nothing more to put in it.
	if(uart_count(port)>0) uart_txbuffer_enable(port);
    47ec:	00 97       	sbiw	r24, 0x00	; 0
    47ee:	21 f0       	breq	.+8      	; 0x47f8 <uart_enqueue_string+0x29c>
    47f0:	c8 01       	movw	r24, r16
    47f2:	0e 94 0f 19 	call	0x321e	; 0x321e <uart_txbuffer_enable>
    47f6:	03 c0       	rjmp	.+6      	; 0x47fe <uart_enqueue_string+0x2a2>
	else uart_txbuffer_disable(port);
    47f8:	c8 01       	movw	r24, r16
    47fa:	0e 94 14 19 	call	0x3228	; 0x3228 <uart_txbuffer_disable>
#ifndef UART_DEBUG
	uint8_t idx = port_map(port);
	
	//if (idx==0){uart_enqueue(&uctrl, datain);} //xxx
	
	uart_buffer[idx][uart_head[idx]] = datain;
    47fe:	d7 01       	movw	r26, r14
    4800:	8d 91       	ld	r24, X+
    4802:	9c 91       	ld	r25, X
    4804:	11 97       	sbiw	r26, 0x01	; 1
    4806:	87 53       	subi	r24, 0x37	; 55
    4808:	95 4c       	sbci	r25, 0xC5	; 197
    480a:	fc 01       	movw	r30, r24
    480c:	b0 82       	st	Z, r11
	uart_head[idx]++;
    480e:	8d 91       	ld	r24, X+
    4810:	9c 91       	ld	r25, X
    4812:	11 97       	sbiw	r26, 0x01	; 1
    4814:	01 96       	adiw	r24, 0x01	; 1
    4816:	8d 93       	st	X+, r24
    4818:	9c 93       	st	X, r25
    481a:	11 97       	sbiw	r26, 0x01	; 1
	if (uart_head[idx] >= MAX_BUFFER_LEN){
    481c:	8d 91       	ld	r24, X+
    481e:	9c 91       	ld	r25, X
    4820:	11 97       	sbiw	r26, 0x01	; 1
    4822:	f4 e0       	ldi	r31, 0x04	; 4
    4824:	80 30       	cpi	r24, 0x00	; 0
    4826:	9f 07       	cpc	r25, r31
    4828:	18 f0       	brcs	.+6      	; 0x4830 <uart_enqueue_string+0x2d4>
		uart_head[idx] = 0;
    482a:	1d 92       	st	X+, r1
    482c:	1c 92       	st	X, r1
    482e:	11 97       	sbiw	r26, 0x01	; 1
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    4830:	d8 01       	movw	r26, r16
    4832:	11 96       	adiw	r26, 0x01	; 1
    4834:	8c 91       	ld	r24, X
    4836:	11 97       	sbiw	r26, 0x01	; 1
    4838:	85 fd       	sbrc	r24, 5
    483a:	1f c0       	rjmp	.+62     	; 0x487a <uart_enqueue_string+0x31e>
    483c:	3f c0       	rjmp	.+126    	; 0x48bc <uart_enqueue_string+0x360>
}

inline uint8_t uart_dequeue(USART_t* port){
	uint8_t idx = port_map(port);
	uint16_t oldtail;
	oldtail = uart_tail[idx];
    483e:	a3 ed       	ldi	r26, 0xD3	; 211
    4840:	be e3       	ldi	r27, 0x3E	; 62
    4842:	ed 91       	ld	r30, X+
    4844:	fc 91       	ld	r31, X
    4846:	11 97       	sbiw	r26, 0x01	; 1
	uart_tail[idx]++;
    4848:	8d 91       	ld	r24, X+
    484a:	9c 91       	ld	r25, X
    484c:	11 97       	sbiw	r26, 0x01	; 1
    484e:	01 96       	adiw	r24, 0x01	; 1
    4850:	8d 93       	st	X+, r24
    4852:	9c 93       	st	X, r25
    4854:	11 97       	sbiw	r26, 0x01	; 1
	if (uart_tail[idx] >= MAX_BUFFER_LEN){
    4856:	8d 91       	ld	r24, X+
    4858:	9c 91       	ld	r25, X
    485a:	11 97       	sbiw	r26, 0x01	; 1
    485c:	b4 e0       	ldi	r27, 0x04	; 4
    485e:	80 30       	cpi	r24, 0x00	; 0
    4860:	9b 07       	cpc	r25, r27
    4862:	18 f0       	brcs	.+6      	; 0x486a <uart_enqueue_string+0x30e>
		uart_tail[idx] = 0;
    4864:	1d 92       	st	X+, r1
    4866:	1c 92       	st	X, r1
    4868:	11 97       	sbiw	r26, 0x01	; 1
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    486a:	e7 53       	subi	r30, 0x37	; 55
    486c:	f5 4c       	sbci	r31, 0xC5	; 197
    486e:	80 81       	ld	r24, Z
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
    4870:	f8 01       	movw	r30, r16
    4872:	80 83       	st	Z, r24
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    4874:	81 81       	ldd	r24, Z+1	; 0x01
    4876:	85 ff       	sbrs	r24, 5
    4878:	21 c0       	rjmp	.+66     	; 0x48bc <uart_enqueue_string+0x360>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    487a:	d7 01       	movw	r26, r14
    487c:	8d 91       	ld	r24, X+
    487e:	9c 91       	ld	r25, X
    4880:	11 97       	sbiw	r26, 0x01	; 1
    4882:	e3 ed       	ldi	r30, 0xD3	; 211
    4884:	fe e3       	ldi	r31, 0x3E	; 62
    4886:	20 81       	ld	r18, Z
    4888:	31 81       	ldd	r19, Z+1	; 0x01
    488a:	82 17       	cp	r24, r18
    488c:	93 07       	cpc	r25, r19
    488e:	40 f0       	brcs	.+16     	; 0x48a0 <uart_enqueue_string+0x344>
		return (uart_head[idx] - uart_tail[idx]);
    4890:	8d 91       	ld	r24, X+
    4892:	9c 91       	ld	r25, X
    4894:	11 97       	sbiw	r26, 0x01	; 1
    4896:	20 81       	ld	r18, Z
    4898:	31 81       	ldd	r19, Z+1	; 0x01
    489a:	82 1b       	sub	r24, r18
    489c:	93 0b       	sbc	r25, r19
    489e:	0c c0       	rjmp	.+24     	; 0x48b8 <uart_enqueue_string+0x35c>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    48a0:	d7 01       	movw	r26, r14
    48a2:	8d 91       	ld	r24, X+
    48a4:	9c 91       	ld	r25, X
    48a6:	11 97       	sbiw	r26, 0x01	; 1
    48a8:	e3 ed       	ldi	r30, 0xD3	; 211
    48aa:	fe e3       	ldi	r31, 0x3E	; 62
    48ac:	20 81       	ld	r18, Z
    48ae:	31 81       	ldd	r19, Z+1	; 0x01
    48b0:	80 50       	subi	r24, 0x00	; 0
    48b2:	9c 4f       	sbci	r25, 0xFC	; 252
    48b4:	82 1b       	sub	r24, r18
    48b6:	93 0b       	sbc	r25, r19
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    48b8:	00 97       	sbiw	r24, 0x00	; 0
    48ba:	09 f6       	brne	.-126    	; 0x483e <uart_enqueue_string+0x2e2>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    48bc:	d7 01       	movw	r26, r14
    48be:	8d 91       	ld	r24, X+
    48c0:	9c 91       	ld	r25, X
    48c2:	11 97       	sbiw	r26, 0x01	; 1
    48c4:	e3 ed       	ldi	r30, 0xD3	; 211
    48c6:	fe e3       	ldi	r31, 0x3E	; 62
    48c8:	20 81       	ld	r18, Z
    48ca:	31 81       	ldd	r19, Z+1	; 0x01
    48cc:	82 17       	cp	r24, r18
    48ce:	93 07       	cpc	r25, r19
    48d0:	40 f0       	brcs	.+16     	; 0x48e2 <uart_enqueue_string+0x386>
		return (uart_head[idx] - uart_tail[idx]);
    48d2:	8d 91       	ld	r24, X+
    48d4:	9c 91       	ld	r25, X
    48d6:	11 97       	sbiw	r26, 0x01	; 1
    48d8:	20 81       	ld	r18, Z
    48da:	31 81       	ldd	r19, Z+1	; 0x01
    48dc:	82 1b       	sub	r24, r18
    48de:	93 0b       	sbc	r25, r19
    48e0:	0c c0       	rjmp	.+24     	; 0x48fa <uart_enqueue_string+0x39e>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    48e2:	d7 01       	movw	r26, r14
    48e4:	8d 91       	ld	r24, X+
    48e6:	9c 91       	ld	r25, X
    48e8:	11 97       	sbiw	r26, 0x01	; 1
    48ea:	e3 ed       	ldi	r30, 0xD3	; 211
    48ec:	fe e3       	ldi	r31, 0x3E	; 62
    48ee:	20 81       	ld	r18, Z
    48f0:	31 81       	ldd	r19, Z+1	; 0x01
    48f2:	80 50       	subi	r24, 0x00	; 0
    48f4:	9c 4f       	sbci	r25, 0xFC	; 252
    48f6:	82 1b       	sub	r24, r18
    48f8:	93 0b       	sbc	r25, r19
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
	}
	//disable the tx outgoing hardware buffer ready interrupt if we have nothing more to put in it.
	if(uart_count(port)>0) uart_txbuffer_enable(port);
    48fa:	00 97       	sbiw	r24, 0x00	; 0
    48fc:	21 f0       	breq	.+8      	; 0x4906 <uart_enqueue_string+0x3aa>
    48fe:	c8 01       	movw	r24, r16
    4900:	0e 94 0f 19 	call	0x321e	; 0x321e <uart_txbuffer_enable>
    4904:	03 c0       	rjmp	.+6      	; 0x490c <uart_enqueue_string+0x3b0>
	else uart_txbuffer_disable(port);
    4906:	c8 01       	movw	r24, r16
    4908:	0e 94 14 19 	call	0x3228	; 0x3228 <uart_txbuffer_disable>
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0) && (lcd_flow_control == LCD_READY)){
		toSend = uart_dequeue(port);
		if (toSend == 0x0D) {lcd_flow_control = LCD_BUSY;}
		uart_enqueue(&udata, '`'); //xxx - echo to data port
		uart_enqueue(&udata, toSend); //xxx - echo to data port
		port->DATA = toSend;
    490c:	d6 01       	movw	r26, r12
    490e:	bc 92       	st	X, r11
}

void inline uart_transmit_lcd(USART_t* port){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0) && (lcd_flow_control == LCD_READY)){
    4910:	11 96       	adiw	r26, 0x01	; 1
    4912:	8c 91       	ld	r24, X
    4914:	11 97       	sbiw	r26, 0x01	; 1
    4916:	85 fd       	sbrc	r24, 5
    4918:	07 c0       	rjmp	.+14     	; 0x4928 <uart_enqueue_string+0x3cc>
    491a:	55 c0       	rjmp	.+170    	; 0x49c6 <uart_enqueue_string+0x46a>
#ifndef UART_DEBUG
	uint8_t idx = port_map(port);
	
	//if (idx==0){uart_enqueue(&uctrl, datain);} //xxx
	
	uart_buffer[idx][uart_head[idx]] = datain;
    491c:	0f 2e       	mov	r0, r31
    491e:	f0 e6       	ldi	r31, 0x60	; 96
    4920:	af 2e       	mov	r10, r31
    4922:	f0 2d       	mov	r31, r0
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    4924:	00 eb       	ldi	r16, 0xB0	; 176
    4926:	18 e0       	ldi	r17, 0x08	; 8
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    4928:	b0 eb       	ldi	r27, 0xB0	; 176
    492a:	cb 16       	cp	r12, r27
    492c:	bb e0       	ldi	r27, 0x0B	; 11
    492e:	db 06       	cpc	r13, r27
    4930:	61 f0       	breq	.+24     	; 0x494a <uart_enqueue_string+0x3ee>
	if (port == &uctrl) {return 1;}
    4932:	e0 ea       	ldi	r30, 0xA0	; 160
    4934:	ce 16       	cp	r12, r30
    4936:	e8 e0       	ldi	r30, 0x08	; 8
    4938:	de 06       	cpc	r13, r30
    493a:	49 f0       	breq	.+18     	; 0x494e <uart_enqueue_string+0x3f2>
	if (port == &udata) {return 2;}
    493c:	f0 eb       	ldi	r31, 0xB0	; 176
    493e:	cf 16       	cp	r12, r31
    4940:	f8 e0       	ldi	r31, 0x08	; 8
    4942:	df 06       	cpc	r13, r31
    4944:	31 f4       	brne	.+12     	; 0x4952 <uart_enqueue_string+0x3f6>
    4946:	22 e0       	ldi	r18, 0x02	; 2
    4948:	05 c0       	rjmp	.+10     	; 0x4954 <uart_enqueue_string+0x3f8>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    494a:	20 e0       	ldi	r18, 0x00	; 0
    494c:	03 c0       	rjmp	.+6      	; 0x4954 <uart_enqueue_string+0x3f8>
	if (port == &uctrl) {return 1;}
    494e:	21 e0       	ldi	r18, 0x01	; 1
    4950:	01 c0       	rjmp	.+2      	; 0x4954 <uart_enqueue_string+0x3f8>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    4952:	20 e0       	ldi	r18, 0x00	; 0
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    4954:	30 e0       	ldi	r19, 0x00	; 0
    4956:	c9 01       	movw	r24, r18
    4958:	88 0f       	add	r24, r24
    495a:	99 1f       	adc	r25, r25
    495c:	f3 01       	movw	r30, r6
    495e:	e8 0f       	add	r30, r24
    4960:	f9 1f       	adc	r31, r25
    4962:	40 81       	ld	r20, Z
    4964:	51 81       	ldd	r21, Z+1	; 0x01
    4966:	f4 01       	movw	r30, r8
    4968:	e8 0f       	add	r30, r24
    496a:	f9 1f       	adc	r31, r25
    496c:	80 81       	ld	r24, Z
    496e:	91 81       	ldd	r25, Z+1	; 0x01
    4970:	48 17       	cp	r20, r24
    4972:	59 07       	cpc	r21, r25
    4974:	88 f0       	brcs	.+34     	; 0x4998 <uart_enqueue_string+0x43c>
		return (uart_head[idx] - uart_tail[idx]);
    4976:	22 0f       	add	r18, r18
    4978:	33 1f       	adc	r19, r19
    497a:	f3 01       	movw	r30, r6
    497c:	e2 0f       	add	r30, r18
    497e:	f3 1f       	adc	r31, r19
    4980:	40 81       	ld	r20, Z
    4982:	51 81       	ldd	r21, Z+1	; 0x01
    4984:	f4 01       	movw	r30, r8
    4986:	e2 0f       	add	r30, r18
    4988:	f3 1f       	adc	r31, r19
    498a:	80 81       	ld	r24, Z
    498c:	91 81       	ldd	r25, Z+1	; 0x01
    498e:	9a 01       	movw	r18, r20
    4990:	28 1b       	sub	r18, r24
    4992:	39 0b       	sbc	r19, r25
    4994:	c9 01       	movw	r24, r18
    4996:	10 c0       	rjmp	.+32     	; 0x49b8 <uart_enqueue_string+0x45c>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    4998:	22 0f       	add	r18, r18
    499a:	33 1f       	adc	r19, r19
    499c:	f3 01       	movw	r30, r6
    499e:	e2 0f       	add	r30, r18
    49a0:	f3 1f       	adc	r31, r19
    49a2:	80 81       	ld	r24, Z
    49a4:	91 81       	ldd	r25, Z+1	; 0x01
    49a6:	f4 01       	movw	r30, r8
    49a8:	e2 0f       	add	r30, r18
    49aa:	f3 1f       	adc	r31, r19
    49ac:	20 81       	ld	r18, Z
    49ae:	31 81       	ldd	r19, Z+1	; 0x01
    49b0:	80 50       	subi	r24, 0x00	; 0
    49b2:	9c 4f       	sbci	r25, 0xFC	; 252
    49b4:	82 1b       	sub	r24, r18
    49b6:	93 0b       	sbc	r25, r19
}

void inline uart_transmit_lcd(USART_t* port){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0) && (lcd_flow_control == LCD_READY)){
    49b8:	00 97       	sbiw	r24, 0x00	; 0
    49ba:	29 f0       	breq	.+10     	; 0x49c6 <uart_enqueue_string+0x46a>
    49bc:	80 91 ab 26 	lds	r24, 0x26AB
    49c0:	82 35       	cpi	r24, 0x52	; 82
    49c2:	09 f4       	brne	.+2      	; 0x49c6 <uart_enqueue_string+0x46a>
    49c4:	58 ce       	rjmp	.-848    	; 0x4676 <uart_enqueue_string+0x11a>
		if (toSend == 0x0D) {lcd_flow_control = LCD_BUSY;}
		uart_enqueue(&udata, '`'); //xxx - echo to data port
		uart_enqueue(&udata, toSend); //xxx - echo to data port
		port->DATA = toSend;
	}
	uart_txbuffer_disable(port); //implemented this way to prevent periodic stalls that happen when uart_txbuffer isn't disabled quickly enough
    49c6:	c6 01       	movw	r24, r12
    49c8:	0e 94 14 19 	call	0x3228	; 0x3228 <uart_txbuffer_disable>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    49cc:	30 eb       	ldi	r19, 0xB0	; 176
    49ce:	c3 16       	cp	r12, r19
    49d0:	3b e0       	ldi	r19, 0x0B	; 11
    49d2:	d3 06       	cpc	r13, r19
    49d4:	61 f0       	breq	.+24     	; 0x49ee <uart_enqueue_string+0x492>
	if (port == &uctrl) {return 1;}
    49d6:	60 ea       	ldi	r22, 0xA0	; 160
    49d8:	c6 16       	cp	r12, r22
    49da:	68 e0       	ldi	r22, 0x08	; 8
    49dc:	d6 06       	cpc	r13, r22
    49de:	49 f0       	breq	.+18     	; 0x49f2 <uart_enqueue_string+0x496>
	if (port == &udata) {return 2;}
    49e0:	80 eb       	ldi	r24, 0xB0	; 176
    49e2:	c8 16       	cp	r12, r24
    49e4:	88 e0       	ldi	r24, 0x08	; 8
    49e6:	d8 06       	cpc	r13, r24
    49e8:	31 f4       	brne	.+12     	; 0x49f6 <uart_enqueue_string+0x49a>
    49ea:	82 e0       	ldi	r24, 0x02	; 2
    49ec:	05 c0       	rjmp	.+10     	; 0x49f8 <uart_enqueue_string+0x49c>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    49ee:	80 e0       	ldi	r24, 0x00	; 0
    49f0:	03 c0       	rjmp	.+6      	; 0x49f8 <uart_enqueue_string+0x49c>
	if (port == &uctrl) {return 1;}
    49f2:	81 e0       	ldi	r24, 0x01	; 1
    49f4:	01 c0       	rjmp	.+2      	; 0x49f8 <uart_enqueue_string+0x49c>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    49f6:	80 e0       	ldi	r24, 0x00	; 0
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    49f8:	28 2f       	mov	r18, r24
    49fa:	30 e0       	ldi	r19, 0x00	; 0
    49fc:	c9 01       	movw	r24, r18
    49fe:	88 0f       	add	r24, r24
    4a00:	99 1f       	adc	r25, r25
    4a02:	f3 01       	movw	r30, r6
    4a04:	e8 0f       	add	r30, r24
    4a06:	f9 1f       	adc	r31, r25
    4a08:	40 81       	ld	r20, Z
    4a0a:	51 81       	ldd	r21, Z+1	; 0x01
    4a0c:	f4 01       	movw	r30, r8
    4a0e:	e8 0f       	add	r30, r24
    4a10:	f9 1f       	adc	r31, r25
    4a12:	80 81       	ld	r24, Z
    4a14:	91 81       	ldd	r25, Z+1	; 0x01
    4a16:	48 17       	cp	r20, r24
    4a18:	59 07       	cpc	r21, r25
    4a1a:	88 f0       	brcs	.+34     	; 0x4a3e <uart_enqueue_string+0x4e2>
		return (uart_head[idx] - uart_tail[idx]);
    4a1c:	22 0f       	add	r18, r18
    4a1e:	33 1f       	adc	r19, r19
    4a20:	f3 01       	movw	r30, r6
    4a22:	e2 0f       	add	r30, r18
    4a24:	f3 1f       	adc	r31, r19
    4a26:	40 81       	ld	r20, Z
    4a28:	51 81       	ldd	r21, Z+1	; 0x01
    4a2a:	f4 01       	movw	r30, r8
    4a2c:	e2 0f       	add	r30, r18
    4a2e:	f3 1f       	adc	r31, r19
    4a30:	80 81       	ld	r24, Z
    4a32:	91 81       	ldd	r25, Z+1	; 0x01
    4a34:	da 01       	movw	r26, r20
    4a36:	a8 1b       	sub	r26, r24
    4a38:	b9 0b       	sbc	r27, r25
    4a3a:	cd 01       	movw	r24, r26
    4a3c:	10 c0       	rjmp	.+32     	; 0x4a5e <uart_enqueue_string+0x502>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    4a3e:	22 0f       	add	r18, r18
    4a40:	33 1f       	adc	r19, r19
    4a42:	f3 01       	movw	r30, r6
    4a44:	e2 0f       	add	r30, r18
    4a46:	f3 1f       	adc	r31, r19
    4a48:	80 81       	ld	r24, Z
    4a4a:	91 81       	ldd	r25, Z+1	; 0x01
    4a4c:	f4 01       	movw	r30, r8
    4a4e:	e2 0f       	add	r30, r18
    4a50:	f3 1f       	adc	r31, r19
    4a52:	20 81       	ld	r18, Z
    4a54:	31 81       	ldd	r19, Z+1	; 0x01
    4a56:	80 50       	subi	r24, 0x00	; 0
    4a58:	9c 4f       	sbci	r25, 0xFC	; 252
    4a5a:	82 1b       	sub	r24, r18
    4a5c:	93 0b       	sbc	r25, r19
		uart_enqueue(&udata, '`'); //xxx - echo to data port
		uart_enqueue(&udata, toSend); //xxx - echo to data port
		port->DATA = toSend;
	}
	uart_txbuffer_disable(port); //implemented this way to prevent periodic stalls that happen when uart_txbuffer isn't disabled quickly enough
	if ((uart_count(port)>0) && (lcd_flow_control == LCD_READY)){ //...something is waiting to go out
    4a5e:	00 97       	sbiw	r24, 0x00	; 0
    4a60:	09 f4       	brne	.+2      	; 0x4a64 <uart_enqueue_string+0x508>
    4a62:	e3 c0       	rjmp	.+454    	; 0x4c2a <uart_enqueue_string+0x6ce>
    4a64:	80 91 ab 26 	lds	r24, 0x26AB
    4a68:	82 35       	cpi	r24, 0x52	; 82
    4a6a:	09 f0       	breq	.+2      	; 0x4a6e <uart_enqueue_string+0x512>
    4a6c:	de c0       	rjmp	.+444    	; 0x4c2a <uart_enqueue_string+0x6ce>
		uart_txbuffer_enable(port);	
    4a6e:	c6 01       	movw	r24, r12
    4a70:	0e 94 0f 19 	call	0x321e	; 0x321e <uart_txbuffer_enable>
    4a74:	da c0       	rjmp	.+436    	; 0x4c2a <uart_enqueue_string+0x6ce>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    4a76:	b0 eb       	ldi	r27, 0xB0	; 176
    4a78:	cb 16       	cp	r12, r27
    4a7a:	bb e0       	ldi	r27, 0x0B	; 11
    4a7c:	db 06       	cpc	r13, r27
    4a7e:	61 f0       	breq	.+24     	; 0x4a98 <uart_enqueue_string+0x53c>
	if (port == &uctrl) {return 1;}
    4a80:	e0 ea       	ldi	r30, 0xA0	; 160
    4a82:	ce 16       	cp	r12, r30
    4a84:	e8 e0       	ldi	r30, 0x08	; 8
    4a86:	de 06       	cpc	r13, r30
    4a88:	49 f0       	breq	.+18     	; 0x4a9c <uart_enqueue_string+0x540>
	if (port == &udata) {return 2;}
    4a8a:	f0 eb       	ldi	r31, 0xB0	; 176
    4a8c:	cf 16       	cp	r12, r31
    4a8e:	f8 e0       	ldi	r31, 0x08	; 8
    4a90:	df 06       	cpc	r13, r31
    4a92:	31 f4       	brne	.+12     	; 0x4aa0 <uart_enqueue_string+0x544>
    4a94:	22 e0       	ldi	r18, 0x02	; 2
    4a96:	05 c0       	rjmp	.+10     	; 0x4aa2 <uart_enqueue_string+0x546>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    4a98:	20 e0       	ldi	r18, 0x00	; 0
    4a9a:	03 c0       	rjmp	.+6      	; 0x4aa2 <uart_enqueue_string+0x546>
	if (port == &uctrl) {return 1;}
    4a9c:	21 e0       	ldi	r18, 0x01	; 1
    4a9e:	01 c0       	rjmp	.+2      	; 0x4aa2 <uart_enqueue_string+0x546>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    4aa0:	20 e0       	ldi	r18, 0x00	; 0
}

inline uint8_t uart_dequeue(USART_t* port){
	uint8_t idx = port_map(port);
	uint16_t oldtail;
	oldtail = uart_tail[idx];
    4aa2:	30 e0       	ldi	r19, 0x00	; 0
    4aa4:	c9 01       	movw	r24, r18
    4aa6:	88 0f       	add	r24, r24
    4aa8:	99 1f       	adc	r25, r25
    4aaa:	f4 01       	movw	r30, r8
    4aac:	e8 0f       	add	r30, r24
    4aae:	f9 1f       	adc	r31, r25
    4ab0:	40 81       	ld	r20, Z
    4ab2:	51 81       	ldd	r21, Z+1	; 0x01
	uart_tail[idx]++;
    4ab4:	80 81       	ld	r24, Z
    4ab6:	91 81       	ldd	r25, Z+1	; 0x01
    4ab8:	01 96       	adiw	r24, 0x01	; 1
    4aba:	80 83       	st	Z, r24
    4abc:	91 83       	std	Z+1, r25	; 0x01
	if (uart_tail[idx] >= MAX_BUFFER_LEN){
    4abe:	80 81       	ld	r24, Z
    4ac0:	91 81       	ldd	r25, Z+1	; 0x01
    4ac2:	64 e0       	ldi	r22, 0x04	; 4
    4ac4:	80 30       	cpi	r24, 0x00	; 0
    4ac6:	96 07       	cpc	r25, r22
    4ac8:	10 f0       	brcs	.+4      	; 0x4ace <uart_enqueue_string+0x572>
		uart_tail[idx] = 0;
    4aca:	10 82       	st	Z, r1
    4acc:	11 82       	std	Z+1, r1	; 0x01
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    4ace:	c9 01       	movw	r24, r18
    4ad0:	98 2f       	mov	r25, r24
    4ad2:	88 27       	eor	r24, r24
    4ad4:	99 0f       	add	r25, r25
    4ad6:	99 0f       	add	r25, r25
    4ad8:	84 0f       	add	r24, r20
    4ada:	95 1f       	adc	r25, r21
    4adc:	84 0d       	add	r24, r4
    4ade:	95 1d       	adc	r25, r5
    4ae0:	fc 01       	movw	r30, r24
    4ae2:	80 81       	ld	r24, Z
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
    4ae4:	d6 01       	movw	r26, r12
    4ae6:	8c 93       	st	X, r24
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    4ae8:	11 96       	adiw	r26, 0x01	; 1
    4aea:	8c 91       	ld	r24, X
    4aec:	11 97       	sbiw	r26, 0x01	; 1
    4aee:	85 ff       	sbrs	r24, 5
    4af0:	4b c0       	rjmp	.+150    	; 0x4b88 <uart_enqueue_string+0x62c>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    4af2:	b0 eb       	ldi	r27, 0xB0	; 176
    4af4:	cb 16       	cp	r12, r27
    4af6:	bb e0       	ldi	r27, 0x0B	; 11
    4af8:	db 06       	cpc	r13, r27
    4afa:	61 f0       	breq	.+24     	; 0x4b14 <uart_enqueue_string+0x5b8>
	if (port == &uctrl) {return 1;}
    4afc:	e0 ea       	ldi	r30, 0xA0	; 160
    4afe:	ce 16       	cp	r12, r30
    4b00:	e8 e0       	ldi	r30, 0x08	; 8
    4b02:	de 06       	cpc	r13, r30
    4b04:	49 f0       	breq	.+18     	; 0x4b18 <uart_enqueue_string+0x5bc>
	if (port == &udata) {return 2;}
    4b06:	f0 eb       	ldi	r31, 0xB0	; 176
    4b08:	cf 16       	cp	r12, r31
    4b0a:	f8 e0       	ldi	r31, 0x08	; 8
    4b0c:	df 06       	cpc	r13, r31
    4b0e:	31 f4       	brne	.+12     	; 0x4b1c <uart_enqueue_string+0x5c0>
    4b10:	22 e0       	ldi	r18, 0x02	; 2
    4b12:	05 c0       	rjmp	.+10     	; 0x4b1e <uart_enqueue_string+0x5c2>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    4b14:	20 e0       	ldi	r18, 0x00	; 0
    4b16:	03 c0       	rjmp	.+6      	; 0x4b1e <uart_enqueue_string+0x5c2>
	if (port == &uctrl) {return 1;}
    4b18:	21 e0       	ldi	r18, 0x01	; 1
    4b1a:	01 c0       	rjmp	.+2      	; 0x4b1e <uart_enqueue_string+0x5c2>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    4b1c:	20 e0       	ldi	r18, 0x00	; 0
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    4b1e:	30 e0       	ldi	r19, 0x00	; 0
    4b20:	c9 01       	movw	r24, r18
    4b22:	88 0f       	add	r24, r24
    4b24:	99 1f       	adc	r25, r25
    4b26:	f3 01       	movw	r30, r6
    4b28:	e8 0f       	add	r30, r24
    4b2a:	f9 1f       	adc	r31, r25
    4b2c:	40 81       	ld	r20, Z
    4b2e:	51 81       	ldd	r21, Z+1	; 0x01
    4b30:	f4 01       	movw	r30, r8
    4b32:	e8 0f       	add	r30, r24
    4b34:	f9 1f       	adc	r31, r25
    4b36:	80 81       	ld	r24, Z
    4b38:	91 81       	ldd	r25, Z+1	; 0x01
    4b3a:	48 17       	cp	r20, r24
    4b3c:	59 07       	cpc	r21, r25
    4b3e:	88 f0       	brcs	.+34     	; 0x4b62 <uart_enqueue_string+0x606>
		return (uart_head[idx] - uart_tail[idx]);
    4b40:	22 0f       	add	r18, r18
    4b42:	33 1f       	adc	r19, r19
    4b44:	f3 01       	movw	r30, r6
    4b46:	e2 0f       	add	r30, r18
    4b48:	f3 1f       	adc	r31, r19
    4b4a:	40 81       	ld	r20, Z
    4b4c:	51 81       	ldd	r21, Z+1	; 0x01
    4b4e:	f4 01       	movw	r30, r8
    4b50:	e2 0f       	add	r30, r18
    4b52:	f3 1f       	adc	r31, r19
    4b54:	80 81       	ld	r24, Z
    4b56:	91 81       	ldd	r25, Z+1	; 0x01
    4b58:	9a 01       	movw	r18, r20
    4b5a:	28 1b       	sub	r18, r24
    4b5c:	39 0b       	sbc	r19, r25
    4b5e:	c9 01       	movw	r24, r18
    4b60:	10 c0       	rjmp	.+32     	; 0x4b82 <uart_enqueue_string+0x626>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    4b62:	22 0f       	add	r18, r18
    4b64:	33 1f       	adc	r19, r19
    4b66:	f3 01       	movw	r30, r6
    4b68:	e2 0f       	add	r30, r18
    4b6a:	f3 1f       	adc	r31, r19
    4b6c:	80 81       	ld	r24, Z
    4b6e:	91 81       	ldd	r25, Z+1	; 0x01
    4b70:	f4 01       	movw	r30, r8
    4b72:	e2 0f       	add	r30, r18
    4b74:	f3 1f       	adc	r31, r19
    4b76:	20 81       	ld	r18, Z
    4b78:	31 81       	ldd	r19, Z+1	; 0x01
    4b7a:	80 50       	subi	r24, 0x00	; 0
    4b7c:	9c 4f       	sbci	r25, 0xFC	; 252
    4b7e:	82 1b       	sub	r24, r18
    4b80:	93 0b       	sbc	r25, r19
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    4b82:	00 97       	sbiw	r24, 0x00	; 0
    4b84:	09 f0       	breq	.+2      	; 0x4b88 <uart_enqueue_string+0x62c>
    4b86:	77 cf       	rjmp	.-274    	; 0x4a76 <uart_enqueue_string+0x51a>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    4b88:	30 eb       	ldi	r19, 0xB0	; 176
    4b8a:	c3 16       	cp	r12, r19
    4b8c:	3b e0       	ldi	r19, 0x0B	; 11
    4b8e:	d3 06       	cpc	r13, r19
    4b90:	61 f0       	breq	.+24     	; 0x4baa <uart_enqueue_string+0x64e>
	if (port == &uctrl) {return 1;}
    4b92:	60 ea       	ldi	r22, 0xA0	; 160
    4b94:	c6 16       	cp	r12, r22
    4b96:	68 e0       	ldi	r22, 0x08	; 8
    4b98:	d6 06       	cpc	r13, r22
    4b9a:	49 f0       	breq	.+18     	; 0x4bae <uart_enqueue_string+0x652>
	if (port == &udata) {return 2;}
    4b9c:	80 eb       	ldi	r24, 0xB0	; 176
    4b9e:	c8 16       	cp	r12, r24
    4ba0:	88 e0       	ldi	r24, 0x08	; 8
    4ba2:	d8 06       	cpc	r13, r24
    4ba4:	31 f4       	brne	.+12     	; 0x4bb2 <uart_enqueue_string+0x656>
    4ba6:	22 e0       	ldi	r18, 0x02	; 2
    4ba8:	05 c0       	rjmp	.+10     	; 0x4bb4 <uart_enqueue_string+0x658>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    4baa:	20 e0       	ldi	r18, 0x00	; 0
    4bac:	03 c0       	rjmp	.+6      	; 0x4bb4 <uart_enqueue_string+0x658>
	if (port == &uctrl) {return 1;}
    4bae:	21 e0       	ldi	r18, 0x01	; 1
    4bb0:	01 c0       	rjmp	.+2      	; 0x4bb4 <uart_enqueue_string+0x658>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    4bb2:	20 e0       	ldi	r18, 0x00	; 0
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    4bb4:	30 e0       	ldi	r19, 0x00	; 0
    4bb6:	c9 01       	movw	r24, r18
    4bb8:	88 0f       	add	r24, r24
    4bba:	99 1f       	adc	r25, r25
    4bbc:	f3 01       	movw	r30, r6
    4bbe:	e8 0f       	add	r30, r24
    4bc0:	f9 1f       	adc	r31, r25
    4bc2:	40 81       	ld	r20, Z
    4bc4:	51 81       	ldd	r21, Z+1	; 0x01
    4bc6:	f4 01       	movw	r30, r8
    4bc8:	e8 0f       	add	r30, r24
    4bca:	f9 1f       	adc	r31, r25
    4bcc:	80 81       	ld	r24, Z
    4bce:	91 81       	ldd	r25, Z+1	; 0x01
    4bd0:	48 17       	cp	r20, r24
    4bd2:	59 07       	cpc	r21, r25
    4bd4:	88 f0       	brcs	.+34     	; 0x4bf8 <uart_enqueue_string+0x69c>
		return (uart_head[idx] - uart_tail[idx]);
    4bd6:	22 0f       	add	r18, r18
    4bd8:	33 1f       	adc	r19, r19
    4bda:	f3 01       	movw	r30, r6
    4bdc:	e2 0f       	add	r30, r18
    4bde:	f3 1f       	adc	r31, r19
    4be0:	40 81       	ld	r20, Z
    4be2:	51 81       	ldd	r21, Z+1	; 0x01
    4be4:	f4 01       	movw	r30, r8
    4be6:	e2 0f       	add	r30, r18
    4be8:	f3 1f       	adc	r31, r19
    4bea:	80 81       	ld	r24, Z
    4bec:	91 81       	ldd	r25, Z+1	; 0x01
    4bee:	da 01       	movw	r26, r20
    4bf0:	a8 1b       	sub	r26, r24
    4bf2:	b9 0b       	sbc	r27, r25
    4bf4:	cd 01       	movw	r24, r26
    4bf6:	10 c0       	rjmp	.+32     	; 0x4c18 <uart_enqueue_string+0x6bc>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    4bf8:	22 0f       	add	r18, r18
    4bfa:	33 1f       	adc	r19, r19
    4bfc:	f3 01       	movw	r30, r6
    4bfe:	e2 0f       	add	r30, r18
    4c00:	f3 1f       	adc	r31, r19
    4c02:	80 81       	ld	r24, Z
    4c04:	91 81       	ldd	r25, Z+1	; 0x01
    4c06:	f4 01       	movw	r30, r8
    4c08:	e2 0f       	add	r30, r18
    4c0a:	f3 1f       	adc	r31, r19
    4c0c:	20 81       	ld	r18, Z
    4c0e:	31 81       	ldd	r19, Z+1	; 0x01
    4c10:	80 50       	subi	r24, 0x00	; 0
    4c12:	9c 4f       	sbci	r25, 0xFC	; 252
    4c14:	82 1b       	sub	r24, r18
    4c16:	93 0b       	sbc	r25, r19
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
	}
	//disable the tx outgoing hardware buffer ready interrupt if we have nothing more to put in it.
	if(uart_count(port)>0) uart_txbuffer_enable(port);
    4c18:	00 97       	sbiw	r24, 0x00	; 0
    4c1a:	21 f0       	breq	.+8      	; 0x4c24 <uart_enqueue_string+0x6c8>
    4c1c:	c6 01       	movw	r24, r12
    4c1e:	0e 94 0f 19 	call	0x321e	; 0x321e <uart_txbuffer_enable>
    4c22:	03 c0       	rjmp	.+6      	; 0x4c2a <uart_enqueue_string+0x6ce>
	else uart_txbuffer_disable(port);
    4c24:	c6 01       	movw	r24, r12
    4c26:	0e 94 14 19 	call	0x3228	; 0x3228 <uart_txbuffer_disable>
}

///Enqueue a string into the outgoing serial queue. Adds CR terminator to string.
inline void uart_enqueue_string(USART_t* port, char* string_in){
	uint16_t length = (uint16_t)strlen(string_in);
	for (uint16_t i=0; i<length; i++) {uart_enqueue(port, (uint8_t)string_in[i]);}
    4c2a:	08 94       	sec
    4c2c:	21 1c       	adc	r2, r1
    4c2e:	31 1c       	adc	r3, r1
    4c30:	eb 81       	ldd	r30, Y+3	; 0x03
    4c32:	fc 81       	ldd	r31, Y+4	; 0x04
    4c34:	2e 16       	cp	r2, r30
    4c36:	3f 06       	cpc	r3, r31
    4c38:	09 f0       	breq	.+2      	; 0x4c3c <uart_enqueue_string+0x6e0>
    4c3a:	d2 cc       	rjmp	.-1628   	; 0x45e0 <uart_enqueue_string+0x84>
}
    4c3c:	24 96       	adiw	r28, 0x04	; 4
    4c3e:	cd bf       	out	0x3d, r28	; 61
    4c40:	de bf       	out	0x3e, r29	; 62
    4c42:	df 91       	pop	r29
    4c44:	cf 91       	pop	r28
    4c46:	1f 91       	pop	r17
    4c48:	0f 91       	pop	r16
    4c4a:	ff 90       	pop	r15
    4c4c:	ef 90       	pop	r14
    4c4e:	df 90       	pop	r13
    4c50:	cf 90       	pop	r12
    4c52:	bf 90       	pop	r11
    4c54:	af 90       	pop	r10
    4c56:	9f 90       	pop	r9
    4c58:	8f 90       	pop	r8
    4c5a:	7f 90       	pop	r7
    4c5c:	6f 90       	pop	r6
    4c5e:	5f 90       	pop	r5
    4c60:	4f 90       	pop	r4
    4c62:	3f 90       	pop	r3
    4c64:	2f 90       	pop	r2
    4c66:	08 95       	ret

00004c68 <uart_enqueue>:

///Enqueue date into the outgoing serial queue. This data is sent via USB to the PC's first virtual Comm Port associated with the EEICM. 
/**This is the queue used to send data back to the command and control GUI. The #define UART_DEBUG can be used to disable normal serial activity through this queue
	The blue LED is used in this routine to signal buffer overflow, which, due to the real-time scheduled nature of the EEICM firmware architecture, should not happen.
	This function is inactive when in UART DEBUG mode. Calls to this function have no effect during this period.*/
inline void uart_enqueue(USART_t* port, uint8_t datain){
    4c68:	3f 92       	push	r3
    4c6a:	4f 92       	push	r4
    4c6c:	5f 92       	push	r5
    4c6e:	6f 92       	push	r6
    4c70:	7f 92       	push	r7
    4c72:	8f 92       	push	r8
    4c74:	9f 92       	push	r9
    4c76:	af 92       	push	r10
    4c78:	bf 92       	push	r11
    4c7a:	cf 92       	push	r12
    4c7c:	df 92       	push	r13
    4c7e:	ef 92       	push	r14
    4c80:	ff 92       	push	r15
    4c82:	0f 93       	push	r16
    4c84:	1f 93       	push	r17
    4c86:	cf 93       	push	r28
    4c88:	df 93       	push	r29
    4c8a:	6c 01       	movw	r12, r24
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    4c8c:	2b e0       	ldi	r18, 0x0B	; 11
    4c8e:	80 3b       	cpi	r24, 0xB0	; 176
    4c90:	92 07       	cpc	r25, r18
    4c92:	59 f0       	breq	.+22     	; 0x4caa <uart_enqueue+0x42>
	if (port == &uctrl) {return 1;}
    4c94:	38 e0       	ldi	r19, 0x08	; 8
    4c96:	80 3a       	cpi	r24, 0xA0	; 160
    4c98:	93 07       	cpc	r25, r19
    4c9a:	49 f0       	breq	.+18     	; 0x4cae <uart_enqueue+0x46>
	if (port == &udata) {return 2;}
    4c9c:	80 eb       	ldi	r24, 0xB0	; 176
    4c9e:	c8 16       	cp	r12, r24
    4ca0:	88 e0       	ldi	r24, 0x08	; 8
    4ca2:	d8 06       	cpc	r13, r24
    4ca4:	31 f4       	brne	.+12     	; 0x4cb2 <uart_enqueue+0x4a>
    4ca6:	42 e0       	ldi	r20, 0x02	; 2
    4ca8:	05 c0       	rjmp	.+10     	; 0x4cb4 <uart_enqueue+0x4c>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    4caa:	40 e0       	ldi	r20, 0x00	; 0
    4cac:	03 c0       	rjmp	.+6      	; 0x4cb4 <uart_enqueue+0x4c>
	if (port == &uctrl) {return 1;}
    4cae:	41 e0       	ldi	r20, 0x01	; 1
    4cb0:	01 c0       	rjmp	.+2      	; 0x4cb4 <uart_enqueue+0x4c>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    4cb2:	40 e0       	ldi	r20, 0x00	; 0
#ifndef UART_DEBUG
	uint8_t idx = port_map(port);
	
	//if (idx==0){uart_enqueue(&uctrl, datain);} //xxx
	
	uart_buffer[idx][uart_head[idx]] = datain;
    4cb4:	c4 2f       	mov	r28, r20
    4cb6:	d0 e0       	ldi	r29, 0x00	; 0
    4cb8:	fe 01       	movw	r30, r28
    4cba:	ee 0f       	add	r30, r30
    4cbc:	ff 1f       	adc	r31, r31
    4cbe:	ed 53       	subi	r30, 0x3D	; 61
    4cc0:	fd 4c       	sbci	r31, 0xCD	; 205
    4cc2:	20 81       	ld	r18, Z
    4cc4:	31 81       	ldd	r19, Z+1	; 0x01
    4cc6:	ce 01       	movw	r24, r28
    4cc8:	98 2f       	mov	r25, r24
    4cca:	88 27       	eor	r24, r24
    4ccc:	99 0f       	add	r25, r25
    4cce:	99 0f       	add	r25, r25
    4cd0:	82 0f       	add	r24, r18
    4cd2:	93 1f       	adc	r25, r19
    4cd4:	dc 01       	movw	r26, r24
    4cd6:	a7 53       	subi	r26, 0x37	; 55
    4cd8:	bd 4c       	sbci	r27, 0xCD	; 205
    4cda:	6c 93       	st	X, r22
	uart_head[idx]++;
    4cdc:	80 81       	ld	r24, Z
    4cde:	91 81       	ldd	r25, Z+1	; 0x01
    4ce0:	01 96       	adiw	r24, 0x01	; 1
    4ce2:	80 83       	st	Z, r24
    4ce4:	91 83       	std	Z+1, r25	; 0x01
	if (uart_head[idx] >= MAX_BUFFER_LEN){
    4ce6:	80 81       	ld	r24, Z
    4ce8:	91 81       	ldd	r25, Z+1	; 0x01
    4cea:	e4 e0       	ldi	r30, 0x04	; 4
    4cec:	80 30       	cpi	r24, 0x00	; 0
    4cee:	9e 07       	cpc	r25, r30
    4cf0:	30 f0       	brcs	.+12     	; 0x4cfe <uart_enqueue+0x96>
		uart_head[idx] = 0;
    4cf2:	cc 0f       	add	r28, r28
    4cf4:	dd 1f       	adc	r29, r29
    4cf6:	cd 53       	subi	r28, 0x3D	; 61
    4cf8:	dd 4c       	sbci	r29, 0xCD	; 205
    4cfa:	18 82       	st	Y, r1
    4cfc:	19 82       	std	Y+1, r1	; 0x01
	}
	if (idx == 0){uart_transmit_lcd(port);} //start the transmission process.
    4cfe:	44 23       	and	r20, r20
    4d00:	29 f0       	breq	.+10     	; 0x4d0c <uart_enqueue+0xa4>
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    4d02:	f6 01       	movw	r30, r12
    4d04:	81 81       	ldd	r24, Z+1	; 0x01
    4d06:	85 fd       	sbrc	r24, 5
    4d08:	2f c2       	rjmp	.+1118   	; 0x5168 <uart_enqueue+0x500>
    4d0a:	81 c2       	rjmp	.+1282   	; 0x520e <uart_enqueue+0x5a6>
}

void inline uart_transmit_lcd(USART_t* port){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0) && (lcd_flow_control == LCD_READY)){
    4d0c:	f6 01       	movw	r30, r12
    4d0e:	81 81       	ldd	r24, Z+1	; 0x01
    4d10:	85 fd       	sbrc	r24, 5
    4d12:	1d c1       	rjmp	.+570    	; 0x4f4e <uart_enqueue+0x2e6>
    4d14:	8f c1       	rjmp	.+798    	; 0x5034 <uart_enqueue+0x3cc>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    4d16:	f0 eb       	ldi	r31, 0xB0	; 176
    4d18:	cf 16       	cp	r12, r31
    4d1a:	fb e0       	ldi	r31, 0x0B	; 11
    4d1c:	df 06       	cpc	r13, r31
    4d1e:	61 f0       	breq	.+24     	; 0x4d38 <uart_enqueue+0xd0>
	if (port == &uctrl) {return 1;}
    4d20:	20 ea       	ldi	r18, 0xA0	; 160
    4d22:	c2 16       	cp	r12, r18
    4d24:	28 e0       	ldi	r18, 0x08	; 8
    4d26:	d2 06       	cpc	r13, r18
    4d28:	49 f0       	breq	.+18     	; 0x4d3c <uart_enqueue+0xd4>
	if (port == &udata) {return 2;}
    4d2a:	30 eb       	ldi	r19, 0xB0	; 176
    4d2c:	c3 16       	cp	r12, r19
    4d2e:	38 e0       	ldi	r19, 0x08	; 8
    4d30:	d3 06       	cpc	r13, r19
    4d32:	31 f4       	brne	.+12     	; 0x4d40 <uart_enqueue+0xd8>
    4d34:	22 e0       	ldi	r18, 0x02	; 2
    4d36:	05 c0       	rjmp	.+10     	; 0x4d42 <uart_enqueue+0xda>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    4d38:	20 e0       	ldi	r18, 0x00	; 0
    4d3a:	03 c0       	rjmp	.+6      	; 0x4d42 <uart_enqueue+0xda>
	if (port == &uctrl) {return 1;}
    4d3c:	21 e0       	ldi	r18, 0x01	; 1
    4d3e:	01 c0       	rjmp	.+2      	; 0x4d42 <uart_enqueue+0xda>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    4d40:	20 e0       	ldi	r18, 0x00	; 0
}

inline uint8_t uart_dequeue(USART_t* port){
	uint8_t idx = port_map(port);
	uint16_t oldtail;
	oldtail = uart_tail[idx];
    4d42:	30 e0       	ldi	r19, 0x00	; 0
    4d44:	c9 01       	movw	r24, r18
    4d46:	88 0f       	add	r24, r24
    4d48:	99 1f       	adc	r25, r25
    4d4a:	f4 01       	movw	r30, r8
    4d4c:	e8 0f       	add	r30, r24
    4d4e:	f9 1f       	adc	r31, r25
    4d50:	40 81       	ld	r20, Z
    4d52:	51 81       	ldd	r21, Z+1	; 0x01
	uart_tail[idx]++;
    4d54:	80 81       	ld	r24, Z
    4d56:	91 81       	ldd	r25, Z+1	; 0x01
    4d58:	01 96       	adiw	r24, 0x01	; 1
    4d5a:	80 83       	st	Z, r24
    4d5c:	91 83       	std	Z+1, r25	; 0x01
	if (uart_tail[idx] >= MAX_BUFFER_LEN){
    4d5e:	80 81       	ld	r24, Z
    4d60:	91 81       	ldd	r25, Z+1	; 0x01
    4d62:	64 e0       	ldi	r22, 0x04	; 4
    4d64:	80 30       	cpi	r24, 0x00	; 0
    4d66:	96 07       	cpc	r25, r22
    4d68:	10 f0       	brcs	.+4      	; 0x4d6e <uart_enqueue+0x106>
		uart_tail[idx] = 0;
    4d6a:	10 82       	st	Z, r1
    4d6c:	11 82       	std	Z+1, r1	; 0x01
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    4d6e:	c9 01       	movw	r24, r18
    4d70:	98 2f       	mov	r25, r24
    4d72:	88 27       	eor	r24, r24
    4d74:	99 0f       	add	r25, r25
    4d76:	99 0f       	add	r25, r25
    4d78:	84 0f       	add	r24, r20
    4d7a:	95 1f       	adc	r25, r21
    4d7c:	84 0d       	add	r24, r4
    4d7e:	95 1d       	adc	r25, r5
    4d80:	fc 01       	movw	r30, r24
    4d82:	b0 80       	ld	r11, Z
void inline uart_transmit_lcd(USART_t* port){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0) && (lcd_flow_control == LCD_READY)){
		toSend = uart_dequeue(port);
		if (toSend == 0x0D) {lcd_flow_control = LCD_BUSY;}
    4d84:	fd e0       	ldi	r31, 0x0D	; 13
    4d86:	bf 16       	cp	r11, r31
    4d88:	11 f4       	brne	.+4      	; 0x4d8e <uart_enqueue+0x126>
    4d8a:	30 92 ab 26 	sts	0x26AB, r3
#ifndef UART_DEBUG
	uint8_t idx = port_map(port);
	
	//if (idx==0){uart_enqueue(&uctrl, datain);} //xxx
	
	uart_buffer[idx][uart_head[idx]] = datain;
    4d8e:	f8 01       	movw	r30, r16
    4d90:	80 81       	ld	r24, Z
    4d92:	91 81       	ldd	r25, Z+1	; 0x01
    4d94:	87 53       	subi	r24, 0x37	; 55
    4d96:	95 4c       	sbci	r25, 0xC5	; 197
    4d98:	fc 01       	movw	r30, r24
    4d9a:	a0 82       	st	Z, r10
	uart_head[idx]++;
    4d9c:	f8 01       	movw	r30, r16
    4d9e:	80 81       	ld	r24, Z
    4da0:	91 81       	ldd	r25, Z+1	; 0x01
    4da2:	01 96       	adiw	r24, 0x01	; 1
    4da4:	80 83       	st	Z, r24
    4da6:	91 83       	std	Z+1, r25	; 0x01
	if (uart_head[idx] >= MAX_BUFFER_LEN){
    4da8:	80 81       	ld	r24, Z
    4daa:	91 81       	ldd	r25, Z+1	; 0x01
    4dac:	f4 e0       	ldi	r31, 0x04	; 4
    4dae:	80 30       	cpi	r24, 0x00	; 0
    4db0:	9f 07       	cpc	r25, r31
    4db2:	18 f0       	brcs	.+6      	; 0x4dba <uart_enqueue+0x152>
		uart_head[idx] = 0;
    4db4:	f8 01       	movw	r30, r16
    4db6:	10 82       	st	Z, r1
    4db8:	11 82       	std	Z+1, r1	; 0x01
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    4dba:	f7 01       	movw	r30, r14
    4dbc:	81 81       	ldd	r24, Z+1	; 0x01
    4dbe:	85 fd       	sbrc	r24, 5
    4dc0:	18 c0       	rjmp	.+48     	; 0x4df2 <uart_enqueue+0x18a>
    4dc2:	31 c0       	rjmp	.+98     	; 0x4e26 <uart_enqueue+0x1be>
}

inline uint8_t uart_dequeue(USART_t* port){
	uint8_t idx = port_map(port);
	uint16_t oldtail;
	oldtail = uart_tail[idx];
    4dc4:	e8 81       	ld	r30, Y
    4dc6:	f9 81       	ldd	r31, Y+1	; 0x01
	uart_tail[idx]++;
    4dc8:	88 81       	ld	r24, Y
    4dca:	99 81       	ldd	r25, Y+1	; 0x01
    4dcc:	01 96       	adiw	r24, 0x01	; 1
    4dce:	88 83       	st	Y, r24
    4dd0:	99 83       	std	Y+1, r25	; 0x01
	if (uart_tail[idx] >= MAX_BUFFER_LEN){
    4dd2:	88 81       	ld	r24, Y
    4dd4:	99 81       	ldd	r25, Y+1	; 0x01
    4dd6:	24 e0       	ldi	r18, 0x04	; 4
    4dd8:	80 30       	cpi	r24, 0x00	; 0
    4dda:	92 07       	cpc	r25, r18
    4ddc:	10 f0       	brcs	.+4      	; 0x4de2 <uart_enqueue+0x17a>
		uart_tail[idx] = 0;
    4dde:	18 82       	st	Y, r1
    4de0:	19 82       	std	Y+1, r1	; 0x01
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    4de2:	e7 53       	subi	r30, 0x37	; 55
    4de4:	f5 4c       	sbci	r31, 0xC5	; 197
    4de6:	80 81       	ld	r24, Z
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
    4de8:	f7 01       	movw	r30, r14
    4dea:	80 83       	st	Z, r24
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    4dec:	81 81       	ldd	r24, Z+1	; 0x01
    4dee:	85 ff       	sbrs	r24, 5
    4df0:	1a c0       	rjmp	.+52     	; 0x4e26 <uart_enqueue+0x1be>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    4df2:	f8 01       	movw	r30, r16
    4df4:	80 81       	ld	r24, Z
    4df6:	91 81       	ldd	r25, Z+1	; 0x01
    4df8:	28 81       	ld	r18, Y
    4dfa:	39 81       	ldd	r19, Y+1	; 0x01
    4dfc:	82 17       	cp	r24, r18
    4dfe:	93 07       	cpc	r25, r19
    4e00:	38 f0       	brcs	.+14     	; 0x4e10 <uart_enqueue+0x1a8>
		return (uart_head[idx] - uart_tail[idx]);
    4e02:	80 81       	ld	r24, Z
    4e04:	91 81       	ldd	r25, Z+1	; 0x01
    4e06:	28 81       	ld	r18, Y
    4e08:	39 81       	ldd	r19, Y+1	; 0x01
    4e0a:	82 1b       	sub	r24, r18
    4e0c:	93 0b       	sbc	r25, r19
    4e0e:	09 c0       	rjmp	.+18     	; 0x4e22 <uart_enqueue+0x1ba>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    4e10:	f8 01       	movw	r30, r16
    4e12:	80 81       	ld	r24, Z
    4e14:	91 81       	ldd	r25, Z+1	; 0x01
    4e16:	28 81       	ld	r18, Y
    4e18:	39 81       	ldd	r19, Y+1	; 0x01
    4e1a:	80 50       	subi	r24, 0x00	; 0
    4e1c:	9c 4f       	sbci	r25, 0xFC	; 252
    4e1e:	82 1b       	sub	r24, r18
    4e20:	93 0b       	sbc	r25, r19
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    4e22:	00 97       	sbiw	r24, 0x00	; 0
    4e24:	79 f6       	brne	.-98     	; 0x4dc4 <uart_enqueue+0x15c>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    4e26:	f8 01       	movw	r30, r16
    4e28:	80 81       	ld	r24, Z
    4e2a:	91 81       	ldd	r25, Z+1	; 0x01
    4e2c:	28 81       	ld	r18, Y
    4e2e:	39 81       	ldd	r19, Y+1	; 0x01
    4e30:	82 17       	cp	r24, r18
    4e32:	93 07       	cpc	r25, r19
    4e34:	38 f0       	brcs	.+14     	; 0x4e44 <uart_enqueue+0x1dc>
		return (uart_head[idx] - uart_tail[idx]);
    4e36:	80 81       	ld	r24, Z
    4e38:	91 81       	ldd	r25, Z+1	; 0x01
    4e3a:	28 81       	ld	r18, Y
    4e3c:	39 81       	ldd	r19, Y+1	; 0x01
    4e3e:	82 1b       	sub	r24, r18
    4e40:	93 0b       	sbc	r25, r19
    4e42:	09 c0       	rjmp	.+18     	; 0x4e56 <uart_enqueue+0x1ee>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    4e44:	f8 01       	movw	r30, r16
    4e46:	80 81       	ld	r24, Z
    4e48:	91 81       	ldd	r25, Z+1	; 0x01
    4e4a:	28 81       	ld	r18, Y
    4e4c:	39 81       	ldd	r19, Y+1	; 0x01
    4e4e:	80 50       	subi	r24, 0x00	; 0
    4e50:	9c 4f       	sbci	r25, 0xFC	; 252
    4e52:	82 1b       	sub	r24, r18
    4e54:	93 0b       	sbc	r25, r19
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
	}
	//disable the tx outgoing hardware buffer ready interrupt if we have nothing more to put in it.
	if(uart_count(port)>0) uart_txbuffer_enable(port);
    4e56:	00 97       	sbiw	r24, 0x00	; 0
    4e58:	21 f0       	breq	.+8      	; 0x4e62 <uart_enqueue+0x1fa>
    4e5a:	c7 01       	movw	r24, r14
    4e5c:	0e 94 0f 19 	call	0x321e	; 0x321e <uart_txbuffer_enable>
    4e60:	03 c0       	rjmp	.+6      	; 0x4e68 <uart_enqueue+0x200>
	else uart_txbuffer_disable(port);
    4e62:	c7 01       	movw	r24, r14
    4e64:	0e 94 14 19 	call	0x3228	; 0x3228 <uart_txbuffer_disable>
#ifndef UART_DEBUG
	uint8_t idx = port_map(port);
	
	//if (idx==0){uart_enqueue(&uctrl, datain);} //xxx
	
	uart_buffer[idx][uart_head[idx]] = datain;
    4e68:	f8 01       	movw	r30, r16
    4e6a:	80 81       	ld	r24, Z
    4e6c:	91 81       	ldd	r25, Z+1	; 0x01
    4e6e:	87 53       	subi	r24, 0x37	; 55
    4e70:	95 4c       	sbci	r25, 0xC5	; 197
    4e72:	fc 01       	movw	r30, r24
    4e74:	b0 82       	st	Z, r11
	uart_head[idx]++;
    4e76:	f8 01       	movw	r30, r16
    4e78:	80 81       	ld	r24, Z
    4e7a:	91 81       	ldd	r25, Z+1	; 0x01
    4e7c:	01 96       	adiw	r24, 0x01	; 1
    4e7e:	80 83       	st	Z, r24
    4e80:	91 83       	std	Z+1, r25	; 0x01
	if (uart_head[idx] >= MAX_BUFFER_LEN){
    4e82:	80 81       	ld	r24, Z
    4e84:	91 81       	ldd	r25, Z+1	; 0x01
    4e86:	f4 e0       	ldi	r31, 0x04	; 4
    4e88:	80 30       	cpi	r24, 0x00	; 0
    4e8a:	9f 07       	cpc	r25, r31
    4e8c:	18 f0       	brcs	.+6      	; 0x4e94 <uart_enqueue+0x22c>
		uart_head[idx] = 0;
    4e8e:	f8 01       	movw	r30, r16
    4e90:	10 82       	st	Z, r1
    4e92:	11 82       	std	Z+1, r1	; 0x01
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    4e94:	f7 01       	movw	r30, r14
    4e96:	81 81       	ldd	r24, Z+1	; 0x01
    4e98:	85 fd       	sbrc	r24, 5
    4e9a:	18 c0       	rjmp	.+48     	; 0x4ecc <uart_enqueue+0x264>
    4e9c:	31 c0       	rjmp	.+98     	; 0x4f00 <uart_enqueue+0x298>
}

inline uint8_t uart_dequeue(USART_t* port){
	uint8_t idx = port_map(port);
	uint16_t oldtail;
	oldtail = uart_tail[idx];
    4e9e:	e8 81       	ld	r30, Y
    4ea0:	f9 81       	ldd	r31, Y+1	; 0x01
	uart_tail[idx]++;
    4ea2:	88 81       	ld	r24, Y
    4ea4:	99 81       	ldd	r25, Y+1	; 0x01
    4ea6:	01 96       	adiw	r24, 0x01	; 1
    4ea8:	88 83       	st	Y, r24
    4eaa:	99 83       	std	Y+1, r25	; 0x01
	if (uart_tail[idx] >= MAX_BUFFER_LEN){
    4eac:	88 81       	ld	r24, Y
    4eae:	99 81       	ldd	r25, Y+1	; 0x01
    4eb0:	24 e0       	ldi	r18, 0x04	; 4
    4eb2:	80 30       	cpi	r24, 0x00	; 0
    4eb4:	92 07       	cpc	r25, r18
    4eb6:	10 f0       	brcs	.+4      	; 0x4ebc <uart_enqueue+0x254>
		uart_tail[idx] = 0;
    4eb8:	18 82       	st	Y, r1
    4eba:	19 82       	std	Y+1, r1	; 0x01
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    4ebc:	e7 53       	subi	r30, 0x37	; 55
    4ebe:	f5 4c       	sbci	r31, 0xC5	; 197
    4ec0:	80 81       	ld	r24, Z
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
    4ec2:	f7 01       	movw	r30, r14
    4ec4:	80 83       	st	Z, r24
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    4ec6:	81 81       	ldd	r24, Z+1	; 0x01
    4ec8:	85 ff       	sbrs	r24, 5
    4eca:	1a c0       	rjmp	.+52     	; 0x4f00 <uart_enqueue+0x298>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    4ecc:	f8 01       	movw	r30, r16
    4ece:	80 81       	ld	r24, Z
    4ed0:	91 81       	ldd	r25, Z+1	; 0x01
    4ed2:	28 81       	ld	r18, Y
    4ed4:	39 81       	ldd	r19, Y+1	; 0x01
    4ed6:	82 17       	cp	r24, r18
    4ed8:	93 07       	cpc	r25, r19
    4eda:	38 f0       	brcs	.+14     	; 0x4eea <uart_enqueue+0x282>
		return (uart_head[idx] - uart_tail[idx]);
    4edc:	80 81       	ld	r24, Z
    4ede:	91 81       	ldd	r25, Z+1	; 0x01
    4ee0:	28 81       	ld	r18, Y
    4ee2:	39 81       	ldd	r19, Y+1	; 0x01
    4ee4:	82 1b       	sub	r24, r18
    4ee6:	93 0b       	sbc	r25, r19
    4ee8:	09 c0       	rjmp	.+18     	; 0x4efc <uart_enqueue+0x294>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    4eea:	f8 01       	movw	r30, r16
    4eec:	80 81       	ld	r24, Z
    4eee:	91 81       	ldd	r25, Z+1	; 0x01
    4ef0:	28 81       	ld	r18, Y
    4ef2:	39 81       	ldd	r19, Y+1	; 0x01
    4ef4:	80 50       	subi	r24, 0x00	; 0
    4ef6:	9c 4f       	sbci	r25, 0xFC	; 252
    4ef8:	82 1b       	sub	r24, r18
    4efa:	93 0b       	sbc	r25, r19
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    4efc:	00 97       	sbiw	r24, 0x00	; 0
    4efe:	79 f6       	brne	.-98     	; 0x4e9e <uart_enqueue+0x236>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    4f00:	f8 01       	movw	r30, r16
    4f02:	80 81       	ld	r24, Z
    4f04:	91 81       	ldd	r25, Z+1	; 0x01
    4f06:	28 81       	ld	r18, Y
    4f08:	39 81       	ldd	r19, Y+1	; 0x01
    4f0a:	82 17       	cp	r24, r18
    4f0c:	93 07       	cpc	r25, r19
    4f0e:	38 f0       	brcs	.+14     	; 0x4f1e <uart_enqueue+0x2b6>
		return (uart_head[idx] - uart_tail[idx]);
    4f10:	80 81       	ld	r24, Z
    4f12:	91 81       	ldd	r25, Z+1	; 0x01
    4f14:	28 81       	ld	r18, Y
    4f16:	39 81       	ldd	r19, Y+1	; 0x01
    4f18:	82 1b       	sub	r24, r18
    4f1a:	93 0b       	sbc	r25, r19
    4f1c:	09 c0       	rjmp	.+18     	; 0x4f30 <uart_enqueue+0x2c8>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    4f1e:	f8 01       	movw	r30, r16
    4f20:	80 81       	ld	r24, Z
    4f22:	91 81       	ldd	r25, Z+1	; 0x01
    4f24:	28 81       	ld	r18, Y
    4f26:	39 81       	ldd	r19, Y+1	; 0x01
    4f28:	80 50       	subi	r24, 0x00	; 0
    4f2a:	9c 4f       	sbci	r25, 0xFC	; 252
    4f2c:	82 1b       	sub	r24, r18
    4f2e:	93 0b       	sbc	r25, r19
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
	}
	//disable the tx outgoing hardware buffer ready interrupt if we have nothing more to put in it.
	if(uart_count(port)>0) uart_txbuffer_enable(port);
    4f30:	00 97       	sbiw	r24, 0x00	; 0
    4f32:	21 f0       	breq	.+8      	; 0x4f3c <uart_enqueue+0x2d4>
    4f34:	c7 01       	movw	r24, r14
    4f36:	0e 94 0f 19 	call	0x321e	; 0x321e <uart_txbuffer_enable>
    4f3a:	03 c0       	rjmp	.+6      	; 0x4f42 <uart_enqueue+0x2da>
	else uart_txbuffer_disable(port);
    4f3c:	c7 01       	movw	r24, r14
    4f3e:	0e 94 14 19 	call	0x3228	; 0x3228 <uart_txbuffer_disable>
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0) && (lcd_flow_control == LCD_READY)){
		toSend = uart_dequeue(port);
		if (toSend == 0x0D) {lcd_flow_control = LCD_BUSY;}
		uart_enqueue(&udata, '`'); //xxx - echo to data port
		uart_enqueue(&udata, toSend); //xxx - echo to data port
		port->DATA = toSend;
    4f42:	f6 01       	movw	r30, r12
    4f44:	b0 82       	st	Z, r11
}

void inline uart_transmit_lcd(USART_t* port){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0) && (lcd_flow_control == LCD_READY)){
    4f46:	81 81       	ldd	r24, Z+1	; 0x01
    4f48:	85 fd       	sbrc	r24, 5
    4f4a:	25 c0       	rjmp	.+74     	; 0x4f96 <uart_enqueue+0x32e>
    4f4c:	73 c0       	rjmp	.+230    	; 0x5034 <uart_enqueue+0x3cc>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    4f4e:	0f 2e       	mov	r0, r31
    4f50:	f3 ec       	ldi	r31, 0xC3	; 195
    4f52:	6f 2e       	mov	r6, r31
    4f54:	f2 e3       	ldi	r31, 0x32	; 50
    4f56:	7f 2e       	mov	r7, r31
    4f58:	f0 2d       	mov	r31, r0
    4f5a:	0f 2e       	mov	r0, r31
    4f5c:	ff ec       	ldi	r31, 0xCF	; 207
    4f5e:	8f 2e       	mov	r8, r31
    4f60:	fe e3       	ldi	r31, 0x3E	; 62
    4f62:	9f 2e       	mov	r9, r31
    4f64:	f0 2d       	mov	r31, r0
		uart_tail[idx] = 0;
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    4f66:	0f 2e       	mov	r0, r31
    4f68:	f9 ec       	ldi	r31, 0xC9	; 201
    4f6a:	4f 2e       	mov	r4, r31
    4f6c:	f2 e3       	ldi	r31, 0x32	; 50
    4f6e:	5f 2e       	mov	r5, r31
    4f70:	f0 2d       	mov	r31, r0
void inline uart_transmit_lcd(USART_t* port){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0) && (lcd_flow_control == LCD_READY)){
		toSend = uart_dequeue(port);
		if (toSend == 0x0D) {lcd_flow_control = LCD_BUSY;}
    4f72:	0f 2e       	mov	r0, r31
    4f74:	fe e4       	ldi	r31, 0x4E	; 78
    4f76:	3f 2e       	mov	r3, r31
    4f78:	f0 2d       	mov	r31, r0
#ifndef UART_DEBUG
	uint8_t idx = port_map(port);
	
	//if (idx==0){uart_enqueue(&uctrl, datain);} //xxx
	
	uart_buffer[idx][uart_head[idx]] = datain;
    4f7a:	07 ec       	ldi	r16, 0xC7	; 199
    4f7c:	12 e3       	ldi	r17, 0x32	; 50
    4f7e:	0f 2e       	mov	r0, r31
    4f80:	f0 e6       	ldi	r31, 0x60	; 96
    4f82:	af 2e       	mov	r10, r31
    4f84:	f0 2d       	mov	r31, r0
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    4f86:	0f 2e       	mov	r0, r31
    4f88:	f0 eb       	ldi	r31, 0xB0	; 176
    4f8a:	ef 2e       	mov	r14, r31
    4f8c:	f8 e0       	ldi	r31, 0x08	; 8
    4f8e:	ff 2e       	mov	r15, r31
    4f90:	f0 2d       	mov	r31, r0
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    4f92:	c3 ed       	ldi	r28, 0xD3	; 211
    4f94:	de e3       	ldi	r29, 0x3E	; 62
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    4f96:	f0 eb       	ldi	r31, 0xB0	; 176
    4f98:	cf 16       	cp	r12, r31
    4f9a:	fb e0       	ldi	r31, 0x0B	; 11
    4f9c:	df 06       	cpc	r13, r31
    4f9e:	61 f0       	breq	.+24     	; 0x4fb8 <uart_enqueue+0x350>
	if (port == &uctrl) {return 1;}
    4fa0:	20 ea       	ldi	r18, 0xA0	; 160
    4fa2:	c2 16       	cp	r12, r18
    4fa4:	28 e0       	ldi	r18, 0x08	; 8
    4fa6:	d2 06       	cpc	r13, r18
    4fa8:	49 f0       	breq	.+18     	; 0x4fbc <uart_enqueue+0x354>
	if (port == &udata) {return 2;}
    4faa:	30 eb       	ldi	r19, 0xB0	; 176
    4fac:	c3 16       	cp	r12, r19
    4fae:	38 e0       	ldi	r19, 0x08	; 8
    4fb0:	d3 06       	cpc	r13, r19
    4fb2:	31 f4       	brne	.+12     	; 0x4fc0 <uart_enqueue+0x358>
    4fb4:	22 e0       	ldi	r18, 0x02	; 2
    4fb6:	05 c0       	rjmp	.+10     	; 0x4fc2 <uart_enqueue+0x35a>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    4fb8:	20 e0       	ldi	r18, 0x00	; 0
    4fba:	03 c0       	rjmp	.+6      	; 0x4fc2 <uart_enqueue+0x35a>
	if (port == &uctrl) {return 1;}
    4fbc:	21 e0       	ldi	r18, 0x01	; 1
    4fbe:	01 c0       	rjmp	.+2      	; 0x4fc2 <uart_enqueue+0x35a>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    4fc0:	20 e0       	ldi	r18, 0x00	; 0
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    4fc2:	30 e0       	ldi	r19, 0x00	; 0
    4fc4:	c9 01       	movw	r24, r18
    4fc6:	88 0f       	add	r24, r24
    4fc8:	99 1f       	adc	r25, r25
    4fca:	f3 01       	movw	r30, r6
    4fcc:	e8 0f       	add	r30, r24
    4fce:	f9 1f       	adc	r31, r25
    4fd0:	40 81       	ld	r20, Z
    4fd2:	51 81       	ldd	r21, Z+1	; 0x01
    4fd4:	f4 01       	movw	r30, r8
    4fd6:	e8 0f       	add	r30, r24
    4fd8:	f9 1f       	adc	r31, r25
    4fda:	80 81       	ld	r24, Z
    4fdc:	91 81       	ldd	r25, Z+1	; 0x01
    4fde:	48 17       	cp	r20, r24
    4fe0:	59 07       	cpc	r21, r25
    4fe2:	88 f0       	brcs	.+34     	; 0x5006 <uart_enqueue+0x39e>
		return (uart_head[idx] - uart_tail[idx]);
    4fe4:	22 0f       	add	r18, r18
    4fe6:	33 1f       	adc	r19, r19
    4fe8:	f3 01       	movw	r30, r6
    4fea:	e2 0f       	add	r30, r18
    4fec:	f3 1f       	adc	r31, r19
    4fee:	40 81       	ld	r20, Z
    4ff0:	51 81       	ldd	r21, Z+1	; 0x01
    4ff2:	f4 01       	movw	r30, r8
    4ff4:	e2 0f       	add	r30, r18
    4ff6:	f3 1f       	adc	r31, r19
    4ff8:	80 81       	ld	r24, Z
    4ffa:	91 81       	ldd	r25, Z+1	; 0x01
    4ffc:	fa 01       	movw	r30, r20
    4ffe:	e8 1b       	sub	r30, r24
    5000:	f9 0b       	sbc	r31, r25
    5002:	cf 01       	movw	r24, r30
    5004:	10 c0       	rjmp	.+32     	; 0x5026 <uart_enqueue+0x3be>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    5006:	22 0f       	add	r18, r18
    5008:	33 1f       	adc	r19, r19
    500a:	f3 01       	movw	r30, r6
    500c:	e2 0f       	add	r30, r18
    500e:	f3 1f       	adc	r31, r19
    5010:	80 81       	ld	r24, Z
    5012:	91 81       	ldd	r25, Z+1	; 0x01
    5014:	f4 01       	movw	r30, r8
    5016:	e2 0f       	add	r30, r18
    5018:	f3 1f       	adc	r31, r19
    501a:	20 81       	ld	r18, Z
    501c:	31 81       	ldd	r19, Z+1	; 0x01
    501e:	80 50       	subi	r24, 0x00	; 0
    5020:	9c 4f       	sbci	r25, 0xFC	; 252
    5022:	82 1b       	sub	r24, r18
    5024:	93 0b       	sbc	r25, r19
}

void inline uart_transmit_lcd(USART_t* port){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0) && (lcd_flow_control == LCD_READY)){
    5026:	00 97       	sbiw	r24, 0x00	; 0
    5028:	29 f0       	breq	.+10     	; 0x5034 <uart_enqueue+0x3cc>
    502a:	80 91 ab 26 	lds	r24, 0x26AB
    502e:	82 35       	cpi	r24, 0x52	; 82
    5030:	09 f4       	brne	.+2      	; 0x5034 <uart_enqueue+0x3cc>
    5032:	71 ce       	rjmp	.-798    	; 0x4d16 <uart_enqueue+0xae>
		if (toSend == 0x0D) {lcd_flow_control = LCD_BUSY;}
		uart_enqueue(&udata, '`'); //xxx - echo to data port
		uart_enqueue(&udata, toSend); //xxx - echo to data port
		port->DATA = toSend;
	}
	uart_txbuffer_disable(port); //implemented this way to prevent periodic stalls that happen when uart_txbuffer isn't disabled quickly enough
    5034:	c6 01       	movw	r24, r12
    5036:	0e 94 14 19 	call	0x3228	; 0x3228 <uart_txbuffer_disable>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    503a:	f0 eb       	ldi	r31, 0xB0	; 176
    503c:	cf 16       	cp	r12, r31
    503e:	fb e0       	ldi	r31, 0x0B	; 11
    5040:	df 06       	cpc	r13, r31
    5042:	61 f0       	breq	.+24     	; 0x505c <uart_enqueue+0x3f4>
	if (port == &uctrl) {return 1;}
    5044:	20 ea       	ldi	r18, 0xA0	; 160
    5046:	c2 16       	cp	r12, r18
    5048:	28 e0       	ldi	r18, 0x08	; 8
    504a:	d2 06       	cpc	r13, r18
    504c:	49 f0       	breq	.+18     	; 0x5060 <uart_enqueue+0x3f8>
	if (port == &udata) {return 2;}
    504e:	30 eb       	ldi	r19, 0xB0	; 176
    5050:	c3 16       	cp	r12, r19
    5052:	38 e0       	ldi	r19, 0x08	; 8
    5054:	d3 06       	cpc	r13, r19
    5056:	31 f4       	brne	.+12     	; 0x5064 <uart_enqueue+0x3fc>
    5058:	22 e0       	ldi	r18, 0x02	; 2
    505a:	05 c0       	rjmp	.+10     	; 0x5066 <uart_enqueue+0x3fe>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    505c:	20 e0       	ldi	r18, 0x00	; 0
    505e:	03 c0       	rjmp	.+6      	; 0x5066 <uart_enqueue+0x3fe>
	if (port == &uctrl) {return 1;}
    5060:	21 e0       	ldi	r18, 0x01	; 1
    5062:	01 c0       	rjmp	.+2      	; 0x5066 <uart_enqueue+0x3fe>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    5064:	20 e0       	ldi	r18, 0x00	; 0
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    5066:	30 e0       	ldi	r19, 0x00	; 0
    5068:	c9 01       	movw	r24, r18
    506a:	88 0f       	add	r24, r24
    506c:	99 1f       	adc	r25, r25
    506e:	fc 01       	movw	r30, r24
    5070:	ed 53       	subi	r30, 0x3D	; 61
    5072:	fd 4c       	sbci	r31, 0xCD	; 205
    5074:	40 81       	ld	r20, Z
    5076:	51 81       	ldd	r21, Z+1	; 0x01
    5078:	81 53       	subi	r24, 0x31	; 49
    507a:	91 4c       	sbci	r25, 0xC1	; 193
    507c:	fc 01       	movw	r30, r24
    507e:	80 81       	ld	r24, Z
    5080:	91 81       	ldd	r25, Z+1	; 0x01
    5082:	48 17       	cp	r20, r24
    5084:	59 07       	cpc	r21, r25
    5086:	78 f0       	brcs	.+30     	; 0x50a6 <uart_enqueue+0x43e>
		return (uart_head[idx] - uart_tail[idx]);
    5088:	22 0f       	add	r18, r18
    508a:	33 1f       	adc	r19, r19
    508c:	f9 01       	movw	r30, r18
    508e:	ed 53       	subi	r30, 0x3D	; 61
    5090:	fd 4c       	sbci	r31, 0xCD	; 205
    5092:	80 81       	ld	r24, Z
    5094:	91 81       	ldd	r25, Z+1	; 0x01
    5096:	21 53       	subi	r18, 0x31	; 49
    5098:	31 4c       	sbci	r19, 0xC1	; 193
    509a:	f9 01       	movw	r30, r18
    509c:	20 81       	ld	r18, Z
    509e:	31 81       	ldd	r19, Z+1	; 0x01
    50a0:	82 1b       	sub	r24, r18
    50a2:	93 0b       	sbc	r25, r19
    50a4:	12 c0       	rjmp	.+36     	; 0x50ca <uart_enqueue+0x462>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    50a6:	22 0f       	add	r18, r18
    50a8:	33 1f       	adc	r19, r19
    50aa:	f9 01       	movw	r30, r18
    50ac:	ed 53       	subi	r30, 0x3D	; 61
    50ae:	fd 4c       	sbci	r31, 0xCD	; 205
    50b0:	40 81       	ld	r20, Z
    50b2:	51 81       	ldd	r21, Z+1	; 0x01
    50b4:	21 53       	subi	r18, 0x31	; 49
    50b6:	31 4c       	sbci	r19, 0xC1	; 193
    50b8:	f9 01       	movw	r30, r18
    50ba:	80 81       	ld	r24, Z
    50bc:	91 81       	ldd	r25, Z+1	; 0x01
    50be:	40 50       	subi	r20, 0x00	; 0
    50c0:	5c 4f       	sbci	r21, 0xFC	; 252
    50c2:	9a 01       	movw	r18, r20
    50c4:	28 1b       	sub	r18, r24
    50c6:	39 0b       	sbc	r19, r25
    50c8:	c9 01       	movw	r24, r18
		uart_enqueue(&udata, '`'); //xxx - echo to data port
		uart_enqueue(&udata, toSend); //xxx - echo to data port
		port->DATA = toSend;
	}
	uart_txbuffer_disable(port); //implemented this way to prevent periodic stalls that happen when uart_txbuffer isn't disabled quickly enough
	if ((uart_count(port)>0) && (lcd_flow_control == LCD_READY)){ //...something is waiting to go out
    50ca:	00 97       	sbiw	r24, 0x00	; 0
    50cc:	09 f4       	brne	.+2      	; 0x50d0 <uart_enqueue+0x468>
    50ce:	ef c0       	rjmp	.+478    	; 0x52ae <uart_enqueue+0x646>
    50d0:	80 91 ab 26 	lds	r24, 0x26AB
    50d4:	82 35       	cpi	r24, 0x52	; 82
    50d6:	09 f0       	breq	.+2      	; 0x50da <uart_enqueue+0x472>
    50d8:	ea c0       	rjmp	.+468    	; 0x52ae <uart_enqueue+0x646>
		uart_txbuffer_enable(port);	
    50da:	c6 01       	movw	r24, r12
    50dc:	0e 94 0f 19 	call	0x321e	; 0x321e <uart_txbuffer_enable>
    50e0:	e6 c0       	rjmp	.+460    	; 0x52ae <uart_enqueue+0x646>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    50e2:	30 eb       	ldi	r19, 0xB0	; 176
    50e4:	c3 16       	cp	r12, r19
    50e6:	3b e0       	ldi	r19, 0x0B	; 11
    50e8:	d3 06       	cpc	r13, r19
    50ea:	61 f0       	breq	.+24     	; 0x5104 <uart_enqueue+0x49c>
	if (port == &uctrl) {return 1;}
    50ec:	80 ea       	ldi	r24, 0xA0	; 160
    50ee:	c8 16       	cp	r12, r24
    50f0:	88 e0       	ldi	r24, 0x08	; 8
    50f2:	d8 06       	cpc	r13, r24
    50f4:	49 f0       	breq	.+18     	; 0x5108 <uart_enqueue+0x4a0>
	if (port == &udata) {return 2;}
    50f6:	e0 eb       	ldi	r30, 0xB0	; 176
    50f8:	ce 16       	cp	r12, r30
    50fa:	e8 e0       	ldi	r30, 0x08	; 8
    50fc:	de 06       	cpc	r13, r30
    50fe:	31 f4       	brne	.+12     	; 0x510c <uart_enqueue+0x4a4>
    5100:	22 e0       	ldi	r18, 0x02	; 2
    5102:	05 c0       	rjmp	.+10     	; 0x510e <uart_enqueue+0x4a6>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    5104:	20 e0       	ldi	r18, 0x00	; 0
    5106:	03 c0       	rjmp	.+6      	; 0x510e <uart_enqueue+0x4a6>
	if (port == &uctrl) {return 1;}
    5108:	21 e0       	ldi	r18, 0x01	; 1
    510a:	01 c0       	rjmp	.+2      	; 0x510e <uart_enqueue+0x4a6>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    510c:	20 e0       	ldi	r18, 0x00	; 0
}

inline uint8_t uart_dequeue(USART_t* port){
	uint8_t idx = port_map(port);
	uint16_t oldtail;
	oldtail = uart_tail[idx];
    510e:	30 e0       	ldi	r19, 0x00	; 0
    5110:	c9 01       	movw	r24, r18
    5112:	88 0f       	add	r24, r24
    5114:	99 1f       	adc	r25, r25
    5116:	fb 01       	movw	r30, r22
    5118:	e8 0f       	add	r30, r24
    511a:	f9 1f       	adc	r31, r25
    511c:	40 81       	ld	r20, Z
    511e:	51 81       	ldd	r21, Z+1	; 0x01
	uart_tail[idx]++;
    5120:	80 81       	ld	r24, Z
    5122:	91 81       	ldd	r25, Z+1	; 0x01
    5124:	01 96       	adiw	r24, 0x01	; 1
    5126:	80 83       	st	Z, r24
    5128:	91 83       	std	Z+1, r25	; 0x01
	if (uart_tail[idx] >= MAX_BUFFER_LEN){
    512a:	80 81       	ld	r24, Z
    512c:	91 81       	ldd	r25, Z+1	; 0x01
    512e:	f4 e0       	ldi	r31, 0x04	; 4
    5130:	80 30       	cpi	r24, 0x00	; 0
    5132:	9f 07       	cpc	r25, r31
    5134:	40 f0       	brcs	.+16     	; 0x5146 <uart_enqueue+0x4de>
		uart_tail[idx] = 0;
    5136:	c9 01       	movw	r24, r18
    5138:	88 0f       	add	r24, r24
    513a:	99 1f       	adc	r25, r25
    513c:	86 0f       	add	r24, r22
    513e:	97 1f       	adc	r25, r23
    5140:	fc 01       	movw	r30, r24
    5142:	10 82       	st	Z, r1
    5144:	11 82       	std	Z+1, r1	; 0x01
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    5146:	c9 01       	movw	r24, r18
    5148:	98 2f       	mov	r25, r24
    514a:	88 27       	eor	r24, r24
    514c:	99 0f       	add	r25, r25
    514e:	99 0f       	add	r25, r25
    5150:	84 0f       	add	r24, r20
    5152:	95 1f       	adc	r25, r21
    5154:	fe 01       	movw	r30, r28
    5156:	e8 0f       	add	r30, r24
    5158:	f9 1f       	adc	r31, r25
    515a:	80 81       	ld	r24, Z
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
    515c:	f6 01       	movw	r30, r12
    515e:	80 83       	st	Z, r24
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    5160:	81 81       	ldd	r24, Z+1	; 0x01
    5162:	85 fd       	sbrc	r24, 5
    5164:	07 c0       	rjmp	.+14     	; 0x5174 <uart_enqueue+0x50c>
    5166:	53 c0       	rjmp	.+166    	; 0x520e <uart_enqueue+0x5a6>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    5168:	a3 ec       	ldi	r26, 0xC3	; 195
    516a:	b2 e3       	ldi	r27, 0x32	; 50
    516c:	6f ec       	ldi	r22, 0xCF	; 207
    516e:	7e e3       	ldi	r23, 0x3E	; 62
		uart_tail[idx] = 0;
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    5170:	c9 ec       	ldi	r28, 0xC9	; 201
    5172:	d2 e3       	ldi	r29, 0x32	; 50
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    5174:	f0 eb       	ldi	r31, 0xB0	; 176
    5176:	cf 16       	cp	r12, r31
    5178:	fb e0       	ldi	r31, 0x0B	; 11
    517a:	df 06       	cpc	r13, r31
    517c:	61 f0       	breq	.+24     	; 0x5196 <uart_enqueue+0x52e>
	if (port == &uctrl) {return 1;}
    517e:	20 ea       	ldi	r18, 0xA0	; 160
    5180:	c2 16       	cp	r12, r18
    5182:	28 e0       	ldi	r18, 0x08	; 8
    5184:	d2 06       	cpc	r13, r18
    5186:	49 f0       	breq	.+18     	; 0x519a <uart_enqueue+0x532>
	if (port == &udata) {return 2;}
    5188:	30 eb       	ldi	r19, 0xB0	; 176
    518a:	c3 16       	cp	r12, r19
    518c:	38 e0       	ldi	r19, 0x08	; 8
    518e:	d3 06       	cpc	r13, r19
    5190:	31 f4       	brne	.+12     	; 0x519e <uart_enqueue+0x536>
    5192:	22 e0       	ldi	r18, 0x02	; 2
    5194:	05 c0       	rjmp	.+10     	; 0x51a0 <uart_enqueue+0x538>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    5196:	20 e0       	ldi	r18, 0x00	; 0
    5198:	03 c0       	rjmp	.+6      	; 0x51a0 <uart_enqueue+0x538>
	if (port == &uctrl) {return 1;}
    519a:	21 e0       	ldi	r18, 0x01	; 1
    519c:	01 c0       	rjmp	.+2      	; 0x51a0 <uart_enqueue+0x538>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    519e:	20 e0       	ldi	r18, 0x00	; 0
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    51a0:	30 e0       	ldi	r19, 0x00	; 0
    51a2:	c9 01       	movw	r24, r18
    51a4:	88 0f       	add	r24, r24
    51a6:	99 1f       	adc	r25, r25
    51a8:	fd 01       	movw	r30, r26
    51aa:	e8 0f       	add	r30, r24
    51ac:	f9 1f       	adc	r31, r25
    51ae:	40 81       	ld	r20, Z
    51b0:	51 81       	ldd	r21, Z+1	; 0x01
    51b2:	fb 01       	movw	r30, r22
    51b4:	e8 0f       	add	r30, r24
    51b6:	f9 1f       	adc	r31, r25
    51b8:	80 81       	ld	r24, Z
    51ba:	91 81       	ldd	r25, Z+1	; 0x01
    51bc:	48 17       	cp	r20, r24
    51be:	59 07       	cpc	r21, r25
    51c0:	88 f0       	brcs	.+34     	; 0x51e4 <uart_enqueue+0x57c>
		return (uart_head[idx] - uart_tail[idx]);
    51c2:	22 0f       	add	r18, r18
    51c4:	33 1f       	adc	r19, r19
    51c6:	fd 01       	movw	r30, r26
    51c8:	e2 0f       	add	r30, r18
    51ca:	f3 1f       	adc	r31, r19
    51cc:	40 81       	ld	r20, Z
    51ce:	51 81       	ldd	r21, Z+1	; 0x01
    51d0:	fb 01       	movw	r30, r22
    51d2:	e2 0f       	add	r30, r18
    51d4:	f3 1f       	adc	r31, r19
    51d6:	80 81       	ld	r24, Z
    51d8:	91 81       	ldd	r25, Z+1	; 0x01
    51da:	fa 01       	movw	r30, r20
    51dc:	e8 1b       	sub	r30, r24
    51de:	f9 0b       	sbc	r31, r25
    51e0:	cf 01       	movw	r24, r30
    51e2:	12 c0       	rjmp	.+36     	; 0x5208 <uart_enqueue+0x5a0>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    51e4:	c9 01       	movw	r24, r18
    51e6:	88 0f       	add	r24, r24
    51e8:	99 1f       	adc	r25, r25
    51ea:	fd 01       	movw	r30, r26
    51ec:	e8 0f       	add	r30, r24
    51ee:	f9 1f       	adc	r31, r25
    51f0:	40 81       	ld	r20, Z
    51f2:	51 81       	ldd	r21, Z+1	; 0x01
    51f4:	fb 01       	movw	r30, r22
    51f6:	e8 0f       	add	r30, r24
    51f8:	f9 1f       	adc	r31, r25
    51fa:	20 81       	ld	r18, Z
    51fc:	31 81       	ldd	r19, Z+1	; 0x01
    51fe:	ca 01       	movw	r24, r20
    5200:	80 50       	subi	r24, 0x00	; 0
    5202:	9c 4f       	sbci	r25, 0xFC	; 252
    5204:	82 1b       	sub	r24, r18
    5206:	93 0b       	sbc	r25, r19
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    5208:	00 97       	sbiw	r24, 0x00	; 0
    520a:	09 f0       	breq	.+2      	; 0x520e <uart_enqueue+0x5a6>
    520c:	6a cf       	rjmp	.-300    	; 0x50e2 <uart_enqueue+0x47a>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    520e:	f0 eb       	ldi	r31, 0xB0	; 176
    5210:	cf 16       	cp	r12, r31
    5212:	fb e0       	ldi	r31, 0x0B	; 11
    5214:	df 06       	cpc	r13, r31
    5216:	61 f0       	breq	.+24     	; 0x5230 <uart_enqueue+0x5c8>
	if (port == &uctrl) {return 1;}
    5218:	20 ea       	ldi	r18, 0xA0	; 160
    521a:	c2 16       	cp	r12, r18
    521c:	28 e0       	ldi	r18, 0x08	; 8
    521e:	d2 06       	cpc	r13, r18
    5220:	49 f0       	breq	.+18     	; 0x5234 <uart_enqueue+0x5cc>
	if (port == &udata) {return 2;}
    5222:	30 eb       	ldi	r19, 0xB0	; 176
    5224:	c3 16       	cp	r12, r19
    5226:	38 e0       	ldi	r19, 0x08	; 8
    5228:	d3 06       	cpc	r13, r19
    522a:	31 f4       	brne	.+12     	; 0x5238 <uart_enqueue+0x5d0>
    522c:	22 e0       	ldi	r18, 0x02	; 2
    522e:	05 c0       	rjmp	.+10     	; 0x523a <uart_enqueue+0x5d2>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    5230:	20 e0       	ldi	r18, 0x00	; 0
    5232:	03 c0       	rjmp	.+6      	; 0x523a <uart_enqueue+0x5d2>
	if (port == &uctrl) {return 1;}
    5234:	21 e0       	ldi	r18, 0x01	; 1
    5236:	01 c0       	rjmp	.+2      	; 0x523a <uart_enqueue+0x5d2>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    5238:	20 e0       	ldi	r18, 0x00	; 0
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    523a:	30 e0       	ldi	r19, 0x00	; 0
    523c:	c9 01       	movw	r24, r18
    523e:	88 0f       	add	r24, r24
    5240:	99 1f       	adc	r25, r25
    5242:	fc 01       	movw	r30, r24
    5244:	ed 53       	subi	r30, 0x3D	; 61
    5246:	fd 4c       	sbci	r31, 0xCD	; 205
    5248:	40 81       	ld	r20, Z
    524a:	51 81       	ldd	r21, Z+1	; 0x01
    524c:	81 53       	subi	r24, 0x31	; 49
    524e:	91 4c       	sbci	r25, 0xC1	; 193
    5250:	fc 01       	movw	r30, r24
    5252:	80 81       	ld	r24, Z
    5254:	91 81       	ldd	r25, Z+1	; 0x01
    5256:	48 17       	cp	r20, r24
    5258:	59 07       	cpc	r21, r25
    525a:	78 f0       	brcs	.+30     	; 0x527a <uart_enqueue+0x612>
		return (uart_head[idx] - uart_tail[idx]);
    525c:	22 0f       	add	r18, r18
    525e:	33 1f       	adc	r19, r19
    5260:	f9 01       	movw	r30, r18
    5262:	ed 53       	subi	r30, 0x3D	; 61
    5264:	fd 4c       	sbci	r31, 0xCD	; 205
    5266:	40 81       	ld	r20, Z
    5268:	51 81       	ldd	r21, Z+1	; 0x01
    526a:	21 53       	subi	r18, 0x31	; 49
    526c:	31 4c       	sbci	r19, 0xC1	; 193
    526e:	f9 01       	movw	r30, r18
    5270:	80 81       	ld	r24, Z
    5272:	91 81       	ldd	r25, Z+1	; 0x01
    5274:	48 1b       	sub	r20, r24
    5276:	59 0b       	sbc	r21, r25
    5278:	10 c0       	rjmp	.+32     	; 0x529a <uart_enqueue+0x632>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    527a:	22 0f       	add	r18, r18
    527c:	33 1f       	adc	r19, r19
    527e:	f9 01       	movw	r30, r18
    5280:	ed 53       	subi	r30, 0x3D	; 61
    5282:	fd 4c       	sbci	r31, 0xCD	; 205
    5284:	40 81       	ld	r20, Z
    5286:	51 81       	ldd	r21, Z+1	; 0x01
    5288:	21 53       	subi	r18, 0x31	; 49
    528a:	31 4c       	sbci	r19, 0xC1	; 193
    528c:	f9 01       	movw	r30, r18
    528e:	80 81       	ld	r24, Z
    5290:	91 81       	ldd	r25, Z+1	; 0x01
    5292:	40 50       	subi	r20, 0x00	; 0
    5294:	5c 4f       	sbci	r21, 0xFC	; 252
    5296:	48 1b       	sub	r20, r24
    5298:	59 0b       	sbc	r21, r25
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
	}
	//disable the tx outgoing hardware buffer ready interrupt if we have nothing more to put in it.
	if(uart_count(port)>0) uart_txbuffer_enable(port);
    529a:	41 15       	cp	r20, r1
    529c:	51 05       	cpc	r21, r1
    529e:	21 f0       	breq	.+8      	; 0x52a8 <uart_enqueue+0x640>
    52a0:	c6 01       	movw	r24, r12
    52a2:	0e 94 0f 19 	call	0x321e	; 0x321e <uart_txbuffer_enable>
    52a6:	03 c0       	rjmp	.+6      	; 0x52ae <uart_enqueue+0x646>
	else uart_txbuffer_disable(port);
    52a8:	c6 01       	movw	r24, r12
    52aa:	0e 94 14 19 	call	0x3228	; 0x3228 <uart_txbuffer_disable>
	}
	if (idx == 0){uart_transmit_lcd(port);} //start the transmission process.
	else {uart_transmit(port);} //start the transmission process.}	
	
#endif
}
    52ae:	df 91       	pop	r29
    52b0:	cf 91       	pop	r28
    52b2:	1f 91       	pop	r17
    52b4:	0f 91       	pop	r16
    52b6:	ff 90       	pop	r15
    52b8:	ef 90       	pop	r14
    52ba:	df 90       	pop	r13
    52bc:	cf 90       	pop	r12
    52be:	bf 90       	pop	r11
    52c0:	af 90       	pop	r10
    52c2:	9f 90       	pop	r9
    52c4:	8f 90       	pop	r8
    52c6:	7f 90       	pop	r7
    52c8:	6f 90       	pop	r6
    52ca:	5f 90       	pop	r5
    52cc:	4f 90       	pop	r4
    52ce:	3f 90       	pop	r3
    52d0:	08 95       	ret

000052d2 <uart_dequeue>:
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    52d2:	2b e0       	ldi	r18, 0x0B	; 11
    52d4:	80 3b       	cpi	r24, 0xB0	; 176
    52d6:	92 07       	cpc	r25, r18
    52d8:	51 f0       	breq	.+20     	; 0x52ee <uart_dequeue+0x1c>
	if (port == &uctrl) {return 1;}
    52da:	68 e0       	ldi	r22, 0x08	; 8
    52dc:	80 3a       	cpi	r24, 0xA0	; 160
    52de:	96 07       	cpc	r25, r22
    52e0:	41 f0       	breq	.+16     	; 0x52f2 <uart_dequeue+0x20>
	if (port == &udata) {return 2;}
    52e2:	28 e0       	ldi	r18, 0x08	; 8
    52e4:	80 3b       	cpi	r24, 0xB0	; 176
    52e6:	92 07       	cpc	r25, r18
    52e8:	31 f4       	brne	.+12     	; 0x52f6 <uart_dequeue+0x24>
    52ea:	22 e0       	ldi	r18, 0x02	; 2
    52ec:	05 c0       	rjmp	.+10     	; 0x52f8 <uart_dequeue+0x26>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    52ee:	20 e0       	ldi	r18, 0x00	; 0
    52f0:	03 c0       	rjmp	.+6      	; 0x52f8 <uart_dequeue+0x26>
	if (port == &uctrl) {return 1;}
    52f2:	21 e0       	ldi	r18, 0x01	; 1
    52f4:	01 c0       	rjmp	.+2      	; 0x52f8 <uart_dequeue+0x26>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    52f6:	20 e0       	ldi	r18, 0x00	; 0
}

inline uint8_t uart_dequeue(USART_t* port){
	uint8_t idx = port_map(port);
	uint16_t oldtail;
	oldtail = uart_tail[idx];
    52f8:	30 e0       	ldi	r19, 0x00	; 0
    52fa:	f9 01       	movw	r30, r18
    52fc:	ee 0f       	add	r30, r30
    52fe:	ff 1f       	adc	r31, r31
    5300:	e1 53       	subi	r30, 0x31	; 49
    5302:	f1 4c       	sbci	r31, 0xC1	; 193
    5304:	40 81       	ld	r20, Z
    5306:	51 81       	ldd	r21, Z+1	; 0x01
	uart_tail[idx]++;
    5308:	80 81       	ld	r24, Z
    530a:	91 81       	ldd	r25, Z+1	; 0x01
    530c:	01 96       	adiw	r24, 0x01	; 1
    530e:	80 83       	st	Z, r24
    5310:	91 83       	std	Z+1, r25	; 0x01
	if (uart_tail[idx] >= MAX_BUFFER_LEN){
    5312:	80 81       	ld	r24, Z
    5314:	91 81       	ldd	r25, Z+1	; 0x01
    5316:	64 e0       	ldi	r22, 0x04	; 4
    5318:	80 30       	cpi	r24, 0x00	; 0
    531a:	96 07       	cpc	r25, r22
    531c:	38 f0       	brcs	.+14     	; 0x532c <uart_dequeue+0x5a>
		uart_tail[idx] = 0;
    531e:	f9 01       	movw	r30, r18
    5320:	ee 0f       	add	r30, r30
    5322:	ff 1f       	adc	r31, r31
    5324:	e1 53       	subi	r30, 0x31	; 49
    5326:	f1 4c       	sbci	r31, 0xC1	; 193
    5328:	10 82       	st	Z, r1
    532a:	11 82       	std	Z+1, r1	; 0x01
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    532c:	f9 01       	movw	r30, r18
    532e:	fe 2f       	mov	r31, r30
    5330:	ee 27       	eor	r30, r30
    5332:	ff 0f       	add	r31, r31
    5334:	ff 0f       	add	r31, r31
    5336:	4e 0f       	add	r20, r30
    5338:	5f 1f       	adc	r21, r31
    533a:	fa 01       	movw	r30, r20
    533c:	e7 53       	subi	r30, 0x37	; 55
    533e:	fd 4c       	sbci	r31, 0xCD	; 205
    5340:	80 81       	ld	r24, Z
}
    5342:	08 95       	ret

00005344 <init_uart_ibuffer>:
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    5344:	2b e0       	ldi	r18, 0x0B	; 11
    5346:	80 3b       	cpi	r24, 0xB0	; 176
    5348:	92 07       	cpc	r25, r18
    534a:	51 f0       	breq	.+20     	; 0x5360 <init_uart_ibuffer+0x1c>
	if (port == &uctrl) {return 1;}
    534c:	e8 e0       	ldi	r30, 0x08	; 8
    534e:	80 3a       	cpi	r24, 0xA0	; 160
    5350:	9e 07       	cpc	r25, r30
    5352:	41 f0       	breq	.+16     	; 0x5364 <init_uart_ibuffer+0x20>
	if (port == &udata) {return 2;}
    5354:	f8 e0       	ldi	r31, 0x08	; 8
    5356:	80 3b       	cpi	r24, 0xB0	; 176
    5358:	9f 07       	cpc	r25, r31
    535a:	31 f4       	brne	.+12     	; 0x5368 <init_uart_ibuffer+0x24>
    535c:	82 e0       	ldi	r24, 0x02	; 2
    535e:	05 c0       	rjmp	.+10     	; 0x536a <init_uart_ibuffer+0x26>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    5360:	80 e0       	ldi	r24, 0x00	; 0
    5362:	03 c0       	rjmp	.+6      	; 0x536a <init_uart_ibuffer+0x26>
	if (port == &uctrl) {return 1;}
    5364:	81 e0       	ldi	r24, 0x01	; 1
    5366:	01 c0       	rjmp	.+2      	; 0x536a <init_uart_ibuffer+0x26>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    5368:	80 e0       	ldi	r24, 0x00	; 0
	No protection is provided for buffer overflow! Be careful! */
//***************************************************

void init_uart_ibuffer(USART_t* port){
	uint8_t idx = port_map(port);
	uart_ihead[idx] = 0;
    536a:	90 e0       	ldi	r25, 0x00	; 0
    536c:	88 0f       	add	r24, r24
    536e:	99 1f       	adc	r25, r25
    5370:	fc 01       	movw	r30, r24
    5372:	e7 53       	subi	r30, 0x37	; 55
    5374:	f1 4c       	sbci	r31, 0xC1	; 193
    5376:	10 82       	st	Z, r1
    5378:	11 82       	std	Z+1, r1	; 0x01
	uart_itail[idx] = 0;
    537a:	83 54       	subi	r24, 0x43	; 67
    537c:	99 4d       	sbci	r25, 0xD9	; 217
    537e:	fc 01       	movw	r30, r24
    5380:	10 82       	st	Z, r1
    5382:	11 82       	std	Z+1, r1	; 0x01
}
    5384:	08 95       	ret

00005386 <init_uart_buffer>:
//** [PORT AGNOSTIC CODE]
//************************************************************************
//************************************************************************

//MAKE SURE TO INIT UART FIRST
void init_uart_buffer(USART_t* port){
    5386:	cf 93       	push	r28
    5388:	df 93       	push	r29
    538a:	ec 01       	movw	r28, r24
	//Setup data buffers
		init_uart_obuffer(port);
    538c:	0e 94 46 22 	call	0x448c	; 0x448c <init_uart_obuffer>
		init_uart_ibuffer(port);
    5390:	ce 01       	movw	r24, r28
    5392:	0e 94 a2 29 	call	0x5344	; 0x5344 <init_uart_ibuffer>
	//Enable Receive and Transmit interrupts
		uart_rxbuffer_enable(port);
    5396:	ce 01       	movw	r24, r28
    5398:	0e 94 05 19 	call	0x320a	; 0x320a <uart_rxbuffer_enable>
		uart_txbuffer_enable(port);
    539c:	ce 01       	movw	r24, r28
    539e:	0e 94 0f 19 	call	0x321e	; 0x321e <uart_txbuffer_enable>
}
    53a2:	df 91       	pop	r29
    53a4:	cf 91       	pop	r28
    53a6:	08 95       	ret

000053a8 <init_uart_buffers>:
ISR(USARTF1_DRE_vect) {uart_transmit_lcd(&ulcd);}//TX Interrupt
ISR(USARTF1_RXC_vect) {uart_receive_lcd(&ulcd);} //RX Interrupt
	
//MAKE SURE TO INIT UART FIRST
void init_uart_buffers(){
	init_uart_buffer(&uctrl);
    53a8:	80 ea       	ldi	r24, 0xA0	; 160
    53aa:	98 e0       	ldi	r25, 0x08	; 8
    53ac:	0e 94 c3 29 	call	0x5386	; 0x5386 <init_uart_buffer>
	init_uart_buffer(&udata);
    53b0:	80 eb       	ldi	r24, 0xB0	; 176
    53b2:	98 e0       	ldi	r25, 0x08	; 8
    53b4:	0e 94 c3 29 	call	0x5386	; 0x5386 <init_uart_buffer>
	init_uart_buffer(&ulcd);
    53b8:	80 eb       	ldi	r24, 0xB0	; 176
    53ba:	9b e0       	ldi	r25, 0x0B	; 11
    53bc:	0e 94 c3 29 	call	0x5386	; 0x5386 <init_uart_buffer>
}	
    53c0:	08 95       	ret

000053c2 <uart_icount>:
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    53c2:	2b e0       	ldi	r18, 0x0B	; 11
    53c4:	80 3b       	cpi	r24, 0xB0	; 176
    53c6:	92 07       	cpc	r25, r18
    53c8:	51 f0       	breq	.+20     	; 0x53de <uart_icount+0x1c>
	if (port == &uctrl) {return 1;}
    53ca:	e8 e0       	ldi	r30, 0x08	; 8
    53cc:	80 3a       	cpi	r24, 0xA0	; 160
    53ce:	9e 07       	cpc	r25, r30
    53d0:	41 f0       	breq	.+16     	; 0x53e2 <uart_icount+0x20>
	if (port == &udata) {return 2;}
    53d2:	f8 e0       	ldi	r31, 0x08	; 8
    53d4:	80 3b       	cpi	r24, 0xB0	; 176
    53d6:	9f 07       	cpc	r25, r31
    53d8:	31 f4       	brne	.+12     	; 0x53e6 <uart_icount+0x24>
    53da:	82 e0       	ldi	r24, 0x02	; 2
    53dc:	05 c0       	rjmp	.+10     	; 0x53e8 <uart_icount+0x26>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    53de:	80 e0       	ldi	r24, 0x00	; 0
    53e0:	03 c0       	rjmp	.+6      	; 0x53e8 <uart_icount+0x26>
	if (port == &uctrl) {return 1;}
    53e2:	81 e0       	ldi	r24, 0x01	; 1
    53e4:	01 c0       	rjmp	.+2      	; 0x53e8 <uart_icount+0x26>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    53e6:	80 e0       	ldi	r24, 0x00	; 0
	uart_itail[idx] = 0;
}

inline uint16_t uart_icount(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_ihead[idx] >= uart_itail[idx]){	
    53e8:	90 e0       	ldi	r25, 0x00	; 0
    53ea:	9c 01       	movw	r18, r24
    53ec:	22 0f       	add	r18, r18
    53ee:	33 1f       	adc	r19, r19
    53f0:	f9 01       	movw	r30, r18
    53f2:	e7 53       	subi	r30, 0x37	; 55
    53f4:	f1 4c       	sbci	r31, 0xC1	; 193
    53f6:	40 81       	ld	r20, Z
    53f8:	51 81       	ldd	r21, Z+1	; 0x01
    53fa:	23 54       	subi	r18, 0x43	; 67
    53fc:	39 4d       	sbci	r19, 0xD9	; 217
    53fe:	f9 01       	movw	r30, r18
    5400:	20 81       	ld	r18, Z
    5402:	31 81       	ldd	r19, Z+1	; 0x01
    5404:	42 17       	cp	r20, r18
    5406:	53 07       	cpc	r21, r19
    5408:	80 f0       	brcs	.+32     	; 0x542a <uart_icount+0x68>
		return (uart_ihead[idx] - uart_itail[idx]);
    540a:	9c 01       	movw	r18, r24
    540c:	22 0f       	add	r18, r18
    540e:	33 1f       	adc	r19, r19
    5410:	f9 01       	movw	r30, r18
    5412:	e7 53       	subi	r30, 0x37	; 55
    5414:	f1 4c       	sbci	r31, 0xC1	; 193
    5416:	80 81       	ld	r24, Z
    5418:	91 81       	ldd	r25, Z+1	; 0x01
    541a:	23 54       	subi	r18, 0x43	; 67
    541c:	39 4d       	sbci	r19, 0xD9	; 217
    541e:	f9 01       	movw	r30, r18
    5420:	20 81       	ld	r18, Z
    5422:	31 81       	ldd	r19, Z+1	; 0x01
    5424:	82 1b       	sub	r24, r18
    5426:	93 0b       	sbc	r25, r19
    5428:	08 95       	ret
	}
	else {
		return ((MAX_IBUFFER_LEN-uart_itail[idx])+uart_ihead[idx]);
    542a:	9c 01       	movw	r18, r24
    542c:	22 0f       	add	r18, r18
    542e:	33 1f       	adc	r19, r19
    5430:	f9 01       	movw	r30, r18
    5432:	e7 53       	subi	r30, 0x37	; 55
    5434:	f1 4c       	sbci	r31, 0xC1	; 193
    5436:	40 81       	ld	r20, Z
    5438:	51 81       	ldd	r21, Z+1	; 0x01
    543a:	23 54       	subi	r18, 0x43	; 67
    543c:	39 4d       	sbci	r19, 0xD9	; 217
    543e:	f9 01       	movw	r30, r18
    5440:	20 81       	ld	r18, Z
    5442:	31 81       	ldd	r19, Z+1	; 0x01
    5444:	ca 01       	movw	r24, r20
    5446:	80 50       	subi	r24, 0x00	; 0
    5448:	9c 4f       	sbci	r25, 0xFC	; 252
    544a:	82 1b       	sub	r24, r18
    544c:	93 0b       	sbc	r25, r19
	}
}
    544e:	08 95       	ret

00005450 <uart_ienqueue>:
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    5450:	2b e0       	ldi	r18, 0x0B	; 11
    5452:	80 3b       	cpi	r24, 0xB0	; 176
    5454:	92 07       	cpc	r25, r18
    5456:	51 f0       	breq	.+20     	; 0x546c <uart_ienqueue+0x1c>
	if (port == &uctrl) {return 1;}
    5458:	28 e0       	ldi	r18, 0x08	; 8
    545a:	80 3a       	cpi	r24, 0xA0	; 160
    545c:	92 07       	cpc	r25, r18
    545e:	41 f0       	breq	.+16     	; 0x5470 <uart_ienqueue+0x20>
	if (port == &udata) {return 2;}
    5460:	28 e0       	ldi	r18, 0x08	; 8
    5462:	80 3b       	cpi	r24, 0xB0	; 176
    5464:	92 07       	cpc	r25, r18
    5466:	31 f4       	brne	.+12     	; 0x5474 <uart_ienqueue+0x24>
    5468:	42 e0       	ldi	r20, 0x02	; 2
    546a:	05 c0       	rjmp	.+10     	; 0x5476 <uart_ienqueue+0x26>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    546c:	40 e0       	ldi	r20, 0x00	; 0
    546e:	03 c0       	rjmp	.+6      	; 0x5476 <uart_ienqueue+0x26>
	if (port == &uctrl) {return 1;}
    5470:	41 e0       	ldi	r20, 0x01	; 1
    5472:	01 c0       	rjmp	.+2      	; 0x5476 <uart_ienqueue+0x26>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    5474:	40 e0       	ldi	r20, 0x00	; 0
	}
}

inline void uart_ienqueue(USART_t* port, uint8_t datain){
	uint8_t idx = port_map(port);
	uart_ibuffer[idx][uart_ihead[idx]] = datain;
    5476:	50 e0       	ldi	r21, 0x00	; 0
    5478:	fa 01       	movw	r30, r20
    547a:	ee 0f       	add	r30, r30
    547c:	ff 1f       	adc	r31, r31
    547e:	e7 53       	subi	r30, 0x37	; 55
    5480:	f1 4c       	sbci	r31, 0xC1	; 193
    5482:	80 81       	ld	r24, Z
    5484:	91 81       	ldd	r25, Z+1	; 0x01
    5486:	9a 01       	movw	r18, r20
    5488:	32 2f       	mov	r19, r18
    548a:	22 27       	eor	r18, r18
    548c:	33 0f       	add	r19, r19
    548e:	33 0f       	add	r19, r19
    5490:	82 0f       	add	r24, r18
    5492:	93 1f       	adc	r25, r19
    5494:	dc 01       	movw	r26, r24
    5496:	ad 53       	subi	r26, 0x3D	; 61
    5498:	b9 4d       	sbci	r27, 0xD9	; 217
    549a:	6c 93       	st	X, r22
	uart_ihead[idx]++;
    549c:	80 81       	ld	r24, Z
    549e:	91 81       	ldd	r25, Z+1	; 0x01
    54a0:	01 96       	adiw	r24, 0x01	; 1
    54a2:	80 83       	st	Z, r24
    54a4:	91 83       	std	Z+1, r25	; 0x01
	if (uart_ihead[idx] >= MAX_IBUFFER_LEN){
    54a6:	80 81       	ld	r24, Z
    54a8:	91 81       	ldd	r25, Z+1	; 0x01
    54aa:	24 e0       	ldi	r18, 0x04	; 4
    54ac:	80 30       	cpi	r24, 0x00	; 0
    54ae:	92 07       	cpc	r25, r18
    54b0:	38 f0       	brcs	.+14     	; 0x54c0 <uart_ienqueue+0x70>
		uart_ihead[idx] = 0;
    54b2:	fa 01       	movw	r30, r20
    54b4:	ee 0f       	add	r30, r30
    54b6:	ff 1f       	adc	r31, r31
    54b8:	e7 53       	subi	r30, 0x37	; 55
    54ba:	f1 4c       	sbci	r31, 0xC1	; 193
    54bc:	10 82       	st	Z, r1
    54be:	11 82       	std	Z+1, r1	; 0x01
    54c0:	08 95       	ret

000054c2 <uart_idequeue>:
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    54c2:	2b e0       	ldi	r18, 0x0B	; 11
    54c4:	80 3b       	cpi	r24, 0xB0	; 176
    54c6:	92 07       	cpc	r25, r18
    54c8:	51 f0       	breq	.+20     	; 0x54de <uart_idequeue+0x1c>
	if (port == &uctrl) {return 1;}
    54ca:	68 e0       	ldi	r22, 0x08	; 8
    54cc:	80 3a       	cpi	r24, 0xA0	; 160
    54ce:	96 07       	cpc	r25, r22
    54d0:	41 f0       	breq	.+16     	; 0x54e2 <uart_idequeue+0x20>
	if (port == &udata) {return 2;}
    54d2:	28 e0       	ldi	r18, 0x08	; 8
    54d4:	80 3b       	cpi	r24, 0xB0	; 176
    54d6:	92 07       	cpc	r25, r18
    54d8:	31 f4       	brne	.+12     	; 0x54e6 <uart_idequeue+0x24>
    54da:	22 e0       	ldi	r18, 0x02	; 2
    54dc:	05 c0       	rjmp	.+10     	; 0x54e8 <uart_idequeue+0x26>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    54de:	20 e0       	ldi	r18, 0x00	; 0
    54e0:	03 c0       	rjmp	.+6      	; 0x54e8 <uart_idequeue+0x26>
	if (port == &uctrl) {return 1;}
    54e2:	21 e0       	ldi	r18, 0x01	; 1
    54e4:	01 c0       	rjmp	.+2      	; 0x54e8 <uart_idequeue+0x26>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    54e6:	20 e0       	ldi	r18, 0x00	; 0

//internal implementation of peek and dequeue
inline uint8_t _uart_idequeue(USART_t* port, uint8_t peek){
	uint8_t idx = port_map(port);
	uint16_t oldtail;
	oldtail = uart_itail[idx];
    54e8:	30 e0       	ldi	r19, 0x00	; 0
    54ea:	f9 01       	movw	r30, r18
    54ec:	ee 0f       	add	r30, r30
    54ee:	ff 1f       	adc	r31, r31
    54f0:	e3 54       	subi	r30, 0x43	; 67
    54f2:	f9 4d       	sbci	r31, 0xD9	; 217
    54f4:	40 81       	ld	r20, Z
    54f6:	51 81       	ldd	r21, Z+1	; 0x01
	uart_itail[idx]++;
    54f8:	80 81       	ld	r24, Z
    54fa:	91 81       	ldd	r25, Z+1	; 0x01
    54fc:	01 96       	adiw	r24, 0x01	; 1
    54fe:	80 83       	st	Z, r24
    5500:	91 83       	std	Z+1, r25	; 0x01
	if (uart_itail[idx] >= MAX_IBUFFER_LEN){
    5502:	80 81       	ld	r24, Z
    5504:	91 81       	ldd	r25, Z+1	; 0x01
    5506:	64 e0       	ldi	r22, 0x04	; 4
    5508:	80 30       	cpi	r24, 0x00	; 0
    550a:	96 07       	cpc	r25, r22
    550c:	38 f0       	brcs	.+14     	; 0x551c <uart_idequeue+0x5a>
		uart_itail[idx] = 0;
    550e:	f9 01       	movw	r30, r18
    5510:	ee 0f       	add	r30, r30
    5512:	ff 1f       	adc	r31, r31
    5514:	e3 54       	subi	r30, 0x43	; 67
    5516:	f9 4d       	sbci	r31, 0xD9	; 217
    5518:	10 82       	st	Z, r1
    551a:	11 82       	std	Z+1, r1	; 0x01
	}
	if (peek){uart_itail[idx] = oldtail;}
	return uart_ibuffer[idx][oldtail];
    551c:	f9 01       	movw	r30, r18
    551e:	fe 2f       	mov	r31, r30
    5520:	ee 27       	eor	r30, r30
    5522:	ff 0f       	add	r31, r31
    5524:	ff 0f       	add	r31, r31
    5526:	4e 0f       	add	r20, r30
    5528:	5f 1f       	adc	r21, r31
    552a:	fa 01       	movw	r30, r20
    552c:	ed 53       	subi	r30, 0x3D	; 61
    552e:	f9 4d       	sbci	r31, 0xD9	; 217
    5530:	80 81       	ld	r24, Z
}

inline uint8_t uart_idequeue(USART_t* port){
	return _uart_idequeue(port, false);
}
    5532:	08 95       	ret

00005534 <service_uart_buffer>:

inline void service_uart_buffer(){
    5534:	3f 92       	push	r3
    5536:	4f 92       	push	r4
    5538:	5f 92       	push	r5
    553a:	6f 92       	push	r6
    553c:	7f 92       	push	r7
    553e:	8f 92       	push	r8
    5540:	9f 92       	push	r9
    5542:	af 92       	push	r10
    5544:	bf 92       	push	r11
    5546:	cf 92       	push	r12
    5548:	df 92       	push	r13
    554a:	ef 92       	push	r14
    554c:	ff 92       	push	r15
    554e:	0f 93       	push	r16
    5550:	1f 93       	push	r17
    5552:	cf 93       	push	r28
    5554:	df 93       	push	r29
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    5556:	20 91 c3 32 	lds	r18, 0x32C3
    555a:	30 91 c4 32 	lds	r19, 0x32C4
    555e:	80 91 cf 3e 	lds	r24, 0x3ECF
    5562:	90 91 d0 3e 	lds	r25, 0x3ED0
    5566:	28 17       	cp	r18, r24
    5568:	39 07       	cpc	r19, r25
    556a:	58 f0       	brcs	.+22     	; 0x5582 <service_uart_buffer+0x4e>
		return (uart_head[idx] - uart_tail[idx]);
    556c:	80 91 c3 32 	lds	r24, 0x32C3
    5570:	90 91 c4 32 	lds	r25, 0x32C4
    5574:	20 91 cf 3e 	lds	r18, 0x3ECF
    5578:	30 91 d0 3e 	lds	r19, 0x3ED0
    557c:	82 1b       	sub	r24, r18
    557e:	93 0b       	sbc	r25, r19
    5580:	0c c0       	rjmp	.+24     	; 0x559a <service_uart_buffer+0x66>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    5582:	80 91 c3 32 	lds	r24, 0x32C3
    5586:	90 91 c4 32 	lds	r25, 0x32C4
    558a:	20 91 cf 3e 	lds	r18, 0x3ECF
    558e:	30 91 d0 3e 	lds	r19, 0x3ED0
    5592:	80 50       	subi	r24, 0x00	; 0
    5594:	9c 4f       	sbci	r25, 0xFC	; 252
    5596:	82 1b       	sub	r24, r18
    5598:	93 0b       	sbc	r25, r19
	return _uart_idequeue(port, false);
}

inline void service_uart_buffer(){
	//Resume transmission attempt if outgoing data still pending -- we do this so we can don't block the CPU for too long waiting for flow-control
	if (uart_count(&ulcd)>0){uart_transmit_lcd(&ulcd);}
    559a:	00 97       	sbiw	r24, 0x00	; 0
    559c:	09 f4       	brne	.+2      	; 0x55a0 <service_uart_buffer+0x6c>
    559e:	7e c1       	rjmp	.+764    	; 0x589c <service_uart_buffer+0x368>
}

void inline uart_transmit_lcd(USART_t* port){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0) && (lcd_flow_control == LCD_READY)){
    55a0:	e0 eb       	ldi	r30, 0xB0	; 176
    55a2:	fb e0       	ldi	r31, 0x0B	; 11
    55a4:	81 81       	ldd	r24, Z+1	; 0x01
    55a6:	85 fd       	sbrc	r24, 5
    55a8:	fb c0       	rjmp	.+502    	; 0x57a0 <service_uart_buffer+0x26c>
    55aa:	48 c1       	rjmp	.+656    	; 0x583c <service_uart_buffer+0x308>
}

inline uint8_t uart_dequeue(USART_t* port){
	uint8_t idx = port_map(port);
	uint16_t oldtail;
	oldtail = uart_tail[idx];
    55ac:	d6 01       	movw	r26, r12
    55ae:	ed 91       	ld	r30, X+
    55b0:	fc 91       	ld	r31, X
    55b2:	11 97       	sbiw	r26, 0x01	; 1
	uart_tail[idx]++;
    55b4:	8d 91       	ld	r24, X+
    55b6:	9c 91       	ld	r25, X
    55b8:	11 97       	sbiw	r26, 0x01	; 1
    55ba:	01 96       	adiw	r24, 0x01	; 1
    55bc:	8d 93       	st	X+, r24
    55be:	9c 93       	st	X, r25
    55c0:	11 97       	sbiw	r26, 0x01	; 1
	if (uart_tail[idx] >= MAX_BUFFER_LEN){
    55c2:	8d 91       	ld	r24, X+
    55c4:	9c 91       	ld	r25, X
    55c6:	11 97       	sbiw	r26, 0x01	; 1
    55c8:	b4 e0       	ldi	r27, 0x04	; 4
    55ca:	80 30       	cpi	r24, 0x00	; 0
    55cc:	9b 07       	cpc	r25, r27
    55ce:	20 f0       	brcs	.+8      	; 0x55d8 <service_uart_buffer+0xa4>
		uart_tail[idx] = 0;
    55d0:	d6 01       	movw	r26, r12
    55d2:	1d 92       	st	X+, r1
    55d4:	1c 92       	st	X, r1
    55d6:	11 97       	sbiw	r26, 0x01	; 1
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    55d8:	e4 0d       	add	r30, r4
    55da:	f5 1d       	adc	r31, r5
    55dc:	b0 80       	ld	r11, Z
void inline uart_transmit_lcd(USART_t* port){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0) && (lcd_flow_control == LCD_READY)){
		toSend = uart_dequeue(port);
		if (toSend == 0x0D) {lcd_flow_control = LCD_BUSY;}
    55de:	bd e0       	ldi	r27, 0x0D	; 13
    55e0:	bb 16       	cp	r11, r27
    55e2:	11 f4       	brne	.+4      	; 0x55e8 <service_uart_buffer+0xb4>
    55e4:	30 92 ab 26 	sts	0x26AB, r3
#ifndef UART_DEBUG
	uint8_t idx = port_map(port);
	
	//if (idx==0){uart_enqueue(&uctrl, datain);} //xxx
	
	uart_buffer[idx][uart_head[idx]] = datain;
    55e8:	f8 01       	movw	r30, r16
    55ea:	80 81       	ld	r24, Z
    55ec:	91 81       	ldd	r25, Z+1	; 0x01
    55ee:	87 53       	subi	r24, 0x37	; 55
    55f0:	95 4c       	sbci	r25, 0xC5	; 197
    55f2:	dc 01       	movw	r26, r24
    55f4:	ac 92       	st	X, r10
	uart_head[idx]++;
    55f6:	80 81       	ld	r24, Z
    55f8:	91 81       	ldd	r25, Z+1	; 0x01
    55fa:	01 96       	adiw	r24, 0x01	; 1
    55fc:	80 83       	st	Z, r24
    55fe:	91 83       	std	Z+1, r25	; 0x01
	if (uart_head[idx] >= MAX_BUFFER_LEN){
    5600:	80 81       	ld	r24, Z
    5602:	91 81       	ldd	r25, Z+1	; 0x01
    5604:	b4 e0       	ldi	r27, 0x04	; 4
    5606:	80 30       	cpi	r24, 0x00	; 0
    5608:	9b 07       	cpc	r25, r27
    560a:	10 f0       	brcs	.+4      	; 0x5610 <service_uart_buffer+0xdc>
		uart_head[idx] = 0;
    560c:	10 82       	st	Z, r1
    560e:	11 82       	std	Z+1, r1	; 0x01
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    5610:	f7 01       	movw	r30, r14
    5612:	81 81       	ldd	r24, Z+1	; 0x01
    5614:	85 fd       	sbrc	r24, 5
    5616:	1a c0       	rjmp	.+52     	; 0x564c <service_uart_buffer+0x118>
    5618:	32 c0       	rjmp	.+100    	; 0x567e <service_uart_buffer+0x14a>
}

inline uint8_t uart_dequeue(USART_t* port){
	uint8_t idx = port_map(port);
	uint16_t oldtail;
	oldtail = uart_tail[idx];
    561a:	e8 81       	ld	r30, Y
    561c:	f9 81       	ldd	r31, Y+1	; 0x01
	uart_tail[idx]++;
    561e:	88 81       	ld	r24, Y
    5620:	99 81       	ldd	r25, Y+1	; 0x01
    5622:	01 96       	adiw	r24, 0x01	; 1
    5624:	88 83       	st	Y, r24
    5626:	99 83       	std	Y+1, r25	; 0x01
	if (uart_tail[idx] >= MAX_BUFFER_LEN){
    5628:	88 81       	ld	r24, Y
    562a:	99 81       	ldd	r25, Y+1	; 0x01
    562c:	24 e0       	ldi	r18, 0x04	; 4
    562e:	80 30       	cpi	r24, 0x00	; 0
    5630:	92 07       	cpc	r25, r18
    5632:	10 f0       	brcs	.+4      	; 0x5638 <service_uart_buffer+0x104>
		uart_tail[idx] = 0;
    5634:	18 82       	st	Y, r1
    5636:	19 82       	std	Y+1, r1	; 0x01
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    5638:	e7 53       	subi	r30, 0x37	; 55
    563a:	f5 4c       	sbci	r31, 0xC5	; 197
    563c:	80 81       	ld	r24, Z
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
    563e:	d7 01       	movw	r26, r14
    5640:	8c 93       	st	X, r24
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    5642:	11 96       	adiw	r26, 0x01	; 1
    5644:	8c 91       	ld	r24, X
    5646:	11 97       	sbiw	r26, 0x01	; 1
    5648:	85 ff       	sbrs	r24, 5
    564a:	19 c0       	rjmp	.+50     	; 0x567e <service_uart_buffer+0x14a>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    564c:	f8 01       	movw	r30, r16
    564e:	80 81       	ld	r24, Z
    5650:	91 81       	ldd	r25, Z+1	; 0x01
    5652:	28 81       	ld	r18, Y
    5654:	39 81       	ldd	r19, Y+1	; 0x01
    5656:	82 17       	cp	r24, r18
    5658:	93 07       	cpc	r25, r19
    565a:	38 f0       	brcs	.+14     	; 0x566a <service_uart_buffer+0x136>
		return (uart_head[idx] - uart_tail[idx]);
    565c:	80 81       	ld	r24, Z
    565e:	91 81       	ldd	r25, Z+1	; 0x01
    5660:	28 81       	ld	r18, Y
    5662:	39 81       	ldd	r19, Y+1	; 0x01
    5664:	82 1b       	sub	r24, r18
    5666:	93 0b       	sbc	r25, r19
    5668:	08 c0       	rjmp	.+16     	; 0x567a <service_uart_buffer+0x146>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    566a:	80 81       	ld	r24, Z
    566c:	91 81       	ldd	r25, Z+1	; 0x01
    566e:	28 81       	ld	r18, Y
    5670:	39 81       	ldd	r19, Y+1	; 0x01
    5672:	80 50       	subi	r24, 0x00	; 0
    5674:	9c 4f       	sbci	r25, 0xFC	; 252
    5676:	82 1b       	sub	r24, r18
    5678:	93 0b       	sbc	r25, r19
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    567a:	00 97       	sbiw	r24, 0x00	; 0
    567c:	71 f6       	brne	.-100    	; 0x561a <service_uart_buffer+0xe6>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    567e:	f8 01       	movw	r30, r16
    5680:	80 81       	ld	r24, Z
    5682:	91 81       	ldd	r25, Z+1	; 0x01
    5684:	28 81       	ld	r18, Y
    5686:	39 81       	ldd	r19, Y+1	; 0x01
    5688:	82 17       	cp	r24, r18
    568a:	93 07       	cpc	r25, r19
    568c:	38 f0       	brcs	.+14     	; 0x569c <service_uart_buffer+0x168>
		return (uart_head[idx] - uart_tail[idx]);
    568e:	80 81       	ld	r24, Z
    5690:	91 81       	ldd	r25, Z+1	; 0x01
    5692:	28 81       	ld	r18, Y
    5694:	39 81       	ldd	r19, Y+1	; 0x01
    5696:	82 1b       	sub	r24, r18
    5698:	93 0b       	sbc	r25, r19
    569a:	08 c0       	rjmp	.+16     	; 0x56ac <service_uart_buffer+0x178>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    569c:	80 81       	ld	r24, Z
    569e:	91 81       	ldd	r25, Z+1	; 0x01
    56a0:	28 81       	ld	r18, Y
    56a2:	39 81       	ldd	r19, Y+1	; 0x01
    56a4:	80 50       	subi	r24, 0x00	; 0
    56a6:	9c 4f       	sbci	r25, 0xFC	; 252
    56a8:	82 1b       	sub	r24, r18
    56aa:	93 0b       	sbc	r25, r19
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
	}
	//disable the tx outgoing hardware buffer ready interrupt if we have nothing more to put in it.
	if(uart_count(port)>0) uart_txbuffer_enable(port);
    56ac:	00 97       	sbiw	r24, 0x00	; 0
    56ae:	21 f0       	breq	.+8      	; 0x56b8 <service_uart_buffer+0x184>
    56b0:	c7 01       	movw	r24, r14
    56b2:	0e 94 0f 19 	call	0x321e	; 0x321e <uart_txbuffer_enable>
    56b6:	03 c0       	rjmp	.+6      	; 0x56be <service_uart_buffer+0x18a>
	else uart_txbuffer_disable(port);
    56b8:	c7 01       	movw	r24, r14
    56ba:	0e 94 14 19 	call	0x3228	; 0x3228 <uart_txbuffer_disable>
#ifndef UART_DEBUG
	uint8_t idx = port_map(port);
	
	//if (idx==0){uart_enqueue(&uctrl, datain);} //xxx
	
	uart_buffer[idx][uart_head[idx]] = datain;
    56be:	f8 01       	movw	r30, r16
    56c0:	80 81       	ld	r24, Z
    56c2:	91 81       	ldd	r25, Z+1	; 0x01
    56c4:	87 53       	subi	r24, 0x37	; 55
    56c6:	95 4c       	sbci	r25, 0xC5	; 197
    56c8:	dc 01       	movw	r26, r24
    56ca:	bc 92       	st	X, r11
	uart_head[idx]++;
    56cc:	80 81       	ld	r24, Z
    56ce:	91 81       	ldd	r25, Z+1	; 0x01
    56d0:	01 96       	adiw	r24, 0x01	; 1
    56d2:	80 83       	st	Z, r24
    56d4:	91 83       	std	Z+1, r25	; 0x01
	if (uart_head[idx] >= MAX_BUFFER_LEN){
    56d6:	80 81       	ld	r24, Z
    56d8:	91 81       	ldd	r25, Z+1	; 0x01
    56da:	b4 e0       	ldi	r27, 0x04	; 4
    56dc:	80 30       	cpi	r24, 0x00	; 0
    56de:	9b 07       	cpc	r25, r27
    56e0:	10 f0       	brcs	.+4      	; 0x56e6 <service_uart_buffer+0x1b2>
		uart_head[idx] = 0;
    56e2:	10 82       	st	Z, r1
    56e4:	11 82       	std	Z+1, r1	; 0x01
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    56e6:	f7 01       	movw	r30, r14
    56e8:	81 81       	ldd	r24, Z+1	; 0x01
    56ea:	85 fd       	sbrc	r24, 5
    56ec:	1a c0       	rjmp	.+52     	; 0x5722 <service_uart_buffer+0x1ee>
    56ee:	32 c0       	rjmp	.+100    	; 0x5754 <service_uart_buffer+0x220>
}

inline uint8_t uart_dequeue(USART_t* port){
	uint8_t idx = port_map(port);
	uint16_t oldtail;
	oldtail = uart_tail[idx];
    56f0:	e8 81       	ld	r30, Y
    56f2:	f9 81       	ldd	r31, Y+1	; 0x01
	uart_tail[idx]++;
    56f4:	88 81       	ld	r24, Y
    56f6:	99 81       	ldd	r25, Y+1	; 0x01
    56f8:	01 96       	adiw	r24, 0x01	; 1
    56fa:	88 83       	st	Y, r24
    56fc:	99 83       	std	Y+1, r25	; 0x01
	if (uart_tail[idx] >= MAX_BUFFER_LEN){
    56fe:	88 81       	ld	r24, Y
    5700:	99 81       	ldd	r25, Y+1	; 0x01
    5702:	24 e0       	ldi	r18, 0x04	; 4
    5704:	80 30       	cpi	r24, 0x00	; 0
    5706:	92 07       	cpc	r25, r18
    5708:	10 f0       	brcs	.+4      	; 0x570e <service_uart_buffer+0x1da>
		uart_tail[idx] = 0;
    570a:	18 82       	st	Y, r1
    570c:	19 82       	std	Y+1, r1	; 0x01
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    570e:	e7 53       	subi	r30, 0x37	; 55
    5710:	f5 4c       	sbci	r31, 0xC5	; 197
    5712:	80 81       	ld	r24, Z
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
    5714:	d7 01       	movw	r26, r14
    5716:	8c 93       	st	X, r24
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    5718:	11 96       	adiw	r26, 0x01	; 1
    571a:	8c 91       	ld	r24, X
    571c:	11 97       	sbiw	r26, 0x01	; 1
    571e:	85 ff       	sbrs	r24, 5
    5720:	19 c0       	rjmp	.+50     	; 0x5754 <service_uart_buffer+0x220>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    5722:	f8 01       	movw	r30, r16
    5724:	80 81       	ld	r24, Z
    5726:	91 81       	ldd	r25, Z+1	; 0x01
    5728:	28 81       	ld	r18, Y
    572a:	39 81       	ldd	r19, Y+1	; 0x01
    572c:	82 17       	cp	r24, r18
    572e:	93 07       	cpc	r25, r19
    5730:	38 f0       	brcs	.+14     	; 0x5740 <service_uart_buffer+0x20c>
		return (uart_head[idx] - uart_tail[idx]);
    5732:	80 81       	ld	r24, Z
    5734:	91 81       	ldd	r25, Z+1	; 0x01
    5736:	28 81       	ld	r18, Y
    5738:	39 81       	ldd	r19, Y+1	; 0x01
    573a:	82 1b       	sub	r24, r18
    573c:	93 0b       	sbc	r25, r19
    573e:	08 c0       	rjmp	.+16     	; 0x5750 <service_uart_buffer+0x21c>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    5740:	80 81       	ld	r24, Z
    5742:	91 81       	ldd	r25, Z+1	; 0x01
    5744:	28 81       	ld	r18, Y
    5746:	39 81       	ldd	r19, Y+1	; 0x01
    5748:	80 50       	subi	r24, 0x00	; 0
    574a:	9c 4f       	sbci	r25, 0xFC	; 252
    574c:	82 1b       	sub	r24, r18
    574e:	93 0b       	sbc	r25, r19
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    5750:	00 97       	sbiw	r24, 0x00	; 0
    5752:	71 f6       	brne	.-100    	; 0x56f0 <service_uart_buffer+0x1bc>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    5754:	f8 01       	movw	r30, r16
    5756:	80 81       	ld	r24, Z
    5758:	91 81       	ldd	r25, Z+1	; 0x01
    575a:	28 81       	ld	r18, Y
    575c:	39 81       	ldd	r19, Y+1	; 0x01
    575e:	82 17       	cp	r24, r18
    5760:	93 07       	cpc	r25, r19
    5762:	38 f0       	brcs	.+14     	; 0x5772 <service_uart_buffer+0x23e>
		return (uart_head[idx] - uart_tail[idx]);
    5764:	80 81       	ld	r24, Z
    5766:	91 81       	ldd	r25, Z+1	; 0x01
    5768:	28 81       	ld	r18, Y
    576a:	39 81       	ldd	r19, Y+1	; 0x01
    576c:	82 1b       	sub	r24, r18
    576e:	93 0b       	sbc	r25, r19
    5770:	08 c0       	rjmp	.+16     	; 0x5782 <service_uart_buffer+0x24e>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    5772:	80 81       	ld	r24, Z
    5774:	91 81       	ldd	r25, Z+1	; 0x01
    5776:	28 81       	ld	r18, Y
    5778:	39 81       	ldd	r19, Y+1	; 0x01
    577a:	80 50       	subi	r24, 0x00	; 0
    577c:	9c 4f       	sbci	r25, 0xFC	; 252
    577e:	82 1b       	sub	r24, r18
    5780:	93 0b       	sbc	r25, r19
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
	}
	//disable the tx outgoing hardware buffer ready interrupt if we have nothing more to put in it.
	if(uart_count(port)>0) uart_txbuffer_enable(port);
    5782:	00 97       	sbiw	r24, 0x00	; 0
    5784:	21 f0       	breq	.+8      	; 0x578e <service_uart_buffer+0x25a>
    5786:	c7 01       	movw	r24, r14
    5788:	0e 94 0f 19 	call	0x321e	; 0x321e <uart_txbuffer_enable>
    578c:	03 c0       	rjmp	.+6      	; 0x5794 <service_uart_buffer+0x260>
	else uart_txbuffer_disable(port);
    578e:	c7 01       	movw	r24, r14
    5790:	0e 94 14 19 	call	0x3228	; 0x3228 <uart_txbuffer_disable>
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0) && (lcd_flow_control == LCD_READY)){
		toSend = uart_dequeue(port);
		if (toSend == 0x0D) {lcd_flow_control = LCD_BUSY;}
		uart_enqueue(&udata, '`'); //xxx - echo to data port
		uart_enqueue(&udata, toSend); //xxx - echo to data port
		port->DATA = toSend;
    5794:	f3 01       	movw	r30, r6
    5796:	b0 82       	st	Z, r11
}

void inline uart_transmit_lcd(USART_t* port){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0) && (lcd_flow_control == LCD_READY)){
    5798:	81 81       	ldd	r24, Z+1	; 0x01
    579a:	85 fd       	sbrc	r24, 5
    579c:	2b c0       	rjmp	.+86     	; 0x57f4 <service_uart_buffer+0x2c0>
    579e:	4e c0       	rjmp	.+156    	; 0x583c <service_uart_buffer+0x308>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    57a0:	0f 2e       	mov	r0, r31
    57a2:	f3 ec       	ldi	r31, 0xC3	; 195
    57a4:	8f 2e       	mov	r8, r31
    57a6:	f2 e3       	ldi	r31, 0x32	; 50
    57a8:	9f 2e       	mov	r9, r31
    57aa:	f0 2d       	mov	r31, r0
    57ac:	0f 2e       	mov	r0, r31
    57ae:	ff ec       	ldi	r31, 0xCF	; 207
    57b0:	cf 2e       	mov	r12, r31
    57b2:	fe e3       	ldi	r31, 0x3E	; 62
    57b4:	df 2e       	mov	r13, r31
    57b6:	f0 2d       	mov	r31, r0
		uart_tail[idx] = 0;
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    57b8:	0f 2e       	mov	r0, r31
    57ba:	f9 ec       	ldi	r31, 0xC9	; 201
    57bc:	4f 2e       	mov	r4, r31
    57be:	f2 e3       	ldi	r31, 0x32	; 50
    57c0:	5f 2e       	mov	r5, r31
    57c2:	f0 2d       	mov	r31, r0
void inline uart_transmit_lcd(USART_t* port){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0) && (lcd_flow_control == LCD_READY)){
		toSend = uart_dequeue(port);
		if (toSend == 0x0D) {lcd_flow_control = LCD_BUSY;}
    57c4:	0f 2e       	mov	r0, r31
    57c6:	fe e4       	ldi	r31, 0x4E	; 78
    57c8:	3f 2e       	mov	r3, r31
    57ca:	f0 2d       	mov	r31, r0
#ifndef UART_DEBUG
	uint8_t idx = port_map(port);
	
	//if (idx==0){uart_enqueue(&uctrl, datain);} //xxx
	
	uart_buffer[idx][uart_head[idx]] = datain;
    57cc:	07 ec       	ldi	r16, 0xC7	; 199
    57ce:	12 e3       	ldi	r17, 0x32	; 50
    57d0:	0f 2e       	mov	r0, r31
    57d2:	f0 e6       	ldi	r31, 0x60	; 96
    57d4:	af 2e       	mov	r10, r31
    57d6:	f0 2d       	mov	r31, r0
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    57d8:	0f 2e       	mov	r0, r31
    57da:	f0 eb       	ldi	r31, 0xB0	; 176
    57dc:	ef 2e       	mov	r14, r31
    57de:	f8 e0       	ldi	r31, 0x08	; 8
    57e0:	ff 2e       	mov	r15, r31
    57e2:	f0 2d       	mov	r31, r0
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    57e4:	c3 ed       	ldi	r28, 0xD3	; 211
    57e6:	de e3       	ldi	r29, 0x3E	; 62
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0) && (lcd_flow_control == LCD_READY)){
		toSend = uart_dequeue(port);
		if (toSend == 0x0D) {lcd_flow_control = LCD_BUSY;}
		uart_enqueue(&udata, '`'); //xxx - echo to data port
		uart_enqueue(&udata, toSend); //xxx - echo to data port
		port->DATA = toSend;
    57e8:	0f 2e       	mov	r0, r31
    57ea:	f0 eb       	ldi	r31, 0xB0	; 176
    57ec:	6f 2e       	mov	r6, r31
    57ee:	fb e0       	ldi	r31, 0x0B	; 11
    57f0:	7f 2e       	mov	r7, r31
    57f2:	f0 2d       	mov	r31, r0
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    57f4:	d4 01       	movw	r26, r8
    57f6:	8d 91       	ld	r24, X+
    57f8:	9c 91       	ld	r25, X
    57fa:	11 97       	sbiw	r26, 0x01	; 1
    57fc:	f6 01       	movw	r30, r12
    57fe:	20 81       	ld	r18, Z
    5800:	31 81       	ldd	r19, Z+1	; 0x01
    5802:	82 17       	cp	r24, r18
    5804:	93 07       	cpc	r25, r19
    5806:	40 f0       	brcs	.+16     	; 0x5818 <service_uart_buffer+0x2e4>
		return (uart_head[idx] - uart_tail[idx]);
    5808:	8d 91       	ld	r24, X+
    580a:	9c 91       	ld	r25, X
    580c:	11 97       	sbiw	r26, 0x01	; 1
    580e:	20 81       	ld	r18, Z
    5810:	31 81       	ldd	r19, Z+1	; 0x01
    5812:	82 1b       	sub	r24, r18
    5814:	93 0b       	sbc	r25, r19
    5816:	0b c0       	rjmp	.+22     	; 0x582e <service_uart_buffer+0x2fa>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    5818:	d4 01       	movw	r26, r8
    581a:	8d 91       	ld	r24, X+
    581c:	9c 91       	ld	r25, X
    581e:	11 97       	sbiw	r26, 0x01	; 1
    5820:	f6 01       	movw	r30, r12
    5822:	20 81       	ld	r18, Z
    5824:	31 81       	ldd	r19, Z+1	; 0x01
    5826:	80 50       	subi	r24, 0x00	; 0
    5828:	9c 4f       	sbci	r25, 0xFC	; 252
    582a:	82 1b       	sub	r24, r18
    582c:	93 0b       	sbc	r25, r19
}

void inline uart_transmit_lcd(USART_t* port){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0) && (lcd_flow_control == LCD_READY)){
    582e:	00 97       	sbiw	r24, 0x00	; 0
    5830:	29 f0       	breq	.+10     	; 0x583c <service_uart_buffer+0x308>
    5832:	80 91 ab 26 	lds	r24, 0x26AB
    5836:	82 35       	cpi	r24, 0x52	; 82
    5838:	09 f4       	brne	.+2      	; 0x583c <service_uart_buffer+0x308>
    583a:	b8 ce       	rjmp	.-656    	; 0x55ac <service_uart_buffer+0x78>
		if (toSend == 0x0D) {lcd_flow_control = LCD_BUSY;}
		uart_enqueue(&udata, '`'); //xxx - echo to data port
		uart_enqueue(&udata, toSend); //xxx - echo to data port
		port->DATA = toSend;
	}
	uart_txbuffer_disable(port); //implemented this way to prevent periodic stalls that happen when uart_txbuffer isn't disabled quickly enough
    583c:	80 eb       	ldi	r24, 0xB0	; 176
    583e:	9b e0       	ldi	r25, 0x0B	; 11
    5840:	0e 94 14 19 	call	0x3228	; 0x3228 <uart_txbuffer_disable>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    5844:	20 91 c3 32 	lds	r18, 0x32C3
    5848:	30 91 c4 32 	lds	r19, 0x32C4
    584c:	80 91 cf 3e 	lds	r24, 0x3ECF
    5850:	90 91 d0 3e 	lds	r25, 0x3ED0
    5854:	28 17       	cp	r18, r24
    5856:	39 07       	cpc	r19, r25
    5858:	58 f0       	brcs	.+22     	; 0x5870 <service_uart_buffer+0x33c>
		return (uart_head[idx] - uart_tail[idx]);
    585a:	80 91 c3 32 	lds	r24, 0x32C3
    585e:	90 91 c4 32 	lds	r25, 0x32C4
    5862:	20 91 cf 3e 	lds	r18, 0x3ECF
    5866:	30 91 d0 3e 	lds	r19, 0x3ED0
    586a:	82 1b       	sub	r24, r18
    586c:	93 0b       	sbc	r25, r19
    586e:	0c c0       	rjmp	.+24     	; 0x5888 <service_uart_buffer+0x354>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    5870:	80 91 c3 32 	lds	r24, 0x32C3
    5874:	90 91 c4 32 	lds	r25, 0x32C4
    5878:	20 91 cf 3e 	lds	r18, 0x3ECF
    587c:	30 91 d0 3e 	lds	r19, 0x3ED0
    5880:	80 50       	subi	r24, 0x00	; 0
    5882:	9c 4f       	sbci	r25, 0xFC	; 252
    5884:	82 1b       	sub	r24, r18
    5886:	93 0b       	sbc	r25, r19
		uart_enqueue(&udata, '`'); //xxx - echo to data port
		uart_enqueue(&udata, toSend); //xxx - echo to data port
		port->DATA = toSend;
	}
	uart_txbuffer_disable(port); //implemented this way to prevent periodic stalls that happen when uart_txbuffer isn't disabled quickly enough
	if ((uart_count(port)>0) && (lcd_flow_control == LCD_READY)){ //...something is waiting to go out
    5888:	00 97       	sbiw	r24, 0x00	; 0
    588a:	41 f0       	breq	.+16     	; 0x589c <service_uart_buffer+0x368>
    588c:	80 91 ab 26 	lds	r24, 0x26AB
    5890:	82 35       	cpi	r24, 0x52	; 82
    5892:	21 f4       	brne	.+8      	; 0x589c <service_uart_buffer+0x368>
		uart_txbuffer_enable(port);	
    5894:	80 eb       	ldi	r24, 0xB0	; 176
    5896:	9b e0       	ldi	r25, 0x0B	; 11
    5898:	0e 94 0f 19 	call	0x321e	; 0x321e <uart_txbuffer_enable>
}

inline void service_uart_buffer(){
	//Resume transmission attempt if outgoing data still pending -- we do this so we can don't block the CPU for too long waiting for flow-control
	if (uart_count(&ulcd)>0){uart_transmit_lcd(&ulcd);}
}
    589c:	df 91       	pop	r29
    589e:	cf 91       	pop	r28
    58a0:	1f 91       	pop	r17
    58a2:	0f 91       	pop	r16
    58a4:	ff 90       	pop	r15
    58a6:	ef 90       	pop	r14
    58a8:	df 90       	pop	r13
    58aa:	cf 90       	pop	r12
    58ac:	bf 90       	pop	r11
    58ae:	af 90       	pop	r10
    58b0:	9f 90       	pop	r9
    58b2:	8f 90       	pop	r8
    58b4:	7f 90       	pop	r7
    58b6:	6f 90       	pop	r6
    58b8:	5f 90       	pop	r5
    58ba:	4f 90       	pop	r4
    58bc:	3f 90       	pop	r3
    58be:	08 95       	ret

000058c0 <led_on>:
void inline led_on(uint8_t which){led_dim(which, 0xff);}

void inline led_off(uint8_t which){led_dim(which, 0x00);}

void inline led_dim(uint8_t which, uint8_t brightness){
	switch(which){
    58c0:	81 30       	cpi	r24, 0x01	; 1
    58c2:	61 f0       	breq	.+24     	; 0x58dc <led_on+0x1c>
    58c4:	81 30       	cpi	r24, 0x01	; 1
    58c6:	18 f0       	brcs	.+6      	; 0x58ce <led_on+0xe>
    58c8:	82 30       	cpi	r24, 0x02	; 2
    58ca:	a9 f4       	brne	.+42     	; 0x58f6 <led_on+0x36>
    58cc:	0e c0       	rjmp	.+28     	; 0x58ea <led_on+0x2a>
	case LED_0:
		TCF0.CCABUF = (uint16_t)brightness;		
    58ce:	8f ef       	ldi	r24, 0xFF	; 255
    58d0:	90 e0       	ldi	r25, 0x00	; 0
    58d2:	e0 e0       	ldi	r30, 0x00	; 0
    58d4:	fb e0       	ldi	r31, 0x0B	; 11
    58d6:	80 af       	sts	0x70, r24
    58d8:	91 af       	sts	0x71, r25
    58da:	08 95       	ret
		break;
	case LED_1:
		TCF0.CCBBUF = (uint16_t)brightness;		
    58dc:	8f ef       	ldi	r24, 0xFF	; 255
    58de:	90 e0       	ldi	r25, 0x00	; 0
    58e0:	e0 e0       	ldi	r30, 0x00	; 0
    58e2:	fb e0       	ldi	r31, 0x0B	; 11
    58e4:	82 af       	sts	0x72, r24
    58e6:	93 af       	sts	0x73, r25
    58e8:	08 95       	ret
		break;
	case LED_3:
		TCF0.CCDBUF = (uint16_t)brightness;
    58ea:	8f ef       	ldi	r24, 0xFF	; 255
    58ec:	90 e0       	ldi	r25, 0x00	; 0
    58ee:	80 93 3e 0b 	sts	0x0B3E, r24
    58f2:	90 93 3f 0b 	sts	0x0B3F, r25
    58f6:	08 95       	ret

000058f8 <led_off>:
void inline led_on(uint8_t which){led_dim(which, 0xff);}

void inline led_off(uint8_t which){led_dim(which, 0x00);}

void inline led_dim(uint8_t which, uint8_t brightness){
	switch(which){
    58f8:	81 30       	cpi	r24, 0x01	; 1
    58fa:	51 f0       	breq	.+20     	; 0x5910 <led_off+0x18>
    58fc:	81 30       	cpi	r24, 0x01	; 1
    58fe:	18 f0       	brcs	.+6      	; 0x5906 <led_off+0xe>
    5900:	82 30       	cpi	r24, 0x02	; 2
    5902:	79 f4       	brne	.+30     	; 0x5922 <led_off+0x2a>
    5904:	0a c0       	rjmp	.+20     	; 0x591a <led_off+0x22>
	case LED_0:
		TCF0.CCABUF = (uint16_t)brightness;		
    5906:	e0 e0       	ldi	r30, 0x00	; 0
    5908:	fb e0       	ldi	r31, 0x0B	; 11
    590a:	10 ae       	sts	0xb0, r17
    590c:	11 ae       	sts	0xb1, r17
    590e:	08 95       	ret
		break;
	case LED_1:
		TCF0.CCBBUF = (uint16_t)brightness;		
    5910:	e0 e0       	ldi	r30, 0x00	; 0
    5912:	fb e0       	ldi	r31, 0x0B	; 11
    5914:	12 ae       	sts	0xb2, r17
    5916:	13 ae       	sts	0xb3, r17
    5918:	08 95       	ret
		break;
	case LED_3:
		TCF0.CCDBUF = (uint16_t)brightness;
    591a:	10 92 3e 0b 	sts	0x0B3E, r1
    591e:	10 92 3f 0b 	sts	0x0B3F, r1
    5922:	08 95       	ret

00005924 <led_dim>:
void inline led_on(uint8_t which){led_dim(which, 0xff);}

void inline led_off(uint8_t which){led_dim(which, 0x00);}

void inline led_dim(uint8_t which, uint8_t brightness){
	switch(which){
    5924:	81 30       	cpi	r24, 0x01	; 1
    5926:	59 f0       	breq	.+22     	; 0x593e <led_dim+0x1a>
    5928:	81 30       	cpi	r24, 0x01	; 1
    592a:	18 f0       	brcs	.+6      	; 0x5932 <led_dim+0xe>
    592c:	82 30       	cpi	r24, 0x02	; 2
    592e:	91 f4       	brne	.+36     	; 0x5954 <led_dim+0x30>
    5930:	0c c0       	rjmp	.+24     	; 0x594a <led_dim+0x26>
	case LED_0:
		TCF0.CCABUF = (uint16_t)brightness;		
    5932:	70 e0       	ldi	r23, 0x00	; 0
    5934:	e0 e0       	ldi	r30, 0x00	; 0
    5936:	fb e0       	ldi	r31, 0x0B	; 11
    5938:	60 af       	sts	0x70, r22
    593a:	71 af       	sts	0x71, r23
		break;
    593c:	08 95       	ret
	case LED_1:
		TCF0.CCBBUF = (uint16_t)brightness;		
    593e:	70 e0       	ldi	r23, 0x00	; 0
    5940:	e0 e0       	ldi	r30, 0x00	; 0
    5942:	fb e0       	ldi	r31, 0x0B	; 11
    5944:	62 af       	sts	0x72, r22
    5946:	73 af       	sts	0x73, r23
		break;
    5948:	08 95       	ret
	case LED_3:
		TCF0.CCDBUF = (uint16_t)brightness;
    594a:	70 e0       	ldi	r23, 0x00	; 0
    594c:	60 93 3e 0b 	sts	0x0B3E, r22
    5950:	70 93 3f 0b 	sts	0x0B3F, r23
    5954:	08 95       	ret

00005956 <led_toggle>:
		break;
	}
}

void inline led_toggle(uint8_t which){
	switch(which){
    5956:	81 30       	cpi	r24, 0x01	; 1
    5958:	59 f0       	breq	.+22     	; 0x5970 <led_toggle+0x1a>
    595a:	81 30       	cpi	r24, 0x01	; 1
    595c:	18 f0       	brcs	.+6      	; 0x5964 <led_toggle+0xe>
    595e:	82 30       	cpi	r24, 0x02	; 2
    5960:	91 f4       	brne	.+36     	; 0x5986 <led_toggle+0x30>
    5962:	0c c0       	rjmp	.+24     	; 0x597c <led_toggle+0x26>
	case LED_0:
		TCF0.CCAL = ~TCF0.CCAL;		
    5964:	e0 e0       	ldi	r30, 0x00	; 0
    5966:	fb e0       	ldi	r31, 0x0B	; 11
    5968:	80 a5       	lds	r24, 0x60
    596a:	80 95       	com	r24
    596c:	80 a7       	lds	r24, 0x70
		break;
    596e:	08 95       	ret
	case LED_1:
		TCF0.CCBL = ~TCF0.CCBL;		
    5970:	e0 e0       	ldi	r30, 0x00	; 0
    5972:	fb e0       	ldi	r31, 0x0B	; 11
    5974:	82 a5       	lds	r24, 0x62
    5976:	80 95       	com	r24
    5978:	82 a7       	lds	r24, 0x72
		break;
    597a:	08 95       	ret
	case LED_3:
		TCF0.CCDL = ~TCF0.CCDL;
    597c:	e0 e0       	ldi	r30, 0x00	; 0
    597e:	fb e0       	ldi	r31, 0x0B	; 11
    5980:	86 a5       	lds	r24, 0x66
    5982:	80 95       	com	r24
    5984:	86 a7       	lds	r24, 0x76
    5986:	08 95       	ret

00005988 <audio_volume>:
uint8_t _audio_volume;
uint8_t _audio_counter;
uint8_t _audio_state = AUDIO_IDLE;

void audio_volume(uint8_t volume){
	TCF0.CCCBUF = (uint16_t)volume;	
    5988:	90 e0       	ldi	r25, 0x00	; 0
    598a:	e0 e0       	ldi	r30, 0x00	; 0
    598c:	fb e0       	ldi	r31, 0x0B	; 11
    598e:	84 af       	sts	0x74, r24
    5990:	95 af       	sts	0x75, r25
}
    5992:	08 95       	ret

00005994 <init_ui>:
#include "utilities.h"
#include "ui.h"

//Handles all internal UI hardware (2 LEDs + Audio Beeper)

void init_ui(){
    5994:	cf 93       	push	r28
    5996:	df 93       	push	r29
	//LED's are located at PF0 (Lower) and PF1 (Upper)
	PORTF.DIRSET = B8(00001111); //pins 0,1,2,3 to output	
    5998:	e0 ea       	ldi	r30, 0xA0	; 160
    599a:	f6 e0       	ldi	r31, 0x06	; 6
    599c:	8f e0       	ldi	r24, 0x0F	; 15
    599e:	81 83       	std	Z+1, r24	; 0x01
	PORTF.PIN0CTRL = B8(01000000); //Invert the pin (needed to achieve correct PWM output polarity)
    59a0:	80 e4       	ldi	r24, 0x40	; 64
    59a2:	80 8b       	std	Z+16, r24	; 0x10
	PORTF.PIN1CTRL = B8(01000000); //Invert the pin (needed to achieve correct PWM output polarity)
    59a4:	81 8b       	std	Z+17, r24	; 0x11
	PORTF.PIN3CTRL = B8(01000000); //Invert the pin (needed to achieve correct PWM output polarity)
    59a6:	83 8b       	std	Z+19, r24	; 0x13
	TCF0.CTRLA = 0x07; //enable; div1024
    59a8:	c0 e0       	ldi	r28, 0x00	; 0
    59aa:	db e0       	ldi	r29, 0x0B	; 11
    59ac:	87 e0       	ldi	r24, 0x07	; 7
    59ae:	88 83       	st	Y, r24
	TCF0.CTRLB = B8(11110011); //All output channels enabled (A through D); Single-slope PWM
    59b0:	83 ef       	ldi	r24, 0xF3	; 243
    59b2:	89 83       	std	Y+1, r24	; 0x01
	TCF0.PER = 0x00FF; //Set the top of the counter to basically force 8 bit operation; we do this for speed when calling dimming functions in the future
    59b4:	8f ef       	ldi	r24, 0xFF	; 255
    59b6:	90 e0       	ldi	r25, 0x00	; 0
    59b8:	8e a3       	lds	r24, 0x5e
    59ba:	9f a3       	lds	r25, 0x5f
	audio_volume(0x00);
    59bc:	80 e0       	ldi	r24, 0x00	; 0
    59be:	0e 94 c4 2c 	call	0x5988	; 0x5988 <audio_volume>
void inline led_off(uint8_t which){led_dim(which, 0x00);}

void inline led_dim(uint8_t which, uint8_t brightness){
	switch(which){
	case LED_0:
		TCF0.CCABUF = (uint16_t)brightness;		
    59c2:	18 ae       	sts	0xb8, r17
    59c4:	19 ae       	sts	0xb9, r17
		break;
	case LED_1:
		TCF0.CCBBUF = (uint16_t)brightness;		
    59c6:	1a ae       	sts	0xba, r17
    59c8:	1b ae       	sts	0xbb, r17
		break;
	case LED_3:
		TCF0.CCDBUF = (uint16_t)brightness;
    59ca:	10 92 3e 0b 	sts	0x0B3E, r1
    59ce:	10 92 3f 0b 	sts	0x0B3F, r1
	TCF0.PER = 0x00FF; //Set the top of the counter to basically force 8 bit operation; we do this for speed when calling dimming functions in the future
	audio_volume(0x00);
	led_off(LED_0);
	led_off(LED_1);
	led_off(LED_3);			
}
    59d2:	df 91       	pop	r29
    59d4:	cf 91       	pop	r28
    59d6:	08 95       	ret

000059d8 <_audio_beep>:
	TCF0.CCCBUF = (uint16_t)volume;	
}

//Internal function to actually start making noise
void _audio_beep(){
	_audio_num_beeps--;
    59d8:	80 91 d6 3e 	lds	r24, 0x3ED6
    59dc:	81 50       	subi	r24, 0x01	; 1
    59de:	80 93 d6 3e 	sts	0x3ED6, r24
	_audio_state = AUDIO_BEEPING;
    59e2:	85 e2       	ldi	r24, 0x25	; 37
    59e4:	80 93 12 22 	sts	0x2212, r24
	_audio_counter = AUDIO_BEEP_LENGTH;
    59e8:	85 e0       	ldi	r24, 0x05	; 5
    59ea:	80 93 d7 3e 	sts	0x3ED7, r24
	audio_volume(_audio_volume); //actually start making noise
    59ee:	80 91 d5 3e 	lds	r24, 0x3ED5
    59f2:	0e 94 c4 2c 	call	0x5988	; 0x5988 <audio_volume>
}	
    59f6:	08 95       	ret

000059f8 <audio_beep>:

//[INTERFACE] This is the function to call from outside to make beepy noises
void audio_beep(uint8_t num_beeps, uint16_t volume){
	if (num_beeps < 1) return; //ignore request if no beeps requested
    59f8:	88 23       	and	r24, r24
    59fa:	49 f0       	breq	.+18     	; 0x5a0e <audio_beep+0x16>
	_audio_num_beeps = num_beeps;
    59fc:	80 93 d6 3e 	sts	0x3ED6, r24
	if (volume == 0) return; //ignore request if volume level would be inaudible anyway
    5a00:	61 15       	cp	r22, r1
    5a02:	71 05       	cpc	r23, r1
    5a04:	21 f0       	breq	.+8      	; 0x5a0e <audio_beep+0x16>
	_audio_volume = volume;
    5a06:	60 93 d5 3e 	sts	0x3ED5, r22
	_audio_beep();
    5a0a:	0e 94 ec 2c 	call	0x59d8	; 0x59d8 <_audio_beep>
    5a0e:	08 95       	ret

00005a10 <service_audio>:
}

//2ms Service Loop -- Call once every 2ms
void service_audio(){
	switch(_audio_state){
    5a10:	80 91 12 22 	lds	r24, 0x2212
    5a14:	85 32       	cpi	r24, 0x25	; 37
    5a16:	19 f0       	breq	.+6      	; 0x5a1e <service_audio+0xe>
    5a18:	86 32       	cpi	r24, 0x26	; 38
    5a1a:	19 f5       	brne	.+70     	; 0x5a62 <service_audio+0x52>
    5a1c:	18 c0       	rjmp	.+48     	; 0x5a4e <service_audio+0x3e>
		case AUDIO_BEEPING:
			_audio_counter--;
    5a1e:	80 91 d7 3e 	lds	r24, 0x3ED7
    5a22:	81 50       	subi	r24, 0x01	; 1
    5a24:	80 93 d7 3e 	sts	0x3ED7, r24
			if (_audio_counter <= 0) {
    5a28:	88 23       	and	r24, r24
    5a2a:	f1 f4       	brne	.+60     	; 0x5a68 <service_audio+0x58>
				//End of this beep!
				audio_volume(0x00); //silence!
    5a2c:	0e 94 c4 2c 	call	0x5988	; 0x5988 <audio_volume>
				if (_audio_num_beeps == 0) {
    5a30:	80 91 d6 3e 	lds	r24, 0x3ED6
    5a34:	88 23       	and	r24, r24
    5a36:	21 f4       	brne	.+8      	; 0x5a40 <service_audio+0x30>
					//End of this beep sequence -- ALL DONE! =)					
					_audio_state = AUDIO_IDLE;
    5a38:	84 e2       	ldi	r24, 0x24	; 36
    5a3a:	80 93 12 22 	sts	0x2212, r24
    5a3e:	08 95       	ret
				}
				else {
					//start quiet period between beeps
					_audio_state = AUDIO_BETWEEN;
    5a40:	86 e2       	ldi	r24, 0x26	; 38
    5a42:	80 93 12 22 	sts	0x2212, r24
					_audio_counter = AUDIO_GAP_LENGTH;
    5a46:	82 e3       	ldi	r24, 0x32	; 50
    5a48:	80 93 d7 3e 	sts	0x3ED7, r24
    5a4c:	08 95       	ret
				}
			}
			break;
		case AUDIO_BETWEEN:
			_audio_counter--;
    5a4e:	80 91 d7 3e 	lds	r24, 0x3ED7
    5a52:	81 50       	subi	r24, 0x01	; 1
    5a54:	80 93 d7 3e 	sts	0x3ED7, r24
			if (_audio_counter <= 0) {
    5a58:	88 23       	and	r24, r24
    5a5a:	31 f4       	brne	.+12     	; 0x5a68 <service_audio+0x58>
				//End of gap
				_audio_beep();
    5a5c:	0e 94 ec 2c 	call	0x59d8	; 0x59d8 <_audio_beep>
    5a60:	08 95       	ret
			}
			break;
		case AUDIO_IDLE:
		default:
			audio_volume(0x00); //Silence!
    5a62:	80 e0       	ldi	r24, 0x00	; 0
    5a64:	0e 94 c4 2c 	call	0x5988	; 0x5988 <audio_volume>
    5a68:	08 95       	ret

00005a6a <__cmpsf2>:
    5a6a:	d9 d0       	rcall	.+434    	; 0x5c1e <__fp_cmp>
    5a6c:	08 f4       	brcc	.+2      	; 0x5a70 <__cmpsf2+0x6>
    5a6e:	81 e0       	ldi	r24, 0x01	; 1
    5a70:	08 95       	ret

00005a72 <__divsf3>:
    5a72:	0c d0       	rcall	.+24     	; 0x5a8c <__divsf3x>
    5a74:	0f c1       	rjmp	.+542    	; 0x5c94 <__fp_round>
    5a76:	07 d1       	rcall	.+526    	; 0x5c86 <__fp_pscB>
    5a78:	40 f0       	brcs	.+16     	; 0x5a8a <__divsf3+0x18>
    5a7a:	fe d0       	rcall	.+508    	; 0x5c78 <__fp_pscA>
    5a7c:	30 f0       	brcs	.+12     	; 0x5a8a <__divsf3+0x18>
    5a7e:	21 f4       	brne	.+8      	; 0x5a88 <__divsf3+0x16>
    5a80:	5f 3f       	cpi	r21, 0xFF	; 255
    5a82:	19 f0       	breq	.+6      	; 0x5a8a <__divsf3+0x18>
    5a84:	f0 c0       	rjmp	.+480    	; 0x5c66 <__fp_inf>
    5a86:	51 11       	cpse	r21, r1
    5a88:	39 c1       	rjmp	.+626    	; 0x5cfc <__fp_szero>
    5a8a:	f3 c0       	rjmp	.+486    	; 0x5c72 <__fp_nan>

00005a8c <__divsf3x>:
    5a8c:	14 d1       	rcall	.+552    	; 0x5cb6 <__fp_split3>
    5a8e:	98 f3       	brcs	.-26     	; 0x5a76 <__divsf3+0x4>

00005a90 <__divsf3_pse>:
    5a90:	99 23       	and	r25, r25
    5a92:	c9 f3       	breq	.-14     	; 0x5a86 <__divsf3+0x14>
    5a94:	55 23       	and	r21, r21
    5a96:	b1 f3       	breq	.-20     	; 0x5a84 <__divsf3+0x12>
    5a98:	95 1b       	sub	r25, r21
    5a9a:	55 0b       	sbc	r21, r21
    5a9c:	bb 27       	eor	r27, r27
    5a9e:	aa 27       	eor	r26, r26
    5aa0:	62 17       	cp	r22, r18
    5aa2:	73 07       	cpc	r23, r19
    5aa4:	84 07       	cpc	r24, r20
    5aa6:	38 f0       	brcs	.+14     	; 0x5ab6 <__divsf3_pse+0x26>
    5aa8:	9f 5f       	subi	r25, 0xFF	; 255
    5aaa:	5f 4f       	sbci	r21, 0xFF	; 255
    5aac:	22 0f       	add	r18, r18
    5aae:	33 1f       	adc	r19, r19
    5ab0:	44 1f       	adc	r20, r20
    5ab2:	aa 1f       	adc	r26, r26
    5ab4:	a9 f3       	breq	.-22     	; 0x5aa0 <__divsf3_pse+0x10>
    5ab6:	33 d0       	rcall	.+102    	; 0x5b1e <__divsf3_pse+0x8e>
    5ab8:	0e 2e       	mov	r0, r30
    5aba:	3a f0       	brmi	.+14     	; 0x5aca <__divsf3_pse+0x3a>
    5abc:	e0 e8       	ldi	r30, 0x80	; 128
    5abe:	30 d0       	rcall	.+96     	; 0x5b20 <__divsf3_pse+0x90>
    5ac0:	91 50       	subi	r25, 0x01	; 1
    5ac2:	50 40       	sbci	r21, 0x00	; 0
    5ac4:	e6 95       	lsr	r30
    5ac6:	00 1c       	adc	r0, r0
    5ac8:	ca f7       	brpl	.-14     	; 0x5abc <__divsf3_pse+0x2c>
    5aca:	29 d0       	rcall	.+82     	; 0x5b1e <__divsf3_pse+0x8e>
    5acc:	fe 2f       	mov	r31, r30
    5ace:	27 d0       	rcall	.+78     	; 0x5b1e <__divsf3_pse+0x8e>
    5ad0:	66 0f       	add	r22, r22
    5ad2:	77 1f       	adc	r23, r23
    5ad4:	88 1f       	adc	r24, r24
    5ad6:	bb 1f       	adc	r27, r27
    5ad8:	26 17       	cp	r18, r22
    5ada:	37 07       	cpc	r19, r23
    5adc:	48 07       	cpc	r20, r24
    5ade:	ab 07       	cpc	r26, r27
    5ae0:	b0 e8       	ldi	r27, 0x80	; 128
    5ae2:	09 f0       	breq	.+2      	; 0x5ae6 <__divsf3_pse+0x56>
    5ae4:	bb 0b       	sbc	r27, r27
    5ae6:	80 2d       	mov	r24, r0
    5ae8:	bf 01       	movw	r22, r30
    5aea:	ff 27       	eor	r31, r31
    5aec:	93 58       	subi	r25, 0x83	; 131
    5aee:	5f 4f       	sbci	r21, 0xFF	; 255
    5af0:	2a f0       	brmi	.+10     	; 0x5afc <__divsf3_pse+0x6c>
    5af2:	9e 3f       	cpi	r25, 0xFE	; 254
    5af4:	51 05       	cpc	r21, r1
    5af6:	68 f0       	brcs	.+26     	; 0x5b12 <__divsf3_pse+0x82>
    5af8:	b6 c0       	rjmp	.+364    	; 0x5c66 <__fp_inf>
    5afa:	00 c1       	rjmp	.+512    	; 0x5cfc <__fp_szero>
    5afc:	5f 3f       	cpi	r21, 0xFF	; 255
    5afe:	ec f3       	brlt	.-6      	; 0x5afa <__divsf3_pse+0x6a>
    5b00:	98 3e       	cpi	r25, 0xE8	; 232
    5b02:	dc f3       	brlt	.-10     	; 0x5afa <__divsf3_pse+0x6a>
    5b04:	86 95       	lsr	r24
    5b06:	77 95       	ror	r23
    5b08:	67 95       	ror	r22
    5b0a:	b7 95       	ror	r27
    5b0c:	f7 95       	ror	r31
    5b0e:	9f 5f       	subi	r25, 0xFF	; 255
    5b10:	c9 f7       	brne	.-14     	; 0x5b04 <__divsf3_pse+0x74>
    5b12:	88 0f       	add	r24, r24
    5b14:	91 1d       	adc	r25, r1
    5b16:	96 95       	lsr	r25
    5b18:	87 95       	ror	r24
    5b1a:	97 f9       	bld	r25, 7
    5b1c:	08 95       	ret
    5b1e:	e1 e0       	ldi	r30, 0x01	; 1
    5b20:	66 0f       	add	r22, r22
    5b22:	77 1f       	adc	r23, r23
    5b24:	88 1f       	adc	r24, r24
    5b26:	bb 1f       	adc	r27, r27
    5b28:	62 17       	cp	r22, r18
    5b2a:	73 07       	cpc	r23, r19
    5b2c:	84 07       	cpc	r24, r20
    5b2e:	ba 07       	cpc	r27, r26
    5b30:	20 f0       	brcs	.+8      	; 0x5b3a <__divsf3_pse+0xaa>
    5b32:	62 1b       	sub	r22, r18
    5b34:	73 0b       	sbc	r23, r19
    5b36:	84 0b       	sbc	r24, r20
    5b38:	ba 0b       	sbc	r27, r26
    5b3a:	ee 1f       	adc	r30, r30
    5b3c:	88 f7       	brcc	.-30     	; 0x5b20 <__divsf3_pse+0x90>
    5b3e:	e0 95       	com	r30
    5b40:	08 95       	ret

00005b42 <__fixsfsi>:
    5b42:	04 d0       	rcall	.+8      	; 0x5b4c <__fixunssfsi>
    5b44:	68 94       	set
    5b46:	b1 11       	cpse	r27, r1
    5b48:	d9 c0       	rjmp	.+434    	; 0x5cfc <__fp_szero>
    5b4a:	08 95       	ret

00005b4c <__fixunssfsi>:
    5b4c:	bc d0       	rcall	.+376    	; 0x5cc6 <__fp_splitA>
    5b4e:	88 f0       	brcs	.+34     	; 0x5b72 <__fixunssfsi+0x26>
    5b50:	9f 57       	subi	r25, 0x7F	; 127
    5b52:	90 f0       	brcs	.+36     	; 0x5b78 <__fixunssfsi+0x2c>
    5b54:	b9 2f       	mov	r27, r25
    5b56:	99 27       	eor	r25, r25
    5b58:	b7 51       	subi	r27, 0x17	; 23
    5b5a:	a0 f0       	brcs	.+40     	; 0x5b84 <__fixunssfsi+0x38>
    5b5c:	d1 f0       	breq	.+52     	; 0x5b92 <__fixunssfsi+0x46>
    5b5e:	66 0f       	add	r22, r22
    5b60:	77 1f       	adc	r23, r23
    5b62:	88 1f       	adc	r24, r24
    5b64:	99 1f       	adc	r25, r25
    5b66:	1a f0       	brmi	.+6      	; 0x5b6e <__fixunssfsi+0x22>
    5b68:	ba 95       	dec	r27
    5b6a:	c9 f7       	brne	.-14     	; 0x5b5e <__fixunssfsi+0x12>
    5b6c:	12 c0       	rjmp	.+36     	; 0x5b92 <__fixunssfsi+0x46>
    5b6e:	b1 30       	cpi	r27, 0x01	; 1
    5b70:	81 f0       	breq	.+32     	; 0x5b92 <__fixunssfsi+0x46>
    5b72:	c3 d0       	rcall	.+390    	; 0x5cfa <__fp_zero>
    5b74:	b1 e0       	ldi	r27, 0x01	; 1
    5b76:	08 95       	ret
    5b78:	c0 c0       	rjmp	.+384    	; 0x5cfa <__fp_zero>
    5b7a:	67 2f       	mov	r22, r23
    5b7c:	78 2f       	mov	r23, r24
    5b7e:	88 27       	eor	r24, r24
    5b80:	b8 5f       	subi	r27, 0xF8	; 248
    5b82:	39 f0       	breq	.+14     	; 0x5b92 <__fixunssfsi+0x46>
    5b84:	b9 3f       	cpi	r27, 0xF9	; 249
    5b86:	cc f3       	brlt	.-14     	; 0x5b7a <__fixunssfsi+0x2e>
    5b88:	86 95       	lsr	r24
    5b8a:	77 95       	ror	r23
    5b8c:	67 95       	ror	r22
    5b8e:	b3 95       	inc	r27
    5b90:	d9 f7       	brne	.-10     	; 0x5b88 <__fixunssfsi+0x3c>
    5b92:	3e f4       	brtc	.+14     	; 0x5ba2 <__fixunssfsi+0x56>
    5b94:	90 95       	com	r25
    5b96:	80 95       	com	r24
    5b98:	70 95       	com	r23
    5b9a:	61 95       	neg	r22
    5b9c:	7f 4f       	sbci	r23, 0xFF	; 255
    5b9e:	8f 4f       	sbci	r24, 0xFF	; 255
    5ba0:	9f 4f       	sbci	r25, 0xFF	; 255
    5ba2:	08 95       	ret

00005ba4 <__floatunsisf>:
    5ba4:	e8 94       	clt
    5ba6:	09 c0       	rjmp	.+18     	; 0x5bba <__floatsisf+0x12>

00005ba8 <__floatsisf>:
    5ba8:	97 fb       	bst	r25, 7
    5baa:	3e f4       	brtc	.+14     	; 0x5bba <__floatsisf+0x12>
    5bac:	90 95       	com	r25
    5bae:	80 95       	com	r24
    5bb0:	70 95       	com	r23
    5bb2:	61 95       	neg	r22
    5bb4:	7f 4f       	sbci	r23, 0xFF	; 255
    5bb6:	8f 4f       	sbci	r24, 0xFF	; 255
    5bb8:	9f 4f       	sbci	r25, 0xFF	; 255
    5bba:	99 23       	and	r25, r25
    5bbc:	a9 f0       	breq	.+42     	; 0x5be8 <__floatsisf+0x40>
    5bbe:	f9 2f       	mov	r31, r25
    5bc0:	96 e9       	ldi	r25, 0x96	; 150
    5bc2:	bb 27       	eor	r27, r27
    5bc4:	93 95       	inc	r25
    5bc6:	f6 95       	lsr	r31
    5bc8:	87 95       	ror	r24
    5bca:	77 95       	ror	r23
    5bcc:	67 95       	ror	r22
    5bce:	b7 95       	ror	r27
    5bd0:	f1 11       	cpse	r31, r1
    5bd2:	f8 cf       	rjmp	.-16     	; 0x5bc4 <__floatsisf+0x1c>
    5bd4:	fa f4       	brpl	.+62     	; 0x5c14 <__floatsisf+0x6c>
    5bd6:	bb 0f       	add	r27, r27
    5bd8:	11 f4       	brne	.+4      	; 0x5bde <__floatsisf+0x36>
    5bda:	60 ff       	sbrs	r22, 0
    5bdc:	1b c0       	rjmp	.+54     	; 0x5c14 <__floatsisf+0x6c>
    5bde:	6f 5f       	subi	r22, 0xFF	; 255
    5be0:	7f 4f       	sbci	r23, 0xFF	; 255
    5be2:	8f 4f       	sbci	r24, 0xFF	; 255
    5be4:	9f 4f       	sbci	r25, 0xFF	; 255
    5be6:	16 c0       	rjmp	.+44     	; 0x5c14 <__floatsisf+0x6c>
    5be8:	88 23       	and	r24, r24
    5bea:	11 f0       	breq	.+4      	; 0x5bf0 <__floatsisf+0x48>
    5bec:	96 e9       	ldi	r25, 0x96	; 150
    5bee:	11 c0       	rjmp	.+34     	; 0x5c12 <__floatsisf+0x6a>
    5bf0:	77 23       	and	r23, r23
    5bf2:	21 f0       	breq	.+8      	; 0x5bfc <__floatsisf+0x54>
    5bf4:	9e e8       	ldi	r25, 0x8E	; 142
    5bf6:	87 2f       	mov	r24, r23
    5bf8:	76 2f       	mov	r23, r22
    5bfa:	05 c0       	rjmp	.+10     	; 0x5c06 <__floatsisf+0x5e>
    5bfc:	66 23       	and	r22, r22
    5bfe:	71 f0       	breq	.+28     	; 0x5c1c <__floatsisf+0x74>
    5c00:	96 e8       	ldi	r25, 0x86	; 134
    5c02:	86 2f       	mov	r24, r22
    5c04:	70 e0       	ldi	r23, 0x00	; 0
    5c06:	60 e0       	ldi	r22, 0x00	; 0
    5c08:	2a f0       	brmi	.+10     	; 0x5c14 <__floatsisf+0x6c>
    5c0a:	9a 95       	dec	r25
    5c0c:	66 0f       	add	r22, r22
    5c0e:	77 1f       	adc	r23, r23
    5c10:	88 1f       	adc	r24, r24
    5c12:	da f7       	brpl	.-10     	; 0x5c0a <__floatsisf+0x62>
    5c14:	88 0f       	add	r24, r24
    5c16:	96 95       	lsr	r25
    5c18:	87 95       	ror	r24
    5c1a:	97 f9       	bld	r25, 7
    5c1c:	08 95       	ret

00005c1e <__fp_cmp>:
    5c1e:	99 0f       	add	r25, r25
    5c20:	00 08       	sbc	r0, r0
    5c22:	55 0f       	add	r21, r21
    5c24:	aa 0b       	sbc	r26, r26
    5c26:	e0 e8       	ldi	r30, 0x80	; 128
    5c28:	fe ef       	ldi	r31, 0xFE	; 254
    5c2a:	16 16       	cp	r1, r22
    5c2c:	17 06       	cpc	r1, r23
    5c2e:	e8 07       	cpc	r30, r24
    5c30:	f9 07       	cpc	r31, r25
    5c32:	c0 f0       	brcs	.+48     	; 0x5c64 <__fp_cmp+0x46>
    5c34:	12 16       	cp	r1, r18
    5c36:	13 06       	cpc	r1, r19
    5c38:	e4 07       	cpc	r30, r20
    5c3a:	f5 07       	cpc	r31, r21
    5c3c:	98 f0       	brcs	.+38     	; 0x5c64 <__fp_cmp+0x46>
    5c3e:	62 1b       	sub	r22, r18
    5c40:	73 0b       	sbc	r23, r19
    5c42:	84 0b       	sbc	r24, r20
    5c44:	95 0b       	sbc	r25, r21
    5c46:	39 f4       	brne	.+14     	; 0x5c56 <__fp_cmp+0x38>
    5c48:	0a 26       	eor	r0, r26
    5c4a:	61 f0       	breq	.+24     	; 0x5c64 <__fp_cmp+0x46>
    5c4c:	23 2b       	or	r18, r19
    5c4e:	24 2b       	or	r18, r20
    5c50:	25 2b       	or	r18, r21
    5c52:	21 f4       	brne	.+8      	; 0x5c5c <__fp_cmp+0x3e>
    5c54:	08 95       	ret
    5c56:	0a 26       	eor	r0, r26
    5c58:	09 f4       	brne	.+2      	; 0x5c5c <__fp_cmp+0x3e>
    5c5a:	a1 40       	sbci	r26, 0x01	; 1
    5c5c:	a6 95       	lsr	r26
    5c5e:	8f ef       	ldi	r24, 0xFF	; 255
    5c60:	81 1d       	adc	r24, r1
    5c62:	81 1d       	adc	r24, r1
    5c64:	08 95       	ret

00005c66 <__fp_inf>:
    5c66:	97 f9       	bld	r25, 7
    5c68:	9f 67       	ori	r25, 0x7F	; 127
    5c6a:	80 e8       	ldi	r24, 0x80	; 128
    5c6c:	70 e0       	ldi	r23, 0x00	; 0
    5c6e:	60 e0       	ldi	r22, 0x00	; 0
    5c70:	08 95       	ret

00005c72 <__fp_nan>:
    5c72:	9f ef       	ldi	r25, 0xFF	; 255
    5c74:	80 ec       	ldi	r24, 0xC0	; 192
    5c76:	08 95       	ret

00005c78 <__fp_pscA>:
    5c78:	00 24       	eor	r0, r0
    5c7a:	0a 94       	dec	r0
    5c7c:	16 16       	cp	r1, r22
    5c7e:	17 06       	cpc	r1, r23
    5c80:	18 06       	cpc	r1, r24
    5c82:	09 06       	cpc	r0, r25
    5c84:	08 95       	ret

00005c86 <__fp_pscB>:
    5c86:	00 24       	eor	r0, r0
    5c88:	0a 94       	dec	r0
    5c8a:	12 16       	cp	r1, r18
    5c8c:	13 06       	cpc	r1, r19
    5c8e:	14 06       	cpc	r1, r20
    5c90:	05 06       	cpc	r0, r21
    5c92:	08 95       	ret

00005c94 <__fp_round>:
    5c94:	09 2e       	mov	r0, r25
    5c96:	03 94       	inc	r0
    5c98:	00 0c       	add	r0, r0
    5c9a:	11 f4       	brne	.+4      	; 0x5ca0 <__fp_round+0xc>
    5c9c:	88 23       	and	r24, r24
    5c9e:	52 f0       	brmi	.+20     	; 0x5cb4 <__fp_round+0x20>
    5ca0:	bb 0f       	add	r27, r27
    5ca2:	40 f4       	brcc	.+16     	; 0x5cb4 <__fp_round+0x20>
    5ca4:	bf 2b       	or	r27, r31
    5ca6:	11 f4       	brne	.+4      	; 0x5cac <__fp_round+0x18>
    5ca8:	60 ff       	sbrs	r22, 0
    5caa:	04 c0       	rjmp	.+8      	; 0x5cb4 <__fp_round+0x20>
    5cac:	6f 5f       	subi	r22, 0xFF	; 255
    5cae:	7f 4f       	sbci	r23, 0xFF	; 255
    5cb0:	8f 4f       	sbci	r24, 0xFF	; 255
    5cb2:	9f 4f       	sbci	r25, 0xFF	; 255
    5cb4:	08 95       	ret

00005cb6 <__fp_split3>:
    5cb6:	57 fd       	sbrc	r21, 7
    5cb8:	90 58       	subi	r25, 0x80	; 128
    5cba:	44 0f       	add	r20, r20
    5cbc:	55 1f       	adc	r21, r21
    5cbe:	59 f0       	breq	.+22     	; 0x5cd6 <__fp_splitA+0x10>
    5cc0:	5f 3f       	cpi	r21, 0xFF	; 255
    5cc2:	71 f0       	breq	.+28     	; 0x5ce0 <__fp_splitA+0x1a>
    5cc4:	47 95       	ror	r20

00005cc6 <__fp_splitA>:
    5cc6:	88 0f       	add	r24, r24
    5cc8:	97 fb       	bst	r25, 7
    5cca:	99 1f       	adc	r25, r25
    5ccc:	61 f0       	breq	.+24     	; 0x5ce6 <__fp_splitA+0x20>
    5cce:	9f 3f       	cpi	r25, 0xFF	; 255
    5cd0:	79 f0       	breq	.+30     	; 0x5cf0 <__fp_splitA+0x2a>
    5cd2:	87 95       	ror	r24
    5cd4:	08 95       	ret
    5cd6:	12 16       	cp	r1, r18
    5cd8:	13 06       	cpc	r1, r19
    5cda:	14 06       	cpc	r1, r20
    5cdc:	55 1f       	adc	r21, r21
    5cde:	f2 cf       	rjmp	.-28     	; 0x5cc4 <__fp_split3+0xe>
    5ce0:	46 95       	lsr	r20
    5ce2:	f1 df       	rcall	.-30     	; 0x5cc6 <__fp_splitA>
    5ce4:	08 c0       	rjmp	.+16     	; 0x5cf6 <__fp_splitA+0x30>
    5ce6:	16 16       	cp	r1, r22
    5ce8:	17 06       	cpc	r1, r23
    5cea:	18 06       	cpc	r1, r24
    5cec:	99 1f       	adc	r25, r25
    5cee:	f1 cf       	rjmp	.-30     	; 0x5cd2 <__fp_splitA+0xc>
    5cf0:	86 95       	lsr	r24
    5cf2:	71 05       	cpc	r23, r1
    5cf4:	61 05       	cpc	r22, r1
    5cf6:	08 94       	sec
    5cf8:	08 95       	ret

00005cfa <__fp_zero>:
    5cfa:	e8 94       	clt

00005cfc <__fp_szero>:
    5cfc:	bb 27       	eor	r27, r27
    5cfe:	66 27       	eor	r22, r22
    5d00:	77 27       	eor	r23, r23
    5d02:	cb 01       	movw	r24, r22
    5d04:	97 f9       	bld	r25, 7
    5d06:	08 95       	ret

00005d08 <__mulsf3>:
    5d08:	0b d0       	rcall	.+22     	; 0x5d20 <__mulsf3x>
    5d0a:	c4 cf       	rjmp	.-120    	; 0x5c94 <__fp_round>
    5d0c:	b5 df       	rcall	.-150    	; 0x5c78 <__fp_pscA>
    5d0e:	28 f0       	brcs	.+10     	; 0x5d1a <__mulsf3+0x12>
    5d10:	ba df       	rcall	.-140    	; 0x5c86 <__fp_pscB>
    5d12:	18 f0       	brcs	.+6      	; 0x5d1a <__mulsf3+0x12>
    5d14:	95 23       	and	r25, r21
    5d16:	09 f0       	breq	.+2      	; 0x5d1a <__mulsf3+0x12>
    5d18:	a6 cf       	rjmp	.-180    	; 0x5c66 <__fp_inf>
    5d1a:	ab cf       	rjmp	.-170    	; 0x5c72 <__fp_nan>
    5d1c:	11 24       	eor	r1, r1
    5d1e:	ee cf       	rjmp	.-36     	; 0x5cfc <__fp_szero>

00005d20 <__mulsf3x>:
    5d20:	ca df       	rcall	.-108    	; 0x5cb6 <__fp_split3>
    5d22:	a0 f3       	brcs	.-24     	; 0x5d0c <__mulsf3+0x4>

00005d24 <__mulsf3_pse>:
    5d24:	95 9f       	mul	r25, r21
    5d26:	d1 f3       	breq	.-12     	; 0x5d1c <__mulsf3+0x14>
    5d28:	95 0f       	add	r25, r21
    5d2a:	50 e0       	ldi	r21, 0x00	; 0
    5d2c:	55 1f       	adc	r21, r21
    5d2e:	62 9f       	mul	r22, r18
    5d30:	f0 01       	movw	r30, r0
    5d32:	72 9f       	mul	r23, r18
    5d34:	bb 27       	eor	r27, r27
    5d36:	f0 0d       	add	r31, r0
    5d38:	b1 1d       	adc	r27, r1
    5d3a:	63 9f       	mul	r22, r19
    5d3c:	aa 27       	eor	r26, r26
    5d3e:	f0 0d       	add	r31, r0
    5d40:	b1 1d       	adc	r27, r1
    5d42:	aa 1f       	adc	r26, r26
    5d44:	64 9f       	mul	r22, r20
    5d46:	66 27       	eor	r22, r22
    5d48:	b0 0d       	add	r27, r0
    5d4a:	a1 1d       	adc	r26, r1
    5d4c:	66 1f       	adc	r22, r22
    5d4e:	82 9f       	mul	r24, r18
    5d50:	22 27       	eor	r18, r18
    5d52:	b0 0d       	add	r27, r0
    5d54:	a1 1d       	adc	r26, r1
    5d56:	62 1f       	adc	r22, r18
    5d58:	73 9f       	mul	r23, r19
    5d5a:	b0 0d       	add	r27, r0
    5d5c:	a1 1d       	adc	r26, r1
    5d5e:	62 1f       	adc	r22, r18
    5d60:	83 9f       	mul	r24, r19
    5d62:	a0 0d       	add	r26, r0
    5d64:	61 1d       	adc	r22, r1
    5d66:	22 1f       	adc	r18, r18
    5d68:	74 9f       	mul	r23, r20
    5d6a:	33 27       	eor	r19, r19
    5d6c:	a0 0d       	add	r26, r0
    5d6e:	61 1d       	adc	r22, r1
    5d70:	23 1f       	adc	r18, r19
    5d72:	84 9f       	mul	r24, r20
    5d74:	60 0d       	add	r22, r0
    5d76:	21 1d       	adc	r18, r1
    5d78:	82 2f       	mov	r24, r18
    5d7a:	76 2f       	mov	r23, r22
    5d7c:	6a 2f       	mov	r22, r26
    5d7e:	11 24       	eor	r1, r1
    5d80:	9f 57       	subi	r25, 0x7F	; 127
    5d82:	50 40       	sbci	r21, 0x00	; 0
    5d84:	8a f0       	brmi	.+34     	; 0x5da8 <__mulsf3_pse+0x84>
    5d86:	e1 f0       	breq	.+56     	; 0x5dc0 <__mulsf3_pse+0x9c>
    5d88:	88 23       	and	r24, r24
    5d8a:	4a f0       	brmi	.+18     	; 0x5d9e <__mulsf3_pse+0x7a>
    5d8c:	ee 0f       	add	r30, r30
    5d8e:	ff 1f       	adc	r31, r31
    5d90:	bb 1f       	adc	r27, r27
    5d92:	66 1f       	adc	r22, r22
    5d94:	77 1f       	adc	r23, r23
    5d96:	88 1f       	adc	r24, r24
    5d98:	91 50       	subi	r25, 0x01	; 1
    5d9a:	50 40       	sbci	r21, 0x00	; 0
    5d9c:	a9 f7       	brne	.-22     	; 0x5d88 <__mulsf3_pse+0x64>
    5d9e:	9e 3f       	cpi	r25, 0xFE	; 254
    5da0:	51 05       	cpc	r21, r1
    5da2:	70 f0       	brcs	.+28     	; 0x5dc0 <__mulsf3_pse+0x9c>
    5da4:	60 cf       	rjmp	.-320    	; 0x5c66 <__fp_inf>
    5da6:	aa cf       	rjmp	.-172    	; 0x5cfc <__fp_szero>
    5da8:	5f 3f       	cpi	r21, 0xFF	; 255
    5daa:	ec f3       	brlt	.-6      	; 0x5da6 <__mulsf3_pse+0x82>
    5dac:	98 3e       	cpi	r25, 0xE8	; 232
    5dae:	dc f3       	brlt	.-10     	; 0x5da6 <__mulsf3_pse+0x82>
    5db0:	86 95       	lsr	r24
    5db2:	77 95       	ror	r23
    5db4:	67 95       	ror	r22
    5db6:	b7 95       	ror	r27
    5db8:	f7 95       	ror	r31
    5dba:	e7 95       	ror	r30
    5dbc:	9f 5f       	subi	r25, 0xFF	; 255
    5dbe:	c1 f7       	brne	.-16     	; 0x5db0 <__mulsf3_pse+0x8c>
    5dc0:	fe 2b       	or	r31, r30
    5dc2:	88 0f       	add	r24, r24
    5dc4:	91 1d       	adc	r25, r1
    5dc6:	96 95       	lsr	r25
    5dc8:	87 95       	ror	r24
    5dca:	97 f9       	bld	r25, 7
    5dcc:	08 95       	ret

00005dce <utoa>:
    5dce:	fb 01       	movw	r30, r22
    5dd0:	9f 01       	movw	r18, r30
    5dd2:	42 30       	cpi	r20, 0x02	; 2
    5dd4:	74 f0       	brlt	.+28     	; 0x5df2 <utoa+0x24>
    5dd6:	45 32       	cpi	r20, 0x25	; 37
    5dd8:	64 f4       	brge	.+24     	; 0x5df2 <utoa+0x24>
    5dda:	64 2f       	mov	r22, r20
    5ddc:	77 27       	eor	r23, r23
    5dde:	0e 94 5f 2f 	call	0x5ebe	; 0x5ebe <__udivmodhi4>
    5de2:	80 5d       	subi	r24, 0xD0	; 208
    5de4:	8a 33       	cpi	r24, 0x3A	; 58
    5de6:	0c f0       	brlt	.+2      	; 0x5dea <utoa+0x1c>
    5de8:	89 5d       	subi	r24, 0xD9	; 217
    5dea:	81 93       	st	Z+, r24
    5dec:	cb 01       	movw	r24, r22
    5dee:	00 97       	sbiw	r24, 0x00	; 0
    5df0:	a1 f7       	brne	.-24     	; 0x5dda <utoa+0xc>
    5df2:	10 82       	st	Z, r1
    5df4:	c9 01       	movw	r24, r18
    5df6:	0c 94 4f 2f 	jmp	0x5e9e	; 0x5e9e <strrev>

00005dfa <__eerd_block_x128a1>:
    5dfa:	e0 ec       	ldi	r30, 0xC0	; 192
    5dfc:	f1 e0       	ldi	r31, 0x01	; 1
    5dfe:	a7 85       	ldd	r26, Z+15	; 0x0f
    5e00:	a7 fd       	sbrc	r26, 7
    5e02:	fd cf       	rjmp	.-6      	; 0x5dfe <__eerd_block_x128a1+0x4>
    5e04:	a4 85       	ldd	r26, Z+12	; 0x0c
    5e06:	a8 60       	ori	r26, 0x08	; 8
    5e08:	a4 87       	std	Z+12, r26	; 0x0c
    5e0a:	60 50       	subi	r22, 0x00	; 0
    5e0c:	70 4f       	sbci	r23, 0xF0	; 240
    5e0e:	0c 94 46 2f 	jmp	0x5e8c	; 0x5e8c <memcpy>

00005e12 <__eerd_byte_x128a1>:
    5e12:	03 d0       	rcall	.+6      	; 0x5e1a <eeprom_mapen>
    5e14:	80 81       	ld	r24, Z
    5e16:	99 27       	eor	r25, r25
    5e18:	08 95       	ret

00005e1a <eeprom_mapen>:
    5e1a:	e0 ec       	ldi	r30, 0xC0	; 192
    5e1c:	f1 e0       	ldi	r31, 0x01	; 1
    5e1e:	37 85       	ldd	r19, Z+15	; 0x0f
    5e20:	37 fd       	sbrc	r19, 7
    5e22:	fd cf       	rjmp	.-6      	; 0x5e1e <eeprom_mapen+0x4>
    5e24:	34 85       	ldd	r19, Z+12	; 0x0c
    5e26:	38 60       	ori	r19, 0x08	; 8
    5e28:	34 87       	std	Z+12, r19	; 0x0c
    5e2a:	fc 01       	movw	r30, r24
    5e2c:	e0 50       	subi	r30, 0x00	; 0
    5e2e:	f0 4f       	sbci	r31, 0xF0	; 240
    5e30:	08 95       	ret

00005e32 <__eewr_block_x128a1>:
    5e32:	dc 01       	movw	r26, r24
    5e34:	cb 01       	movw	r24, r22
    5e36:	03 c0       	rjmp	.+6      	; 0x5e3e <__eewr_block_x128a1+0xc>
    5e38:	2d 91       	ld	r18, X+
    5e3a:	0e 94 24 2f 	call	0x5e48	; 0x5e48 <__eewr_r18_x128a1>
    5e3e:	41 50       	subi	r20, 0x01	; 1
    5e40:	50 40       	sbci	r21, 0x00	; 0
    5e42:	d0 f7       	brcc	.-12     	; 0x5e38 <__eewr_block_x128a1+0x6>
    5e44:	08 95       	ret

00005e46 <__eewr_byte_x128a1>:
    5e46:	26 2f       	mov	r18, r22

00005e48 <__eewr_r18_x128a1>:
    5e48:	e0 ec       	ldi	r30, 0xC0	; 192
    5e4a:	f1 e0       	ldi	r31, 0x01	; 1
    5e4c:	37 85       	ldd	r19, Z+15	; 0x0f
    5e4e:	37 fd       	sbrc	r19, 7
    5e50:	fd cf       	rjmp	.-6      	; 0x5e4c <__eewr_r18_x128a1+0x4>
    5e52:	34 85       	ldd	r19, Z+12	; 0x0c
    5e54:	37 7f       	andi	r19, 0xF7	; 247
    5e56:	34 87       	std	Z+12, r19	; 0x0c
    5e58:	37 85       	ldd	r19, Z+15	; 0x0f
    5e5a:	31 ff       	sbrs	r19, 1
    5e5c:	09 c0       	rjmp	.+18     	; 0x5e70 <__eewr_r18_x128a1+0x28>
    5e5e:	36 e3       	ldi	r19, 0x36	; 54
    5e60:	32 87       	std	Z+10, r19	; 0x0a
    5e62:	38 ed       	ldi	r19, 0xD8	; 216
    5e64:	34 bf       	out	0x34, r19	; 52
    5e66:	31 e0       	ldi	r19, 0x01	; 1
    5e68:	33 87       	std	Z+11, r19	; 0x0b
    5e6a:	37 85       	ldd	r19, Z+15	; 0x0f
    5e6c:	37 fd       	sbrc	r19, 7
    5e6e:	fd cf       	rjmp	.-6      	; 0x5e6a <__eewr_r18_x128a1+0x22>
    5e70:	33 e3       	ldi	r19, 0x33	; 51
    5e72:	32 87       	std	Z+10, r19	; 0x0a
    5e74:	80 83       	st	Z, r24
    5e76:	91 83       	std	Z+1, r25	; 0x01
    5e78:	12 82       	std	Z+2, r1	; 0x02
    5e7a:	24 83       	std	Z+4, r18	; 0x04
    5e7c:	25 e3       	ldi	r18, 0x35	; 53
    5e7e:	22 87       	std	Z+10, r18	; 0x0a
    5e80:	28 ed       	ldi	r18, 0xD8	; 216
    5e82:	31 e0       	ldi	r19, 0x01	; 1
    5e84:	24 bf       	out	0x34, r18	; 52
    5e86:	33 87       	std	Z+11, r19	; 0x0b
    5e88:	01 96       	adiw	r24, 0x01	; 1
    5e8a:	08 95       	ret

00005e8c <memcpy>:
    5e8c:	fb 01       	movw	r30, r22
    5e8e:	dc 01       	movw	r26, r24
    5e90:	02 c0       	rjmp	.+4      	; 0x5e96 <memcpy+0xa>
    5e92:	01 90       	ld	r0, Z+
    5e94:	0d 92       	st	X+, r0
    5e96:	41 50       	subi	r20, 0x01	; 1
    5e98:	50 40       	sbci	r21, 0x00	; 0
    5e9a:	d8 f7       	brcc	.-10     	; 0x5e92 <memcpy+0x6>
    5e9c:	08 95       	ret

00005e9e <strrev>:
    5e9e:	dc 01       	movw	r26, r24
    5ea0:	fc 01       	movw	r30, r24
    5ea2:	67 2f       	mov	r22, r23
    5ea4:	71 91       	ld	r23, Z+
    5ea6:	77 23       	and	r23, r23
    5ea8:	e1 f7       	brne	.-8      	; 0x5ea2 <strrev+0x4>
    5eaa:	32 97       	sbiw	r30, 0x02	; 2
    5eac:	04 c0       	rjmp	.+8      	; 0x5eb6 <strrev+0x18>
    5eae:	7c 91       	ld	r23, X
    5eb0:	6d 93       	st	X+, r22
    5eb2:	70 83       	st	Z, r23
    5eb4:	62 91       	ld	r22, -Z
    5eb6:	ae 17       	cp	r26, r30
    5eb8:	bf 07       	cpc	r27, r31
    5eba:	c8 f3       	brcs	.-14     	; 0x5eae <strrev+0x10>
    5ebc:	08 95       	ret

00005ebe <__udivmodhi4>:
    5ebe:	aa 1b       	sub	r26, r26
    5ec0:	bb 1b       	sub	r27, r27
    5ec2:	51 e1       	ldi	r21, 0x11	; 17
    5ec4:	07 c0       	rjmp	.+14     	; 0x5ed4 <__udivmodhi4_ep>

00005ec6 <__udivmodhi4_loop>:
    5ec6:	aa 1f       	adc	r26, r26
    5ec8:	bb 1f       	adc	r27, r27
    5eca:	a6 17       	cp	r26, r22
    5ecc:	b7 07       	cpc	r27, r23
    5ece:	10 f0       	brcs	.+4      	; 0x5ed4 <__udivmodhi4_ep>
    5ed0:	a6 1b       	sub	r26, r22
    5ed2:	b7 0b       	sbc	r27, r23

00005ed4 <__udivmodhi4_ep>:
    5ed4:	88 1f       	adc	r24, r24
    5ed6:	99 1f       	adc	r25, r25
    5ed8:	5a 95       	dec	r21
    5eda:	a9 f7       	brne	.-22     	; 0x5ec6 <__udivmodhi4_loop>
    5edc:	80 95       	com	r24
    5ede:	90 95       	com	r25
    5ee0:	bc 01       	movw	r22, r24
    5ee2:	cd 01       	movw	r24, r26
    5ee4:	08 95       	ret

00005ee6 <_exit>:
    5ee6:	f8 94       	cli

00005ee8 <__stop_program>:
    5ee8:	ff cf       	rjmp	.-2      	; 0x5ee8 <__stop_program>
