
SciPSU4-Firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006050  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000218  00802000  00006050  00006104  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00001cc5  00802218  00802218  0000631c  2**0
                  ALLOC
  3 .eeprom       00000011  00810000  00810000  0000631c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         000025a4  00000000  00000000  00006330  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      0000095f  00000000  00000000  000088d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 00000260  00000000  00000000  00009238  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000774c  00000000  00000000  00009498  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000149a  00000000  00000000  00010be4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00002796  00000000  00000000  0001207e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001108  00000000  00000000  00014814  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001662  00000000  00000000  0001591c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00003e91  00000000  00000000  00016f7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000840  00000000  00000000  0001ae0f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__ctors_end>
       4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
       8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
       c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      10:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      14:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      18:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      1c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      20:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      24:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      28:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      2c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      30:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      34:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      38:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      3c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      40:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      44:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      48:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      4c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      50:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      54:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      58:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      5c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      60:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      64:	0c 94 79 18 	jmp	0x30f2	; 0x30f2 <__vector_25>
      68:	0c 94 0c 1a 	jmp	0x3418	; 0x3418 <__vector_26>
      6c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      70:	0c 94 e7 18 	jmp	0x31ce	; 0x31ce <__vector_28>
      74:	0c 94 69 19 	jmp	0x32d2	; 0x32d2 <__vector_29>
      78:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      7c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      80:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      84:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      88:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      8c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      90:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      94:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      98:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      9c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      a0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      a4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      a8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      ac:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      b0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      b4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      b8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      bc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      c0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      c4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      c8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      cc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      d0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      d4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      d8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      dc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      e0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      e4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      e8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      ec:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      f0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      f4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      f8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      fc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     100:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     104:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     108:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     10c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     110:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     114:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     118:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     11c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     120:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     124:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     128:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     12c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     130:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     134:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     138:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     13c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     140:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     144:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     148:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     14c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     150:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     154:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     158:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     15c:	0c 94 2c 11 	jmp	0x2258	; 0x2258 <__vector_87>
     160:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     164:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     168:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     16c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     170:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     174:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     178:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     17c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     180:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     184:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     188:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     18c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     190:	0c 94 13 13 	jmp	0x2626	; 0x2626 <__vector_100>
     194:	0c 94 7b 13 	jmp	0x26f6	; 0x26f6 <__vector_101>
     198:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     19c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1a0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1a4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1a8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1ac:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1b0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1b4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1b8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1bc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1c0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1c4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1c8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1cc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1d0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1d4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1d8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1dc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1e0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1e4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1e8:	0c 94 a0 1f 	jmp	0x3f40	; 0x3f40 <__vector_122>
     1ec:	0c 94 b4 1d 	jmp	0x3b68	; 0x3b68 <__vector_123>
     1f0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>

000001f4 <__ctors_end>:
     1f4:	11 24       	eor	r1, r1
     1f6:	1f be       	out	0x3f, r1	; 63
     1f8:	cf ef       	ldi	r28, 0xFF	; 255
     1fa:	df e3       	ldi	r29, 0x3F	; 63
     1fc:	de bf       	out	0x3e, r29	; 62
     1fe:	cd bf       	out	0x3d, r28	; 61
     200:	00 e0       	ldi	r16, 0x00	; 0
     202:	0c bf       	out	0x3c, r16	; 60
     204:	18 be       	out	0x38, r1	; 56
     206:	19 be       	out	0x39, r1	; 57
     208:	1a be       	out	0x3a, r1	; 58
     20a:	1b be       	out	0x3b, r1	; 59

0000020c <__do_copy_data>:
     20c:	12 e2       	ldi	r17, 0x22	; 34
     20e:	a0 e0       	ldi	r26, 0x00	; 0
     210:	b0 e2       	ldi	r27, 0x20	; 32
     212:	e0 e5       	ldi	r30, 0x50	; 80
     214:	f0 e6       	ldi	r31, 0x60	; 96
     216:	00 e0       	ldi	r16, 0x00	; 0
     218:	0b bf       	out	0x3b, r16	; 59
     21a:	02 c0       	rjmp	.+4      	; 0x220 <__do_copy_data+0x14>
     21c:	07 90       	elpm	r0, Z+
     21e:	0d 92       	st	X+, r0
     220:	a8 31       	cpi	r26, 0x18	; 24
     222:	b1 07       	cpc	r27, r17
     224:	d9 f7       	brne	.-10     	; 0x21c <__do_copy_data+0x10>

00000226 <__do_clear_bss>:
     226:	1e e3       	ldi	r17, 0x3E	; 62
     228:	a8 e1       	ldi	r26, 0x18	; 24
     22a:	b2 e2       	ldi	r27, 0x22	; 34
     22c:	01 c0       	rjmp	.+2      	; 0x230 <.do_clear_bss_start>

0000022e <.do_clear_bss_loop>:
     22e:	1d 92       	st	X+, r1

00000230 <.do_clear_bss_start>:
     230:	ad 3d       	cpi	r26, 0xDD	; 221
     232:	b1 07       	cpc	r27, r17
     234:	e1 f7       	brne	.-8      	; 0x22e <.do_clear_bss_loop>
     236:	0e 94 52 12 	call	0x24a4	; 0x24a4 <main>
     23a:	0c 94 26 30 	jmp	0x604c	; 0x604c <_exit>

0000023e <__bad_interrupt>:
     23e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000242 <adc_read_cal_byte>:

///http://www.bostonandroid.com/manuals/xmega-precision-adc-howto.html
uint8_t adc_read_cal_byte( uint8_t index ){
	uint8_t result;
	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
     242:	aa ec       	ldi	r26, 0xCA	; 202
     244:	b1 e0       	ldi	r27, 0x01	; 1
     246:	92 e0       	ldi	r25, 0x02	; 2
     248:	9c 93       	st	X, r25
	result = pgm_read_byte(index);
     24a:	e8 2f       	mov	r30, r24
     24c:	f0 e0       	ldi	r31, 0x00	; 0
     24e:	84 91       	lpm	r24, Z
	/* Clean up NVM Command register. */
	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
     250:	1c 92       	st	X, r1
	return( result );
}
     252:	08 95       	ret

00000254 <adc_bank_select>:
//#############################################################
//## ADCs -- OPERATION
//#############################################################

void adc_bank_select(uint8_t which){
	if(which % 2){
     254:	80 ff       	sbrs	r24, 0
     256:	10 c0       	rjmp	.+32     	; 0x278 <adc_bank_select+0x24>
		ADCA.CH0.MUXCTRL = B8(00000000); //CH0 converts from PA0
     258:	e0 e0       	ldi	r30, 0x00	; 0
     25a:	f2 e0       	ldi	r31, 0x02	; 2
     25c:	11 a2       	lds	r17, 0x91
		ADCA.CH1.MUXCTRL = B8(00001000); //CH1 converts from PA1
     25e:	28 e0       	ldi	r18, 0x08	; 8
     260:	21 a7       	lds	r18, 0x71
		ADCA.CH2.MUXCTRL = B8(00010000); //CH2 converts from PA2
     262:	90 e1       	ldi	r25, 0x10	; 16
     264:	91 ab       	sts	0x51, r25
		ADCA.CH3.MUXCTRL = B8(00011000); //CH3 converts from PA3
     266:	88 e1       	ldi	r24, 0x18	; 24
     268:	81 af       	sts	0x71, r24
		ADCB.CH0.MUXCTRL = B8(00000000); //CH0 converts from PB0
     26a:	e0 e4       	ldi	r30, 0x40	; 64
     26c:	f2 e0       	ldi	r31, 0x02	; 2
     26e:	11 a2       	lds	r17, 0x91
		ADCB.CH1.MUXCTRL = B8(00001000); //CH1 converts from PB1
     270:	21 a7       	lds	r18, 0x71
		ADCB.CH2.MUXCTRL = B8(00010000); //CH2 converts from PB2
     272:	91 ab       	sts	0x51, r25
		ADCB.CH3.MUXCTRL = B8(00011000); //CH3 converts from PB3
     274:	81 af       	sts	0x71, r24
     276:	08 95       	ret
	}
	else {
		ADCA.CH0.MUXCTRL = B8(00100000); //CH0 converts from PA4
     278:	e0 e0       	ldi	r30, 0x00	; 0
     27a:	f2 e0       	ldi	r31, 0x02	; 2
     27c:	30 e2       	ldi	r19, 0x20	; 32
     27e:	31 a3       	lds	r19, 0x51
		ADCA.CH1.MUXCTRL = B8(00101000); //CH1 converts from PA5
     280:	28 e2       	ldi	r18, 0x28	; 40
     282:	21 a7       	lds	r18, 0x71
		ADCA.CH2.MUXCTRL = B8(00110000); //CH2 converts from PA6
     284:	90 e3       	ldi	r25, 0x30	; 48
     286:	91 ab       	sts	0x51, r25
		ADCA.CH3.MUXCTRL = B8(00111000); //CH3 converts from PA7
     288:	88 e3       	ldi	r24, 0x38	; 56
     28a:	81 af       	sts	0x71, r24
		ADCB.CH0.MUXCTRL = B8(00100000); //CH0 converts from PB4
     28c:	e0 e4       	ldi	r30, 0x40	; 64
     28e:	f2 e0       	ldi	r31, 0x02	; 2
     290:	31 a3       	lds	r19, 0x51
		ADCB.CH1.MUXCTRL = B8(00101000); //CH1 converts from PB5
     292:	21 a7       	lds	r18, 0x71
		ADCB.CH2.MUXCTRL = B8(00110000); //CH2 converts from PB6
     294:	91 ab       	sts	0x51, r25
		ADCB.CH3.MUXCTRL = B8(00111000); //CH3 converts from PB7	
     296:	81 af       	sts	0x71, r24
     298:	08 95       	ret

0000029a <adc_convert>:
	}
}	

void adc_convert(){
	ADCA.CTRLA |= B8(00111100); //Start conversions on all four channels
     29a:	e0 e0       	ldi	r30, 0x00	; 0
     29c:	f2 e0       	ldi	r31, 0x02	; 2
     29e:	80 81       	ld	r24, Z
     2a0:	8c 63       	ori	r24, 0x3C	; 60
     2a2:	80 83       	st	Z, r24
	ADCB.CTRLA |= B8(00111100); //Start conversions on all four channels
     2a4:	e0 e4       	ldi	r30, 0x40	; 64
     2a6:	f2 e0       	ldi	r31, 0x02	; 2
     2a8:	80 81       	ld	r24, Z
     2aa:	8c 63       	ori	r24, 0x3C	; 60
     2ac:	80 83       	st	Z, r24
}
     2ae:	08 95       	ret

000002b0 <init_adc>:

//#############################################################
//## ADCs -- INITIALIZATION
//#############################################################

void init_adc(){	
     2b0:	cf 92       	push	r12
     2b2:	df 92       	push	r13
     2b4:	ef 92       	push	r14
     2b6:	ff 92       	push	r15
     2b8:	0f 93       	push	r16
     2ba:	1f 93       	push	r17
     2bc:	cf 93       	push	r28
     2be:	df 93       	push	r29
	//ADC A
	ADCA.CALL = adc_read_cal_byte( offsetof(NVM_PROD_SIGNATURES_t, ADCACAL0) );
     2c0:	80 e2       	ldi	r24, 0x20	; 32
     2c2:	0e 94 21 01 	call	0x242	; 0x242 <adc_read_cal_byte>
     2c6:	c0 e0       	ldi	r28, 0x00	; 0
     2c8:	d2 e0       	ldi	r29, 0x02	; 2
     2ca:	8c 87       	std	Y+12, r24	; 0x0c
	ADCA.CALH = adc_read_cal_byte( offsetof(NVM_PROD_SIGNATURES_t, ADCACAL1) );
     2cc:	81 e2       	ldi	r24, 0x21	; 33
     2ce:	0e 94 21 01 	call	0x242	; 0x242 <adc_read_cal_byte>
     2d2:	8d 87       	std	Y+13, r24	; 0x0d
	ADCA.PRESCALER = B8(00000111); //ADC clock = Peripheral clock / 512 (maximum resolution/accuracy)
     2d4:	0f 2e       	mov	r0, r31
     2d6:	f7 e0       	ldi	r31, 0x07	; 7
     2d8:	ef 2e       	mov	r14, r31
     2da:	f0 2d       	mov	r31, r0
     2dc:	ec 82       	std	Y+4, r14	; 0x04
	ADCA.REFCTRL = B8(00010011); //Use AVCC/1.6 = 2.063V as reference (highest allowed); Enable BandGap Reference and Temperature Sensor (internal)
     2de:	0f 2e       	mov	r0, r31
     2e0:	f3 e1       	ldi	r31, 0x13	; 19
     2e2:	df 2e       	mov	r13, r31
     2e4:	f0 2d       	mov	r31, r0
     2e6:	da 82       	std	Y+2, r13	; 0x02
	ADCA.CTRLB = B8(00000110); //12bit-left adjusted; One-shot conversion; unsigned mode;
     2e8:	0f 2e       	mov	r0, r31
     2ea:	f6 e0       	ldi	r31, 0x06	; 6
     2ec:	cf 2e       	mov	r12, r31
     2ee:	f0 2d       	mov	r31, r0
     2f0:	c9 82       	std	Y+1, r12	; 0x01
	ADCA.CTRLA = B8(00000001); //Enable ADC;
     2f2:	ff 24       	eor	r15, r15
     2f4:	f3 94       	inc	r15
     2f6:	f8 82       	st	Y, r15
	ADCA.CH0.CTRL = B8(00000001); //Single ended input mode; No gain
     2f8:	f8 a2       	lds	r31, 0x98
	ADCA.CH1.CTRL = B8(00000001); //Single ended input mode; No gain
     2fa:	f8 a6       	lds	r31, 0xb8
	ADCA.CH2.CTRL = B8(00000001); //Single ended input mode; No gain
     2fc:	f8 aa       	sts	0x98, r31
	ADCA.CH3.CTRL = B8(00000001); //Single ended input mode; No gain
     2fe:	f8 ae       	sts	0xb8, r31
	
	//ADC B
	ADCB.CALL = adc_read_cal_byte( offsetof(NVM_PROD_SIGNATURES_t, ADCBCAL0) );
     300:	84 e2       	ldi	r24, 0x24	; 36
     302:	0e 94 21 01 	call	0x242	; 0x242 <adc_read_cal_byte>
     306:	00 e4       	ldi	r16, 0x40	; 64
     308:	12 e0       	ldi	r17, 0x02	; 2
     30a:	f8 01       	movw	r30, r16
     30c:	84 87       	std	Z+12, r24	; 0x0c
	ADCB.CALH = adc_read_cal_byte( offsetof(NVM_PROD_SIGNATURES_t, ADCBCAL1) );
     30e:	85 e2       	ldi	r24, 0x25	; 37
     310:	0e 94 21 01 	call	0x242	; 0x242 <adc_read_cal_byte>
     314:	f8 01       	movw	r30, r16
     316:	85 87       	std	Z+13, r24	; 0x0d
	ADCB.PRESCALER = B8(00000111); //ADC clock = Peripheral clock / 512 (maximum resolution/accuracy)
     318:	e4 82       	std	Z+4, r14	; 0x04
	ADCB.REFCTRL = B8(00010011); //Use AVCC/1.6 = 2.063V as reference (highest allowed); Enable BandGap Reference and Temperature Sensor (internal)
     31a:	d2 82       	std	Z+2, r13	; 0x02
	ADCB.CTRLB = B8(00000110); //12bit-left adjusted; One-shot conversion; unsigned mode;
     31c:	c1 82       	std	Z+1, r12	; 0x01
	ADCB.CTRLA = B8(00000001); //Enable ADC;
     31e:	f0 82       	st	Z, r15
	ADCB.CH0.CTRL = B8(00000001); //Single ended input mode; No gain
     320:	f0 a2       	lds	r31, 0x90
	ADCB.CH1.CTRL = B8(00000001); //Single ended input mode; No gain
     322:	f0 a6       	lds	r31, 0xb0
	ADCB.CH2.CTRL = B8(00000001); //Single ended input mode; No gain
     324:	f0 aa       	sts	0x90, r31
	ADCB.CH3.CTRL = B8(00000001); //Single ended input mode; No gain
     326:	f0 ae       	sts	0xb0, r31
	
	//STATE
	adc_bank = 0;
     328:	10 92 8a 26 	sts	0x268A, r1
	adc_head = 0;
     32c:	10 92 89 26 	sts	0x2689, r1
	adc_bank_select(adc_bank);
     330:	80 e0       	ldi	r24, 0x00	; 0
     332:	0e 94 2a 01 	call	0x254	; 0x254 <adc_bank_select>
	
	//FLUSH
	ADCA.CTRLA |= 0x02;
     336:	88 81       	ld	r24, Y
     338:	82 60       	ori	r24, 0x02	; 2
     33a:	88 83       	st	Y, r24
	ADCB.CTRLB |= 0x02;
     33c:	f8 01       	movw	r30, r16
     33e:	81 81       	ldd	r24, Z+1	; 0x01
     340:	82 60       	ori	r24, 0x02	; 2
     342:	81 83       	std	Z+1, r24	; 0x01
	adc_convert();
     344:	0e 94 4d 01 	call	0x29a	; 0x29a <adc_convert>
}
     348:	df 91       	pop	r29
     34a:	cf 91       	pop	r28
     34c:	1f 91       	pop	r17
     34e:	0f 91       	pop	r16
     350:	ff 90       	pop	r15
     352:	ef 90       	pop	r14
     354:	df 90       	pop	r13
     356:	cf 90       	pop	r12
     358:	08 95       	ret

0000035a <adc_ftoa>:
//#############################################################
//## ADCs -- DATA PROCESSING
//#############################################################

//Float-to-ASCII: uses scaler to shift position, does not include fractional component, null-terminates result, handles pos & neg numbers
void adc_ftoa(float x, uint16_t scaler, char* result){
     35a:	cf 92       	push	r12
     35c:	df 92       	push	r13
     35e:	ef 92       	push	r14
     360:	ff 92       	push	r15
     362:	cf 93       	push	r28
     364:	df 93       	push	r29
     366:	6b 01       	movw	r12, r22
     368:	7c 01       	movw	r14, r24
     36a:	e9 01       	movw	r28, r18
	x = x * scaler;
     36c:	ba 01       	movw	r22, r20
     36e:	80 e0       	ldi	r24, 0x00	; 0
     370:	90 e0       	ldi	r25, 0x00	; 0
     372:	0e 94 85 2e 	call	0x5d0a	; 0x5d0a <__floatunsisf>
     376:	a7 01       	movw	r20, r14
     378:	96 01       	movw	r18, r12
     37a:	0e 94 37 2f 	call	0x5e6e	; 0x5e6e <__mulsf3>
	utoa((int)x, result, 10);
     37e:	0e 94 54 2e 	call	0x5ca8	; 0x5ca8 <__fixsfsi>
     382:	dc 01       	movw	r26, r24
     384:	cb 01       	movw	r24, r22
     386:	be 01       	movw	r22, r28
     388:	4a e0       	ldi	r20, 0x0A	; 10
     38a:	50 e0       	ldi	r21, 0x00	; 0
     38c:	0e 94 9a 2f 	call	0x5f34	; 0x5f34 <utoa>
}
     390:	df 91       	pop	r29
     392:	cf 91       	pop	r28
     394:	ff 90       	pop	r15
     396:	ef 90       	pop	r14
     398:	df 90       	pop	r13
     39a:	cf 90       	pop	r12
     39c:	08 95       	ret

0000039e <adc_data>:

///result = char[6] = 15324\0 --> 15.324 V or A (don't forget string terminator byte)
void adc_data(uint8_t channel_num, uint8_t measurement_type, char* result){
     39e:	ef 92       	push	r14
     3a0:	ff 92       	push	r15
     3a2:	0f 93       	push	r16
     3a4:	1f 93       	push	r17
     3a6:	cf 93       	push	r28
     3a8:	df 93       	push	r29
     3aa:	7a 01       	movw	r14, r20
		uint16_t summation = 0;
		float voltage;
		
	//Average
		for (uint8_t i=0;i<ADC_NUM_CONVERSIONS;i++){
			summation += adc_results[channel_num][i];
     3ac:	a8 2f       	mov	r26, r24
     3ae:	b0 e0       	ldi	r27, 0x00	; 0
	x = x * scaler;
	utoa((int)x, result, 10);
}

///result = char[6] = 15324\0 --> 15.324 V or A (don't forget string terminator byte)
void adc_data(uint8_t channel_num, uint8_t measurement_type, char* result){
     3b0:	ad 01       	movw	r20, r26
     3b2:	42 95       	swap	r20
     3b4:	52 95       	swap	r21
     3b6:	50 7f       	andi	r21, 0xF0	; 240
     3b8:	54 27       	eor	r21, r20
     3ba:	40 7f       	andi	r20, 0xF0	; 240
     3bc:	54 27       	eor	r21, r20
     3be:	fa 01       	movw	r30, r20
     3c0:	e7 57       	subi	r30, 0x77	; 119
     3c2:	fa 4d       	sbci	r31, 0xDA	; 218
     3c4:	47 56       	subi	r20, 0x67	; 103
     3c6:	5a 4d       	sbci	r21, 0xDA	; 218
	uint16_t current_offset;
	
	//Init
		uint16_t summation = 0;
     3c8:	80 e0       	ldi	r24, 0x00	; 0
     3ca:	90 e0       	ldi	r25, 0x00	; 0
		float voltage;
		
	//Average
		for (uint8_t i=0;i<ADC_NUM_CONVERSIONS;i++){
			summation += adc_results[channel_num][i];
     3cc:	21 91       	ld	r18, Z+
     3ce:	31 91       	ld	r19, Z+
     3d0:	82 0f       	add	r24, r18
     3d2:	93 1f       	adc	r25, r19
	//Init
		uint16_t summation = 0;
		float voltage;
		
	//Average
		for (uint8_t i=0;i<ADC_NUM_CONVERSIONS;i++){
     3d4:	e4 17       	cp	r30, r20
     3d6:	f5 07       	cpc	r31, r21
     3d8:	c9 f7       	brne	.-14     	; 0x3cc <adc_data+0x2e>
			summation += adc_results[channel_num][i];
		}
		summation = summation >> 3; //divide by 8
     3da:	96 95       	lsr	r25
     3dc:	87 95       	ror	r24
     3de:	96 95       	lsr	r25
     3e0:	87 95       	ror	r24
     3e2:	96 95       	lsr	r25
     3e4:	87 95       	ror	r24
		
	//Offset
		switch (measurement_type){
     3e6:	68 36       	cpi	r22, 0x68	; 104
     3e8:	51 f0       	breq	.+20     	; 0x3fe <adc_data+0x60>
     3ea:	6a 36       	cpi	r22, 0x6A	; 106
     3ec:	71 f0       	breq	.+28     	; 0x40a <adc_data+0x6c>
     3ee:	67 36       	cpi	r22, 0x67	; 103
     3f0:	e1 f4       	brne	.+56     	; 0x42a <adc_data+0x8c>
			case VOLTAGE_POS:
				if(summation<CODE_ZERO){summation = 0;}
     3f2:	81 3a       	cpi	r24, 0xA1	; 161
     3f4:	91 05       	cpc	r25, r1
     3f6:	10 f1       	brcs	.+68     	; 0x43c <adc_data+0x9e>
				else{summation -= CODE_ZERO;}
     3f8:	81 5a       	subi	r24, 0xA1	; 161
     3fa:	90 40       	sbci	r25, 0x00	; 0
     3fc:	21 c0       	rjmp	.+66     	; 0x440 <adc_data+0xa2>
				break;
			case VOLTAGE_NEG:
				if(summation<VOLTAGE_NEG_OFFSET){summation = 0;}
     3fe:	84 3b       	cpi	r24, 0xB4	; 180
     400:	91 05       	cpc	r25, r1
     402:	88 f0       	brcs	.+34     	; 0x426 <adc_data+0x88>
				else{summation -= VOLTAGE_NEG_OFFSET;}
     404:	84 5b       	subi	r24, 0xB4	; 180
     406:	90 40       	sbci	r25, 0x00	; 0
     408:	32 c0       	rjmp	.+100    	; 0x46e <adc_data+0xd0>
				break;
			case CURRENT_HI_RES:
				current_offset = adc_current_offset[(channel_num-1)>>1];
     40a:	11 97       	sbiw	r26, 0x01	; 1
     40c:	ae 7f       	andi	r26, 0xFE	; 254
     40e:	a2 5e       	subi	r26, 0xE2	; 226
     410:	bd 4d       	sbci	r27, 0xDD	; 221
     412:	2d 91       	ld	r18, X+
     414:	3c 91       	ld	r19, X
     416:	11 97       	sbiw	r26, 0x01	; 1
				if(summation<current_offset){summation=0;}
     418:	82 17       	cp	r24, r18
     41a:	93 07       	cpc	r25, r19
     41c:	08 f4       	brcc	.+2      	; 0x420 <adc_data+0x82>
     41e:	5a c0       	rjmp	.+180    	; 0x4d4 <adc_data+0x136>
				else{summation -= current_offset;}
     420:	82 1b       	sub	r24, r18
     422:	93 0b       	sbc	r25, r19
     424:	59 c0       	rjmp	.+178    	; 0x4d8 <adc_data+0x13a>
			case VOLTAGE_POS:
				if(summation<CODE_ZERO){summation = 0;}
				else{summation -= CODE_ZERO;}
				break;
			case VOLTAGE_NEG:
				if(summation<VOLTAGE_NEG_OFFSET){summation = 0;}
     426:	80 e0       	ldi	r24, 0x00	; 0
     428:	90 e0       	ldi	r25, 0x00	; 0
				//TODO: add scaler for the low-res mode
				break;
		}
		
	//Format & Return
		switch (measurement_type){
     42a:	68 36       	cpi	r22, 0x68	; 104
     42c:	01 f1       	breq	.+64     	; 0x46e <adc_data+0xd0>
     42e:	6a 36       	cpi	r22, 0x6A	; 106
     430:	09 f4       	brne	.+2      	; 0x434 <adc_data+0x96>
     432:	52 c0       	rjmp	.+164    	; 0x4d8 <adc_data+0x13a>
     434:	67 36       	cpi	r22, 0x67	; 103
     436:	09 f0       	breq	.+2      	; 0x43a <adc_data+0x9c>
     438:	5f c0       	rjmp	.+190    	; 0x4f8 <adc_data+0x15a>
     43a:	02 c0       	rjmp	.+4      	; 0x440 <adc_data+0xa2>
		summation = summation >> 3; //divide by 8
		
	//Offset
		switch (measurement_type){
			case VOLTAGE_POS:
				if(summation<CODE_ZERO){summation = 0;}
     43c:	80 e0       	ldi	r24, 0x00	; 0
     43e:	90 e0       	ldi	r25, 0x00	; 0
		}
		
	//Format & Return
		switch (measurement_type){
			case VOLTAGE_POS:
				voltage = (float)summation * CODE_TO_VOLTS * VOLTAGE_DESCALE_FACTOR;
     440:	bc 01       	movw	r22, r24
     442:	80 e0       	ldi	r24, 0x00	; 0
     444:	90 e0       	ldi	r25, 0x00	; 0
     446:	0e 94 85 2e 	call	0x5d0a	; 0x5d0a <__floatunsisf>
     44a:	27 e9       	ldi	r18, 0x97	; 151
     44c:	38 ea       	ldi	r19, 0xA8	; 168
     44e:	4f ef       	ldi	r20, 0xFF	; 255
     450:	59 e3       	ldi	r21, 0x39	; 57
     452:	0e 94 37 2f 	call	0x5e6e	; 0x5e6e <__mulsf3>
     456:	25 e8       	ldi	r18, 0x85	; 133
     458:	3b ee       	ldi	r19, 0xEB	; 235
     45a:	41 e5       	ldi	r20, 0x51	; 81
     45c:	51 e4       	ldi	r21, 0x41	; 65
     45e:	0e 94 37 2f 	call	0x5e6e	; 0x5e6e <__mulsf3>
				adc_ftoa(voltage, 100, result);
     462:	44 e6       	ldi	r20, 0x64	; 100
     464:	50 e0       	ldi	r21, 0x00	; 0
     466:	97 01       	movw	r18, r14
     468:	0e 94 ad 01 	call	0x35a	; 0x35a <adc_ftoa>
				return;
     46c:	45 c0       	rjmp	.+138    	; 0x4f8 <adc_data+0x15a>
			case VOLTAGE_NEG:
				voltage = (float)summation * CODE_TO_VOLTS * VOLTAGE_DESCALE_FACTOR;
     46e:	bc 01       	movw	r22, r24
     470:	80 e0       	ldi	r24, 0x00	; 0
     472:	90 e0       	ldi	r25, 0x00	; 0
     474:	0e 94 85 2e 	call	0x5d0a	; 0x5d0a <__floatunsisf>
     478:	27 e9       	ldi	r18, 0x97	; 151
     47a:	38 ea       	ldi	r19, 0xA8	; 168
     47c:	4f ef       	ldi	r20, 0xFF	; 255
     47e:	59 e3       	ldi	r21, 0x39	; 57
     480:	0e 94 37 2f 	call	0x5e6e	; 0x5e6e <__mulsf3>
     484:	25 e8       	ldi	r18, 0x85	; 133
     486:	3b ee       	ldi	r19, 0xEB	; 235
     488:	41 e5       	ldi	r20, 0x51	; 81
     48a:	51 e4       	ldi	r21, 0x41	; 65
     48c:	0e 94 37 2f 	call	0x5e6e	; 0x5e6e <__mulsf3>
     490:	06 2f       	mov	r16, r22
     492:	17 2f       	mov	r17, r23
     494:	d8 2f       	mov	r29, r24
     496:	c9 2f       	mov	r28, r25
				if (voltage < 2.2) voltage = 0; //blank anything inside the amp offset (can't actually offset this because it adds huge error to the linear fit)
     498:	86 2f       	mov	r24, r22
     49a:	91 2f       	mov	r25, r17
     49c:	ad 2f       	mov	r26, r29
     49e:	bc 2f       	mov	r27, r28
     4a0:	bc 01       	movw	r22, r24
     4a2:	cd 01       	movw	r24, r26
     4a4:	2d ec       	ldi	r18, 0xCD	; 205
     4a6:	3c ec       	ldi	r19, 0xCC	; 204
     4a8:	4c e0       	ldi	r20, 0x0C	; 12
     4aa:	50 e4       	ldi	r21, 0x40	; 64
     4ac:	0e 94 e8 2d 	call	0x5bd0	; 0x5bd0 <__cmpsf2>
     4b0:	88 23       	and	r24, r24
     4b2:	24 f4       	brge	.+8      	; 0x4bc <adc_data+0x11e>
     4b4:	00 e0       	ldi	r16, 0x00	; 0
     4b6:	10 e0       	ldi	r17, 0x00	; 0
     4b8:	d0 e0       	ldi	r29, 0x00	; 0
     4ba:	c0 e0       	ldi	r28, 0x00	; 0
				adc_ftoa(voltage, 100, result);
     4bc:	80 2f       	mov	r24, r16
     4be:	91 2f       	mov	r25, r17
     4c0:	ad 2f       	mov	r26, r29
     4c2:	bc 2f       	mov	r27, r28
     4c4:	bc 01       	movw	r22, r24
     4c6:	cd 01       	movw	r24, r26
     4c8:	44 e6       	ldi	r20, 0x64	; 100
     4ca:	50 e0       	ldi	r21, 0x00	; 0
     4cc:	97 01       	movw	r18, r14
     4ce:	0e 94 ad 01 	call	0x35a	; 0x35a <adc_ftoa>
				return;
     4d2:	12 c0       	rjmp	.+36     	; 0x4f8 <adc_data+0x15a>
				if(summation<VOLTAGE_NEG_OFFSET){summation = 0;}
				else{summation -= VOLTAGE_NEG_OFFSET;}
				break;
			case CURRENT_HI_RES:
				current_offset = adc_current_offset[(channel_num-1)>>1];
				if(summation<current_offset){summation=0;}
     4d4:	80 e0       	ldi	r24, 0x00	; 0
     4d6:	90 e0       	ldi	r25, 0x00	; 0
				voltage = (float)summation * CODE_TO_VOLTS * VOLTAGE_DESCALE_FACTOR;
				if (voltage < 2.2) voltage = 0; //blank anything inside the amp offset (can't actually offset this because it adds huge error to the linear fit)
				adc_ftoa(voltage, 100, result);
				return;
			case CURRENT_HI_RES:
				adc_ftoa((float)summation * CODE_TO_AMPS, 1000, result);
     4d8:	bc 01       	movw	r22, r24
     4da:	80 e0       	ldi	r24, 0x00	; 0
     4dc:	90 e0       	ldi	r25, 0x00	; 0
     4de:	0e 94 85 2e 	call	0x5d0a	; 0x5d0a <__floatunsisf>
     4e2:	23 e7       	ldi	r18, 0x73	; 115
     4e4:	30 e3       	ldi	r19, 0x30	; 48
     4e6:	4b e1       	ldi	r20, 0x1B	; 27
     4e8:	5a e3       	ldi	r21, 0x3A	; 58
     4ea:	0e 94 37 2f 	call	0x5e6e	; 0x5e6e <__mulsf3>
     4ee:	48 ee       	ldi	r20, 0xE8	; 232
     4f0:	53 e0       	ldi	r21, 0x03	; 3
     4f2:	97 01       	movw	r18, r14
     4f4:	0e 94 ad 01 	call	0x35a	; 0x35a <adc_ftoa>
				return;
			case CURRENT_LO_RES:
				//TODO: add scaler for the low-res mode
				return;
		}
}
     4f8:	df 91       	pop	r29
     4fa:	cf 91       	pop	r28
     4fc:	1f 91       	pop	r17
     4fe:	0f 91       	pop	r16
     500:	ff 90       	pop	r15
     502:	ef 90       	pop	r14
     504:	08 95       	ret

00000506 <adc_max>:

//Returns the maximum value seen in the buffer for the specified channel
uint16_t adc_max(uint8_t channel_num){
	uint16_t maxValue = 0;
	for(uint8_t i=0;i<ADC_NUM_CONVERSIONS;i++){
		if (adc_results[channel_num][i]>maxValue){maxValue=adc_results[channel_num][i];};
     506:	48 2f       	mov	r20, r24
     508:	50 e0       	ldi	r21, 0x00	; 0
				return;
		}
}

//Returns the maximum value seen in the buffer for the specified channel
uint16_t adc_max(uint8_t channel_num){
     50a:	42 95       	swap	r20
     50c:	52 95       	swap	r21
     50e:	50 7f       	andi	r21, 0xF0	; 240
     510:	54 27       	eor	r21, r20
     512:	40 7f       	andi	r20, 0xF0	; 240
     514:	54 27       	eor	r21, r20
     516:	fa 01       	movw	r30, r20
     518:	e7 57       	subi	r30, 0x77	; 119
     51a:	fa 4d       	sbci	r31, 0xDA	; 218
     51c:	47 56       	subi	r20, 0x67	; 103
     51e:	5a 4d       	sbci	r21, 0xDA	; 218
	uint16_t maxValue = 0;
     520:	20 e0       	ldi	r18, 0x00	; 0
     522:	30 e0       	ldi	r19, 0x00	; 0
	for(uint8_t i=0;i<ADC_NUM_CONVERSIONS;i++){
		if (adc_results[channel_num][i]>maxValue){maxValue=adc_results[channel_num][i];};
     524:	81 91       	ld	r24, Z+
     526:	91 91       	ld	r25, Z+
     528:	28 17       	cp	r18, r24
     52a:	39 07       	cpc	r19, r25
     52c:	08 f4       	brcc	.+2      	; 0x530 <adc_max+0x2a>
     52e:	9c 01       	movw	r18, r24
}

//Returns the maximum value seen in the buffer for the specified channel
uint16_t adc_max(uint8_t channel_num){
	uint16_t maxValue = 0;
	for(uint8_t i=0;i<ADC_NUM_CONVERSIONS;i++){
     530:	e4 17       	cp	r30, r20
     532:	f5 07       	cpc	r31, r21
     534:	b9 f7       	brne	.-18     	; 0x524 <adc_max+0x1e>
		if (adc_results[channel_num][i]>maxValue){maxValue=adc_results[channel_num][i];};
	}		
	return maxValue;
}
     536:	82 2f       	mov	r24, r18
     538:	93 2f       	mov	r25, r19
     53a:	08 95       	ret

0000053c <adjust>:
//## ADCs -- SERVICE
//#############################################################

uint16_t adjust(uint16_t theValue){
	uint16_t working = theValue;
	working = theValue >> 4;
     53c:	92 95       	swap	r25
     53e:	82 95       	swap	r24
     540:	8f 70       	andi	r24, 0x0F	; 15
     542:	89 27       	eor	r24, r25
     544:	9f 70       	andi	r25, 0x0F	; 15
     546:	89 27       	eor	r24, r25
	if (working < CODE_ZERO){working = CODE_ZERO;}; //clip on overflow
     548:	81 3a       	cpi	r24, 0xA1	; 161
     54a:	91 05       	cpc	r25, r1
     54c:	10 f4       	brcc	.+4      	; 0x552 <adjust+0x16>
     54e:	81 ea       	ldi	r24, 0xA1	; 161
     550:	90 e0       	ldi	r25, 0x00	; 0
	return working;
}
     552:	08 95       	ret

00000554 <service_adc>:

// Implemented with polling for conversion complete
void service_adc(){	
     554:	df 92       	push	r13
     556:	ef 92       	push	r14
     558:	ff 92       	push	r15
     55a:	0f 93       	push	r16
     55c:	1f 93       	push	r17
     55e:	cf 93       	push	r28
     560:	df 93       	push	r29
	//Did all conversions complete?
	if ((ADCA.INTFLAGS == 0x0F) && (ADCB.INTFLAGS == 0x0F)){
     562:	e0 e0       	ldi	r30, 0x00	; 0
     564:	f2 e0       	ldi	r31, 0x02	; 2
     566:	86 81       	ldd	r24, Z+6	; 0x06
     568:	8f 30       	cpi	r24, 0x0F	; 15
     56a:	09 f0       	breq	.+2      	; 0x56e <service_adc+0x1a>
     56c:	16 c1       	rjmp	.+556    	; 0x79a <service_adc+0x246>
     56e:	e0 e4       	ldi	r30, 0x40	; 64
     570:	f2 e0       	ldi	r31, 0x02	; 2
     572:	86 81       	ldd	r24, Z+6	; 0x06
     574:	8f 30       	cpi	r24, 0x0F	; 15
     576:	09 f0       	breq	.+2      	; 0x57a <service_adc+0x26>
     578:	10 c1       	rjmp	.+544    	; 0x79a <service_adc+0x246>
		//Write Results
		if(adc_bank % 2){
     57a:	80 91 8a 26 	lds	r24, 0x268A
     57e:	80 ff       	sbrs	r24, 0
     580:	71 c0       	rjmp	.+226    	; 0x664 <service_adc+0x110>
			//lower bank
			adc_results[0][adc_head] = adjust(ADCA.CH0RES); //PSU Channel A
     582:	00 91 89 26 	lds	r16, 0x2689
     586:	10 e0       	ldi	r17, 0x00	; 0
     588:	c0 e0       	ldi	r28, 0x00	; 0
     58a:	d2 e0       	ldi	r29, 0x02	; 2
     58c:	88 89       	ldd	r24, Y+16	; 0x10
     58e:	99 89       	ldd	r25, Y+17	; 0x11
     590:	0e 94 9e 02 	call	0x53c	; 0x53c <adjust>
     594:	0f 2e       	mov	r0, r31
     596:	f9 e8       	ldi	r31, 0x89	; 137
     598:	ef 2e       	mov	r14, r31
     59a:	f5 e2       	ldi	r31, 0x25	; 37
     59c:	ff 2e       	mov	r15, r31
     59e:	f0 2d       	mov	r31, r0
     5a0:	f8 01       	movw	r30, r16
     5a2:	ee 0f       	add	r30, r30
     5a4:	ff 1f       	adc	r31, r31
     5a6:	ee 0d       	add	r30, r14
     5a8:	ff 1d       	adc	r31, r15
     5aa:	80 83       	st	Z, r24
     5ac:	91 83       	std	Z+1, r25	; 0x01
			adc_results[1][adc_head] = adjust(ADCA.CH1RES);
     5ae:	8a 89       	ldd	r24, Y+18	; 0x12
     5b0:	9b 89       	ldd	r25, Y+19	; 0x13
     5b2:	0e 94 9e 02 	call	0x53c	; 0x53c <adjust>
     5b6:	f8 01       	movw	r30, r16
     5b8:	38 96       	adiw	r30, 0x08	; 8
     5ba:	ee 0f       	add	r30, r30
     5bc:	ff 1f       	adc	r31, r31
     5be:	ee 0d       	add	r30, r14
     5c0:	ff 1d       	adc	r31, r15
     5c2:	80 83       	st	Z, r24
     5c4:	91 83       	std	Z+1, r25	; 0x01
			adc_results[2][adc_head] = adjust(ADCA.CH2RES);
     5c6:	8c 89       	ldd	r24, Y+20	; 0x14
     5c8:	9d 89       	ldd	r25, Y+21	; 0x15
     5ca:	0e 94 9e 02 	call	0x53c	; 0x53c <adjust>
     5ce:	f8 01       	movw	r30, r16
     5d0:	70 96       	adiw	r30, 0x10	; 16
     5d2:	ee 0f       	add	r30, r30
     5d4:	ff 1f       	adc	r31, r31
     5d6:	ee 0d       	add	r30, r14
     5d8:	ff 1d       	adc	r31, r15
     5da:	80 83       	st	Z, r24
     5dc:	91 83       	std	Z+1, r25	; 0x01
			adc_results[3][adc_head] = adjust(ADCA.CH3RES);
     5de:	8e 89       	ldd	r24, Y+22	; 0x16
     5e0:	9f 89       	ldd	r25, Y+23	; 0x17
     5e2:	0e 94 9e 02 	call	0x53c	; 0x53c <adjust>
     5e6:	f8 01       	movw	r30, r16
     5e8:	78 96       	adiw	r30, 0x18	; 24
     5ea:	ee 0f       	add	r30, r30
     5ec:	ff 1f       	adc	r31, r31
     5ee:	ee 0d       	add	r30, r14
     5f0:	ff 1d       	adc	r31, r15
     5f2:	80 83       	st	Z, r24
     5f4:	91 83       	std	Z+1, r25	; 0x01
			adc_results[8][adc_head] = adjust(ADCB.CH0.RES); //PSU Channel C
     5f6:	c0 e4       	ldi	r28, 0x40	; 64
     5f8:	d2 e0       	ldi	r29, 0x02	; 2
     5fa:	8c a1       	lds	r24, 0x4c
     5fc:	9d a1       	lds	r25, 0x4d
     5fe:	0e 94 9e 02 	call	0x53c	; 0x53c <adjust>
     602:	f8 01       	movw	r30, r16
     604:	e0 5c       	subi	r30, 0xC0	; 192
     606:	ff 4f       	sbci	r31, 0xFF	; 255
     608:	ee 0f       	add	r30, r30
     60a:	ff 1f       	adc	r31, r31
     60c:	ee 0d       	add	r30, r14
     60e:	ff 1d       	adc	r31, r15
     610:	80 83       	st	Z, r24
     612:	91 83       	std	Z+1, r25	; 0x01
			adc_results[9][adc_head] = adjust(ADCB.CH1.RES);
     614:	8c a5       	lds	r24, 0x6c
     616:	9d a5       	lds	r25, 0x6d
     618:	0e 94 9e 02 	call	0x53c	; 0x53c <adjust>
     61c:	f8 01       	movw	r30, r16
     61e:	e8 5b       	subi	r30, 0xB8	; 184
     620:	ff 4f       	sbci	r31, 0xFF	; 255
     622:	ee 0f       	add	r30, r30
     624:	ff 1f       	adc	r31, r31
     626:	ee 0d       	add	r30, r14
     628:	ff 1d       	adc	r31, r15
     62a:	80 83       	st	Z, r24
     62c:	91 83       	std	Z+1, r25	; 0x01
			adc_results[10][adc_head] = adjust(ADCB.CH2.RES);
     62e:	8c a9       	sts	0x4c, r24
     630:	9d a9       	sts	0x4d, r25
     632:	0e 94 9e 02 	call	0x53c	; 0x53c <adjust>
     636:	f8 01       	movw	r30, r16
     638:	e0 5b       	subi	r30, 0xB0	; 176
     63a:	ff 4f       	sbci	r31, 0xFF	; 255
     63c:	ee 0f       	add	r30, r30
     63e:	ff 1f       	adc	r31, r31
     640:	ee 0d       	add	r30, r14
     642:	ff 1d       	adc	r31, r15
     644:	80 83       	st	Z, r24
     646:	91 83       	std	Z+1, r25	; 0x01
			adc_results[11][adc_head] = adjust(ADCB.CH3.RES);
     648:	8c ad       	sts	0x6c, r24
     64a:	9d ad       	sts	0x6d, r25
     64c:	0e 94 9e 02 	call	0x53c	; 0x53c <adjust>
     650:	08 5a       	subi	r16, 0xA8	; 168
     652:	1f 4f       	sbci	r17, 0xFF	; 255
     654:	00 0f       	add	r16, r16
     656:	11 1f       	adc	r17, r17
     658:	e0 0e       	add	r14, r16
     65a:	f1 1e       	adc	r15, r17
     65c:	f7 01       	movw	r30, r14
     65e:	80 83       	st	Z, r24
     660:	91 83       	std	Z+1, r25	; 0x01
     662:	7a c0       	rjmp	.+244    	; 0x758 <service_adc+0x204>
		}
		else {
			//upper bank
			adc_results[4][adc_head] = adjust(ADCA.CH0.RES); //PSU Channel B
     664:	d0 90 89 26 	lds	r13, 0x2689
     668:	0d 2d       	mov	r16, r13
     66a:	10 e0       	ldi	r17, 0x00	; 0
     66c:	c0 e0       	ldi	r28, 0x00	; 0
     66e:	d2 e0       	ldi	r29, 0x02	; 2
     670:	8c a1       	lds	r24, 0x4c
     672:	9d a1       	lds	r25, 0x4d
     674:	0e 94 9e 02 	call	0x53c	; 0x53c <adjust>
     678:	f8 01       	movw	r30, r16
     67a:	b0 96       	adiw	r30, 0x20	; 32
     67c:	0f 2e       	mov	r0, r31
     67e:	f9 e8       	ldi	r31, 0x89	; 137
     680:	ef 2e       	mov	r14, r31
     682:	f5 e2       	ldi	r31, 0x25	; 37
     684:	ff 2e       	mov	r15, r31
     686:	f0 2d       	mov	r31, r0
     688:	ee 0f       	add	r30, r30
     68a:	ff 1f       	adc	r31, r31
     68c:	ee 0d       	add	r30, r14
     68e:	ff 1d       	adc	r31, r15
     690:	80 83       	st	Z, r24
     692:	91 83       	std	Z+1, r25	; 0x01
			adc_results[5][adc_head] = adjust(ADCA.CH1.RES);
     694:	8c a5       	lds	r24, 0x6c
     696:	9d a5       	lds	r25, 0x6d
     698:	0e 94 9e 02 	call	0x53c	; 0x53c <adjust>
     69c:	f8 01       	movw	r30, r16
     69e:	b8 96       	adiw	r30, 0x28	; 40
     6a0:	ee 0f       	add	r30, r30
     6a2:	ff 1f       	adc	r31, r31
     6a4:	ee 0d       	add	r30, r14
     6a6:	ff 1d       	adc	r31, r15
     6a8:	80 83       	st	Z, r24
     6aa:	91 83       	std	Z+1, r25	; 0x01
			adc_results[6][adc_head] = adjust(ADCA.CH2.RES);
     6ac:	8c a9       	sts	0x4c, r24
     6ae:	9d a9       	sts	0x4d, r25
     6b0:	0e 94 9e 02 	call	0x53c	; 0x53c <adjust>
     6b4:	f8 01       	movw	r30, r16
     6b6:	f0 96       	adiw	r30, 0x30	; 48
     6b8:	ee 0f       	add	r30, r30
     6ba:	ff 1f       	adc	r31, r31
     6bc:	ee 0d       	add	r30, r14
     6be:	ff 1d       	adc	r31, r15
     6c0:	80 83       	st	Z, r24
     6c2:	91 83       	std	Z+1, r25	; 0x01
			adc_results[7][adc_head] = adjust(ADCA.CH3.RES);
     6c4:	8c ad       	sts	0x6c, r24
     6c6:	9d ad       	sts	0x6d, r25
     6c8:	0e 94 9e 02 	call	0x53c	; 0x53c <adjust>
     6cc:	f8 01       	movw	r30, r16
     6ce:	f8 96       	adiw	r30, 0x38	; 56
     6d0:	ee 0f       	add	r30, r30
     6d2:	ff 1f       	adc	r31, r31
     6d4:	ee 0d       	add	r30, r14
     6d6:	ff 1d       	adc	r31, r15
     6d8:	80 83       	st	Z, r24
     6da:	91 83       	std	Z+1, r25	; 0x01
			adc_results[12][adc_head] = adjust(ADCB.CH0.RES); //PSU Channel D
     6dc:	c0 e4       	ldi	r28, 0x40	; 64
     6de:	d2 e0       	ldi	r29, 0x02	; 2
     6e0:	8c a1       	lds	r24, 0x4c
     6e2:	9d a1       	lds	r25, 0x4d
     6e4:	0e 94 9e 02 	call	0x53c	; 0x53c <adjust>
     6e8:	f8 01       	movw	r30, r16
     6ea:	e0 5a       	subi	r30, 0xA0	; 160
     6ec:	ff 4f       	sbci	r31, 0xFF	; 255
     6ee:	ee 0f       	add	r30, r30
     6f0:	ff 1f       	adc	r31, r31
     6f2:	ee 0d       	add	r30, r14
     6f4:	ff 1d       	adc	r31, r15
     6f6:	80 83       	st	Z, r24
     6f8:	91 83       	std	Z+1, r25	; 0x01
			adc_results[13][adc_head] = adjust(ADCB.CH1RES);
     6fa:	8a 89       	ldd	r24, Y+18	; 0x12
     6fc:	9b 89       	ldd	r25, Y+19	; 0x13
     6fe:	0e 94 9e 02 	call	0x53c	; 0x53c <adjust>
     702:	f8 01       	movw	r30, r16
     704:	e8 59       	subi	r30, 0x98	; 152
     706:	ff 4f       	sbci	r31, 0xFF	; 255
     708:	ee 0f       	add	r30, r30
     70a:	ff 1f       	adc	r31, r31
     70c:	ee 0d       	add	r30, r14
     70e:	ff 1d       	adc	r31, r15
     710:	80 83       	st	Z, r24
     712:	91 83       	std	Z+1, r25	; 0x01
			adc_results[14][adc_head] = adjust(ADCB.CH2RES);
     714:	8c 89       	ldd	r24, Y+20	; 0x14
     716:	9d 89       	ldd	r25, Y+21	; 0x15
     718:	0e 94 9e 02 	call	0x53c	; 0x53c <adjust>
     71c:	f8 01       	movw	r30, r16
     71e:	e0 59       	subi	r30, 0x90	; 144
     720:	ff 4f       	sbci	r31, 0xFF	; 255
     722:	ee 0f       	add	r30, r30
     724:	ff 1f       	adc	r31, r31
     726:	ee 0d       	add	r30, r14
     728:	ff 1d       	adc	r31, r15
     72a:	80 83       	st	Z, r24
     72c:	91 83       	std	Z+1, r25	; 0x01
			adc_results[15][adc_head] = adjust(ADCB.CH3RES);
     72e:	8e 89       	ldd	r24, Y+22	; 0x16
     730:	9f 89       	ldd	r25, Y+23	; 0x17
     732:	0e 94 9e 02 	call	0x53c	; 0x53c <adjust>
     736:	08 58       	subi	r16, 0x88	; 136
     738:	1f 4f       	sbci	r17, 0xFF	; 255
     73a:	00 0f       	add	r16, r16
     73c:	11 1f       	adc	r17, r17
     73e:	e0 0e       	add	r14, r16
     740:	f1 1e       	adc	r15, r17
     742:	f7 01       	movw	r30, r14
     744:	80 83       	st	Z, r24
     746:	91 83       	std	Z+1, r25	; 0x01
			
			//next column
			adc_head++;
     748:	8d 2d       	mov	r24, r13
     74a:	8f 5f       	subi	r24, 0xFF	; 255
     74c:	80 93 89 26 	sts	0x2689, r24
			if (adc_head >= ADC_NUM_CONVERSIONS){adc_head=0;}
     750:	88 30       	cpi	r24, 0x08	; 8
     752:	10 f0       	brcs	.+4      	; 0x758 <service_adc+0x204>
     754:	10 92 89 26 	sts	0x2689, r1
		}
		
		//Clear Flags to Reset ADC
		ADCA.INTFLAGS = 0x0F;
     758:	8f e0       	ldi	r24, 0x0F	; 15
     75a:	e0 e0       	ldi	r30, 0x00	; 0
     75c:	f2 e0       	ldi	r31, 0x02	; 2
     75e:	86 83       	std	Z+6, r24	; 0x06
		ADCB.INTFLAGS = 0x0F;
     760:	e0 e4       	ldi	r30, 0x40	; 64
     762:	f2 e0       	ldi	r31, 0x02	; 2
     764:	86 83       	std	Z+6, r24	; 0x06
		
		//Toggle Channel Bank
		adc_bank++;
     766:	80 91 8a 26 	lds	r24, 0x268A
     76a:	8f 5f       	subi	r24, 0xFF	; 255
     76c:	80 93 8a 26 	sts	0x268A, r24
		adc_bank_select(adc_bank);
     770:	0e 94 2a 01 	call	0x254	; 0x254 <adc_bank_select>
		
		//Start Next Round of Conversions
		adc_convert();
     774:	0e 94 4d 01 	call	0x29a	; 0x29a <adc_convert>
		
		//Auto-calibrate Current Offsets (when output is disabled)
		if(STATE_power_output == DISABLE){
     778:	80 91 88 25 	lds	r24, 0x2588
     77c:	89 32       	cpi	r24, 0x29	; 41
     77e:	69 f4       	brne	.+26     	; 0x79a <service_adc+0x246>
     780:	ce e1       	ldi	r28, 0x1E	; 30
     782:	d2 e2       	ldi	r29, 0x22	; 34
     784:	00 e0       	ldi	r16, 0x00	; 0
			for(uint8_t i=0;i<(ADC_NUM_CHANNELS>>1);i++){
				adc_current_offset[i] = adc_max((i<<1)+1);
     786:	80 2f       	mov	r24, r16
     788:	88 0f       	add	r24, r24
     78a:	8f 5f       	subi	r24, 0xFF	; 255
     78c:	0e 94 83 02 	call	0x506	; 0x506 <adc_max>
     790:	89 93       	st	Y+, r24
     792:	99 93       	st	Y+, r25
		//Start Next Round of Conversions
		adc_convert();
		
		//Auto-calibrate Current Offsets (when output is disabled)
		if(STATE_power_output == DISABLE){
			for(uint8_t i=0;i<(ADC_NUM_CHANNELS>>1);i++){
     794:	0f 5f       	subi	r16, 0xFF	; 255
     796:	08 30       	cpi	r16, 0x08	; 8
     798:	b1 f7       	brne	.-20     	; 0x786 <service_adc+0x232>
				adc_current_offset[i] = adc_max((i<<1)+1);
			}			
		}
	}
}
     79a:	df 91       	pop	r29
     79c:	cf 91       	pop	r28
     79e:	1f 91       	pop	r17
     7a0:	0f 91       	pop	r16
     7a2:	ff 90       	pop	r15
     7a4:	ef 90       	pop	r14
     7a6:	df 90       	pop	r13
     7a8:	08 95       	ret

000007aa <brain_debug>:
void brain_debug(){
	static uint8_t c = 0;
	//uart_enqueue_string(&uctrl, "0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789----100---012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789---<200---012345678901234567890123456789---250>---ABCDEFGHIJ");

	//Channel values (from ADC)
	if (STATE_menu == MENU_CONSOLE){
     7aa:	80 91 87 25 	lds	r24, 0x2587
     7ae:	82 32       	cpi	r24, 0x22	; 34
     7b0:	89 f4       	brne	.+34     	; 0x7d4 <brain_debug+0x2a>
		c++;
     7b2:	80 91 18 22 	lds	r24, 0x2218
     7b6:	8f 5f       	subi	r24, 0xFF	; 255
     7b8:	80 93 18 22 	sts	0x2218, r24
		if(c%2){lcd_console_write("Hello World...");}
     7bc:	80 ff       	sbrs	r24, 0
     7be:	05 c0       	rjmp	.+10     	; 0x7ca <brain_debug+0x20>
     7c0:	80 e0       	ldi	r24, 0x00	; 0
     7c2:	90 e2       	ldi	r25, 0x20	; 32
     7c4:	0e 94 c9 0c 	call	0x1992	; 0x1992 <lcd_console_write>
     7c8:	08 95       	ret
		else{lcd_console_write("No! I refuse!");}
     7ca:	8f e0       	ldi	r24, 0x0F	; 15
     7cc:	90 e2       	ldi	r25, 0x20	; 32
     7ce:	0e 94 c9 0c 	call	0x1992	; 0x1992 <lcd_console_write>
     7d2:	08 95       	ret
	}
	else {		
		lcd_command("75 1 1234");
     7d4:	8d e1       	ldi	r24, 0x1D	; 29
     7d6:	90 e2       	ldi	r25, 0x20	; 32
     7d8:	0e 94 6f 0b 	call	0x16de	; 0x16de <lcd_command>
		lcd_command("75 11 5678");
     7dc:	87 e2       	ldi	r24, 0x27	; 39
     7de:	90 e2       	ldi	r25, 0x20	; 32
     7e0:	0e 94 6f 0b 	call	0x16de	; 0x16de <lcd_command>
		lcd_command("75 2 8765");
     7e4:	82 e3       	ldi	r24, 0x32	; 50
     7e6:	90 e2       	ldi	r25, 0x20	; 32
     7e8:	0e 94 6f 0b 	call	0x16de	; 0x16de <lcd_command>
		lcd_command("75 21 4321");
     7ec:	8c e3       	ldi	r24, 0x3C	; 60
     7ee:	90 e2       	ldi	r25, 0x20	; 32
     7f0:	0e 94 6f 0b 	call	0x16de	; 0x16de <lcd_command>
     7f4:	08 95       	ret

000007f6 <brain_power_reset>:
}


//Safe and reset all channels (all disabled, master off)
void brain_power_reset(){
	STATE_power_channels = 0;
     7f6:	10 92 86 25 	sts	0x2586, r1
	STATE_power_output = DISABLE;
     7fa:	89 e2       	ldi	r24, 0x29	; 41
     7fc:	80 93 88 25 	sts	0x2588, r24
	pwr_main_off(CHANNEL_ALL); //Actually shutoff power
     800:	8a e3       	ldi	r24, 0x3A	; 58
     802:	0e 94 eb 11 	call	0x23d6	; 0x23d6 <pwr_main_off>
	fp_led_disable(CHANNEL_M); //Update LED display to indicate this
     806:	85 e0       	ldi	r24, 0x05	; 5
     808:	0e 94 6f 09 	call	0x12de	; 0x12de <fp_led_disable>
}
     80c:	08 95       	ret

0000080e <init_brain>:
//#############################################################
//## INITIALIZATION ROUTINE
//#############################################################

void init_brain(){
	brain_power_reset();
     80e:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <brain_power_reset>
	STATE_menu = MENU_STARTUP;
     812:	8f e1       	ldi	r24, 0x1F	; 31
     814:	80 93 87 25 	sts	0x2587, r24
}
     818:	08 95       	ret

0000081a <brain_menu_output>:
}

//=================
//== OUTPUT Menu
void brain_menu_output(){
	STATE_menu = MENU_OUTPUT;
     81a:	80 e2       	ldi	r24, 0x20	; 32
     81c:	80 93 87 25 	sts	0x2587, r24
	lcd_macro("RUN M_OUT");
     820:	87 e4       	ldi	r24, 0x47	; 71
     822:	90 e2       	ldi	r25, 0x20	; 32
     824:	0e 94 08 0c 	call	0x1810	; 0x1810 <lcd_macro>
}
     828:	08 95       	ret

0000082a <brain_menu_output_detail>:

void brain_menu_output_detail(uint8_t which_detail){
     82a:	cf 93       	push	r28
     82c:	c8 2f       	mov	r28, r24
	audio_beep(BRAIN_BEEPS, BRAIN_VOLUME);
     82e:	81 e0       	ldi	r24, 0x01	; 1
     830:	64 e6       	ldi	r22, 0x64	; 100
     832:	70 e0       	ldi	r23, 0x00	; 0
     834:	0e 94 af 2d 	call	0x5b5e	; 0x5b5e <audio_beep>
	switch(which_detail){
     838:	cf 30       	cpi	r28, 0x0F	; 15
     83a:	19 f0       	breq	.+6      	; 0x842 <brain_menu_output_detail+0x18>
     83c:	c0 31       	cpi	r28, 0x10	; 16
     83e:	01 f5       	brne	.+64     	; 0x880 <brain_menu_output_detail+0x56>
     840:	10 c0       	rjmp	.+32     	; 0x862 <brain_menu_output_detail+0x38>
		case LCD_TOUCH_OPEN_DETAIL_AB:
			STATE_menu = MENU_DETAIL_AB;
     842:	83 e2       	ldi	r24, 0x23	; 35
     844:	80 93 87 25 	sts	0x2587, r24
			lcd_macro("RUN M_DETAIL");
     848:	81 e5       	ldi	r24, 0x51	; 81
     84a:	90 e2       	ldi	r25, 0x20	; 32
     84c:	0e 94 08 0c 	call	0x1810	; 0x1810 <lcd_macro>
			lcd_command("88 58 A");
     850:	8e e5       	ldi	r24, 0x5E	; 94
     852:	90 e2       	ldi	r25, 0x20	; 32
     854:	0e 94 6f 0b 	call	0x16de	; 0x16de <lcd_command>
			lcd_command("88 59 B");
     858:	86 e6       	ldi	r24, 0x66	; 102
     85a:	90 e2       	ldi	r25, 0x20	; 32
     85c:	0e 94 6f 0b 	call	0x16de	; 0x16de <lcd_command>
			break;
     860:	0f c0       	rjmp	.+30     	; 0x880 <brain_menu_output_detail+0x56>
		case LCD_TOUCH_OPEN_DETAIL_CD:
			STATE_menu = MENU_DETAIL_CD;
     862:	84 e2       	ldi	r24, 0x24	; 36
     864:	80 93 87 25 	sts	0x2587, r24
			lcd_macro("RUN M_DETAIL");
     868:	81 e5       	ldi	r24, 0x51	; 81
     86a:	90 e2       	ldi	r25, 0x20	; 32
     86c:	0e 94 08 0c 	call	0x1810	; 0x1810 <lcd_macro>
			lcd_command("88 58 C");
     870:	8e e6       	ldi	r24, 0x6E	; 110
     872:	90 e2       	ldi	r25, 0x20	; 32
     874:	0e 94 6f 0b 	call	0x16de	; 0x16de <lcd_command>
			lcd_command("88 59 D");
     878:	86 e7       	ldi	r24, 0x76	; 118
     87a:	90 e2       	ldi	r25, 0x20	; 32
     87c:	0e 94 6f 0b 	call	0x16de	; 0x16de <lcd_command>
			break;
	}
}
     880:	cf 91       	pop	r28
     882:	08 95       	ret

00000884 <brain_menu_control>:

//=================
//== CONTROL Menu

void brain_menu_control(){
	STATE_menu = MENU_CONTROL;
     884:	81 e2       	ldi	r24, 0x21	; 33
     886:	80 93 87 25 	sts	0x2587, r24
	lcd_macro("RUN M_CTRL");
     88a:	8e e7       	ldi	r24, 0x7E	; 126
     88c:	90 e2       	ldi	r25, 0x20	; 32
     88e:	0e 94 08 0c 	call	0x1810	; 0x1810 <lcd_macro>
}
     892:	08 95       	ret

00000894 <brain_menu_control_dial>:

void brain_menu_control_dial(uint8_t which_channel){
     894:	cf 93       	push	r28
     896:	c8 2f       	mov	r28, r24
	audio_beep(BRAIN_BEEPS, BRAIN_VOLUME);
     898:	81 e0       	ldi	r24, 0x01	; 1
     89a:	64 e6       	ldi	r22, 0x64	; 100
     89c:	70 e0       	ldi	r23, 0x00	; 0
     89e:	0e 94 af 2d 	call	0x5b5e	; 0x5b5e <audio_beep>
	lcd_macro("RUN M_DIAL");
     8a2:	89 e8       	ldi	r24, 0x89	; 137
     8a4:	90 e2       	ldi	r25, 0x20	; 32
     8a6:	0e 94 08 0c 	call	0x1810	; 0x1810 <lcd_macro>
	pwr_adj_channel_dirty = 0xFF; //mark all channels dirty (so load initial values)
     8aa:	8f ef       	ldi	r24, 0xFF	; 255
     8ac:	80 93 b1 26 	sts	0x26B1, r24
	switch(which_channel){
     8b0:	c2 31       	cpi	r28, 0x12	; 18
     8b2:	91 f0       	breq	.+36     	; 0x8d8 <brain_menu_control_dial+0x44>
     8b4:	c3 31       	cpi	r28, 0x13	; 19
     8b6:	18 f4       	brcc	.+6      	; 0x8be <brain_menu_control_dial+0x2a>
     8b8:	c1 31       	cpi	r28, 0x11	; 17
     8ba:	29 f5       	brne	.+74     	; 0x906 <brain_menu_control_dial+0x72>
     8bc:	05 c0       	rjmp	.+10     	; 0x8c8 <brain_menu_control_dial+0x34>
     8be:	c3 31       	cpi	r28, 0x13	; 19
     8c0:	99 f0       	breq	.+38     	; 0x8e8 <brain_menu_control_dial+0x54>
     8c2:	c4 31       	cpi	r28, 0x14	; 20
     8c4:	01 f5       	brne	.+64     	; 0x906 <brain_menu_control_dial+0x72>
     8c6:	18 c0       	rjmp	.+48     	; 0x8f8 <brain_menu_control_dial+0x64>
		case LCD_TOUCH_ROW_A:
			STATE_menu = MENU_DIAL_A;
     8c8:	85 e2       	ldi	r24, 0x25	; 37
     8ca:	80 93 87 25 	sts	0x2587, r24
			lcd_command("88 90 A");
     8ce:	84 e9       	ldi	r24, 0x94	; 148
     8d0:	90 e2       	ldi	r25, 0x20	; 32
     8d2:	0e 94 6f 0b 	call	0x16de	; 0x16de <lcd_command>
			break;
     8d6:	17 c0       	rjmp	.+46     	; 0x906 <brain_menu_control_dial+0x72>
		case LCD_TOUCH_ROW_B:
			STATE_menu = MENU_DIAL_B;
     8d8:	86 e2       	ldi	r24, 0x26	; 38
     8da:	80 93 87 25 	sts	0x2587, r24
			lcd_command("88 90 B");
     8de:	8c e9       	ldi	r24, 0x9C	; 156
     8e0:	90 e2       	ldi	r25, 0x20	; 32
     8e2:	0e 94 6f 0b 	call	0x16de	; 0x16de <lcd_command>
			break;
     8e6:	0f c0       	rjmp	.+30     	; 0x906 <brain_menu_control_dial+0x72>
		case LCD_TOUCH_ROW_C:
			STATE_menu = MENU_DIAL_C;
     8e8:	87 e2       	ldi	r24, 0x27	; 39
     8ea:	80 93 87 25 	sts	0x2587, r24
			lcd_command("88 90 C");
     8ee:	84 ea       	ldi	r24, 0xA4	; 164
     8f0:	90 e2       	ldi	r25, 0x20	; 32
     8f2:	0e 94 6f 0b 	call	0x16de	; 0x16de <lcd_command>
			break;
     8f6:	07 c0       	rjmp	.+14     	; 0x906 <brain_menu_control_dial+0x72>
		case LCD_TOUCH_ROW_D:
			STATE_menu = MENU_DIAL_D;
     8f8:	88 e2       	ldi	r24, 0x28	; 40
     8fa:	80 93 87 25 	sts	0x2587, r24
			lcd_command("88 90 D");
     8fe:	8c ea       	ldi	r24, 0xAC	; 172
     900:	90 e2       	ldi	r25, 0x20	; 32
     902:	0e 94 6f 0b 	call	0x16de	; 0x16de <lcd_command>
			break;
	}
}
     906:	cf 91       	pop	r28
     908:	08 95       	ret

0000090a <brain_menu_control_dial_select>:

void brain_menu_control_dial_select(uint8_t which_one){
     90a:	cf 93       	push	r28
     90c:	c8 2f       	mov	r28, r24
	//Announce
	audio_beep(BRAIN_BEEPS, BRAIN_VOLUME);
     90e:	81 e0       	ldi	r24, 0x01	; 1
     910:	64 e6       	ldi	r22, 0x64	; 100
     912:	70 e0       	ldi	r23, 0x00	; 0
     914:	0e 94 af 2d 	call	0x5b5e	; 0x5b5e <audio_beep>
	//Update Stat
	pwr_adj_left_right = which_one;
     918:	c0 93 9b 26 	sts	0x269B, r28
	//Update Display
	switch(which_one){
     91c:	c1 36       	cpi	r28, 0x61	; 97
     91e:	19 f0       	breq	.+6      	; 0x926 <brain_menu_control_dial_select+0x1c>
     920:	c2 36       	cpi	r28, 0x62	; 98
     922:	51 f4       	brne	.+20     	; 0x938 <brain_menu_control_dial_select+0x2e>
     924:	05 c0       	rjmp	.+10     	; 0x930 <brain_menu_control_dial_select+0x26>
		case LCD_TOUCH_LEFT:
			lcd_command("31 L_SEL");
     926:	84 eb       	ldi	r24, 0xB4	; 180
     928:	90 e2       	ldi	r25, 0x20	; 32
     92a:	0e 94 6f 0b 	call	0x16de	; 0x16de <lcd_command>
			break;
     92e:	04 c0       	rjmp	.+8      	; 0x938 <brain_menu_control_dial_select+0x2e>
		case LCD_TOUCH_RIGHT:
			lcd_command("31 R_SEL");
     930:	8d eb       	ldi	r24, 0xBD	; 189
     932:	90 e2       	ldi	r25, 0x20	; 32
     934:	0e 94 6f 0b 	call	0x16de	; 0x16de <lcd_command>
			break;
	}
}
     938:	cf 91       	pop	r28
     93a:	08 95       	ret

0000093c <brain_menu_console>:

//=================
//== CONSOLE Menu

void brain_menu_console(){
	STATE_menu = MENU_CONSOLE;
     93c:	82 e2       	ldi	r24, 0x22	; 34
     93e:	80 93 87 25 	sts	0x2587, r24
	lcd_macro("RUN M_CON");
     942:	86 ec       	ldi	r24, 0xC6	; 198
     944:	90 e2       	ldi	r25, 0x20	; 32
     946:	0e 94 08 0c 	call	0x1810	; 0x1810 <lcd_macro>
}
     94a:	08 95       	ret

0000094c <brain_menu_update>:

//Update channel enabled indicators
void brain_menu_update(){
	if ((STATE_menu == MENU_OUTPUT) || (STATE_menu == MENU_CONTROL)) {
     94c:	80 91 87 25 	lds	r24, 0x2587
     950:	80 52       	subi	r24, 0x20	; 32
     952:	82 30       	cpi	r24, 0x02	; 2
     954:	08 f0       	brcs	.+2      	; 0x958 <brain_menu_update+0xc>
     956:	54 c0       	rjmp	.+168    	; 0xa00 <brain_menu_update+0xb4>
		if ((STATE_power_channels & _BV(0)) == 0){lcd_a(LCD_DISABLED);}
     958:	80 91 86 25 	lds	r24, 0x2586
     95c:	80 fd       	sbrc	r24, 0
     95e:	04 c0       	rjmp	.+8      	; 0x968 <brain_menu_update+0x1c>
     960:	81 e2       	ldi	r24, 0x21	; 33
     962:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <lcd_a>
     966:	0d c0       	rjmp	.+26     	; 0x982 <brain_menu_update+0x36>
		else {
			if (STATE_power_output == DISABLE){lcd_a(LCD_STANDBY);}
     968:	80 91 88 25 	lds	r24, 0x2588
     96c:	89 32       	cpi	r24, 0x29	; 41
     96e:	21 f4       	brne	.+8      	; 0x978 <brain_menu_update+0x2c>
     970:	80 e2       	ldi	r24, 0x20	; 32
     972:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <lcd_a>
     976:	05 c0       	rjmp	.+10     	; 0x982 <brain_menu_update+0x36>
			else if (STATE_power_output == ENABLE){lcd_a(LCD_ENABLED);}
     978:	8a 32       	cpi	r24, 0x2A	; 42
     97a:	19 f4       	brne	.+6      	; 0x982 <brain_menu_update+0x36>
     97c:	8f e1       	ldi	r24, 0x1F	; 31
     97e:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <lcd_a>
		}	
				
		if ((STATE_power_channels & _BV(1)) == 0){lcd_b(LCD_DISABLED);}
     982:	80 91 86 25 	lds	r24, 0x2586
     986:	81 fd       	sbrc	r24, 1
     988:	04 c0       	rjmp	.+8      	; 0x992 <brain_menu_update+0x46>
     98a:	81 e2       	ldi	r24, 0x21	; 33
     98c:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <lcd_b>
     990:	0d c0       	rjmp	.+26     	; 0x9ac <brain_menu_update+0x60>
		else {
			if (STATE_power_output == DISABLE){lcd_b(LCD_STANDBY);}
     992:	80 91 88 25 	lds	r24, 0x2588
     996:	89 32       	cpi	r24, 0x29	; 41
     998:	21 f4       	brne	.+8      	; 0x9a2 <brain_menu_update+0x56>
     99a:	80 e2       	ldi	r24, 0x20	; 32
     99c:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <lcd_b>
     9a0:	05 c0       	rjmp	.+10     	; 0x9ac <brain_menu_update+0x60>
			else if (STATE_power_output == ENABLE){lcd_b(LCD_ENABLED);}
     9a2:	8a 32       	cpi	r24, 0x2A	; 42
     9a4:	19 f4       	brne	.+6      	; 0x9ac <brain_menu_update+0x60>
     9a6:	8f e1       	ldi	r24, 0x1F	; 31
     9a8:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <lcd_b>
		}	

		if ((STATE_power_channels & _BV(2)) == 0){lcd_c(LCD_DISABLED);}
     9ac:	80 91 86 25 	lds	r24, 0x2586
     9b0:	82 fd       	sbrc	r24, 2
     9b2:	04 c0       	rjmp	.+8      	; 0x9bc <brain_menu_update+0x70>
     9b4:	81 e2       	ldi	r24, 0x21	; 33
     9b6:	0e 94 cc 0b 	call	0x1798	; 0x1798 <lcd_c>
     9ba:	0d c0       	rjmp	.+26     	; 0x9d6 <brain_menu_update+0x8a>
		else {
			if (STATE_power_output == DISABLE){lcd_c(LCD_STANDBY);}
     9bc:	80 91 88 25 	lds	r24, 0x2588
     9c0:	89 32       	cpi	r24, 0x29	; 41
     9c2:	21 f4       	brne	.+8      	; 0x9cc <brain_menu_update+0x80>
     9c4:	80 e2       	ldi	r24, 0x20	; 32
     9c6:	0e 94 cc 0b 	call	0x1798	; 0x1798 <lcd_c>
     9ca:	05 c0       	rjmp	.+10     	; 0x9d6 <brain_menu_update+0x8a>
			else if (STATE_power_output == ENABLE){lcd_c(LCD_ENABLED);}
     9cc:	8a 32       	cpi	r24, 0x2A	; 42
     9ce:	19 f4       	brne	.+6      	; 0x9d6 <brain_menu_update+0x8a>
     9d0:	8f e1       	ldi	r24, 0x1F	; 31
     9d2:	0e 94 cc 0b 	call	0x1798	; 0x1798 <lcd_c>
		}

		if ((STATE_power_channels & _BV(3)) == 0){lcd_d(LCD_DISABLED);}
     9d6:	80 91 86 25 	lds	r24, 0x2586
     9da:	83 fd       	sbrc	r24, 3
     9dc:	04 c0       	rjmp	.+8      	; 0x9e6 <brain_menu_update+0x9a>
     9de:	81 e2       	ldi	r24, 0x21	; 33
     9e0:	0e 94 b8 0b 	call	0x1770	; 0x1770 <lcd_d>
     9e4:	08 95       	ret
		else {
			if (STATE_power_output == DISABLE){lcd_d(LCD_STANDBY);}
     9e6:	80 91 88 25 	lds	r24, 0x2588
     9ea:	89 32       	cpi	r24, 0x29	; 41
     9ec:	21 f4       	brne	.+8      	; 0x9f6 <brain_menu_update+0xaa>
     9ee:	80 e2       	ldi	r24, 0x20	; 32
     9f0:	0e 94 b8 0b 	call	0x1770	; 0x1770 <lcd_d>
     9f4:	08 95       	ret
			else if (STATE_power_output == ENABLE){lcd_d(LCD_ENABLED);}
     9f6:	8a 32       	cpi	r24, 0x2A	; 42
     9f8:	19 f4       	brne	.+6      	; 0xa00 <brain_menu_update+0xb4>
     9fa:	8f e1       	ldi	r24, 0x1F	; 31
     9fc:	0e 94 b8 0b 	call	0x1770	; 0x1770 <lcd_d>
     a00:	08 95       	ret

00000a02 <brain_menu_load>:

void brain_button_pressed(){
	if (STATE_menu == MENU_STARTUP){brain_rotary_change(0);}
}

void brain_menu_load(uint8_t which_menu){
     a02:	cf 93       	push	r28
     a04:	c8 2f       	mov	r28, r24
	//Announce!
	audio_beep(BRAIN_BEEPS, BRAIN_VOLUME);
     a06:	81 e0       	ldi	r24, 0x01	; 1
     a08:	64 e6       	ldi	r22, 0x64	; 100
     a0a:	70 e0       	ldi	r23, 0x00	; 0
     a0c:	0e 94 af 2d 	call	0x5b5e	; 0x5b5e <audio_beep>
	
	//Reset LCD state for menu change (no need to update screen with old stuff)
	init_uart_buffer(&ulcd); //flush outgoing buffer
     a10:	80 eb       	ldi	r24, 0xB0	; 176
     a12:	9b e0       	ldi	r25, 0x0B	; 11
     a14:	0e 94 5b 2a 	call	0x54b6	; 0x54b6 <init_uart_buffer>
	lcd_flow_control = LCD_READY; //clear any current transmissions
     a18:	82 e5       	ldi	r24, 0x52	; 82
     a1a:	80 93 b0 26 	sts	0x26B0, r24
	lcd_last_touch_command = LCD_TOUCH_NONE; //clear out any latent touch actions
     a1e:	85 e1       	ldi	r24, 0x15	; 21
     a20:	80 93 9d 26 	sts	0x269D, r24
	lcd_command(""); //send \r to flush any existing partially transmitted commands
     a24:	80 ed       	ldi	r24, 0xD0	; 208
     a26:	90 e2       	ldi	r25, 0x20	; 32
     a28:	0e 94 6f 0b 	call	0x16de	; 0x16de <lcd_command>
	
	switch (which_menu){
     a2c:	c0 32       	cpi	r28, 0x20	; 32
     a2e:	69 f0       	breq	.+26     	; 0xa4a <brain_menu_load+0x48>
     a30:	c1 32       	cpi	r28, 0x21	; 33
     a32:	18 f4       	brcc	.+6      	; 0xa3a <brain_menu_load+0x38>
     a34:	cf 31       	cpi	r28, 0x1F	; 31
     a36:	89 f4       	brne	.+34     	; 0xa5a <brain_menu_load+0x58>
     a38:	05 c0       	rjmp	.+10     	; 0xa44 <brain_menu_load+0x42>
     a3a:	c1 32       	cpi	r28, 0x21	; 33
     a3c:	49 f0       	breq	.+18     	; 0xa50 <brain_menu_load+0x4e>
     a3e:	c2 32       	cpi	r28, 0x22	; 34
     a40:	61 f4       	brne	.+24     	; 0xa5a <brain_menu_load+0x58>
     a42:	09 c0       	rjmp	.+18     	; 0xa56 <brain_menu_load+0x54>
		case MENU_STARTUP:
			brain_menu_output();
     a44:	0e 94 0d 04 	call	0x81a	; 0x81a <brain_menu_output>
			break;
     a48:	08 c0       	rjmp	.+16     	; 0xa5a <brain_menu_load+0x58>
		case MENU_OUTPUT:
			brain_menu_output();
     a4a:	0e 94 0d 04 	call	0x81a	; 0x81a <brain_menu_output>
			break;
     a4e:	05 c0       	rjmp	.+10     	; 0xa5a <brain_menu_load+0x58>
		case MENU_CONTROL:
			brain_menu_control();
     a50:	0e 94 42 04 	call	0x884	; 0x884 <brain_menu_control>
			break;
     a54:	02 c0       	rjmp	.+4      	; 0xa5a <brain_menu_load+0x58>
		case MENU_CONSOLE:
			brain_menu_console();
     a56:	0e 94 9e 04 	call	0x93c	; 0x93c <brain_menu_console>
			break;
	}
	brain_menu_update(); //Update channel indicators
     a5a:	0e 94 a6 04 	call	0x94c	; 0x94c <brain_menu_update>
}
     a5e:	cf 91       	pop	r28
     a60:	08 95       	ret

00000a62 <brain_rotary_change>:

//When the user turns the rotary dial...
void brain_rotary_change(uint8_t which_way){
     a62:	68 2f       	mov	r22, r24
	switch (STATE_menu){
     a64:	80 91 87 25 	lds	r24, 0x2587
     a68:	82 32       	cpi	r24, 0x22	; 34
     a6a:	c1 f1       	breq	.+112    	; 0xadc <brain_rotary_change+0x7a>
     a6c:	83 32       	cpi	r24, 0x23	; 35
     a6e:	40 f4       	brcc	.+16     	; 0xa80 <brain_rotary_change+0x1e>
     a70:	80 32       	cpi	r24, 0x20	; 32
     a72:	d1 f0       	breq	.+52     	; 0xaa8 <brain_rotary_change+0x46>
     a74:	81 32       	cpi	r24, 0x21	; 33
     a76:	28 f5       	brcc	.+74     	; 0xac2 <brain_rotary_change+0x60>
     a78:	8f 31       	cpi	r24, 0x1F	; 31
     a7a:	09 f0       	breq	.+2      	; 0xa7e <brain_rotary_change+0x1c>
     a7c:	77 c0       	rjmp	.+238    	; 0xb6c <brain_rotary_change+0x10a>
     a7e:	10 c0       	rjmp	.+32     	; 0xaa0 <brain_rotary_change+0x3e>
     a80:	86 32       	cpi	r24, 0x26	; 38
     a82:	09 f4       	brne	.+2      	; 0xa86 <brain_rotary_change+0x24>
     a84:	47 c0       	rjmp	.+142    	; 0xb14 <brain_rotary_change+0xb2>
     a86:	87 32       	cpi	r24, 0x27	; 39
     a88:	20 f4       	brcc	.+8      	; 0xa92 <brain_rotary_change+0x30>
     a8a:	85 32       	cpi	r24, 0x25	; 37
     a8c:	09 f0       	breq	.+2      	; 0xa90 <brain_rotary_change+0x2e>
     a8e:	6e c0       	rjmp	.+220    	; 0xb6c <brain_rotary_change+0x10a>
     a90:	32 c0       	rjmp	.+100    	; 0xaf6 <brain_rotary_change+0x94>
     a92:	87 32       	cpi	r24, 0x27	; 39
     a94:	09 f4       	brne	.+2      	; 0xa98 <brain_rotary_change+0x36>
     a96:	4d c0       	rjmp	.+154    	; 0xb32 <brain_rotary_change+0xd0>
     a98:	88 32       	cpi	r24, 0x28	; 40
     a9a:	09 f0       	breq	.+2      	; 0xa9e <brain_rotary_change+0x3c>
     a9c:	67 c0       	rjmp	.+206    	; 0xb6c <brain_rotary_change+0x10a>
     a9e:	58 c0       	rjmp	.+176    	; 0xb50 <brain_rotary_change+0xee>
		case MENU_STARTUP:
			brain_menu_load(MENU_OUTPUT);
     aa0:	80 e2       	ldi	r24, 0x20	; 32
     aa2:	0e 94 01 05 	call	0xa02	; 0xa02 <brain_menu_load>
			break;
     aa6:	08 95       	ret
		case MENU_OUTPUT:
			if (which_way == QUAD_DOWN){brain_menu_load(MENU_CONTROL);}
     aa8:	6e 32       	cpi	r22, 0x2E	; 46
     aaa:	21 f4       	brne	.+8      	; 0xab4 <brain_rotary_change+0x52>
     aac:	81 e2       	ldi	r24, 0x21	; 33
     aae:	0e 94 01 05 	call	0xa02	; 0xa02 <brain_menu_load>
     ab2:	08 95       	ret
			if (which_way == QUAD_UP){brain_menu_load(MENU_CONSOLE);}
     ab4:	6d 32       	cpi	r22, 0x2D	; 45
     ab6:	09 f0       	breq	.+2      	; 0xaba <brain_rotary_change+0x58>
     ab8:	59 c0       	rjmp	.+178    	; 0xb6c <brain_rotary_change+0x10a>
     aba:	82 e2       	ldi	r24, 0x22	; 34
     abc:	0e 94 01 05 	call	0xa02	; 0xa02 <brain_menu_load>
     ac0:	08 95       	ret
			break;
		case MENU_CONTROL:
			if (which_way == QUAD_DOWN){brain_menu_load(MENU_CONSOLE);}
     ac2:	6e 32       	cpi	r22, 0x2E	; 46
     ac4:	21 f4       	brne	.+8      	; 0xace <brain_rotary_change+0x6c>
     ac6:	82 e2       	ldi	r24, 0x22	; 34
     ac8:	0e 94 01 05 	call	0xa02	; 0xa02 <brain_menu_load>
     acc:	08 95       	ret
			if (which_way == QUAD_UP){brain_menu_load(MENU_OUTPUT);}
     ace:	6d 32       	cpi	r22, 0x2D	; 45
     ad0:	09 f0       	breq	.+2      	; 0xad4 <brain_rotary_change+0x72>
     ad2:	4c c0       	rjmp	.+152    	; 0xb6c <brain_rotary_change+0x10a>
     ad4:	80 e2       	ldi	r24, 0x20	; 32
     ad6:	0e 94 01 05 	call	0xa02	; 0xa02 <brain_menu_load>
     ada:	08 95       	ret
			break;
		case MENU_CONSOLE:
			if (which_way == QUAD_DOWN){brain_menu_load(MENU_OUTPUT);}
     adc:	6e 32       	cpi	r22, 0x2E	; 46
     ade:	21 f4       	brne	.+8      	; 0xae8 <brain_rotary_change+0x86>
     ae0:	80 e2       	ldi	r24, 0x20	; 32
     ae2:	0e 94 01 05 	call	0xa02	; 0xa02 <brain_menu_load>
     ae6:	08 95       	ret
			if (which_way == QUAD_UP){brain_menu_load(MENU_CONTROL);}
     ae8:	6d 32       	cpi	r22, 0x2D	; 45
     aea:	09 f0       	breq	.+2      	; 0xaee <brain_rotary_change+0x8c>
     aec:	3f c0       	rjmp	.+126    	; 0xb6c <brain_rotary_change+0x10a>
     aee:	81 e2       	ldi	r24, 0x21	; 33
     af0:	0e 94 01 05 	call	0xa02	; 0xa02 <brain_menu_load>
     af4:	08 95       	ret
			break;
		case MENU_DIAL_A:
			switch(pwr_adj_left_right){
     af6:	80 91 9b 26 	lds	r24, 0x269B
     afa:	81 36       	cpi	r24, 0x61	; 97
     afc:	19 f0       	breq	.+6      	; 0xb04 <brain_rotary_change+0xa2>
     afe:	82 36       	cpi	r24, 0x62	; 98
     b00:	a9 f5       	brne	.+106    	; 0xb6c <brain_rotary_change+0x10a>
     b02:	04 c0       	rjmp	.+8      	; 0xb0c <brain_rotary_change+0xaa>
			case LCD_TOUCH_LEFT:					
				pwr_adj_change_increment(0, which_way);
     b04:	80 e0       	ldi	r24, 0x00	; 0
     b06:	0e 94 85 10 	call	0x210a	; 0x210a <pwr_adj_change_increment>
				break;
     b0a:	08 95       	ret
			case LCD_TOUCH_RIGHT:
				pwr_adj_change_increment(1, which_way);
     b0c:	81 e0       	ldi	r24, 0x01	; 1
     b0e:	0e 94 85 10 	call	0x210a	; 0x210a <pwr_adj_change_increment>
				break;
     b12:	08 95       	ret
			}
			break;
		case MENU_DIAL_B:
			switch(pwr_adj_left_right){
     b14:	80 91 9b 26 	lds	r24, 0x269B
     b18:	81 36       	cpi	r24, 0x61	; 97
     b1a:	19 f0       	breq	.+6      	; 0xb22 <brain_rotary_change+0xc0>
     b1c:	82 36       	cpi	r24, 0x62	; 98
     b1e:	31 f5       	brne	.+76     	; 0xb6c <brain_rotary_change+0x10a>
     b20:	04 c0       	rjmp	.+8      	; 0xb2a <brain_rotary_change+0xc8>
			case LCD_TOUCH_LEFT:
				pwr_adj_change_increment(2, which_way);
     b22:	82 e0       	ldi	r24, 0x02	; 2
     b24:	0e 94 85 10 	call	0x210a	; 0x210a <pwr_adj_change_increment>
				break;
     b28:	08 95       	ret
			case LCD_TOUCH_RIGHT:
				pwr_adj_change_increment(3, which_way);
     b2a:	83 e0       	ldi	r24, 0x03	; 3
     b2c:	0e 94 85 10 	call	0x210a	; 0x210a <pwr_adj_change_increment>
				break;
     b30:	08 95       	ret
			}
			break;
		case MENU_DIAL_C:
			switch(pwr_adj_left_right){
     b32:	80 91 9b 26 	lds	r24, 0x269B
     b36:	81 36       	cpi	r24, 0x61	; 97
     b38:	19 f0       	breq	.+6      	; 0xb40 <brain_rotary_change+0xde>
     b3a:	82 36       	cpi	r24, 0x62	; 98
     b3c:	b9 f4       	brne	.+46     	; 0xb6c <brain_rotary_change+0x10a>
     b3e:	04 c0       	rjmp	.+8      	; 0xb48 <brain_rotary_change+0xe6>
			case LCD_TOUCH_LEFT:
				pwr_adj_change_increment(4, which_way);
     b40:	84 e0       	ldi	r24, 0x04	; 4
     b42:	0e 94 85 10 	call	0x210a	; 0x210a <pwr_adj_change_increment>
				break;
     b46:	08 95       	ret
			case LCD_TOUCH_RIGHT:
				pwr_adj_change_increment(5, which_way);
     b48:	85 e0       	ldi	r24, 0x05	; 5
     b4a:	0e 94 85 10 	call	0x210a	; 0x210a <pwr_adj_change_increment>
				break;
     b4e:	08 95       	ret
			}
			break;
		case MENU_DIAL_D:
			switch(pwr_adj_left_right){
     b50:	80 91 9b 26 	lds	r24, 0x269B
     b54:	81 36       	cpi	r24, 0x61	; 97
     b56:	19 f0       	breq	.+6      	; 0xb5e <brain_rotary_change+0xfc>
     b58:	82 36       	cpi	r24, 0x62	; 98
     b5a:	41 f4       	brne	.+16     	; 0xb6c <brain_rotary_change+0x10a>
     b5c:	04 c0       	rjmp	.+8      	; 0xb66 <brain_rotary_change+0x104>
			case LCD_TOUCH_LEFT:
				pwr_adj_change_increment(6, which_way);
     b5e:	86 e0       	ldi	r24, 0x06	; 6
     b60:	0e 94 85 10 	call	0x210a	; 0x210a <pwr_adj_change_increment>
				break;
     b64:	08 95       	ret
			case LCD_TOUCH_RIGHT:
				pwr_adj_change_increment(7, which_way);
     b66:	87 e0       	ldi	r24, 0x07	; 7
     b68:	0e 94 85 10 	call	0x210a	; 0x210a <pwr_adj_change_increment>
     b6c:	08 95       	ret

00000b6e <brain_button_pressed>:
	//Update LCD
	brain_menu_update();
}	

void brain_button_pressed(){
	if (STATE_menu == MENU_STARTUP){brain_rotary_change(0);}
     b6e:	80 91 87 25 	lds	r24, 0x2587
     b72:	8f 31       	cpi	r24, 0x1F	; 31
     b74:	19 f4       	brne	.+6      	; 0xb7c <brain_button_pressed+0xe>
     b76:	80 e0       	ldi	r24, 0x00	; 0
     b78:	0e 94 31 05 	call	0xa62	; 0xa62 <brain_rotary_change>
     b7c:	08 95       	ret

00000b7e <brain_power_master>:
		brain_menu_update();
}

void brain_power_master(){
	//Go to STANDBY (DISABLE)
	if (STATE_power_output == ENABLE){
     b7e:	80 91 88 25 	lds	r24, 0x2588
     b82:	8a 32       	cpi	r24, 0x2A	; 42
     b84:	89 f4       	brne	.+34     	; 0xba8 <brain_power_master+0x2a>
			STATE_power_output = DISABLE;
     b86:	89 e2       	ldi	r24, 0x29	; 41
     b88:	80 93 88 25 	sts	0x2588, r24
			pwr_main_off(CHANNEL_ALL);
     b8c:	8a e3       	ldi	r24, 0x3A	; 58
     b8e:	0e 94 eb 11 	call	0x23d6	; 0x23d6 <pwr_main_off>
			pwr_adj_off(CHANNEL_ALL);
     b92:	8a e3       	ldi	r24, 0x3A	; 58
     b94:	0e 94 2e 10 	call	0x205c	; 0x205c <pwr_adj_off>
			fp_led_disable(CHANNEL_M);		
     b98:	85 e0       	ldi	r24, 0x05	; 5
     b9a:	0e 94 6f 09 	call	0x12de	; 0x12de <fp_led_disable>
			PORTH.OUTCLR = _BV(0); //xxx -- Toggle 5V Control output with master	
     b9e:	81 e0       	ldi	r24, 0x01	; 1
     ba0:	e0 ee       	ldi	r30, 0xE0	; 224
     ba2:	f6 e0       	ldi	r31, 0x06	; 6
     ba4:	86 83       	std	Z+6, r24	; 0x06
     ba6:	12 c0       	rjmp	.+36     	; 0xbcc <brain_power_master+0x4e>
	}
	
	//Enable OUTPUT! (ENABLE)
	else {	
		if (STATE_power_output == DISABLE){
     ba8:	89 32       	cpi	r24, 0x29	; 41
     baa:	81 f4       	brne	.+32     	; 0xbcc <brain_power_master+0x4e>
			STATE_power_output = ENABLE;
     bac:	8a e2       	ldi	r24, 0x2A	; 42
     bae:	80 93 88 25 	sts	0x2588, r24
			pwr_main_on(CHANNEL_RESTORE);
     bb2:	8c e3       	ldi	r24, 0x3C	; 60
     bb4:	0e 94 b5 11 	call	0x236a	; 0x236a <pwr_main_on>
			pwr_adj_on(CHANNEL_RESTORE);
     bb8:	8c e3       	ldi	r24, 0x3C	; 60
     bba:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <pwr_adj_on>
			fp_led_enable(CHANNEL_M);
     bbe:	85 e0       	ldi	r24, 0x05	; 5
     bc0:	0e 94 43 09 	call	0x1286	; 0x1286 <fp_led_enable>
			PORTH.OUTSET = _BV(0); //xxx -- Toggle 5V Control output with master
     bc4:	81 e0       	ldi	r24, 0x01	; 1
     bc6:	e0 ee       	ldi	r30, 0xE0	; 224
     bc8:	f6 e0       	ldi	r31, 0x06	; 6
     bca:	85 83       	std	Z+5, r24	; 0x05
		}			
	}
	
	//Update LCD
	brain_menu_update();
     bcc:	0e 94 a6 04 	call	0x94c	; 0x94c <brain_menu_update>
}	
     bd0:	08 95       	ret

00000bd2 <brain_power>:
	fp_led_disable(CHANNEL_M); //Update LED display to indicate this
}

//Toggle power state and effect the new behavior
//Toggle adjustable and fixed channels together
void brain_power(uint8_t which){
     bd2:	cf 93       	push	r28
     bd4:	c8 2f       	mov	r28, r24
	//Toggle channel state
		STATE_power_channels ^= _BV(which); 
     bd6:	81 e0       	ldi	r24, 0x01	; 1
     bd8:	90 e0       	ldi	r25, 0x00	; 0
     bda:	0c 2e       	mov	r0, r28
     bdc:	02 c0       	rjmp	.+4      	; 0xbe2 <brain_power+0x10>
     bde:	88 0f       	add	r24, r24
     be0:	99 1f       	adc	r25, r25
     be2:	0a 94       	dec	r0
     be4:	e2 f7       	brpl	.-8      	; 0xbde <brain_power+0xc>
     be6:	90 91 86 25 	lds	r25, 0x2586
     bea:	89 27       	eor	r24, r25
     bec:	80 93 86 25 	sts	0x2586, r24
	//Channel disabled
		if ((STATE_power_channels & _BV(which))==0){		
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	0c 2e       	mov	r0, r28
     bf4:	02 c0       	rjmp	.+4      	; 0xbfa <brain_power+0x28>
     bf6:	95 95       	asr	r25
     bf8:	87 95       	ror	r24
     bfa:	0a 94       	dec	r0
     bfc:	e2 f7       	brpl	.-8      	; 0xbf6 <brain_power+0x24>
     bfe:	80 fd       	sbrc	r24, 0
     c00:	0a c0       	rjmp	.+20     	; 0xc16 <brain_power+0x44>
			pwr_main_off(which);
     c02:	8c 2f       	mov	r24, r28
     c04:	0e 94 eb 11 	call	0x23d6	; 0x23d6 <pwr_main_off>
			pwr_adj_off(which);
     c08:	8c 2f       	mov	r24, r28
     c0a:	0e 94 2e 10 	call	0x205c	; 0x205c <pwr_adj_off>
			fp_led_disable(which);
     c0e:	8c 2f       	mov	r24, r28
     c10:	0e 94 6f 09 	call	0x12de	; 0x12de <fp_led_disable>
     c14:	0d c0       	rjmp	.+26     	; 0xc30 <brain_power+0x5e>
		}	
	//Channel enabled
		else {
			fp_led_enable(which);
     c16:	8c 2f       	mov	r24, r28
     c18:	0e 94 43 09 	call	0x1286	; 0x1286 <fp_led_enable>
			if (STATE_power_output == ENABLE) {pwr_main_on(which); pwr_adj_on(which);}
     c1c:	80 91 88 25 	lds	r24, 0x2588
     c20:	8a 32       	cpi	r24, 0x2A	; 42
     c22:	31 f4       	brne	.+12     	; 0xc30 <brain_power+0x5e>
     c24:	8c 2f       	mov	r24, r28
     c26:	0e 94 b5 11 	call	0x236a	; 0x236a <pwr_main_on>
     c2a:	8c 2f       	mov	r24, r28
     c2c:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <pwr_adj_on>
			if (STATE_power_output == DISABLE) {}		
		}	
	//Update LCD
		brain_menu_update();
     c30:	0e 94 a6 04 	call	0x94c	; 0x94c <brain_menu_update>
}
     c34:	cf 91       	pop	r28
     c36:	08 95       	ret

00000c38 <service_brain>:

//#############################################################
//## SERVICE ROUTINE
//#############################################################

void service_brain(){
     c38:	cf 93       	push	r28
     c3a:	df 93       	push	r29
     c3c:	cd b7       	in	r28, 0x3d	; 61
     c3e:	de b7       	in	r29, 0x3e	; 62
     c40:	2c 97       	sbiw	r28, 0x0c	; 12
     c42:	cd bf       	out	0x3d, r28	; 61
     c44:	de bf       	out	0x3e, r29	; 62
	static uint16_t menu_update_counter = 0;
	char meter_value[12];
	//Decide when to update Power output measurements
	menu_update_counter++;
     c46:	80 91 19 22 	lds	r24, 0x2219
     c4a:	90 91 1a 22 	lds	r25, 0x221A
     c4e:	01 96       	adiw	r24, 0x01	; 1
     c50:	80 93 19 22 	sts	0x2219, r24
     c54:	90 93 1a 22 	sts	0x221A, r25
	if (menu_update_counter >= 500){
     c58:	21 e0       	ldi	r18, 0x01	; 1
     c5a:	84 3f       	cpi	r24, 0xF4	; 244
     c5c:	92 07       	cpc	r25, r18
     c5e:	08 f4       	brcc	.+2      	; 0xc62 <service_brain+0x2a>
     c60:	c8 c2       	rjmp	.+1424   	; 0x11f2 <service_brain+0x5ba>
		menu_update_counter = 0;
     c62:	10 92 19 22 	sts	0x2219, r1
     c66:	10 92 1a 22 	sts	0x221A, r1
		switch(STATE_menu){
     c6a:	80 91 87 25 	lds	r24, 0x2587
     c6e:	84 32       	cpi	r24, 0x24	; 36
     c70:	09 f4       	brne	.+2      	; 0xc74 <service_brain+0x3c>
     c72:	fb c0       	rjmp	.+502    	; 0xe6a <service_brain+0x232>
     c74:	85 32       	cpi	r24, 0x25	; 37
     c76:	50 f4       	brcc	.+20     	; 0xc8c <service_brain+0x54>
     c78:	81 32       	cpi	r24, 0x21	; 33
     c7a:	09 f4       	brne	.+2      	; 0xc7e <service_brain+0x46>
     c7c:	67 c1       	rjmp	.+718    	; 0xf4c <service_brain+0x314>
     c7e:	83 32       	cpi	r24, 0x23	; 35
     c80:	09 f4       	brne	.+2      	; 0xc84 <service_brain+0x4c>
     c82:	82 c0       	rjmp	.+260    	; 0xd88 <service_brain+0x150>
     c84:	80 32       	cpi	r24, 0x20	; 32
     c86:	09 f0       	breq	.+2      	; 0xc8a <service_brain+0x52>
     c88:	b4 c2       	rjmp	.+1384   	; 0x11f2 <service_brain+0x5ba>
     c8a:	0d c0       	rjmp	.+26     	; 0xca6 <service_brain+0x6e>
     c8c:	86 32       	cpi	r24, 0x26	; 38
     c8e:	09 f4       	brne	.+2      	; 0xc92 <service_brain+0x5a>
     c90:	04 c2       	rjmp	.+1032   	; 0x109a <service_brain+0x462>
     c92:	86 32       	cpi	r24, 0x26	; 38
     c94:	08 f4       	brcc	.+2      	; 0xc98 <service_brain+0x60>
     c96:	c3 c1       	rjmp	.+902    	; 0x101e <service_brain+0x3e6>
     c98:	87 32       	cpi	r24, 0x27	; 39
     c9a:	09 f4       	brne	.+2      	; 0xc9e <service_brain+0x66>
     c9c:	38 c2       	rjmp	.+1136   	; 0x110e <service_brain+0x4d6>
     c9e:	88 32       	cpi	r24, 0x28	; 40
     ca0:	09 f0       	breq	.+2      	; 0xca4 <service_brain+0x6c>
     ca2:	a7 c2       	rjmp	.+1358   	; 0x11f2 <service_brain+0x5ba>
     ca4:	6e c2       	rjmp	.+1244   	; 0x1182 <service_brain+0x54a>
			case MENU_OUTPUT:
				adc_data(0, VOLTAGE_POS, meter_value); //A V+
     ca6:	80 e0       	ldi	r24, 0x00	; 0
     ca8:	67 e6       	ldi	r22, 0x67	; 103
     caa:	ae 01       	movw	r20, r28
     cac:	4f 5f       	subi	r20, 0xFF	; 255
     cae:	5f 4f       	sbci	r21, 0xFF	; 255
     cb0:	0e 94 cf 01 	call	0x39e	; 0x39e <adc_data>
				lcd_update("75 1 ", meter_value);
     cb4:	81 ed       	ldi	r24, 0xD1	; 209
     cb6:	90 e2       	ldi	r25, 0x20	; 32
     cb8:	be 01       	movw	r22, r28
     cba:	6f 5f       	subi	r22, 0xFF	; 255
     cbc:	7f 4f       	sbci	r23, 0xFF	; 255
     cbe:	0e 94 29 0c 	call	0x1852	; 0x1852 <lcd_update>
				adc_data(1, CURRENT_HI_RES, meter_value); //A I+
     cc2:	81 e0       	ldi	r24, 0x01	; 1
     cc4:	6a e6       	ldi	r22, 0x6A	; 106
     cc6:	ae 01       	movw	r20, r28
     cc8:	4f 5f       	subi	r20, 0xFF	; 255
     cca:	5f 4f       	sbci	r21, 0xFF	; 255
     ccc:	0e 94 cf 01 	call	0x39e	; 0x39e <adc_data>
				lcd_update("75 11 ", meter_value);
     cd0:	87 ed       	ldi	r24, 0xD7	; 215
     cd2:	90 e2       	ldi	r25, 0x20	; 32
     cd4:	be 01       	movw	r22, r28
     cd6:	6f 5f       	subi	r22, 0xFF	; 255
     cd8:	7f 4f       	sbci	r23, 0xFF	; 255
     cda:	0e 94 29 0c 	call	0x1852	; 0x1852 <lcd_update>
				adc_data(4, VOLTAGE_POS, meter_value); //B V+
     cde:	84 e0       	ldi	r24, 0x04	; 4
     ce0:	67 e6       	ldi	r22, 0x67	; 103
     ce2:	ae 01       	movw	r20, r28
     ce4:	4f 5f       	subi	r20, 0xFF	; 255
     ce6:	5f 4f       	sbci	r21, 0xFF	; 255
     ce8:	0e 94 cf 01 	call	0x39e	; 0x39e <adc_data>
				lcd_update("75 2 ", meter_value);
     cec:	8e ed       	ldi	r24, 0xDE	; 222
     cee:	90 e2       	ldi	r25, 0x20	; 32
     cf0:	be 01       	movw	r22, r28
     cf2:	6f 5f       	subi	r22, 0xFF	; 255
     cf4:	7f 4f       	sbci	r23, 0xFF	; 255
     cf6:	0e 94 29 0c 	call	0x1852	; 0x1852 <lcd_update>
				adc_data(5, CURRENT_HI_RES, meter_value); //B I+
     cfa:	85 e0       	ldi	r24, 0x05	; 5
     cfc:	6a e6       	ldi	r22, 0x6A	; 106
     cfe:	ae 01       	movw	r20, r28
     d00:	4f 5f       	subi	r20, 0xFF	; 255
     d02:	5f 4f       	sbci	r21, 0xFF	; 255
     d04:	0e 94 cf 01 	call	0x39e	; 0x39e <adc_data>
				lcd_update("75 21 ", meter_value);
     d08:	84 ee       	ldi	r24, 0xE4	; 228
     d0a:	90 e2       	ldi	r25, 0x20	; 32
     d0c:	be 01       	movw	r22, r28
     d0e:	6f 5f       	subi	r22, 0xFF	; 255
     d10:	7f 4f       	sbci	r23, 0xFF	; 255
     d12:	0e 94 29 0c 	call	0x1852	; 0x1852 <lcd_update>
				adc_data(8, VOLTAGE_POS, meter_value); //C V+
     d16:	88 e0       	ldi	r24, 0x08	; 8
     d18:	67 e6       	ldi	r22, 0x67	; 103
     d1a:	ae 01       	movw	r20, r28
     d1c:	4f 5f       	subi	r20, 0xFF	; 255
     d1e:	5f 4f       	sbci	r21, 0xFF	; 255
     d20:	0e 94 cf 01 	call	0x39e	; 0x39e <adc_data>
				lcd_update("75 3 ", meter_value);
     d24:	8b ee       	ldi	r24, 0xEB	; 235
     d26:	90 e2       	ldi	r25, 0x20	; 32
     d28:	be 01       	movw	r22, r28
     d2a:	6f 5f       	subi	r22, 0xFF	; 255
     d2c:	7f 4f       	sbci	r23, 0xFF	; 255
     d2e:	0e 94 29 0c 	call	0x1852	; 0x1852 <lcd_update>
				adc_data(9, CURRENT_HI_RES, meter_value); //C I+
     d32:	89 e0       	ldi	r24, 0x09	; 9
     d34:	6a e6       	ldi	r22, 0x6A	; 106
     d36:	ae 01       	movw	r20, r28
     d38:	4f 5f       	subi	r20, 0xFF	; 255
     d3a:	5f 4f       	sbci	r21, 0xFF	; 255
     d3c:	0e 94 cf 01 	call	0x39e	; 0x39e <adc_data>
				lcd_update("75 31 ", meter_value);
     d40:	81 ef       	ldi	r24, 0xF1	; 241
     d42:	90 e2       	ldi	r25, 0x20	; 32
     d44:	be 01       	movw	r22, r28
     d46:	6f 5f       	subi	r22, 0xFF	; 255
     d48:	7f 4f       	sbci	r23, 0xFF	; 255
     d4a:	0e 94 29 0c 	call	0x1852	; 0x1852 <lcd_update>
				adc_data(12, VOLTAGE_POS, meter_value); //D V+
     d4e:	8c e0       	ldi	r24, 0x0C	; 12
     d50:	67 e6       	ldi	r22, 0x67	; 103
     d52:	ae 01       	movw	r20, r28
     d54:	4f 5f       	subi	r20, 0xFF	; 255
     d56:	5f 4f       	sbci	r21, 0xFF	; 255
     d58:	0e 94 cf 01 	call	0x39e	; 0x39e <adc_data>
				lcd_update("75 4 ", meter_value);
     d5c:	88 ef       	ldi	r24, 0xF8	; 248
     d5e:	90 e2       	ldi	r25, 0x20	; 32
     d60:	be 01       	movw	r22, r28
     d62:	6f 5f       	subi	r22, 0xFF	; 255
     d64:	7f 4f       	sbci	r23, 0xFF	; 255
     d66:	0e 94 29 0c 	call	0x1852	; 0x1852 <lcd_update>
				adc_data(13, CURRENT_HI_RES, meter_value); //D I+
     d6a:	8d e0       	ldi	r24, 0x0D	; 13
     d6c:	6a e6       	ldi	r22, 0x6A	; 106
     d6e:	ae 01       	movw	r20, r28
     d70:	4f 5f       	subi	r20, 0xFF	; 255
     d72:	5f 4f       	sbci	r21, 0xFF	; 255
     d74:	0e 94 cf 01 	call	0x39e	; 0x39e <adc_data>
				lcd_update("75 41 ", meter_value);
     d78:	8e ef       	ldi	r24, 0xFE	; 254
     d7a:	90 e2       	ldi	r25, 0x20	; 32
     d7c:	be 01       	movw	r22, r28
     d7e:	6f 5f       	subi	r22, 0xFF	; 255
     d80:	7f 4f       	sbci	r23, 0xFF	; 255
     d82:	0e 94 29 0c 	call	0x1852	; 0x1852 <lcd_update>
				break;
     d86:	35 c2       	rjmp	.+1130   	; 0x11f2 <service_brain+0x5ba>
			case MENU_DETAIL_AB:
				adc_data(0, VOLTAGE_POS, meter_value); //A V+
     d88:	80 e0       	ldi	r24, 0x00	; 0
     d8a:	67 e6       	ldi	r22, 0x67	; 103
     d8c:	ae 01       	movw	r20, r28
     d8e:	4f 5f       	subi	r20, 0xFF	; 255
     d90:	5f 4f       	sbci	r21, 0xFF	; 255
     d92:	0e 94 cf 01 	call	0x39e	; 0x39e <adc_data>
				lcd_update("75 50 ", meter_value);
     d96:	85 e0       	ldi	r24, 0x05	; 5
     d98:	91 e2       	ldi	r25, 0x21	; 33
     d9a:	be 01       	movw	r22, r28
     d9c:	6f 5f       	subi	r22, 0xFF	; 255
     d9e:	7f 4f       	sbci	r23, 0xFF	; 255
     da0:	0e 94 29 0c 	call	0x1852	; 0x1852 <lcd_update>
				adc_data(1, CURRENT_HI_RES, meter_value); //A I+
     da4:	81 e0       	ldi	r24, 0x01	; 1
     da6:	6a e6       	ldi	r22, 0x6A	; 106
     da8:	ae 01       	movw	r20, r28
     daa:	4f 5f       	subi	r20, 0xFF	; 255
     dac:	5f 4f       	sbci	r21, 0xFF	; 255
     dae:	0e 94 cf 01 	call	0x39e	; 0x39e <adc_data>
				lcd_update("75 51 ", meter_value);
     db2:	8c e0       	ldi	r24, 0x0C	; 12
     db4:	91 e2       	ldi	r25, 0x21	; 33
     db6:	be 01       	movw	r22, r28
     db8:	6f 5f       	subi	r22, 0xFF	; 255
     dba:	7f 4f       	sbci	r23, 0xFF	; 255
     dbc:	0e 94 29 0c 	call	0x1852	; 0x1852 <lcd_update>
				adc_data(2, VOLTAGE_NEG, meter_value); //A V-
     dc0:	82 e0       	ldi	r24, 0x02	; 2
     dc2:	68 e6       	ldi	r22, 0x68	; 104
     dc4:	ae 01       	movw	r20, r28
     dc6:	4f 5f       	subi	r20, 0xFF	; 255
     dc8:	5f 4f       	sbci	r21, 0xFF	; 255
     dca:	0e 94 cf 01 	call	0x39e	; 0x39e <adc_data>
				lcd_update("75 52 -", meter_value);
     dce:	83 e1       	ldi	r24, 0x13	; 19
     dd0:	91 e2       	ldi	r25, 0x21	; 33
     dd2:	be 01       	movw	r22, r28
     dd4:	6f 5f       	subi	r22, 0xFF	; 255
     dd6:	7f 4f       	sbci	r23, 0xFF	; 255
     dd8:	0e 94 29 0c 	call	0x1852	; 0x1852 <lcd_update>
				adc_data(3, CURRENT_HI_RES, meter_value); //A I-
     ddc:	83 e0       	ldi	r24, 0x03	; 3
     dde:	6a e6       	ldi	r22, 0x6A	; 106
     de0:	ae 01       	movw	r20, r28
     de2:	4f 5f       	subi	r20, 0xFF	; 255
     de4:	5f 4f       	sbci	r21, 0xFF	; 255
     de6:	0e 94 cf 01 	call	0x39e	; 0x39e <adc_data>
				lcd_update("75 53 -", meter_value);
     dea:	8b e1       	ldi	r24, 0x1B	; 27
     dec:	91 e2       	ldi	r25, 0x21	; 33
     dee:	be 01       	movw	r22, r28
     df0:	6f 5f       	subi	r22, 0xFF	; 255
     df2:	7f 4f       	sbci	r23, 0xFF	; 255
     df4:	0e 94 29 0c 	call	0x1852	; 0x1852 <lcd_update>
				adc_data(4, VOLTAGE_POS, meter_value); //B V+
     df8:	84 e0       	ldi	r24, 0x04	; 4
     dfa:	67 e6       	ldi	r22, 0x67	; 103
     dfc:	ae 01       	movw	r20, r28
     dfe:	4f 5f       	subi	r20, 0xFF	; 255
     e00:	5f 4f       	sbci	r21, 0xFF	; 255
     e02:	0e 94 cf 01 	call	0x39e	; 0x39e <adc_data>
				lcd_update("75 54 ", meter_value);
     e06:	83 e2       	ldi	r24, 0x23	; 35
     e08:	91 e2       	ldi	r25, 0x21	; 33
     e0a:	be 01       	movw	r22, r28
     e0c:	6f 5f       	subi	r22, 0xFF	; 255
     e0e:	7f 4f       	sbci	r23, 0xFF	; 255
     e10:	0e 94 29 0c 	call	0x1852	; 0x1852 <lcd_update>
				adc_data(5, CURRENT_HI_RES, meter_value); //B I+
     e14:	85 e0       	ldi	r24, 0x05	; 5
     e16:	6a e6       	ldi	r22, 0x6A	; 106
     e18:	ae 01       	movw	r20, r28
     e1a:	4f 5f       	subi	r20, 0xFF	; 255
     e1c:	5f 4f       	sbci	r21, 0xFF	; 255
     e1e:	0e 94 cf 01 	call	0x39e	; 0x39e <adc_data>
				lcd_update("75 55 ", meter_value);
     e22:	8a e2       	ldi	r24, 0x2A	; 42
     e24:	91 e2       	ldi	r25, 0x21	; 33
     e26:	be 01       	movw	r22, r28
     e28:	6f 5f       	subi	r22, 0xFF	; 255
     e2a:	7f 4f       	sbci	r23, 0xFF	; 255
     e2c:	0e 94 29 0c 	call	0x1852	; 0x1852 <lcd_update>
				adc_data(6, VOLTAGE_NEG, meter_value); //B V-
     e30:	86 e0       	ldi	r24, 0x06	; 6
     e32:	68 e6       	ldi	r22, 0x68	; 104
     e34:	ae 01       	movw	r20, r28
     e36:	4f 5f       	subi	r20, 0xFF	; 255
     e38:	5f 4f       	sbci	r21, 0xFF	; 255
     e3a:	0e 94 cf 01 	call	0x39e	; 0x39e <adc_data>
				lcd_update("75 56 -", meter_value);
     e3e:	81 e3       	ldi	r24, 0x31	; 49
     e40:	91 e2       	ldi	r25, 0x21	; 33
     e42:	be 01       	movw	r22, r28
     e44:	6f 5f       	subi	r22, 0xFF	; 255
     e46:	7f 4f       	sbci	r23, 0xFF	; 255
     e48:	0e 94 29 0c 	call	0x1852	; 0x1852 <lcd_update>
				adc_data(7, CURRENT_HI_RES, meter_value); //B I-
     e4c:	87 e0       	ldi	r24, 0x07	; 7
     e4e:	6a e6       	ldi	r22, 0x6A	; 106
     e50:	ae 01       	movw	r20, r28
     e52:	4f 5f       	subi	r20, 0xFF	; 255
     e54:	5f 4f       	sbci	r21, 0xFF	; 255
     e56:	0e 94 cf 01 	call	0x39e	; 0x39e <adc_data>
				lcd_update("75 57 -", meter_value);
     e5a:	89 e3       	ldi	r24, 0x39	; 57
     e5c:	91 e2       	ldi	r25, 0x21	; 33
     e5e:	be 01       	movw	r22, r28
     e60:	6f 5f       	subi	r22, 0xFF	; 255
     e62:	7f 4f       	sbci	r23, 0xFF	; 255
     e64:	0e 94 29 0c 	call	0x1852	; 0x1852 <lcd_update>
				break;
     e68:	c4 c1       	rjmp	.+904    	; 0x11f2 <service_brain+0x5ba>
			case MENU_DETAIL_CD:
				adc_data(8, VOLTAGE_POS, meter_value); //C V+
     e6a:	88 e0       	ldi	r24, 0x08	; 8
     e6c:	67 e6       	ldi	r22, 0x67	; 103
     e6e:	ae 01       	movw	r20, r28
     e70:	4f 5f       	subi	r20, 0xFF	; 255
     e72:	5f 4f       	sbci	r21, 0xFF	; 255
     e74:	0e 94 cf 01 	call	0x39e	; 0x39e <adc_data>
				lcd_update("75 50 ", meter_value);
     e78:	85 e0       	ldi	r24, 0x05	; 5
     e7a:	91 e2       	ldi	r25, 0x21	; 33
     e7c:	be 01       	movw	r22, r28
     e7e:	6f 5f       	subi	r22, 0xFF	; 255
     e80:	7f 4f       	sbci	r23, 0xFF	; 255
     e82:	0e 94 29 0c 	call	0x1852	; 0x1852 <lcd_update>
				adc_data(9, CURRENT_HI_RES, meter_value); //C I+
     e86:	89 e0       	ldi	r24, 0x09	; 9
     e88:	6a e6       	ldi	r22, 0x6A	; 106
     e8a:	ae 01       	movw	r20, r28
     e8c:	4f 5f       	subi	r20, 0xFF	; 255
     e8e:	5f 4f       	sbci	r21, 0xFF	; 255
     e90:	0e 94 cf 01 	call	0x39e	; 0x39e <adc_data>
				lcd_update("75 51 ", meter_value);
     e94:	8c e0       	ldi	r24, 0x0C	; 12
     e96:	91 e2       	ldi	r25, 0x21	; 33
     e98:	be 01       	movw	r22, r28
     e9a:	6f 5f       	subi	r22, 0xFF	; 255
     e9c:	7f 4f       	sbci	r23, 0xFF	; 255
     e9e:	0e 94 29 0c 	call	0x1852	; 0x1852 <lcd_update>
				adc_data(10, VOLTAGE_NEG, meter_value); //C V-
     ea2:	8a e0       	ldi	r24, 0x0A	; 10
     ea4:	68 e6       	ldi	r22, 0x68	; 104
     ea6:	ae 01       	movw	r20, r28
     ea8:	4f 5f       	subi	r20, 0xFF	; 255
     eaa:	5f 4f       	sbci	r21, 0xFF	; 255
     eac:	0e 94 cf 01 	call	0x39e	; 0x39e <adc_data>
				lcd_update("75 52 -", meter_value);
     eb0:	83 e1       	ldi	r24, 0x13	; 19
     eb2:	91 e2       	ldi	r25, 0x21	; 33
     eb4:	be 01       	movw	r22, r28
     eb6:	6f 5f       	subi	r22, 0xFF	; 255
     eb8:	7f 4f       	sbci	r23, 0xFF	; 255
     eba:	0e 94 29 0c 	call	0x1852	; 0x1852 <lcd_update>
				adc_data(11, CURRENT_HI_RES, meter_value); //C I-
     ebe:	8b e0       	ldi	r24, 0x0B	; 11
     ec0:	6a e6       	ldi	r22, 0x6A	; 106
     ec2:	ae 01       	movw	r20, r28
     ec4:	4f 5f       	subi	r20, 0xFF	; 255
     ec6:	5f 4f       	sbci	r21, 0xFF	; 255
     ec8:	0e 94 cf 01 	call	0x39e	; 0x39e <adc_data>
				lcd_update("75 53 -", meter_value);
     ecc:	8b e1       	ldi	r24, 0x1B	; 27
     ece:	91 e2       	ldi	r25, 0x21	; 33
     ed0:	be 01       	movw	r22, r28
     ed2:	6f 5f       	subi	r22, 0xFF	; 255
     ed4:	7f 4f       	sbci	r23, 0xFF	; 255
     ed6:	0e 94 29 0c 	call	0x1852	; 0x1852 <lcd_update>
				adc_data(12, VOLTAGE_POS, meter_value); //D V+
     eda:	8c e0       	ldi	r24, 0x0C	; 12
     edc:	67 e6       	ldi	r22, 0x67	; 103
     ede:	ae 01       	movw	r20, r28
     ee0:	4f 5f       	subi	r20, 0xFF	; 255
     ee2:	5f 4f       	sbci	r21, 0xFF	; 255
     ee4:	0e 94 cf 01 	call	0x39e	; 0x39e <adc_data>
				lcd_update("75 54 ", meter_value);
     ee8:	83 e2       	ldi	r24, 0x23	; 35
     eea:	91 e2       	ldi	r25, 0x21	; 33
     eec:	be 01       	movw	r22, r28
     eee:	6f 5f       	subi	r22, 0xFF	; 255
     ef0:	7f 4f       	sbci	r23, 0xFF	; 255
     ef2:	0e 94 29 0c 	call	0x1852	; 0x1852 <lcd_update>
				adc_data(13, CURRENT_HI_RES, meter_value); //D I+
     ef6:	8d e0       	ldi	r24, 0x0D	; 13
     ef8:	6a e6       	ldi	r22, 0x6A	; 106
     efa:	ae 01       	movw	r20, r28
     efc:	4f 5f       	subi	r20, 0xFF	; 255
     efe:	5f 4f       	sbci	r21, 0xFF	; 255
     f00:	0e 94 cf 01 	call	0x39e	; 0x39e <adc_data>
				lcd_update("75 55 ", meter_value);
     f04:	8a e2       	ldi	r24, 0x2A	; 42
     f06:	91 e2       	ldi	r25, 0x21	; 33
     f08:	be 01       	movw	r22, r28
     f0a:	6f 5f       	subi	r22, 0xFF	; 255
     f0c:	7f 4f       	sbci	r23, 0xFF	; 255
     f0e:	0e 94 29 0c 	call	0x1852	; 0x1852 <lcd_update>
				adc_data(14, VOLTAGE_NEG, meter_value); //D V-
     f12:	8e e0       	ldi	r24, 0x0E	; 14
     f14:	68 e6       	ldi	r22, 0x68	; 104
     f16:	ae 01       	movw	r20, r28
     f18:	4f 5f       	subi	r20, 0xFF	; 255
     f1a:	5f 4f       	sbci	r21, 0xFF	; 255
     f1c:	0e 94 cf 01 	call	0x39e	; 0x39e <adc_data>
				lcd_update("75 56 -", meter_value);
     f20:	81 e3       	ldi	r24, 0x31	; 49
     f22:	91 e2       	ldi	r25, 0x21	; 33
     f24:	be 01       	movw	r22, r28
     f26:	6f 5f       	subi	r22, 0xFF	; 255
     f28:	7f 4f       	sbci	r23, 0xFF	; 255
     f2a:	0e 94 29 0c 	call	0x1852	; 0x1852 <lcd_update>
				adc_data(15, CURRENT_HI_RES, meter_value); //D I-
     f2e:	8f e0       	ldi	r24, 0x0F	; 15
     f30:	6a e6       	ldi	r22, 0x6A	; 106
     f32:	ae 01       	movw	r20, r28
     f34:	4f 5f       	subi	r20, 0xFF	; 255
     f36:	5f 4f       	sbci	r21, 0xFF	; 255
     f38:	0e 94 cf 01 	call	0x39e	; 0x39e <adc_data>
				lcd_update("75 57 -", meter_value);
     f3c:	89 e3       	ldi	r24, 0x39	; 57
     f3e:	91 e2       	ldi	r25, 0x21	; 33
     f40:	be 01       	movw	r22, r28
     f42:	6f 5f       	subi	r22, 0xFF	; 255
     f44:	7f 4f       	sbci	r23, 0xFF	; 255
     f46:	0e 94 29 0c 	call	0x1852	; 0x1852 <lcd_update>
				break;
     f4a:	53 c1       	rjmp	.+678    	; 0x11f2 <service_brain+0x5ba>
			case MENU_CONTROL:
				pwr_adj_data(0, meter_value);
     f4c:	80 e0       	ldi	r24, 0x00	; 0
     f4e:	be 01       	movw	r22, r28
     f50:	6f 5f       	subi	r22, 0xFF	; 255
     f52:	7f 4f       	sbci	r23, 0xFF	; 255
     f54:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <pwr_adj_data>
				lcd_update("75 1 ", meter_value);
     f58:	81 ed       	ldi	r24, 0xD1	; 209
     f5a:	90 e2       	ldi	r25, 0x20	; 32
     f5c:	be 01       	movw	r22, r28
     f5e:	6f 5f       	subi	r22, 0xFF	; 255
     f60:	7f 4f       	sbci	r23, 0xFF	; 255
     f62:	0e 94 29 0c 	call	0x1852	; 0x1852 <lcd_update>
				pwr_adj_data(1, meter_value);
     f66:	81 e0       	ldi	r24, 0x01	; 1
     f68:	be 01       	movw	r22, r28
     f6a:	6f 5f       	subi	r22, 0xFF	; 255
     f6c:	7f 4f       	sbci	r23, 0xFF	; 255
     f6e:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <pwr_adj_data>
				lcd_update("75 11 ", meter_value);
     f72:	87 ed       	ldi	r24, 0xD7	; 215
     f74:	90 e2       	ldi	r25, 0x20	; 32
     f76:	be 01       	movw	r22, r28
     f78:	6f 5f       	subi	r22, 0xFF	; 255
     f7a:	7f 4f       	sbci	r23, 0xFF	; 255
     f7c:	0e 94 29 0c 	call	0x1852	; 0x1852 <lcd_update>
				pwr_adj_data(2, meter_value);
     f80:	82 e0       	ldi	r24, 0x02	; 2
     f82:	be 01       	movw	r22, r28
     f84:	6f 5f       	subi	r22, 0xFF	; 255
     f86:	7f 4f       	sbci	r23, 0xFF	; 255
     f88:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <pwr_adj_data>
				lcd_update("75 2 ", meter_value);
     f8c:	8e ed       	ldi	r24, 0xDE	; 222
     f8e:	90 e2       	ldi	r25, 0x20	; 32
     f90:	be 01       	movw	r22, r28
     f92:	6f 5f       	subi	r22, 0xFF	; 255
     f94:	7f 4f       	sbci	r23, 0xFF	; 255
     f96:	0e 94 29 0c 	call	0x1852	; 0x1852 <lcd_update>
				pwr_adj_data(3, meter_value);
     f9a:	83 e0       	ldi	r24, 0x03	; 3
     f9c:	be 01       	movw	r22, r28
     f9e:	6f 5f       	subi	r22, 0xFF	; 255
     fa0:	7f 4f       	sbci	r23, 0xFF	; 255
     fa2:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <pwr_adj_data>
				lcd_update("75 21 ", meter_value);
     fa6:	84 ee       	ldi	r24, 0xE4	; 228
     fa8:	90 e2       	ldi	r25, 0x20	; 32
     faa:	be 01       	movw	r22, r28
     fac:	6f 5f       	subi	r22, 0xFF	; 255
     fae:	7f 4f       	sbci	r23, 0xFF	; 255
     fb0:	0e 94 29 0c 	call	0x1852	; 0x1852 <lcd_update>
				pwr_adj_data(4, meter_value);
     fb4:	84 e0       	ldi	r24, 0x04	; 4
     fb6:	be 01       	movw	r22, r28
     fb8:	6f 5f       	subi	r22, 0xFF	; 255
     fba:	7f 4f       	sbci	r23, 0xFF	; 255
     fbc:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <pwr_adj_data>
				lcd_update("75 3 ", meter_value);
     fc0:	8b ee       	ldi	r24, 0xEB	; 235
     fc2:	90 e2       	ldi	r25, 0x20	; 32
     fc4:	be 01       	movw	r22, r28
     fc6:	6f 5f       	subi	r22, 0xFF	; 255
     fc8:	7f 4f       	sbci	r23, 0xFF	; 255
     fca:	0e 94 29 0c 	call	0x1852	; 0x1852 <lcd_update>
				pwr_adj_data(5, meter_value);
     fce:	85 e0       	ldi	r24, 0x05	; 5
     fd0:	be 01       	movw	r22, r28
     fd2:	6f 5f       	subi	r22, 0xFF	; 255
     fd4:	7f 4f       	sbci	r23, 0xFF	; 255
     fd6:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <pwr_adj_data>
				lcd_update("75 31 ", meter_value);
     fda:	81 ef       	ldi	r24, 0xF1	; 241
     fdc:	90 e2       	ldi	r25, 0x20	; 32
     fde:	be 01       	movw	r22, r28
     fe0:	6f 5f       	subi	r22, 0xFF	; 255
     fe2:	7f 4f       	sbci	r23, 0xFF	; 255
     fe4:	0e 94 29 0c 	call	0x1852	; 0x1852 <lcd_update>
				pwr_adj_data(6, meter_value);
     fe8:	86 e0       	ldi	r24, 0x06	; 6
     fea:	be 01       	movw	r22, r28
     fec:	6f 5f       	subi	r22, 0xFF	; 255
     fee:	7f 4f       	sbci	r23, 0xFF	; 255
     ff0:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <pwr_adj_data>
				lcd_update("75 4 ", meter_value);
     ff4:	88 ef       	ldi	r24, 0xF8	; 248
     ff6:	90 e2       	ldi	r25, 0x20	; 32
     ff8:	be 01       	movw	r22, r28
     ffa:	6f 5f       	subi	r22, 0xFF	; 255
     ffc:	7f 4f       	sbci	r23, 0xFF	; 255
     ffe:	0e 94 29 0c 	call	0x1852	; 0x1852 <lcd_update>
				pwr_adj_data(7, meter_value);
    1002:	87 e0       	ldi	r24, 0x07	; 7
    1004:	be 01       	movw	r22, r28
    1006:	6f 5f       	subi	r22, 0xFF	; 255
    1008:	7f 4f       	sbci	r23, 0xFF	; 255
    100a:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <pwr_adj_data>
				lcd_update("75 41 ", meter_value);
    100e:	8e ef       	ldi	r24, 0xFE	; 254
    1010:	90 e2       	ldi	r25, 0x20	; 32
    1012:	be 01       	movw	r22, r28
    1014:	6f 5f       	subi	r22, 0xFF	; 255
    1016:	7f 4f       	sbci	r23, 0xFF	; 255
    1018:	0e 94 29 0c 	call	0x1852	; 0x1852 <lcd_update>
				break;
    101c:	ea c0       	rjmp	.+468    	; 0x11f2 <service_brain+0x5ba>
			case MENU_DIAL_A:
				if ((pwr_adj_channel_dirty & B8(00000011)) > 0){
    101e:	80 91 b1 26 	lds	r24, 0x26B1
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	83 70       	andi	r24, 0x03	; 3
    1026:	90 70       	andi	r25, 0x00	; 0
    1028:	18 16       	cp	r1, r24
    102a:	19 06       	cpc	r1, r25
    102c:	0c f0       	brlt	.+2      	; 0x1030 <service_brain+0x3f8>
    102e:	e1 c0       	rjmp	.+450    	; 0x11f2 <service_brain+0x5ba>
					//Control Inputs
					pwr_adj_control(0, meter_value);
    1030:	80 e0       	ldi	r24, 0x00	; 0
    1032:	be 01       	movw	r22, r28
    1034:	6f 5f       	subi	r22, 0xFF	; 255
    1036:	7f 4f       	sbci	r23, 0xFF	; 255
    1038:	0e 94 1f 11 	call	0x223e	; 0x223e <pwr_adj_control>
					lcd_update("75 94 ", meter_value);
    103c:	81 e4       	ldi	r24, 0x41	; 65
    103e:	91 e2       	ldi	r25, 0x21	; 33
    1040:	be 01       	movw	r22, r28
    1042:	6f 5f       	subi	r22, 0xFF	; 255
    1044:	7f 4f       	sbci	r23, 0xFF	; 255
    1046:	0e 94 29 0c 	call	0x1852	; 0x1852 <lcd_update>
					pwr_adj_control(1, meter_value);
    104a:	81 e0       	ldi	r24, 0x01	; 1
    104c:	be 01       	movw	r22, r28
    104e:	6f 5f       	subi	r22, 0xFF	; 255
    1050:	7f 4f       	sbci	r23, 0xFF	; 255
    1052:	0e 94 1f 11 	call	0x223e	; 0x223e <pwr_adj_control>
					lcd_update("75 95 ", meter_value);
    1056:	88 e4       	ldi	r24, 0x48	; 72
    1058:	91 e2       	ldi	r25, 0x21	; 33
    105a:	be 01       	movw	r22, r28
    105c:	6f 5f       	subi	r22, 0xFF	; 255
    105e:	7f 4f       	sbci	r23, 0xFF	; 255
    1060:	0e 94 29 0c 	call	0x1852	; 0x1852 <lcd_update>
					//Voltage Monitors
					pwr_adj_data(0, meter_value);
    1064:	80 e0       	ldi	r24, 0x00	; 0
    1066:	be 01       	movw	r22, r28
    1068:	6f 5f       	subi	r22, 0xFF	; 255
    106a:	7f 4f       	sbci	r23, 0xFF	; 255
    106c:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <pwr_adj_data>
					lcd_update("75 92 ", meter_value);
    1070:	8f e4       	ldi	r24, 0x4F	; 79
    1072:	91 e2       	ldi	r25, 0x21	; 33
    1074:	be 01       	movw	r22, r28
    1076:	6f 5f       	subi	r22, 0xFF	; 255
    1078:	7f 4f       	sbci	r23, 0xFF	; 255
    107a:	0e 94 29 0c 	call	0x1852	; 0x1852 <lcd_update>
					pwr_adj_data(1, meter_value);
    107e:	81 e0       	ldi	r24, 0x01	; 1
    1080:	be 01       	movw	r22, r28
    1082:	6f 5f       	subi	r22, 0xFF	; 255
    1084:	7f 4f       	sbci	r23, 0xFF	; 255
    1086:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <pwr_adj_data>
					lcd_update("75 93 ", meter_value);
    108a:	86 e5       	ldi	r24, 0x56	; 86
    108c:	91 e2       	ldi	r25, 0x21	; 33
    108e:	be 01       	movw	r22, r28
    1090:	6f 5f       	subi	r22, 0xFF	; 255
    1092:	7f 4f       	sbci	r23, 0xFF	; 255
    1094:	0e 94 29 0c 	call	0x1852	; 0x1852 <lcd_update>
    1098:	ac c0       	rjmp	.+344    	; 0x11f2 <service_brain+0x5ba>
				}					
				break;
			case MENU_DIAL_B:
				if ((pwr_adj_channel_dirty & B8(00001100)) > 0){
    109a:	80 91 b1 26 	lds	r24, 0x26B1
    109e:	8c 70       	andi	r24, 0x0C	; 12
    10a0:	09 f4       	brne	.+2      	; 0x10a4 <service_brain+0x46c>
    10a2:	a7 c0       	rjmp	.+334    	; 0x11f2 <service_brain+0x5ba>
					//Control Inputs
					pwr_adj_control(2, meter_value);
    10a4:	82 e0       	ldi	r24, 0x02	; 2
    10a6:	be 01       	movw	r22, r28
    10a8:	6f 5f       	subi	r22, 0xFF	; 255
    10aa:	7f 4f       	sbci	r23, 0xFF	; 255
    10ac:	0e 94 1f 11 	call	0x223e	; 0x223e <pwr_adj_control>
					lcd_update("75 94 ", meter_value);
    10b0:	81 e4       	ldi	r24, 0x41	; 65
    10b2:	91 e2       	ldi	r25, 0x21	; 33
    10b4:	be 01       	movw	r22, r28
    10b6:	6f 5f       	subi	r22, 0xFF	; 255
    10b8:	7f 4f       	sbci	r23, 0xFF	; 255
    10ba:	0e 94 29 0c 	call	0x1852	; 0x1852 <lcd_update>
					pwr_adj_control(3, meter_value);
    10be:	83 e0       	ldi	r24, 0x03	; 3
    10c0:	be 01       	movw	r22, r28
    10c2:	6f 5f       	subi	r22, 0xFF	; 255
    10c4:	7f 4f       	sbci	r23, 0xFF	; 255
    10c6:	0e 94 1f 11 	call	0x223e	; 0x223e <pwr_adj_control>
					lcd_update("75 95 ", meter_value);
    10ca:	88 e4       	ldi	r24, 0x48	; 72
    10cc:	91 e2       	ldi	r25, 0x21	; 33
    10ce:	be 01       	movw	r22, r28
    10d0:	6f 5f       	subi	r22, 0xFF	; 255
    10d2:	7f 4f       	sbci	r23, 0xFF	; 255
    10d4:	0e 94 29 0c 	call	0x1852	; 0x1852 <lcd_update>
					//Voltage Monitors
					pwr_adj_data(2, meter_value);
    10d8:	82 e0       	ldi	r24, 0x02	; 2
    10da:	be 01       	movw	r22, r28
    10dc:	6f 5f       	subi	r22, 0xFF	; 255
    10de:	7f 4f       	sbci	r23, 0xFF	; 255
    10e0:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <pwr_adj_data>
					lcd_update("75 92 ", meter_value);
    10e4:	8f e4       	ldi	r24, 0x4F	; 79
    10e6:	91 e2       	ldi	r25, 0x21	; 33
    10e8:	be 01       	movw	r22, r28
    10ea:	6f 5f       	subi	r22, 0xFF	; 255
    10ec:	7f 4f       	sbci	r23, 0xFF	; 255
    10ee:	0e 94 29 0c 	call	0x1852	; 0x1852 <lcd_update>
					pwr_adj_data(3, meter_value);
    10f2:	83 e0       	ldi	r24, 0x03	; 3
    10f4:	be 01       	movw	r22, r28
    10f6:	6f 5f       	subi	r22, 0xFF	; 255
    10f8:	7f 4f       	sbci	r23, 0xFF	; 255
    10fa:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <pwr_adj_data>
					lcd_update("75 93 ", meter_value);
    10fe:	86 e5       	ldi	r24, 0x56	; 86
    1100:	91 e2       	ldi	r25, 0x21	; 33
    1102:	be 01       	movw	r22, r28
    1104:	6f 5f       	subi	r22, 0xFF	; 255
    1106:	7f 4f       	sbci	r23, 0xFF	; 255
    1108:	0e 94 29 0c 	call	0x1852	; 0x1852 <lcd_update>
    110c:	72 c0       	rjmp	.+228    	; 0x11f2 <service_brain+0x5ba>
				}
				break;
			case MENU_DIAL_C:
				if ((pwr_adj_channel_dirty & B8(00110000)) > 0){
    110e:	80 91 b1 26 	lds	r24, 0x26B1
    1112:	80 73       	andi	r24, 0x30	; 48
    1114:	09 f4       	brne	.+2      	; 0x1118 <service_brain+0x4e0>
    1116:	6d c0       	rjmp	.+218    	; 0x11f2 <service_brain+0x5ba>
					//Control Inputs
					pwr_adj_control(4, meter_value);
    1118:	84 e0       	ldi	r24, 0x04	; 4
    111a:	be 01       	movw	r22, r28
    111c:	6f 5f       	subi	r22, 0xFF	; 255
    111e:	7f 4f       	sbci	r23, 0xFF	; 255
    1120:	0e 94 1f 11 	call	0x223e	; 0x223e <pwr_adj_control>
					lcd_update("75 94 ", meter_value);
    1124:	81 e4       	ldi	r24, 0x41	; 65
    1126:	91 e2       	ldi	r25, 0x21	; 33
    1128:	be 01       	movw	r22, r28
    112a:	6f 5f       	subi	r22, 0xFF	; 255
    112c:	7f 4f       	sbci	r23, 0xFF	; 255
    112e:	0e 94 29 0c 	call	0x1852	; 0x1852 <lcd_update>
					pwr_adj_control(5, meter_value);
    1132:	85 e0       	ldi	r24, 0x05	; 5
    1134:	be 01       	movw	r22, r28
    1136:	6f 5f       	subi	r22, 0xFF	; 255
    1138:	7f 4f       	sbci	r23, 0xFF	; 255
    113a:	0e 94 1f 11 	call	0x223e	; 0x223e <pwr_adj_control>
					lcd_update("75 95 ", meter_value);
    113e:	88 e4       	ldi	r24, 0x48	; 72
    1140:	91 e2       	ldi	r25, 0x21	; 33
    1142:	be 01       	movw	r22, r28
    1144:	6f 5f       	subi	r22, 0xFF	; 255
    1146:	7f 4f       	sbci	r23, 0xFF	; 255
    1148:	0e 94 29 0c 	call	0x1852	; 0x1852 <lcd_update>
					//Voltage Monitors
					pwr_adj_data(4, meter_value);
    114c:	84 e0       	ldi	r24, 0x04	; 4
    114e:	be 01       	movw	r22, r28
    1150:	6f 5f       	subi	r22, 0xFF	; 255
    1152:	7f 4f       	sbci	r23, 0xFF	; 255
    1154:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <pwr_adj_data>
					lcd_update("75 92 ", meter_value);
    1158:	8f e4       	ldi	r24, 0x4F	; 79
    115a:	91 e2       	ldi	r25, 0x21	; 33
    115c:	be 01       	movw	r22, r28
    115e:	6f 5f       	subi	r22, 0xFF	; 255
    1160:	7f 4f       	sbci	r23, 0xFF	; 255
    1162:	0e 94 29 0c 	call	0x1852	; 0x1852 <lcd_update>
					pwr_adj_data(5, meter_value);
    1166:	85 e0       	ldi	r24, 0x05	; 5
    1168:	be 01       	movw	r22, r28
    116a:	6f 5f       	subi	r22, 0xFF	; 255
    116c:	7f 4f       	sbci	r23, 0xFF	; 255
    116e:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <pwr_adj_data>
					lcd_update("75 93 ", meter_value);
    1172:	86 e5       	ldi	r24, 0x56	; 86
    1174:	91 e2       	ldi	r25, 0x21	; 33
    1176:	be 01       	movw	r22, r28
    1178:	6f 5f       	subi	r22, 0xFF	; 255
    117a:	7f 4f       	sbci	r23, 0xFF	; 255
    117c:	0e 94 29 0c 	call	0x1852	; 0x1852 <lcd_update>
    1180:	38 c0       	rjmp	.+112    	; 0x11f2 <service_brain+0x5ba>
				}
				break;
			case MENU_DIAL_D:
				if ((pwr_adj_channel_dirty & B8(11000000)) > 0){
    1182:	80 91 b1 26 	lds	r24, 0x26B1
    1186:	80 7c       	andi	r24, 0xC0	; 192
    1188:	a1 f1       	breq	.+104    	; 0x11f2 <service_brain+0x5ba>
					//Control Inputs
					pwr_adj_control(6, meter_value);
    118a:	86 e0       	ldi	r24, 0x06	; 6
    118c:	be 01       	movw	r22, r28
    118e:	6f 5f       	subi	r22, 0xFF	; 255
    1190:	7f 4f       	sbci	r23, 0xFF	; 255
    1192:	0e 94 1f 11 	call	0x223e	; 0x223e <pwr_adj_control>
					lcd_update("75 94 ", meter_value);
    1196:	81 e4       	ldi	r24, 0x41	; 65
    1198:	91 e2       	ldi	r25, 0x21	; 33
    119a:	be 01       	movw	r22, r28
    119c:	6f 5f       	subi	r22, 0xFF	; 255
    119e:	7f 4f       	sbci	r23, 0xFF	; 255
    11a0:	0e 94 29 0c 	call	0x1852	; 0x1852 <lcd_update>
					pwr_adj_control(7, meter_value);
    11a4:	87 e0       	ldi	r24, 0x07	; 7
    11a6:	be 01       	movw	r22, r28
    11a8:	6f 5f       	subi	r22, 0xFF	; 255
    11aa:	7f 4f       	sbci	r23, 0xFF	; 255
    11ac:	0e 94 1f 11 	call	0x223e	; 0x223e <pwr_adj_control>
					lcd_update("75 95 ", meter_value);
    11b0:	88 e4       	ldi	r24, 0x48	; 72
    11b2:	91 e2       	ldi	r25, 0x21	; 33
    11b4:	be 01       	movw	r22, r28
    11b6:	6f 5f       	subi	r22, 0xFF	; 255
    11b8:	7f 4f       	sbci	r23, 0xFF	; 255
    11ba:	0e 94 29 0c 	call	0x1852	; 0x1852 <lcd_update>
					//Voltage Monitors
					pwr_adj_data(6, meter_value);
    11be:	86 e0       	ldi	r24, 0x06	; 6
    11c0:	be 01       	movw	r22, r28
    11c2:	6f 5f       	subi	r22, 0xFF	; 255
    11c4:	7f 4f       	sbci	r23, 0xFF	; 255
    11c6:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <pwr_adj_data>
					lcd_update("75 92 ", meter_value);
    11ca:	8f e4       	ldi	r24, 0x4F	; 79
    11cc:	91 e2       	ldi	r25, 0x21	; 33
    11ce:	be 01       	movw	r22, r28
    11d0:	6f 5f       	subi	r22, 0xFF	; 255
    11d2:	7f 4f       	sbci	r23, 0xFF	; 255
    11d4:	0e 94 29 0c 	call	0x1852	; 0x1852 <lcd_update>
					pwr_adj_data(7, meter_value);
    11d8:	87 e0       	ldi	r24, 0x07	; 7
    11da:	be 01       	movw	r22, r28
    11dc:	6f 5f       	subi	r22, 0xFF	; 255
    11de:	7f 4f       	sbci	r23, 0xFF	; 255
    11e0:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <pwr_adj_data>
					lcd_update("75 93 ", meter_value);
    11e4:	86 e5       	ldi	r24, 0x56	; 86
    11e6:	91 e2       	ldi	r25, 0x21	; 33
    11e8:	be 01       	movw	r22, r28
    11ea:	6f 5f       	subi	r22, 0xFF	; 255
    11ec:	7f 4f       	sbci	r23, 0xFF	; 255
    11ee:	0e 94 29 0c 	call	0x1852	; 0x1852 <lcd_update>
				}
				break;
		}	
	}
}
    11f2:	2c 96       	adiw	r28, 0x0c	; 12
    11f4:	cd bf       	out	0x3d, r28	; 61
    11f6:	de bf       	out	0x3e, r29	; 62
    11f8:	df 91       	pop	r29
    11fa:	cf 91       	pop	r28
    11fc:	08 95       	ret

000011fe <eeprom_save>:
//#############################################################
//## API
//#############################################################

void eeprom_save(){
	eeprom_write_byte(&nv_STATE_power_channels, STATE_power_channels);
    11fe:	80 e0       	ldi	r24, 0x00	; 0
    1200:	90 e0       	ldi	r25, 0x00	; 0
    1202:	60 91 86 25 	lds	r22, 0x2586
    1206:	0e 94 d6 2f 	call	0x5fac	; 0x5fac <__eewr_byte_x128a1>
	eeprom_write_block((void*)&pwr_adj_values, (void*)&nv_pwr_adj_values, PWR_ADJ_NUM_CHANNELS*2); //multiple size by 2 since uint16_t = 2 bytes
    120a:	82 eb       	ldi	r24, 0xB2	; 178
    120c:	96 e2       	ldi	r25, 0x26	; 38
    120e:	61 e0       	ldi	r22, 0x01	; 1
    1210:	70 e0       	ldi	r23, 0x00	; 0
    1212:	40 e1       	ldi	r20, 0x10	; 16
    1214:	50 e0       	ldi	r21, 0x00	; 0
    1216:	0e 94 cc 2f 	call	0x5f98	; 0x5f98 <__eewr_block_x128a1>
}
    121a:	08 95       	ret

0000121c <eeprom_restore>:

void eeprom_restore(){
	STATE_power_channels = eeprom_read_byte(&nv_STATE_power_channels);
    121c:	80 e0       	ldi	r24, 0x00	; 0
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	0e 94 bc 2f 	call	0x5f78	; 0x5f78 <__eerd_byte_x128a1>
    1224:	80 93 86 25 	sts	0x2586, r24
	eeprom_read_block((void*)&pwr_adj_values, (void*)&nv_pwr_adj_values, PWR_ADJ_NUM_CHANNELS*2);
    1228:	82 eb       	ldi	r24, 0xB2	; 178
    122a:	96 e2       	ldi	r25, 0x26	; 38
    122c:	61 e0       	ldi	r22, 0x01	; 1
    122e:	70 e0       	ldi	r23, 0x00	; 0
    1230:	40 e1       	ldi	r20, 0x10	; 16
    1232:	50 e0       	ldi	r21, 0x00	; 0
    1234:	0e 94 b0 2f 	call	0x5f60	; 0x5f60 <__eerd_block_x128a1>
}
    1238:	08 95       	ret

0000123a <init_eeprom>:
//#############################################################
//## Initialization
//#############################################################

void init_eeprom(){
	eeprom_restore();
    123a:	0e 94 0e 09 	call	0x121c	; 0x121c <eeprom_restore>
}
    123e:	08 95       	ret

00001240 <eeprom_read>:
	eeprom_read_block((void*)&pwr_adj_values, (void*)&nv_pwr_adj_values, PWR_ADJ_NUM_CHANNELS*2);
}

//mostly for debugging
uint8_t eeprom_read(){
	return eeprom_read_byte(&nv_STATE_power_channels);
    1240:	80 e0       	ldi	r24, 0x00	; 0
    1242:	90 e0       	ldi	r25, 0x00	; 0
    1244:	0e 94 bc 2f 	call	0x5f78	; 0x5f78 <__eerd_byte_x128a1>
}
    1248:	08 95       	ret

0000124a <service_eeprom>:
//#############################################################

//2ms Service Loop -- Call once every 2ms
void service_eeprom(){
	
}
    124a:	08 95       	ret

0000124c <init_fp>:
		PK6: Rotary Channel A
		PK7: Rotary Channel B
				
	*/
	//LED's
	PORTJ.PIN1CTRL = B8(01000000); //invert pin logic
    124c:	e0 e0       	ldi	r30, 0x00	; 0
    124e:	f7 e0       	ldi	r31, 0x07	; 7
    1250:	80 e4       	ldi	r24, 0x40	; 64
    1252:	81 8b       	std	Z+17, r24	; 0x11
	PORTJ.PIN2CTRL = B8(01000000); //invert pin logic
    1254:	82 8b       	std	Z+18, r24	; 0x12
	PORTJ.PIN3CTRL = B8(01000000); //invert pin logic
    1256:	83 8b       	std	Z+19, r24	; 0x13
	PORTJ.PIN4CTRL = B8(01000000); //invert pin logic
    1258:	84 8b       	std	Z+20, r24	; 0x14
	PORTJ.OUTCLR = B8(00011110); //pins to low (LED's off, remember: inverted!)	
    125a:	8e e1       	ldi	r24, 0x1E	; 30
    125c:	86 83       	std	Z+6, r24	; 0x06
	PORTJ.DIRSET = B8(00011110); //pins to output	
    125e:	81 83       	std	Z+1, r24	; 0x01
	
	fp_channel_mask = 0x00;
    1260:	10 92 9e 26 	sts	0x269E, r1
	
	//Switches
	//	SciPSU FP switches have hardware pull-up and hardware debounce
	PORTK.DIRCLR = B8(00111111); //This is the default condition, but just to be safe
    1264:	8f e3       	ldi	r24, 0x3F	; 63
    1266:	e0 e2       	ldi	r30, 0x20	; 32
    1268:	f7 e0       	ldi	r31, 0x07	; 7
    126a:	82 83       	std	Z+2, r24	; 0x02
	fp_rot_status = RELEASED; fp_master_status = RELEASED;
    126c:	89 e2       	ldi	r24, 0x29	; 41
    126e:	80 93 98 26 	sts	0x2698, r24
    1272:	80 93 95 26 	sts	0x2695, r24
	
	//Button state (open switch = 1, ergo...)
	fp_button_time0 = 0xFF;
    1276:	8f ef       	ldi	r24, 0xFF	; 255
    1278:	80 93 ad 26 	sts	0x26AD, r24
	fp_button_time1 = 0xFF;
    127c:	80 93 9a 26 	sts	0x269A, r24
	fp_button_time2 = 0xFF;
    1280:	80 93 94 26 	sts	0x2694, r24
}
    1284:	08 95       	ret

00001286 <fp_led_enable>:
//## LEDs
//#############################################################

// Uses generic defines for channel (see main.h)
void fp_led_enable(uint8_t which){
	switch(which){
    1286:	82 30       	cpi	r24, 0x02	; 2
    1288:	b1 f0       	breq	.+44     	; 0x12b6 <fp_led_enable+0x30>
    128a:	83 30       	cpi	r24, 0x03	; 3
    128c:	28 f4       	brcc	.+10     	; 0x1298 <fp_led_enable+0x12>
    128e:	88 23       	and	r24, r24
    1290:	41 f0       	breq	.+16     	; 0x12a2 <fp_led_enable+0x1c>
    1292:	81 30       	cpi	r24, 0x01	; 1
    1294:	19 f5       	brne	.+70     	; 0x12dc <fp_led_enable+0x56>
    1296:	0a c0       	rjmp	.+20     	; 0x12ac <fp_led_enable+0x26>
    1298:	83 30       	cpi	r24, 0x03	; 3
    129a:	91 f0       	breq	.+36     	; 0x12c0 <fp_led_enable+0x3a>
    129c:	85 30       	cpi	r24, 0x05	; 5
    129e:	f1 f4       	brne	.+60     	; 0x12dc <fp_led_enable+0x56>
    12a0:	14 c0       	rjmp	.+40     	; 0x12ca <fp_led_enable+0x44>
		case CHANNEL_A:
			PORTJ.OUTSET = B8(00000010); //PJ1
    12a2:	82 e0       	ldi	r24, 0x02	; 2
    12a4:	e0 e0       	ldi	r30, 0x00	; 0
    12a6:	f7 e0       	ldi	r31, 0x07	; 7
    12a8:	85 83       	std	Z+5, r24	; 0x05
			break;
    12aa:	08 95       	ret
		case CHANNEL_B:
			PORTJ.OUTSET = B8(00000100); //PJ2
    12ac:	84 e0       	ldi	r24, 0x04	; 4
    12ae:	e0 e0       	ldi	r30, 0x00	; 0
    12b0:	f7 e0       	ldi	r31, 0x07	; 7
    12b2:	85 83       	std	Z+5, r24	; 0x05
			break;
    12b4:	08 95       	ret
		case CHANNEL_C:
			PORTJ.OUTSET = B8(00001000); //PJ3
    12b6:	88 e0       	ldi	r24, 0x08	; 8
    12b8:	e0 e0       	ldi	r30, 0x00	; 0
    12ba:	f7 e0       	ldi	r31, 0x07	; 7
    12bc:	85 83       	std	Z+5, r24	; 0x05
			break;
    12be:	08 95       	ret
		case CHANNEL_D:
			PORTJ.OUTSET = B8(00010000); //PJ4
    12c0:	80 e1       	ldi	r24, 0x10	; 16
    12c2:	e0 e0       	ldi	r30, 0x00	; 0
    12c4:	f7 e0       	ldi	r31, 0x07	; 7
    12c6:	85 83       	std	Z+5, r24	; 0x05
			break;			
    12c8:	08 95       	ret
		case CHANNEL_M:
			PORTJ.OUTSET = STATE_power_channels << 1; //left shift 1 to move [0-3] state to [1-4] pin locations
    12ca:	80 91 86 25 	lds	r24, 0x2586
    12ce:	88 0f       	add	r24, r24
    12d0:	e0 e0       	ldi	r30, 0x00	; 0
    12d2:	f7 e0       	ldi	r31, 0x07	; 7
    12d4:	85 83       	std	Z+5, r24	; 0x05
			led_on(LED_3); //Master LED is dimmable so its over in the ui.h module
    12d6:	82 e0       	ldi	r24, 0x02	; 2
    12d8:	0e 94 13 2d 	call	0x5a26	; 0x5a26 <led_on>
    12dc:	08 95       	ret

000012de <fp_led_disable>:
			break;
	}
}

void fp_led_disable(uint8_t which){
	switch(which){
    12de:	82 30       	cpi	r24, 0x02	; 2
    12e0:	b1 f0       	breq	.+44     	; 0x130e <fp_led_disable+0x30>
    12e2:	83 30       	cpi	r24, 0x03	; 3
    12e4:	28 f4       	brcc	.+10     	; 0x12f0 <fp_led_disable+0x12>
    12e6:	88 23       	and	r24, r24
    12e8:	41 f0       	breq	.+16     	; 0x12fa <fp_led_disable+0x1c>
    12ea:	81 30       	cpi	r24, 0x01	; 1
    12ec:	09 f5       	brne	.+66     	; 0x1330 <fp_led_disable+0x52>
    12ee:	0a c0       	rjmp	.+20     	; 0x1304 <fp_led_disable+0x26>
    12f0:	83 30       	cpi	r24, 0x03	; 3
    12f2:	91 f0       	breq	.+36     	; 0x1318 <fp_led_disable+0x3a>
    12f4:	85 30       	cpi	r24, 0x05	; 5
    12f6:	e1 f4       	brne	.+56     	; 0x1330 <fp_led_disable+0x52>
    12f8:	14 c0       	rjmp	.+40     	; 0x1322 <fp_led_disable+0x44>
		case CHANNEL_A:
			PORTJ.OUTCLR = B8(00000010); //PJ1
    12fa:	82 e0       	ldi	r24, 0x02	; 2
    12fc:	e0 e0       	ldi	r30, 0x00	; 0
    12fe:	f7 e0       	ldi	r31, 0x07	; 7
    1300:	86 83       	std	Z+6, r24	; 0x06
			break;
    1302:	08 95       	ret
		case CHANNEL_B:
			PORTJ.OUTCLR = B8(00000100); //PJ2
    1304:	84 e0       	ldi	r24, 0x04	; 4
    1306:	e0 e0       	ldi	r30, 0x00	; 0
    1308:	f7 e0       	ldi	r31, 0x07	; 7
    130a:	86 83       	std	Z+6, r24	; 0x06
			break;
    130c:	08 95       	ret
		case CHANNEL_C:
			PORTJ.OUTCLR = B8(00001000); //PJ3
    130e:	88 e0       	ldi	r24, 0x08	; 8
    1310:	e0 e0       	ldi	r30, 0x00	; 0
    1312:	f7 e0       	ldi	r31, 0x07	; 7
    1314:	86 83       	std	Z+6, r24	; 0x06
			break;
    1316:	08 95       	ret
		case CHANNEL_D:
			PORTJ.OUTCLR = B8(00010000); //PJ4
    1318:	80 e1       	ldi	r24, 0x10	; 16
    131a:	e0 e0       	ldi	r30, 0x00	; 0
    131c:	f7 e0       	ldi	r31, 0x07	; 7
    131e:	86 83       	std	Z+6, r24	; 0x06
			break;
    1320:	08 95       	ret
		case CHANNEL_M:
			fp_counter = 0; fp_counter2 = 0; fp_updown = 1;
    1322:	10 92 99 26 	sts	0x2699, r1
    1326:	10 92 a0 26 	sts	0x26A0, r1
    132a:	81 e0       	ldi	r24, 0x01	; 1
    132c:	80 93 a1 26 	sts	0x26A1, r24
    1330:	08 95       	ret

00001332 <_fp_read_switches>:
//#############################################################

//t0 = most recent --> t2 = oldest values
void _fp_read_switches(){
	//rotate
	fp_button_time2 = fp_button_time1;
    1332:	80 91 9a 26 	lds	r24, 0x269A
    1336:	80 93 94 26 	sts	0x2694, r24
	fp_button_time1 = fp_button_time0;
    133a:	80 91 ad 26 	lds	r24, 0x26AD
    133e:	80 93 9a 26 	sts	0x269A, r24
	fp_button_time0 = PORTK.IN;
    1342:	e0 e2       	ldi	r30, 0x20	; 32
    1344:	f7 e0       	ldi	r31, 0x07	; 7
    1346:	80 85       	ldd	r24, Z+8	; 0x08
    1348:	80 93 ad 26 	sts	0x26AD, r24
}
    134c:	08 95       	ret

0000134e <_fp_switch_pressed>:

//Button was pressed
void _fp_switch_pressed(uint8_t which){
    134e:	cf 93       	push	r28
    1350:	c8 2f       	mov	r28, r24
	audio_beep(1, 10);
    1352:	81 e0       	ldi	r24, 0x01	; 1
    1354:	6a e0       	ldi	r22, 0x0A	; 10
    1356:	70 e0       	ldi	r23, 0x00	; 0
    1358:	0e 94 af 2d 	call	0x5b5e	; 0x5b5e <audio_beep>
	brain_button_pressed();
    135c:	0e 94 b7 05 	call	0xb6e	; 0xb6e <brain_button_pressed>
	switch(which){
    1360:	c2 30       	cpi	r28, 0x02	; 2
    1362:	b1 f0       	breq	.+44     	; 0x1390 <_fp_switch_pressed+0x42>
    1364:	c3 30       	cpi	r28, 0x03	; 3
    1366:	28 f4       	brcc	.+10     	; 0x1372 <_fp_switch_pressed+0x24>
    1368:	cc 23       	and	r28, r28
    136a:	51 f0       	breq	.+20     	; 0x1380 <_fp_switch_pressed+0x32>
    136c:	c1 30       	cpi	r28, 0x01	; 1
    136e:	39 f5       	brne	.+78     	; 0x13be <_fp_switch_pressed+0x70>
    1370:	0b c0       	rjmp	.+22     	; 0x1388 <_fp_switch_pressed+0x3a>
    1372:	c4 30       	cpi	r28, 0x04	; 4
    1374:	a9 f0       	breq	.+42     	; 0x13a0 <_fp_switch_pressed+0x52>
    1376:	c4 30       	cpi	r28, 0x04	; 4
    1378:	78 f0       	brcs	.+30     	; 0x1398 <_fp_switch_pressed+0x4a>
    137a:	c5 30       	cpi	r28, 0x05	; 5
    137c:	01 f5       	brne	.+64     	; 0x13be <_fp_switch_pressed+0x70>
    137e:	18 c0       	rjmp	.+48     	; 0x13b0 <_fp_switch_pressed+0x62>
		case FP_SWITCH_A:
			brain_power(CHANNEL_A);			
    1380:	80 e0       	ldi	r24, 0x00	; 0
    1382:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <brain_power>
			break;
    1386:	1b c0       	rjmp	.+54     	; 0x13be <_fp_switch_pressed+0x70>
		case FP_SWITCH_B:
			brain_power(CHANNEL_B);
    1388:	81 e0       	ldi	r24, 0x01	; 1
    138a:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <brain_power>
			break;
    138e:	17 c0       	rjmp	.+46     	; 0x13be <_fp_switch_pressed+0x70>
		case FP_SWITCH_C:
			brain_power(CHANNEL_C);
    1390:	82 e0       	ldi	r24, 0x02	; 2
    1392:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <brain_power>
			break;
    1396:	13 c0       	rjmp	.+38     	; 0x13be <_fp_switch_pressed+0x70>
		case FP_SWITCH_D:
			brain_power(CHANNEL_D);
    1398:	83 e0       	ldi	r24, 0x03	; 3
    139a:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <brain_power>
			break;
    139e:	0f c0       	rjmp	.+30     	; 0x13be <_fp_switch_pressed+0x70>
		case FP_SWITCH_M:
			fp_press_counter = 0;
    13a0:	10 92 ab 26 	sts	0x26AB, r1
    13a4:	10 92 ac 26 	sts	0x26AC, r1
			fp_master_status = PRESSED;
    13a8:	8a e2       	ldi	r24, 0x2A	; 42
    13aa:	80 93 95 26 	sts	0x2695, r24
			break;
    13ae:	07 c0       	rjmp	.+14     	; 0x13be <_fp_switch_pressed+0x70>
		case FP_SWITCH_R:
			fp_press_counter = 0;
    13b0:	10 92 ab 26 	sts	0x26AB, r1
    13b4:	10 92 ac 26 	sts	0x26AC, r1
			fp_rot_status = PRESSED;
    13b8:	8a e2       	ldi	r24, 0x2A	; 42
    13ba:	80 93 98 26 	sts	0x2698, r24
			break;		
	}
}
    13be:	cf 91       	pop	r28
    13c0:	08 95       	ret

000013c2 <_fp_switch_released>:

//Button was released
void _fp_switch_released(uint8_t which){
	switch(which){
    13c2:	84 30       	cpi	r24, 0x04	; 4
    13c4:	19 f0       	breq	.+6      	; 0x13cc <_fp_switch_released+0xa>
    13c6:	85 30       	cpi	r24, 0x05	; 5
    13c8:	59 f5       	brne	.+86     	; 0x1420 <_fp_switch_released+0x5e>
    13ca:	15 c0       	rjmp	.+42     	; 0x13f6 <_fp_switch_released+0x34>
		case FP_SWITCH_C:
			break;
		case FP_SWITCH_D:
			break;
		case FP_SWITCH_M:
			fp_master_status = RELEASED;
    13cc:	89 e2       	ldi	r24, 0x29	; 41
    13ce:	80 93 95 26 	sts	0x2695, r24
			if (fp_press_counter > EEPROM_HOLD_TO_SAVE_TIME){
    13d2:	80 91 ab 26 	lds	r24, 0x26AB
    13d6:	90 91 ac 26 	lds	r25, 0x26AC
    13da:	23 e0       	ldi	r18, 0x03	; 3
    13dc:	89 3e       	cpi	r24, 0xE9	; 233
    13de:	92 07       	cpc	r25, r18
    13e0:	38 f0       	brcs	.+14     	; 0x13f0 <_fp_switch_released+0x2e>
				//Reboot LCD logic
				lcd_reboot();
    13e2:	0e 94 36 0b 	call	0x166c	; 0x166c <lcd_reboot>
				fp_press_counter = 0;
    13e6:	10 92 ab 26 	sts	0x26AB, r1
    13ea:	10 92 ac 26 	sts	0x26AC, r1
    13ee:	08 95       	ret
			}
			else {
				brain_power_master();
    13f0:	0e 94 bf 05 	call	0xb7e	; 0xb7e <brain_power_master>
    13f4:	08 95       	ret
			}
			break;
		case FP_SWITCH_R:
			fp_rot_status = RELEASED;
    13f6:	89 e2       	ldi	r24, 0x29	; 41
    13f8:	80 93 98 26 	sts	0x2698, r24
			//Write to disk logic (save to non-volatile memory)
			if	((STATE_menu == MENU_CONTROL) && (fp_press_counter>EEPROM_HOLD_TO_SAVE_TIME)){
    13fc:	80 91 87 25 	lds	r24, 0x2587
    1400:	81 32       	cpi	r24, 0x21	; 33
    1402:	71 f4       	brne	.+28     	; 0x1420 <_fp_switch_released+0x5e>
    1404:	80 91 ab 26 	lds	r24, 0x26AB
    1408:	90 91 ac 26 	lds	r25, 0x26AC
    140c:	23 e0       	ldi	r18, 0x03	; 3
    140e:	89 3e       	cpi	r24, 0xE9	; 233
    1410:	92 07       	cpc	r25, r18
    1412:	30 f0       	brcs	.+12     	; 0x1420 <_fp_switch_released+0x5e>
				eeprom_save(); 
    1414:	0e 94 ff 08 	call	0x11fe	; 0x11fe <eeprom_save>
				fp_press_counter = 0;
    1418:	10 92 ab 26 	sts	0x26AB, r1
    141c:	10 92 ac 26 	sts	0x26AC, r1
    1420:	08 95       	ret

00001422 <_process_switch>:
			break;
	}
}

void _process_switch(uint8_t current, uint8_t change, uint8_t which){
	if ((current & _BV(which)) != 0) {return;} //unstable -- wait for things to settle
    1422:	28 2f       	mov	r18, r24
    1424:	30 e0       	ldi	r19, 0x00	; 0
    1426:	04 2e       	mov	r0, r20
    1428:	02 c0       	rjmp	.+4      	; 0x142e <_process_switch+0xc>
    142a:	35 95       	asr	r19
    142c:	27 95       	ror	r18
    142e:	0a 94       	dec	r0
    1430:	e2 f7       	brpl	.-8      	; 0x142a <_process_switch+0x8>
    1432:	20 fd       	sbrc	r18, 0
    1434:	1b c0       	rjmp	.+54     	; 0x146c <_process_switch+0x4a>
	if ((change & _BV(which)) == 0){return;} //no change
    1436:	70 e0       	ldi	r23, 0x00	; 0
    1438:	04 2e       	mov	r0, r20
    143a:	02 c0       	rjmp	.+4      	; 0x1440 <_process_switch+0x1e>
    143c:	75 95       	asr	r23
    143e:	67 95       	ror	r22
    1440:	0a 94       	dec	r0
    1442:	e2 f7       	brpl	.-8      	; 0x143c <_process_switch+0x1a>
    1444:	60 ff       	sbrs	r22, 0
    1446:	12 c0       	rjmp	.+36     	; 0x146c <_process_switch+0x4a>
	//Pin has been changed!
	if ((fp_button_time0 & _BV(which)) == 0){_fp_switch_pressed(which);}
    1448:	20 91 ad 26 	lds	r18, 0x26AD
    144c:	30 e0       	ldi	r19, 0x00	; 0
    144e:	04 2e       	mov	r0, r20
    1450:	02 c0       	rjmp	.+4      	; 0x1456 <_process_switch+0x34>
    1452:	35 95       	asr	r19
    1454:	27 95       	ror	r18
    1456:	0a 94       	dec	r0
    1458:	e2 f7       	brpl	.-8      	; 0x1452 <_process_switch+0x30>
    145a:	20 fd       	sbrc	r18, 0
    145c:	04 c0       	rjmp	.+8      	; 0x1466 <_process_switch+0x44>
    145e:	84 2f       	mov	r24, r20
    1460:	0e 94 a7 09 	call	0x134e	; 0x134e <_fp_switch_pressed>
    1464:	08 95       	ret
	else {_fp_switch_released(which);}
    1466:	84 2f       	mov	r24, r20
    1468:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <_fp_switch_released>
    146c:	08 95       	ret

0000146e <_fp_process_switches>:
	
}

void _fp_process_switches(){
    146e:	cf 93       	push	r28
    1470:	df 93       	push	r29
	//Debounce Logic
	uint8_t current = fp_button_time0 ^ fp_button_time1;
    1472:	80 91 9a 26 	lds	r24, 0x269A
    1476:	c0 91 ad 26 	lds	r28, 0x26AD
    147a:	c8 27       	eor	r28, r24
	uint8_t change = fp_button_time1 ^ fp_button_time2;
    147c:	d0 91 94 26 	lds	r29, 0x2694
    1480:	d8 27       	eor	r29, r24
	
	//EEPROM Logic
	if (fp_rot_status == PRESSED){
    1482:	80 91 98 26 	lds	r24, 0x2698
    1486:	8a 32       	cpi	r24, 0x2A	; 42
    1488:	b1 f4       	brne	.+44     	; 0x14b6 <_fp_process_switches+0x48>
		fp_press_counter++;
    148a:	80 91 ab 26 	lds	r24, 0x26AB
    148e:	90 91 ac 26 	lds	r25, 0x26AC
    1492:	01 96       	adiw	r24, 0x01	; 1
    1494:	80 93 ab 26 	sts	0x26AB, r24
    1498:	90 93 ac 26 	sts	0x26AC, r25
		if ((STATE_menu == MENU_CONTROL) && (fp_press_counter > EEPROM_HOLD_TO_SAVE_TIME)){
    149c:	20 91 87 25 	lds	r18, 0x2587
    14a0:	21 32       	cpi	r18, 0x21	; 33
    14a2:	49 f4       	brne	.+18     	; 0x14b6 <_fp_process_switches+0x48>
    14a4:	23 e0       	ldi	r18, 0x03	; 3
    14a6:	89 3e       	cpi	r24, 0xE9	; 233
    14a8:	92 07       	cpc	r25, r18
    14aa:	28 f0       	brcs	.+10     	; 0x14b6 <_fp_process_switches+0x48>
			audio_beep(BRAIN_BEEPS, BRAIN_VOLUME);
    14ac:	81 e0       	ldi	r24, 0x01	; 1
    14ae:	64 e6       	ldi	r22, 0x64	; 100
    14b0:	70 e0       	ldi	r23, 0x00	; 0
    14b2:	0e 94 af 2d 	call	0x5b5e	; 0x5b5e <audio_beep>
		}
	}
	
	if (fp_master_status == PRESSED){
    14b6:	80 91 95 26 	lds	r24, 0x2695
    14ba:	8a 32       	cpi	r24, 0x2A	; 42
    14bc:	91 f4       	brne	.+36     	; 0x14e2 <_fp_process_switches+0x74>
		fp_press_counter++;
    14be:	80 91 ab 26 	lds	r24, 0x26AB
    14c2:	90 91 ac 26 	lds	r25, 0x26AC
    14c6:	01 96       	adiw	r24, 0x01	; 1
    14c8:	80 93 ab 26 	sts	0x26AB, r24
    14cc:	90 93 ac 26 	sts	0x26AC, r25
		if (fp_press_counter == EEPROM_HOLD_TO_SAVE_TIME){
    14d0:	23 e0       	ldi	r18, 0x03	; 3
    14d2:	88 3e       	cpi	r24, 0xE8	; 232
    14d4:	92 07       	cpc	r25, r18
    14d6:	29 f4       	brne	.+10     	; 0x14e2 <_fp_process_switches+0x74>
			audio_beep(BRAIN_BEEPS, BRAIN_VOLUME);
    14d8:	81 e0       	ldi	r24, 0x01	; 1
    14da:	64 e6       	ldi	r22, 0x64	; 100
    14dc:	70 e0       	ldi	r23, 0x00	; 0
    14de:	0e 94 af 2d 	call	0x5b5e	; 0x5b5e <audio_beep>
		}
	}
		
	//Switch Logic
	_process_switch(current, change, FP_SWITCH_A);
    14e2:	8c 2f       	mov	r24, r28
    14e4:	6d 2f       	mov	r22, r29
    14e6:	40 e0       	ldi	r20, 0x00	; 0
    14e8:	0e 94 11 0a 	call	0x1422	; 0x1422 <_process_switch>
	_process_switch(current, change, FP_SWITCH_B);
    14ec:	8c 2f       	mov	r24, r28
    14ee:	6d 2f       	mov	r22, r29
    14f0:	41 e0       	ldi	r20, 0x01	; 1
    14f2:	0e 94 11 0a 	call	0x1422	; 0x1422 <_process_switch>
	_process_switch(current, change, FP_SWITCH_C);
    14f6:	8c 2f       	mov	r24, r28
    14f8:	6d 2f       	mov	r22, r29
    14fa:	42 e0       	ldi	r20, 0x02	; 2
    14fc:	0e 94 11 0a 	call	0x1422	; 0x1422 <_process_switch>
	_process_switch(current, change, FP_SWITCH_D);
    1500:	8c 2f       	mov	r24, r28
    1502:	6d 2f       	mov	r22, r29
    1504:	43 e0       	ldi	r20, 0x03	; 3
    1506:	0e 94 11 0a 	call	0x1422	; 0x1422 <_process_switch>
	_process_switch(current, change, FP_SWITCH_M);
    150a:	8c 2f       	mov	r24, r28
    150c:	6d 2f       	mov	r22, r29
    150e:	44 e0       	ldi	r20, 0x04	; 4
    1510:	0e 94 11 0a 	call	0x1422	; 0x1422 <_process_switch>
	_process_switch(current, change, FP_SWITCH_R);
    1514:	8c 2f       	mov	r24, r28
    1516:	6d 2f       	mov	r22, r29
    1518:	45 e0       	ldi	r20, 0x05	; 5
    151a:	0e 94 11 0a 	call	0x1422	; 0x1422 <_process_switch>
}
    151e:	df 91       	pop	r29
    1520:	cf 91       	pop	r28
    1522:	08 95       	ret

00001524 <_fp_process_rotary>:

void _fp_process_rotary(){
	static int16_t blanking_counter = -1;
	
	//Software blank rotary dial in menu navigation mode
	if ((STATE_menu == MENU_STARTUP) || (STATE_menu == MENU_OUTPUT) || (STATE_menu == MENU_CONTROL) || (STATE_menu == MENU_CONSOLE)) {
    1524:	80 91 87 25 	lds	r24, 0x2587
    1528:	8f 51       	subi	r24, 0x1F	; 31
    152a:	84 30       	cpi	r24, 0x04	; 4
    152c:	a8 f5       	brcc	.+106    	; 0x1598 <_fp_process_rotary+0x74>
		if (blanking_counter >= 0){
    152e:	80 91 5d 21 	lds	r24, 0x215D
    1532:	90 91 5e 21 	lds	r25, 0x215E
    1536:	99 23       	and	r25, r25
    1538:	c4 f0       	brlt	.+48     	; 0x156a <_fp_process_rotary+0x46>
			blanking_counter++;
    153a:	01 96       	adiw	r24, 0x01	; 1
    153c:	80 93 5d 21 	sts	0x215D, r24
    1540:	90 93 5e 21 	sts	0x215E, r25
			quad_up(); quad_down(); //clear state changes during blanking period
    1544:	0e 94 fd 12 	call	0x25fa	; 0x25fa <quad_up>
    1548:	0e 94 08 13 	call	0x2610	; 0x2610 <quad_down>
			if (blanking_counter > 500){blanking_counter = -1;}
    154c:	80 91 5d 21 	lds	r24, 0x215D
    1550:	90 91 5e 21 	lds	r25, 0x215E
    1554:	21 e0       	ldi	r18, 0x01	; 1
    1556:	85 3f       	cpi	r24, 0xF5	; 245
    1558:	92 07       	cpc	r25, r18
    155a:	64 f1       	brlt	.+88     	; 0x15b4 <_fp_process_rotary+0x90>
    155c:	8f ef       	ldi	r24, 0xFF	; 255
    155e:	9f ef       	ldi	r25, 0xFF	; 255
    1560:	80 93 5d 21 	sts	0x215D, r24
    1564:	90 93 5e 21 	sts	0x215E, r25
    1568:	08 95       	ret
		}
		else {
			if (quad_up()) {blanking_counter = 0; brain_rotary_change(QUAD_UP);}
    156a:	0e 94 fd 12 	call	0x25fa	; 0x25fa <quad_up>
    156e:	88 23       	and	r24, r24
    1570:	39 f0       	breq	.+14     	; 0x1580 <_fp_process_rotary+0x5c>
    1572:	10 92 5d 21 	sts	0x215D, r1
    1576:	10 92 5e 21 	sts	0x215E, r1
    157a:	8d e2       	ldi	r24, 0x2D	; 45
    157c:	0e 94 31 05 	call	0xa62	; 0xa62 <brain_rotary_change>
			if (quad_down()) {blanking_counter = 0; brain_rotary_change(QUAD_DOWN);}
    1580:	0e 94 08 13 	call	0x2610	; 0x2610 <quad_down>
    1584:	88 23       	and	r24, r24
    1586:	b1 f0       	breq	.+44     	; 0x15b4 <_fp_process_rotary+0x90>
    1588:	10 92 5d 21 	sts	0x215D, r1
    158c:	10 92 5e 21 	sts	0x215E, r1
    1590:	8e e2       	ldi	r24, 0x2E	; 46
    1592:	0e 94 31 05 	call	0xa62	; 0xa62 <brain_rotary_change>
    1596:	08 95       	ret
		}		
	}
	//Use full dial resolution in adjustment mode
	else {
		if (quad_up()) {brain_rotary_change(QUAD_UP);}
    1598:	0e 94 fd 12 	call	0x25fa	; 0x25fa <quad_up>
    159c:	88 23       	and	r24, r24
    159e:	19 f0       	breq	.+6      	; 0x15a6 <_fp_process_rotary+0x82>
    15a0:	8d e2       	ldi	r24, 0x2D	; 45
    15a2:	0e 94 31 05 	call	0xa62	; 0xa62 <brain_rotary_change>
		if (quad_down()) {brain_rotary_change(QUAD_DOWN);}
    15a6:	0e 94 08 13 	call	0x2610	; 0x2610 <quad_down>
    15aa:	88 23       	and	r24, r24
    15ac:	19 f0       	breq	.+6      	; 0x15b4 <_fp_process_rotary+0x90>
    15ae:	8e e2       	ldi	r24, 0x2E	; 46
    15b0:	0e 94 31 05 	call	0xa62	; 0xa62 <brain_rotary_change>
    15b4:	08 95       	ret

000015b6 <service_fp>:
//## SERVICE ROUTINE
//#############################################################

void service_fp(){	
	
	uint8_t fp_channel_mask = STATE_power_channels << 1;
    15b6:	90 91 86 25 	lds	r25, 0x2586
	//LEDs
	if (STATE_power_output == DISABLE){
    15ba:	80 91 88 25 	lds	r24, 0x2588
    15be:	89 32       	cpi	r24, 0x29	; 41
    15c0:	09 f0       	breq	.+2      	; 0x15c4 <service_fp+0xe>
    15c2:	43 c0       	rjmp	.+134    	; 0x164a <service_fp+0x94>
//## SERVICE ROUTINE
//#############################################################

void service_fp(){	
	
	uint8_t fp_channel_mask = STATE_power_channels << 1;
    15c4:	99 0f       	add	r25, r25
	//LEDs
	if (STATE_power_output == DISABLE){
				
		//Channel LED's			
		if (fp_counter == 0) {PORTJ.OUTSET = fp_channel_mask;} 
    15c6:	80 91 99 26 	lds	r24, 0x2699
    15ca:	88 23       	and	r24, r24
    15cc:	39 f4       	brne	.+14     	; 0x15dc <service_fp+0x26>
    15ce:	e0 e0       	ldi	r30, 0x00	; 0
    15d0:	f7 e0       	ldi	r31, 0x07	; 7
    15d2:	95 83       	std	Z+5, r25	; 0x05
		if (fp_counter == FP_ON_LENGTH) {PORTJ.OUTCLR = fp_channel_mask;}
		fp_counter++;
    15d4:	8f 5f       	subi	r24, 0xFF	; 255
    15d6:	80 93 99 26 	sts	0x2699, r24
    15da:	10 c0       	rjmp	.+32     	; 0x15fc <service_fp+0x46>
	//LEDs
	if (STATE_power_output == DISABLE){
				
		//Channel LED's			
		if (fp_counter == 0) {PORTJ.OUTSET = fp_channel_mask;} 
		if (fp_counter == FP_ON_LENGTH) {PORTJ.OUTCLR = fp_channel_mask;}
    15dc:	81 30       	cpi	r24, 0x01	; 1
    15de:	39 f4       	brne	.+14     	; 0x15ee <service_fp+0x38>
    15e0:	e0 e0       	ldi	r30, 0x00	; 0
    15e2:	f7 e0       	ldi	r31, 0x07	; 7
    15e4:	96 83       	std	Z+6, r25	; 0x06
		fp_counter++;
    15e6:	82 e0       	ldi	r24, 0x02	; 2
    15e8:	80 93 99 26 	sts	0x2699, r24
    15ec:	07 c0       	rjmp	.+14     	; 0x15fc <service_fp+0x46>
    15ee:	8f 5f       	subi	r24, 0xFF	; 255
    15f0:	80 93 99 26 	sts	0x2699, r24
		if (fp_counter >= FP_ON_LENGTH + FP_OFF_LENGTH) {fp_counter = 0;}
    15f4:	8b 30       	cpi	r24, 0x0B	; 11
    15f6:	10 f0       	brcs	.+4      	; 0x15fc <service_fp+0x46>
    15f8:	10 92 99 26 	sts	0x2699, r1
			
		//Master LED
		fp_counter2 += fp_updown;
    15fc:	80 91 a1 26 	lds	r24, 0x26A1
    1600:	60 91 a0 26 	lds	r22, 0x26A0
    1604:	68 0f       	add	r22, r24
    1606:	60 93 a0 26 	sts	0x26A0, r22
		if (fp_counter2 < 128) {
    160a:	66 23       	and	r22, r22
    160c:	34 f0       	brlt	.+12     	; 0x161a <service_fp+0x64>
			if (fp_counter2 % 2 == 0){
    160e:	60 fd       	sbrc	r22, 0
    1610:	12 c0       	rjmp	.+36     	; 0x1636 <service_fp+0x80>
				led_dim(LED_3, fp_counter2);
    1612:	82 e0       	ldi	r24, 0x02	; 2
    1614:	0e 94 45 2d 	call	0x5a8a	; 0x5a8a <led_dim>
    1618:	0e c0       	rjmp	.+28     	; 0x1636 <service_fp+0x80>
			}
		}
		else {
			if (fp_updown > 0) {fp_counter2 += 2;}
    161a:	88 23       	and	r24, r24
    161c:	21 f0       	breq	.+8      	; 0x1626 <service_fp+0x70>
    161e:	6e 5f       	subi	r22, 0xFE	; 254
    1620:	60 93 a0 26 	sts	0x26A0, r22
    1624:	03 c0       	rjmp	.+6      	; 0x162c <service_fp+0x76>
			else {fp_counter2 += 2;}
    1626:	6e 5f       	subi	r22, 0xFE	; 254
    1628:	60 93 a0 26 	sts	0x26A0, r22
			led_dim(LED_3, fp_counter2);
    162c:	82 e0       	ldi	r24, 0x02	; 2
    162e:	60 91 a0 26 	lds	r22, 0x26A0
    1632:	0e 94 45 2d 	call	0x5a8a	; 0x5a8a <led_dim>
		}			
		if ((fp_counter2 >= 255) || (fp_counter2 <= 0)) {
    1636:	80 91 a0 26 	lds	r24, 0x26A0
    163a:	81 50       	subi	r24, 0x01	; 1
    163c:	8e 3f       	cpi	r24, 0xFE	; 254
    163e:	28 f0       	brcs	.+10     	; 0x164a <service_fp+0x94>
			fp_updown = -1 * fp_updown;
    1640:	80 91 a1 26 	lds	r24, 0x26A1
    1644:	81 95       	neg	r24
    1646:	80 93 a1 26 	sts	0x26A1, r24
		}
	}
	//SWITCHes
	_fp_read_switches();
    164a:	0e 94 99 09 	call	0x1332	; 0x1332 <_fp_read_switches>
	_fp_process_switches();
    164e:	0e 94 37 0a 	call	0x146e	; 0x146e <_fp_process_switches>
	_fp_process_rotary();
    1652:	0e 94 92 0a 	call	0x1524	; 0x1524 <_fp_process_rotary>
}
    1656:	08 95       	ret

00001658 <init_lcd>:
//#############################################################
//## INITIALIZATION ROUTINE
//#############################################################

void init_lcd(){
	lcd_flow_control = LCD_BUSY; //Wait for LCD to bootup -- queue all commands prior to start
    1658:	8e e4       	ldi	r24, 0x4E	; 78
    165a:	80 93 b0 26 	sts	0x26B0, r24
	lcd_flow_type = LCD_COMMAND;
    165e:	8a ef       	ldi	r24, 0xFA	; 250
    1660:	80 93 ae 26 	sts	0x26AE, r24
	lcd_flow_reboot = LCD_ENABLED;
    1664:	8f e1       	ldi	r24, 0x1F	; 31
    1666:	80 93 97 26 	sts	0x2697, r24
}
    166a:	08 95       	ret

0000166c <lcd_reboot>:

//Reboot the LCD because it f's up a lot due to its lack of correctly implemented flow-control.
void lcd_reboot(){
    166c:	cf 93       	push	r28
	//flush command buffer
	uart_rxbuffer_disable(&ulcd);
    166e:	80 eb       	ldi	r24, 0xB0	; 176
    1670:	9b e0       	ldi	r25, 0x0B	; 11
    1672:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <uart_rxbuffer_disable>
	uart_txbuffer_disable(&ulcd);
    1676:	80 eb       	ldi	r24, 0xB0	; 176
    1678:	9b e0       	ldi	r25, 0x0B	; 11
    167a:	0e 94 64 19 	call	0x32c8	; 0x32c8 <uart_txbuffer_disable>
	init_uart_obuffer(&ulcd);
    167e:	80 eb       	ldi	r24, 0xB0	; 176
    1680:	9b e0       	ldi	r25, 0x0B	; 11
    1682:	0e 94 d8 22 	call	0x45b0	; 0x45b0 <init_uart_obuffer>
	init_uart_ibuffer(&ulcd);
    1686:	80 eb       	ldi	r24, 0xB0	; 176
    1688:	9b e0       	ldi	r25, 0x0B	; 11
    168a:	0e 94 3a 2a 	call	0x5474	; 0x5474 <init_uart_ibuffer>
	uart_rxbuffer_enable(&ulcd);
    168e:	80 eb       	ldi	r24, 0xB0	; 176
    1690:	9b e0       	ldi	r25, 0x0B	; 11
    1692:	0e 94 55 19 	call	0x32aa	; 0x32aa <uart_rxbuffer_enable>
	uart_txbuffer_enable(&ulcd);
    1696:	80 eb       	ldi	r24, 0xB0	; 176
    1698:	9b e0       	ldi	r25, 0x0B	; 11
    169a:	0e 94 5f 19 	call	0x32be	; 0x32be <uart_txbuffer_enable>
	lcd_flow_control = LCD_READY; //unlock if stuck
    169e:	82 e5       	ldi	r24, 0x52	; 82
    16a0:	80 93 b0 26 	sts	0x26B0, r24
	//state recovery
	lcd_flow_reboot = LCD_REBOOT; //suppress normal output from OS (dropped silently)
    16a4:	c1 e9       	ldi	r28, 0x91	; 145
    16a6:	c0 93 97 26 	sts	0x2697, r28
	//transmit flush to LCD
	uart_enqueue(&ulcd, LCD_COMMAND);
    16aa:	80 eb       	ldi	r24, 0xB0	; 176
    16ac:	9b e0       	ldi	r25, 0x0B	; 11
    16ae:	6a ef       	ldi	r22, 0xFA	; 250
    16b0:	0e 94 c7 26 	call	0x4d8e	; 0x4d8e <uart_enqueue>
	uart_enqueue_string(&ulcd, "\r"); //transmit \r to terminate anything currently in the buffer
    16b4:	80 eb       	ldi	r24, 0xB0	; 176
    16b6:	9b e0       	ldi	r25, 0x0B	; 11
    16b8:	6f e5       	ldi	r22, 0x5F	; 95
    16ba:	71 e2       	ldi	r23, 0x21	; 33
    16bc:	0e 94 40 23 	call	0x4680	; 0x4680 <uart_enqueue_string>
	//send reboot commands
	uart_enqueue(&ulcd, LCD_COMMAND);
    16c0:	80 eb       	ldi	r24, 0xB0	; 176
    16c2:	9b e0       	ldi	r25, 0x0B	; 11
    16c4:	6a ef       	ldi	r22, 0xFA	; 250
    16c6:	0e 94 c7 26 	call	0x4d8e	; 0x4d8e <uart_enqueue>
	uart_enqueue_string(&ulcd, "RESET\r");
    16ca:	80 eb       	ldi	r24, 0xB0	; 176
    16cc:	9b e0       	ldi	r25, 0x0B	; 11
    16ce:	61 e6       	ldi	r22, 0x61	; 97
    16d0:	71 e2       	ldi	r23, 0x21	; 33
    16d2:	0e 94 40 23 	call	0x4680	; 0x4680 <uart_enqueue_string>
	//state recovery
	lcd_flow_reboot = LCD_REBOOT;
    16d6:	c0 93 97 26 	sts	0x2697, r28
}
    16da:	cf 91       	pop	r28
    16dc:	08 95       	ret

000016de <lcd_command>:
//#############################################################
//## API
//#############################################################

//Only supports RUN (capital) and 31 (PLAY command as number) for detecting macros
void lcd_command(char* theCommand){
    16de:	cf 93       	push	r28
    16e0:	df 93       	push	r29
    16e2:	ec 01       	movw	r28, r24
	if ((lcd_flow_reboot == LCD_ENABLED)&&(uart_count(&ulcd)<MAX_BUFFER_LEN-100)){
    16e4:	80 91 97 26 	lds	r24, 0x2697
    16e8:	8f 31       	cpi	r24, 0x1F	; 31
    16ea:	b9 f4       	brne	.+46     	; 0x171a <lcd_command+0x3c>
    16ec:	80 eb       	ldi	r24, 0xB0	; 176
    16ee:	9b e0       	ldi	r25, 0x0B	; 11
    16f0:	0e 94 f9 22 	call	0x45f2	; 0x45f2 <uart_count>
    16f4:	23 e0       	ldi	r18, 0x03	; 3
    16f6:	8c 39       	cpi	r24, 0x9C	; 156
    16f8:	92 07       	cpc	r25, r18
    16fa:	78 f4       	brcc	.+30     	; 0x171a <lcd_command+0x3c>
		uart_enqueue(&ulcd, LCD_COMMAND);
    16fc:	80 eb       	ldi	r24, 0xB0	; 176
    16fe:	9b e0       	ldi	r25, 0x0B	; 11
    1700:	6a ef       	ldi	r22, 0xFA	; 250
    1702:	0e 94 c7 26 	call	0x4d8e	; 0x4d8e <uart_enqueue>
		uart_enqueue_string(&ulcd, theCommand);
    1706:	80 eb       	ldi	r24, 0xB0	; 176
    1708:	9b e0       	ldi	r25, 0x0B	; 11
    170a:	be 01       	movw	r22, r28
    170c:	0e 94 40 23 	call	0x4680	; 0x4680 <uart_enqueue_string>
		uart_enqueue(&ulcd, 0x0D); //command terminator
    1710:	80 eb       	ldi	r24, 0xB0	; 176
    1712:	9b e0       	ldi	r25, 0x0B	; 11
    1714:	6d e0       	ldi	r22, 0x0D	; 13
    1716:	0e 94 c7 26 	call	0x4d8e	; 0x4d8e <uart_enqueue>
	}		
}
    171a:	df 91       	pop	r29
    171c:	cf 91       	pop	r28
    171e:	08 95       	ret

00001720 <_lcd_bubble>:
	lcd_command("COLOR BLUE");
	lcd_command("BOX 30 30 F");
}

void _lcd_bubble(uint8_t mode){
	switch(mode){
    1720:	8f 31       	cpi	r24, 0x1F	; 31
    1722:	19 f0       	breq	.+6      	; 0x172a <_lcd_bubble+0xa>
    1724:	80 32       	cpi	r24, 0x20	; 32
    1726:	51 f4       	brne	.+20     	; 0x173c <_lcd_bubble+0x1c>
    1728:	05 c0       	rjmp	.+10     	; 0x1734 <_lcd_bubble+0x14>
		case LCD_ENABLED:
		lcd_command("COLOR 69");
    172a:	88 e6       	ldi	r24, 0x68	; 104
    172c:	91 e2       	ldi	r25, 0x21	; 33
    172e:	0e 94 6f 0b 	call	0x16de	; 0x16de <lcd_command>
		break;
    1732:	04 c0       	rjmp	.+8      	; 0x173c <_lcd_bubble+0x1c>
		case LCD_STANDBY:
		lcd_command("COLOR 16");
    1734:	81 e7       	ldi	r24, 0x71	; 113
    1736:	91 e2       	ldi	r25, 0x21	; 33
    1738:	0e 94 6f 0b 	call	0x16de	; 0x16de <lcd_command>
		break;
	}
	lcd_command("CIRCLE 10 F");
    173c:	8a e7       	ldi	r24, 0x7A	; 122
    173e:	91 e2       	ldi	r25, 0x21	; 33
    1740:	0e 94 6f 0b 	call	0x16de	; 0x16de <lcd_command>
	lcd_command("COLOR WHITE");
    1744:	86 e8       	ldi	r24, 0x86	; 134
    1746:	91 e2       	ldi	r25, 0x21	; 33
    1748:	0e 94 6f 0b 	call	0x16de	; 0x16de <lcd_command>
	lcd_command("CIRCLE 10");
    174c:	82 e9       	ldi	r24, 0x92	; 146
    174e:	91 e2       	ldi	r25, 0x21	; 33
    1750:	0e 94 6f 0b 	call	0x16de	; 0x16de <lcd_command>
	lcd_command("ARC 8 125 145");
    1754:	8c e9       	ldi	r24, 0x9C	; 156
    1756:	91 e2       	ldi	r25, 0x21	; 33
    1758:	0e 94 6f 0b 	call	0x16de	; 0x16de <lcd_command>
}
    175c:	08 95       	ret

0000175e <_lcd_no_bubble>:
//#############################################################
//## SCREENS: OUTPUT STATUS
//#############################################################

void _lcd_no_bubble(){
	lcd_command("COLOR BLUE");
    175e:	8a ea       	ldi	r24, 0xAA	; 170
    1760:	91 e2       	ldi	r25, 0x21	; 33
    1762:	0e 94 6f 0b 	call	0x16de	; 0x16de <lcd_command>
	lcd_command("BOX 30 30 F");
    1766:	85 eb       	ldi	r24, 0xB5	; 181
    1768:	91 e2       	ldi	r25, 0x21	; 33
    176a:	0e 94 6f 0b 	call	0x16de	; 0x16de <lcd_command>
}
    176e:	08 95       	ret

00001770 <lcd_d>:
		lcd_command("XY 380 161");
		_lcd_bubble(mode);
	}
}

void lcd_d(uint8_t mode){
    1770:	cf 93       	push	r28
    1772:	c8 2f       	mov	r28, r24
	if (mode == LCD_DISABLED){
    1774:	81 32       	cpi	r24, 0x21	; 33
    1776:	39 f4       	brne	.+14     	; 0x1786 <lcd_d+0x16>
		lcd_command("XY 365 199");
    1778:	81 ec       	ldi	r24, 0xC1	; 193
    177a:	91 e2       	ldi	r25, 0x21	; 33
    177c:	0e 94 6f 0b 	call	0x16de	; 0x16de <lcd_command>
		_lcd_no_bubble();
    1780:	0e 94 af 0b 	call	0x175e	; 0x175e <_lcd_no_bubble>
    1784:	07 c0       	rjmp	.+14     	; 0x1794 <lcd_d+0x24>
	}
	else {
		lcd_command("XY 380 209");
    1786:	8c ec       	ldi	r24, 0xCC	; 204
    1788:	91 e2       	ldi	r25, 0x21	; 33
    178a:	0e 94 6f 0b 	call	0x16de	; 0x16de <lcd_command>
		_lcd_bubble(mode);
    178e:	8c 2f       	mov	r24, r28
    1790:	0e 94 90 0b 	call	0x1720	; 0x1720 <_lcd_bubble>
	}
}
    1794:	cf 91       	pop	r28
    1796:	08 95       	ret

00001798 <lcd_c>:
		lcd_command("XY 380 113");
		_lcd_bubble(mode);
	}
}

void lcd_c(uint8_t mode){
    1798:	cf 93       	push	r28
    179a:	c8 2f       	mov	r28, r24
	if (mode == LCD_DISABLED){
    179c:	81 32       	cpi	r24, 0x21	; 33
    179e:	39 f4       	brne	.+14     	; 0x17ae <lcd_c+0x16>
		lcd_command("XY 365 151");
    17a0:	87 ed       	ldi	r24, 0xD7	; 215
    17a2:	91 e2       	ldi	r25, 0x21	; 33
    17a4:	0e 94 6f 0b 	call	0x16de	; 0x16de <lcd_command>
		_lcd_no_bubble();
    17a8:	0e 94 af 0b 	call	0x175e	; 0x175e <_lcd_no_bubble>
    17ac:	07 c0       	rjmp	.+14     	; 0x17bc <lcd_c+0x24>
	}
	else {
		lcd_command("XY 380 161");
    17ae:	82 ee       	ldi	r24, 0xE2	; 226
    17b0:	91 e2       	ldi	r25, 0x21	; 33
    17b2:	0e 94 6f 0b 	call	0x16de	; 0x16de <lcd_command>
		_lcd_bubble(mode);
    17b6:	8c 2f       	mov	r24, r28
    17b8:	0e 94 90 0b 	call	0x1720	; 0x1720 <_lcd_bubble>
	}
}
    17bc:	cf 91       	pop	r28
    17be:	08 95       	ret

000017c0 <lcd_b>:
		lcd_command("XY 380 65");
		_lcd_bubble(mode);
	}		
}

void lcd_b(uint8_t mode){
    17c0:	cf 93       	push	r28
    17c2:	c8 2f       	mov	r28, r24
	if (mode == LCD_DISABLED){
    17c4:	81 32       	cpi	r24, 0x21	; 33
    17c6:	39 f4       	brne	.+14     	; 0x17d6 <lcd_b+0x16>
		lcd_command("XY 365 103");
    17c8:	8d ee       	ldi	r24, 0xED	; 237
    17ca:	91 e2       	ldi	r25, 0x21	; 33
    17cc:	0e 94 6f 0b 	call	0x16de	; 0x16de <lcd_command>
		_lcd_no_bubble();
    17d0:	0e 94 af 0b 	call	0x175e	; 0x175e <_lcd_no_bubble>
    17d4:	07 c0       	rjmp	.+14     	; 0x17e4 <lcd_b+0x24>
	}
	else {
		lcd_command("XY 380 113");
    17d6:	88 ef       	ldi	r24, 0xF8	; 248
    17d8:	91 e2       	ldi	r25, 0x21	; 33
    17da:	0e 94 6f 0b 	call	0x16de	; 0x16de <lcd_command>
		_lcd_bubble(mode);
    17de:	8c 2f       	mov	r24, r28
    17e0:	0e 94 90 0b 	call	0x1720	; 0x1720 <_lcd_bubble>
	}
}
    17e4:	cf 91       	pop	r28
    17e6:	08 95       	ret

000017e8 <lcd_a>:
	lcd_command("COLOR WHITE");
	lcd_command("CIRCLE 10");
	lcd_command("ARC 8 125 145");
}

void lcd_a(uint8_t mode){
    17e8:	cf 93       	push	r28
    17ea:	c8 2f       	mov	r28, r24
	if (mode == LCD_DISABLED){
    17ec:	81 32       	cpi	r24, 0x21	; 33
    17ee:	39 f4       	brne	.+14     	; 0x17fe <lcd_a+0x16>
		lcd_command("XY 365 55");
    17f0:	83 e0       	ldi	r24, 0x03	; 3
    17f2:	92 e2       	ldi	r25, 0x22	; 34
    17f4:	0e 94 6f 0b 	call	0x16de	; 0x16de <lcd_command>
		_lcd_no_bubble();		
    17f8:	0e 94 af 0b 	call	0x175e	; 0x175e <_lcd_no_bubble>
    17fc:	07 c0       	rjmp	.+14     	; 0x180c <lcd_a+0x24>
	}
	else {
		lcd_command("XY 380 65");
    17fe:	8d e0       	ldi	r24, 0x0D	; 13
    1800:	92 e2       	ldi	r25, 0x22	; 34
    1802:	0e 94 6f 0b 	call	0x16de	; 0x16de <lcd_command>
		_lcd_bubble(mode);
    1806:	8c 2f       	mov	r24, r28
    1808:	0e 94 90 0b 	call	0x1720	; 0x1720 <_lcd_bubble>
	}		
}
    180c:	cf 91       	pop	r28
    180e:	08 95       	ret

00001810 <lcd_macro>:
		uart_enqueue_string(&ulcd, theCommand);
		uart_enqueue(&ulcd, 0x0D); //command terminator
	}		
}

void lcd_macro(char* theCommand){
    1810:	cf 93       	push	r28
    1812:	df 93       	push	r29
    1814:	ec 01       	movw	r28, r24
	if ((lcd_flow_reboot == LCD_ENABLED)&&(uart_count(&ulcd)<MAX_BUFFER_LEN-100)){
    1816:	80 91 97 26 	lds	r24, 0x2697
    181a:	8f 31       	cpi	r24, 0x1F	; 31
    181c:	b9 f4       	brne	.+46     	; 0x184c <lcd_macro+0x3c>
    181e:	80 eb       	ldi	r24, 0xB0	; 176
    1820:	9b e0       	ldi	r25, 0x0B	; 11
    1822:	0e 94 f9 22 	call	0x45f2	; 0x45f2 <uart_count>
    1826:	23 e0       	ldi	r18, 0x03	; 3
    1828:	8c 39       	cpi	r24, 0x9C	; 156
    182a:	92 07       	cpc	r25, r18
    182c:	78 f4       	brcc	.+30     	; 0x184c <lcd_macro+0x3c>
		//Command Header
		uart_enqueue(&ulcd, LCD_MACRO);
    182e:	80 eb       	ldi	r24, 0xB0	; 176
    1830:	9b e0       	ldi	r25, 0x0B	; 11
    1832:	6e ef       	ldi	r22, 0xFE	; 254
    1834:	0e 94 c7 26 	call	0x4d8e	; 0x4d8e <uart_enqueue>
		//Command String
		uart_enqueue_string(&ulcd, theCommand);
    1838:	80 eb       	ldi	r24, 0xB0	; 176
    183a:	9b e0       	ldi	r25, 0x0B	; 11
    183c:	be 01       	movw	r22, r28
    183e:	0e 94 40 23 	call	0x4680	; 0x4680 <uart_enqueue_string>
		//Command Footer (terminator)
		uart_enqueue(&ulcd, 0x0D);
    1842:	80 eb       	ldi	r24, 0xB0	; 176
    1844:	9b e0       	ldi	r25, 0x0B	; 11
    1846:	6d e0       	ldi	r22, 0x0D	; 13
    1848:	0e 94 c7 26 	call	0x4d8e	; 0x4d8e <uart_enqueue>
	}		
}	
    184c:	df 91       	pop	r29
    184e:	cf 91       	pop	r28
    1850:	08 95       	ret

00001852 <lcd_update>:

//Don't forget to end theCommand with a SPACE!
//--it's that way to support negation
//--Positive example: "75 1 "
//--Negative example: "75 1 -" 
void lcd_update(char* theCommand, char* theValue){
    1852:	0f 93       	push	r16
    1854:	1f 93       	push	r17
    1856:	cf 93       	push	r28
    1858:	df 93       	push	r29
    185a:	8c 01       	movw	r16, r24
    185c:	eb 01       	movw	r28, r22
	if ((lcd_flow_reboot == LCD_ENABLED)&&(uart_count(&ulcd)<MAX_BUFFER_LEN-100)){
    185e:	80 91 97 26 	lds	r24, 0x2697
    1862:	8f 31       	cpi	r24, 0x1F	; 31
    1864:	e1 f4       	brne	.+56     	; 0x189e <lcd_update+0x4c>
    1866:	80 eb       	ldi	r24, 0xB0	; 176
    1868:	9b e0       	ldi	r25, 0x0B	; 11
    186a:	0e 94 f9 22 	call	0x45f2	; 0x45f2 <uart_count>
    186e:	23 e0       	ldi	r18, 0x03	; 3
    1870:	8c 39       	cpi	r24, 0x9C	; 156
    1872:	92 07       	cpc	r25, r18
    1874:	a0 f4       	brcc	.+40     	; 0x189e <lcd_update+0x4c>
		uart_enqueue(&ulcd, LCD_COMMAND);
    1876:	80 eb       	ldi	r24, 0xB0	; 176
    1878:	9b e0       	ldi	r25, 0x0B	; 11
    187a:	6a ef       	ldi	r22, 0xFA	; 250
    187c:	0e 94 c7 26 	call	0x4d8e	; 0x4d8e <uart_enqueue>
		uart_enqueue_string(&ulcd, theCommand);
    1880:	80 eb       	ldi	r24, 0xB0	; 176
    1882:	9b e0       	ldi	r25, 0x0B	; 11
    1884:	b8 01       	movw	r22, r16
    1886:	0e 94 40 23 	call	0x4680	; 0x4680 <uart_enqueue_string>
		uart_enqueue_string(&ulcd, theValue);
    188a:	80 eb       	ldi	r24, 0xB0	; 176
    188c:	9b e0       	ldi	r25, 0x0B	; 11
    188e:	be 01       	movw	r22, r28
    1890:	0e 94 40 23 	call	0x4680	; 0x4680 <uart_enqueue_string>
		uart_enqueue(&ulcd, 0x0D); //command terminator
    1894:	80 eb       	ldi	r24, 0xB0	; 176
    1896:	9b e0       	ldi	r25, 0x0B	; 11
    1898:	6d e0       	ldi	r22, 0x0D	; 13
    189a:	0e 94 c7 26 	call	0x4d8e	; 0x4d8e <uart_enqueue>
	}	
}
    189e:	df 91       	pop	r29
    18a0:	cf 91       	pop	r28
    18a2:	1f 91       	pop	r17
    18a4:	0f 91       	pop	r16
    18a6:	08 95       	ret

000018a8 <service_lcd>:

void service_lcd(){	
	static uint16_t decimator = 0;

	//Flow control indicator
	if (lcd_flow_control != LCD_READY){led_on(LED_1);}
    18a8:	80 91 b0 26 	lds	r24, 0x26B0
    18ac:	82 35       	cpi	r24, 0x52	; 82
    18ae:	21 f0       	breq	.+8      	; 0x18b8 <service_lcd+0x10>
    18b0:	81 e0       	ldi	r24, 0x01	; 1
    18b2:	0e 94 13 2d 	call	0x5a26	; 0x5a26 <led_on>
    18b6:	03 c0       	rjmp	.+6      	; 0x18be <service_lcd+0x16>
	else {led_off(LED_1);}
    18b8:	81 e0       	ldi	r24, 0x01	; 1
    18ba:	0e 94 2f 2d 	call	0x5a5e	; 0x5a5e <led_off>
	
	//Reboot logic
	switch(lcd_flow_reboot){
    18be:	80 91 97 26 	lds	r24, 0x2697
    18c2:	80 39       	cpi	r24, 0x90	; 144
    18c4:	51 f0       	breq	.+20     	; 0x18da <service_lcd+0x32>
    18c6:	81 39       	cpi	r24, 0x91	; 145
    18c8:	f1 f4       	brne	.+60     	; 0x1906 <service_lcd+0x5e>
		case LCD_ENABLED:
			//for efficiency test this case first (since it is normal case)
			break;
		case LCD_REBOOT:
			decimator = 0;
    18ca:	10 92 1b 22 	sts	0x221B, r1
    18ce:	10 92 1c 22 	sts	0x221C, r1
			lcd_flow_reboot = LCD_BOOTING;
    18d2:	80 e9       	ldi	r24, 0x90	; 144
    18d4:	80 93 97 26 	sts	0x2697, r24
			break;
    18d8:	16 c0       	rjmp	.+44     	; 0x1906 <service_lcd+0x5e>
		case LCD_BOOTING:
			decimator++;
    18da:	80 91 1b 22 	lds	r24, 0x221B
    18de:	90 91 1c 22 	lds	r25, 0x221C
    18e2:	01 96       	adiw	r24, 0x01	; 1
    18e4:	80 93 1b 22 	sts	0x221B, r24
    18e8:	90 93 1c 22 	sts	0x221C, r25
			if (decimator >= 4999){
    18ec:	23 e1       	ldi	r18, 0x13	; 19
    18ee:	87 38       	cpi	r24, 0x87	; 135
    18f0:	92 07       	cpc	r25, r18
    18f2:	48 f0       	brcs	.+18     	; 0x1906 <service_lcd+0x5e>
				decimator = 0;
    18f4:	10 92 1b 22 	sts	0x221B, r1
    18f8:	10 92 1c 22 	sts	0x221C, r1
				lcd_flow_reboot = LCD_ENABLED;
    18fc:	8f e1       	ldi	r24, 0x1F	; 31
    18fe:	80 93 97 26 	sts	0x2697, r24
				STATE_menu = MENU_STARTUP;
    1902:	80 93 87 25 	sts	0x2587, r24
			}
			break;
	}
	
	//Command processing logic
	switch(lcd_flow_control){
    1906:	80 91 b0 26 	lds	r24, 0x26B0
    190a:	8f 34       	cpi	r24, 0x4F	; 79
    190c:	19 f0       	breq	.+6      	; 0x1914 <service_lcd+0x6c>
    190e:	80 35       	cpi	r24, 0x50	; 80
    1910:	61 f4       	brne	.+24     	; 0x192a <service_lcd+0x82>
    1912:	08 c0       	rjmp	.+16     	; 0x1924 <service_lcd+0x7c>
		case LCD_DONE_COMMAND:
			if (lcd_flow_type == LCD_COMMAND){lcd_flow_control = LCD_READY;}
    1914:	80 91 ae 26 	lds	r24, 0x26AE
    1918:	8a 3f       	cpi	r24, 0xFA	; 250
    191a:	39 f4       	brne	.+14     	; 0x192a <service_lcd+0x82>
    191c:	82 e5       	ldi	r24, 0x52	; 82
    191e:	80 93 b0 26 	sts	0x26B0, r24
    1922:	03 c0       	rjmp	.+6      	; 0x192a <service_lcd+0x82>
			break;
		case LCD_DONE_MACRO:
			lcd_flow_control = LCD_READY;
    1924:	82 e5       	ldi	r24, 0x52	; 82
    1926:	80 93 b0 26 	sts	0x26B0, r24
			break;
	}
	
	//Boot up logic (show start screen and let LCD bootup so commands are understood)
	if (decimator < 5000) {decimator++;}
    192a:	80 91 1b 22 	lds	r24, 0x221B
    192e:	90 91 1c 22 	lds	r25, 0x221C
    1932:	23 e1       	ldi	r18, 0x13	; 19
    1934:	88 38       	cpi	r24, 0x88	; 136
    1936:	92 07       	cpc	r25, r18
    1938:	30 f4       	brcc	.+12     	; 0x1946 <service_lcd+0x9e>
    193a:	01 96       	adiw	r24, 0x01	; 1
    193c:	80 93 1b 22 	sts	0x221B, r24
    1940:	90 93 1c 22 	sts	0x221C, r25
    1944:	08 95       	ret
	else if (decimator == 5000) {lcd_flow_control = LCD_READY; decimator = 9000;}
    1946:	23 e1       	ldi	r18, 0x13	; 19
    1948:	88 38       	cpi	r24, 0x88	; 136
    194a:	92 07       	cpc	r25, r18
    194c:	49 f4       	brne	.+18     	; 0x1960 <service_lcd+0xb8>
    194e:	82 e5       	ldi	r24, 0x52	; 82
    1950:	80 93 b0 26 	sts	0x26B0, r24
    1954:	88 e2       	ldi	r24, 0x28	; 40
    1956:	93 e2       	ldi	r25, 0x23	; 35
    1958:	80 93 1b 22 	sts	0x221B, r24
    195c:	90 93 1c 22 	sts	0x221C, r25
    1960:	08 95       	ret

00001962 <init_lcd_console>:

//#############################################################
//## INITIALIZATION ROUTINE
//#############################################################

void init_lcd_console(){
    1962:	ee e2       	ldi	r30, 0x2E	; 46
    1964:	f2 e2       	ldi	r31, 0x22	; 34
    1966:	ac e8       	ldi	r26, 0x8C	; 140
    1968:	b6 e2       	ldi	r27, 0x26	; 38
    196a:	86 e8       	ldi	r24, 0x86	; 134
    196c:	95 e2       	ldi	r25, 0x25	; 37
	char* line_buffer;
	//Load the command bytes into the console buffer
	for(uint8_t i=0;i<LCD_CONSOLE_NUM_ROWS;i++){
		line_buffer = lcd_console[i];
		line_buffer[0] = '8'; line_buffer[1]='8'; line_buffer[2]=' '; line_buffer[4]=' '; line_buffer[5]='"'; line_buffer[6]='"';		
    196e:	48 e3       	ldi	r20, 0x38	; 56
    1970:	30 e2       	ldi	r19, 0x20	; 32
    1972:	22 e2       	ldi	r18, 0x22	; 34
    1974:	40 83       	st	Z, r20
    1976:	41 83       	std	Z+1, r20	; 0x01
    1978:	32 83       	std	Z+2, r19	; 0x02
    197a:	34 83       	std	Z+4, r19	; 0x04
    197c:	25 83       	std	Z+5, r18	; 0x05
    197e:	26 83       	std	Z+6, r18	; 0x06
		lcd_buffer_dirty[i] = false;
    1980:	1d 92       	st	X+, r1
    1982:	e5 59       	subi	r30, 0x95	; 149
    1984:	ff 4f       	sbci	r31, 0xFF	; 255
//#############################################################

void init_lcd_console(){
	char* line_buffer;
	//Load the command bytes into the console buffer
	for(uint8_t i=0;i<LCD_CONSOLE_NUM_ROWS;i++){
    1986:	e8 17       	cp	r30, r24
    1988:	f9 07       	cpc	r31, r25
    198a:	a1 f7       	brne	.-24     	; 0x1974 <init_lcd_console+0x12>
		line_buffer = lcd_console[i];
		line_buffer[0] = '8'; line_buffer[1]='8'; line_buffer[2]=' '; line_buffer[4]=' '; line_buffer[5]='"'; line_buffer[6]='"';		
		lcd_buffer_dirty[i] = false;
	}
	//Init state
	lcd_console_head = 0;
    198c:	10 92 8b 26 	sts	0x268B, r1
}
    1990:	08 95       	ret

00001992 <lcd_console_write>:

//#############################################################
//## SCREENS: CONSOLE
//#############################################################

void lcd_console_write(char* theString){
    1992:	ef 92       	push	r14
    1994:	ff 92       	push	r15
    1996:	0f 93       	push	r16
    1998:	1f 93       	push	r17
    199a:	cf 93       	push	r28
    199c:	df 93       	push	r29
    199e:	8c 01       	movw	r16, r24
	int8_t head = (int8_t)lcd_console_head;
    19a0:	70 91 8b 26 	lds	r23, 0x268B
    19a4:	67 2f       	mov	r22, r23
	char* line_buffer = lcd_console[lcd_console_head];
    19a6:	27 2f       	mov	r18, r23
    19a8:	30 e0       	ldi	r19, 0x00	; 0
    19aa:	8b e6       	ldi	r24, 0x6B	; 107
    19ac:	90 e0       	ldi	r25, 0x00	; 0
    19ae:	28 9f       	mul	r18, r24
    19b0:	a0 01       	movw	r20, r0
    19b2:	29 9f       	mul	r18, r25
    19b4:	50 0d       	add	r21, r0
    19b6:	38 9f       	mul	r19, r24
    19b8:	50 0d       	add	r21, r0
    19ba:	11 24       	eor	r1, r1
    19bc:	0f 2e       	mov	r0, r31
    19be:	fe e2       	ldi	r31, 0x2E	; 46
    19c0:	ef 2e       	mov	r14, r31
    19c2:	f2 e2       	ldi	r31, 0x22	; 34
    19c4:	ff 2e       	mov	r15, r31
    19c6:	f0 2d       	mov	r31, r0
    19c8:	e4 0e       	add	r14, r20
    19ca:	f5 1e       	adc	r15, r21
    19cc:	a1 e3       	ldi	r26, 0x31	; 49
	//Destination
	for(uint8_t i=0;i<LCD_CONSOLE_NUM_ROWS;i++){
		lcd_console[head][3] = 0x31 + i; //id of static control (Row) to write to 
    19ce:	4e e2       	ldi	r20, 0x2E	; 46
    19d0:	52 e2       	ldi	r21, 0x22	; 34
    19d2:	eb e6       	ldi	r30, 0x6B	; 107
    19d4:	f0 e0       	ldi	r31, 0x00	; 0
    19d6:	86 2f       	mov	r24, r22
    19d8:	99 27       	eor	r25, r25
    19da:	87 fd       	sbrc	r24, 7
    19dc:	90 95       	com	r25
    19de:	8e 9f       	mul	r24, r30
    19e0:	90 01       	movw	r18, r0
    19e2:	8f 9f       	mul	r24, r31
    19e4:	30 0d       	add	r19, r0
    19e6:	9e 9f       	mul	r25, r30
    19e8:	30 0d       	add	r19, r0
    19ea:	11 24       	eor	r1, r1
    19ec:	24 0f       	add	r18, r20
    19ee:	35 1f       	adc	r19, r21
    19f0:	e9 01       	movw	r28, r18
    19f2:	ab 83       	std	Y+3, r26	; 0x03
		head--;
    19f4:	61 50       	subi	r22, 0x01	; 1
		if(head < 0){head = LCD_CONSOLE_NUM_ROWS-1;}
    19f6:	0a f4       	brpl	.+2      	; 0x19fa <lcd_console_write+0x68>
    19f8:	67 e0       	ldi	r22, 0x07	; 7
    19fa:	af 5f       	subi	r26, 0xFF	; 255

void lcd_console_write(char* theString){
	int8_t head = (int8_t)lcd_console_head;
	char* line_buffer = lcd_console[lcd_console_head];
	//Destination
	for(uint8_t i=0;i<LCD_CONSOLE_NUM_ROWS;i++){
    19fc:	a9 33       	cpi	r26, 0x39	; 57
    19fe:	59 f7       	brne	.-42     	; 0x19d6 <lcd_console_write+0x44>
		head--;
		if(head < 0){head = LCD_CONSOLE_NUM_ROWS-1;}
	}	
	//Content
	for (uint8_t i=0; i<LCD_CONSOLE_NUM_COLS; i++){
		if (theString[i] == 0){
    1a00:	f8 01       	movw	r30, r16
    1a02:	80 81       	ld	r24, Z
    1a04:	88 23       	and	r24, r24
    1a06:	99 f5       	brne	.+102    	; 0x1a6e <lcd_console_write+0xdc>
    1a08:	05 c0       	rjmp	.+10     	; 0x1a14 <lcd_console_write+0x82>
    1a0a:	94 2f       	mov	r25, r20
    1a0c:	81 91       	ld	r24, Z+
    1a0e:	88 23       	and	r24, r24
    1a10:	21 f5       	brne	.+72     	; 0x1a5a <lcd_console_write+0xc8>
    1a12:	03 c0       	rjmp	.+6      	; 0x1a1a <lcd_console_write+0x88>
    1a14:	40 e0       	ldi	r20, 0x00	; 0
    1a16:	50 e0       	ldi	r21, 0x00	; 0
    1a18:	90 e0       	ldi	r25, 0x00	; 0
			line_buffer[6+i] = '"';
    1a1a:	f7 01       	movw	r30, r14
    1a1c:	e9 0f       	add	r30, r25
    1a1e:	f1 1d       	adc	r31, r1
    1a20:	82 e2       	ldi	r24, 0x22	; 34
    1a22:	86 83       	std	Z+6, r24	; 0x06
			line_buffer[6+i+1] = 0;
    1a24:	e7 01       	movw	r28, r14
    1a26:	c4 0f       	add	r28, r20
    1a28:	d5 1f       	adc	r29, r21
    1a2a:	1f 82       	std	Y+7, r1	; 0x07
			break;
		}
		line_buffer[6+i] = theString[i];
	}
	//Dirty all rows (so all rows get printed to screen)
	for (uint8_t i=0; i<LCD_CONSOLE_NUM_ROWS; i++){lcd_buffer_dirty[i] = true;}	
    1a2c:	81 e0       	ldi	r24, 0x01	; 1
    1a2e:	80 93 8c 26 	sts	0x268C, r24
    1a32:	80 93 8d 26 	sts	0x268D, r24
    1a36:	80 93 8e 26 	sts	0x268E, r24
    1a3a:	80 93 8f 26 	sts	0x268F, r24
    1a3e:	80 93 90 26 	sts	0x2690, r24
    1a42:	80 93 91 26 	sts	0x2691, r24
    1a46:	80 93 92 26 	sts	0x2692, r24
    1a4a:	80 93 93 26 	sts	0x2693, r24
	//Move row pointer
	lcd_console_head++;
    1a4e:	7f 5f       	subi	r23, 0xFF	; 255
    1a50:	70 93 8b 26 	sts	0x268B, r23
	if (lcd_console_head >= LCD_CONSOLE_NUM_ROWS){lcd_console_head = 0;}
    1a54:	78 30       	cpi	r23, 0x08	; 8
    1a56:	40 f4       	brcc	.+16     	; 0x1a68 <lcd_console_write+0xd6>
    1a58:	13 c0       	rjmp	.+38     	; 0x1a80 <lcd_console_write+0xee>
		if (theString[i] == 0){
			line_buffer[6+i] = '"';
			line_buffer[6+i+1] = 0;
			break;
		}
		line_buffer[6+i] = theString[i];
    1a5a:	8d 93       	st	X+, r24
    1a5c:	4f 5f       	subi	r20, 0xFF	; 255
    1a5e:	5f 4f       	sbci	r21, 0xFF	; 255
		lcd_console[head][3] = 0x31 + i; //id of static control (Row) to write to 
		head--;
		if(head < 0){head = LCD_CONSOLE_NUM_ROWS-1;}
	}	
	//Content
	for (uint8_t i=0; i<LCD_CONSOLE_NUM_COLS; i++){
    1a60:	44 36       	cpi	r20, 0x64	; 100
    1a62:	51 05       	cpc	r21, r1
    1a64:	91 f6       	brne	.-92     	; 0x1a0a <lcd_console_write+0x78>
    1a66:	e2 cf       	rjmp	.-60     	; 0x1a2c <lcd_console_write+0x9a>
	}
	//Dirty all rows (so all rows get printed to screen)
	for (uint8_t i=0; i<LCD_CONSOLE_NUM_ROWS; i++){lcd_buffer_dirty[i] = true;}	
	//Move row pointer
	lcd_console_head++;
	if (lcd_console_head >= LCD_CONSOLE_NUM_ROWS){lcd_console_head = 0;}
    1a68:	10 92 8b 26 	sts	0x268B, r1
    1a6c:	09 c0       	rjmp	.+18     	; 0x1a80 <lcd_console_write+0xee>
		if (theString[i] == 0){
			line_buffer[6+i] = '"';
			line_buffer[6+i+1] = 0;
			break;
		}
		line_buffer[6+i] = theString[i];
    1a6e:	e7 01       	movw	r28, r14
    1a70:	8e 83       	std	Y+6, r24	; 0x06

//#############################################################
//## SCREENS: CONSOLE
//#############################################################

void lcd_console_write(char* theString){
    1a72:	f8 01       	movw	r30, r16
    1a74:	31 96       	adiw	r30, 0x01	; 1
    1a76:	d7 01       	movw	r26, r14
    1a78:	17 96       	adiw	r26, 0x07	; 7
    1a7a:	41 e0       	ldi	r20, 0x01	; 1
    1a7c:	50 e0       	ldi	r21, 0x00	; 0
    1a7e:	c5 cf       	rjmp	.-118    	; 0x1a0a <lcd_console_write+0x78>
	//Dirty all rows (so all rows get printed to screen)
	for (uint8_t i=0; i<LCD_CONSOLE_NUM_ROWS; i++){lcd_buffer_dirty[i] = true;}	
	//Move row pointer
	lcd_console_head++;
	if (lcd_console_head >= LCD_CONSOLE_NUM_ROWS){lcd_console_head = 0;}
}
    1a80:	df 91       	pop	r29
    1a82:	cf 91       	pop	r28
    1a84:	1f 91       	pop	r17
    1a86:	0f 91       	pop	r16
    1a88:	ff 90       	pop	r15
    1a8a:	ef 90       	pop	r14
    1a8c:	08 95       	ret

00001a8e <service_lcd_console>:
//#############################################################
//## SERVICE ROUTINE
//#############################################################

//Used to refresh the console
void service_lcd_console(){
    1a8e:	ef 92       	push	r14
    1a90:	ff 92       	push	r15
    1a92:	0f 93       	push	r16
    1a94:	1f 93       	push	r17
    1a96:	cf 93       	push	r28
	static uint8_t next_row_to_output = 0;
	uint8_t num_rows_output = 0;
	if (STATE_menu != MENU_CONSOLE){return;}
    1a98:	80 91 87 25 	lds	r24, 0x2587
    1a9c:	82 32       	cpi	r24, 0x22	; 34
    1a9e:	b1 f5       	brne	.+108    	; 0x1b0c <service_lcd_console+0x7e>
    1aa0:	c9 e0       	ldi	r28, 0x09	; 9
	while((uart_count(&ulcd) < 512)&&(num_rows_output<LCD_CONSOLE_NUM_ROWS)){
		if(lcd_buffer_dirty[next_row_to_output]){
    1aa2:	0c e8       	ldi	r16, 0x8C	; 140
    1aa4:	16 e2       	ldi	r17, 0x26	; 38
			lcd_command(lcd_console[next_row_to_output]);
    1aa6:	0f 2e       	mov	r0, r31
    1aa8:	fb e6       	ldi	r31, 0x6B	; 107
    1aaa:	ef 2e       	mov	r14, r31
    1aac:	ff 24       	eor	r15, r15
    1aae:	f0 2d       	mov	r31, r0
    1ab0:	23 c0       	rjmp	.+70     	; 0x1af8 <service_lcd_console+0x6a>
void service_lcd_console(){
	static uint8_t next_row_to_output = 0;
	uint8_t num_rows_output = 0;
	if (STATE_menu != MENU_CONSOLE){return;}
	while((uart_count(&ulcd) < 512)&&(num_rows_output<LCD_CONSOLE_NUM_ROWS)){
		if(lcd_buffer_dirty[next_row_to_output]){
    1ab2:	20 91 1d 22 	lds	r18, 0x221D
    1ab6:	f8 01       	movw	r30, r16
    1ab8:	e2 0f       	add	r30, r18
    1aba:	f1 1d       	adc	r31, r1
    1abc:	80 81       	ld	r24, Z
    1abe:	88 23       	and	r24, r24
    1ac0:	91 f0       	breq	.+36     	; 0x1ae6 <service_lcd_console+0x58>
			lcd_command(lcd_console[next_row_to_output]);
    1ac2:	30 e0       	ldi	r19, 0x00	; 0
    1ac4:	2e 9d       	mul	r18, r14
    1ac6:	c0 01       	movw	r24, r0
    1ac8:	2f 9d       	mul	r18, r15
    1aca:	90 0d       	add	r25, r0
    1acc:	3e 9d       	mul	r19, r14
    1ace:	90 0d       	add	r25, r0
    1ad0:	11 24       	eor	r1, r1
    1ad2:	82 5d       	subi	r24, 0xD2	; 210
    1ad4:	9d 4d       	sbci	r25, 0xDD	; 221
    1ad6:	0e 94 6f 0b 	call	0x16de	; 0x16de <lcd_command>
			lcd_buffer_dirty[next_row_to_output] = false;
    1ada:	80 91 1d 22 	lds	r24, 0x221D
    1ade:	f8 01       	movw	r30, r16
    1ae0:	e8 0f       	add	r30, r24
    1ae2:	f1 1d       	adc	r31, r1
    1ae4:	10 82       	st	Z, r1
		}
		next_row_to_output++; num_rows_output++;
    1ae6:	80 91 1d 22 	lds	r24, 0x221D
    1aea:	8f 5f       	subi	r24, 0xFF	; 255
    1aec:	80 93 1d 22 	sts	0x221D, r24
		if(next_row_to_output>=LCD_CONSOLE_NUM_ROWS){next_row_to_output=0;}
    1af0:	88 30       	cpi	r24, 0x08	; 8
    1af2:	10 f0       	brcs	.+4      	; 0x1af8 <service_lcd_console+0x6a>
    1af4:	10 92 1d 22 	sts	0x221D, r1
//Used to refresh the console
void service_lcd_console(){
	static uint8_t next_row_to_output = 0;
	uint8_t num_rows_output = 0;
	if (STATE_menu != MENU_CONSOLE){return;}
	while((uart_count(&ulcd) < 512)&&(num_rows_output<LCD_CONSOLE_NUM_ROWS)){
    1af8:	80 eb       	ldi	r24, 0xB0	; 176
    1afa:	9b e0       	ldi	r25, 0x0B	; 11
    1afc:	0e 94 f9 22 	call	0x45f2	; 0x45f2 <uart_count>
    1b00:	22 e0       	ldi	r18, 0x02	; 2
    1b02:	80 30       	cpi	r24, 0x00	; 0
    1b04:	92 07       	cpc	r25, r18
    1b06:	10 f4       	brcc	.+4      	; 0x1b0c <service_lcd_console+0x7e>
    1b08:	c1 50       	subi	r28, 0x01	; 1
    1b0a:	99 f6       	brne	.-90     	; 0x1ab2 <service_lcd_console+0x24>
			lcd_buffer_dirty[next_row_to_output] = false;
		}
		next_row_to_output++; num_rows_output++;
		if(next_row_to_output>=LCD_CONSOLE_NUM_ROWS){next_row_to_output=0;}
	}
    1b0c:	cf 91       	pop	r28
    1b0e:	1f 91       	pop	r17
    1b10:	0f 91       	pop	r16
    1b12:	ff 90       	pop	r15
    1b14:	ef 90       	pop	r14
    1b16:	08 95       	ret

00001b18 <init_lcd_touch>:
//#############################################################
//## INITIALIZATION ROUTINE
//#############################################################

void init_lcd_touch(){
	lcd_last_touch_command = LCD_TOUCH_NONE;
    1b18:	85 e1       	ldi	r24, 0x15	; 21
    1b1a:	80 93 9d 26 	sts	0x269D, r24
	lcd_touch_buffer[LCD_TOUCH_BUFFER_LEN] = 0; //string termination to help with debug printing of the buffer	
    1b1e:	10 92 aa 26 	sts	0x26AA, r1
}
    1b22:	08 95       	ret

00001b24 <lcd_end_macro>:
//#############################################################
//## TOUCHSCREEN COMMAND BUFFER
//#############################################################

boolean lcd_end_macro(){
if ((lcd_touch_buffer[0]==0x7E)&&(lcd_touch_buffer[1]==0x27)){return true;}
    1b24:	80 91 a4 26 	lds	r24, 0x26A4
    1b28:	8e 37       	cpi	r24, 0x7E	; 126
    1b2a:	39 f4       	brne	.+14     	; 0x1b3a <lcd_end_macro+0x16>
    1b2c:	90 91 a5 26 	lds	r25, 0x26A5

//#############################################################
//## TOUCHSCREEN COMMAND BUFFER
//#############################################################

boolean lcd_end_macro(){
    1b30:	81 e0       	ldi	r24, 0x01	; 1
    1b32:	97 32       	cpi	r25, 0x27	; 39
    1b34:	19 f0       	breq	.+6      	; 0x1b3c <lcd_end_macro+0x18>
    1b36:	80 e0       	ldi	r24, 0x00	; 0
    1b38:	08 95       	ret
if ((lcd_touch_buffer[0]==0x7E)&&(lcd_touch_buffer[1]==0x27)){return true;}
	else {return false;}
    1b3a:	80 e0       	ldi	r24, 0x00	; 0
}
    1b3c:	08 95       	ret

00001b3e <lcd_get_touch>:

/// Returns the code for the last thing touched by user
/** Clears the touch history on read*/
uint8_t lcd_get_touch(){
	uint8_t last = lcd_last_touch_command;
    1b3e:	80 91 9d 26 	lds	r24, 0x269D
	lcd_last_touch_command = LCD_TOUCH_NONE;
    1b42:	95 e1       	ldi	r25, 0x15	; 21
    1b44:	90 93 9d 26 	sts	0x269D, r25
	return last;
}
    1b48:	08 95       	ret

00001b4a <lcd_set_touch>:
	
void lcd_set_touch(uint8_t latest){
	//Rotate buffer
	for (uint8_t i=0;i<LCD_TOUCH_BUFFER_LEN-1;i++){lcd_touch_buffer[LCD_TOUCH_BUFFER_LEN-1-i] = lcd_touch_buffer[LCD_TOUCH_BUFFER_LEN-2-i];}
    1b4a:	28 ea       	ldi	r18, 0xA8	; 168
    1b4c:	36 e2       	ldi	r19, 0x26	; 38
    1b4e:	90 91 a8 26 	lds	r25, 0x26A8
    1b52:	90 93 a9 26 	sts	0x26A9, r25
    1b56:	d9 01       	movw	r26, r18
    1b58:	9e 91       	ld	r25, -X
    1b5a:	90 93 a8 26 	sts	0x26A8, r25
    1b5e:	f9 01       	movw	r30, r18
    1b60:	32 97       	sbiw	r30, 0x02	; 2
    1b62:	90 81       	ld	r25, Z
    1b64:	9c 93       	st	X, r25
    1b66:	d9 01       	movw	r26, r18
    1b68:	13 97       	sbiw	r26, 0x03	; 3
    1b6a:	9c 91       	ld	r25, X
    1b6c:	90 83       	st	Z, r25
    1b6e:	f9 01       	movw	r30, r18
    1b70:	34 97       	sbiw	r30, 0x04	; 4
    1b72:	90 81       	ld	r25, Z
    1b74:	9c 93       	st	X, r25
	//Add to front (0-index)
	lcd_touch_buffer[0] = latest;
    1b76:	80 83       	st	Z, r24

	//Analyze (remember reverse order)

	//Top Menu Navigation
		if ((lcd_touch_buffer[0]==0x0D)&&(lcd_touch_buffer[1]=='2')&&(lcd_touch_buffer[2]=='1')&&(lcd_touch_buffer[3]=='P')&&(lcd_touch_buffer[4]=='Z')&&(lcd_touch_buffer[5]=='T')){lcd_last_touch_command=LCD_TOUCH_OUTPUT;return;}
    1b78:	80 81       	ld	r24, Z
    1b7a:	8d 30       	cpi	r24, 0x0D	; 13
    1b7c:	c1 f4       	brne	.+48     	; 0x1bae <lcd_set_touch+0x64>
    1b7e:	80 91 a5 26 	lds	r24, 0x26A5
    1b82:	82 33       	cpi	r24, 0x32	; 50
    1b84:	a1 f4       	brne	.+40     	; 0x1bae <lcd_set_touch+0x64>
    1b86:	80 91 a6 26 	lds	r24, 0x26A6
    1b8a:	81 33       	cpi	r24, 0x31	; 49
    1b8c:	81 f4       	brne	.+32     	; 0x1bae <lcd_set_touch+0x64>
    1b8e:	80 91 a7 26 	lds	r24, 0x26A7
    1b92:	80 35       	cpi	r24, 0x50	; 80
    1b94:	61 f4       	brne	.+24     	; 0x1bae <lcd_set_touch+0x64>
    1b96:	80 91 a8 26 	lds	r24, 0x26A8
    1b9a:	8a 35       	cpi	r24, 0x5A	; 90
    1b9c:	41 f4       	brne	.+16     	; 0x1bae <lcd_set_touch+0x64>
    1b9e:	80 91 a9 26 	lds	r24, 0x26A9
    1ba2:	84 35       	cpi	r24, 0x54	; 84
    1ba4:	21 f4       	brne	.+8      	; 0x1bae <lcd_set_touch+0x64>
    1ba6:	8c e0       	ldi	r24, 0x0C	; 12
    1ba8:	80 93 9d 26 	sts	0x269D, r24
    1bac:	08 95       	ret
		if ((lcd_touch_buffer[0]==0x0D)&&(lcd_touch_buffer[1]=='3')&&(lcd_touch_buffer[2]=='1')&&(lcd_touch_buffer[3]=='P')&&(lcd_touch_buffer[4]=='Z')&&(lcd_touch_buffer[5]=='T')){lcd_last_touch_command=LCD_TOUCH_CONTROL;return;}
    1bae:	80 91 a4 26 	lds	r24, 0x26A4
    1bb2:	8d 30       	cpi	r24, 0x0D	; 13
    1bb4:	c1 f4       	brne	.+48     	; 0x1be6 <lcd_set_touch+0x9c>
    1bb6:	80 91 a5 26 	lds	r24, 0x26A5
    1bba:	83 33       	cpi	r24, 0x33	; 51
    1bbc:	a1 f4       	brne	.+40     	; 0x1be6 <lcd_set_touch+0x9c>
    1bbe:	80 91 a6 26 	lds	r24, 0x26A6
    1bc2:	81 33       	cpi	r24, 0x31	; 49
    1bc4:	81 f4       	brne	.+32     	; 0x1be6 <lcd_set_touch+0x9c>
    1bc6:	80 91 a7 26 	lds	r24, 0x26A7
    1bca:	80 35       	cpi	r24, 0x50	; 80
    1bcc:	61 f4       	brne	.+24     	; 0x1be6 <lcd_set_touch+0x9c>
    1bce:	80 91 a8 26 	lds	r24, 0x26A8
    1bd2:	8a 35       	cpi	r24, 0x5A	; 90
    1bd4:	41 f4       	brne	.+16     	; 0x1be6 <lcd_set_touch+0x9c>
    1bd6:	80 91 a9 26 	lds	r24, 0x26A9
    1bda:	84 35       	cpi	r24, 0x54	; 84
    1bdc:	21 f4       	brne	.+8      	; 0x1be6 <lcd_set_touch+0x9c>
    1bde:	8d e0       	ldi	r24, 0x0D	; 13
    1be0:	80 93 9d 26 	sts	0x269D, r24
    1be4:	08 95       	ret
		if ((lcd_touch_buffer[0]==0x0D)&&(lcd_touch_buffer[1]=='4')&&(lcd_touch_buffer[2]=='1')&&(lcd_touch_buffer[3]=='P')&&(lcd_touch_buffer[4]=='Z')&&(lcd_touch_buffer[5]=='T')){lcd_last_touch_command=LCD_TOUCH_CONSOLE;return;}
    1be6:	80 91 a4 26 	lds	r24, 0x26A4
    1bea:	8d 30       	cpi	r24, 0x0D	; 13
    1bec:	c1 f4       	brne	.+48     	; 0x1c1e <lcd_set_touch+0xd4>
    1bee:	80 91 a5 26 	lds	r24, 0x26A5
    1bf2:	84 33       	cpi	r24, 0x34	; 52
    1bf4:	a1 f4       	brne	.+40     	; 0x1c1e <lcd_set_touch+0xd4>
    1bf6:	80 91 a6 26 	lds	r24, 0x26A6
    1bfa:	81 33       	cpi	r24, 0x31	; 49
    1bfc:	81 f4       	brne	.+32     	; 0x1c1e <lcd_set_touch+0xd4>
    1bfe:	80 91 a7 26 	lds	r24, 0x26A7
    1c02:	80 35       	cpi	r24, 0x50	; 80
    1c04:	61 f4       	brne	.+24     	; 0x1c1e <lcd_set_touch+0xd4>
    1c06:	80 91 a8 26 	lds	r24, 0x26A8
    1c0a:	8a 35       	cpi	r24, 0x5A	; 90
    1c0c:	41 f4       	brne	.+16     	; 0x1c1e <lcd_set_touch+0xd4>
    1c0e:	80 91 a9 26 	lds	r24, 0x26A9
    1c12:	84 35       	cpi	r24, 0x54	; 84
    1c14:	21 f4       	brne	.+8      	; 0x1c1e <lcd_set_touch+0xd4>
    1c16:	8e e0       	ldi	r24, 0x0E	; 14
    1c18:	80 93 9d 26 	sts	0x269D, r24
    1c1c:	08 95       	ret
	//Control Screen		
		if ((lcd_touch_buffer[0]==0x0D)&&(lcd_touch_buffer[1]=='7')&&(lcd_touch_buffer[2]=='1')&&(lcd_touch_buffer[3]=='P')&&(lcd_touch_buffer[4]=='Z')&&(lcd_touch_buffer[5]=='T')){lcd_last_touch_command=LCD_TOUCH_ROW_A;return;}
    1c1e:	80 91 a4 26 	lds	r24, 0x26A4
    1c22:	8d 30       	cpi	r24, 0x0D	; 13
    1c24:	c1 f4       	brne	.+48     	; 0x1c56 <lcd_set_touch+0x10c>
    1c26:	80 91 a5 26 	lds	r24, 0x26A5
    1c2a:	87 33       	cpi	r24, 0x37	; 55
    1c2c:	a1 f4       	brne	.+40     	; 0x1c56 <lcd_set_touch+0x10c>
    1c2e:	80 91 a6 26 	lds	r24, 0x26A6
    1c32:	81 33       	cpi	r24, 0x31	; 49
    1c34:	81 f4       	brne	.+32     	; 0x1c56 <lcd_set_touch+0x10c>
    1c36:	80 91 a7 26 	lds	r24, 0x26A7
    1c3a:	80 35       	cpi	r24, 0x50	; 80
    1c3c:	61 f4       	brne	.+24     	; 0x1c56 <lcd_set_touch+0x10c>
    1c3e:	80 91 a8 26 	lds	r24, 0x26A8
    1c42:	8a 35       	cpi	r24, 0x5A	; 90
    1c44:	41 f4       	brne	.+16     	; 0x1c56 <lcd_set_touch+0x10c>
    1c46:	80 91 a9 26 	lds	r24, 0x26A9
    1c4a:	84 35       	cpi	r24, 0x54	; 84
    1c4c:	21 f4       	brne	.+8      	; 0x1c56 <lcd_set_touch+0x10c>
    1c4e:	81 e1       	ldi	r24, 0x11	; 17
    1c50:	80 93 9d 26 	sts	0x269D, r24
    1c54:	08 95       	ret
		if ((lcd_touch_buffer[0]==0x0D)&&(lcd_touch_buffer[1]=='8')&&(lcd_touch_buffer[2]=='1')&&(lcd_touch_buffer[3]=='P')&&(lcd_touch_buffer[4]=='Z')&&(lcd_touch_buffer[5]=='T')){lcd_last_touch_command=LCD_TOUCH_ROW_B;return;}
    1c56:	80 91 a4 26 	lds	r24, 0x26A4
    1c5a:	8d 30       	cpi	r24, 0x0D	; 13
    1c5c:	c1 f4       	brne	.+48     	; 0x1c8e <lcd_set_touch+0x144>
    1c5e:	80 91 a5 26 	lds	r24, 0x26A5
    1c62:	88 33       	cpi	r24, 0x38	; 56
    1c64:	a1 f4       	brne	.+40     	; 0x1c8e <lcd_set_touch+0x144>
    1c66:	80 91 a6 26 	lds	r24, 0x26A6
    1c6a:	81 33       	cpi	r24, 0x31	; 49
    1c6c:	81 f4       	brne	.+32     	; 0x1c8e <lcd_set_touch+0x144>
    1c6e:	80 91 a7 26 	lds	r24, 0x26A7
    1c72:	80 35       	cpi	r24, 0x50	; 80
    1c74:	61 f4       	brne	.+24     	; 0x1c8e <lcd_set_touch+0x144>
    1c76:	80 91 a8 26 	lds	r24, 0x26A8
    1c7a:	8a 35       	cpi	r24, 0x5A	; 90
    1c7c:	41 f4       	brne	.+16     	; 0x1c8e <lcd_set_touch+0x144>
    1c7e:	80 91 a9 26 	lds	r24, 0x26A9
    1c82:	84 35       	cpi	r24, 0x54	; 84
    1c84:	21 f4       	brne	.+8      	; 0x1c8e <lcd_set_touch+0x144>
    1c86:	82 e1       	ldi	r24, 0x12	; 18
    1c88:	80 93 9d 26 	sts	0x269D, r24
    1c8c:	08 95       	ret
		if ((lcd_touch_buffer[0]==0x0D)&&(lcd_touch_buffer[1]=='9')&&(lcd_touch_buffer[2]=='1')&&(lcd_touch_buffer[3]=='P')&&(lcd_touch_buffer[4]=='Z')&&(lcd_touch_buffer[5]=='T')){lcd_last_touch_command=LCD_TOUCH_ROW_C;return;}
    1c8e:	80 91 a4 26 	lds	r24, 0x26A4
    1c92:	8d 30       	cpi	r24, 0x0D	; 13
    1c94:	c1 f4       	brne	.+48     	; 0x1cc6 <lcd_set_touch+0x17c>
    1c96:	80 91 a5 26 	lds	r24, 0x26A5
    1c9a:	89 33       	cpi	r24, 0x39	; 57
    1c9c:	a1 f4       	brne	.+40     	; 0x1cc6 <lcd_set_touch+0x17c>
    1c9e:	80 91 a6 26 	lds	r24, 0x26A6
    1ca2:	81 33       	cpi	r24, 0x31	; 49
    1ca4:	81 f4       	brne	.+32     	; 0x1cc6 <lcd_set_touch+0x17c>
    1ca6:	80 91 a7 26 	lds	r24, 0x26A7
    1caa:	80 35       	cpi	r24, 0x50	; 80
    1cac:	61 f4       	brne	.+24     	; 0x1cc6 <lcd_set_touch+0x17c>
    1cae:	80 91 a8 26 	lds	r24, 0x26A8
    1cb2:	8a 35       	cpi	r24, 0x5A	; 90
    1cb4:	41 f4       	brne	.+16     	; 0x1cc6 <lcd_set_touch+0x17c>
    1cb6:	80 91 a9 26 	lds	r24, 0x26A9
    1cba:	84 35       	cpi	r24, 0x54	; 84
    1cbc:	21 f4       	brne	.+8      	; 0x1cc6 <lcd_set_touch+0x17c>
    1cbe:	83 e1       	ldi	r24, 0x13	; 19
    1cc0:	80 93 9d 26 	sts	0x269D, r24
    1cc4:	08 95       	ret
		if ((lcd_touch_buffer[0]==0x0D)&&(lcd_touch_buffer[1]=='0')&&(lcd_touch_buffer[2]=='2')&&(lcd_touch_buffer[3]=='P')&&(lcd_touch_buffer[4]=='Z')&&(lcd_touch_buffer[5]=='T')){lcd_last_touch_command=LCD_TOUCH_ROW_D;return;}
    1cc6:	80 91 a4 26 	lds	r24, 0x26A4
    1cca:	8d 30       	cpi	r24, 0x0D	; 13
    1ccc:	c1 f4       	brne	.+48     	; 0x1cfe <lcd_set_touch+0x1b4>
    1cce:	80 91 a5 26 	lds	r24, 0x26A5
    1cd2:	80 33       	cpi	r24, 0x30	; 48
    1cd4:	a1 f4       	brne	.+40     	; 0x1cfe <lcd_set_touch+0x1b4>
    1cd6:	80 91 a6 26 	lds	r24, 0x26A6
    1cda:	82 33       	cpi	r24, 0x32	; 50
    1cdc:	81 f4       	brne	.+32     	; 0x1cfe <lcd_set_touch+0x1b4>
    1cde:	80 91 a7 26 	lds	r24, 0x26A7
    1ce2:	80 35       	cpi	r24, 0x50	; 80
    1ce4:	61 f4       	brne	.+24     	; 0x1cfe <lcd_set_touch+0x1b4>
    1ce6:	80 91 a8 26 	lds	r24, 0x26A8
    1cea:	8a 35       	cpi	r24, 0x5A	; 90
    1cec:	41 f4       	brne	.+16     	; 0x1cfe <lcd_set_touch+0x1b4>
    1cee:	80 91 a9 26 	lds	r24, 0x26A9
    1cf2:	84 35       	cpi	r24, 0x54	; 84
    1cf4:	21 f4       	brne	.+8      	; 0x1cfe <lcd_set_touch+0x1b4>
    1cf6:	84 e1       	ldi	r24, 0x14	; 20
    1cf8:	80 93 9d 26 	sts	0x269D, r24
    1cfc:	08 95       	ret
	//Control Dialog Window
		if ((lcd_touch_buffer[0]==0x0D)&&(lcd_touch_buffer[1]=='6')&&(lcd_touch_buffer[2]=='9')&&(lcd_touch_buffer[3]=='P')&&(lcd_touch_buffer[4]=='Z')&&(lcd_touch_buffer[5]=='T')){lcd_last_touch_command=LCD_TOUCH_CLOSE_DIAL;return;}
    1cfe:	80 91 a4 26 	lds	r24, 0x26A4
    1d02:	8d 30       	cpi	r24, 0x0D	; 13
    1d04:	c1 f4       	brne	.+48     	; 0x1d36 <lcd_set_touch+0x1ec>
    1d06:	80 91 a5 26 	lds	r24, 0x26A5
    1d0a:	86 33       	cpi	r24, 0x36	; 54
    1d0c:	a1 f4       	brne	.+40     	; 0x1d36 <lcd_set_touch+0x1ec>
    1d0e:	80 91 a6 26 	lds	r24, 0x26A6
    1d12:	89 33       	cpi	r24, 0x39	; 57
    1d14:	81 f4       	brne	.+32     	; 0x1d36 <lcd_set_touch+0x1ec>
    1d16:	80 91 a7 26 	lds	r24, 0x26A7
    1d1a:	80 35       	cpi	r24, 0x50	; 80
    1d1c:	61 f4       	brne	.+24     	; 0x1d36 <lcd_set_touch+0x1ec>
    1d1e:	80 91 a8 26 	lds	r24, 0x26A8
    1d22:	8a 35       	cpi	r24, 0x5A	; 90
    1d24:	41 f4       	brne	.+16     	; 0x1d36 <lcd_set_touch+0x1ec>
    1d26:	80 91 a9 26 	lds	r24, 0x26A9
    1d2a:	84 35       	cpi	r24, 0x54	; 84
    1d2c:	21 f4       	brne	.+8      	; 0x1d36 <lcd_set_touch+0x1ec>
    1d2e:	80 e6       	ldi	r24, 0x60	; 96
    1d30:	80 93 9d 26 	sts	0x269D, r24
    1d34:	08 95       	ret
		if ((lcd_touch_buffer[0]==0x0D)&&(lcd_touch_buffer[1]=='7')&&(lcd_touch_buffer[2]=='9')&&(lcd_touch_buffer[3]=='P')&&(lcd_touch_buffer[4]=='Z')&&(lcd_touch_buffer[5]=='T')){lcd_last_touch_command=LCD_TOUCH_LEFT;return;}
    1d36:	80 91 a4 26 	lds	r24, 0x26A4
    1d3a:	8d 30       	cpi	r24, 0x0D	; 13
    1d3c:	c1 f4       	brne	.+48     	; 0x1d6e <lcd_set_touch+0x224>
    1d3e:	80 91 a5 26 	lds	r24, 0x26A5
    1d42:	87 33       	cpi	r24, 0x37	; 55
    1d44:	a1 f4       	brne	.+40     	; 0x1d6e <lcd_set_touch+0x224>
    1d46:	80 91 a6 26 	lds	r24, 0x26A6
    1d4a:	89 33       	cpi	r24, 0x39	; 57
    1d4c:	81 f4       	brne	.+32     	; 0x1d6e <lcd_set_touch+0x224>
    1d4e:	80 91 a7 26 	lds	r24, 0x26A7
    1d52:	80 35       	cpi	r24, 0x50	; 80
    1d54:	61 f4       	brne	.+24     	; 0x1d6e <lcd_set_touch+0x224>
    1d56:	80 91 a8 26 	lds	r24, 0x26A8
    1d5a:	8a 35       	cpi	r24, 0x5A	; 90
    1d5c:	41 f4       	brne	.+16     	; 0x1d6e <lcd_set_touch+0x224>
    1d5e:	80 91 a9 26 	lds	r24, 0x26A9
    1d62:	84 35       	cpi	r24, 0x54	; 84
    1d64:	21 f4       	brne	.+8      	; 0x1d6e <lcd_set_touch+0x224>
    1d66:	81 e6       	ldi	r24, 0x61	; 97
    1d68:	80 93 9d 26 	sts	0x269D, r24
    1d6c:	08 95       	ret
		if ((lcd_touch_buffer[0]==0x0D)&&(lcd_touch_buffer[1]=='8')&&(lcd_touch_buffer[2]=='9')&&(lcd_touch_buffer[3]=='P')&&(lcd_touch_buffer[4]=='Z')&&(lcd_touch_buffer[5]=='T')){lcd_last_touch_command=LCD_TOUCH_RIGHT;return;}
    1d6e:	80 91 a4 26 	lds	r24, 0x26A4
    1d72:	8d 30       	cpi	r24, 0x0D	; 13
    1d74:	c1 f4       	brne	.+48     	; 0x1da6 <lcd_set_touch+0x25c>
    1d76:	80 91 a5 26 	lds	r24, 0x26A5
    1d7a:	88 33       	cpi	r24, 0x38	; 56
    1d7c:	a1 f4       	brne	.+40     	; 0x1da6 <lcd_set_touch+0x25c>
    1d7e:	80 91 a6 26 	lds	r24, 0x26A6
    1d82:	89 33       	cpi	r24, 0x39	; 57
    1d84:	81 f4       	brne	.+32     	; 0x1da6 <lcd_set_touch+0x25c>
    1d86:	80 91 a7 26 	lds	r24, 0x26A7
    1d8a:	80 35       	cpi	r24, 0x50	; 80
    1d8c:	61 f4       	brne	.+24     	; 0x1da6 <lcd_set_touch+0x25c>
    1d8e:	80 91 a8 26 	lds	r24, 0x26A8
    1d92:	8a 35       	cpi	r24, 0x5A	; 90
    1d94:	41 f4       	brne	.+16     	; 0x1da6 <lcd_set_touch+0x25c>
    1d96:	80 91 a9 26 	lds	r24, 0x26A9
    1d9a:	84 35       	cpi	r24, 0x54	; 84
    1d9c:	21 f4       	brne	.+8      	; 0x1da6 <lcd_set_touch+0x25c>
    1d9e:	82 e6       	ldi	r24, 0x62	; 98
    1da0:	80 93 9d 26 	sts	0x269D, r24
    1da4:	08 95       	ret
	//Output Screen
		if ((lcd_touch_buffer[0]==0x0D)&&(lcd_touch_buffer[1]=='9')&&(lcd_touch_buffer[2]=='9')&&(lcd_touch_buffer[3]=='P')&&(lcd_touch_buffer[4]=='Z')&&(lcd_touch_buffer[5]=='T')){lcd_last_touch_command=LCD_TOUCH_CLOSE_DETAIL;return;}
    1da6:	80 91 a4 26 	lds	r24, 0x26A4
    1daa:	8d 30       	cpi	r24, 0x0D	; 13
    1dac:	c1 f4       	brne	.+48     	; 0x1dde <lcd_set_touch+0x294>
    1dae:	80 91 a5 26 	lds	r24, 0x26A5
    1db2:	89 33       	cpi	r24, 0x39	; 57
    1db4:	a1 f4       	brne	.+40     	; 0x1dde <lcd_set_touch+0x294>
    1db6:	80 91 a6 26 	lds	r24, 0x26A6
    1dba:	89 33       	cpi	r24, 0x39	; 57
    1dbc:	81 f4       	brne	.+32     	; 0x1dde <lcd_set_touch+0x294>
    1dbe:	80 91 a7 26 	lds	r24, 0x26A7
    1dc2:	80 35       	cpi	r24, 0x50	; 80
    1dc4:	61 f4       	brne	.+24     	; 0x1dde <lcd_set_touch+0x294>
    1dc6:	80 91 a8 26 	lds	r24, 0x26A8
    1dca:	8a 35       	cpi	r24, 0x5A	; 90
    1dcc:	41 f4       	brne	.+16     	; 0x1dde <lcd_set_touch+0x294>
    1dce:	80 91 a9 26 	lds	r24, 0x26A9
    1dd2:	84 35       	cpi	r24, 0x54	; 84
    1dd4:	21 f4       	brne	.+8      	; 0x1dde <lcd_set_touch+0x294>
    1dd6:	83 e6       	ldi	r24, 0x63	; 99
    1dd8:	80 93 9d 26 	sts	0x269D, r24
    1ddc:	08 95       	ret
		if ((lcd_touch_buffer[0]==0x0D)&&(lcd_touch_buffer[1]=='5')&&(lcd_touch_buffer[2]=='1')&&(lcd_touch_buffer[3]=='P')&&(lcd_touch_buffer[4]=='Z')&&(lcd_touch_buffer[5]=='T')){lcd_last_touch_command=LCD_TOUCH_OPEN_DETAIL_AB;return;}
    1dde:	80 91 a4 26 	lds	r24, 0x26A4
    1de2:	8d 30       	cpi	r24, 0x0D	; 13
    1de4:	c1 f4       	brne	.+48     	; 0x1e16 <lcd_set_touch+0x2cc>
    1de6:	80 91 a5 26 	lds	r24, 0x26A5
    1dea:	85 33       	cpi	r24, 0x35	; 53
    1dec:	a1 f4       	brne	.+40     	; 0x1e16 <lcd_set_touch+0x2cc>
    1dee:	80 91 a6 26 	lds	r24, 0x26A6
    1df2:	81 33       	cpi	r24, 0x31	; 49
    1df4:	81 f4       	brne	.+32     	; 0x1e16 <lcd_set_touch+0x2cc>
    1df6:	80 91 a7 26 	lds	r24, 0x26A7
    1dfa:	80 35       	cpi	r24, 0x50	; 80
    1dfc:	61 f4       	brne	.+24     	; 0x1e16 <lcd_set_touch+0x2cc>
    1dfe:	80 91 a8 26 	lds	r24, 0x26A8
    1e02:	8a 35       	cpi	r24, 0x5A	; 90
    1e04:	41 f4       	brne	.+16     	; 0x1e16 <lcd_set_touch+0x2cc>
    1e06:	80 91 a9 26 	lds	r24, 0x26A9
    1e0a:	84 35       	cpi	r24, 0x54	; 84
    1e0c:	21 f4       	brne	.+8      	; 0x1e16 <lcd_set_touch+0x2cc>
    1e0e:	8f e0       	ldi	r24, 0x0F	; 15
    1e10:	80 93 9d 26 	sts	0x269D, r24
    1e14:	08 95       	ret
		if ((lcd_touch_buffer[0]==0x0D)&&(lcd_touch_buffer[1]=='6')&&(lcd_touch_buffer[2]=='1')&&(lcd_touch_buffer[3]=='P')&&(lcd_touch_buffer[4]=='Z')&&(lcd_touch_buffer[5]=='T')){lcd_last_touch_command=LCD_TOUCH_OPEN_DETAIL_CD;return;}
    1e16:	80 91 a4 26 	lds	r24, 0x26A4
    1e1a:	8d 30       	cpi	r24, 0x0D	; 13
    1e1c:	b9 f4       	brne	.+46     	; 0x1e4c <lcd_set_touch+0x302>
    1e1e:	80 91 a5 26 	lds	r24, 0x26A5
    1e22:	86 33       	cpi	r24, 0x36	; 54
    1e24:	99 f4       	brne	.+38     	; 0x1e4c <lcd_set_touch+0x302>
    1e26:	80 91 a6 26 	lds	r24, 0x26A6
    1e2a:	81 33       	cpi	r24, 0x31	; 49
    1e2c:	79 f4       	brne	.+30     	; 0x1e4c <lcd_set_touch+0x302>
    1e2e:	80 91 a7 26 	lds	r24, 0x26A7
    1e32:	80 35       	cpi	r24, 0x50	; 80
    1e34:	59 f4       	brne	.+22     	; 0x1e4c <lcd_set_touch+0x302>
    1e36:	80 91 a8 26 	lds	r24, 0x26A8
    1e3a:	8a 35       	cpi	r24, 0x5A	; 90
    1e3c:	39 f4       	brne	.+14     	; 0x1e4c <lcd_set_touch+0x302>
    1e3e:	80 91 a9 26 	lds	r24, 0x26A9
    1e42:	84 35       	cpi	r24, 0x54	; 84
    1e44:	19 f4       	brne	.+6      	; 0x1e4c <lcd_set_touch+0x302>
    1e46:	80 e1       	ldi	r24, 0x10	; 16
    1e48:	80 93 9d 26 	sts	0x269D, r24
    1e4c:	08 95       	ret

00001e4e <service_lcd_touch>:
//## SERVICE ROUTINE
//#############################################################

//Used to refresh the console
void service_lcd_touch(){
	if (lcd_last_touch_command==LCD_TOUCH_NONE) return; //exit if nothing has been pressed
    1e4e:	80 91 9d 26 	lds	r24, 0x269D
    1e52:	85 31       	cpi	r24, 0x15	; 21
    1e54:	09 f4       	brne	.+2      	; 0x1e58 <service_lcd_touch+0xa>
    1e56:	59 c0       	rjmp	.+178    	; 0x1f0a <service_lcd_touch+0xbc>
	switch(lcd_get_touch()){
    1e58:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <lcd_get_touch>
    1e5c:	82 31       	cpi	r24, 0x12	; 18
    1e5e:	91 f1       	breq	.+100    	; 0x1ec4 <service_lcd_touch+0x76>
    1e60:	83 31       	cpi	r24, 0x13	; 19
    1e62:	80 f4       	brcc	.+32     	; 0x1e84 <service_lcd_touch+0x36>
    1e64:	8e 30       	cpi	r24, 0x0E	; 14
    1e66:	31 f1       	breq	.+76     	; 0x1eb4 <service_lcd_touch+0x66>
    1e68:	8f 30       	cpi	r24, 0x0F	; 15
    1e6a:	30 f4       	brcc	.+12     	; 0x1e78 <service_lcd_touch+0x2a>
    1e6c:	8c 30       	cpi	r24, 0x0C	; 12
    1e6e:	d1 f0       	breq	.+52     	; 0x1ea4 <service_lcd_touch+0x56>
    1e70:	8d 30       	cpi	r24, 0x0D	; 13
    1e72:	09 f0       	breq	.+2      	; 0x1e76 <service_lcd_touch+0x28>
    1e74:	4a c0       	rjmp	.+148    	; 0x1f0a <service_lcd_touch+0xbc>
    1e76:	1a c0       	rjmp	.+52     	; 0x1eac <service_lcd_touch+0x5e>
    1e78:	80 31       	cpi	r24, 0x10	; 16
    1e7a:	09 f4       	brne	.+2      	; 0x1e7e <service_lcd_touch+0x30>
    1e7c:	43 c0       	rjmp	.+134    	; 0x1f04 <service_lcd_touch+0xb6>
    1e7e:	81 31       	cpi	r24, 0x11	; 17
    1e80:	e8 f4       	brcc	.+58     	; 0x1ebc <service_lcd_touch+0x6e>
    1e82:	3c c0       	rjmp	.+120    	; 0x1efc <service_lcd_touch+0xae>
    1e84:	80 36       	cpi	r24, 0x60	; 96
    1e86:	91 f1       	breq	.+100    	; 0x1eec <service_lcd_touch+0x9e>
    1e88:	81 36       	cpi	r24, 0x61	; 97
    1e8a:	28 f4       	brcc	.+10     	; 0x1e96 <service_lcd_touch+0x48>
    1e8c:	83 31       	cpi	r24, 0x13	; 19
    1e8e:	f1 f0       	breq	.+60     	; 0x1ecc <service_lcd_touch+0x7e>
    1e90:	84 31       	cpi	r24, 0x14	; 20
    1e92:	d9 f5       	brne	.+118    	; 0x1f0a <service_lcd_touch+0xbc>
    1e94:	1f c0       	rjmp	.+62     	; 0x1ed4 <service_lcd_touch+0x86>
    1e96:	82 36       	cpi	r24, 0x62	; 98
    1e98:	29 f1       	breq	.+74     	; 0x1ee4 <service_lcd_touch+0x96>
    1e9a:	82 36       	cpi	r24, 0x62	; 98
    1e9c:	f8 f0       	brcs	.+62     	; 0x1edc <service_lcd_touch+0x8e>
    1e9e:	83 36       	cpi	r24, 0x63	; 99
    1ea0:	a1 f5       	brne	.+104    	; 0x1f0a <service_lcd_touch+0xbc>
    1ea2:	28 c0       	rjmp	.+80     	; 0x1ef4 <service_lcd_touch+0xa6>
		
		//MENU NAVIGATION
		case LCD_TOUCH_OUTPUT:
			brain_menu_load(MENU_OUTPUT);
    1ea4:	80 e2       	ldi	r24, 0x20	; 32
    1ea6:	0e 94 01 05 	call	0xa02	; 0xa02 <brain_menu_load>
			break;
    1eaa:	08 95       	ret
		case LCD_TOUCH_CONTROL:
			brain_menu_load(MENU_CONTROL);
    1eac:	81 e2       	ldi	r24, 0x21	; 33
    1eae:	0e 94 01 05 	call	0xa02	; 0xa02 <brain_menu_load>
			break;
    1eb2:	08 95       	ret
		case LCD_TOUCH_CONSOLE:
			brain_menu_load(MENU_CONSOLE);
    1eb4:	82 e2       	ldi	r24, 0x22	; 34
    1eb6:	0e 94 01 05 	call	0xa02	; 0xa02 <brain_menu_load>
			break;
    1eba:	08 95       	ret
			
		//CONTROL MENU
		case LCD_TOUCH_ROW_A:
			brain_menu_control_dial(LCD_TOUCH_ROW_A);
    1ebc:	81 e1       	ldi	r24, 0x11	; 17
    1ebe:	0e 94 4a 04 	call	0x894	; 0x894 <brain_menu_control_dial>
			break;
    1ec2:	08 95       	ret
		case LCD_TOUCH_ROW_B:
			brain_menu_control_dial(LCD_TOUCH_ROW_B);
    1ec4:	82 e1       	ldi	r24, 0x12	; 18
    1ec6:	0e 94 4a 04 	call	0x894	; 0x894 <brain_menu_control_dial>
			break;
    1eca:	08 95       	ret
		case LCD_TOUCH_ROW_C:
			brain_menu_control_dial(LCD_TOUCH_ROW_C);
    1ecc:	83 e1       	ldi	r24, 0x13	; 19
    1ece:	0e 94 4a 04 	call	0x894	; 0x894 <brain_menu_control_dial>
			break;
    1ed2:	08 95       	ret
		case LCD_TOUCH_ROW_D:
			brain_menu_control_dial(LCD_TOUCH_ROW_D);
    1ed4:	84 e1       	ldi	r24, 0x14	; 20
    1ed6:	0e 94 4a 04 	call	0x894	; 0x894 <brain_menu_control_dial>
			break;
    1eda:	08 95       	ret
		
		//CONTROL DIALOG WINDOW
		case LCD_TOUCH_LEFT:
			brain_menu_control_dial_select(LCD_TOUCH_LEFT);
    1edc:	81 e6       	ldi	r24, 0x61	; 97
    1ede:	0e 94 85 04 	call	0x90a	; 0x90a <brain_menu_control_dial_select>
			break;
    1ee2:	08 95       	ret
		case LCD_TOUCH_RIGHT:
			brain_menu_control_dial_select(LCD_TOUCH_RIGHT);
    1ee4:	82 e6       	ldi	r24, 0x62	; 98
    1ee6:	0e 94 85 04 	call	0x90a	; 0x90a <brain_menu_control_dial_select>
			break;
    1eea:	08 95       	ret
		case LCD_TOUCH_CLOSE_DIAL:
			brain_menu_load(MENU_CONTROL);
    1eec:	81 e2       	ldi	r24, 0x21	; 33
    1eee:	0e 94 01 05 	call	0xa02	; 0xa02 <brain_menu_load>
			break;
    1ef2:	08 95       	ret
		
		//OUTPUT MENU
		case LCD_TOUCH_CLOSE_DETAIL:
			brain_menu_load(MENU_OUTPUT);
    1ef4:	80 e2       	ldi	r24, 0x20	; 32
    1ef6:	0e 94 01 05 	call	0xa02	; 0xa02 <brain_menu_load>
			break;
    1efa:	08 95       	ret
		case LCD_TOUCH_OPEN_DETAIL_AB:
			brain_menu_output_detail(LCD_TOUCH_OPEN_DETAIL_AB);
    1efc:	8f e0       	ldi	r24, 0x0F	; 15
    1efe:	0e 94 15 04 	call	0x82a	; 0x82a <brain_menu_output_detail>
			break;
    1f02:	08 95       	ret
		case LCD_TOUCH_OPEN_DETAIL_CD:
			brain_menu_output_detail(LCD_TOUCH_OPEN_DETAIL_CD);
    1f04:	80 e1       	ldi	r24, 0x10	; 16
    1f06:	0e 94 15 04 	call	0x82a	; 0x82a <brain_menu_output_detail>
    1f0a:	08 95       	ret

00001f0c <init_pwr_adjust>:
//## INITIALIZATION ROUTINE
//#############################################################

void init_pwr_adjust(){
	//Enable lines
	PORTH.OUTCLR = 0x00;
    1f0c:	e0 ee       	ldi	r30, 0xE0	; 224
    1f0e:	f6 e0       	ldi	r31, 0x06	; 6
    1f10:	16 82       	std	Z+6, r1	; 0x06
	PORTH.DIRSET = B8(00011111); //ADJ Outputs & 5V fixed output to out direction
    1f12:	8f e1       	ldi	r24, 0x1F	; 31
    1f14:	81 83       	std	Z+1, r24	; 0x01
	
	//Chip Select lines
	PORTD.OUTSET = B8(00011111); //set all output pins high prior to enabling output (deselect SPI peripherals)
    1f16:	e0 e6       	ldi	r30, 0x60	; 96
    1f18:	f6 e0       	ldi	r31, 0x06	; 6
    1f1a:	85 83       	std	Z+5, r24	; 0x05
	PORTD.DIRSET = B8(11111011); //ADJ_CS, TC_CS, SPI_MOSI, SPI_CLOCK to outputs	
    1f1c:	8b ef       	ldi	r24, 0xFB	; 251
    1f1e:	81 83       	std	Z+1, r24	; 0x01
		--Master reads on the rising clock edge
		--Clock idles HIGH
		--Shifted MSB-first 
		--Max clock = 7MHz
	*/
	SPID.CTRL = B8(11011101); //2X Clock (with 16x prescale) = 1/8 System Frequency = 4MHz; Master Mode; Clock idle high; Master sample on rising edge
    1f20:	e0 ec       	ldi	r30, 0xC0	; 192
    1f22:	f9 e0       	ldi	r31, 0x09	; 9
    1f24:	8d ed       	ldi	r24, 0xDD	; 221
    1f26:	80 83       	st	Z, r24
	SPID.INTCTRL = 2; //medium priority interrupt
    1f28:	82 e0       	ldi	r24, 0x02	; 2
    1f2a:	81 83       	std	Z+1, r24	; 0x01
	
	pwr_adj_spi_state = PWR_ADJ_SPI_IDLE;
    1f2c:	10 92 af 26 	sts	0x26AF, r1
	pwr_adj_send_channels = 0x00;
    1f30:	10 92 96 26 	sts	0x2696, r1
	pwr_adj_channel_dirty = 0x00;
    1f34:	10 92 b1 26 	sts	0x26B1, r1
	pwr_adj_left_right = LCD_TOUCH_LEFT;
    1f38:	81 e6       	ldi	r24, 0x61	; 97
    1f3a:	80 93 9b 26 	sts	0x269B, r24
}
    1f3e:	08 95       	ret

00001f40 <pwr_adj_spi_send>:
	}
}	
	
void pwr_adj_spi_send(uint8_t channel_num){
	//STATE
	pwr_adj_spi_state = PWR_ADJ_SPI_COMMAND;
    1f40:	91 e0       	ldi	r25, 0x01	; 1
    1f42:	90 93 af 26 	sts	0x26AF, r25
	pwr_adj_channel_num_in_progress = channel_num;
    1f46:	80 93 9c 26 	sts	0x269C, r24
	
	//CHIP SELECT
	switch(channel_num){
    1f4a:	84 30       	cpi	r24, 0x04	; 4
    1f4c:	18 f4       	brcc	.+6      	; 0x1f54 <pwr_adj_spi_send+0x14>
    1f4e:	82 30       	cpi	r24, 0x02	; 2
    1f50:	58 f4       	brcc	.+22     	; 0x1f68 <pwr_adj_spi_send+0x28>
    1f52:	05 c0       	rjmp	.+10     	; 0x1f5e <pwr_adj_spi_send+0x1e>
    1f54:	86 30       	cpi	r24, 0x06	; 6
    1f56:	68 f0       	brcs	.+26     	; 0x1f72 <pwr_adj_spi_send+0x32>
    1f58:	88 30       	cpi	r24, 0x08	; 8
    1f5a:	a0 f4       	brcc	.+40     	; 0x1f84 <pwr_adj_spi_send+0x44>
    1f5c:	0f c0       	rjmp	.+30     	; 0x1f7c <pwr_adj_spi_send+0x3c>
	case 0:
	case 1:
		PORTD.OUTCLR = _BV(0); //CS low, start transmitting
    1f5e:	91 e0       	ldi	r25, 0x01	; 1
    1f60:	e0 e6       	ldi	r30, 0x60	; 96
    1f62:	f6 e0       	ldi	r31, 0x06	; 6
    1f64:	96 83       	std	Z+6, r25	; 0x06
		break;
    1f66:	0e c0       	rjmp	.+28     	; 0x1f84 <pwr_adj_spi_send+0x44>
	case 2:
	case 3:
		PORTD.OUTCLR = _BV(1); //CS low, start transmitting
    1f68:	92 e0       	ldi	r25, 0x02	; 2
    1f6a:	e0 e6       	ldi	r30, 0x60	; 96
    1f6c:	f6 e0       	ldi	r31, 0x06	; 6
    1f6e:	96 83       	std	Z+6, r25	; 0x06
		break;
    1f70:	09 c0       	rjmp	.+18     	; 0x1f84 <pwr_adj_spi_send+0x44>
	case 4:
	case 5:
		PORTD.OUTCLR = _BV(2); //CS low, start transmitting
    1f72:	94 e0       	ldi	r25, 0x04	; 4
    1f74:	e0 e6       	ldi	r30, 0x60	; 96
    1f76:	f6 e0       	ldi	r31, 0x06	; 6
    1f78:	96 83       	std	Z+6, r25	; 0x06
		break;
    1f7a:	04 c0       	rjmp	.+8      	; 0x1f84 <pwr_adj_spi_send+0x44>
	case 6:
	case 7:
		PORTD.OUTCLR = _BV(3); //CS low, start transmitting
    1f7c:	98 e0       	ldi	r25, 0x08	; 8
    1f7e:	e0 e6       	ldi	r30, 0x60	; 96
    1f80:	f6 e0       	ldi	r31, 0x06	; 6
    1f82:	96 83       	std	Z+6, r25	; 0x06
		break;
	}
	
	//SEND COMMAND BYTE
	if(channel_num % 2){
    1f84:	80 ff       	sbrs	r24, 0
    1f86:	05 c0       	rjmp	.+10     	; 0x1f92 <pwr_adj_spi_send+0x52>
		//channel_num = 1,3,5,7 (0 == false in C)
		SPID.DATA = MAX5494_SET2;
    1f88:	82 e0       	ldi	r24, 0x02	; 2
    1f8a:	e0 ec       	ldi	r30, 0xC0	; 192
    1f8c:	f9 e0       	ldi	r31, 0x09	; 9
    1f8e:	83 83       	std	Z+3, r24	; 0x03
    1f90:	08 95       	ret
	} 
	else {
		SPID.DATA = MAX5494_SET1;
    1f92:	81 e0       	ldi	r24, 0x01	; 1
    1f94:	e0 ec       	ldi	r30, 0xC0	; 192
    1f96:	f9 e0       	ldi	r31, 0x09	; 9
    1f98:	83 83       	std	Z+3, r24	; 0x03
    1f9a:	08 95       	ret

00001f9c <_pwr_adj_next>:
//#############################################################
//## SPI LOW-LEVEL FUNCTIONS
//#############################################################

void _pwr_adj_next(){
	pwr_adj_send_channels &= ~_BV(pwr_adj_channel_num_in_progress); //clear channel we just finished sending
    1f9c:	61 e0       	ldi	r22, 0x01	; 1
    1f9e:	70 e0       	ldi	r23, 0x00	; 0
    1fa0:	00 90 9c 26 	lds	r0, 0x269C
    1fa4:	02 c0       	rjmp	.+4      	; 0x1faa <_pwr_adj_next+0xe>
    1fa6:	66 0f       	add	r22, r22
    1fa8:	77 1f       	adc	r23, r23
    1faa:	0a 94       	dec	r0
    1fac:	e2 f7       	brpl	.-8      	; 0x1fa6 <_pwr_adj_next+0xa>
    1fae:	60 95       	com	r22
    1fb0:	80 91 96 26 	lds	r24, 0x2696
    1fb4:	68 23       	and	r22, r24
    1fb6:	60 93 96 26 	sts	0x2696, r22
	if (pwr_adj_send_channels > 0){
    1fba:	66 23       	and	r22, r22
    1fbc:	f1 f0       	breq	.+60     	; 0x1ffa <_pwr_adj_next+0x5e>
		//Some other channels need to be sent
		for(uint8_t i=0;i<PWR_ADJ_NUM_CHANNELS;i++){
			if((pwr_adj_send_channels & _BV(i)) > 0){
    1fbe:	70 e0       	ldi	r23, 0x00	; 0
    1fc0:	60 fd       	sbrc	r22, 0
    1fc2:	12 c0       	rjmp	.+36     	; 0x1fe8 <_pwr_adj_next+0x4c>
    1fc4:	21 e0       	ldi	r18, 0x01	; 1
    1fc6:	30 e0       	ldi	r19, 0x00	; 0
    1fc8:	e1 e0       	ldi	r30, 0x01	; 1
    1fca:	f0 e0       	ldi	r31, 0x00	; 0
    1fcc:	82 2f       	mov	r24, r18
    1fce:	af 01       	movw	r20, r30
    1fd0:	02 2e       	mov	r0, r18
    1fd2:	02 c0       	rjmp	.+4      	; 0x1fd8 <_pwr_adj_next+0x3c>
    1fd4:	44 0f       	add	r20, r20
    1fd6:	55 1f       	adc	r21, r21
    1fd8:	0a 94       	dec	r0
    1fda:	e2 f7       	brpl	.-8      	; 0x1fd4 <_pwr_adj_next+0x38>
    1fdc:	46 23       	and	r20, r22
    1fde:	57 23       	and	r21, r23
    1fe0:	14 16       	cp	r1, r20
    1fe2:	15 06       	cpc	r1, r21
    1fe4:	2c f4       	brge	.+10     	; 0x1ff0 <_pwr_adj_next+0x54>
    1fe6:	01 c0       	rjmp	.+2      	; 0x1fea <_pwr_adj_next+0x4e>
    1fe8:	80 e0       	ldi	r24, 0x00	; 0
				pwr_adj_spi_send(i);
    1fea:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <pwr_adj_spi_send>
				return; //exit for
    1fee:	08 95       	ret
    1ff0:	2f 5f       	subi	r18, 0xFF	; 255
    1ff2:	3f 4f       	sbci	r19, 0xFF	; 255

void _pwr_adj_next(){
	pwr_adj_send_channels &= ~_BV(pwr_adj_channel_num_in_progress); //clear channel we just finished sending
	if (pwr_adj_send_channels > 0){
		//Some other channels need to be sent
		for(uint8_t i=0;i<PWR_ADJ_NUM_CHANNELS;i++){
    1ff4:	28 30       	cpi	r18, 0x08	; 8
    1ff6:	31 05       	cpc	r19, r1
    1ff8:	49 f7       	brne	.-46     	; 0x1fcc <_pwr_adj_next+0x30>
    1ffa:	08 95       	ret

00001ffc <pwr_adj_on>:
//#############################################################
//## API
//#############################################################

void pwr_adj_on(uint8_t channel){
	switch(channel){
    1ffc:	82 30       	cpi	r24, 0x02	; 2
    1ffe:	c1 f0       	breq	.+48     	; 0x2030 <pwr_adj_on+0x34>
    2000:	83 30       	cpi	r24, 0x03	; 3
    2002:	28 f4       	brcc	.+10     	; 0x200e <pwr_adj_on+0x12>
    2004:	88 23       	and	r24, r24
    2006:	51 f0       	breq	.+20     	; 0x201c <pwr_adj_on+0x20>
    2008:	81 30       	cpi	r24, 0x01	; 1
    200a:	39 f5       	brne	.+78     	; 0x205a <pwr_adj_on+0x5e>
    200c:	0c c0       	rjmp	.+24     	; 0x2026 <pwr_adj_on+0x2a>
    200e:	8a 33       	cpi	r24, 0x3A	; 58
    2010:	c9 f0       	breq	.+50     	; 0x2044 <pwr_adj_on+0x48>
    2012:	8c 33       	cpi	r24, 0x3C	; 60
    2014:	e1 f0       	breq	.+56     	; 0x204e <pwr_adj_on+0x52>
    2016:	83 30       	cpi	r24, 0x03	; 3
    2018:	01 f5       	brne	.+64     	; 0x205a <pwr_adj_on+0x5e>
    201a:	0f c0       	rjmp	.+30     	; 0x203a <pwr_adj_on+0x3e>
		case CHANNEL_A:
			PORTH.OUTSET = _BV(1);
    201c:	82 e0       	ldi	r24, 0x02	; 2
    201e:	e0 ee       	ldi	r30, 0xE0	; 224
    2020:	f6 e0       	ldi	r31, 0x06	; 6
    2022:	85 83       	std	Z+5, r24	; 0x05
			break;
    2024:	08 95       	ret
		case CHANNEL_B:
			PORTH.OUTSET = _BV(2);
    2026:	84 e0       	ldi	r24, 0x04	; 4
    2028:	e0 ee       	ldi	r30, 0xE0	; 224
    202a:	f6 e0       	ldi	r31, 0x06	; 6
    202c:	85 83       	std	Z+5, r24	; 0x05
			break;
    202e:	08 95       	ret
		case CHANNEL_C:
			PORTH.OUTSET = _BV(3);
    2030:	88 e0       	ldi	r24, 0x08	; 8
    2032:	e0 ee       	ldi	r30, 0xE0	; 224
    2034:	f6 e0       	ldi	r31, 0x06	; 6
    2036:	85 83       	std	Z+5, r24	; 0x05
			break;
    2038:	08 95       	ret
		case CHANNEL_D:
			PORTH.OUTSET = _BV(4);
    203a:	80 e1       	ldi	r24, 0x10	; 16
    203c:	e0 ee       	ldi	r30, 0xE0	; 224
    203e:	f6 e0       	ldi	r31, 0x06	; 6
    2040:	85 83       	std	Z+5, r24	; 0x05
			break;
    2042:	08 95       	ret
		case CHANNEL_ALL:
			PORTH.OUTSET = B8(00011110);
    2044:	8e e1       	ldi	r24, 0x1E	; 30
    2046:	e0 ee       	ldi	r30, 0xE0	; 224
    2048:	f6 e0       	ldi	r31, 0x06	; 6
    204a:	85 83       	std	Z+5, r24	; 0x05
			break;
    204c:	08 95       	ret
		case CHANNEL_RESTORE:
			PORTH.OUTSET = STATE_power_channels << 1; //[000DCBA0] align to port
    204e:	80 91 86 25 	lds	r24, 0x2586
    2052:	88 0f       	add	r24, r24
    2054:	e0 ee       	ldi	r30, 0xE0	; 224
    2056:	f6 e0       	ldi	r31, 0x06	; 6
    2058:	85 83       	std	Z+5, r24	; 0x05
    205a:	08 95       	ret

0000205c <pwr_adj_off>:
			break;
	}
}
void pwr_adj_off(uint8_t channel){
	switch(channel){
    205c:	82 30       	cpi	r24, 0x02	; 2
    205e:	b1 f0       	breq	.+44     	; 0x208c <pwr_adj_off+0x30>
    2060:	83 30       	cpi	r24, 0x03	; 3
    2062:	28 f4       	brcc	.+10     	; 0x206e <pwr_adj_off+0x12>
    2064:	88 23       	and	r24, r24
    2066:	41 f0       	breq	.+16     	; 0x2078 <pwr_adj_off+0x1c>
    2068:	81 30       	cpi	r24, 0x01	; 1
    206a:	f1 f4       	brne	.+60     	; 0x20a8 <pwr_adj_off+0x4c>
    206c:	0a c0       	rjmp	.+20     	; 0x2082 <pwr_adj_off+0x26>
    206e:	83 30       	cpi	r24, 0x03	; 3
    2070:	91 f0       	breq	.+36     	; 0x2096 <pwr_adj_off+0x3a>
    2072:	8a 33       	cpi	r24, 0x3A	; 58
    2074:	c9 f4       	brne	.+50     	; 0x20a8 <pwr_adj_off+0x4c>
    2076:	14 c0       	rjmp	.+40     	; 0x20a0 <pwr_adj_off+0x44>
		case CHANNEL_A:
			PORTH.OUTCLR = _BV(1);
    2078:	82 e0       	ldi	r24, 0x02	; 2
    207a:	e0 ee       	ldi	r30, 0xE0	; 224
    207c:	f6 e0       	ldi	r31, 0x06	; 6
    207e:	86 83       	std	Z+6, r24	; 0x06
			break;
    2080:	08 95       	ret
		case CHANNEL_B:
			PORTH.OUTCLR = _BV(2);
    2082:	84 e0       	ldi	r24, 0x04	; 4
    2084:	e0 ee       	ldi	r30, 0xE0	; 224
    2086:	f6 e0       	ldi	r31, 0x06	; 6
    2088:	86 83       	std	Z+6, r24	; 0x06
			break;
    208a:	08 95       	ret
		case CHANNEL_C:
			PORTH.OUTCLR = _BV(3);
    208c:	88 e0       	ldi	r24, 0x08	; 8
    208e:	e0 ee       	ldi	r30, 0xE0	; 224
    2090:	f6 e0       	ldi	r31, 0x06	; 6
    2092:	86 83       	std	Z+6, r24	; 0x06
			break;
    2094:	08 95       	ret
		case CHANNEL_D:
			PORTH.OUTCLR = _BV(4);
    2096:	80 e1       	ldi	r24, 0x10	; 16
    2098:	e0 ee       	ldi	r30, 0xE0	; 224
    209a:	f6 e0       	ldi	r31, 0x06	; 6
    209c:	86 83       	std	Z+6, r24	; 0x06
			break;
    209e:	08 95       	ret
		case CHANNEL_ALL:
			PORTH.OUTCLR = B8(00011110);
    20a0:	8e e1       	ldi	r24, 0x1E	; 30
    20a2:	e0 ee       	ldi	r30, 0xE0	; 224
    20a4:	f6 e0       	ldi	r31, 0x06	; 6
    20a6:	86 83       	std	Z+6, r24	; 0x06
    20a8:	08 95       	ret

000020aa <pwr_adj_change>:
	}
}

//Will drop (ignore) this value change request if in the middle of writing a different value to the channel
void pwr_adj_change(uint8_t channel_num, uint16_t new_value){
	if ((pwr_adj_spi_state == PWR_ADJ_SPI_IDLE) || (pwr_adj_channel_num_in_progress != channel_num)){
    20aa:	90 91 af 26 	lds	r25, 0x26AF
    20ae:	99 23       	and	r25, r25
    20b0:	21 f0       	breq	.+8      	; 0x20ba <pwr_adj_change+0x10>
    20b2:	20 91 9c 26 	lds	r18, 0x269C
    20b6:	28 17       	cp	r18, r24
    20b8:	39 f1       	breq	.+78     	; 0x2108 <pwr_adj_change+0x5e>
		pwr_adj_channel_dirty |= _BV(channel_num); //mark this channel for update to screen
    20ba:	e8 2f       	mov	r30, r24
    20bc:	f0 e0       	ldi	r31, 0x00	; 0
    20be:	21 e0       	ldi	r18, 0x01	; 1
    20c0:	30 e0       	ldi	r19, 0x00	; 0
    20c2:	08 2e       	mov	r0, r24
    20c4:	02 c0       	rjmp	.+4      	; 0x20ca <pwr_adj_change+0x20>
    20c6:	22 0f       	add	r18, r18
    20c8:	33 1f       	adc	r19, r19
    20ca:	0a 94       	dec	r0
    20cc:	e2 f7       	brpl	.-8      	; 0x20c6 <pwr_adj_change+0x1c>
    20ce:	42 2f       	mov	r20, r18
    20d0:	20 91 b1 26 	lds	r18, 0x26B1
    20d4:	24 2b       	or	r18, r20
    20d6:	20 93 b1 26 	sts	0x26B1, r18
		if (new_value >= 1024){new_value = 1023;} //sanity check
		pwr_adj_values[channel_num] = new_value; //buffer value
    20da:	ee 0f       	add	r30, r30
    20dc:	ff 1f       	adc	r31, r31
    20de:	ee 54       	subi	r30, 0x4E	; 78
    20e0:	f9 4d       	sbci	r31, 0xD9	; 217
    20e2:	26 2f       	mov	r18, r22
    20e4:	37 2f       	mov	r19, r23
    20e6:	54 e0       	ldi	r21, 0x04	; 4
    20e8:	20 30       	cpi	r18, 0x00	; 0
    20ea:	35 07       	cpc	r19, r21
    20ec:	10 f0       	brcs	.+4      	; 0x20f2 <pwr_adj_change+0x48>
    20ee:	2f ef       	ldi	r18, 0xFF	; 255
    20f0:	33 e0       	ldi	r19, 0x03	; 3
    20f2:	20 83       	st	Z, r18
    20f4:	31 83       	std	Z+1, r19	; 0x01
		pwr_adj_send_channels |= _BV(channel_num); //flag channel for transmission
    20f6:	20 91 96 26 	lds	r18, 0x2696
    20fa:	42 2b       	or	r20, r18
    20fc:	40 93 96 26 	sts	0x2696, r20
		if (pwr_adj_spi_state == PWR_ADJ_SPI_IDLE){pwr_adj_spi_send(channel_num);}
    2100:	99 23       	and	r25, r25
    2102:	11 f4       	brne	.+4      	; 0x2108 <pwr_adj_change+0x5e>
    2104:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <pwr_adj_spi_send>
    2108:	08 95       	ret

0000210a <pwr_adj_change_increment>:
	}	
}

//QUAD_DOWN = CLOCKWISE, ergo it is more natural to make this INCREASE the counters
void pwr_adj_change_increment(uint8_t channel_num, uint8_t which_way){
	if ((which_way == QUAD_DOWN) && (pwr_adj_values[channel_num]<1024)) pwr_adj_values[channel_num]++;
    210a:	6e 32       	cpi	r22, 0x2E	; 46
    210c:	b9 f4       	brne	.+46     	; 0x213c <pwr_adj_change_increment+0x32>
    210e:	28 2f       	mov	r18, r24
    2110:	30 e0       	ldi	r19, 0x00	; 0
    2112:	f9 01       	movw	r30, r18
    2114:	ee 0f       	add	r30, r30
    2116:	ff 1f       	adc	r31, r31
    2118:	ee 54       	subi	r30, 0x4E	; 78
    211a:	f9 4d       	sbci	r31, 0xD9	; 217
    211c:	40 81       	ld	r20, Z
    211e:	51 81       	ldd	r21, Z+1	; 0x01
    2120:	94 e0       	ldi	r25, 0x04	; 4
    2122:	40 30       	cpi	r20, 0x00	; 0
    2124:	59 07       	cpc	r21, r25
    2126:	08 f5       	brcc	.+66     	; 0x216a <pwr_adj_change_increment+0x60>
    2128:	f9 01       	movw	r30, r18
    212a:	ee 0f       	add	r30, r30
    212c:	ff 1f       	adc	r31, r31
    212e:	ee 54       	subi	r30, 0x4E	; 78
    2130:	f9 4d       	sbci	r31, 0xD9	; 217
    2132:	4f 5f       	subi	r20, 0xFF	; 255
    2134:	5f 4f       	sbci	r21, 0xFF	; 255
    2136:	40 83       	st	Z, r20
    2138:	51 83       	std	Z+1, r21	; 0x01
    213a:	17 c0       	rjmp	.+46     	; 0x216a <pwr_adj_change_increment+0x60>
	if ((which_way == QUAD_UP) && (pwr_adj_values[channel_num]>0)) pwr_adj_values[channel_num]--;
    213c:	6d 32       	cpi	r22, 0x2D	; 45
    213e:	a9 f4       	brne	.+42     	; 0x216a <pwr_adj_change_increment+0x60>
    2140:	28 2f       	mov	r18, r24
    2142:	30 e0       	ldi	r19, 0x00	; 0
    2144:	f9 01       	movw	r30, r18
    2146:	ee 0f       	add	r30, r30
    2148:	ff 1f       	adc	r31, r31
    214a:	ee 54       	subi	r30, 0x4E	; 78
    214c:	f9 4d       	sbci	r31, 0xD9	; 217
    214e:	40 81       	ld	r20, Z
    2150:	51 81       	ldd	r21, Z+1	; 0x01
    2152:	41 15       	cp	r20, r1
    2154:	51 05       	cpc	r21, r1
    2156:	49 f0       	breq	.+18     	; 0x216a <pwr_adj_change_increment+0x60>
    2158:	f9 01       	movw	r30, r18
    215a:	ee 0f       	add	r30, r30
    215c:	ff 1f       	adc	r31, r31
    215e:	ee 54       	subi	r30, 0x4E	; 78
    2160:	f9 4d       	sbci	r31, 0xD9	; 217
    2162:	41 50       	subi	r20, 0x01	; 1
    2164:	50 40       	sbci	r21, 0x00	; 0
    2166:	40 83       	st	Z, r20
    2168:	51 83       	std	Z+1, r21	; 0x01
	pwr_adj_change(channel_num, pwr_adj_values[channel_num]);
    216a:	e8 2f       	mov	r30, r24
    216c:	f0 e0       	ldi	r31, 0x00	; 0
    216e:	ee 0f       	add	r30, r30
    2170:	ff 1f       	adc	r31, r31
    2172:	ee 54       	subi	r30, 0x4E	; 78
    2174:	f9 4d       	sbci	r31, 0xD9	; 217
    2176:	60 81       	ld	r22, Z
    2178:	71 81       	ldd	r23, Z+1	; 0x01
    217a:	0e 94 55 10 	call	0x20aa	; 0x20aa <pwr_adj_change>
}
    217e:	08 95       	ret

00002180 <pwr_adj_touch_dial>:
//#############################################################
//## SELECTION AND TOUCH PANEL
//#############################################################

inline void pwr_adj_touch_dial(uint8_t which_one){
	pwr_adj_left_right = which_one;
    2180:	80 93 9b 26 	sts	0x269B, r24
}
    2184:	08 95       	ret

00002186 <_pwr_adj_data>:
//## DISPLAY ROUTINES
//#############################################################

//Calculate the output for the first voltage divider
float _pwr_adj_data(uint8_t channel_num){
	return PWR_ADJ_SUPPLY_VOLTAGE * (float)pwr_adj_values[channel_num]/1023;
    2186:	e8 2f       	mov	r30, r24
    2188:	f0 e0       	ldi	r31, 0x00	; 0
    218a:	ee 0f       	add	r30, r30
    218c:	ff 1f       	adc	r31, r31
    218e:	ee 54       	subi	r30, 0x4E	; 78
    2190:	f9 4d       	sbci	r31, 0xD9	; 217
    2192:	60 81       	ld	r22, Z
    2194:	71 81       	ldd	r23, Z+1	; 0x01
    2196:	80 e0       	ldi	r24, 0x00	; 0
    2198:	90 e0       	ldi	r25, 0x00	; 0
    219a:	0e 94 85 2e 	call	0x5d0a	; 0x5d0a <__floatunsisf>
    219e:	20 e0       	ldi	r18, 0x00	; 0
    21a0:	30 e0       	ldi	r19, 0x00	; 0
    21a2:	40 ea       	ldi	r20, 0xA0	; 160
    21a4:	50 e4       	ldi	r21, 0x40	; 64
    21a6:	0e 94 37 2f 	call	0x5e6e	; 0x5e6e <__mulsf3>
    21aa:	20 e0       	ldi	r18, 0x00	; 0
    21ac:	30 ec       	ldi	r19, 0xC0	; 192
    21ae:	4f e7       	ldi	r20, 0x7F	; 127
    21b0:	54 e4       	ldi	r21, 0x44	; 68
    21b2:	0e 94 ec 2d 	call	0x5bd8	; 0x5bd8 <__divsf3>
}
    21b6:	46 2f       	mov	r20, r22
    21b8:	57 2f       	mov	r21, r23
    21ba:	68 2f       	mov	r22, r24
    21bc:	79 2f       	mov	r23, r25
    21be:	cb 01       	movw	r24, r22
    21c0:	ba 01       	movw	r22, r20
    21c2:	08 95       	ret

000021c4 <pwr_adj_data>:

void pwr_adj_data(uint8_t channel_num, char* result){
    21c4:	cf 92       	push	r12
    21c6:	df 92       	push	r13
    21c8:	ef 92       	push	r14
    21ca:	ff 92       	push	r15
    21cc:	1f 93       	push	r17
    21ce:	cf 93       	push	r28
    21d0:	df 93       	push	r29
    21d2:	18 2f       	mov	r17, r24
    21d4:	eb 01       	movw	r28, r22
	if ((channel_num % 2)==0){
    21d6:	80 fd       	sbrc	r24, 0
    21d8:	08 c0       	rjmp	.+16     	; 0x21ea <pwr_adj_data+0x26>
		//channel_num is 0,2,4,etc...
		adc_ftoa(_pwr_adj_data(channel_num), 1000, result);
    21da:	0e 94 c3 10 	call	0x2186	; 0x2186 <_pwr_adj_data>
    21de:	48 ee       	ldi	r20, 0xE8	; 232
    21e0:	53 e0       	ldi	r21, 0x03	; 3
    21e2:	9e 01       	movw	r18, r28
    21e4:	0e 94 ad 01 	call	0x35a	; 0x35a <adc_ftoa>
    21e8:	22 c0       	rjmp	.+68     	; 0x222e <pwr_adj_data+0x6a>
	}
	else{
		//channel_num is 1,3,5,etc...
		adc_ftoa(_pwr_adj_data(channel_num-1)*(float)pwr_adj_values[channel_num]/1023, 1000, result);		
    21ea:	81 50       	subi	r24, 0x01	; 1
    21ec:	0e 94 c3 10 	call	0x2186	; 0x2186 <_pwr_adj_data>
    21f0:	6b 01       	movw	r12, r22
    21f2:	7c 01       	movw	r14, r24
    21f4:	e1 2f       	mov	r30, r17
    21f6:	f0 e0       	ldi	r31, 0x00	; 0
    21f8:	ee 0f       	add	r30, r30
    21fa:	ff 1f       	adc	r31, r31
    21fc:	ee 54       	subi	r30, 0x4E	; 78
    21fe:	f9 4d       	sbci	r31, 0xD9	; 217
    2200:	60 81       	ld	r22, Z
    2202:	71 81       	ldd	r23, Z+1	; 0x01
    2204:	80 e0       	ldi	r24, 0x00	; 0
    2206:	90 e0       	ldi	r25, 0x00	; 0
    2208:	0e 94 85 2e 	call	0x5d0a	; 0x5d0a <__floatunsisf>
    220c:	9b 01       	movw	r18, r22
    220e:	ac 01       	movw	r20, r24
    2210:	c7 01       	movw	r24, r14
    2212:	b6 01       	movw	r22, r12
    2214:	0e 94 37 2f 	call	0x5e6e	; 0x5e6e <__mulsf3>
    2218:	20 e0       	ldi	r18, 0x00	; 0
    221a:	30 ec       	ldi	r19, 0xC0	; 192
    221c:	4f e7       	ldi	r20, 0x7F	; 127
    221e:	54 e4       	ldi	r21, 0x44	; 68
    2220:	0e 94 ec 2d 	call	0x5bd8	; 0x5bd8 <__divsf3>
    2224:	48 ee       	ldi	r20, 0xE8	; 232
    2226:	53 e0       	ldi	r21, 0x03	; 3
    2228:	9e 01       	movw	r18, r28
    222a:	0e 94 ad 01 	call	0x35a	; 0x35a <adc_ftoa>
	}
}	
    222e:	df 91       	pop	r29
    2230:	cf 91       	pop	r28
    2232:	1f 91       	pop	r17
    2234:	ff 90       	pop	r15
    2236:	ef 90       	pop	r14
    2238:	df 90       	pop	r13
    223a:	cf 90       	pop	r12
    223c:	08 95       	ret

0000223e <pwr_adj_control>:

void pwr_adj_control(uint8_t channel_num, char* result){
	utoa(pwr_adj_values[channel_num], result, 10);
    223e:	e8 2f       	mov	r30, r24
    2240:	f0 e0       	ldi	r31, 0x00	; 0
    2242:	ee 0f       	add	r30, r30
    2244:	ff 1f       	adc	r31, r31
    2246:	ee 54       	subi	r30, 0x4E	; 78
    2248:	f9 4d       	sbci	r31, 0xD9	; 217
    224a:	80 81       	ld	r24, Z
    224c:	91 81       	ldd	r25, Z+1	; 0x01
    224e:	4a e0       	ldi	r20, 0x0A	; 10
    2250:	50 e0       	ldi	r21, 0x00	; 0
    2252:	0e 94 9a 2f 	call	0x5f34	; 0x5f34 <utoa>
}
    2256:	08 95       	ret

00002258 <__vector_87>:

//#############################################################
//## SERVICE ROUTINES
//#############################################################

ISR(SPID_INT_vect){
    2258:	1f 92       	push	r1
    225a:	0f 92       	push	r0
    225c:	0f b6       	in	r0, 0x3f	; 63
    225e:	0f 92       	push	r0
    2260:	08 b6       	in	r0, 0x38	; 56
    2262:	0f 92       	push	r0
    2264:	09 b6       	in	r0, 0x39	; 57
    2266:	0f 92       	push	r0
    2268:	0b b6       	in	r0, 0x3b	; 59
    226a:	0f 92       	push	r0
    226c:	11 24       	eor	r1, r1
    226e:	2f 93       	push	r18
    2270:	3f 93       	push	r19
    2272:	4f 93       	push	r20
    2274:	5f 93       	push	r21
    2276:	6f 93       	push	r22
    2278:	7f 93       	push	r23
    227a:	8f 93       	push	r24
    227c:	9f 93       	push	r25
    227e:	af 93       	push	r26
    2280:	bf 93       	push	r27
    2282:	ef 93       	push	r30
    2284:	ff 93       	push	r31
	led_on(LED_1);
    2286:	81 e0       	ldi	r24, 0x01	; 1
    2288:	0e 94 13 2d 	call	0x5a26	; 0x5a26 <led_on>
	switch(pwr_adj_spi_state){
    228c:	80 91 af 26 	lds	r24, 0x26AF
    2290:	82 30       	cpi	r24, 0x02	; 2
    2292:	c9 f0       	breq	.+50     	; 0x22c6 <__vector_87+0x6e>
    2294:	83 30       	cpi	r24, 0x03	; 3
    2296:	39 f1       	breq	.+78     	; 0x22e6 <__vector_87+0x8e>
    2298:	81 30       	cpi	r24, 0x01	; 1
    229a:	09 f0       	breq	.+2      	; 0x229e <__vector_87+0x46>
    229c:	47 c0       	rjmp	.+142    	; 0x232c <__vector_87+0xd4>
		case PWR_ADJ_SPI_COMMAND:
			//finished sending first byte... send next
			pwr_adj_spi_state = PWR_ADJ_SPI_DATAH;
    229e:	82 e0       	ldi	r24, 0x02	; 2
    22a0:	80 93 af 26 	sts	0x26AF, r24
			SPID.DATA = (uint8_t)(pwr_adj_values[pwr_adj_channel_num_in_progress] >> 2); //extract the 8 MSb's from the 10-bit number
    22a4:	e0 91 9c 26 	lds	r30, 0x269C
    22a8:	f0 e0       	ldi	r31, 0x00	; 0
    22aa:	ee 0f       	add	r30, r30
    22ac:	ff 1f       	adc	r31, r31
    22ae:	ee 54       	subi	r30, 0x4E	; 78
    22b0:	f9 4d       	sbci	r31, 0xD9	; 217
    22b2:	80 81       	ld	r24, Z
    22b4:	91 81       	ldd	r25, Z+1	; 0x01
    22b6:	96 95       	lsr	r25
    22b8:	87 95       	ror	r24
    22ba:	96 95       	lsr	r25
    22bc:	87 95       	ror	r24
    22be:	e0 ec       	ldi	r30, 0xC0	; 192
    22c0:	f9 e0       	ldi	r31, 0x09	; 9
    22c2:	83 83       	std	Z+3, r24	; 0x03
			break;
    22c4:	33 c0       	rjmp	.+102    	; 0x232c <__vector_87+0xd4>
		case PWR_ADJ_SPI_DATAH:
			//finished sending second byte... send next
			pwr_adj_spi_state = PWR_ADJ_SPI_DATAL;
    22c6:	83 e0       	ldi	r24, 0x03	; 3
    22c8:	80 93 af 26 	sts	0x26AF, r24
			SPID.DATA = (uint8_t)(pwr_adj_values[pwr_adj_channel_num_in_progress]) & B8(00000011); //extract the 2 LSb's from the 10-bit number
    22cc:	e0 91 9c 26 	lds	r30, 0x269C
    22d0:	f0 e0       	ldi	r31, 0x00	; 0
    22d2:	ee 0f       	add	r30, r30
    22d4:	ff 1f       	adc	r31, r31
    22d6:	ee 54       	subi	r30, 0x4E	; 78
    22d8:	f9 4d       	sbci	r31, 0xD9	; 217
    22da:	80 81       	ld	r24, Z
    22dc:	83 70       	andi	r24, 0x03	; 3
    22de:	e0 ec       	ldi	r30, 0xC0	; 192
    22e0:	f9 e0       	ldi	r31, 0x09	; 9
    22e2:	83 83       	std	Z+3, r24	; 0x03
			break;
    22e4:	23 c0       	rjmp	.+70     	; 0x232c <__vector_87+0xd4>
		case PWR_ADJ_SPI_DATAL:
			//finished sending third byte... all done!
			//DESELECT
			switch(pwr_adj_channel_num_in_progress){
    22e6:	80 91 9c 26 	lds	r24, 0x269C
    22ea:	84 30       	cpi	r24, 0x04	; 4
    22ec:	18 f4       	brcc	.+6      	; 0x22f4 <__vector_87+0x9c>
    22ee:	82 30       	cpi	r24, 0x02	; 2
    22f0:	58 f4       	brcc	.+22     	; 0x2308 <__vector_87+0xb0>
    22f2:	05 c0       	rjmp	.+10     	; 0x22fe <__vector_87+0xa6>
    22f4:	86 30       	cpi	r24, 0x06	; 6
    22f6:	68 f0       	brcs	.+26     	; 0x2312 <__vector_87+0xba>
    22f8:	88 30       	cpi	r24, 0x08	; 8
    22fa:	a0 f4       	brcc	.+40     	; 0x2324 <__vector_87+0xcc>
    22fc:	0f c0       	rjmp	.+30     	; 0x231c <__vector_87+0xc4>
				case 0:
				case 1:
				PORTD.OUTSET = _BV(0); //CS high, done transmitting
    22fe:	81 e0       	ldi	r24, 0x01	; 1
    2300:	e0 e6       	ldi	r30, 0x60	; 96
    2302:	f6 e0       	ldi	r31, 0x06	; 6
    2304:	85 83       	std	Z+5, r24	; 0x05
				break;
    2306:	0e c0       	rjmp	.+28     	; 0x2324 <__vector_87+0xcc>
				case 2:
				case 3:
				PORTD.OUTSET = _BV(1); //CS high, done transmitting
    2308:	82 e0       	ldi	r24, 0x02	; 2
    230a:	e0 e6       	ldi	r30, 0x60	; 96
    230c:	f6 e0       	ldi	r31, 0x06	; 6
    230e:	85 83       	std	Z+5, r24	; 0x05
				break;
    2310:	09 c0       	rjmp	.+18     	; 0x2324 <__vector_87+0xcc>
				case 4:
				case 5:
				PORTD.OUTSET = _BV(2); //CS high, done transmitting
    2312:	84 e0       	ldi	r24, 0x04	; 4
    2314:	e0 e6       	ldi	r30, 0x60	; 96
    2316:	f6 e0       	ldi	r31, 0x06	; 6
    2318:	85 83       	std	Z+5, r24	; 0x05
				break;
    231a:	04 c0       	rjmp	.+8      	; 0x2324 <__vector_87+0xcc>
				case 6:
				case 7:
				PORTD.OUTSET = _BV(3); //CS high, done transmitting
    231c:	88 e0       	ldi	r24, 0x08	; 8
    231e:	e0 e6       	ldi	r30, 0x60	; 96
    2320:	f6 e0       	ldi	r31, 0x06	; 6
    2322:	85 83       	std	Z+5, r24	; 0x05
				break;
			}
			//Select Next Channel
			pwr_adj_spi_state = PWR_ADJ_SPI_IDLE;
    2324:	10 92 af 26 	sts	0x26AF, r1
			_pwr_adj_next();
    2328:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <_pwr_adj_next>
		case PWR_ADJ_SPI_IDLE:
		default:
			//do nothing
			break;
	}
}
    232c:	ff 91       	pop	r31
    232e:	ef 91       	pop	r30
    2330:	bf 91       	pop	r27
    2332:	af 91       	pop	r26
    2334:	9f 91       	pop	r25
    2336:	8f 91       	pop	r24
    2338:	7f 91       	pop	r23
    233a:	6f 91       	pop	r22
    233c:	5f 91       	pop	r21
    233e:	4f 91       	pop	r20
    2340:	3f 91       	pop	r19
    2342:	2f 91       	pop	r18
    2344:	0f 90       	pop	r0
    2346:	0b be       	out	0x3b, r0	; 59
    2348:	0f 90       	pop	r0
    234a:	09 be       	out	0x39, r0	; 57
    234c:	0f 90       	pop	r0
    234e:	08 be       	out	0x38, r0	; 56
    2350:	0f 90       	pop	r0
    2352:	0f be       	out	0x3f, r0	; 63
    2354:	0f 90       	pop	r0
    2356:	1f 90       	pop	r1
    2358:	18 95       	reti

0000235a <service_pwr_adjust>:

void service_pwr_adjust(){	
	
}
    235a:	08 95       	ret

0000235c <init_pwr_main>:

//Handles control of the main power channels

void init_pwr_main(){
	//LED's are located at PF0 (Lower) and PF1 (Upper)
	PORTC.DIRSET = B8(00110011); //pins 0,1,4,5 to output
    235c:	e0 e4       	ldi	r30, 0x40	; 64
    235e:	f6 e0       	ldi	r31, 0x06	; 6
    2360:	83 e3       	ldi	r24, 0x33	; 51
    2362:	81 83       	std	Z+1, r24	; 0x01
	PORTC.OUTCLR = B8(00110011); //pins 0,1,4,5 to low output value (off)
    2364:	86 83       	std	Z+6, r24	; 0x06
		break;
		case CHANNEL_D:
		PORTC.OUTCLR = B8(00100000);
		break;
		case CHANNEL_ALL:
		PORTC.OUTCLR = B8(00110011);
    2366:	86 83       	std	Z+6, r24	; 0x06
void init_pwr_main(){
	//LED's are located at PF0 (Lower) and PF1 (Upper)
	PORTC.DIRSET = B8(00110011); //pins 0,1,4,5 to output
	PORTC.OUTCLR = B8(00110011); //pins 0,1,4,5 to low output value (off)
	pwr_main_off(CHANNEL_ALL);				
}
    2368:	08 95       	ret

0000236a <pwr_main_on>:
//## OUTPUT MUTE
//#############################################################

void inline pwr_main_on(uint8_t which){
	uint8_t mask;
	switch(which){
    236a:	82 30       	cpi	r24, 0x02	; 2
    236c:	c1 f0       	breq	.+48     	; 0x239e <pwr_main_on+0x34>
    236e:	83 30       	cpi	r24, 0x03	; 3
    2370:	28 f4       	brcc	.+10     	; 0x237c <pwr_main_on+0x12>
    2372:	88 23       	and	r24, r24
    2374:	51 f0       	breq	.+20     	; 0x238a <pwr_main_on+0x20>
    2376:	81 30       	cpi	r24, 0x01	; 1
    2378:	69 f5       	brne	.+90     	; 0x23d4 <pwr_main_on+0x6a>
    237a:	0c c0       	rjmp	.+24     	; 0x2394 <pwr_main_on+0x2a>
    237c:	8a 33       	cpi	r24, 0x3A	; 58
    237e:	c9 f0       	breq	.+50     	; 0x23b2 <pwr_main_on+0x48>
    2380:	8c 33       	cpi	r24, 0x3C	; 60
    2382:	e1 f0       	breq	.+56     	; 0x23bc <pwr_main_on+0x52>
    2384:	83 30       	cpi	r24, 0x03	; 3
    2386:	31 f5       	brne	.+76     	; 0x23d4 <pwr_main_on+0x6a>
    2388:	0f c0       	rjmp	.+30     	; 0x23a8 <pwr_main_on+0x3e>
		case CHANNEL_A:
			PORTC.OUTSET = B8(00000001);
    238a:	81 e0       	ldi	r24, 0x01	; 1
    238c:	e0 e4       	ldi	r30, 0x40	; 64
    238e:	f6 e0       	ldi	r31, 0x06	; 6
    2390:	85 83       	std	Z+5, r24	; 0x05
			break;
    2392:	08 95       	ret
		case CHANNEL_B:
			PORTC.OUTSET = B8(00000010);
    2394:	82 e0       	ldi	r24, 0x02	; 2
    2396:	e0 e4       	ldi	r30, 0x40	; 64
    2398:	f6 e0       	ldi	r31, 0x06	; 6
    239a:	85 83       	std	Z+5, r24	; 0x05
			break;
    239c:	08 95       	ret
		case CHANNEL_C:
			PORTC.OUTSET = B8(00010000);
    239e:	80 e1       	ldi	r24, 0x10	; 16
    23a0:	e0 e4       	ldi	r30, 0x40	; 64
    23a2:	f6 e0       	ldi	r31, 0x06	; 6
    23a4:	85 83       	std	Z+5, r24	; 0x05
			break;
    23a6:	08 95       	ret
		case CHANNEL_D:
			PORTC.OUTSET = B8(00100000);
    23a8:	80 e2       	ldi	r24, 0x20	; 32
    23aa:	e0 e4       	ldi	r30, 0x40	; 64
    23ac:	f6 e0       	ldi	r31, 0x06	; 6
    23ae:	85 83       	std	Z+5, r24	; 0x05
			break;
    23b0:	08 95       	ret
		case CHANNEL_ALL:
			PORTC.OUTSET = B8(00110011);
    23b2:	83 e3       	ldi	r24, 0x33	; 51
    23b4:	e0 e4       	ldi	r30, 0x40	; 64
    23b6:	f6 e0       	ldi	r31, 0x06	; 6
    23b8:	85 83       	std	Z+5, r24	; 0x05
			break;
    23ba:	08 95       	ret
		case CHANNEL_RESTORE:
			mask = STATE_power_channels >> 2; //[000000DC] remove lower channels
    23bc:	80 91 86 25 	lds	r24, 0x2586
    23c0:	98 2f       	mov	r25, r24
    23c2:	96 95       	lsr	r25
    23c4:	96 95       	lsr	r25
			mask = mask << 4; //[00DC0000] position upper channels
    23c6:	92 95       	swap	r25
    23c8:	90 7f       	andi	r25, 0xF0	; 240
			mask |= (STATE_power_channels & B8(00000011)); //[00DC00BA] merge in lower channels
    23ca:	83 70       	andi	r24, 0x03	; 3
    23cc:	89 2b       	or	r24, r25
			PORTC.OUTSET = mask;
    23ce:	e0 e4       	ldi	r30, 0x40	; 64
    23d0:	f6 e0       	ldi	r31, 0x06	; 6
    23d2:	85 83       	std	Z+5, r24	; 0x05
    23d4:	08 95       	ret

000023d6 <pwr_main_off>:
			break;
	}
}

void inline pwr_main_off(uint8_t which){
	switch(which){
    23d6:	82 30       	cpi	r24, 0x02	; 2
    23d8:	b1 f0       	breq	.+44     	; 0x2406 <pwr_main_off+0x30>
    23da:	83 30       	cpi	r24, 0x03	; 3
    23dc:	28 f4       	brcc	.+10     	; 0x23e8 <pwr_main_off+0x12>
    23de:	88 23       	and	r24, r24
    23e0:	41 f0       	breq	.+16     	; 0x23f2 <pwr_main_off+0x1c>
    23e2:	81 30       	cpi	r24, 0x01	; 1
    23e4:	f1 f4       	brne	.+60     	; 0x2422 <pwr_main_off+0x4c>
    23e6:	0a c0       	rjmp	.+20     	; 0x23fc <pwr_main_off+0x26>
    23e8:	83 30       	cpi	r24, 0x03	; 3
    23ea:	91 f0       	breq	.+36     	; 0x2410 <pwr_main_off+0x3a>
    23ec:	8a 33       	cpi	r24, 0x3A	; 58
    23ee:	c9 f4       	brne	.+50     	; 0x2422 <pwr_main_off+0x4c>
    23f0:	14 c0       	rjmp	.+40     	; 0x241a <pwr_main_off+0x44>
		case CHANNEL_A:
		PORTC.OUTCLR = B8(00000001);
    23f2:	81 e0       	ldi	r24, 0x01	; 1
    23f4:	e0 e4       	ldi	r30, 0x40	; 64
    23f6:	f6 e0       	ldi	r31, 0x06	; 6
    23f8:	86 83       	std	Z+6, r24	; 0x06
		break;
    23fa:	08 95       	ret
		case CHANNEL_B:
		PORTC.OUTCLR = B8(00000010);
    23fc:	82 e0       	ldi	r24, 0x02	; 2
    23fe:	e0 e4       	ldi	r30, 0x40	; 64
    2400:	f6 e0       	ldi	r31, 0x06	; 6
    2402:	86 83       	std	Z+6, r24	; 0x06
		break;
    2404:	08 95       	ret
		case CHANNEL_C:
		PORTC.OUTCLR = B8(00010000);
    2406:	80 e1       	ldi	r24, 0x10	; 16
    2408:	e0 e4       	ldi	r30, 0x40	; 64
    240a:	f6 e0       	ldi	r31, 0x06	; 6
    240c:	86 83       	std	Z+6, r24	; 0x06
		break;
    240e:	08 95       	ret
		case CHANNEL_D:
		PORTC.OUTCLR = B8(00100000);
    2410:	80 e2       	ldi	r24, 0x20	; 32
    2412:	e0 e4       	ldi	r30, 0x40	; 64
    2414:	f6 e0       	ldi	r31, 0x06	; 6
    2416:	86 83       	std	Z+6, r24	; 0x06
		break;
    2418:	08 95       	ret
		case CHANNEL_ALL:
		PORTC.OUTCLR = B8(00110011);
    241a:	83 e3       	ldi	r24, 0x33	; 51
    241c:	e0 e4       	ldi	r30, 0x40	; 64
    241e:	f6 e0       	ldi	r31, 0x06	; 6
    2420:	86 83       	std	Z+6, r24	; 0x06
    2422:	08 95       	ret

00002424 <service_pwr_main>:
		break;
	}
}

void service_pwr_main(){
}
    2424:	08 95       	ret

00002426 <init_rtos_clock_external>:
#include "quadrature.h"
#include "eeprom.h"

int init_rtos_clock_external(void){
	//Boot up and configure oscillator
	OSC.XOSCCTRL = B8(00100010); //enable external 32kHz Xtal using low-power (e.g. low-swing) mode
    2426:	e0 e5       	ldi	r30, 0x50	; 80
    2428:	f0 e0       	ldi	r31, 0x00	; 0
    242a:	82 e2       	ldi	r24, 0x22	; 34
    242c:	82 83       	std	Z+2, r24	; 0x02
	OSC.CTRL = B8(00001011); //enable 32M-RC & External Xtal -- also "enable" 2M-RC since its already running b/c we booted from it and can't actually disable it until we switch sources
    242e:	8b e0       	ldi	r24, 0x0B	; 11
    2430:	80 83       	st	Z, r24
	//Wait for stability
	led_on(LED_0);
    2432:	80 e0       	ldi	r24, 0x00	; 0
    2434:	0e 94 13 2d 	call	0x5a26	; 0x5a26 <led_on>
	//This is actually tricky sequencing because we boot from the 2MHz internal RC so previous write to OSC.CTRL was ineffective at shutting down the 2M-RC so OSC.STATUS will still reflect that it is running
	while(OSC.STATUS != B8(00001011)); //stall for external xtal and 32M-RC stability
    2438:	e0 e5       	ldi	r30, 0x50	; 80
    243a:	f0 e0       	ldi	r31, 0x00	; 0
    243c:	81 81       	ldd	r24, Z+1	; 0x01
    243e:	8b 30       	cpi	r24, 0x0B	; 11
    2440:	e9 f7       	brne	.-6      	; 0x243c <init_rtos_clock_external+0x16>
	led_off(LED_0);
    2442:	80 e0       	ldi	r24, 0x00	; 0
    2444:	0e 94 2f 2d 	call	0x5a5e	; 0x5a5e <led_off>
	//Configure
	OSC.DFLLCTRL = B8(00000010); //use external xtal for 32M-RC calibration
    2448:	e0 e5       	ldi	r30, 0x50	; 80
    244a:	f0 e0       	ldi	r31, 0x00	; 0
    244c:	82 e0       	ldi	r24, 0x02	; 2
    244e:	86 83       	std	Z+6, r24	; 0x06
	DFLLRC32M.CTRL = B8(00000001); //enable Xtal calibration of internal 32MHz RC oscillator
    2450:	81 e0       	ldi	r24, 0x01	; 1
    2452:	80 93 60 00 	sts	0x0060, r24
	//Switch system clock over to stable RC oscillator
	//Switch to 32M-RC as system clock source and disable the 2M-RC that we booted from.
	//----REQUIRES CONFIGURATION PROTECTION REGISTER
	CCP = CCP_IOREG_gc; //disable change protection for IO register
    2456:	98 ed       	ldi	r25, 0xD8	; 216
    2458:	94 bf       	out	0x34, r25	; 52
	CLK.CTRL = CLK_SCLKSEL_RC32M_gc;
    245a:	80 93 40 00 	sts	0x0040, r24
	OSC.CTRL = B8(00001010); //re-execute this write -- this will shutdown the 2M-RC since we are no longer running from it.
    245e:	8a e0       	ldi	r24, 0x0A	; 10
    2460:	80 83       	st	Z, r24
	//Now running live at 32MHz
	return 0;
}
    2462:	80 e0       	ldi	r24, 0x00	; 0
    2464:	90 e0       	ldi	r25, 0x00	; 0
    2466:	08 95       	ret

00002468 <init_rtos_clock_internal>:

int init_rtos_clock_internal(void){
	//Boot up and configure oscillator
	OSC.CTRL = B8(00000111); //enable 32M-RC & INTERNAL 32kHz -- also "enable" 2M-RC since its already running b/c we booted from it and can't actually disable it until we switch sources
    2468:	87 e0       	ldi	r24, 0x07	; 7
    246a:	80 93 50 00 	sts	0x0050, r24
	//Wait for stability
	led_on(LED_0);
    246e:	80 e0       	ldi	r24, 0x00	; 0
    2470:	0e 94 13 2d 	call	0x5a26	; 0x5a26 <led_on>
	//This is actually tricky sequencing because we boot from the 2MHz internal RC so previous write to OSC.CTRL was ineffective at shutting down the 2M-RC so OSC.STATUS will still reflect that it is running
	while(OSC.STATUS != B8(00000111)); //stall for INTERNAL 32k-RC and 32MHz-RC stability
    2474:	e0 e5       	ldi	r30, 0x50	; 80
    2476:	f0 e0       	ldi	r31, 0x00	; 0
    2478:	81 81       	ldd	r24, Z+1	; 0x01
    247a:	87 30       	cpi	r24, 0x07	; 7
    247c:	e9 f7       	brne	.-6      	; 0x2478 <init_rtos_clock_internal+0x10>
	led_off(LED_0);
    247e:	80 e0       	ldi	r24, 0x00	; 0
    2480:	0e 94 2f 2d 	call	0x5a5e	; 0x5a5e <led_off>
	//Configure
	OSC.DFLLCTRL = B8(00000010); //use external xtal for 32M-RC calibration
    2484:	e0 e5       	ldi	r30, 0x50	; 80
    2486:	f0 e0       	ldi	r31, 0x00	; 0
    2488:	82 e0       	ldi	r24, 0x02	; 2
    248a:	86 83       	std	Z+6, r24	; 0x06
	DFLLRC32M.CTRL = B8(00000001); //enable Xtal calibration of internal 32MHz RC oscillator
    248c:	81 e0       	ldi	r24, 0x01	; 1
    248e:	80 93 60 00 	sts	0x0060, r24
	//Switch system clock over to stable RC oscillator
	//Switch to 32M-RC as system clock source and disable the 2M-RC that we booted from.
	//----REQUIRES CONFIGURATION PROTECTION REGISTER
	CCP = CCP_IOREG_gc; //disable change protection for IO register
    2492:	98 ed       	ldi	r25, 0xD8	; 216
    2494:	94 bf       	out	0x34, r25	; 52
	CLK.CTRL = CLK_SCLKSEL_RC32M_gc;
    2496:	80 93 40 00 	sts	0x0040, r24
	OSC.CTRL = B8(00001010); //re-execute this write -- this will shutdown the 2M-RC since we are no longer running from it.
    249a:	8a e0       	ldi	r24, 0x0A	; 10
    249c:	80 83       	st	Z, r24
	//Now running live at 32MHz
	return 0;
}
    249e:	80 e0       	ldi	r24, 0x00	; 0
    24a0:	90 e0       	ldi	r25, 0x00	; 0
    24a2:	08 95       	ret

000024a4 <main>:
	//[BLINK ALIVE]
	uint8_t blah;
	int8_t updown;

	//[LED's, Button, & Switches]
	init_ui(); //init LED's first so that they are available for debugging
    24a4:	0e 94 7d 2d 	call	0x5afa	; 0x5afa <init_ui>
	init_fp(); //init Front Panel LED's and Switches so that they are available for debugging
    24a8:	0e 94 26 09 	call	0x124c	; 0x124c <init_fp>
	init_quadrature(); //init quadrature decoder for front panel rotary encoder
    24ac:	0e 94 d5 12 	call	0x25aa	; 0x25aa <init_quadrature>
	
	//[CPU CLOCK]
	init_rtos_clock_internal();
    24b0:	0e 94 34 12 	call	0x2468	; 0x2468 <init_rtos_clock_internal>

	//[LCD]
	init_lcd();
    24b4:	0e 94 2c 0b 	call	0x1658	; 0x1658 <init_lcd>
	init_lcd_console();
    24b8:	0e 94 b1 0c 	call	0x1962	; 0x1962 <init_lcd_console>
	init_lcd_touch();
    24bc:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <init_lcd_touch>

	//[UARTs]
	init_uart(&uctrl, BAUD_115200);
    24c0:	80 ea       	ldi	r24, 0xA0	; 160
    24c2:	98 e0       	ldi	r25, 0x08	; 8
    24c4:	60 e0       	ldi	r22, 0x00	; 0
    24c6:	0e 94 fa 13 	call	0x27f4	; 0x27f4 <init_uart>
	init_uart(&udata, BAUD_115200);
    24ca:	80 eb       	ldi	r24, 0xB0	; 176
    24cc:	98 e0       	ldi	r25, 0x08	; 8
    24ce:	60 e0       	ldi	r22, 0x00	; 0
    24d0:	0e 94 fa 13 	call	0x27f4	; 0x27f4 <init_uart>
	init_uart(&ulcd, BAUD_115200);
    24d4:	80 eb       	ldi	r24, 0xB0	; 176
    24d6:	9b e0       	ldi	r25, 0x0B	; 11
    24d8:	60 e0       	ldi	r22, 0x00	; 0
    24da:	0e 94 fa 13 	call	0x27f4	; 0x27f4 <init_uart>
	init_uart_buffers();
    24de:	0e 94 6c 2a 	call	0x54d8	; 0x54d8 <init_uart_buffers>
	
	//[ADC]
	init_adc();		
    24e2:	0e 94 58 01 	call	0x2b0	; 0x2b0 <init_adc>

	//[POWER PATH]
	init_pwr_main();
    24e6:	0e 94 ae 11 	call	0x235c	; 0x235c <init_pwr_main>
	init_pwr_adjust();
    24ea:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <init_pwr_adjust>

	//[BRAIN]
	init_brain();
    24ee:	0e 94 07 04 	call	0x80e	; 0x80e <init_brain>
	
	//[EEPROM] -- do this last
	init_eeprom();
    24f2:	0e 94 1d 09 	call	0x123a	; 0x123a <init_eeprom>
		
	//[Realtime Loop Timer]
	//Use PortC's T/C0
	TCC0.CTRLA = 0x07; //Start the timer; Div1024 operation = 32M/1024 = 31250
    24f6:	e0 e0       	ldi	r30, 0x00	; 0
    24f8:	f8 e0       	ldi	r31, 0x08	; 8
    24fa:	87 e0       	ldi	r24, 0x07	; 7
    24fc:	80 83       	st	Z, r24
	TCC0.PER = 62; //2ms Loop Time
    24fe:	8e e3       	ldi	r24, 0x3E	; 62
    2500:	90 e0       	ldi	r25, 0x00	; 0
    2502:	86 a3       	lds	r24, 0x56
    2504:	97 a3       	lds	r25, 0x57

	//[PMIC (Interrupt Controller)]
	PMIC.CTRL = B8(10000111); //enable all three interrupt levels (lowest one with round-robin)
    2506:	87 e8       	ldi	r24, 0x87	; 135
    2508:	e0 ea       	ldi	r30, 0xA0	; 160
    250a:	f0 e0       	ldi	r31, 0x00	; 0
    250c:	82 83       	std	Z+2, r24	; 0x02
	sei(); //ENABLE INTERRUPTS AND GO LIVE!
    250e:	78 94       	sei

	//[RTOS START!]
	blah = 1;
	updown = 1;
	led_off(LED_0);
    2510:	80 e0       	ldi	r24, 0x00	; 0
    2512:	0e 94 2f 2d 	call	0x5a5e	; 0x5a5e <led_off>
	led_off(LED_1);
    2516:	81 e0       	ldi	r24, 0x01	; 1
    2518:	0e 94 2f 2d 	call	0x5a5e	; 0x5a5e <led_off>
	audio_beep(2, 100);
    251c:	82 e0       	ldi	r24, 0x02	; 2
    251e:	64 e6       	ldi	r22, 0x64	; 100
    2520:	70 e0       	ldi	r23, 0x00	; 0
    2522:	0e 94 af 2d 	call	0x5b5e	; 0x5b5e <audio_beep>
	PORTE.DIRSET = B8(00000011); //PE0, PE1 to output pin for loop timer
    2526:	e0 e8       	ldi	r30, 0x80	; 128
    2528:	f6 e0       	ldi	r31, 0x06	; 6
    252a:	83 e0       	ldi	r24, 0x03	; 3
    252c:	81 83       	std	Z+1, r24	; 0x01

	while(1){
		PORTE.OUTSET = 0x02; //Set PE1 on start of loop and lower after work is done.
    252e:	82 e0       	ldi	r24, 0x02	; 2
    2530:	85 83       	std	Z+5, r24	; 0x05
		//Blink alive
		led_dim(LED_0, blah);	
    2532:	80 e0       	ldi	r24, 0x00	; 0
    2534:	61 e0       	ldi	r22, 0x01	; 1
    2536:	0e 94 45 2d 	call	0x5a8a	; 0x5a8a <led_dim>
		blah += updown;
    253a:	12 e0       	ldi	r17, 0x02	; 2
	PMIC.CTRL = B8(10000111); //enable all three interrupt levels (lowest one with round-robin)
	sei(); //ENABLE INTERRUPTS AND GO LIVE!

	//[RTOS START!]
	blah = 1;
	updown = 1;
    253c:	01 e0       	ldi	r16, 0x01	; 1
		led_dim(LED_0, blah);	
		blah += updown;
		if ((blah == 255) || (blah == 0)) {
			updown = -1 * updown;
		}
		PORTE.OUTTGL = 0x01; //wiggle pin to indicate loop timing
    253e:	0f 2e       	mov	r0, r31
    2540:	f0 e8       	ldi	r31, 0x80	; 128
    2542:	ef 2e       	mov	r14, r31
    2544:	f6 e0       	ldi	r31, 0x06	; 6
    2546:	ff 2e       	mov	r15, r31
    2548:	f0 2d       	mov	r31, r0
    254a:	cc 24       	eor	r12, r12
    254c:	c3 94       	inc	r12
    254e:	bc 2c       	mov	r11, r12
		service_lcd_console();
		service_lcd_touch();
		service_pwr_adjust();
		
		//Wait out RTOS loop
		PORTE.OUTCLR = 0x02; //Indicate work for this cycle has finished on PE1
    2550:	dd 24       	eor	r13, r13
    2552:	68 94       	set
    2554:	d1 f8       	bld	r13, 1
		while((TCC0.INTFLAGS & _BV(0)) != 0x01); //Wait for the loop time to expire
    2556:	c0 e0       	ldi	r28, 0x00	; 0
    2558:	d8 e0       	ldi	r29, 0x08	; 8
    255a:	01 c0       	rjmp	.+2      	; 0x255e <main+0xba>
		PORTE.OUTSET = 0x02; //Set PE1 on start of loop and lower after work is done.
		//Blink alive
		led_dim(LED_0, blah);	
		blah += updown;
		if ((blah == 255) || (blah == 0)) {
			updown = -1 * updown;
    255c:	01 95       	neg	r16
		}
		PORTE.OUTTGL = 0x01; //wiggle pin to indicate loop timing
    255e:	f7 01       	movw	r30, r14
    2560:	b7 82       	std	Z+7, r11	; 0x07
		
		//Call services
		service_audio();
    2562:	0e 94 bb 2d 	call	0x5b76	; 0x5b76 <service_audio>
		service_fp();
    2566:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <service_fp>
		service_adc();
    256a:	0e 94 aa 02 	call	0x554	; 0x554 <service_adc>
		service_brain();	
    256e:	0e 94 1c 06 	call	0xc38	; 0xc38 <service_brain>
		service_uart_buffer();
    2572:	0e 94 32 2b 	call	0x5664	; 0x5664 <service_uart_buffer>
		service_lcd();
    2576:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <service_lcd>
		service_lcd_console();
    257a:	0e 94 47 0d 	call	0x1a8e	; 0x1a8e <service_lcd_console>
		service_lcd_touch();
    257e:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <service_lcd_touch>
		service_pwr_adjust();
    2582:	0e 94 ad 11 	call	0x235a	; 0x235a <service_pwr_adjust>
		
		//Wait out RTOS loop
		PORTE.OUTCLR = 0x02; //Indicate work for this cycle has finished on PE1
    2586:	f7 01       	movw	r30, r14
    2588:	d6 82       	std	Z+6, r13	; 0x06
		while((TCC0.INTFLAGS & _BV(0)) != 0x01); //Wait for the loop time to expire
    258a:	8c 85       	ldd	r24, Y+12	; 0x0c
    258c:	80 ff       	sbrs	r24, 0
    258e:	fd cf       	rjmp	.-6      	; 0x258a <main+0xe6>
		TCC0.INTFLAGS = 0x01; //Clear the interrupt flag
    2590:	cc 86       	std	Y+12, r12	; 0x0c
	led_off(LED_1);
	audio_beep(2, 100);
	PORTE.DIRSET = B8(00000011); //PE0, PE1 to output pin for loop timer

	while(1){
		PORTE.OUTSET = 0x02; //Set PE1 on start of loop and lower after work is done.
    2592:	f7 01       	movw	r30, r14
    2594:	d5 82       	std	Z+5, r13	; 0x05
		//Blink alive
		led_dim(LED_0, blah);	
    2596:	80 e0       	ldi	r24, 0x00	; 0
    2598:	61 2f       	mov	r22, r17
    259a:	0e 94 45 2d 	call	0x5a8a	; 0x5a8a <led_dim>
		blah += updown;
    259e:	10 0f       	add	r17, r16
		if ((blah == 255) || (blah == 0)) {
    25a0:	81 2f       	mov	r24, r17
    25a2:	81 50       	subi	r24, 0x01	; 1
    25a4:	8e 3f       	cpi	r24, 0xFE	; 254
    25a6:	d0 f6       	brcc	.-76     	; 0x255c <main+0xb8>
    25a8:	da cf       	rjmp	.-76     	; 0x255e <main+0xba>

000025aa <init_quadrature>:
		============		
		PK6: Rotary Channel A
		PK7: Rotary Channel B
	*/
	//	SciPSU FP switches have hardware pull-up and hardware debounce
	PORTK.DIRCLR = B8(11000000); //This is the default condition, but just to be safe
    25aa:	e0 e2       	ldi	r30, 0x20	; 32
    25ac:	f7 e0       	ldi	r31, 0x07	; 7
    25ae:	80 ec       	ldi	r24, 0xC0	; 192
    25b0:	82 83       	std	Z+2, r24	; 0x02
	PORTK.INT0MASK = B8(01000000); //Enable PORTK.Interrupt0 channel for PK6 
    25b2:	80 e4       	ldi	r24, 0x40	; 64
    25b4:	82 87       	std	Z+10, r24	; 0x0a
	PORTK.INT1MASK = B8(10000000); //Enable PORTK.Interrupt1 channel for PK7 
    25b6:	80 e8       	ldi	r24, 0x80	; 128
    25b8:	83 87       	std	Z+11, r24	; 0x0b
	PORTK.INTCTRL = B8(00001111); //interrupt 0 & 1 channels set to highest priority
    25ba:	8f e0       	ldi	r24, 0x0F	; 15
    25bc:	81 87       	std	Z+9, r24	; 0x09
	//Setup initial edge look directions -- need to enable global interrupts shortly after doing this (so init the quadrature module last in main.c)
	if ((PORTK.IN & _BV(6)) == 0){PORTK.PIN6CTRL = RISING_EDGE;} 
    25be:	80 85       	ldd	r24, Z+8	; 0x08
    25c0:	86 fd       	sbrc	r24, 6
    25c2:	03 c0       	rjmp	.+6      	; 0x25ca <init_quadrature+0x20>
    25c4:	89 e9       	ldi	r24, 0x99	; 153
    25c6:	86 8b       	std	Z+22, r24	; 0x16
    25c8:	04 c0       	rjmp	.+8      	; 0x25d2 <init_quadrature+0x28>
	else {PORTK.PIN6CTRL = FALLING_EDGE;}
    25ca:	8a e9       	ldi	r24, 0x9A	; 154
    25cc:	e0 e2       	ldi	r30, 0x20	; 32
    25ce:	f7 e0       	ldi	r31, 0x07	; 7
    25d0:	86 8b       	std	Z+22, r24	; 0x16
	if ((PORTK.IN & _BV(7)) == 0){PORTK.PIN7CTRL = RISING_EDGE;}
    25d2:	e0 e2       	ldi	r30, 0x20	; 32
    25d4:	f7 e0       	ldi	r31, 0x07	; 7
    25d6:	80 85       	ldd	r24, Z+8	; 0x08
    25d8:	88 23       	and	r24, r24
    25da:	1c f0       	brlt	.+6      	; 0x25e2 <init_quadrature+0x38>
    25dc:	89 e9       	ldi	r24, 0x99	; 153
    25de:	87 8b       	std	Z+23, r24	; 0x17
    25e0:	04 c0       	rjmp	.+8      	; 0x25ea <init_quadrature+0x40>
	else {PORTK.PIN7CTRL = FALLING_EDGE;}
    25e2:	8a e9       	ldi	r24, 0x9A	; 154
    25e4:	e0 e2       	ldi	r30, 0x20	; 32
    25e6:	f7 e0       	ldi	r31, 0x07	; 7
    25e8:	87 8b       	std	Z+23, r24	; 0x17
		
	quad_count = 0;
    25ea:	10 92 a2 26 	sts	0x26A2, r1
    25ee:	10 92 a3 26 	sts	0x26A3, r1
	quad_state = QUAD_IDLE;
    25f2:	8c e2       	ldi	r24, 0x2C	; 44
    25f4:	80 93 9f 26 	sts	0x269F, r24
	
}
    25f8:	08 95       	ret

000025fa <quad_up>:

/// Reports if the quadrature encoded control has moved up since the last time this function was called.
/* SIDE EFFECT: modifies internal state. If you call this twice, only the first call will report true.*/
boolean quad_up(){
	if (quad_state == QUAD_UP){quad_state = QUAD_IDLE; return true;}
    25fa:	80 91 9f 26 	lds	r24, 0x269F
    25fe:	8d 32       	cpi	r24, 0x2D	; 45
    2600:	29 f4       	brne	.+10     	; 0x260c <quad_up+0x12>
    2602:	8c e2       	ldi	r24, 0x2C	; 44
    2604:	80 93 9f 26 	sts	0x269F, r24
    2608:	81 e0       	ldi	r24, 0x01	; 1
    260a:	08 95       	ret
	return false;
    260c:	80 e0       	ldi	r24, 0x00	; 0
}
    260e:	08 95       	ret

00002610 <quad_down>:

/// Reports if the quadrature encoded control has moved down since the last time this function was called.
/* SIDE EFFECT: modifies internal state. If you call this twice, only the first call will report true.*/
boolean quad_down(){
if (quad_state == QUAD_DOWN){quad_state = QUAD_IDLE; return true;}
    2610:	80 91 9f 26 	lds	r24, 0x269F
    2614:	8e 32       	cpi	r24, 0x2E	; 46
    2616:	29 f4       	brne	.+10     	; 0x2622 <quad_down+0x12>
    2618:	8c e2       	ldi	r24, 0x2C	; 44
    261a:	80 93 9f 26 	sts	0x269F, r24
    261e:	81 e0       	ldi	r24, 0x01	; 1
    2620:	08 95       	ret
return false;
    2622:	80 e0       	ldi	r24, 0x00	; 0
}
    2624:	08 95       	ret

00002626 <__vector_100>:
//#############################################################
//## ROTARY CONTROL
//#############################################################

///Interrupt Service Routine (ISR) for quadrature encoder Channel A (PORTK Int0; PK6)
ISR(PORTK_INT0_vect){
    2626:	1f 92       	push	r1
    2628:	0f 92       	push	r0
    262a:	0f b6       	in	r0, 0x3f	; 63
    262c:	0f 92       	push	r0
    262e:	08 b6       	in	r0, 0x38	; 56
    2630:	0f 92       	push	r0
    2632:	0b b6       	in	r0, 0x3b	; 59
    2634:	0f 92       	push	r0
    2636:	11 24       	eor	r1, r1
    2638:	8f 93       	push	r24
    263a:	9f 93       	push	r25
    263c:	ef 93       	push	r30
    263e:	ff 93       	push	r31
	if (PORTK.PIN6CTRL == FALLING_EDGE){
    2640:	e0 e2       	ldi	r30, 0x20	; 32
    2642:	f7 e0       	ldi	r31, 0x07	; 7
    2644:	86 89       	ldd	r24, Z+22	; 0x16
    2646:	8a 39       	cpi	r24, 0x9A	; 154
    2648:	01 f5       	brne	.+64     	; 0x268a <__vector_100+0x64>
		//Detected FALLING edge on channel A
		if ((PORTK.IN & _BV(7)) == 0){
    264a:	80 85       	ldd	r24, Z+8	; 0x08
    264c:	88 23       	and	r24, r24
    264e:	6c f0       	brlt	.+26     	; 0x266a <__vector_100+0x44>
			//if channel A is falling and channel B is low, direction = DOWN
			quad_count--;
    2650:	80 91 a2 26 	lds	r24, 0x26A2
    2654:	90 91 a3 26 	lds	r25, 0x26A3
    2658:	01 97       	sbiw	r24, 0x01	; 1
    265a:	80 93 a2 26 	sts	0x26A2, r24
    265e:	90 93 a3 26 	sts	0x26A3, r25
			quad_state = QUAD_DOWN;
    2662:	8e e2       	ldi	r24, 0x2E	; 46
    2664:	80 93 9f 26 	sts	0x269F, r24
    2668:	0c c0       	rjmp	.+24     	; 0x2682 <__vector_100+0x5c>
		}
		else{
			//if channel A is falling and channel B is high, direction = UP
			quad_count++;
    266a:	80 91 a2 26 	lds	r24, 0x26A2
    266e:	90 91 a3 26 	lds	r25, 0x26A3
    2672:	01 96       	adiw	r24, 0x01	; 1
    2674:	80 93 a2 26 	sts	0x26A2, r24
    2678:	90 93 a3 26 	sts	0x26A3, r25
			quad_state = QUAD_UP;
    267c:	8d e2       	ldi	r24, 0x2D	; 45
    267e:	80 93 9f 26 	sts	0x269F, r24
		}
		//Now, look for rising edge
		PORTK.PIN6CTRL = RISING_EDGE;
    2682:	89 e9       	ldi	r24, 0x99	; 153
    2684:	e0 e2       	ldi	r30, 0x20	; 32
    2686:	f7 e0       	ldi	r31, 0x07	; 7
    2688:	86 8b       	std	Z+22, r24	; 0x16
	}
	if (PORTK.PIN6CTRL == RISING_EDGE){
    268a:	e0 e2       	ldi	r30, 0x20	; 32
    268c:	f7 e0       	ldi	r31, 0x07	; 7
    268e:	86 89       	ldd	r24, Z+22	; 0x16
    2690:	89 39       	cpi	r24, 0x99	; 153
    2692:	01 f5       	brne	.+64     	; 0x26d4 <__vector_100+0xae>
		//Detected RISING edge on channel A
		if ((PORTK.IN & _BV(7)) == 0){
    2694:	80 85       	ldd	r24, Z+8	; 0x08
    2696:	88 23       	and	r24, r24
    2698:	6c f0       	brlt	.+26     	; 0x26b4 <__vector_100+0x8e>
			//if channel A is rising and channel B is low, direction = UP
			quad_count++;
    269a:	80 91 a2 26 	lds	r24, 0x26A2
    269e:	90 91 a3 26 	lds	r25, 0x26A3
    26a2:	01 96       	adiw	r24, 0x01	; 1
    26a4:	80 93 a2 26 	sts	0x26A2, r24
    26a8:	90 93 a3 26 	sts	0x26A3, r25
			quad_state = QUAD_UP;
    26ac:	8d e2       	ldi	r24, 0x2D	; 45
    26ae:	80 93 9f 26 	sts	0x269F, r24
    26b2:	0c c0       	rjmp	.+24     	; 0x26cc <__vector_100+0xa6>
		}
		else{
			//if channel A is rising and channel B is high, direction = DOWN
			quad_count--;
    26b4:	80 91 a2 26 	lds	r24, 0x26A2
    26b8:	90 91 a3 26 	lds	r25, 0x26A3
    26bc:	01 97       	sbiw	r24, 0x01	; 1
    26be:	80 93 a2 26 	sts	0x26A2, r24
    26c2:	90 93 a3 26 	sts	0x26A3, r25
			quad_state = QUAD_DOWN;
    26c6:	8e e2       	ldi	r24, 0x2E	; 46
    26c8:	80 93 9f 26 	sts	0x269F, r24
		}
		//Now, look for falling edge
		PORTK.PIN6CTRL = FALLING_EDGE;
    26cc:	8a e9       	ldi	r24, 0x9A	; 154
    26ce:	e0 e2       	ldi	r30, 0x20	; 32
    26d0:	f7 e0       	ldi	r31, 0x07	; 7
    26d2:	86 8b       	std	Z+22, r24	; 0x16
	}
	PORTK.INTFLAGS = B8(00000001); //clear interrupt flag just in case
    26d4:	81 e0       	ldi	r24, 0x01	; 1
    26d6:	e0 e2       	ldi	r30, 0x20	; 32
    26d8:	f7 e0       	ldi	r31, 0x07	; 7
    26da:	84 87       	std	Z+12, r24	; 0x0c
}
    26dc:	ff 91       	pop	r31
    26de:	ef 91       	pop	r30
    26e0:	9f 91       	pop	r25
    26e2:	8f 91       	pop	r24
    26e4:	0f 90       	pop	r0
    26e6:	0b be       	out	0x3b, r0	; 59
    26e8:	0f 90       	pop	r0
    26ea:	08 be       	out	0x38, r0	; 56
    26ec:	0f 90       	pop	r0
    26ee:	0f be       	out	0x3f, r0	; 63
    26f0:	0f 90       	pop	r0
    26f2:	1f 90       	pop	r1
    26f4:	18 95       	reti

000026f6 <__vector_101>:

///Interrupt Service Routine (ISR) for quadrature encoder Channel B (PORTK Int1; PK7)
ISR(PORTK_INT1_vect){
    26f6:	1f 92       	push	r1
    26f8:	0f 92       	push	r0
    26fa:	0f b6       	in	r0, 0x3f	; 63
    26fc:	0f 92       	push	r0
    26fe:	08 b6       	in	r0, 0x38	; 56
    2700:	0f 92       	push	r0
    2702:	0b b6       	in	r0, 0x3b	; 59
    2704:	0f 92       	push	r0
    2706:	11 24       	eor	r1, r1
    2708:	8f 93       	push	r24
    270a:	9f 93       	push	r25
    270c:	ef 93       	push	r30
    270e:	ff 93       	push	r31
	if (PORTK.PIN7CTRL == FALLING_EDGE){
    2710:	e0 e2       	ldi	r30, 0x20	; 32
    2712:	f7 e0       	ldi	r31, 0x07	; 7
    2714:	87 89       	ldd	r24, Z+23	; 0x17
    2716:	8a 39       	cpi	r24, 0x9A	; 154
    2718:	01 f5       	brne	.+64     	; 0x275a <__vector_101+0x64>
		//Detected FALLING edge on channel A
		if ((PORTK.IN & _BV(6)) == 0){
    271a:	80 85       	ldd	r24, Z+8	; 0x08
    271c:	86 fd       	sbrc	r24, 6
    271e:	0d c0       	rjmp	.+26     	; 0x273a <__vector_101+0x44>
			//if channel B is falling and channel A is low, direction = UP
			quad_count++;
    2720:	80 91 a2 26 	lds	r24, 0x26A2
    2724:	90 91 a3 26 	lds	r25, 0x26A3
    2728:	01 96       	adiw	r24, 0x01	; 1
    272a:	80 93 a2 26 	sts	0x26A2, r24
    272e:	90 93 a3 26 	sts	0x26A3, r25
			quad_state = QUAD_UP;
    2732:	8d e2       	ldi	r24, 0x2D	; 45
    2734:	80 93 9f 26 	sts	0x269F, r24
    2738:	0c c0       	rjmp	.+24     	; 0x2752 <__vector_101+0x5c>
		}
		else{
			//if channel B is falling and channel A is high, direction = DOWN
			quad_count--;
    273a:	80 91 a2 26 	lds	r24, 0x26A2
    273e:	90 91 a3 26 	lds	r25, 0x26A3
    2742:	01 97       	sbiw	r24, 0x01	; 1
    2744:	80 93 a2 26 	sts	0x26A2, r24
    2748:	90 93 a3 26 	sts	0x26A3, r25
			quad_state = QUAD_DOWN;
    274c:	8e e2       	ldi	r24, 0x2E	; 46
    274e:	80 93 9f 26 	sts	0x269F, r24
		}
		//Now, look for rising edge
		PORTK.PIN7CTRL = RISING_EDGE;
    2752:	89 e9       	ldi	r24, 0x99	; 153
    2754:	e0 e2       	ldi	r30, 0x20	; 32
    2756:	f7 e0       	ldi	r31, 0x07	; 7
    2758:	87 8b       	std	Z+23, r24	; 0x17
	}
	if (PORTK.PIN7CTRL == RISING_EDGE){
    275a:	e0 e2       	ldi	r30, 0x20	; 32
    275c:	f7 e0       	ldi	r31, 0x07	; 7
    275e:	87 89       	ldd	r24, Z+23	; 0x17
    2760:	89 39       	cpi	r24, 0x99	; 153
    2762:	01 f5       	brne	.+64     	; 0x27a4 <__vector_101+0xae>
		//Detected RISING edge on channel B
		if ((PORTK.IN & _BV(6)) == 0){
    2764:	80 85       	ldd	r24, Z+8	; 0x08
    2766:	86 fd       	sbrc	r24, 6
    2768:	0d c0       	rjmp	.+26     	; 0x2784 <__vector_101+0x8e>
			//if channel B is rising and channel A is low, direction = DOWN
			quad_count--;
    276a:	80 91 a2 26 	lds	r24, 0x26A2
    276e:	90 91 a3 26 	lds	r25, 0x26A3
    2772:	01 97       	sbiw	r24, 0x01	; 1
    2774:	80 93 a2 26 	sts	0x26A2, r24
    2778:	90 93 a3 26 	sts	0x26A3, r25
			quad_state = QUAD_DOWN;
    277c:	8e e2       	ldi	r24, 0x2E	; 46
    277e:	80 93 9f 26 	sts	0x269F, r24
    2782:	0c c0       	rjmp	.+24     	; 0x279c <__vector_101+0xa6>
		}
		else{
			//if channel B is rising and channel A is high, direction = UP
			quad_count++;
    2784:	80 91 a2 26 	lds	r24, 0x26A2
    2788:	90 91 a3 26 	lds	r25, 0x26A3
    278c:	01 96       	adiw	r24, 0x01	; 1
    278e:	80 93 a2 26 	sts	0x26A2, r24
    2792:	90 93 a3 26 	sts	0x26A3, r25
			quad_state = QUAD_UP;
    2796:	8d e2       	ldi	r24, 0x2D	; 45
    2798:	80 93 9f 26 	sts	0x269F, r24
		}
		//Now, look for falling edge
		PORTK.PIN7CTRL = FALLING_EDGE;
    279c:	8a e9       	ldi	r24, 0x9A	; 154
    279e:	e0 e2       	ldi	r30, 0x20	; 32
    27a0:	f7 e0       	ldi	r31, 0x07	; 7
    27a2:	87 8b       	std	Z+23, r24	; 0x17
	}
	PORTK.INTFLAGS = B8(00000010); //clear interrupt flag just in case
    27a4:	82 e0       	ldi	r24, 0x02	; 2
    27a6:	e0 e2       	ldi	r30, 0x20	; 32
    27a8:	f7 e0       	ldi	r31, 0x07	; 7
    27aa:	84 87       	std	Z+12, r24	; 0x0c
}
    27ac:	ff 91       	pop	r31
    27ae:	ef 91       	pop	r30
    27b0:	9f 91       	pop	r25
    27b2:	8f 91       	pop	r24
    27b4:	0f 90       	pop	r0
    27b6:	0b be       	out	0x3b, r0	; 59
    27b8:	0f 90       	pop	r0
    27ba:	08 be       	out	0x38, r0	; 56
    27bc:	0f 90       	pop	r0
    27be:	0f be       	out	0x3f, r0	; 63
    27c0:	0f 90       	pop	r0
    27c2:	1f 90       	pop	r1
    27c4:	18 95       	reti

000027c6 <service_quadrature>:
//## SERVICE ROUTINE
//#############################################################

void service_quadrature(){	
	
}
    27c6:	08 95       	ret

000027c8 <init_thermal>:
 */ 


void init_thermal(){
	//FANS are located at PF4 (Fan0) and PF5 (Fan1)
	PORTF.DIRSET = 0x30; //pins 4 and 5 to output
    27c8:	e0 ea       	ldi	r30, 0xA0	; 160
    27ca:	f6 e0       	ldi	r31, 0x06	; 6
    27cc:	80 e3       	ldi	r24, 0x30	; 48
    27ce:	81 83       	std	Z+1, r24	; 0x01
	PORTF.OUTSET &= B8(11001111); //pins 4 and 5 to low (off)
    27d0:	85 81       	ldd	r24, Z+5	; 0x05
    27d2:	8f 7c       	andi	r24, 0xCF	; 207
    27d4:	85 83       	std	Z+5, r24	; 0x05
		
	TCF1.CTRLA = 0x07; //enable; div1024
    27d6:	e0 e4       	ldi	r30, 0x40	; 64
    27d8:	fb e0       	ldi	r31, 0x0B	; 11
    27da:	87 e0       	ldi	r24, 0x07	; 7
    27dc:	80 83       	st	Z, r24
	TCF1.CTRLB = 0x13; //Output Channel A enable; Single-slope PWM
    27de:	83 e1       	ldi	r24, 0x13	; 19
    27e0:	81 83       	std	Z+1, r24	; 0x01
	TCF1.PER = 0x00FF; //Set the top of the counter to basically force 8 bit operation; we do this for speed when calling dimming functions in the future
    27e2:	8f ef       	ldi	r24, 0xFF	; 255
    27e4:	90 e0       	ldi	r25, 0x00	; 0
    27e6:	86 a3       	lds	r24, 0x56
    27e8:	97 a3       	lds	r25, 0x57
	TCF1.CCA = 0x0010; //Default to off-level brightness
    27ea:	80 e1       	ldi	r24, 0x10	; 16
    27ec:	90 e0       	ldi	r25, 0x00	; 0
    27ee:	80 a7       	lds	r24, 0x70
    27f0:	91 a7       	lds	r25, 0x71
}
    27f2:	08 95       	ret

000027f4 <init_uart>:
//= INITIALIZATION ROUTINES
//==================================

//Select which uart to initialize from the list of defined constants in the io.h
//Pass in Baud rate from a list of defined constants
void init_uart(USART_t* which, uint8_t baud_rate){
    27f4:	fc 01       	movw	r30, r24
	//Config the PORT
		if (&(*which) == &USARTC0){
    27f6:	88 e0       	ldi	r24, 0x08	; 8
    27f8:	e0 3a       	cpi	r30, 0xA0	; 160
    27fa:	f8 07       	cpc	r31, r24
    27fc:	51 f4       	brne	.+20     	; 0x2812 <init_uart+0x1e>
			PORTC.DIRSET = B8(00001000); //TX pin as output
    27fe:	a0 e4       	ldi	r26, 0x40	; 64
    2800:	b6 e0       	ldi	r27, 0x06	; 6
    2802:	88 e0       	ldi	r24, 0x08	; 8
    2804:	11 96       	adiw	r26, 0x01	; 1
    2806:	8c 93       	st	X, r24
    2808:	11 97       	sbiw	r26, 0x01	; 1
			PORTC.OUTSET = B8(00001000); //TX initial output value is high
    280a:	15 96       	adiw	r26, 0x05	; 5
    280c:	8c 93       	st	X, r24
    280e:	15 97       	sbiw	r26, 0x05	; 5
    2810:	61 c0       	rjmp	.+194    	; 0x28d4 <init_uart+0xe0>
		}
		else if (&(*which) == &USARTC1) {
    2812:	88 e0       	ldi	r24, 0x08	; 8
    2814:	e0 3b       	cpi	r30, 0xB0	; 176
    2816:	f8 07       	cpc	r31, r24
    2818:	51 f4       	brne	.+20     	; 0x282e <init_uart+0x3a>
			PORTC.DIRSET = B8(10000000); //TX pin as output
    281a:	a0 e4       	ldi	r26, 0x40	; 64
    281c:	b6 e0       	ldi	r27, 0x06	; 6
    281e:	80 e8       	ldi	r24, 0x80	; 128
    2820:	11 96       	adiw	r26, 0x01	; 1
    2822:	8c 93       	st	X, r24
    2824:	11 97       	sbiw	r26, 0x01	; 1
			PORTC.OUTSET = B8(10000000); //TX initial output value is high
    2826:	15 96       	adiw	r26, 0x05	; 5
    2828:	8c 93       	st	X, r24
    282a:	15 97       	sbiw	r26, 0x05	; 5
    282c:	53 c0       	rjmp	.+166    	; 0x28d4 <init_uart+0xe0>
		}
		else if (&(*which) == &USARTD0) {
    282e:	89 e0       	ldi	r24, 0x09	; 9
    2830:	e0 3a       	cpi	r30, 0xA0	; 160
    2832:	f8 07       	cpc	r31, r24
    2834:	51 f4       	brne	.+20     	; 0x284a <init_uart+0x56>
			PORTD.DIRSET = B8(00001000); //TX pin as output
    2836:	a0 e6       	ldi	r26, 0x60	; 96
    2838:	b6 e0       	ldi	r27, 0x06	; 6
    283a:	88 e0       	ldi	r24, 0x08	; 8
    283c:	11 96       	adiw	r26, 0x01	; 1
    283e:	8c 93       	st	X, r24
    2840:	11 97       	sbiw	r26, 0x01	; 1
			PORTD.OUTSET = B8(00001000); //TX initial output value is high
    2842:	15 96       	adiw	r26, 0x05	; 5
    2844:	8c 93       	st	X, r24
    2846:	15 97       	sbiw	r26, 0x05	; 5
    2848:	45 c0       	rjmp	.+138    	; 0x28d4 <init_uart+0xe0>
		}	
		else if (&(*which) == &USARTD1) {
    284a:	89 e0       	ldi	r24, 0x09	; 9
    284c:	e0 3b       	cpi	r30, 0xB0	; 176
    284e:	f8 07       	cpc	r31, r24
    2850:	51 f4       	brne	.+20     	; 0x2866 <init_uart+0x72>
			PORTD.DIRSET = B8(10000000); //TX pin as output
    2852:	a0 e6       	ldi	r26, 0x60	; 96
    2854:	b6 e0       	ldi	r27, 0x06	; 6
    2856:	80 e8       	ldi	r24, 0x80	; 128
    2858:	11 96       	adiw	r26, 0x01	; 1
    285a:	8c 93       	st	X, r24
    285c:	11 97       	sbiw	r26, 0x01	; 1
			PORTD.OUTSET = B8(10000000); //TX initial output value is high
    285e:	15 96       	adiw	r26, 0x05	; 5
    2860:	8c 93       	st	X, r24
    2862:	15 97       	sbiw	r26, 0x05	; 5
    2864:	37 c0       	rjmp	.+110    	; 0x28d4 <init_uart+0xe0>
		}
		else if (&(*which) == &USARTE0) {
    2866:	8a e0       	ldi	r24, 0x0A	; 10
    2868:	e0 3a       	cpi	r30, 0xA0	; 160
    286a:	f8 07       	cpc	r31, r24
    286c:	51 f4       	brne	.+20     	; 0x2882 <init_uart+0x8e>
			PORTE.DIRSET = B8(00001000); //TX pin as output
    286e:	a0 e8       	ldi	r26, 0x80	; 128
    2870:	b6 e0       	ldi	r27, 0x06	; 6
    2872:	88 e0       	ldi	r24, 0x08	; 8
    2874:	11 96       	adiw	r26, 0x01	; 1
    2876:	8c 93       	st	X, r24
    2878:	11 97       	sbiw	r26, 0x01	; 1
			PORTE.OUTSET = B8(00001000); //TX initial output value is high
    287a:	15 96       	adiw	r26, 0x05	; 5
    287c:	8c 93       	st	X, r24
    287e:	15 97       	sbiw	r26, 0x05	; 5
    2880:	29 c0       	rjmp	.+82     	; 0x28d4 <init_uart+0xe0>
		}
		else if (&(*which) == &USARTE1) {
    2882:	8a e0       	ldi	r24, 0x0A	; 10
    2884:	e0 3b       	cpi	r30, 0xB0	; 176
    2886:	f8 07       	cpc	r31, r24
    2888:	51 f4       	brne	.+20     	; 0x289e <init_uart+0xaa>
			PORTE.DIRSET = B8(10000000); //TX pin as output
    288a:	a0 e8       	ldi	r26, 0x80	; 128
    288c:	b6 e0       	ldi	r27, 0x06	; 6
    288e:	80 e8       	ldi	r24, 0x80	; 128
    2890:	11 96       	adiw	r26, 0x01	; 1
    2892:	8c 93       	st	X, r24
    2894:	11 97       	sbiw	r26, 0x01	; 1
			PORTE.OUTSET = B8(10000000); //TX initial output value is high
    2896:	15 96       	adiw	r26, 0x05	; 5
    2898:	8c 93       	st	X, r24
    289a:	15 97       	sbiw	r26, 0x05	; 5
    289c:	1b c0       	rjmp	.+54     	; 0x28d4 <init_uart+0xe0>
		}
		else if (&(*which) == &USARTF0) {
    289e:	8b e0       	ldi	r24, 0x0B	; 11
    28a0:	e0 3a       	cpi	r30, 0xA0	; 160
    28a2:	f8 07       	cpc	r31, r24
    28a4:	51 f4       	brne	.+20     	; 0x28ba <init_uart+0xc6>
			PORTF.DIRSET = B8(00001000); //TX pin as output
    28a6:	a0 ea       	ldi	r26, 0xA0	; 160
    28a8:	b6 e0       	ldi	r27, 0x06	; 6
    28aa:	88 e0       	ldi	r24, 0x08	; 8
    28ac:	11 96       	adiw	r26, 0x01	; 1
    28ae:	8c 93       	st	X, r24
    28b0:	11 97       	sbiw	r26, 0x01	; 1
			PORTF.OUTSET = B8(00001000); //TX initial output value is high
    28b2:	15 96       	adiw	r26, 0x05	; 5
    28b4:	8c 93       	st	X, r24
    28b6:	15 97       	sbiw	r26, 0x05	; 5
    28b8:	0d c0       	rjmp	.+26     	; 0x28d4 <init_uart+0xe0>
		}
		else if (&(*which) == &USARTF1) {
    28ba:	8b e0       	ldi	r24, 0x0B	; 11
    28bc:	e0 3b       	cpi	r30, 0xB0	; 176
    28be:	f8 07       	cpc	r31, r24
    28c0:	49 f4       	brne	.+18     	; 0x28d4 <init_uart+0xe0>
			PORTF.DIRSET = B8(10000000); //TX pin as output
    28c2:	a0 ea       	ldi	r26, 0xA0	; 160
    28c4:	b6 e0       	ldi	r27, 0x06	; 6
    28c6:	80 e8       	ldi	r24, 0x80	; 128
    28c8:	11 96       	adiw	r26, 0x01	; 1
    28ca:	8c 93       	st	X, r24
    28cc:	11 97       	sbiw	r26, 0x01	; 1
			PORTF.OUTSET = B8(10000000); //TX initial output value is high
    28ce:	15 96       	adiw	r26, 0x05	; 5
    28d0:	8c 93       	st	X, r24
    28d2:	15 97       	sbiw	r26, 0x05	; 5
		}
		else {
		}
	//Set baud rate
		switch(baud_rate){
    28d4:	61 30       	cpi	r22, 0x01	; 1
    28d6:	39 f0       	breq	.+14     	; 0x28e6 <init_uart+0xf2>
    28d8:	62 30       	cpi	r22, 0x02	; 2
    28da:	51 f4       	brne	.+20     	; 0x28f0 <init_uart+0xfc>
		case BAUD_38400:
			//BSEL = 0xCC5; BSCALE = -6; error = 0.01%
			which->BAUDCTRLB = 0xAC;
    28dc:	8c ea       	ldi	r24, 0xAC	; 172
    28de:	87 83       	std	Z+7, r24	; 0x07
			which->BAUDCTRLA = 0xC5;
    28e0:	85 ec       	ldi	r24, 0xC5	; 197
    28e2:	86 83       	std	Z+6, r24	; 0x06
			break;
    28e4:	09 c0       	rjmp	.+18     	; 0x28f8 <init_uart+0x104>
		case BAUD_57600:
			//BSEL = 0x86E; BSCALE = -6; error = 0.01%
			which->BAUDCTRLB = 0xA8;
    28e6:	88 ea       	ldi	r24, 0xA8	; 168
    28e8:	87 83       	std	Z+7, r24	; 0x07
			which->BAUDCTRLA = 0x6E;
    28ea:	8e e6       	ldi	r24, 0x6E	; 110
    28ec:	86 83       	std	Z+6, r24	; 0x06
			break;
    28ee:	04 c0       	rjmp	.+8      	; 0x28f8 <init_uart+0x104>
		case BAUD_115200:
		default:
			//BSEL = 0x417; BSCALE = -6; error = 0.01%
			//BSEL = 0x453; BSCALE = -6; fbaud = 115.212k @ 32MHz
			which->BAUDCTRLB = 0xA4; //write to BAUDCTRLB first, updated on write to A
    28f0:	84 ea       	ldi	r24, 0xA4	; 164
    28f2:	87 83       	std	Z+7, r24	; 0x07
			which->BAUDCTRLA = 0x32; //0x17; = 8.44uS = 118kHz		
    28f4:	82 e3       	ldi	r24, 0x32	; 50
    28f6:	86 83       	std	Z+6, r24	; 0x06
		}
	//Config USART Module
		which->CTRLA = 0x00; //Current driver does not enable any interrupts
    28f8:	13 82       	std	Z+3, r1	; 0x03
		which->CTRLB = B8(00011000); //Enable Rx and TX; Do not use double speed mode
    28fa:	88 e1       	ldi	r24, 0x18	; 24
    28fc:	84 83       	std	Z+4, r24	; 0x04
		which->CTRLC = B8(00000011); //uart Mode; Use N-8-1 frame configuration
    28fe:	83 e0       	ldi	r24, 0x03	; 3
    2900:	85 83       	std	Z+5, r24	; 0x05
	//
}
    2902:	08 95       	ret

00002904 <uart_send_byte>:
//= DISPLAY (BLOCKING) FUNCTIONS
//==================================


//Sends one byte; Spin-lock until UART is ready to transmit (BE CAREFUL!)
void uart_send_byte( USART_t* which, unsigned char dataB){
    2904:	fc 01       	movw	r30, r24
	while((which->STATUS & USART_DREIF_bm) == 0x00); //wait until the transmit buffer is ready to receive new data (DREIF flag is 1 when empty)
    2906:	81 81       	ldd	r24, Z+1	; 0x01
    2908:	85 ff       	sbrs	r24, 5
    290a:	fd cf       	rjmp	.-6      	; 0x2906 <uart_send_byte+0x2>
	which->DATA = dataB;	
    290c:	60 83       	st	Z, r22
}
    290e:	08 95       	ret

00002910 <uart_send_string>:

//Sends an entire string (blocking)
void uart_send_string(USART_t* which, char* theString){
    2910:	cf 92       	push	r12
    2912:	df 92       	push	r13
    2914:	ef 92       	push	r14
    2916:	ff 92       	push	r15
    2918:	0f 93       	push	r16
    291a:	1f 93       	push	r17
    291c:	cf 93       	push	r28
    291e:	df 93       	push	r29
    2920:	6c 01       	movw	r12, r24
	uint16_t length = (uint16_t)strlen(theString);
    2922:	e6 2f       	mov	r30, r22
    2924:	f7 2f       	mov	r31, r23
    2926:	ef 01       	movw	r28, r30
    2928:	09 90       	ld	r0, Y+
    292a:	00 20       	and	r0, r0
    292c:	e9 f7       	brne	.-6      	; 0x2928 <uart_send_string+0x18>
    292e:	21 97       	sbiw	r28, 0x01	; 1
    2930:	ce 1b       	sub	r28, r30
    2932:	df 0b       	sbc	r29, r31
	for (uint16_t i=0; i<length; i++){uart_send_byte(which, theString[i]);}	
    2934:	79 f0       	breq	.+30     	; 0x2954 <uart_send_string+0x44>
    2936:	e6 2e       	mov	r14, r22
    2938:	f7 2e       	mov	r15, r23
    293a:	00 e0       	ldi	r16, 0x00	; 0
    293c:	10 e0       	ldi	r17, 0x00	; 0
    293e:	f7 01       	movw	r30, r14
    2940:	61 91       	ld	r22, Z+
    2942:	7f 01       	movw	r14, r30
    2944:	c6 01       	movw	r24, r12
    2946:	0e 94 82 14 	call	0x2904	; 0x2904 <uart_send_byte>
    294a:	0f 5f       	subi	r16, 0xFF	; 255
    294c:	1f 4f       	sbci	r17, 0xFF	; 255
    294e:	0c 17       	cp	r16, r28
    2950:	1d 07       	cpc	r17, r29
    2952:	a9 f7       	brne	.-22     	; 0x293e <uart_send_string+0x2e>
}
    2954:	df 91       	pop	r29
    2956:	cf 91       	pop	r28
    2958:	1f 91       	pop	r17
    295a:	0f 91       	pop	r16
    295c:	ff 90       	pop	r15
    295e:	ef 90       	pop	r14
    2960:	df 90       	pop	r13
    2962:	cf 90       	pop	r12
    2964:	08 95       	ret

00002966 <uart_send_BIN4>:
	
//Most Significant Bit first
void uart_send_BIN4(USART_t* which, uint8_t lowb){
    2966:	cf 93       	push	r28
    2968:	df 93       	push	r29
    296a:	ec 01       	movw	r28, r24
	switch(lowb){
    296c:	67 30       	cpi	r22, 0x07	; 7
    296e:	09 f4       	brne	.+2      	; 0x2972 <uart_send_BIN4+0xc>
    2970:	9d c0       	rjmp	.+314    	; 0x2aac <uart_send_BIN4+0x146>
    2972:	68 30       	cpi	r22, 0x08	; 8
    2974:	90 f4       	brcc	.+36     	; 0x299a <uart_send_BIN4+0x34>
    2976:	63 30       	cpi	r22, 0x03	; 3
    2978:	09 f4       	brne	.+2      	; 0x297c <uart_send_BIN4+0x16>
    297a:	58 c0       	rjmp	.+176    	; 0x2a2c <uart_send_BIN4+0xc6>
    297c:	64 30       	cpi	r22, 0x04	; 4
    297e:	30 f4       	brcc	.+12     	; 0x298c <uart_send_BIN4+0x26>
    2980:	61 30       	cpi	r22, 0x01	; 1
    2982:	a1 f1       	breq	.+104    	; 0x29ec <uart_send_BIN4+0x86>
    2984:	62 30       	cpi	r22, 0x02	; 2
    2986:	08 f0       	brcs	.+2      	; 0x298a <uart_send_BIN4+0x24>
    2988:	41 c0       	rjmp	.+130    	; 0x2a0c <uart_send_BIN4+0xa6>
    298a:	20 c0       	rjmp	.+64     	; 0x29cc <uart_send_BIN4+0x66>
    298c:	65 30       	cpi	r22, 0x05	; 5
    298e:	09 f4       	brne	.+2      	; 0x2992 <uart_send_BIN4+0x2c>
    2990:	6d c0       	rjmp	.+218    	; 0x2a6c <uart_send_BIN4+0x106>
    2992:	66 30       	cpi	r22, 0x06	; 6
    2994:	08 f0       	brcs	.+2      	; 0x2998 <uart_send_BIN4+0x32>
    2996:	7a c0       	rjmp	.+244    	; 0x2a8c <uart_send_BIN4+0x126>
    2998:	59 c0       	rjmp	.+178    	; 0x2a4c <uart_send_BIN4+0xe6>
    299a:	6b 30       	cpi	r22, 0x0B	; 11
    299c:	09 f4       	brne	.+2      	; 0x29a0 <uart_send_BIN4+0x3a>
    299e:	c6 c0       	rjmp	.+396    	; 0x2b2c <uart_send_BIN4+0x1c6>
    29a0:	6c 30       	cpi	r22, 0x0C	; 12
    29a2:	38 f4       	brcc	.+14     	; 0x29b2 <uart_send_BIN4+0x4c>
    29a4:	69 30       	cpi	r22, 0x09	; 9
    29a6:	09 f4       	brne	.+2      	; 0x29aa <uart_send_BIN4+0x44>
    29a8:	a1 c0       	rjmp	.+322    	; 0x2aec <uart_send_BIN4+0x186>
    29aa:	6a 30       	cpi	r22, 0x0A	; 10
    29ac:	08 f0       	brcs	.+2      	; 0x29b0 <uart_send_BIN4+0x4a>
    29ae:	ae c0       	rjmp	.+348    	; 0x2b0c <uart_send_BIN4+0x1a6>
    29b0:	8d c0       	rjmp	.+282    	; 0x2acc <uart_send_BIN4+0x166>
    29b2:	6d 30       	cpi	r22, 0x0D	; 13
    29b4:	09 f4       	brne	.+2      	; 0x29b8 <uart_send_BIN4+0x52>
    29b6:	da c0       	rjmp	.+436    	; 0x2b6c <uart_send_BIN4+0x206>
    29b8:	6d 30       	cpi	r22, 0x0D	; 13
    29ba:	08 f4       	brcc	.+2      	; 0x29be <uart_send_BIN4+0x58>
    29bc:	c7 c0       	rjmp	.+398    	; 0x2b4c <uart_send_BIN4+0x1e6>
    29be:	6e 30       	cpi	r22, 0x0E	; 14
    29c0:	09 f4       	brne	.+2      	; 0x29c4 <uart_send_BIN4+0x5e>
    29c2:	e4 c0       	rjmp	.+456    	; 0x2b8c <uart_send_BIN4+0x226>
    29c4:	6f 30       	cpi	r22, 0x0F	; 15
    29c6:	09 f0       	breq	.+2      	; 0x29ca <uart_send_BIN4+0x64>
    29c8:	00 c1       	rjmp	.+512    	; 0x2bca <uart_send_BIN4+0x264>
    29ca:	f0 c0       	rjmp	.+480    	; 0x2bac <uart_send_BIN4+0x246>
	case(0):
		uart_send_byte(which,'0');
    29cc:	60 e3       	ldi	r22, 0x30	; 48
    29ce:	0e 94 82 14 	call	0x2904	; 0x2904 <uart_send_byte>
		uart_send_byte(which,'0');
    29d2:	ce 01       	movw	r24, r28
    29d4:	60 e3       	ldi	r22, 0x30	; 48
    29d6:	0e 94 82 14 	call	0x2904	; 0x2904 <uart_send_byte>
		uart_send_byte(which,'0');
    29da:	ce 01       	movw	r24, r28
    29dc:	60 e3       	ldi	r22, 0x30	; 48
    29de:	0e 94 82 14 	call	0x2904	; 0x2904 <uart_send_byte>
		uart_send_byte(which,'0');
    29e2:	ce 01       	movw	r24, r28
    29e4:	60 e3       	ldi	r22, 0x30	; 48
    29e6:	0e 94 82 14 	call	0x2904	; 0x2904 <uart_send_byte>
		break;
    29ea:	ef c0       	rjmp	.+478    	; 0x2bca <uart_send_BIN4+0x264>
	case(1):
		uart_send_byte(which,'0');
    29ec:	60 e3       	ldi	r22, 0x30	; 48
    29ee:	0e 94 82 14 	call	0x2904	; 0x2904 <uart_send_byte>
		uart_send_byte(which,'0');
    29f2:	ce 01       	movw	r24, r28
    29f4:	60 e3       	ldi	r22, 0x30	; 48
    29f6:	0e 94 82 14 	call	0x2904	; 0x2904 <uart_send_byte>
		uart_send_byte(which,'0');
    29fa:	ce 01       	movw	r24, r28
    29fc:	60 e3       	ldi	r22, 0x30	; 48
    29fe:	0e 94 82 14 	call	0x2904	; 0x2904 <uart_send_byte>
		uart_send_byte(which,'1');
    2a02:	ce 01       	movw	r24, r28
    2a04:	61 e3       	ldi	r22, 0x31	; 49
    2a06:	0e 94 82 14 	call	0x2904	; 0x2904 <uart_send_byte>
		break;
    2a0a:	df c0       	rjmp	.+446    	; 0x2bca <uart_send_BIN4+0x264>
	case(2):
		uart_send_byte(which,'0');
    2a0c:	60 e3       	ldi	r22, 0x30	; 48
    2a0e:	0e 94 82 14 	call	0x2904	; 0x2904 <uart_send_byte>
		uart_send_byte(which,'0');
    2a12:	ce 01       	movw	r24, r28
    2a14:	60 e3       	ldi	r22, 0x30	; 48
    2a16:	0e 94 82 14 	call	0x2904	; 0x2904 <uart_send_byte>
		uart_send_byte(which,'1');
    2a1a:	ce 01       	movw	r24, r28
    2a1c:	61 e3       	ldi	r22, 0x31	; 49
    2a1e:	0e 94 82 14 	call	0x2904	; 0x2904 <uart_send_byte>
		uart_send_byte(which,'0');
    2a22:	ce 01       	movw	r24, r28
    2a24:	60 e3       	ldi	r22, 0x30	; 48
    2a26:	0e 94 82 14 	call	0x2904	; 0x2904 <uart_send_byte>
		break;
    2a2a:	cf c0       	rjmp	.+414    	; 0x2bca <uart_send_BIN4+0x264>
	case(3):
		uart_send_byte(which,'0');
    2a2c:	60 e3       	ldi	r22, 0x30	; 48
    2a2e:	0e 94 82 14 	call	0x2904	; 0x2904 <uart_send_byte>
		uart_send_byte(which,'0');
    2a32:	ce 01       	movw	r24, r28
    2a34:	60 e3       	ldi	r22, 0x30	; 48
    2a36:	0e 94 82 14 	call	0x2904	; 0x2904 <uart_send_byte>
		uart_send_byte(which,'1');
    2a3a:	ce 01       	movw	r24, r28
    2a3c:	61 e3       	ldi	r22, 0x31	; 49
    2a3e:	0e 94 82 14 	call	0x2904	; 0x2904 <uart_send_byte>
		uart_send_byte(which,'1');
    2a42:	ce 01       	movw	r24, r28
    2a44:	61 e3       	ldi	r22, 0x31	; 49
    2a46:	0e 94 82 14 	call	0x2904	; 0x2904 <uart_send_byte>
		break;
    2a4a:	bf c0       	rjmp	.+382    	; 0x2bca <uart_send_BIN4+0x264>
	case(4):
		uart_send_byte(which,'0');
    2a4c:	60 e3       	ldi	r22, 0x30	; 48
    2a4e:	0e 94 82 14 	call	0x2904	; 0x2904 <uart_send_byte>
		uart_send_byte(which,'1');
    2a52:	ce 01       	movw	r24, r28
    2a54:	61 e3       	ldi	r22, 0x31	; 49
    2a56:	0e 94 82 14 	call	0x2904	; 0x2904 <uart_send_byte>
		uart_send_byte(which,'0');
    2a5a:	ce 01       	movw	r24, r28
    2a5c:	60 e3       	ldi	r22, 0x30	; 48
    2a5e:	0e 94 82 14 	call	0x2904	; 0x2904 <uart_send_byte>
		uart_send_byte(which,'0');
    2a62:	ce 01       	movw	r24, r28
    2a64:	60 e3       	ldi	r22, 0x30	; 48
    2a66:	0e 94 82 14 	call	0x2904	; 0x2904 <uart_send_byte>
		break;
    2a6a:	af c0       	rjmp	.+350    	; 0x2bca <uart_send_BIN4+0x264>
	case(5):
		uart_send_byte(which,'0');
    2a6c:	60 e3       	ldi	r22, 0x30	; 48
    2a6e:	0e 94 82 14 	call	0x2904	; 0x2904 <uart_send_byte>
		uart_send_byte(which,'1');
    2a72:	ce 01       	movw	r24, r28
    2a74:	61 e3       	ldi	r22, 0x31	; 49
    2a76:	0e 94 82 14 	call	0x2904	; 0x2904 <uart_send_byte>
		uart_send_byte(which,'0');
    2a7a:	ce 01       	movw	r24, r28
    2a7c:	60 e3       	ldi	r22, 0x30	; 48
    2a7e:	0e 94 82 14 	call	0x2904	; 0x2904 <uart_send_byte>
		uart_send_byte(which,'1');
    2a82:	ce 01       	movw	r24, r28
    2a84:	61 e3       	ldi	r22, 0x31	; 49
    2a86:	0e 94 82 14 	call	0x2904	; 0x2904 <uart_send_byte>
		break;
    2a8a:	9f c0       	rjmp	.+318    	; 0x2bca <uart_send_BIN4+0x264>
	case(6):
		uart_send_byte(which,'0');
    2a8c:	60 e3       	ldi	r22, 0x30	; 48
    2a8e:	0e 94 82 14 	call	0x2904	; 0x2904 <uart_send_byte>
		uart_send_byte(which,'1');
    2a92:	ce 01       	movw	r24, r28
    2a94:	61 e3       	ldi	r22, 0x31	; 49
    2a96:	0e 94 82 14 	call	0x2904	; 0x2904 <uart_send_byte>
		uart_send_byte(which,'1');
    2a9a:	ce 01       	movw	r24, r28
    2a9c:	61 e3       	ldi	r22, 0x31	; 49
    2a9e:	0e 94 82 14 	call	0x2904	; 0x2904 <uart_send_byte>
		uart_send_byte(which,'0');
    2aa2:	ce 01       	movw	r24, r28
    2aa4:	60 e3       	ldi	r22, 0x30	; 48
    2aa6:	0e 94 82 14 	call	0x2904	; 0x2904 <uart_send_byte>
		break;
    2aaa:	8f c0       	rjmp	.+286    	; 0x2bca <uart_send_BIN4+0x264>
	case(7):
		uart_send_byte(which,'0');
    2aac:	60 e3       	ldi	r22, 0x30	; 48
    2aae:	0e 94 82 14 	call	0x2904	; 0x2904 <uart_send_byte>
		uart_send_byte(which,'1');
    2ab2:	ce 01       	movw	r24, r28
    2ab4:	61 e3       	ldi	r22, 0x31	; 49
    2ab6:	0e 94 82 14 	call	0x2904	; 0x2904 <uart_send_byte>
		uart_send_byte(which,'1');
    2aba:	ce 01       	movw	r24, r28
    2abc:	61 e3       	ldi	r22, 0x31	; 49
    2abe:	0e 94 82 14 	call	0x2904	; 0x2904 <uart_send_byte>
		uart_send_byte(which,'1');
    2ac2:	ce 01       	movw	r24, r28
    2ac4:	61 e3       	ldi	r22, 0x31	; 49
    2ac6:	0e 94 82 14 	call	0x2904	; 0x2904 <uart_send_byte>
		break;
    2aca:	7f c0       	rjmp	.+254    	; 0x2bca <uart_send_BIN4+0x264>
	case(8):
		uart_send_byte(which,'1');
    2acc:	61 e3       	ldi	r22, 0x31	; 49
    2ace:	0e 94 82 14 	call	0x2904	; 0x2904 <uart_send_byte>
		uart_send_byte(which,'0');
    2ad2:	ce 01       	movw	r24, r28
    2ad4:	60 e3       	ldi	r22, 0x30	; 48
    2ad6:	0e 94 82 14 	call	0x2904	; 0x2904 <uart_send_byte>
		uart_send_byte(which,'0');
    2ada:	ce 01       	movw	r24, r28
    2adc:	60 e3       	ldi	r22, 0x30	; 48
    2ade:	0e 94 82 14 	call	0x2904	; 0x2904 <uart_send_byte>
		uart_send_byte(which,'0');
    2ae2:	ce 01       	movw	r24, r28
    2ae4:	60 e3       	ldi	r22, 0x30	; 48
    2ae6:	0e 94 82 14 	call	0x2904	; 0x2904 <uart_send_byte>
		break;
    2aea:	6f c0       	rjmp	.+222    	; 0x2bca <uart_send_BIN4+0x264>
	case(9):
		uart_send_byte(which,'1');
    2aec:	61 e3       	ldi	r22, 0x31	; 49
    2aee:	0e 94 82 14 	call	0x2904	; 0x2904 <uart_send_byte>
		uart_send_byte(which,'0');
    2af2:	ce 01       	movw	r24, r28
    2af4:	60 e3       	ldi	r22, 0x30	; 48
    2af6:	0e 94 82 14 	call	0x2904	; 0x2904 <uart_send_byte>
		uart_send_byte(which,'0');
    2afa:	ce 01       	movw	r24, r28
    2afc:	60 e3       	ldi	r22, 0x30	; 48
    2afe:	0e 94 82 14 	call	0x2904	; 0x2904 <uart_send_byte>
		uart_send_byte(which,'1');
    2b02:	ce 01       	movw	r24, r28
    2b04:	61 e3       	ldi	r22, 0x31	; 49
    2b06:	0e 94 82 14 	call	0x2904	; 0x2904 <uart_send_byte>
		break;
    2b0a:	5f c0       	rjmp	.+190    	; 0x2bca <uart_send_BIN4+0x264>
	case(10):
		uart_send_byte(which,'1');
    2b0c:	61 e3       	ldi	r22, 0x31	; 49
    2b0e:	0e 94 82 14 	call	0x2904	; 0x2904 <uart_send_byte>
		uart_send_byte(which,'0');
    2b12:	ce 01       	movw	r24, r28
    2b14:	60 e3       	ldi	r22, 0x30	; 48
    2b16:	0e 94 82 14 	call	0x2904	; 0x2904 <uart_send_byte>
		uart_send_byte(which,'1');
    2b1a:	ce 01       	movw	r24, r28
    2b1c:	61 e3       	ldi	r22, 0x31	; 49
    2b1e:	0e 94 82 14 	call	0x2904	; 0x2904 <uart_send_byte>
		uart_send_byte(which,'0');
    2b22:	ce 01       	movw	r24, r28
    2b24:	60 e3       	ldi	r22, 0x30	; 48
    2b26:	0e 94 82 14 	call	0x2904	; 0x2904 <uart_send_byte>
		break;
    2b2a:	4f c0       	rjmp	.+158    	; 0x2bca <uart_send_BIN4+0x264>
	case(11):
		uart_send_byte(which,'1');
    2b2c:	61 e3       	ldi	r22, 0x31	; 49
    2b2e:	0e 94 82 14 	call	0x2904	; 0x2904 <uart_send_byte>
		uart_send_byte(which,'0');
    2b32:	ce 01       	movw	r24, r28
    2b34:	60 e3       	ldi	r22, 0x30	; 48
    2b36:	0e 94 82 14 	call	0x2904	; 0x2904 <uart_send_byte>
		uart_send_byte(which,'1');
    2b3a:	ce 01       	movw	r24, r28
    2b3c:	61 e3       	ldi	r22, 0x31	; 49
    2b3e:	0e 94 82 14 	call	0x2904	; 0x2904 <uart_send_byte>
		uart_send_byte(which,'1');
    2b42:	ce 01       	movw	r24, r28
    2b44:	61 e3       	ldi	r22, 0x31	; 49
    2b46:	0e 94 82 14 	call	0x2904	; 0x2904 <uart_send_byte>
		break;
    2b4a:	3f c0       	rjmp	.+126    	; 0x2bca <uart_send_BIN4+0x264>
	case(12):
		uart_send_byte(which,'1');
    2b4c:	61 e3       	ldi	r22, 0x31	; 49
    2b4e:	0e 94 82 14 	call	0x2904	; 0x2904 <uart_send_byte>
		uart_send_byte(which,'1');
    2b52:	ce 01       	movw	r24, r28
    2b54:	61 e3       	ldi	r22, 0x31	; 49
    2b56:	0e 94 82 14 	call	0x2904	; 0x2904 <uart_send_byte>
		uart_send_byte(which,'0');
    2b5a:	ce 01       	movw	r24, r28
    2b5c:	60 e3       	ldi	r22, 0x30	; 48
    2b5e:	0e 94 82 14 	call	0x2904	; 0x2904 <uart_send_byte>
		uart_send_byte(which,'0');
    2b62:	ce 01       	movw	r24, r28
    2b64:	60 e3       	ldi	r22, 0x30	; 48
    2b66:	0e 94 82 14 	call	0x2904	; 0x2904 <uart_send_byte>
		break;
    2b6a:	2f c0       	rjmp	.+94     	; 0x2bca <uart_send_BIN4+0x264>
	case(13):
		uart_send_byte(which,'1');
    2b6c:	61 e3       	ldi	r22, 0x31	; 49
    2b6e:	0e 94 82 14 	call	0x2904	; 0x2904 <uart_send_byte>
		uart_send_byte(which,'1');
    2b72:	ce 01       	movw	r24, r28
    2b74:	61 e3       	ldi	r22, 0x31	; 49
    2b76:	0e 94 82 14 	call	0x2904	; 0x2904 <uart_send_byte>
		uart_send_byte(which,'0');
    2b7a:	ce 01       	movw	r24, r28
    2b7c:	60 e3       	ldi	r22, 0x30	; 48
    2b7e:	0e 94 82 14 	call	0x2904	; 0x2904 <uart_send_byte>
		uart_send_byte(which,'1');
    2b82:	ce 01       	movw	r24, r28
    2b84:	61 e3       	ldi	r22, 0x31	; 49
    2b86:	0e 94 82 14 	call	0x2904	; 0x2904 <uart_send_byte>
		break;
    2b8a:	1f c0       	rjmp	.+62     	; 0x2bca <uart_send_BIN4+0x264>
	case(14):
		uart_send_byte(which,'1');
    2b8c:	61 e3       	ldi	r22, 0x31	; 49
    2b8e:	0e 94 82 14 	call	0x2904	; 0x2904 <uart_send_byte>
		uart_send_byte(which,'1');
    2b92:	ce 01       	movw	r24, r28
    2b94:	61 e3       	ldi	r22, 0x31	; 49
    2b96:	0e 94 82 14 	call	0x2904	; 0x2904 <uart_send_byte>
		uart_send_byte(which,'1');
    2b9a:	ce 01       	movw	r24, r28
    2b9c:	61 e3       	ldi	r22, 0x31	; 49
    2b9e:	0e 94 82 14 	call	0x2904	; 0x2904 <uart_send_byte>
		uart_send_byte(which,'0');
    2ba2:	ce 01       	movw	r24, r28
    2ba4:	60 e3       	ldi	r22, 0x30	; 48
    2ba6:	0e 94 82 14 	call	0x2904	; 0x2904 <uart_send_byte>
		break;
    2baa:	0f c0       	rjmp	.+30     	; 0x2bca <uart_send_BIN4+0x264>
	case(15):
		uart_send_byte(which,'1');
    2bac:	61 e3       	ldi	r22, 0x31	; 49
    2bae:	0e 94 82 14 	call	0x2904	; 0x2904 <uart_send_byte>
		uart_send_byte(which,'1');
    2bb2:	ce 01       	movw	r24, r28
    2bb4:	61 e3       	ldi	r22, 0x31	; 49
    2bb6:	0e 94 82 14 	call	0x2904	; 0x2904 <uart_send_byte>
		uart_send_byte(which,'1');
    2bba:	ce 01       	movw	r24, r28
    2bbc:	61 e3       	ldi	r22, 0x31	; 49
    2bbe:	0e 94 82 14 	call	0x2904	; 0x2904 <uart_send_byte>
		uart_send_byte(which,'1');
    2bc2:	ce 01       	movw	r24, r28
    2bc4:	61 e3       	ldi	r22, 0x31	; 49
    2bc6:	0e 94 82 14 	call	0x2904	; 0x2904 <uart_send_byte>
		break;
	}	
}
    2bca:	df 91       	pop	r29
    2bcc:	cf 91       	pop	r28
    2bce:	08 95       	ret

00002bd0 <uart_send_BIN8>:

//Sends out tosend as ASCII text in 'b01101010' format
void uart_send_BIN8(USART_t* which, uint8_t lowb){
    2bd0:	1f 93       	push	r17
    2bd2:	cf 93       	push	r28
    2bd4:	df 93       	push	r29
    2bd6:	ec 01       	movw	r28, r24
    2bd8:	16 2f       	mov	r17, r22
	uart_send_byte(which,'b');
    2bda:	62 e6       	ldi	r22, 0x62	; 98
    2bdc:	0e 94 82 14 	call	0x2904	; 0x2904 <uart_send_byte>
	uart_send_BIN4(which, lowb>>4);
    2be0:	61 2f       	mov	r22, r17
    2be2:	62 95       	swap	r22
    2be4:	6f 70       	andi	r22, 0x0F	; 15
    2be6:	ce 01       	movw	r24, r28
    2be8:	0e 94 b3 14 	call	0x2966	; 0x2966 <uart_send_BIN4>
	uart_send_BIN4(which, lowb & 0x0F);
    2bec:	61 2f       	mov	r22, r17
    2bee:	6f 70       	andi	r22, 0x0F	; 15
    2bf0:	ce 01       	movw	r24, r28
    2bf2:	0e 94 b3 14 	call	0x2966	; 0x2966 <uart_send_BIN4>
}
    2bf6:	df 91       	pop	r29
    2bf8:	cf 91       	pop	r28
    2bfa:	1f 91       	pop	r17
    2bfc:	08 95       	ret

00002bfe <uart_send_HEX4>:
	
void uart_send_HEX4(USART_t* which, uint8_t lowb){
	switch(lowb){
    2bfe:	67 30       	cpi	r22, 0x07	; 7
    2c00:	09 f4       	brne	.+2      	; 0x2c04 <uart_send_HEX4+0x6>
    2c02:	3f c0       	rjmp	.+126    	; 0x2c82 <uart_send_HEX4+0x84>
    2c04:	68 30       	cpi	r22, 0x08	; 8
    2c06:	70 f4       	brcc	.+28     	; 0x2c24 <uart_send_HEX4+0x26>
    2c08:	63 30       	cpi	r22, 0x03	; 3
    2c0a:	59 f1       	breq	.+86     	; 0x2c62 <uart_send_HEX4+0x64>
    2c0c:	64 30       	cpi	r22, 0x04	; 4
    2c0e:	28 f4       	brcc	.+10     	; 0x2c1a <uart_send_HEX4+0x1c>
    2c10:	61 30       	cpi	r22, 0x01	; 1
    2c12:	f9 f0       	breq	.+62     	; 0x2c52 <uart_send_HEX4+0x54>
    2c14:	62 30       	cpi	r22, 0x02	; 2
    2c16:	08 f5       	brcc	.+66     	; 0x2c5a <uart_send_HEX4+0x5c>
    2c18:	18 c0       	rjmp	.+48     	; 0x2c4a <uart_send_HEX4+0x4c>
    2c1a:	65 30       	cpi	r22, 0x05	; 5
    2c1c:	51 f1       	breq	.+84     	; 0x2c72 <uart_send_HEX4+0x74>
    2c1e:	66 30       	cpi	r22, 0x06	; 6
    2c20:	60 f5       	brcc	.+88     	; 0x2c7a <uart_send_HEX4+0x7c>
    2c22:	23 c0       	rjmp	.+70     	; 0x2c6a <uart_send_HEX4+0x6c>
    2c24:	6b 30       	cpi	r22, 0x0B	; 11
    2c26:	e9 f1       	breq	.+122    	; 0x2ca2 <uart_send_HEX4+0xa4>
    2c28:	6c 30       	cpi	r22, 0x0C	; 12
    2c2a:	28 f4       	brcc	.+10     	; 0x2c36 <uart_send_HEX4+0x38>
    2c2c:	69 30       	cpi	r22, 0x09	; 9
    2c2e:	89 f1       	breq	.+98     	; 0x2c92 <uart_send_HEX4+0x94>
    2c30:	6a 30       	cpi	r22, 0x0A	; 10
    2c32:	98 f5       	brcc	.+102    	; 0x2c9a <uart_send_HEX4+0x9c>
    2c34:	2a c0       	rjmp	.+84     	; 0x2c8a <uart_send_HEX4+0x8c>
    2c36:	6d 30       	cpi	r22, 0x0D	; 13
    2c38:	e1 f1       	breq	.+120    	; 0x2cb2 <uart_send_HEX4+0xb4>
    2c3a:	6d 30       	cpi	r22, 0x0D	; 13
    2c3c:	b0 f1       	brcs	.+108    	; 0x2caa <uart_send_HEX4+0xac>
    2c3e:	6e 30       	cpi	r22, 0x0E	; 14
    2c40:	e1 f1       	breq	.+120    	; 0x2cba <uart_send_HEX4+0xbc>
    2c42:	6f 30       	cpi	r22, 0x0F	; 15
    2c44:	09 f0       	breq	.+2      	; 0x2c48 <uart_send_HEX4+0x4a>
    2c46:	40 c0       	rjmp	.+128    	; 0x2cc8 <uart_send_HEX4+0xca>
    2c48:	3c c0       	rjmp	.+120    	; 0x2cc2 <uart_send_HEX4+0xc4>
	case(0):
		uart_send_byte( which, '0');
    2c4a:	60 e3       	ldi	r22, 0x30	; 48
    2c4c:	0e 94 82 14 	call	0x2904	; 0x2904 <uart_send_byte>
		break;
    2c50:	08 95       	ret
	case(1):
		uart_send_byte( which, '1');
    2c52:	61 e3       	ldi	r22, 0x31	; 49
    2c54:	0e 94 82 14 	call	0x2904	; 0x2904 <uart_send_byte>
		break;
    2c58:	08 95       	ret
	case(2):
		uart_send_byte( which, '2');
    2c5a:	62 e3       	ldi	r22, 0x32	; 50
    2c5c:	0e 94 82 14 	call	0x2904	; 0x2904 <uart_send_byte>
		break;
    2c60:	08 95       	ret
	case(3):
		uart_send_byte( which, '3');
    2c62:	63 e3       	ldi	r22, 0x33	; 51
    2c64:	0e 94 82 14 	call	0x2904	; 0x2904 <uart_send_byte>
		break;
    2c68:	08 95       	ret
	case(4):
		uart_send_byte( which, '4');
    2c6a:	64 e3       	ldi	r22, 0x34	; 52
    2c6c:	0e 94 82 14 	call	0x2904	; 0x2904 <uart_send_byte>
		break;
    2c70:	08 95       	ret
	case(5):
		uart_send_byte( which, '5');
    2c72:	65 e3       	ldi	r22, 0x35	; 53
    2c74:	0e 94 82 14 	call	0x2904	; 0x2904 <uart_send_byte>
		break;
    2c78:	08 95       	ret
	case(6):
		uart_send_byte( which, '6');
    2c7a:	66 e3       	ldi	r22, 0x36	; 54
    2c7c:	0e 94 82 14 	call	0x2904	; 0x2904 <uart_send_byte>
		break;
    2c80:	08 95       	ret
	case(7):
		uart_send_byte( which, '7');
    2c82:	67 e3       	ldi	r22, 0x37	; 55
    2c84:	0e 94 82 14 	call	0x2904	; 0x2904 <uart_send_byte>
		break;
    2c88:	08 95       	ret
	case(8):
		uart_send_byte( which, '8');
    2c8a:	68 e3       	ldi	r22, 0x38	; 56
    2c8c:	0e 94 82 14 	call	0x2904	; 0x2904 <uart_send_byte>
		break;
    2c90:	08 95       	ret
	case(9):
		uart_send_byte( which, '9');
    2c92:	69 e3       	ldi	r22, 0x39	; 57
    2c94:	0e 94 82 14 	call	0x2904	; 0x2904 <uart_send_byte>
		break;
    2c98:	08 95       	ret
	case(10):
		uart_send_byte( which, 'A');
    2c9a:	61 e4       	ldi	r22, 0x41	; 65
    2c9c:	0e 94 82 14 	call	0x2904	; 0x2904 <uart_send_byte>
		break;
    2ca0:	08 95       	ret
	case(11):
		uart_send_byte( which, 'B');
    2ca2:	62 e4       	ldi	r22, 0x42	; 66
    2ca4:	0e 94 82 14 	call	0x2904	; 0x2904 <uart_send_byte>
		break;
    2ca8:	08 95       	ret
	case(12):
		uart_send_byte( which, 'C');
    2caa:	63 e4       	ldi	r22, 0x43	; 67
    2cac:	0e 94 82 14 	call	0x2904	; 0x2904 <uart_send_byte>
		break;
    2cb0:	08 95       	ret
	case(13):
		uart_send_byte( which, 'D');
    2cb2:	64 e4       	ldi	r22, 0x44	; 68
    2cb4:	0e 94 82 14 	call	0x2904	; 0x2904 <uart_send_byte>
		break;
    2cb8:	08 95       	ret
	case(14):
		uart_send_byte( which, 'E');
    2cba:	65 e4       	ldi	r22, 0x45	; 69
    2cbc:	0e 94 82 14 	call	0x2904	; 0x2904 <uart_send_byte>
		break;
    2cc0:	08 95       	ret
	case(15):
		uart_send_byte( which, 'F');
    2cc2:	66 e4       	ldi	r22, 0x46	; 70
    2cc4:	0e 94 82 14 	call	0x2904	; 0x2904 <uart_send_byte>
    2cc8:	08 95       	ret

00002cca <uart_send_HEX8>:
		break;
	}	
}

void uart_send_HEX8(USART_t* which, uint8_t lowb){
    2cca:	1f 93       	push	r17
    2ccc:	cf 93       	push	r28
    2cce:	df 93       	push	r29
    2cd0:	ec 01       	movw	r28, r24
    2cd2:	16 2f       	mov	r17, r22
	uart_send_HEX4(which, lowb>>4);
    2cd4:	62 95       	swap	r22
    2cd6:	6f 70       	andi	r22, 0x0F	; 15
    2cd8:	0e 94 ff 15 	call	0x2bfe	; 0x2bfe <uart_send_HEX4>
	uart_send_HEX4(which, lowb & 0x0F);
    2cdc:	61 2f       	mov	r22, r17
    2cde:	6f 70       	andi	r22, 0x0F	; 15
    2ce0:	ce 01       	movw	r24, r28
    2ce2:	0e 94 ff 15 	call	0x2bfe	; 0x2bfe <uart_send_HEX4>
}
    2ce6:	df 91       	pop	r29
    2ce8:	cf 91       	pop	r28
    2cea:	1f 91       	pop	r17
    2cec:	08 95       	ret

00002cee <uart_send_HEX16b>:

void uart_send_HEX16b(USART_t* which, uint8_t highb, uint8_t lowb){
    2cee:	1f 93       	push	r17
    2cf0:	cf 93       	push	r28
    2cf2:	df 93       	push	r29
    2cf4:	ec 01       	movw	r28, r24
    2cf6:	14 2f       	mov	r17, r20
	uart_send_HEX8(which, highb);
    2cf8:	0e 94 65 16 	call	0x2cca	; 0x2cca <uart_send_HEX8>
	uart_send_HEX8(which, lowb);
    2cfc:	ce 01       	movw	r24, r28
    2cfe:	61 2f       	mov	r22, r17
    2d00:	0e 94 65 16 	call	0x2cca	; 0x2cca <uart_send_HEX8>
}
    2d04:	df 91       	pop	r29
    2d06:	cf 91       	pop	r28
    2d08:	1f 91       	pop	r17
    2d0a:	08 95       	ret

00002d0c <uart_send_HEX16>:

void uart_send_HEX16(USART_t* which, uint16_t highb){
    2d0c:	1f 93       	push	r17
    2d0e:	cf 93       	push	r28
    2d10:	df 93       	push	r29
    2d12:	ec 01       	movw	r28, r24
    2d14:	16 2f       	mov	r17, r22
    2d16:	67 2f       	mov	r22, r23
	uint8_t blah;
	blah = (uint8_t)(highb>>8);
	uart_send_HEX8(which, blah);
    2d18:	0e 94 65 16 	call	0x2cca	; 0x2cca <uart_send_HEX8>
	blah = (uint8_t)(highb & 0x00FF);
	uart_send_HEX8(which, blah);
    2d1c:	ce 01       	movw	r24, r28
    2d1e:	61 2f       	mov	r22, r17
    2d20:	0e 94 65 16 	call	0x2cca	; 0x2cca <uart_send_HEX8>
}
    2d24:	df 91       	pop	r29
    2d26:	cf 91       	pop	r28
    2d28:	1f 91       	pop	r17
    2d2a:	08 95       	ret

00002d2c <uart_enq_BIN4>:
//== The Queue-based versions (NON-BLOCKING) of the display functions ==
//======================================================================


//Most Significant Bit first
void uart_enq_BIN4(USART_t* which, uint8_t lowb){
    2d2c:	cf 93       	push	r28
    2d2e:	df 93       	push	r29
    2d30:	ec 01       	movw	r28, r24
	switch(lowb){
    2d32:	67 30       	cpi	r22, 0x07	; 7
    2d34:	09 f4       	brne	.+2      	; 0x2d38 <uart_enq_BIN4+0xc>
    2d36:	9d c0       	rjmp	.+314    	; 0x2e72 <uart_enq_BIN4+0x146>
    2d38:	68 30       	cpi	r22, 0x08	; 8
    2d3a:	90 f4       	brcc	.+36     	; 0x2d60 <uart_enq_BIN4+0x34>
    2d3c:	63 30       	cpi	r22, 0x03	; 3
    2d3e:	09 f4       	brne	.+2      	; 0x2d42 <uart_enq_BIN4+0x16>
    2d40:	58 c0       	rjmp	.+176    	; 0x2df2 <uart_enq_BIN4+0xc6>
    2d42:	64 30       	cpi	r22, 0x04	; 4
    2d44:	30 f4       	brcc	.+12     	; 0x2d52 <uart_enq_BIN4+0x26>
    2d46:	61 30       	cpi	r22, 0x01	; 1
    2d48:	a1 f1       	breq	.+104    	; 0x2db2 <uart_enq_BIN4+0x86>
    2d4a:	62 30       	cpi	r22, 0x02	; 2
    2d4c:	08 f0       	brcs	.+2      	; 0x2d50 <uart_enq_BIN4+0x24>
    2d4e:	41 c0       	rjmp	.+130    	; 0x2dd2 <uart_enq_BIN4+0xa6>
    2d50:	20 c0       	rjmp	.+64     	; 0x2d92 <uart_enq_BIN4+0x66>
    2d52:	65 30       	cpi	r22, 0x05	; 5
    2d54:	09 f4       	brne	.+2      	; 0x2d58 <uart_enq_BIN4+0x2c>
    2d56:	6d c0       	rjmp	.+218    	; 0x2e32 <uart_enq_BIN4+0x106>
    2d58:	66 30       	cpi	r22, 0x06	; 6
    2d5a:	08 f0       	brcs	.+2      	; 0x2d5e <uart_enq_BIN4+0x32>
    2d5c:	7a c0       	rjmp	.+244    	; 0x2e52 <uart_enq_BIN4+0x126>
    2d5e:	59 c0       	rjmp	.+178    	; 0x2e12 <uart_enq_BIN4+0xe6>
    2d60:	6b 30       	cpi	r22, 0x0B	; 11
    2d62:	09 f4       	brne	.+2      	; 0x2d66 <uart_enq_BIN4+0x3a>
    2d64:	c6 c0       	rjmp	.+396    	; 0x2ef2 <uart_enq_BIN4+0x1c6>
    2d66:	6c 30       	cpi	r22, 0x0C	; 12
    2d68:	38 f4       	brcc	.+14     	; 0x2d78 <uart_enq_BIN4+0x4c>
    2d6a:	69 30       	cpi	r22, 0x09	; 9
    2d6c:	09 f4       	brne	.+2      	; 0x2d70 <uart_enq_BIN4+0x44>
    2d6e:	a1 c0       	rjmp	.+322    	; 0x2eb2 <uart_enq_BIN4+0x186>
    2d70:	6a 30       	cpi	r22, 0x0A	; 10
    2d72:	08 f0       	brcs	.+2      	; 0x2d76 <uart_enq_BIN4+0x4a>
    2d74:	ae c0       	rjmp	.+348    	; 0x2ed2 <uart_enq_BIN4+0x1a6>
    2d76:	8d c0       	rjmp	.+282    	; 0x2e92 <uart_enq_BIN4+0x166>
    2d78:	6d 30       	cpi	r22, 0x0D	; 13
    2d7a:	09 f4       	brne	.+2      	; 0x2d7e <uart_enq_BIN4+0x52>
    2d7c:	da c0       	rjmp	.+436    	; 0x2f32 <uart_enq_BIN4+0x206>
    2d7e:	6d 30       	cpi	r22, 0x0D	; 13
    2d80:	08 f4       	brcc	.+2      	; 0x2d84 <uart_enq_BIN4+0x58>
    2d82:	c7 c0       	rjmp	.+398    	; 0x2f12 <uart_enq_BIN4+0x1e6>
    2d84:	6e 30       	cpi	r22, 0x0E	; 14
    2d86:	09 f4       	brne	.+2      	; 0x2d8a <uart_enq_BIN4+0x5e>
    2d88:	e4 c0       	rjmp	.+456    	; 0x2f52 <uart_enq_BIN4+0x226>
    2d8a:	6f 30       	cpi	r22, 0x0F	; 15
    2d8c:	09 f0       	breq	.+2      	; 0x2d90 <uart_enq_BIN4+0x64>
    2d8e:	00 c1       	rjmp	.+512    	; 0x2f90 <uart_enq_BIN4+0x264>
    2d90:	f0 c0       	rjmp	.+480    	; 0x2f72 <uart_enq_BIN4+0x246>
	case(0):
		uart_enqueue(which, '0');
    2d92:	60 e3       	ldi	r22, 0x30	; 48
    2d94:	0e 94 c7 26 	call	0x4d8e	; 0x4d8e <uart_enqueue>
		uart_enqueue(which, '0');
    2d98:	ce 01       	movw	r24, r28
    2d9a:	60 e3       	ldi	r22, 0x30	; 48
    2d9c:	0e 94 c7 26 	call	0x4d8e	; 0x4d8e <uart_enqueue>
		uart_enqueue(which, '0');
    2da0:	ce 01       	movw	r24, r28
    2da2:	60 e3       	ldi	r22, 0x30	; 48
    2da4:	0e 94 c7 26 	call	0x4d8e	; 0x4d8e <uart_enqueue>
		uart_enqueue(which, '0');
    2da8:	ce 01       	movw	r24, r28
    2daa:	60 e3       	ldi	r22, 0x30	; 48
    2dac:	0e 94 c7 26 	call	0x4d8e	; 0x4d8e <uart_enqueue>
		break;
    2db0:	ef c0       	rjmp	.+478    	; 0x2f90 <uart_enq_BIN4+0x264>
	case(1):
		uart_enqueue(which, '0');
    2db2:	60 e3       	ldi	r22, 0x30	; 48
    2db4:	0e 94 c7 26 	call	0x4d8e	; 0x4d8e <uart_enqueue>
		uart_enqueue(which, '0');
    2db8:	ce 01       	movw	r24, r28
    2dba:	60 e3       	ldi	r22, 0x30	; 48
    2dbc:	0e 94 c7 26 	call	0x4d8e	; 0x4d8e <uart_enqueue>
		uart_enqueue(which, '0');
    2dc0:	ce 01       	movw	r24, r28
    2dc2:	60 e3       	ldi	r22, 0x30	; 48
    2dc4:	0e 94 c7 26 	call	0x4d8e	; 0x4d8e <uart_enqueue>
		uart_enqueue(which, '1');
    2dc8:	ce 01       	movw	r24, r28
    2dca:	61 e3       	ldi	r22, 0x31	; 49
    2dcc:	0e 94 c7 26 	call	0x4d8e	; 0x4d8e <uart_enqueue>
		break;
    2dd0:	df c0       	rjmp	.+446    	; 0x2f90 <uart_enq_BIN4+0x264>
	case(2):
		uart_enqueue(which, '0');
    2dd2:	60 e3       	ldi	r22, 0x30	; 48
    2dd4:	0e 94 c7 26 	call	0x4d8e	; 0x4d8e <uart_enqueue>
		uart_enqueue(which, '0');
    2dd8:	ce 01       	movw	r24, r28
    2dda:	60 e3       	ldi	r22, 0x30	; 48
    2ddc:	0e 94 c7 26 	call	0x4d8e	; 0x4d8e <uart_enqueue>
		uart_enqueue(which, '1');
    2de0:	ce 01       	movw	r24, r28
    2de2:	61 e3       	ldi	r22, 0x31	; 49
    2de4:	0e 94 c7 26 	call	0x4d8e	; 0x4d8e <uart_enqueue>
		uart_enqueue(which, '0');
    2de8:	ce 01       	movw	r24, r28
    2dea:	60 e3       	ldi	r22, 0x30	; 48
    2dec:	0e 94 c7 26 	call	0x4d8e	; 0x4d8e <uart_enqueue>
		break;
    2df0:	cf c0       	rjmp	.+414    	; 0x2f90 <uart_enq_BIN4+0x264>
	case(3):
		uart_enqueue(which, '0');
    2df2:	60 e3       	ldi	r22, 0x30	; 48
    2df4:	0e 94 c7 26 	call	0x4d8e	; 0x4d8e <uart_enqueue>
		uart_enqueue(which, '0');
    2df8:	ce 01       	movw	r24, r28
    2dfa:	60 e3       	ldi	r22, 0x30	; 48
    2dfc:	0e 94 c7 26 	call	0x4d8e	; 0x4d8e <uart_enqueue>
		uart_enqueue(which, '1');
    2e00:	ce 01       	movw	r24, r28
    2e02:	61 e3       	ldi	r22, 0x31	; 49
    2e04:	0e 94 c7 26 	call	0x4d8e	; 0x4d8e <uart_enqueue>
		uart_enqueue(which, '1');
    2e08:	ce 01       	movw	r24, r28
    2e0a:	61 e3       	ldi	r22, 0x31	; 49
    2e0c:	0e 94 c7 26 	call	0x4d8e	; 0x4d8e <uart_enqueue>
		break;
    2e10:	bf c0       	rjmp	.+382    	; 0x2f90 <uart_enq_BIN4+0x264>
	case(4):
		uart_enqueue(which, '0');
    2e12:	60 e3       	ldi	r22, 0x30	; 48
    2e14:	0e 94 c7 26 	call	0x4d8e	; 0x4d8e <uart_enqueue>
		uart_enqueue(which, '1');
    2e18:	ce 01       	movw	r24, r28
    2e1a:	61 e3       	ldi	r22, 0x31	; 49
    2e1c:	0e 94 c7 26 	call	0x4d8e	; 0x4d8e <uart_enqueue>
		uart_enqueue(which, '0');
    2e20:	ce 01       	movw	r24, r28
    2e22:	60 e3       	ldi	r22, 0x30	; 48
    2e24:	0e 94 c7 26 	call	0x4d8e	; 0x4d8e <uart_enqueue>
		uart_enqueue(which, '0');
    2e28:	ce 01       	movw	r24, r28
    2e2a:	60 e3       	ldi	r22, 0x30	; 48
    2e2c:	0e 94 c7 26 	call	0x4d8e	; 0x4d8e <uart_enqueue>
		break;
    2e30:	af c0       	rjmp	.+350    	; 0x2f90 <uart_enq_BIN4+0x264>
	case(5):
		uart_enqueue(which, '0');
    2e32:	60 e3       	ldi	r22, 0x30	; 48
    2e34:	0e 94 c7 26 	call	0x4d8e	; 0x4d8e <uart_enqueue>
		uart_enqueue(which, '1');
    2e38:	ce 01       	movw	r24, r28
    2e3a:	61 e3       	ldi	r22, 0x31	; 49
    2e3c:	0e 94 c7 26 	call	0x4d8e	; 0x4d8e <uart_enqueue>
		uart_enqueue(which, '0');
    2e40:	ce 01       	movw	r24, r28
    2e42:	60 e3       	ldi	r22, 0x30	; 48
    2e44:	0e 94 c7 26 	call	0x4d8e	; 0x4d8e <uart_enqueue>
		uart_enqueue(which, '1');
    2e48:	ce 01       	movw	r24, r28
    2e4a:	61 e3       	ldi	r22, 0x31	; 49
    2e4c:	0e 94 c7 26 	call	0x4d8e	; 0x4d8e <uart_enqueue>
		break;
    2e50:	9f c0       	rjmp	.+318    	; 0x2f90 <uart_enq_BIN4+0x264>
	case(6):
		uart_enqueue(which, '0');
    2e52:	60 e3       	ldi	r22, 0x30	; 48
    2e54:	0e 94 c7 26 	call	0x4d8e	; 0x4d8e <uart_enqueue>
		uart_enqueue(which, '1');
    2e58:	ce 01       	movw	r24, r28
    2e5a:	61 e3       	ldi	r22, 0x31	; 49
    2e5c:	0e 94 c7 26 	call	0x4d8e	; 0x4d8e <uart_enqueue>
		uart_enqueue(which, '1');
    2e60:	ce 01       	movw	r24, r28
    2e62:	61 e3       	ldi	r22, 0x31	; 49
    2e64:	0e 94 c7 26 	call	0x4d8e	; 0x4d8e <uart_enqueue>
		uart_enqueue(which, '0');
    2e68:	ce 01       	movw	r24, r28
    2e6a:	60 e3       	ldi	r22, 0x30	; 48
    2e6c:	0e 94 c7 26 	call	0x4d8e	; 0x4d8e <uart_enqueue>
		break;
    2e70:	8f c0       	rjmp	.+286    	; 0x2f90 <uart_enq_BIN4+0x264>
	case(7):
		uart_enqueue(which, '0');
    2e72:	60 e3       	ldi	r22, 0x30	; 48
    2e74:	0e 94 c7 26 	call	0x4d8e	; 0x4d8e <uart_enqueue>
		uart_enqueue(which, '1');
    2e78:	ce 01       	movw	r24, r28
    2e7a:	61 e3       	ldi	r22, 0x31	; 49
    2e7c:	0e 94 c7 26 	call	0x4d8e	; 0x4d8e <uart_enqueue>
		uart_enqueue(which, '1');
    2e80:	ce 01       	movw	r24, r28
    2e82:	61 e3       	ldi	r22, 0x31	; 49
    2e84:	0e 94 c7 26 	call	0x4d8e	; 0x4d8e <uart_enqueue>
		uart_enqueue(which, '1');
    2e88:	ce 01       	movw	r24, r28
    2e8a:	61 e3       	ldi	r22, 0x31	; 49
    2e8c:	0e 94 c7 26 	call	0x4d8e	; 0x4d8e <uart_enqueue>
		break;
    2e90:	7f c0       	rjmp	.+254    	; 0x2f90 <uart_enq_BIN4+0x264>
	case(8):
		uart_enqueue(which, '1');
    2e92:	61 e3       	ldi	r22, 0x31	; 49
    2e94:	0e 94 c7 26 	call	0x4d8e	; 0x4d8e <uart_enqueue>
		uart_enqueue(which, '0');
    2e98:	ce 01       	movw	r24, r28
    2e9a:	60 e3       	ldi	r22, 0x30	; 48
    2e9c:	0e 94 c7 26 	call	0x4d8e	; 0x4d8e <uart_enqueue>
		uart_enqueue(which, '0');
    2ea0:	ce 01       	movw	r24, r28
    2ea2:	60 e3       	ldi	r22, 0x30	; 48
    2ea4:	0e 94 c7 26 	call	0x4d8e	; 0x4d8e <uart_enqueue>
		uart_enqueue(which, '0');
    2ea8:	ce 01       	movw	r24, r28
    2eaa:	60 e3       	ldi	r22, 0x30	; 48
    2eac:	0e 94 c7 26 	call	0x4d8e	; 0x4d8e <uart_enqueue>
		break;
    2eb0:	6f c0       	rjmp	.+222    	; 0x2f90 <uart_enq_BIN4+0x264>
	case(9):
		uart_enqueue(which, '1');
    2eb2:	61 e3       	ldi	r22, 0x31	; 49
    2eb4:	0e 94 c7 26 	call	0x4d8e	; 0x4d8e <uart_enqueue>
		uart_enqueue(which, '0');
    2eb8:	ce 01       	movw	r24, r28
    2eba:	60 e3       	ldi	r22, 0x30	; 48
    2ebc:	0e 94 c7 26 	call	0x4d8e	; 0x4d8e <uart_enqueue>
		uart_enqueue(which, '0');
    2ec0:	ce 01       	movw	r24, r28
    2ec2:	60 e3       	ldi	r22, 0x30	; 48
    2ec4:	0e 94 c7 26 	call	0x4d8e	; 0x4d8e <uart_enqueue>
		uart_enqueue(which, '1');
    2ec8:	ce 01       	movw	r24, r28
    2eca:	61 e3       	ldi	r22, 0x31	; 49
    2ecc:	0e 94 c7 26 	call	0x4d8e	; 0x4d8e <uart_enqueue>
		break;
    2ed0:	5f c0       	rjmp	.+190    	; 0x2f90 <uart_enq_BIN4+0x264>
	case(10):
		uart_enqueue(which, '1');
    2ed2:	61 e3       	ldi	r22, 0x31	; 49
    2ed4:	0e 94 c7 26 	call	0x4d8e	; 0x4d8e <uart_enqueue>
		uart_enqueue(which, '0');
    2ed8:	ce 01       	movw	r24, r28
    2eda:	60 e3       	ldi	r22, 0x30	; 48
    2edc:	0e 94 c7 26 	call	0x4d8e	; 0x4d8e <uart_enqueue>
		uart_enqueue(which, '1');
    2ee0:	ce 01       	movw	r24, r28
    2ee2:	61 e3       	ldi	r22, 0x31	; 49
    2ee4:	0e 94 c7 26 	call	0x4d8e	; 0x4d8e <uart_enqueue>
		uart_enqueue(which, '0');
    2ee8:	ce 01       	movw	r24, r28
    2eea:	60 e3       	ldi	r22, 0x30	; 48
    2eec:	0e 94 c7 26 	call	0x4d8e	; 0x4d8e <uart_enqueue>
		break;
    2ef0:	4f c0       	rjmp	.+158    	; 0x2f90 <uart_enq_BIN4+0x264>
	case(11):
		uart_enqueue(which, '1');
    2ef2:	61 e3       	ldi	r22, 0x31	; 49
    2ef4:	0e 94 c7 26 	call	0x4d8e	; 0x4d8e <uart_enqueue>
		uart_enqueue(which, '0');
    2ef8:	ce 01       	movw	r24, r28
    2efa:	60 e3       	ldi	r22, 0x30	; 48
    2efc:	0e 94 c7 26 	call	0x4d8e	; 0x4d8e <uart_enqueue>
		uart_enqueue(which, '1');
    2f00:	ce 01       	movw	r24, r28
    2f02:	61 e3       	ldi	r22, 0x31	; 49
    2f04:	0e 94 c7 26 	call	0x4d8e	; 0x4d8e <uart_enqueue>
		uart_enqueue(which, '1');
    2f08:	ce 01       	movw	r24, r28
    2f0a:	61 e3       	ldi	r22, 0x31	; 49
    2f0c:	0e 94 c7 26 	call	0x4d8e	; 0x4d8e <uart_enqueue>
		break;
    2f10:	3f c0       	rjmp	.+126    	; 0x2f90 <uart_enq_BIN4+0x264>
	case(12):
		uart_enqueue(which, '1');
    2f12:	61 e3       	ldi	r22, 0x31	; 49
    2f14:	0e 94 c7 26 	call	0x4d8e	; 0x4d8e <uart_enqueue>
		uart_enqueue(which, '1');
    2f18:	ce 01       	movw	r24, r28
    2f1a:	61 e3       	ldi	r22, 0x31	; 49
    2f1c:	0e 94 c7 26 	call	0x4d8e	; 0x4d8e <uart_enqueue>
		uart_enqueue(which, '0');
    2f20:	ce 01       	movw	r24, r28
    2f22:	60 e3       	ldi	r22, 0x30	; 48
    2f24:	0e 94 c7 26 	call	0x4d8e	; 0x4d8e <uart_enqueue>
		uart_enqueue(which, '0');
    2f28:	ce 01       	movw	r24, r28
    2f2a:	60 e3       	ldi	r22, 0x30	; 48
    2f2c:	0e 94 c7 26 	call	0x4d8e	; 0x4d8e <uart_enqueue>
		break;
    2f30:	2f c0       	rjmp	.+94     	; 0x2f90 <uart_enq_BIN4+0x264>
	case(13):
		uart_enqueue(which, '1');
    2f32:	61 e3       	ldi	r22, 0x31	; 49
    2f34:	0e 94 c7 26 	call	0x4d8e	; 0x4d8e <uart_enqueue>
		uart_enqueue(which, '1');
    2f38:	ce 01       	movw	r24, r28
    2f3a:	61 e3       	ldi	r22, 0x31	; 49
    2f3c:	0e 94 c7 26 	call	0x4d8e	; 0x4d8e <uart_enqueue>
		uart_enqueue(which, '0');
    2f40:	ce 01       	movw	r24, r28
    2f42:	60 e3       	ldi	r22, 0x30	; 48
    2f44:	0e 94 c7 26 	call	0x4d8e	; 0x4d8e <uart_enqueue>
		uart_enqueue(which, '1');
    2f48:	ce 01       	movw	r24, r28
    2f4a:	61 e3       	ldi	r22, 0x31	; 49
    2f4c:	0e 94 c7 26 	call	0x4d8e	; 0x4d8e <uart_enqueue>
		break;
    2f50:	1f c0       	rjmp	.+62     	; 0x2f90 <uart_enq_BIN4+0x264>
	case(14):
		uart_enqueue(which, '1');
    2f52:	61 e3       	ldi	r22, 0x31	; 49
    2f54:	0e 94 c7 26 	call	0x4d8e	; 0x4d8e <uart_enqueue>
		uart_enqueue(which, '1');
    2f58:	ce 01       	movw	r24, r28
    2f5a:	61 e3       	ldi	r22, 0x31	; 49
    2f5c:	0e 94 c7 26 	call	0x4d8e	; 0x4d8e <uart_enqueue>
		uart_enqueue(which, '1');
    2f60:	ce 01       	movw	r24, r28
    2f62:	61 e3       	ldi	r22, 0x31	; 49
    2f64:	0e 94 c7 26 	call	0x4d8e	; 0x4d8e <uart_enqueue>
		uart_enqueue(which, '0');
    2f68:	ce 01       	movw	r24, r28
    2f6a:	60 e3       	ldi	r22, 0x30	; 48
    2f6c:	0e 94 c7 26 	call	0x4d8e	; 0x4d8e <uart_enqueue>
		break;
    2f70:	0f c0       	rjmp	.+30     	; 0x2f90 <uart_enq_BIN4+0x264>
	case(15):
		uart_enqueue(which, '1');
    2f72:	61 e3       	ldi	r22, 0x31	; 49
    2f74:	0e 94 c7 26 	call	0x4d8e	; 0x4d8e <uart_enqueue>
		uart_enqueue(which, '1');
    2f78:	ce 01       	movw	r24, r28
    2f7a:	61 e3       	ldi	r22, 0x31	; 49
    2f7c:	0e 94 c7 26 	call	0x4d8e	; 0x4d8e <uart_enqueue>
		uart_enqueue(which, '1');
    2f80:	ce 01       	movw	r24, r28
    2f82:	61 e3       	ldi	r22, 0x31	; 49
    2f84:	0e 94 c7 26 	call	0x4d8e	; 0x4d8e <uart_enqueue>
		uart_enqueue(which, '1');
    2f88:	ce 01       	movw	r24, r28
    2f8a:	61 e3       	ldi	r22, 0x31	; 49
    2f8c:	0e 94 c7 26 	call	0x4d8e	; 0x4d8e <uart_enqueue>
		break;
	}	
}
    2f90:	df 91       	pop	r29
    2f92:	cf 91       	pop	r28
    2f94:	08 95       	ret

00002f96 <uart_enq_BIN8>:

//enqs out toenq as ASCII text in 'b01101010' format
void uart_enq_BIN8(USART_t* which, uint8_t lowb){
    2f96:	1f 93       	push	r17
    2f98:	cf 93       	push	r28
    2f9a:	df 93       	push	r29
    2f9c:	ec 01       	movw	r28, r24
    2f9e:	16 2f       	mov	r17, r22
	uart_enqueue(which, 'b');
    2fa0:	62 e6       	ldi	r22, 0x62	; 98
    2fa2:	0e 94 c7 26 	call	0x4d8e	; 0x4d8e <uart_enqueue>
	uart_enq_BIN4(which, lowb>>4);
    2fa6:	61 2f       	mov	r22, r17
    2fa8:	62 95       	swap	r22
    2faa:	6f 70       	andi	r22, 0x0F	; 15
    2fac:	ce 01       	movw	r24, r28
    2fae:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <uart_enq_BIN4>
	uart_enq_BIN4(which, lowb & 0x0F);
    2fb2:	61 2f       	mov	r22, r17
    2fb4:	6f 70       	andi	r22, 0x0F	; 15
    2fb6:	ce 01       	movw	r24, r28
    2fb8:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <uart_enq_BIN4>
}
    2fbc:	df 91       	pop	r29
    2fbe:	cf 91       	pop	r28
    2fc0:	1f 91       	pop	r17
    2fc2:	08 95       	ret

00002fc4 <uart_enq_HEX4>:
	

void uart_enq_HEX4(USART_t* which, uint8_t lowb){
	switch(lowb){
    2fc4:	67 30       	cpi	r22, 0x07	; 7
    2fc6:	09 f4       	brne	.+2      	; 0x2fca <uart_enq_HEX4+0x6>
    2fc8:	3f c0       	rjmp	.+126    	; 0x3048 <uart_enq_HEX4+0x84>
    2fca:	68 30       	cpi	r22, 0x08	; 8
    2fcc:	70 f4       	brcc	.+28     	; 0x2fea <uart_enq_HEX4+0x26>
    2fce:	63 30       	cpi	r22, 0x03	; 3
    2fd0:	59 f1       	breq	.+86     	; 0x3028 <uart_enq_HEX4+0x64>
    2fd2:	64 30       	cpi	r22, 0x04	; 4
    2fd4:	28 f4       	brcc	.+10     	; 0x2fe0 <uart_enq_HEX4+0x1c>
    2fd6:	61 30       	cpi	r22, 0x01	; 1
    2fd8:	f9 f0       	breq	.+62     	; 0x3018 <uart_enq_HEX4+0x54>
    2fda:	62 30       	cpi	r22, 0x02	; 2
    2fdc:	08 f5       	brcc	.+66     	; 0x3020 <uart_enq_HEX4+0x5c>
    2fde:	18 c0       	rjmp	.+48     	; 0x3010 <uart_enq_HEX4+0x4c>
    2fe0:	65 30       	cpi	r22, 0x05	; 5
    2fe2:	51 f1       	breq	.+84     	; 0x3038 <uart_enq_HEX4+0x74>
    2fe4:	66 30       	cpi	r22, 0x06	; 6
    2fe6:	60 f5       	brcc	.+88     	; 0x3040 <uart_enq_HEX4+0x7c>
    2fe8:	23 c0       	rjmp	.+70     	; 0x3030 <uart_enq_HEX4+0x6c>
    2fea:	6b 30       	cpi	r22, 0x0B	; 11
    2fec:	e9 f1       	breq	.+122    	; 0x3068 <uart_enq_HEX4+0xa4>
    2fee:	6c 30       	cpi	r22, 0x0C	; 12
    2ff0:	28 f4       	brcc	.+10     	; 0x2ffc <uart_enq_HEX4+0x38>
    2ff2:	69 30       	cpi	r22, 0x09	; 9
    2ff4:	89 f1       	breq	.+98     	; 0x3058 <uart_enq_HEX4+0x94>
    2ff6:	6a 30       	cpi	r22, 0x0A	; 10
    2ff8:	98 f5       	brcc	.+102    	; 0x3060 <uart_enq_HEX4+0x9c>
    2ffa:	2a c0       	rjmp	.+84     	; 0x3050 <uart_enq_HEX4+0x8c>
    2ffc:	6d 30       	cpi	r22, 0x0D	; 13
    2ffe:	e1 f1       	breq	.+120    	; 0x3078 <uart_enq_HEX4+0xb4>
    3000:	6d 30       	cpi	r22, 0x0D	; 13
    3002:	b0 f1       	brcs	.+108    	; 0x3070 <uart_enq_HEX4+0xac>
    3004:	6e 30       	cpi	r22, 0x0E	; 14
    3006:	e1 f1       	breq	.+120    	; 0x3080 <uart_enq_HEX4+0xbc>
    3008:	6f 30       	cpi	r22, 0x0F	; 15
    300a:	09 f0       	breq	.+2      	; 0x300e <uart_enq_HEX4+0x4a>
    300c:	40 c0       	rjmp	.+128    	; 0x308e <uart_enq_HEX4+0xca>
    300e:	3c c0       	rjmp	.+120    	; 0x3088 <uart_enq_HEX4+0xc4>
	case(0):
		uart_enqueue(which,  '0');
    3010:	60 e3       	ldi	r22, 0x30	; 48
    3012:	0e 94 c7 26 	call	0x4d8e	; 0x4d8e <uart_enqueue>
		break;
    3016:	08 95       	ret
	case(1):
		uart_enqueue(which,  '1');
    3018:	61 e3       	ldi	r22, 0x31	; 49
    301a:	0e 94 c7 26 	call	0x4d8e	; 0x4d8e <uart_enqueue>
		break;
    301e:	08 95       	ret
	case(2):
		uart_enqueue(which,  '2');
    3020:	62 e3       	ldi	r22, 0x32	; 50
    3022:	0e 94 c7 26 	call	0x4d8e	; 0x4d8e <uart_enqueue>
		break;
    3026:	08 95       	ret
	case(3):
		uart_enqueue(which,  '3');
    3028:	63 e3       	ldi	r22, 0x33	; 51
    302a:	0e 94 c7 26 	call	0x4d8e	; 0x4d8e <uart_enqueue>
		break;
    302e:	08 95       	ret
	case(4):
		uart_enqueue(which,  '4');
    3030:	64 e3       	ldi	r22, 0x34	; 52
    3032:	0e 94 c7 26 	call	0x4d8e	; 0x4d8e <uart_enqueue>
		break;
    3036:	08 95       	ret
	case(5):
		uart_enqueue(which,  '5');
    3038:	65 e3       	ldi	r22, 0x35	; 53
    303a:	0e 94 c7 26 	call	0x4d8e	; 0x4d8e <uart_enqueue>
		break;
    303e:	08 95       	ret
	case(6):
		uart_enqueue(which,  '6');
    3040:	66 e3       	ldi	r22, 0x36	; 54
    3042:	0e 94 c7 26 	call	0x4d8e	; 0x4d8e <uart_enqueue>
		break;
    3046:	08 95       	ret
	case(7):
		uart_enqueue(which,  '7');
    3048:	67 e3       	ldi	r22, 0x37	; 55
    304a:	0e 94 c7 26 	call	0x4d8e	; 0x4d8e <uart_enqueue>
		break;
    304e:	08 95       	ret
	case(8):
		uart_enqueue(which,  '8');
    3050:	68 e3       	ldi	r22, 0x38	; 56
    3052:	0e 94 c7 26 	call	0x4d8e	; 0x4d8e <uart_enqueue>
		break;
    3056:	08 95       	ret
	case(9):
		uart_enqueue(which,  '9');
    3058:	69 e3       	ldi	r22, 0x39	; 57
    305a:	0e 94 c7 26 	call	0x4d8e	; 0x4d8e <uart_enqueue>
		break;
    305e:	08 95       	ret
	case(10):
		uart_enqueue(which,  'A');
    3060:	61 e4       	ldi	r22, 0x41	; 65
    3062:	0e 94 c7 26 	call	0x4d8e	; 0x4d8e <uart_enqueue>
		break;
    3066:	08 95       	ret
	case(11):
		uart_enqueue(which,  'B');
    3068:	62 e4       	ldi	r22, 0x42	; 66
    306a:	0e 94 c7 26 	call	0x4d8e	; 0x4d8e <uart_enqueue>
		break;
    306e:	08 95       	ret
	case(12):
		uart_enqueue(which,  'C');
    3070:	63 e4       	ldi	r22, 0x43	; 67
    3072:	0e 94 c7 26 	call	0x4d8e	; 0x4d8e <uart_enqueue>
		break;
    3076:	08 95       	ret
	case(13):
		uart_enqueue(which,  'D');
    3078:	64 e4       	ldi	r22, 0x44	; 68
    307a:	0e 94 c7 26 	call	0x4d8e	; 0x4d8e <uart_enqueue>
		break;
    307e:	08 95       	ret
	case(14):
		uart_enqueue(which,  'E');
    3080:	65 e4       	ldi	r22, 0x45	; 69
    3082:	0e 94 c7 26 	call	0x4d8e	; 0x4d8e <uart_enqueue>
		break;
    3086:	08 95       	ret
	case(15):
		uart_enqueue(which,  'F');
    3088:	66 e4       	ldi	r22, 0x46	; 70
    308a:	0e 94 c7 26 	call	0x4d8e	; 0x4d8e <uart_enqueue>
    308e:	08 95       	ret

00003090 <uart_enq_HEX8>:
		break;
	}	
}

void uart_enq_HEX8(USART_t* which, uint8_t lowb){
    3090:	1f 93       	push	r17
    3092:	cf 93       	push	r28
    3094:	df 93       	push	r29
    3096:	ec 01       	movw	r28, r24
    3098:	16 2f       	mov	r17, r22
	uart_enq_HEX4(which, lowb>>4);
    309a:	62 95       	swap	r22
    309c:	6f 70       	andi	r22, 0x0F	; 15
    309e:	0e 94 e2 17 	call	0x2fc4	; 0x2fc4 <uart_enq_HEX4>
	uart_enq_HEX4(which, lowb & 0x0F);
    30a2:	61 2f       	mov	r22, r17
    30a4:	6f 70       	andi	r22, 0x0F	; 15
    30a6:	ce 01       	movw	r24, r28
    30a8:	0e 94 e2 17 	call	0x2fc4	; 0x2fc4 <uart_enq_HEX4>
}
    30ac:	df 91       	pop	r29
    30ae:	cf 91       	pop	r28
    30b0:	1f 91       	pop	r17
    30b2:	08 95       	ret

000030b4 <uart_enq_HEX16b>:

void uart_enq_HEX16b(USART_t* which, uint8_t highb, uint8_t lowb){
    30b4:	1f 93       	push	r17
    30b6:	cf 93       	push	r28
    30b8:	df 93       	push	r29
    30ba:	ec 01       	movw	r28, r24
    30bc:	14 2f       	mov	r17, r20
	uart_enq_HEX8(which, highb);
    30be:	0e 94 48 18 	call	0x3090	; 0x3090 <uart_enq_HEX8>
	uart_enq_HEX8(which, lowb);
    30c2:	ce 01       	movw	r24, r28
    30c4:	61 2f       	mov	r22, r17
    30c6:	0e 94 48 18 	call	0x3090	; 0x3090 <uart_enq_HEX8>
}
    30ca:	df 91       	pop	r29
    30cc:	cf 91       	pop	r28
    30ce:	1f 91       	pop	r17
    30d0:	08 95       	ret

000030d2 <uart_enq_HEX16>:

void uart_enq_HEX16(USART_t* which, uint16_t highb){
    30d2:	1f 93       	push	r17
    30d4:	cf 93       	push	r28
    30d6:	df 93       	push	r29
    30d8:	ec 01       	movw	r28, r24
    30da:	16 2f       	mov	r17, r22
    30dc:	67 2f       	mov	r22, r23
	uint8_t blah;
	blah = (uint8_t)(highb>>8);
	uart_enq_HEX8(which, blah);
    30de:	0e 94 48 18 	call	0x3090	; 0x3090 <uart_enq_HEX8>
	blah = (uint8_t)(highb & 0x00FF);
	uart_enq_HEX8(which, blah);
    30e2:	ce 01       	movw	r24, r28
    30e4:	61 2f       	mov	r22, r17
    30e6:	0e 94 48 18 	call	0x3090	; 0x3090 <uart_enq_HEX8>
}
    30ea:	df 91       	pop	r29
    30ec:	cf 91       	pop	r28
    30ee:	1f 91       	pop	r17
    30f0:	08 95       	ret

000030f2 <__vector_25>:
//************************************************************************
//************************************************************************

//Must correspond to definitions in uart.h
ISR(USARTC0_DRE_vect) {uart_transmit(&uctrl);}//TX Interrupt
ISR(USARTC0_RXC_vect) {uart_receive(&uctrl);} //RX Interrupt
    30f2:	1f 92       	push	r1
    30f4:	0f 92       	push	r0
    30f6:	0f b6       	in	r0, 0x3f	; 63
    30f8:	0f 92       	push	r0
    30fa:	08 b6       	in	r0, 0x38	; 56
    30fc:	0f 92       	push	r0
    30fe:	09 b6       	in	r0, 0x39	; 57
    3100:	0f 92       	push	r0
    3102:	0a b6       	in	r0, 0x3a	; 58
    3104:	0f 92       	push	r0
    3106:	0b b6       	in	r0, 0x3b	; 59
    3108:	0f 92       	push	r0
    310a:	11 24       	eor	r1, r1
    310c:	2f 93       	push	r18
    310e:	3f 93       	push	r19
    3110:	4f 93       	push	r20
    3112:	5f 93       	push	r21
    3114:	8f 93       	push	r24
    3116:	9f 93       	push	r25
    3118:	af 93       	push	r26
    311a:	bf 93       	push	r27
    311c:	cf 93       	push	r28
    311e:	df 93       	push	r29
    3120:	ef 93       	push	r30
    3122:	ff 93       	push	r31
//= RECEPTION ENGINE (ISR BASED)
//==================================

void inline uart_receive(USART_t* port){
	//keep receiving until data register is empty or incoming queue is full
	while (((port->STATUS & _BV(7)) == B8(10000000)) && (uart_icount(port) < MAX_IBUFFER_LEN)){		
    3124:	c0 ea       	ldi	r28, 0xA0	; 160
    3126:	d8 e0       	ldi	r29, 0x08	; 8
	uart_itail[idx] = 0;
}

inline uint16_t uart_icount(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_ihead[idx] >= uart_itail[idx]){	
    3128:	e0 ed       	ldi	r30, 0xD0	; 208
    312a:	fe e3       	ldi	r31, 0x3E	; 62
    312c:	44 ec       	ldi	r20, 0xC4	; 196
    312e:	56 e2       	ldi	r21, 0x26	; 38
    3130:	13 c0       	rjmp	.+38     	; 0x3158 <__vector_25+0x66>
//==================================

void inline uart_receive(USART_t* port){
	//keep receiving until data register is empty or incoming queue is full
	while (((port->STATUS & _BV(7)) == B8(10000000)) && (uart_icount(port) < MAX_IBUFFER_LEN)){		
		uart_ienqueue(port, port->DATA);
    3132:	88 81       	ld	r24, Y
	}
}

inline void uart_ienqueue(USART_t* port, uint8_t datain){
	uint8_t idx = port_map(port);
	uart_ibuffer[idx][uart_ihead[idx]] = datain;
    3134:	a0 81       	ld	r26, Z
    3136:	b1 81       	ldd	r27, Z+1	; 0x01
    3138:	a8 53       	subi	r26, 0x38	; 56
    313a:	b5 4d       	sbci	r27, 0xD5	; 213
    313c:	8c 93       	st	X, r24
	uart_ihead[idx]++;
    313e:	80 81       	ld	r24, Z
    3140:	91 81       	ldd	r25, Z+1	; 0x01
    3142:	01 96       	adiw	r24, 0x01	; 1
    3144:	80 83       	st	Z, r24
    3146:	91 83       	std	Z+1, r25	; 0x01
	if (uart_ihead[idx] >= MAX_IBUFFER_LEN){
    3148:	80 81       	ld	r24, Z
    314a:	91 81       	ldd	r25, Z+1	; 0x01
    314c:	24 e0       	ldi	r18, 0x04	; 4
    314e:	80 30       	cpi	r24, 0x00	; 0
    3150:	92 07       	cpc	r25, r18
    3152:	10 f0       	brcs	.+4      	; 0x3158 <__vector_25+0x66>
		uart_ihead[idx] = 0;
    3154:	10 82       	st	Z, r1
    3156:	11 82       	std	Z+1, r1	; 0x01
//= RECEPTION ENGINE (ISR BASED)
//==================================

void inline uart_receive(USART_t* port){
	//keep receiving until data register is empty or incoming queue is full
	while (((port->STATUS & _BV(7)) == B8(10000000)) && (uart_icount(port) < MAX_IBUFFER_LEN)){		
    3158:	89 81       	ldd	r24, Y+1	; 0x01
    315a:	88 23       	and	r24, r24
    315c:	fc f4       	brge	.+62     	; 0x319c <__vector_25+0xaa>
	uart_itail[idx] = 0;
}

inline uint16_t uart_icount(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_ihead[idx] >= uart_itail[idx]){	
    315e:	80 81       	ld	r24, Z
    3160:	91 81       	ldd	r25, Z+1	; 0x01
    3162:	da 01       	movw	r26, r20
    3164:	2d 91       	ld	r18, X+
    3166:	3c 91       	ld	r19, X
    3168:	11 97       	sbiw	r26, 0x01	; 1
    316a:	82 17       	cp	r24, r18
    316c:	93 07       	cpc	r25, r19
    316e:	40 f0       	brcs	.+16     	; 0x3180 <__vector_25+0x8e>
		return (uart_ihead[idx] - uart_itail[idx]);
    3170:	80 81       	ld	r24, Z
    3172:	91 81       	ldd	r25, Z+1	; 0x01
    3174:	2d 91       	ld	r18, X+
    3176:	3c 91       	ld	r19, X
    3178:	11 97       	sbiw	r26, 0x01	; 1
    317a:	82 1b       	sub	r24, r18
    317c:	93 0b       	sbc	r25, r19
    317e:	0a c0       	rjmp	.+20     	; 0x3194 <__vector_25+0xa2>
	}
	else {
		return ((MAX_IBUFFER_LEN-uart_itail[idx])+uart_ihead[idx]);
    3180:	80 81       	ld	r24, Z
    3182:	91 81       	ldd	r25, Z+1	; 0x01
    3184:	da 01       	movw	r26, r20
    3186:	2d 91       	ld	r18, X+
    3188:	3c 91       	ld	r19, X
    318a:	11 97       	sbiw	r26, 0x01	; 1
    318c:	80 50       	subi	r24, 0x00	; 0
    318e:	9c 4f       	sbci	r25, 0xFC	; 252
    3190:	82 1b       	sub	r24, r18
    3192:	93 0b       	sbc	r25, r19
//= RECEPTION ENGINE (ISR BASED)
//==================================

void inline uart_receive(USART_t* port){
	//keep receiving until data register is empty or incoming queue is full
	while (((port->STATUS & _BV(7)) == B8(10000000)) && (uart_icount(port) < MAX_IBUFFER_LEN)){		
    3194:	b4 e0       	ldi	r27, 0x04	; 4
    3196:	80 30       	cpi	r24, 0x00	; 0
    3198:	9b 07       	cpc	r25, r27
    319a:	58 f2       	brcs	.-106    	; 0x3132 <__vector_25+0x40>
//************************************************************************
//************************************************************************

//Must correspond to definitions in uart.h
ISR(USARTC0_DRE_vect) {uart_transmit(&uctrl);}//TX Interrupt
ISR(USARTC0_RXC_vect) {uart_receive(&uctrl);} //RX Interrupt
    319c:	ff 91       	pop	r31
    319e:	ef 91       	pop	r30
    31a0:	df 91       	pop	r29
    31a2:	cf 91       	pop	r28
    31a4:	bf 91       	pop	r27
    31a6:	af 91       	pop	r26
    31a8:	9f 91       	pop	r25
    31aa:	8f 91       	pop	r24
    31ac:	5f 91       	pop	r21
    31ae:	4f 91       	pop	r20
    31b0:	3f 91       	pop	r19
    31b2:	2f 91       	pop	r18
    31b4:	0f 90       	pop	r0
    31b6:	0b be       	out	0x3b, r0	; 59
    31b8:	0f 90       	pop	r0
    31ba:	0a be       	out	0x3a, r0	; 58
    31bc:	0f 90       	pop	r0
    31be:	09 be       	out	0x39, r0	; 57
    31c0:	0f 90       	pop	r0
    31c2:	08 be       	out	0x38, r0	; 56
    31c4:	0f 90       	pop	r0
    31c6:	0f be       	out	0x3f, r0	; 63
    31c8:	0f 90       	pop	r0
    31ca:	1f 90       	pop	r1
    31cc:	18 95       	reti

000031ce <__vector_28>:
ISR(USARTC1_DRE_vect) {uart_transmit(&udata);}//TX Interrupt
ISR(USARTC1_RXC_vect) {uart_receive(&udata);} //RX Interrupt
    31ce:	1f 92       	push	r1
    31d0:	0f 92       	push	r0
    31d2:	0f b6       	in	r0, 0x3f	; 63
    31d4:	0f 92       	push	r0
    31d6:	08 b6       	in	r0, 0x38	; 56
    31d8:	0f 92       	push	r0
    31da:	09 b6       	in	r0, 0x39	; 57
    31dc:	0f 92       	push	r0
    31de:	0a b6       	in	r0, 0x3a	; 58
    31e0:	0f 92       	push	r0
    31e2:	0b b6       	in	r0, 0x3b	; 59
    31e4:	0f 92       	push	r0
    31e6:	11 24       	eor	r1, r1
    31e8:	2f 93       	push	r18
    31ea:	3f 93       	push	r19
    31ec:	4f 93       	push	r20
    31ee:	5f 93       	push	r21
    31f0:	8f 93       	push	r24
    31f2:	9f 93       	push	r25
    31f4:	af 93       	push	r26
    31f6:	bf 93       	push	r27
    31f8:	cf 93       	push	r28
    31fa:	df 93       	push	r29
    31fc:	ef 93       	push	r30
    31fe:	ff 93       	push	r31
//= RECEPTION ENGINE (ISR BASED)
//==================================

void inline uart_receive(USART_t* port){
	//keep receiving until data register is empty or incoming queue is full
	while (((port->STATUS & _BV(7)) == B8(10000000)) && (uart_icount(port) < MAX_IBUFFER_LEN)){		
    3200:	c0 eb       	ldi	r28, 0xB0	; 176
    3202:	d8 e0       	ldi	r29, 0x08	; 8
	uart_itail[idx] = 0;
}

inline uint16_t uart_icount(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_ihead[idx] >= uart_itail[idx]){	
    3204:	e2 ed       	ldi	r30, 0xD2	; 210
    3206:	fe e3       	ldi	r31, 0x3E	; 62
    3208:	46 ec       	ldi	r20, 0xC6	; 198
    320a:	56 e2       	ldi	r21, 0x26	; 38
    320c:	13 c0       	rjmp	.+38     	; 0x3234 <__vector_28+0x66>
//==================================

void inline uart_receive(USART_t* port){
	//keep receiving until data register is empty or incoming queue is full
	while (((port->STATUS & _BV(7)) == B8(10000000)) && (uart_icount(port) < MAX_IBUFFER_LEN)){		
		uart_ienqueue(port, port->DATA);
    320e:	88 81       	ld	r24, Y
	}
}

inline void uart_ienqueue(USART_t* port, uint8_t datain){
	uint8_t idx = port_map(port);
	uart_ibuffer[idx][uart_ihead[idx]] = datain;
    3210:	a0 81       	ld	r26, Z
    3212:	b1 81       	ldd	r27, Z+1	; 0x01
    3214:	a8 53       	subi	r26, 0x38	; 56
    3216:	b1 4d       	sbci	r27, 0xD1	; 209
    3218:	8c 93       	st	X, r24
	uart_ihead[idx]++;
    321a:	80 81       	ld	r24, Z
    321c:	91 81       	ldd	r25, Z+1	; 0x01
    321e:	01 96       	adiw	r24, 0x01	; 1
    3220:	80 83       	st	Z, r24
    3222:	91 83       	std	Z+1, r25	; 0x01
	if (uart_ihead[idx] >= MAX_IBUFFER_LEN){
    3224:	80 81       	ld	r24, Z
    3226:	91 81       	ldd	r25, Z+1	; 0x01
    3228:	24 e0       	ldi	r18, 0x04	; 4
    322a:	80 30       	cpi	r24, 0x00	; 0
    322c:	92 07       	cpc	r25, r18
    322e:	10 f0       	brcs	.+4      	; 0x3234 <__vector_28+0x66>
		uart_ihead[idx] = 0;
    3230:	10 82       	st	Z, r1
    3232:	11 82       	std	Z+1, r1	; 0x01
//= RECEPTION ENGINE (ISR BASED)
//==================================

void inline uart_receive(USART_t* port){
	//keep receiving until data register is empty or incoming queue is full
	while (((port->STATUS & _BV(7)) == B8(10000000)) && (uart_icount(port) < MAX_IBUFFER_LEN)){		
    3234:	89 81       	ldd	r24, Y+1	; 0x01
    3236:	88 23       	and	r24, r24
    3238:	fc f4       	brge	.+62     	; 0x3278 <__vector_28+0xaa>
	uart_itail[idx] = 0;
}

inline uint16_t uart_icount(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_ihead[idx] >= uart_itail[idx]){	
    323a:	80 81       	ld	r24, Z
    323c:	91 81       	ldd	r25, Z+1	; 0x01
    323e:	da 01       	movw	r26, r20
    3240:	2d 91       	ld	r18, X+
    3242:	3c 91       	ld	r19, X
    3244:	11 97       	sbiw	r26, 0x01	; 1
    3246:	82 17       	cp	r24, r18
    3248:	93 07       	cpc	r25, r19
    324a:	40 f0       	brcs	.+16     	; 0x325c <__vector_28+0x8e>
		return (uart_ihead[idx] - uart_itail[idx]);
    324c:	80 81       	ld	r24, Z
    324e:	91 81       	ldd	r25, Z+1	; 0x01
    3250:	2d 91       	ld	r18, X+
    3252:	3c 91       	ld	r19, X
    3254:	11 97       	sbiw	r26, 0x01	; 1
    3256:	82 1b       	sub	r24, r18
    3258:	93 0b       	sbc	r25, r19
    325a:	0a c0       	rjmp	.+20     	; 0x3270 <__vector_28+0xa2>
	}
	else {
		return ((MAX_IBUFFER_LEN-uart_itail[idx])+uart_ihead[idx]);
    325c:	80 81       	ld	r24, Z
    325e:	91 81       	ldd	r25, Z+1	; 0x01
    3260:	da 01       	movw	r26, r20
    3262:	2d 91       	ld	r18, X+
    3264:	3c 91       	ld	r19, X
    3266:	11 97       	sbiw	r26, 0x01	; 1
    3268:	80 50       	subi	r24, 0x00	; 0
    326a:	9c 4f       	sbci	r25, 0xFC	; 252
    326c:	82 1b       	sub	r24, r18
    326e:	93 0b       	sbc	r25, r19
//= RECEPTION ENGINE (ISR BASED)
//==================================

void inline uart_receive(USART_t* port){
	//keep receiving until data register is empty or incoming queue is full
	while (((port->STATUS & _BV(7)) == B8(10000000)) && (uart_icount(port) < MAX_IBUFFER_LEN)){		
    3270:	b4 e0       	ldi	r27, 0x04	; 4
    3272:	80 30       	cpi	r24, 0x00	; 0
    3274:	9b 07       	cpc	r25, r27
    3276:	58 f2       	brcs	.-106    	; 0x320e <__vector_28+0x40>

//Must correspond to definitions in uart.h
ISR(USARTC0_DRE_vect) {uart_transmit(&uctrl);}//TX Interrupt
ISR(USARTC0_RXC_vect) {uart_receive(&uctrl);} //RX Interrupt
ISR(USARTC1_DRE_vect) {uart_transmit(&udata);}//TX Interrupt
ISR(USARTC1_RXC_vect) {uart_receive(&udata);} //RX Interrupt
    3278:	ff 91       	pop	r31
    327a:	ef 91       	pop	r30
    327c:	df 91       	pop	r29
    327e:	cf 91       	pop	r28
    3280:	bf 91       	pop	r27
    3282:	af 91       	pop	r26
    3284:	9f 91       	pop	r25
    3286:	8f 91       	pop	r24
    3288:	5f 91       	pop	r21
    328a:	4f 91       	pop	r20
    328c:	3f 91       	pop	r19
    328e:	2f 91       	pop	r18
    3290:	0f 90       	pop	r0
    3292:	0b be       	out	0x3b, r0	; 59
    3294:	0f 90       	pop	r0
    3296:	0a be       	out	0x3a, r0	; 58
    3298:	0f 90       	pop	r0
    329a:	09 be       	out	0x39, r0	; 57
    329c:	0f 90       	pop	r0
    329e:	08 be       	out	0x38, r0	; 56
    32a0:	0f 90       	pop	r0
    32a2:	0f be       	out	0x3f, r0	; 63
    32a4:	0f 90       	pop	r0
    32a6:	1f 90       	pop	r1
    32a8:	18 95       	reti

000032aa <uart_rxbuffer_enable>:
		uart_rxbuffer_enable(port);
		uart_txbuffer_enable(port);
}

//Enable Receive Complete (high priority) -- so incoming is always handled first
void uart_rxbuffer_enable(USART_t* port){
    32aa:	fc 01       	movw	r30, r24
	port->CTRLA = (port->CTRLA | B8(00110000));	//Set the Data Register Empty Interrupt to Medium Priority (timer needs to be higher!)
    32ac:	83 81       	ldd	r24, Z+3	; 0x03
    32ae:	80 63       	ori	r24, 0x30	; 48
    32b0:	83 83       	std	Z+3, r24	; 0x03
}
    32b2:	08 95       	ret

000032b4 <uart_rxbuffer_disable>:

void uart_rxbuffer_disable(USART_t* port){
    32b4:	fc 01       	movw	r30, r24
	port->CTRLA = (port->CTRLA & B8(11001111));	//Disable the Data Register Empty Interrupt
    32b6:	83 81       	ldd	r24, Z+3	; 0x03
    32b8:	8f 7c       	andi	r24, 0xCF	; 207
    32ba:	83 83       	std	Z+3, r24	; 0x03
}
    32bc:	08 95       	ret

000032be <uart_txbuffer_enable>:

//Enable Transmit Ready (med priority) 
void uart_txbuffer_enable(USART_t* port){
    32be:	fc 01       	movw	r30, r24
	port->CTRLA = (port->CTRLA | B8(00000010));	//Set the Data Register Empty Interrupt to Medium Priority (timer needs to be higher!)
    32c0:	83 81       	ldd	r24, Z+3	; 0x03
    32c2:	82 60       	ori	r24, 0x02	; 2
    32c4:	83 83       	std	Z+3, r24	; 0x03
}
    32c6:	08 95       	ret

000032c8 <uart_txbuffer_disable>:

void uart_txbuffer_disable(USART_t* port){
    32c8:	fc 01       	movw	r30, r24
	port->CTRLA = (port->CTRLA & B8(11111100));	//Disable the Data Register Empty Interrupt
    32ca:	83 81       	ldd	r24, Z+3	; 0x03
    32cc:	8c 7f       	andi	r24, 0xFC	; 252
    32ce:	83 83       	std	Z+3, r24	; 0x03
}
    32d0:	08 95       	ret

000032d2 <__vector_29>:
//************************************************************************

//Must correspond to definitions in uart.h
ISR(USARTC0_DRE_vect) {uart_transmit(&uctrl);}//TX Interrupt
ISR(USARTC0_RXC_vect) {uart_receive(&uctrl);} //RX Interrupt
ISR(USARTC1_DRE_vect) {uart_transmit(&udata);}//TX Interrupt
    32d2:	1f 92       	push	r1
    32d4:	0f 92       	push	r0
    32d6:	0f b6       	in	r0, 0x3f	; 63
    32d8:	0f 92       	push	r0
    32da:	08 b6       	in	r0, 0x38	; 56
    32dc:	0f 92       	push	r0
    32de:	09 b6       	in	r0, 0x39	; 57
    32e0:	0f 92       	push	r0
    32e2:	0a b6       	in	r0, 0x3a	; 58
    32e4:	0f 92       	push	r0
    32e6:	0b b6       	in	r0, 0x3b	; 59
    32e8:	0f 92       	push	r0
    32ea:	11 24       	eor	r1, r1
    32ec:	2f 93       	push	r18
    32ee:	3f 93       	push	r19
    32f0:	4f 93       	push	r20
    32f2:	5f 93       	push	r21
    32f4:	6f 93       	push	r22
    32f6:	7f 93       	push	r23
    32f8:	8f 93       	push	r24
    32fa:	9f 93       	push	r25
    32fc:	af 93       	push	r26
    32fe:	bf 93       	push	r27
    3300:	cf 93       	push	r28
    3302:	df 93       	push	r29
    3304:	ef 93       	push	r30
    3306:	ff 93       	push	r31
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    3308:	e0 eb       	ldi	r30, 0xB0	; 176
    330a:	f8 e0       	ldi	r31, 0x08	; 8
    330c:	81 81       	ldd	r24, Z+1	; 0x01
    330e:	85 fd       	sbrc	r24, 5
    3310:	1a c0       	rjmp	.+52     	; 0x3346 <__vector_29+0x74>
    3312:	3a c0       	rjmp	.+116    	; 0x3388 <__vector_29+0xb6>
}

inline uint8_t uart_dequeue(USART_t* port){
	uint8_t idx = port_map(port);
	uint16_t oldtail;
	oldtail = uart_tail[idx];
    3314:	20 81       	ld	r18, Z
    3316:	31 81       	ldd	r19, Z+1	; 0x01
	uart_tail[idx]++;
    3318:	80 81       	ld	r24, Z
    331a:	91 81       	ldd	r25, Z+1	; 0x01
    331c:	01 96       	adiw	r24, 0x01	; 1
    331e:	80 83       	st	Z, r24
    3320:	91 83       	std	Z+1, r25	; 0x01
	if (uart_tail[idx] >= MAX_BUFFER_LEN){
    3322:	80 81       	ld	r24, Z
    3324:	91 81       	ldd	r25, Z+1	; 0x01
    3326:	44 e0       	ldi	r20, 0x04	; 4
    3328:	80 30       	cpi	r24, 0x00	; 0
    332a:	94 07       	cpc	r25, r20
    332c:	10 f0       	brcs	.+4      	; 0x3332 <__vector_29+0x60>
		uart_tail[idx] = 0;
    332e:	10 82       	st	Z, r1
    3330:	11 82       	std	Z+1, r1	; 0x01
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    3332:	22 53       	subi	r18, 0x32	; 50
    3334:	35 4c       	sbci	r19, 0xC5	; 197
    3336:	e9 01       	movw	r28, r18
    3338:	88 81       	ld	r24, Y
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
    333a:	eb 01       	movw	r28, r22
    333c:	88 83       	st	Y, r24
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    333e:	89 81       	ldd	r24, Y+1	; 0x01
    3340:	85 fd       	sbrc	r24, 5
    3342:	07 c0       	rjmp	.+14     	; 0x3352 <__vector_29+0x80>
    3344:	21 c0       	rjmp	.+66     	; 0x3388 <__vector_29+0xb6>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    3346:	ac ec       	ldi	r26, 0xCC	; 204
    3348:	b2 e3       	ldi	r27, 0x32	; 50
    334a:	e8 ed       	ldi	r30, 0xD8	; 216
    334c:	fe e3       	ldi	r31, 0x3E	; 62
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
    334e:	60 eb       	ldi	r22, 0xB0	; 176
    3350:	78 e0       	ldi	r23, 0x08	; 8
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    3352:	8d 91       	ld	r24, X+
    3354:	9c 91       	ld	r25, X
    3356:	11 97       	sbiw	r26, 0x01	; 1
    3358:	20 81       	ld	r18, Z
    335a:	31 81       	ldd	r19, Z+1	; 0x01
    335c:	82 17       	cp	r24, r18
    335e:	93 07       	cpc	r25, r19
    3360:	40 f0       	brcs	.+16     	; 0x3372 <__vector_29+0xa0>
		return (uart_head[idx] - uart_tail[idx]);
    3362:	8d 91       	ld	r24, X+
    3364:	9c 91       	ld	r25, X
    3366:	11 97       	sbiw	r26, 0x01	; 1
    3368:	20 81       	ld	r18, Z
    336a:	31 81       	ldd	r19, Z+1	; 0x01
    336c:	82 1b       	sub	r24, r18
    336e:	93 0b       	sbc	r25, r19
    3370:	09 c0       	rjmp	.+18     	; 0x3384 <__vector_29+0xb2>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    3372:	8d 91       	ld	r24, X+
    3374:	9c 91       	ld	r25, X
    3376:	11 97       	sbiw	r26, 0x01	; 1
    3378:	20 81       	ld	r18, Z
    337a:	31 81       	ldd	r19, Z+1	; 0x01
    337c:	80 50       	subi	r24, 0x00	; 0
    337e:	9c 4f       	sbci	r25, 0xFC	; 252
    3380:	82 1b       	sub	r24, r18
    3382:	93 0b       	sbc	r25, r19
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    3384:	00 97       	sbiw	r24, 0x00	; 0
    3386:	31 f6       	brne	.-116    	; 0x3314 <__vector_29+0x42>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    3388:	20 91 cc 32 	lds	r18, 0x32CC
    338c:	30 91 cd 32 	lds	r19, 0x32CD
    3390:	80 91 d8 3e 	lds	r24, 0x3ED8
    3394:	90 91 d9 3e 	lds	r25, 0x3ED9
    3398:	28 17       	cp	r18, r24
    339a:	39 07       	cpc	r19, r25
    339c:	58 f0       	brcs	.+22     	; 0x33b4 <__vector_29+0xe2>
		return (uart_head[idx] - uart_tail[idx]);
    339e:	80 91 cc 32 	lds	r24, 0x32CC
    33a2:	90 91 cd 32 	lds	r25, 0x32CD
    33a6:	20 91 d8 3e 	lds	r18, 0x3ED8
    33aa:	30 91 d9 3e 	lds	r19, 0x3ED9
    33ae:	82 1b       	sub	r24, r18
    33b0:	93 0b       	sbc	r25, r19
    33b2:	0c c0       	rjmp	.+24     	; 0x33cc <__vector_29+0xfa>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    33b4:	80 91 cc 32 	lds	r24, 0x32CC
    33b8:	90 91 cd 32 	lds	r25, 0x32CD
    33bc:	20 91 d8 3e 	lds	r18, 0x3ED8
    33c0:	30 91 d9 3e 	lds	r19, 0x3ED9
    33c4:	80 50       	subi	r24, 0x00	; 0
    33c6:	9c 4f       	sbci	r25, 0xFC	; 252
    33c8:	82 1b       	sub	r24, r18
    33ca:	93 0b       	sbc	r25, r19
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
	}
	//disable the tx outgoing hardware buffer ready interrupt if we have nothing more to put in it.
	if(uart_count(port)>0) uart_txbuffer_enable(port);
    33cc:	00 97       	sbiw	r24, 0x00	; 0
    33ce:	29 f0       	breq	.+10     	; 0x33da <__vector_29+0x108>
    33d0:	80 eb       	ldi	r24, 0xB0	; 176
    33d2:	98 e0       	ldi	r25, 0x08	; 8
    33d4:	0e 94 5f 19 	call	0x32be	; 0x32be <uart_txbuffer_enable>
    33d8:	04 c0       	rjmp	.+8      	; 0x33e2 <__vector_29+0x110>
	else uart_txbuffer_disable(port);
    33da:	80 eb       	ldi	r24, 0xB0	; 176
    33dc:	98 e0       	ldi	r25, 0x08	; 8
    33de:	0e 94 64 19 	call	0x32c8	; 0x32c8 <uart_txbuffer_disable>
//************************************************************************

//Must correspond to definitions in uart.h
ISR(USARTC0_DRE_vect) {uart_transmit(&uctrl);}//TX Interrupt
ISR(USARTC0_RXC_vect) {uart_receive(&uctrl);} //RX Interrupt
ISR(USARTC1_DRE_vect) {uart_transmit(&udata);}//TX Interrupt
    33e2:	ff 91       	pop	r31
    33e4:	ef 91       	pop	r30
    33e6:	df 91       	pop	r29
    33e8:	cf 91       	pop	r28
    33ea:	bf 91       	pop	r27
    33ec:	af 91       	pop	r26
    33ee:	9f 91       	pop	r25
    33f0:	8f 91       	pop	r24
    33f2:	7f 91       	pop	r23
    33f4:	6f 91       	pop	r22
    33f6:	5f 91       	pop	r21
    33f8:	4f 91       	pop	r20
    33fa:	3f 91       	pop	r19
    33fc:	2f 91       	pop	r18
    33fe:	0f 90       	pop	r0
    3400:	0b be       	out	0x3b, r0	; 59
    3402:	0f 90       	pop	r0
    3404:	0a be       	out	0x3a, r0	; 58
    3406:	0f 90       	pop	r0
    3408:	09 be       	out	0x39, r0	; 57
    340a:	0f 90       	pop	r0
    340c:	08 be       	out	0x38, r0	; 56
    340e:	0f 90       	pop	r0
    3410:	0f be       	out	0x3f, r0	; 63
    3412:	0f 90       	pop	r0
    3414:	1f 90       	pop	r1
    3416:	18 95       	reti

00003418 <__vector_26>:
//** [PORT SPECIFIC CODE]
//************************************************************************
//************************************************************************

//Must correspond to definitions in uart.h
ISR(USARTC0_DRE_vect) {uart_transmit(&uctrl);}//TX Interrupt
    3418:	1f 92       	push	r1
    341a:	0f 92       	push	r0
    341c:	0f b6       	in	r0, 0x3f	; 63
    341e:	0f 92       	push	r0
    3420:	08 b6       	in	r0, 0x38	; 56
    3422:	0f 92       	push	r0
    3424:	09 b6       	in	r0, 0x39	; 57
    3426:	0f 92       	push	r0
    3428:	0a b6       	in	r0, 0x3a	; 58
    342a:	0f 92       	push	r0
    342c:	0b b6       	in	r0, 0x3b	; 59
    342e:	0f 92       	push	r0
    3430:	11 24       	eor	r1, r1
    3432:	2f 93       	push	r18
    3434:	3f 93       	push	r19
    3436:	4f 93       	push	r20
    3438:	5f 93       	push	r21
    343a:	6f 93       	push	r22
    343c:	7f 93       	push	r23
    343e:	8f 93       	push	r24
    3440:	9f 93       	push	r25
    3442:	af 93       	push	r26
    3444:	bf 93       	push	r27
    3446:	cf 93       	push	r28
    3448:	df 93       	push	r29
    344a:	ef 93       	push	r30
    344c:	ff 93       	push	r31
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    344e:	e0 ea       	ldi	r30, 0xA0	; 160
    3450:	f8 e0       	ldi	r31, 0x08	; 8
    3452:	81 81       	ldd	r24, Z+1	; 0x01
    3454:	85 fd       	sbrc	r24, 5
    3456:	1a c0       	rjmp	.+52     	; 0x348c <__vector_26+0x74>
    3458:	3a c0       	rjmp	.+116    	; 0x34ce <__vector_26+0xb6>
}

inline uint8_t uart_dequeue(USART_t* port){
	uint8_t idx = port_map(port);
	uint16_t oldtail;
	oldtail = uart_tail[idx];
    345a:	20 81       	ld	r18, Z
    345c:	31 81       	ldd	r19, Z+1	; 0x01
	uart_tail[idx]++;
    345e:	80 81       	ld	r24, Z
    3460:	91 81       	ldd	r25, Z+1	; 0x01
    3462:	01 96       	adiw	r24, 0x01	; 1
    3464:	80 83       	st	Z, r24
    3466:	91 83       	std	Z+1, r25	; 0x01
	if (uart_tail[idx] >= MAX_BUFFER_LEN){
    3468:	80 81       	ld	r24, Z
    346a:	91 81       	ldd	r25, Z+1	; 0x01
    346c:	44 e0       	ldi	r20, 0x04	; 4
    346e:	80 30       	cpi	r24, 0x00	; 0
    3470:	94 07       	cpc	r25, r20
    3472:	10 f0       	brcs	.+4      	; 0x3478 <__vector_26+0x60>
		uart_tail[idx] = 0;
    3474:	10 82       	st	Z, r1
    3476:	11 82       	std	Z+1, r1	; 0x01
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    3478:	22 53       	subi	r18, 0x32	; 50
    347a:	39 4c       	sbci	r19, 0xC9	; 201
    347c:	e9 01       	movw	r28, r18
    347e:	88 81       	ld	r24, Y
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
    3480:	eb 01       	movw	r28, r22
    3482:	88 83       	st	Y, r24
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    3484:	89 81       	ldd	r24, Y+1	; 0x01
    3486:	85 fd       	sbrc	r24, 5
    3488:	07 c0       	rjmp	.+14     	; 0x3498 <__vector_26+0x80>
    348a:	21 c0       	rjmp	.+66     	; 0x34ce <__vector_26+0xb6>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    348c:	aa ec       	ldi	r26, 0xCA	; 202
    348e:	b2 e3       	ldi	r27, 0x32	; 50
    3490:	e6 ed       	ldi	r30, 0xD6	; 214
    3492:	fe e3       	ldi	r31, 0x3E	; 62
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
    3494:	60 ea       	ldi	r22, 0xA0	; 160
    3496:	78 e0       	ldi	r23, 0x08	; 8
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    3498:	8d 91       	ld	r24, X+
    349a:	9c 91       	ld	r25, X
    349c:	11 97       	sbiw	r26, 0x01	; 1
    349e:	20 81       	ld	r18, Z
    34a0:	31 81       	ldd	r19, Z+1	; 0x01
    34a2:	82 17       	cp	r24, r18
    34a4:	93 07       	cpc	r25, r19
    34a6:	40 f0       	brcs	.+16     	; 0x34b8 <__vector_26+0xa0>
		return (uart_head[idx] - uart_tail[idx]);
    34a8:	8d 91       	ld	r24, X+
    34aa:	9c 91       	ld	r25, X
    34ac:	11 97       	sbiw	r26, 0x01	; 1
    34ae:	20 81       	ld	r18, Z
    34b0:	31 81       	ldd	r19, Z+1	; 0x01
    34b2:	82 1b       	sub	r24, r18
    34b4:	93 0b       	sbc	r25, r19
    34b6:	09 c0       	rjmp	.+18     	; 0x34ca <__vector_26+0xb2>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    34b8:	8d 91       	ld	r24, X+
    34ba:	9c 91       	ld	r25, X
    34bc:	11 97       	sbiw	r26, 0x01	; 1
    34be:	20 81       	ld	r18, Z
    34c0:	31 81       	ldd	r19, Z+1	; 0x01
    34c2:	80 50       	subi	r24, 0x00	; 0
    34c4:	9c 4f       	sbci	r25, 0xFC	; 252
    34c6:	82 1b       	sub	r24, r18
    34c8:	93 0b       	sbc	r25, r19
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    34ca:	00 97       	sbiw	r24, 0x00	; 0
    34cc:	31 f6       	brne	.-116    	; 0x345a <__vector_26+0x42>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    34ce:	20 91 ca 32 	lds	r18, 0x32CA
    34d2:	30 91 cb 32 	lds	r19, 0x32CB
    34d6:	80 91 d6 3e 	lds	r24, 0x3ED6
    34da:	90 91 d7 3e 	lds	r25, 0x3ED7
    34de:	28 17       	cp	r18, r24
    34e0:	39 07       	cpc	r19, r25
    34e2:	58 f0       	brcs	.+22     	; 0x34fa <__vector_26+0xe2>
		return (uart_head[idx] - uart_tail[idx]);
    34e4:	80 91 ca 32 	lds	r24, 0x32CA
    34e8:	90 91 cb 32 	lds	r25, 0x32CB
    34ec:	20 91 d6 3e 	lds	r18, 0x3ED6
    34f0:	30 91 d7 3e 	lds	r19, 0x3ED7
    34f4:	82 1b       	sub	r24, r18
    34f6:	93 0b       	sbc	r25, r19
    34f8:	0c c0       	rjmp	.+24     	; 0x3512 <__vector_26+0xfa>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    34fa:	80 91 ca 32 	lds	r24, 0x32CA
    34fe:	90 91 cb 32 	lds	r25, 0x32CB
    3502:	20 91 d6 3e 	lds	r18, 0x3ED6
    3506:	30 91 d7 3e 	lds	r19, 0x3ED7
    350a:	80 50       	subi	r24, 0x00	; 0
    350c:	9c 4f       	sbci	r25, 0xFC	; 252
    350e:	82 1b       	sub	r24, r18
    3510:	93 0b       	sbc	r25, r19
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
	}
	//disable the tx outgoing hardware buffer ready interrupt if we have nothing more to put in it.
	if(uart_count(port)>0) uart_txbuffer_enable(port);
    3512:	00 97       	sbiw	r24, 0x00	; 0
    3514:	29 f0       	breq	.+10     	; 0x3520 <__vector_26+0x108>
    3516:	80 ea       	ldi	r24, 0xA0	; 160
    3518:	98 e0       	ldi	r25, 0x08	; 8
    351a:	0e 94 5f 19 	call	0x32be	; 0x32be <uart_txbuffer_enable>
    351e:	04 c0       	rjmp	.+8      	; 0x3528 <__vector_26+0x110>
	else uart_txbuffer_disable(port);
    3520:	80 ea       	ldi	r24, 0xA0	; 160
    3522:	98 e0       	ldi	r25, 0x08	; 8
    3524:	0e 94 64 19 	call	0x32c8	; 0x32c8 <uart_txbuffer_disable>
//** [PORT SPECIFIC CODE]
//************************************************************************
//************************************************************************

//Must correspond to definitions in uart.h
ISR(USARTC0_DRE_vect) {uart_transmit(&uctrl);}//TX Interrupt
    3528:	ff 91       	pop	r31
    352a:	ef 91       	pop	r30
    352c:	df 91       	pop	r29
    352e:	cf 91       	pop	r28
    3530:	bf 91       	pop	r27
    3532:	af 91       	pop	r26
    3534:	9f 91       	pop	r25
    3536:	8f 91       	pop	r24
    3538:	7f 91       	pop	r23
    353a:	6f 91       	pop	r22
    353c:	5f 91       	pop	r21
    353e:	4f 91       	pop	r20
    3540:	3f 91       	pop	r19
    3542:	2f 91       	pop	r18
    3544:	0f 90       	pop	r0
    3546:	0b be       	out	0x3b, r0	; 59
    3548:	0f 90       	pop	r0
    354a:	0a be       	out	0x3a, r0	; 58
    354c:	0f 90       	pop	r0
    354e:	09 be       	out	0x39, r0	; 57
    3550:	0f 90       	pop	r0
    3552:	08 be       	out	0x38, r0	; 56
    3554:	0f 90       	pop	r0
    3556:	0f be       	out	0x3f, r0	; 63
    3558:	0f 90       	pop	r0
    355a:	1f 90       	pop	r1
    355c:	18 95       	reti

0000355e <uart_transmit>:
//==================================

//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
    355e:	0f 93       	push	r16
    3560:	1f 93       	push	r17
    3562:	cf 93       	push	r28
    3564:	df 93       	push	r29
    3566:	dc 01       	movw	r26, r24
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    3568:	11 96       	adiw	r26, 0x01	; 1
    356a:	8c 91       	ld	r24, X
    356c:	11 97       	sbiw	r26, 0x01	; 1
    356e:	85 fd       	sbrc	r24, 5
    3570:	42 c0       	rjmp	.+132    	; 0x35f6 <uart_transmit+0x98>
    3572:	91 c0       	rjmp	.+290    	; 0x3696 <uart_transmit+0x138>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    3574:	2b e0       	ldi	r18, 0x0B	; 11
    3576:	a0 3b       	cpi	r26, 0xB0	; 176
    3578:	b2 07       	cpc	r27, r18
    357a:	51 f0       	breq	.+20     	; 0x3590 <uart_transmit+0x32>
	if (port == &uctrl) {return 1;}
    357c:	38 e0       	ldi	r19, 0x08	; 8
    357e:	a0 3a       	cpi	r26, 0xA0	; 160
    3580:	b3 07       	cpc	r27, r19
    3582:	41 f0       	breq	.+16     	; 0x3594 <uart_transmit+0x36>
	if (port == &udata) {return 2;}
    3584:	88 e0       	ldi	r24, 0x08	; 8
    3586:	a0 3b       	cpi	r26, 0xB0	; 176
    3588:	b8 07       	cpc	r27, r24
    358a:	31 f4       	brne	.+12     	; 0x3598 <uart_transmit+0x3a>
    358c:	22 e0       	ldi	r18, 0x02	; 2
    358e:	05 c0       	rjmp	.+10     	; 0x359a <uart_transmit+0x3c>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    3590:	20 e0       	ldi	r18, 0x00	; 0
    3592:	03 c0       	rjmp	.+6      	; 0x359a <uart_transmit+0x3c>
	if (port == &uctrl) {return 1;}
    3594:	21 e0       	ldi	r18, 0x01	; 1
    3596:	01 c0       	rjmp	.+2      	; 0x359a <uart_transmit+0x3c>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    3598:	20 e0       	ldi	r18, 0x00	; 0
}

inline uint8_t uart_dequeue(USART_t* port){
	uint8_t idx = port_map(port);
	uint16_t oldtail;
	oldtail = uart_tail[idx];
    359a:	30 e0       	ldi	r19, 0x00	; 0
    359c:	c9 01       	movw	r24, r18
    359e:	88 0f       	add	r24, r24
    35a0:	99 1f       	adc	r25, r25
    35a2:	fb 01       	movw	r30, r22
    35a4:	e8 0f       	add	r30, r24
    35a6:	f9 1f       	adc	r31, r25
    35a8:	40 81       	ld	r20, Z
    35aa:	51 81       	ldd	r21, Z+1	; 0x01
	uart_tail[idx]++;
    35ac:	80 81       	ld	r24, Z
    35ae:	91 81       	ldd	r25, Z+1	; 0x01
    35b0:	01 96       	adiw	r24, 0x01	; 1
    35b2:	80 83       	st	Z, r24
    35b4:	91 83       	std	Z+1, r25	; 0x01
	if (uart_tail[idx] >= MAX_BUFFER_LEN){
    35b6:	80 81       	ld	r24, Z
    35b8:	91 81       	ldd	r25, Z+1	; 0x01
    35ba:	e4 e0       	ldi	r30, 0x04	; 4
    35bc:	80 30       	cpi	r24, 0x00	; 0
    35be:	9e 07       	cpc	r25, r30
    35c0:	40 f0       	brcs	.+16     	; 0x35d2 <uart_transmit+0x74>
		uart_tail[idx] = 0;
    35c2:	c9 01       	movw	r24, r18
    35c4:	88 0f       	add	r24, r24
    35c6:	99 1f       	adc	r25, r25
    35c8:	86 0f       	add	r24, r22
    35ca:	97 1f       	adc	r25, r23
    35cc:	fc 01       	movw	r30, r24
    35ce:	10 82       	st	Z, r1
    35d0:	11 82       	std	Z+1, r1	; 0x01
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    35d2:	c9 01       	movw	r24, r18
    35d4:	98 2f       	mov	r25, r24
    35d6:	88 27       	eor	r24, r24
    35d8:	99 0f       	add	r25, r25
    35da:	99 0f       	add	r25, r25
    35dc:	84 0f       	add	r24, r20
    35de:	95 1f       	adc	r25, r21
    35e0:	f8 01       	movw	r30, r16
    35e2:	e8 0f       	add	r30, r24
    35e4:	f9 1f       	adc	r31, r25
    35e6:	80 81       	ld	r24, Z
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
    35e8:	8c 93       	st	X, r24
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    35ea:	11 96       	adiw	r26, 0x01	; 1
    35ec:	8c 91       	ld	r24, X
    35ee:	11 97       	sbiw	r26, 0x01	; 1
    35f0:	85 fd       	sbrc	r24, 5
    35f2:	07 c0       	rjmp	.+14     	; 0x3602 <uart_transmit+0xa4>
    35f4:	50 c0       	rjmp	.+160    	; 0x3696 <uart_transmit+0x138>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    35f6:	c8 ec       	ldi	r28, 0xC8	; 200
    35f8:	d2 e3       	ldi	r29, 0x32	; 50
    35fa:	64 ed       	ldi	r22, 0xD4	; 212
    35fc:	7e e3       	ldi	r23, 0x3E	; 62
		uart_tail[idx] = 0;
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    35fe:	0e ec       	ldi	r16, 0xCE	; 206
    3600:	12 e3       	ldi	r17, 0x32	; 50
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    3602:	fb e0       	ldi	r31, 0x0B	; 11
    3604:	a0 3b       	cpi	r26, 0xB0	; 176
    3606:	bf 07       	cpc	r27, r31
    3608:	51 f0       	breq	.+20     	; 0x361e <uart_transmit+0xc0>
	if (port == &uctrl) {return 1;}
    360a:	28 e0       	ldi	r18, 0x08	; 8
    360c:	a0 3a       	cpi	r26, 0xA0	; 160
    360e:	b2 07       	cpc	r27, r18
    3610:	41 f0       	breq	.+16     	; 0x3622 <uart_transmit+0xc4>
	if (port == &udata) {return 2;}
    3612:	38 e0       	ldi	r19, 0x08	; 8
    3614:	a0 3b       	cpi	r26, 0xB0	; 176
    3616:	b3 07       	cpc	r27, r19
    3618:	31 f4       	brne	.+12     	; 0x3626 <uart_transmit+0xc8>
    361a:	22 e0       	ldi	r18, 0x02	; 2
    361c:	05 c0       	rjmp	.+10     	; 0x3628 <uart_transmit+0xca>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    361e:	20 e0       	ldi	r18, 0x00	; 0
    3620:	03 c0       	rjmp	.+6      	; 0x3628 <uart_transmit+0xca>
	if (port == &uctrl) {return 1;}
    3622:	21 e0       	ldi	r18, 0x01	; 1
    3624:	01 c0       	rjmp	.+2      	; 0x3628 <uart_transmit+0xca>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    3626:	20 e0       	ldi	r18, 0x00	; 0
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    3628:	30 e0       	ldi	r19, 0x00	; 0
    362a:	c9 01       	movw	r24, r18
    362c:	88 0f       	add	r24, r24
    362e:	99 1f       	adc	r25, r25
    3630:	fe 01       	movw	r30, r28
    3632:	e8 0f       	add	r30, r24
    3634:	f9 1f       	adc	r31, r25
    3636:	40 81       	ld	r20, Z
    3638:	51 81       	ldd	r21, Z+1	; 0x01
    363a:	fb 01       	movw	r30, r22
    363c:	e8 0f       	add	r30, r24
    363e:	f9 1f       	adc	r31, r25
    3640:	80 81       	ld	r24, Z
    3642:	91 81       	ldd	r25, Z+1	; 0x01
    3644:	48 17       	cp	r20, r24
    3646:	59 07       	cpc	r21, r25
    3648:	88 f0       	brcs	.+34     	; 0x366c <uart_transmit+0x10e>
		return (uart_head[idx] - uart_tail[idx]);
    364a:	22 0f       	add	r18, r18
    364c:	33 1f       	adc	r19, r19
    364e:	fe 01       	movw	r30, r28
    3650:	e2 0f       	add	r30, r18
    3652:	f3 1f       	adc	r31, r19
    3654:	40 81       	ld	r20, Z
    3656:	51 81       	ldd	r21, Z+1	; 0x01
    3658:	fb 01       	movw	r30, r22
    365a:	e2 0f       	add	r30, r18
    365c:	f3 1f       	adc	r31, r19
    365e:	80 81       	ld	r24, Z
    3660:	91 81       	ldd	r25, Z+1	; 0x01
    3662:	fa 01       	movw	r30, r20
    3664:	e8 1b       	sub	r30, r24
    3666:	f9 0b       	sbc	r31, r25
    3668:	cf 01       	movw	r24, r30
    366a:	12 c0       	rjmp	.+36     	; 0x3690 <uart_transmit+0x132>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    366c:	c9 01       	movw	r24, r18
    366e:	88 0f       	add	r24, r24
    3670:	99 1f       	adc	r25, r25
    3672:	fe 01       	movw	r30, r28
    3674:	e8 0f       	add	r30, r24
    3676:	f9 1f       	adc	r31, r25
    3678:	40 81       	ld	r20, Z
    367a:	51 81       	ldd	r21, Z+1	; 0x01
    367c:	fb 01       	movw	r30, r22
    367e:	e8 0f       	add	r30, r24
    3680:	f9 1f       	adc	r31, r25
    3682:	20 81       	ld	r18, Z
    3684:	31 81       	ldd	r19, Z+1	; 0x01
    3686:	ca 01       	movw	r24, r20
    3688:	80 50       	subi	r24, 0x00	; 0
    368a:	9c 4f       	sbci	r25, 0xFC	; 252
    368c:	82 1b       	sub	r24, r18
    368e:	93 0b       	sbc	r25, r19
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    3690:	00 97       	sbiw	r24, 0x00	; 0
    3692:	09 f0       	breq	.+2      	; 0x3696 <uart_transmit+0x138>
    3694:	6f cf       	rjmp	.-290    	; 0x3574 <uart_transmit+0x16>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    3696:	fb e0       	ldi	r31, 0x0B	; 11
    3698:	a0 3b       	cpi	r26, 0xB0	; 176
    369a:	bf 07       	cpc	r27, r31
    369c:	51 f0       	breq	.+20     	; 0x36b2 <uart_transmit+0x154>
	if (port == &uctrl) {return 1;}
    369e:	28 e0       	ldi	r18, 0x08	; 8
    36a0:	a0 3a       	cpi	r26, 0xA0	; 160
    36a2:	b2 07       	cpc	r27, r18
    36a4:	41 f0       	breq	.+16     	; 0x36b6 <uart_transmit+0x158>
	if (port == &udata) {return 2;}
    36a6:	38 e0       	ldi	r19, 0x08	; 8
    36a8:	a0 3b       	cpi	r26, 0xB0	; 176
    36aa:	b3 07       	cpc	r27, r19
    36ac:	31 f4       	brne	.+12     	; 0x36ba <uart_transmit+0x15c>
    36ae:	22 e0       	ldi	r18, 0x02	; 2
    36b0:	05 c0       	rjmp	.+10     	; 0x36bc <uart_transmit+0x15e>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    36b2:	20 e0       	ldi	r18, 0x00	; 0
    36b4:	03 c0       	rjmp	.+6      	; 0x36bc <uart_transmit+0x15e>
	if (port == &uctrl) {return 1;}
    36b6:	21 e0       	ldi	r18, 0x01	; 1
    36b8:	01 c0       	rjmp	.+2      	; 0x36bc <uart_transmit+0x15e>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    36ba:	20 e0       	ldi	r18, 0x00	; 0
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    36bc:	30 e0       	ldi	r19, 0x00	; 0
    36be:	c9 01       	movw	r24, r18
    36c0:	88 0f       	add	r24, r24
    36c2:	99 1f       	adc	r25, r25
    36c4:	fc 01       	movw	r30, r24
    36c6:	e8 53       	subi	r30, 0x38	; 56
    36c8:	fd 4c       	sbci	r31, 0xCD	; 205
    36ca:	40 81       	ld	r20, Z
    36cc:	51 81       	ldd	r21, Z+1	; 0x01
    36ce:	8c 52       	subi	r24, 0x2C	; 44
    36d0:	91 4c       	sbci	r25, 0xC1	; 193
    36d2:	fc 01       	movw	r30, r24
    36d4:	80 81       	ld	r24, Z
    36d6:	91 81       	ldd	r25, Z+1	; 0x01
    36d8:	48 17       	cp	r20, r24
    36da:	59 07       	cpc	r21, r25
    36dc:	78 f0       	brcs	.+30     	; 0x36fc <uart_transmit+0x19e>
		return (uart_head[idx] - uart_tail[idx]);
    36de:	22 0f       	add	r18, r18
    36e0:	33 1f       	adc	r19, r19
    36e2:	f9 01       	movw	r30, r18
    36e4:	e8 53       	subi	r30, 0x38	; 56
    36e6:	fd 4c       	sbci	r31, 0xCD	; 205
    36e8:	40 81       	ld	r20, Z
    36ea:	51 81       	ldd	r21, Z+1	; 0x01
    36ec:	2c 52       	subi	r18, 0x2C	; 44
    36ee:	31 4c       	sbci	r19, 0xC1	; 193
    36f0:	f9 01       	movw	r30, r18
    36f2:	80 81       	ld	r24, Z
    36f4:	91 81       	ldd	r25, Z+1	; 0x01
    36f6:	48 1b       	sub	r20, r24
    36f8:	59 0b       	sbc	r21, r25
    36fa:	10 c0       	rjmp	.+32     	; 0x371c <uart_transmit+0x1be>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    36fc:	22 0f       	add	r18, r18
    36fe:	33 1f       	adc	r19, r19
    3700:	f9 01       	movw	r30, r18
    3702:	e8 53       	subi	r30, 0x38	; 56
    3704:	fd 4c       	sbci	r31, 0xCD	; 205
    3706:	40 81       	ld	r20, Z
    3708:	51 81       	ldd	r21, Z+1	; 0x01
    370a:	2c 52       	subi	r18, 0x2C	; 44
    370c:	31 4c       	sbci	r19, 0xC1	; 193
    370e:	f9 01       	movw	r30, r18
    3710:	80 81       	ld	r24, Z
    3712:	91 81       	ldd	r25, Z+1	; 0x01
    3714:	40 50       	subi	r20, 0x00	; 0
    3716:	5c 4f       	sbci	r21, 0xFC	; 252
    3718:	48 1b       	sub	r20, r24
    371a:	59 0b       	sbc	r21, r25
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
	}
	//disable the tx outgoing hardware buffer ready interrupt if we have nothing more to put in it.
	if(uart_count(port)>0) uart_txbuffer_enable(port);
    371c:	41 15       	cp	r20, r1
    371e:	51 05       	cpc	r21, r1
    3720:	21 f0       	breq	.+8      	; 0x372a <uart_transmit+0x1cc>
    3722:	cd 01       	movw	r24, r26
    3724:	0e 94 5f 19 	call	0x32be	; 0x32be <uart_txbuffer_enable>
    3728:	03 c0       	rjmp	.+6      	; 0x3730 <uart_transmit+0x1d2>
	else uart_txbuffer_disable(port);
    372a:	cd 01       	movw	r24, r26
    372c:	0e 94 64 19 	call	0x32c8	; 0x32c8 <uart_txbuffer_disable>
}
    3730:	df 91       	pop	r29
    3732:	cf 91       	pop	r28
    3734:	1f 91       	pop	r17
    3736:	0f 91       	pop	r16
    3738:	08 95       	ret

0000373a <uart_transmit_lcd>:

void inline uart_transmit_lcd(USART_t* port){
    373a:	3f 92       	push	r3
    373c:	4f 92       	push	r4
    373e:	5f 92       	push	r5
    3740:	6f 92       	push	r6
    3742:	7f 92       	push	r7
    3744:	8f 92       	push	r8
    3746:	9f 92       	push	r9
    3748:	af 92       	push	r10
    374a:	bf 92       	push	r11
    374c:	cf 92       	push	r12
    374e:	df 92       	push	r13
    3750:	ef 92       	push	r14
    3752:	ff 92       	push	r15
    3754:	0f 93       	push	r16
    3756:	1f 93       	push	r17
    3758:	cf 93       	push	r28
    375a:	df 93       	push	r29
    375c:	5c 01       	movw	r10, r24
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    375e:	0f 2e       	mov	r0, r31
    3760:	f8 ec       	ldi	r31, 0xC8	; 200
    3762:	6f 2e       	mov	r6, r31
    3764:	f2 e3       	ldi	r31, 0x32	; 50
    3766:	7f 2e       	mov	r7, r31
    3768:	f0 2d       	mov	r31, r0
    376a:	0f 2e       	mov	r0, r31
    376c:	f4 ed       	ldi	r31, 0xD4	; 212
    376e:	8f 2e       	mov	r8, r31
    3770:	fe e3       	ldi	r31, 0x3E	; 62
    3772:	9f 2e       	mov	r9, r31
    3774:	f0 2d       	mov	r31, r0
		uart_tail[idx] = 0;
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    3776:	0f 2e       	mov	r0, r31
    3778:	fe ec       	ldi	r31, 0xCE	; 206
    377a:	4f 2e       	mov	r4, r31
    377c:	f2 e3       	ldi	r31, 0x32	; 50
    377e:	5f 2e       	mov	r5, r31
    3780:	f0 2d       	mov	r31, r0
#ifndef UART_DEBUG
	uint8_t idx = port_map(port);
	
	//if (idx==0){uart_enqueue(&uctrl, datain);} //xxx
	
	uart_buffer[idx][uart_head[idx]] = datain;
    3782:	0c ec       	ldi	r16, 0xCC	; 204
    3784:	12 e3       	ldi	r17, 0x32	; 50
    3786:	0f 2e       	mov	r0, r31
    3788:	f0 e6       	ldi	r31, 0x60	; 96
    378a:	cf 2e       	mov	r12, r31
    378c:	f0 2d       	mov	r31, r0
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    378e:	0f 2e       	mov	r0, r31
    3790:	f0 eb       	ldi	r31, 0xB0	; 176
    3792:	ef 2e       	mov	r14, r31
    3794:	f8 e0       	ldi	r31, 0x08	; 8
    3796:	ff 2e       	mov	r15, r31
    3798:	f0 2d       	mov	r31, r0
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    379a:	c8 ed       	ldi	r28, 0xD8	; 216
    379c:	de e3       	ldi	r29, 0x3E	; 62
				//Header byte just describes payload -- do not send to LCD
				lcd_flow_type = toSend;
				break;
			default:
				//Payload bytes -- send to LCD
				if (toSend == 0x0D) {lcd_flow_control = LCD_BUSY;}
    379e:	0f 2e       	mov	r0, r31
    37a0:	fe e4       	ldi	r31, 0x4E	; 78
    37a2:	3f 2e       	mov	r3, r31
    37a4:	f0 2d       	mov	r31, r0
}

void inline uart_transmit_lcd(USART_t* port){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0) && (lcd_flow_control == LCD_READY)){
    37a6:	27 c1       	rjmp	.+590    	; 0x39f6 <uart_transmit_lcd+0x2bc>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    37a8:	20 eb       	ldi	r18, 0xB0	; 176
    37aa:	a2 16       	cp	r10, r18
    37ac:	2b e0       	ldi	r18, 0x0B	; 11
    37ae:	b2 06       	cpc	r11, r18
    37b0:	61 f0       	breq	.+24     	; 0x37ca <uart_transmit_lcd+0x90>
	if (port == &uctrl) {return 1;}
    37b2:	30 ea       	ldi	r19, 0xA0	; 160
    37b4:	a3 16       	cp	r10, r19
    37b6:	38 e0       	ldi	r19, 0x08	; 8
    37b8:	b3 06       	cpc	r11, r19
    37ba:	49 f0       	breq	.+18     	; 0x37ce <uart_transmit_lcd+0x94>
	if (port == &udata) {return 2;}
    37bc:	60 eb       	ldi	r22, 0xB0	; 176
    37be:	a6 16       	cp	r10, r22
    37c0:	68 e0       	ldi	r22, 0x08	; 8
    37c2:	b6 06       	cpc	r11, r22
    37c4:	31 f4       	brne	.+12     	; 0x37d2 <uart_transmit_lcd+0x98>
    37c6:	22 e0       	ldi	r18, 0x02	; 2
    37c8:	05 c0       	rjmp	.+10     	; 0x37d4 <uart_transmit_lcd+0x9a>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    37ca:	20 e0       	ldi	r18, 0x00	; 0
    37cc:	03 c0       	rjmp	.+6      	; 0x37d4 <uart_transmit_lcd+0x9a>
	if (port == &uctrl) {return 1;}
    37ce:	21 e0       	ldi	r18, 0x01	; 1
    37d0:	01 c0       	rjmp	.+2      	; 0x37d4 <uart_transmit_lcd+0x9a>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    37d2:	20 e0       	ldi	r18, 0x00	; 0
}

inline uint8_t uart_dequeue(USART_t* port){
	uint8_t idx = port_map(port);
	uint16_t oldtail;
	oldtail = uart_tail[idx];
    37d4:	30 e0       	ldi	r19, 0x00	; 0
    37d6:	c9 01       	movw	r24, r18
    37d8:	88 0f       	add	r24, r24
    37da:	99 1f       	adc	r25, r25
    37dc:	f4 01       	movw	r30, r8
    37de:	e8 0f       	add	r30, r24
    37e0:	f9 1f       	adc	r31, r25
    37e2:	40 81       	ld	r20, Z
    37e4:	51 81       	ldd	r21, Z+1	; 0x01
	uart_tail[idx]++;
    37e6:	80 81       	ld	r24, Z
    37e8:	91 81       	ldd	r25, Z+1	; 0x01
    37ea:	01 96       	adiw	r24, 0x01	; 1
    37ec:	80 83       	st	Z, r24
    37ee:	91 83       	std	Z+1, r25	; 0x01
	if (uart_tail[idx] >= MAX_BUFFER_LEN){
    37f0:	80 81       	ld	r24, Z
    37f2:	91 81       	ldd	r25, Z+1	; 0x01
    37f4:	e4 e0       	ldi	r30, 0x04	; 4
    37f6:	80 30       	cpi	r24, 0x00	; 0
    37f8:	9e 07       	cpc	r25, r30
    37fa:	40 f0       	brcs	.+16     	; 0x380c <uart_transmit_lcd+0xd2>
		uart_tail[idx] = 0;
    37fc:	c9 01       	movw	r24, r18
    37fe:	88 0f       	add	r24, r24
    3800:	99 1f       	adc	r25, r25
    3802:	88 0d       	add	r24, r8
    3804:	99 1d       	adc	r25, r9
    3806:	fc 01       	movw	r30, r24
    3808:	10 82       	st	Z, r1
    380a:	11 82       	std	Z+1, r1	; 0x01
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    380c:	c9 01       	movw	r24, r18
    380e:	98 2f       	mov	r25, r24
    3810:	88 27       	eor	r24, r24
    3812:	99 0f       	add	r25, r25
    3814:	99 0f       	add	r25, r25
    3816:	84 0f       	add	r24, r20
    3818:	95 1f       	adc	r25, r21
    381a:	84 0d       	add	r24, r4
    381c:	95 1d       	adc	r25, r5
    381e:	fc 01       	movw	r30, r24
    3820:	d0 80       	ld	r13, Z
void inline uart_transmit_lcd(USART_t* port){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0) && (lcd_flow_control == LCD_READY)){
		toSend = uart_dequeue(port);
		switch(toSend){
    3822:	fa ef       	ldi	r31, 0xFA	; 250
    3824:	df 16       	cp	r13, r31
    3826:	19 f0       	breq	.+6      	; 0x382e <uart_transmit_lcd+0xf4>
    3828:	2e ef       	ldi	r18, 0xFE	; 254
    382a:	d2 16       	cp	r13, r18
    382c:	19 f4       	brne	.+6      	; 0x3834 <uart_transmit_lcd+0xfa>
			case LCD_COMMAND:
			case LCD_MACRO:
				//Header byte just describes payload -- do not send to LCD
				lcd_flow_type = toSend;
    382e:	d0 92 ae 26 	sts	0x26AE, r13
				break;
    3832:	e1 c0       	rjmp	.+450    	; 0x39f6 <uart_transmit_lcd+0x2bc>
			default:
				//Payload bytes -- send to LCD
				if (toSend == 0x0D) {lcd_flow_control = LCD_BUSY;}
    3834:	3d e0       	ldi	r19, 0x0D	; 13
    3836:	d3 16       	cp	r13, r19
    3838:	11 f4       	brne	.+4      	; 0x383e <uart_transmit_lcd+0x104>
    383a:	30 92 b0 26 	sts	0x26B0, r3
#ifndef UART_DEBUG
	uint8_t idx = port_map(port);
	
	//if (idx==0){uart_enqueue(&uctrl, datain);} //xxx
	
	uart_buffer[idx][uart_head[idx]] = datain;
    383e:	f8 01       	movw	r30, r16
    3840:	80 81       	ld	r24, Z
    3842:	91 81       	ldd	r25, Z+1	; 0x01
    3844:	82 53       	subi	r24, 0x32	; 50
    3846:	95 4c       	sbci	r25, 0xC5	; 197
    3848:	fc 01       	movw	r30, r24
    384a:	c0 82       	st	Z, r12
	uart_head[idx]++;
    384c:	f8 01       	movw	r30, r16
    384e:	80 81       	ld	r24, Z
    3850:	91 81       	ldd	r25, Z+1	; 0x01
    3852:	01 96       	adiw	r24, 0x01	; 1
    3854:	80 83       	st	Z, r24
    3856:	91 83       	std	Z+1, r25	; 0x01
	if (uart_head[idx] >= MAX_BUFFER_LEN){
    3858:	80 81       	ld	r24, Z
    385a:	91 81       	ldd	r25, Z+1	; 0x01
    385c:	f4 e0       	ldi	r31, 0x04	; 4
    385e:	80 30       	cpi	r24, 0x00	; 0
    3860:	9f 07       	cpc	r25, r31
    3862:	18 f0       	brcs	.+6      	; 0x386a <uart_transmit_lcd+0x130>
		uart_head[idx] = 0;
    3864:	f8 01       	movw	r30, r16
    3866:	10 82       	st	Z, r1
    3868:	11 82       	std	Z+1, r1	; 0x01
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    386a:	f7 01       	movw	r30, r14
    386c:	81 81       	ldd	r24, Z+1	; 0x01
    386e:	85 fd       	sbrc	r24, 5
    3870:	18 c0       	rjmp	.+48     	; 0x38a2 <uart_transmit_lcd+0x168>
    3872:	31 c0       	rjmp	.+98     	; 0x38d6 <uart_transmit_lcd+0x19c>
}

inline uint8_t uart_dequeue(USART_t* port){
	uint8_t idx = port_map(port);
	uint16_t oldtail;
	oldtail = uart_tail[idx];
    3874:	e8 81       	ld	r30, Y
    3876:	f9 81       	ldd	r31, Y+1	; 0x01
	uart_tail[idx]++;
    3878:	88 81       	ld	r24, Y
    387a:	99 81       	ldd	r25, Y+1	; 0x01
    387c:	01 96       	adiw	r24, 0x01	; 1
    387e:	88 83       	st	Y, r24
    3880:	99 83       	std	Y+1, r25	; 0x01
	if (uart_tail[idx] >= MAX_BUFFER_LEN){
    3882:	88 81       	ld	r24, Y
    3884:	99 81       	ldd	r25, Y+1	; 0x01
    3886:	24 e0       	ldi	r18, 0x04	; 4
    3888:	80 30       	cpi	r24, 0x00	; 0
    388a:	92 07       	cpc	r25, r18
    388c:	10 f0       	brcs	.+4      	; 0x3892 <uart_transmit_lcd+0x158>
		uart_tail[idx] = 0;
    388e:	18 82       	st	Y, r1
    3890:	19 82       	std	Y+1, r1	; 0x01
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    3892:	e2 53       	subi	r30, 0x32	; 50
    3894:	f5 4c       	sbci	r31, 0xC5	; 197
    3896:	80 81       	ld	r24, Z
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
    3898:	f7 01       	movw	r30, r14
    389a:	80 83       	st	Z, r24
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    389c:	81 81       	ldd	r24, Z+1	; 0x01
    389e:	85 ff       	sbrs	r24, 5
    38a0:	1a c0       	rjmp	.+52     	; 0x38d6 <uart_transmit_lcd+0x19c>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    38a2:	f8 01       	movw	r30, r16
    38a4:	80 81       	ld	r24, Z
    38a6:	91 81       	ldd	r25, Z+1	; 0x01
    38a8:	28 81       	ld	r18, Y
    38aa:	39 81       	ldd	r19, Y+1	; 0x01
    38ac:	82 17       	cp	r24, r18
    38ae:	93 07       	cpc	r25, r19
    38b0:	38 f0       	brcs	.+14     	; 0x38c0 <uart_transmit_lcd+0x186>
		return (uart_head[idx] - uart_tail[idx]);
    38b2:	80 81       	ld	r24, Z
    38b4:	91 81       	ldd	r25, Z+1	; 0x01
    38b6:	28 81       	ld	r18, Y
    38b8:	39 81       	ldd	r19, Y+1	; 0x01
    38ba:	82 1b       	sub	r24, r18
    38bc:	93 0b       	sbc	r25, r19
    38be:	09 c0       	rjmp	.+18     	; 0x38d2 <uart_transmit_lcd+0x198>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    38c0:	f8 01       	movw	r30, r16
    38c2:	80 81       	ld	r24, Z
    38c4:	91 81       	ldd	r25, Z+1	; 0x01
    38c6:	28 81       	ld	r18, Y
    38c8:	39 81       	ldd	r19, Y+1	; 0x01
    38ca:	80 50       	subi	r24, 0x00	; 0
    38cc:	9c 4f       	sbci	r25, 0xFC	; 252
    38ce:	82 1b       	sub	r24, r18
    38d0:	93 0b       	sbc	r25, r19
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    38d2:	00 97       	sbiw	r24, 0x00	; 0
    38d4:	79 f6       	brne	.-98     	; 0x3874 <uart_transmit_lcd+0x13a>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    38d6:	f8 01       	movw	r30, r16
    38d8:	80 81       	ld	r24, Z
    38da:	91 81       	ldd	r25, Z+1	; 0x01
    38dc:	28 81       	ld	r18, Y
    38de:	39 81       	ldd	r19, Y+1	; 0x01
    38e0:	82 17       	cp	r24, r18
    38e2:	93 07       	cpc	r25, r19
    38e4:	38 f0       	brcs	.+14     	; 0x38f4 <uart_transmit_lcd+0x1ba>
		return (uart_head[idx] - uart_tail[idx]);
    38e6:	80 81       	ld	r24, Z
    38e8:	91 81       	ldd	r25, Z+1	; 0x01
    38ea:	28 81       	ld	r18, Y
    38ec:	39 81       	ldd	r19, Y+1	; 0x01
    38ee:	82 1b       	sub	r24, r18
    38f0:	93 0b       	sbc	r25, r19
    38f2:	09 c0       	rjmp	.+18     	; 0x3906 <uart_transmit_lcd+0x1cc>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    38f4:	f8 01       	movw	r30, r16
    38f6:	80 81       	ld	r24, Z
    38f8:	91 81       	ldd	r25, Z+1	; 0x01
    38fa:	28 81       	ld	r18, Y
    38fc:	39 81       	ldd	r19, Y+1	; 0x01
    38fe:	80 50       	subi	r24, 0x00	; 0
    3900:	9c 4f       	sbci	r25, 0xFC	; 252
    3902:	82 1b       	sub	r24, r18
    3904:	93 0b       	sbc	r25, r19
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
	}
	//disable the tx outgoing hardware buffer ready interrupt if we have nothing more to put in it.
	if(uart_count(port)>0) uart_txbuffer_enable(port);
    3906:	00 97       	sbiw	r24, 0x00	; 0
    3908:	21 f0       	breq	.+8      	; 0x3912 <uart_transmit_lcd+0x1d8>
    390a:	c7 01       	movw	r24, r14
    390c:	0e 94 5f 19 	call	0x32be	; 0x32be <uart_txbuffer_enable>
    3910:	03 c0       	rjmp	.+6      	; 0x3918 <uart_transmit_lcd+0x1de>
	else uart_txbuffer_disable(port);
    3912:	c7 01       	movw	r24, r14
    3914:	0e 94 64 19 	call	0x32c8	; 0x32c8 <uart_txbuffer_disable>
#ifndef UART_DEBUG
	uint8_t idx = port_map(port);
	
	//if (idx==0){uart_enqueue(&uctrl, datain);} //xxx
	
	uart_buffer[idx][uart_head[idx]] = datain;
    3918:	f8 01       	movw	r30, r16
    391a:	80 81       	ld	r24, Z
    391c:	91 81       	ldd	r25, Z+1	; 0x01
    391e:	82 53       	subi	r24, 0x32	; 50
    3920:	95 4c       	sbci	r25, 0xC5	; 197
    3922:	fc 01       	movw	r30, r24
    3924:	d0 82       	st	Z, r13
	uart_head[idx]++;
    3926:	f8 01       	movw	r30, r16
    3928:	80 81       	ld	r24, Z
    392a:	91 81       	ldd	r25, Z+1	; 0x01
    392c:	01 96       	adiw	r24, 0x01	; 1
    392e:	80 83       	st	Z, r24
    3930:	91 83       	std	Z+1, r25	; 0x01
	if (uart_head[idx] >= MAX_BUFFER_LEN){
    3932:	80 81       	ld	r24, Z
    3934:	91 81       	ldd	r25, Z+1	; 0x01
    3936:	f4 e0       	ldi	r31, 0x04	; 4
    3938:	80 30       	cpi	r24, 0x00	; 0
    393a:	9f 07       	cpc	r25, r31
    393c:	18 f0       	brcs	.+6      	; 0x3944 <uart_transmit_lcd+0x20a>
		uart_head[idx] = 0;
    393e:	f8 01       	movw	r30, r16
    3940:	10 82       	st	Z, r1
    3942:	11 82       	std	Z+1, r1	; 0x01
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    3944:	f7 01       	movw	r30, r14
    3946:	81 81       	ldd	r24, Z+1	; 0x01
    3948:	85 fd       	sbrc	r24, 5
    394a:	18 c0       	rjmp	.+48     	; 0x397c <uart_transmit_lcd+0x242>
    394c:	31 c0       	rjmp	.+98     	; 0x39b0 <uart_transmit_lcd+0x276>
}

inline uint8_t uart_dequeue(USART_t* port){
	uint8_t idx = port_map(port);
	uint16_t oldtail;
	oldtail = uart_tail[idx];
    394e:	e8 81       	ld	r30, Y
    3950:	f9 81       	ldd	r31, Y+1	; 0x01
	uart_tail[idx]++;
    3952:	88 81       	ld	r24, Y
    3954:	99 81       	ldd	r25, Y+1	; 0x01
    3956:	01 96       	adiw	r24, 0x01	; 1
    3958:	88 83       	st	Y, r24
    395a:	99 83       	std	Y+1, r25	; 0x01
	if (uart_tail[idx] >= MAX_BUFFER_LEN){
    395c:	88 81       	ld	r24, Y
    395e:	99 81       	ldd	r25, Y+1	; 0x01
    3960:	24 e0       	ldi	r18, 0x04	; 4
    3962:	80 30       	cpi	r24, 0x00	; 0
    3964:	92 07       	cpc	r25, r18
    3966:	10 f0       	brcs	.+4      	; 0x396c <uart_transmit_lcd+0x232>
		uart_tail[idx] = 0;
    3968:	18 82       	st	Y, r1
    396a:	19 82       	std	Y+1, r1	; 0x01
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    396c:	e2 53       	subi	r30, 0x32	; 50
    396e:	f5 4c       	sbci	r31, 0xC5	; 197
    3970:	80 81       	ld	r24, Z
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
    3972:	f7 01       	movw	r30, r14
    3974:	80 83       	st	Z, r24
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    3976:	81 81       	ldd	r24, Z+1	; 0x01
    3978:	85 ff       	sbrs	r24, 5
    397a:	1a c0       	rjmp	.+52     	; 0x39b0 <uart_transmit_lcd+0x276>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    397c:	f8 01       	movw	r30, r16
    397e:	80 81       	ld	r24, Z
    3980:	91 81       	ldd	r25, Z+1	; 0x01
    3982:	28 81       	ld	r18, Y
    3984:	39 81       	ldd	r19, Y+1	; 0x01
    3986:	82 17       	cp	r24, r18
    3988:	93 07       	cpc	r25, r19
    398a:	38 f0       	brcs	.+14     	; 0x399a <uart_transmit_lcd+0x260>
		return (uart_head[idx] - uart_tail[idx]);
    398c:	80 81       	ld	r24, Z
    398e:	91 81       	ldd	r25, Z+1	; 0x01
    3990:	28 81       	ld	r18, Y
    3992:	39 81       	ldd	r19, Y+1	; 0x01
    3994:	82 1b       	sub	r24, r18
    3996:	93 0b       	sbc	r25, r19
    3998:	09 c0       	rjmp	.+18     	; 0x39ac <uart_transmit_lcd+0x272>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    399a:	f8 01       	movw	r30, r16
    399c:	80 81       	ld	r24, Z
    399e:	91 81       	ldd	r25, Z+1	; 0x01
    39a0:	28 81       	ld	r18, Y
    39a2:	39 81       	ldd	r19, Y+1	; 0x01
    39a4:	80 50       	subi	r24, 0x00	; 0
    39a6:	9c 4f       	sbci	r25, 0xFC	; 252
    39a8:	82 1b       	sub	r24, r18
    39aa:	93 0b       	sbc	r25, r19
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    39ac:	00 97       	sbiw	r24, 0x00	; 0
    39ae:	79 f6       	brne	.-98     	; 0x394e <uart_transmit_lcd+0x214>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    39b0:	f8 01       	movw	r30, r16
    39b2:	80 81       	ld	r24, Z
    39b4:	91 81       	ldd	r25, Z+1	; 0x01
    39b6:	28 81       	ld	r18, Y
    39b8:	39 81       	ldd	r19, Y+1	; 0x01
    39ba:	82 17       	cp	r24, r18
    39bc:	93 07       	cpc	r25, r19
    39be:	38 f0       	brcs	.+14     	; 0x39ce <uart_transmit_lcd+0x294>
		return (uart_head[idx] - uart_tail[idx]);
    39c0:	80 81       	ld	r24, Z
    39c2:	91 81       	ldd	r25, Z+1	; 0x01
    39c4:	28 81       	ld	r18, Y
    39c6:	39 81       	ldd	r19, Y+1	; 0x01
    39c8:	82 1b       	sub	r24, r18
    39ca:	93 0b       	sbc	r25, r19
    39cc:	09 c0       	rjmp	.+18     	; 0x39e0 <uart_transmit_lcd+0x2a6>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    39ce:	f8 01       	movw	r30, r16
    39d0:	80 81       	ld	r24, Z
    39d2:	91 81       	ldd	r25, Z+1	; 0x01
    39d4:	28 81       	ld	r18, Y
    39d6:	39 81       	ldd	r19, Y+1	; 0x01
    39d8:	80 50       	subi	r24, 0x00	; 0
    39da:	9c 4f       	sbci	r25, 0xFC	; 252
    39dc:	82 1b       	sub	r24, r18
    39de:	93 0b       	sbc	r25, r19
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
	}
	//disable the tx outgoing hardware buffer ready interrupt if we have nothing more to put in it.
	if(uart_count(port)>0) uart_txbuffer_enable(port);
    39e0:	00 97       	sbiw	r24, 0x00	; 0
    39e2:	21 f0       	breq	.+8      	; 0x39ec <uart_transmit_lcd+0x2b2>
    39e4:	c7 01       	movw	r24, r14
    39e6:	0e 94 5f 19 	call	0x32be	; 0x32be <uart_txbuffer_enable>
    39ea:	03 c0       	rjmp	.+6      	; 0x39f2 <uart_transmit_lcd+0x2b8>
	else uart_txbuffer_disable(port);
    39ec:	c7 01       	movw	r24, r14
    39ee:	0e 94 64 19 	call	0x32c8	; 0x32c8 <uart_txbuffer_disable>
			default:
				//Payload bytes -- send to LCD
				if (toSend == 0x0D) {lcd_flow_control = LCD_BUSY;}
				uart_enqueue(&udata, '`'); //xxx - echo to data port
				uart_enqueue(&udata, toSend); //xxx - echo to data port
				port->DATA = toSend;
    39f2:	f5 01       	movw	r30, r10
    39f4:	d0 82       	st	Z, r13
}

void inline uart_transmit_lcd(USART_t* port){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0) && (lcd_flow_control == LCD_READY)){
    39f6:	f5 01       	movw	r30, r10
    39f8:	81 81       	ldd	r24, Z+1	; 0x01
    39fa:	85 ff       	sbrs	r24, 5
    39fc:	4f c0       	rjmp	.+158    	; 0x3a9c <uart_transmit_lcd+0x362>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    39fe:	f0 eb       	ldi	r31, 0xB0	; 176
    3a00:	af 16       	cp	r10, r31
    3a02:	fb e0       	ldi	r31, 0x0B	; 11
    3a04:	bf 06       	cpc	r11, r31
    3a06:	61 f0       	breq	.+24     	; 0x3a20 <uart_transmit_lcd+0x2e6>
	if (port == &uctrl) {return 1;}
    3a08:	20 ea       	ldi	r18, 0xA0	; 160
    3a0a:	a2 16       	cp	r10, r18
    3a0c:	28 e0       	ldi	r18, 0x08	; 8
    3a0e:	b2 06       	cpc	r11, r18
    3a10:	49 f0       	breq	.+18     	; 0x3a24 <uart_transmit_lcd+0x2ea>
	if (port == &udata) {return 2;}
    3a12:	30 eb       	ldi	r19, 0xB0	; 176
    3a14:	a3 16       	cp	r10, r19
    3a16:	38 e0       	ldi	r19, 0x08	; 8
    3a18:	b3 06       	cpc	r11, r19
    3a1a:	31 f4       	brne	.+12     	; 0x3a28 <uart_transmit_lcd+0x2ee>
    3a1c:	22 e0       	ldi	r18, 0x02	; 2
    3a1e:	05 c0       	rjmp	.+10     	; 0x3a2a <uart_transmit_lcd+0x2f0>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    3a20:	20 e0       	ldi	r18, 0x00	; 0
    3a22:	03 c0       	rjmp	.+6      	; 0x3a2a <uart_transmit_lcd+0x2f0>
	if (port == &uctrl) {return 1;}
    3a24:	21 e0       	ldi	r18, 0x01	; 1
    3a26:	01 c0       	rjmp	.+2      	; 0x3a2a <uart_transmit_lcd+0x2f0>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    3a28:	20 e0       	ldi	r18, 0x00	; 0
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    3a2a:	30 e0       	ldi	r19, 0x00	; 0
    3a2c:	c9 01       	movw	r24, r18
    3a2e:	88 0f       	add	r24, r24
    3a30:	99 1f       	adc	r25, r25
    3a32:	f3 01       	movw	r30, r6
    3a34:	e8 0f       	add	r30, r24
    3a36:	f9 1f       	adc	r31, r25
    3a38:	40 81       	ld	r20, Z
    3a3a:	51 81       	ldd	r21, Z+1	; 0x01
    3a3c:	f4 01       	movw	r30, r8
    3a3e:	e8 0f       	add	r30, r24
    3a40:	f9 1f       	adc	r31, r25
    3a42:	80 81       	ld	r24, Z
    3a44:	91 81       	ldd	r25, Z+1	; 0x01
    3a46:	48 17       	cp	r20, r24
    3a48:	59 07       	cpc	r21, r25
    3a4a:	88 f0       	brcs	.+34     	; 0x3a6e <uart_transmit_lcd+0x334>
		return (uart_head[idx] - uart_tail[idx]);
    3a4c:	22 0f       	add	r18, r18
    3a4e:	33 1f       	adc	r19, r19
    3a50:	f3 01       	movw	r30, r6
    3a52:	e2 0f       	add	r30, r18
    3a54:	f3 1f       	adc	r31, r19
    3a56:	40 81       	ld	r20, Z
    3a58:	51 81       	ldd	r21, Z+1	; 0x01
    3a5a:	f4 01       	movw	r30, r8
    3a5c:	e2 0f       	add	r30, r18
    3a5e:	f3 1f       	adc	r31, r19
    3a60:	80 81       	ld	r24, Z
    3a62:	91 81       	ldd	r25, Z+1	; 0x01
    3a64:	fa 01       	movw	r30, r20
    3a66:	e8 1b       	sub	r30, r24
    3a68:	f9 0b       	sbc	r31, r25
    3a6a:	cf 01       	movw	r24, r30
    3a6c:	10 c0       	rjmp	.+32     	; 0x3a8e <uart_transmit_lcd+0x354>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    3a6e:	22 0f       	add	r18, r18
    3a70:	33 1f       	adc	r19, r19
    3a72:	f3 01       	movw	r30, r6
    3a74:	e2 0f       	add	r30, r18
    3a76:	f3 1f       	adc	r31, r19
    3a78:	80 81       	ld	r24, Z
    3a7a:	91 81       	ldd	r25, Z+1	; 0x01
    3a7c:	f4 01       	movw	r30, r8
    3a7e:	e2 0f       	add	r30, r18
    3a80:	f3 1f       	adc	r31, r19
    3a82:	20 81       	ld	r18, Z
    3a84:	31 81       	ldd	r19, Z+1	; 0x01
    3a86:	80 50       	subi	r24, 0x00	; 0
    3a88:	9c 4f       	sbci	r25, 0xFC	; 252
    3a8a:	82 1b       	sub	r24, r18
    3a8c:	93 0b       	sbc	r25, r19
}

void inline uart_transmit_lcd(USART_t* port){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0) && (lcd_flow_control == LCD_READY)){
    3a8e:	00 97       	sbiw	r24, 0x00	; 0
    3a90:	29 f0       	breq	.+10     	; 0x3a9c <uart_transmit_lcd+0x362>
    3a92:	80 91 b0 26 	lds	r24, 0x26B0
    3a96:	82 35       	cpi	r24, 0x52	; 82
    3a98:	09 f4       	brne	.+2      	; 0x3a9c <uart_transmit_lcd+0x362>
    3a9a:	86 ce       	rjmp	.-756    	; 0x37a8 <uart_transmit_lcd+0x6e>
				uart_enqueue(&udata, toSend); //xxx - echo to data port
				port->DATA = toSend;
				break;
		}				
	}
	uart_txbuffer_disable(port); //implemented this way to prevent periodic stalls that happen when uart_txbuffer isn't disabled quickly enough
    3a9c:	c5 01       	movw	r24, r10
    3a9e:	0e 94 64 19 	call	0x32c8	; 0x32c8 <uart_txbuffer_disable>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    3aa2:	f0 eb       	ldi	r31, 0xB0	; 176
    3aa4:	af 16       	cp	r10, r31
    3aa6:	fb e0       	ldi	r31, 0x0B	; 11
    3aa8:	bf 06       	cpc	r11, r31
    3aaa:	61 f0       	breq	.+24     	; 0x3ac4 <uart_transmit_lcd+0x38a>
	if (port == &uctrl) {return 1;}
    3aac:	20 ea       	ldi	r18, 0xA0	; 160
    3aae:	a2 16       	cp	r10, r18
    3ab0:	28 e0       	ldi	r18, 0x08	; 8
    3ab2:	b2 06       	cpc	r11, r18
    3ab4:	49 f0       	breq	.+18     	; 0x3ac8 <uart_transmit_lcd+0x38e>
	if (port == &udata) {return 2;}
    3ab6:	30 eb       	ldi	r19, 0xB0	; 176
    3ab8:	a3 16       	cp	r10, r19
    3aba:	38 e0       	ldi	r19, 0x08	; 8
    3abc:	b3 06       	cpc	r11, r19
    3abe:	31 f4       	brne	.+12     	; 0x3acc <uart_transmit_lcd+0x392>
    3ac0:	22 e0       	ldi	r18, 0x02	; 2
    3ac2:	05 c0       	rjmp	.+10     	; 0x3ace <uart_transmit_lcd+0x394>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    3ac4:	20 e0       	ldi	r18, 0x00	; 0
    3ac6:	03 c0       	rjmp	.+6      	; 0x3ace <uart_transmit_lcd+0x394>
	if (port == &uctrl) {return 1;}
    3ac8:	21 e0       	ldi	r18, 0x01	; 1
    3aca:	01 c0       	rjmp	.+2      	; 0x3ace <uart_transmit_lcd+0x394>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    3acc:	20 e0       	ldi	r18, 0x00	; 0
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    3ace:	30 e0       	ldi	r19, 0x00	; 0
    3ad0:	c9 01       	movw	r24, r18
    3ad2:	88 0f       	add	r24, r24
    3ad4:	99 1f       	adc	r25, r25
    3ad6:	fc 01       	movw	r30, r24
    3ad8:	e8 53       	subi	r30, 0x38	; 56
    3ada:	fd 4c       	sbci	r31, 0xCD	; 205
    3adc:	40 81       	ld	r20, Z
    3ade:	51 81       	ldd	r21, Z+1	; 0x01
    3ae0:	8c 52       	subi	r24, 0x2C	; 44
    3ae2:	91 4c       	sbci	r25, 0xC1	; 193
    3ae4:	fc 01       	movw	r30, r24
    3ae6:	80 81       	ld	r24, Z
    3ae8:	91 81       	ldd	r25, Z+1	; 0x01
    3aea:	48 17       	cp	r20, r24
    3aec:	59 07       	cpc	r21, r25
    3aee:	78 f0       	brcs	.+30     	; 0x3b0e <uart_transmit_lcd+0x3d4>
		return (uart_head[idx] - uart_tail[idx]);
    3af0:	22 0f       	add	r18, r18
    3af2:	33 1f       	adc	r19, r19
    3af4:	f9 01       	movw	r30, r18
    3af6:	e8 53       	subi	r30, 0x38	; 56
    3af8:	fd 4c       	sbci	r31, 0xCD	; 205
    3afa:	80 81       	ld	r24, Z
    3afc:	91 81       	ldd	r25, Z+1	; 0x01
    3afe:	2c 52       	subi	r18, 0x2C	; 44
    3b00:	31 4c       	sbci	r19, 0xC1	; 193
    3b02:	f9 01       	movw	r30, r18
    3b04:	20 81       	ld	r18, Z
    3b06:	31 81       	ldd	r19, Z+1	; 0x01
    3b08:	82 1b       	sub	r24, r18
    3b0a:	93 0b       	sbc	r25, r19
    3b0c:	12 c0       	rjmp	.+36     	; 0x3b32 <uart_transmit_lcd+0x3f8>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    3b0e:	22 0f       	add	r18, r18
    3b10:	33 1f       	adc	r19, r19
    3b12:	f9 01       	movw	r30, r18
    3b14:	e8 53       	subi	r30, 0x38	; 56
    3b16:	fd 4c       	sbci	r31, 0xCD	; 205
    3b18:	40 81       	ld	r20, Z
    3b1a:	51 81       	ldd	r21, Z+1	; 0x01
    3b1c:	2c 52       	subi	r18, 0x2C	; 44
    3b1e:	31 4c       	sbci	r19, 0xC1	; 193
    3b20:	f9 01       	movw	r30, r18
    3b22:	80 81       	ld	r24, Z
    3b24:	91 81       	ldd	r25, Z+1	; 0x01
    3b26:	40 50       	subi	r20, 0x00	; 0
    3b28:	5c 4f       	sbci	r21, 0xFC	; 252
    3b2a:	9a 01       	movw	r18, r20
    3b2c:	28 1b       	sub	r18, r24
    3b2e:	39 0b       	sbc	r19, r25
    3b30:	c9 01       	movw	r24, r18
				port->DATA = toSend;
				break;
		}				
	}
	uart_txbuffer_disable(port); //implemented this way to prevent periodic stalls that happen when uart_txbuffer isn't disabled quickly enough
	if ((uart_count(port)>0) && (lcd_flow_control == LCD_READY)){ //...something is waiting to go out
    3b32:	00 97       	sbiw	r24, 0x00	; 0
    3b34:	39 f0       	breq	.+14     	; 0x3b44 <uart_transmit_lcd+0x40a>
    3b36:	80 91 b0 26 	lds	r24, 0x26B0
    3b3a:	82 35       	cpi	r24, 0x52	; 82
    3b3c:	19 f4       	brne	.+6      	; 0x3b44 <uart_transmit_lcd+0x40a>
		uart_txbuffer_enable(port);	
    3b3e:	c5 01       	movw	r24, r10
    3b40:	0e 94 5f 19 	call	0x32be	; 0x32be <uart_txbuffer_enable>
	}	
}
    3b44:	df 91       	pop	r29
    3b46:	cf 91       	pop	r28
    3b48:	1f 91       	pop	r17
    3b4a:	0f 91       	pop	r16
    3b4c:	ff 90       	pop	r15
    3b4e:	ef 90       	pop	r14
    3b50:	df 90       	pop	r13
    3b52:	cf 90       	pop	r12
    3b54:	bf 90       	pop	r11
    3b56:	af 90       	pop	r10
    3b58:	9f 90       	pop	r9
    3b5a:	8f 90       	pop	r8
    3b5c:	7f 90       	pop	r7
    3b5e:	6f 90       	pop	r6
    3b60:	5f 90       	pop	r5
    3b62:	4f 90       	pop	r4
    3b64:	3f 90       	pop	r3
    3b66:	08 95       	ret

00003b68 <__vector_123>:
//Must correspond to definitions in uart.h
ISR(USARTC0_DRE_vect) {uart_transmit(&uctrl);}//TX Interrupt
ISR(USARTC0_RXC_vect) {uart_receive(&uctrl);} //RX Interrupt
ISR(USARTC1_DRE_vect) {uart_transmit(&udata);}//TX Interrupt
ISR(USARTC1_RXC_vect) {uart_receive(&udata);} //RX Interrupt
ISR(USARTF1_DRE_vect) {uart_transmit_lcd(&ulcd);}//TX Interrupt
    3b68:	1f 92       	push	r1
    3b6a:	0f 92       	push	r0
    3b6c:	0f b6       	in	r0, 0x3f	; 63
    3b6e:	0f 92       	push	r0
    3b70:	08 b6       	in	r0, 0x38	; 56
    3b72:	0f 92       	push	r0
    3b74:	09 b6       	in	r0, 0x39	; 57
    3b76:	0f 92       	push	r0
    3b78:	0a b6       	in	r0, 0x3a	; 58
    3b7a:	0f 92       	push	r0
    3b7c:	0b b6       	in	r0, 0x3b	; 59
    3b7e:	0f 92       	push	r0
    3b80:	11 24       	eor	r1, r1
    3b82:	3f 92       	push	r3
    3b84:	4f 92       	push	r4
    3b86:	5f 92       	push	r5
    3b88:	6f 92       	push	r6
    3b8a:	7f 92       	push	r7
    3b8c:	8f 92       	push	r8
    3b8e:	9f 92       	push	r9
    3b90:	af 92       	push	r10
    3b92:	bf 92       	push	r11
    3b94:	cf 92       	push	r12
    3b96:	df 92       	push	r13
    3b98:	ef 92       	push	r14
    3b9a:	ff 92       	push	r15
    3b9c:	0f 93       	push	r16
    3b9e:	1f 93       	push	r17
    3ba0:	2f 93       	push	r18
    3ba2:	3f 93       	push	r19
    3ba4:	4f 93       	push	r20
    3ba6:	5f 93       	push	r21
    3ba8:	6f 93       	push	r22
    3baa:	7f 93       	push	r23
    3bac:	8f 93       	push	r24
    3bae:	9f 93       	push	r25
    3bb0:	af 93       	push	r26
    3bb2:	bf 93       	push	r27
    3bb4:	cf 93       	push	r28
    3bb6:	df 93       	push	r29
    3bb8:	ef 93       	push	r30
    3bba:	ff 93       	push	r31
}

void inline uart_transmit_lcd(USART_t* port){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0) && (lcd_flow_control == LCD_READY)){
    3bbc:	0f 2e       	mov	r0, r31
    3bbe:	f0 eb       	ldi	r31, 0xB0	; 176
    3bc0:	6f 2e       	mov	r6, r31
    3bc2:	fb e0       	ldi	r31, 0x0B	; 11
    3bc4:	7f 2e       	mov	r7, r31
    3bc6:	f0 2d       	mov	r31, r0
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    3bc8:	0f 2e       	mov	r0, r31
    3bca:	f8 ec       	ldi	r31, 0xC8	; 200
    3bcc:	8f 2e       	mov	r8, r31
    3bce:	f2 e3       	ldi	r31, 0x32	; 50
    3bd0:	9f 2e       	mov	r9, r31
    3bd2:	f0 2d       	mov	r31, r0
    3bd4:	0f 2e       	mov	r0, r31
    3bd6:	f4 ed       	ldi	r31, 0xD4	; 212
    3bd8:	af 2e       	mov	r10, r31
    3bda:	fe e3       	ldi	r31, 0x3E	; 62
    3bdc:	bf 2e       	mov	r11, r31
    3bde:	f0 2d       	mov	r31, r0
		uart_tail[idx] = 0;
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    3be0:	0f 2e       	mov	r0, r31
    3be2:	fe ec       	ldi	r31, 0xCE	; 206
    3be4:	4f 2e       	mov	r4, r31
    3be6:	f2 e3       	ldi	r31, 0x32	; 50
    3be8:	5f 2e       	mov	r5, r31
    3bea:	f0 2d       	mov	r31, r0
#ifndef UART_DEBUG
	uint8_t idx = port_map(port);
	
	//if (idx==0){uart_enqueue(&uctrl, datain);} //xxx
	
	uart_buffer[idx][uart_head[idx]] = datain;
    3bec:	0c ec       	ldi	r16, 0xCC	; 204
    3bee:	12 e3       	ldi	r17, 0x32	; 50
    3bf0:	0f 2e       	mov	r0, r31
    3bf2:	f0 e6       	ldi	r31, 0x60	; 96
    3bf4:	cf 2e       	mov	r12, r31
    3bf6:	f0 2d       	mov	r31, r0
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    3bf8:	0f 2e       	mov	r0, r31
    3bfa:	f0 eb       	ldi	r31, 0xB0	; 176
    3bfc:	ef 2e       	mov	r14, r31
    3bfe:	f8 e0       	ldi	r31, 0x08	; 8
    3c00:	ff 2e       	mov	r15, r31
    3c02:	f0 2d       	mov	r31, r0
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    3c04:	c8 ed       	ldi	r28, 0xD8	; 216
    3c06:	de e3       	ldi	r29, 0x3E	; 62
				//Header byte just describes payload -- do not send to LCD
				lcd_flow_type = toSend;
				break;
			default:
				//Payload bytes -- send to LCD
				if (toSend == 0x0D) {lcd_flow_control = LCD_BUSY;}
    3c08:	0f 2e       	mov	r0, r31
    3c0a:	fe e4       	ldi	r31, 0x4E	; 78
    3c0c:	3f 2e       	mov	r3, r31
    3c0e:	f0 2d       	mov	r31, r0
    3c10:	15 c1       	rjmp	.+554    	; 0x3e3c <__vector_123+0x2d4>
}

inline uint8_t uart_dequeue(USART_t* port){
	uint8_t idx = port_map(port);
	uint16_t oldtail;
	oldtail = uart_tail[idx];
    3c12:	d5 01       	movw	r26, r10
    3c14:	ed 91       	ld	r30, X+
    3c16:	fc 91       	ld	r31, X
    3c18:	11 97       	sbiw	r26, 0x01	; 1
	uart_tail[idx]++;
    3c1a:	8d 91       	ld	r24, X+
    3c1c:	9c 91       	ld	r25, X
    3c1e:	11 97       	sbiw	r26, 0x01	; 1
    3c20:	01 96       	adiw	r24, 0x01	; 1
    3c22:	8d 93       	st	X+, r24
    3c24:	9c 93       	st	X, r25
    3c26:	11 97       	sbiw	r26, 0x01	; 1
	if (uart_tail[idx] >= MAX_BUFFER_LEN){
    3c28:	8d 91       	ld	r24, X+
    3c2a:	9c 91       	ld	r25, X
    3c2c:	11 97       	sbiw	r26, 0x01	; 1
    3c2e:	b4 e0       	ldi	r27, 0x04	; 4
    3c30:	80 30       	cpi	r24, 0x00	; 0
    3c32:	9b 07       	cpc	r25, r27
    3c34:	20 f0       	brcs	.+8      	; 0x3c3e <__vector_123+0xd6>
		uart_tail[idx] = 0;
    3c36:	d5 01       	movw	r26, r10
    3c38:	1d 92       	st	X+, r1
    3c3a:	1c 92       	st	X, r1
    3c3c:	11 97       	sbiw	r26, 0x01	; 1
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    3c3e:	e4 0d       	add	r30, r4
    3c40:	f5 1d       	adc	r31, r5
    3c42:	d0 80       	ld	r13, Z
void inline uart_transmit_lcd(USART_t* port){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0) && (lcd_flow_control == LCD_READY)){
		toSend = uart_dequeue(port);
		switch(toSend){
    3c44:	ba ef       	ldi	r27, 0xFA	; 250
    3c46:	db 16       	cp	r13, r27
    3c48:	19 f0       	breq	.+6      	; 0x3c50 <__vector_123+0xe8>
    3c4a:	ee ef       	ldi	r30, 0xFE	; 254
    3c4c:	de 16       	cp	r13, r30
    3c4e:	19 f4       	brne	.+6      	; 0x3c56 <__vector_123+0xee>
			case LCD_COMMAND:
			case LCD_MACRO:
				//Header byte just describes payload -- do not send to LCD
				lcd_flow_type = toSend;
    3c50:	d0 92 ae 26 	sts	0x26AE, r13
    3c54:	f3 c0       	rjmp	.+486    	; 0x3e3c <__vector_123+0x2d4>
				break;
			default:
				//Payload bytes -- send to LCD
				if (toSend == 0x0D) {lcd_flow_control = LCD_BUSY;}
    3c56:	fd e0       	ldi	r31, 0x0D	; 13
    3c58:	df 16       	cp	r13, r31
    3c5a:	11 f4       	brne	.+4      	; 0x3c60 <__vector_123+0xf8>
    3c5c:	30 92 b0 26 	sts	0x26B0, r3
#ifndef UART_DEBUG
	uint8_t idx = port_map(port);
	
	//if (idx==0){uart_enqueue(&uctrl, datain);} //xxx
	
	uart_buffer[idx][uart_head[idx]] = datain;
    3c60:	d8 01       	movw	r26, r16
    3c62:	8d 91       	ld	r24, X+
    3c64:	9c 91       	ld	r25, X
    3c66:	11 97       	sbiw	r26, 0x01	; 1
    3c68:	82 53       	subi	r24, 0x32	; 50
    3c6a:	95 4c       	sbci	r25, 0xC5	; 197
    3c6c:	fc 01       	movw	r30, r24
    3c6e:	c0 82       	st	Z, r12
	uart_head[idx]++;
    3c70:	8d 91       	ld	r24, X+
    3c72:	9c 91       	ld	r25, X
    3c74:	11 97       	sbiw	r26, 0x01	; 1
    3c76:	01 96       	adiw	r24, 0x01	; 1
    3c78:	8d 93       	st	X+, r24
    3c7a:	9c 93       	st	X, r25
    3c7c:	11 97       	sbiw	r26, 0x01	; 1
	if (uart_head[idx] >= MAX_BUFFER_LEN){
    3c7e:	8d 91       	ld	r24, X+
    3c80:	9c 91       	ld	r25, X
    3c82:	11 97       	sbiw	r26, 0x01	; 1
    3c84:	f4 e0       	ldi	r31, 0x04	; 4
    3c86:	80 30       	cpi	r24, 0x00	; 0
    3c88:	9f 07       	cpc	r25, r31
    3c8a:	18 f0       	brcs	.+6      	; 0x3c92 <__vector_123+0x12a>
		uart_head[idx] = 0;
    3c8c:	1d 92       	st	X+, r1
    3c8e:	1c 92       	st	X, r1
    3c90:	11 97       	sbiw	r26, 0x01	; 1
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    3c92:	d7 01       	movw	r26, r14
    3c94:	11 96       	adiw	r26, 0x01	; 1
    3c96:	8c 91       	ld	r24, X
    3c98:	11 97       	sbiw	r26, 0x01	; 1
    3c9a:	85 fd       	sbrc	r24, 5
    3c9c:	18 c0       	rjmp	.+48     	; 0x3cce <__vector_123+0x166>
    3c9e:	33 c0       	rjmp	.+102    	; 0x3d06 <__vector_123+0x19e>
}

inline uint8_t uart_dequeue(USART_t* port){
	uint8_t idx = port_map(port);
	uint16_t oldtail;
	oldtail = uart_tail[idx];
    3ca0:	e8 81       	ld	r30, Y
    3ca2:	f9 81       	ldd	r31, Y+1	; 0x01
	uart_tail[idx]++;
    3ca4:	88 81       	ld	r24, Y
    3ca6:	99 81       	ldd	r25, Y+1	; 0x01
    3ca8:	01 96       	adiw	r24, 0x01	; 1
    3caa:	88 83       	st	Y, r24
    3cac:	99 83       	std	Y+1, r25	; 0x01
	if (uart_tail[idx] >= MAX_BUFFER_LEN){
    3cae:	88 81       	ld	r24, Y
    3cb0:	99 81       	ldd	r25, Y+1	; 0x01
    3cb2:	b4 e0       	ldi	r27, 0x04	; 4
    3cb4:	80 30       	cpi	r24, 0x00	; 0
    3cb6:	9b 07       	cpc	r25, r27
    3cb8:	10 f0       	brcs	.+4      	; 0x3cbe <__vector_123+0x156>
		uart_tail[idx] = 0;
    3cba:	18 82       	st	Y, r1
    3cbc:	19 82       	std	Y+1, r1	; 0x01
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    3cbe:	e2 53       	subi	r30, 0x32	; 50
    3cc0:	f5 4c       	sbci	r31, 0xC5	; 197
    3cc2:	80 81       	ld	r24, Z
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
    3cc4:	f7 01       	movw	r30, r14
    3cc6:	80 83       	st	Z, r24
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    3cc8:	81 81       	ldd	r24, Z+1	; 0x01
    3cca:	85 ff       	sbrs	r24, 5
    3ccc:	1c c0       	rjmp	.+56     	; 0x3d06 <__vector_123+0x19e>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    3cce:	d8 01       	movw	r26, r16
    3cd0:	8d 91       	ld	r24, X+
    3cd2:	9c 91       	ld	r25, X
    3cd4:	11 97       	sbiw	r26, 0x01	; 1
    3cd6:	28 81       	ld	r18, Y
    3cd8:	39 81       	ldd	r19, Y+1	; 0x01
    3cda:	82 17       	cp	r24, r18
    3cdc:	93 07       	cpc	r25, r19
    3cde:	40 f0       	brcs	.+16     	; 0x3cf0 <__vector_123+0x188>
		return (uart_head[idx] - uart_tail[idx]);
    3ce0:	8d 91       	ld	r24, X+
    3ce2:	9c 91       	ld	r25, X
    3ce4:	11 97       	sbiw	r26, 0x01	; 1
    3ce6:	28 81       	ld	r18, Y
    3ce8:	39 81       	ldd	r19, Y+1	; 0x01
    3cea:	82 1b       	sub	r24, r18
    3cec:	93 0b       	sbc	r25, r19
    3cee:	09 c0       	rjmp	.+18     	; 0x3d02 <__vector_123+0x19a>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    3cf0:	f8 01       	movw	r30, r16
    3cf2:	80 81       	ld	r24, Z
    3cf4:	91 81       	ldd	r25, Z+1	; 0x01
    3cf6:	28 81       	ld	r18, Y
    3cf8:	39 81       	ldd	r19, Y+1	; 0x01
    3cfa:	80 50       	subi	r24, 0x00	; 0
    3cfc:	9c 4f       	sbci	r25, 0xFC	; 252
    3cfe:	82 1b       	sub	r24, r18
    3d00:	93 0b       	sbc	r25, r19
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    3d02:	00 97       	sbiw	r24, 0x00	; 0
    3d04:	69 f6       	brne	.-102    	; 0x3ca0 <__vector_123+0x138>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    3d06:	d8 01       	movw	r26, r16
    3d08:	8d 91       	ld	r24, X+
    3d0a:	9c 91       	ld	r25, X
    3d0c:	11 97       	sbiw	r26, 0x01	; 1
    3d0e:	28 81       	ld	r18, Y
    3d10:	39 81       	ldd	r19, Y+1	; 0x01
    3d12:	82 17       	cp	r24, r18
    3d14:	93 07       	cpc	r25, r19
    3d16:	40 f0       	brcs	.+16     	; 0x3d28 <__vector_123+0x1c0>
		return (uart_head[idx] - uart_tail[idx]);
    3d18:	8d 91       	ld	r24, X+
    3d1a:	9c 91       	ld	r25, X
    3d1c:	11 97       	sbiw	r26, 0x01	; 1
    3d1e:	28 81       	ld	r18, Y
    3d20:	39 81       	ldd	r19, Y+1	; 0x01
    3d22:	82 1b       	sub	r24, r18
    3d24:	93 0b       	sbc	r25, r19
    3d26:	09 c0       	rjmp	.+18     	; 0x3d3a <__vector_123+0x1d2>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    3d28:	f8 01       	movw	r30, r16
    3d2a:	80 81       	ld	r24, Z
    3d2c:	91 81       	ldd	r25, Z+1	; 0x01
    3d2e:	28 81       	ld	r18, Y
    3d30:	39 81       	ldd	r19, Y+1	; 0x01
    3d32:	80 50       	subi	r24, 0x00	; 0
    3d34:	9c 4f       	sbci	r25, 0xFC	; 252
    3d36:	82 1b       	sub	r24, r18
    3d38:	93 0b       	sbc	r25, r19
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
	}
	//disable the tx outgoing hardware buffer ready interrupt if we have nothing more to put in it.
	if(uart_count(port)>0) uart_txbuffer_enable(port);
    3d3a:	00 97       	sbiw	r24, 0x00	; 0
    3d3c:	21 f0       	breq	.+8      	; 0x3d46 <__vector_123+0x1de>
    3d3e:	c7 01       	movw	r24, r14
    3d40:	0e 94 5f 19 	call	0x32be	; 0x32be <uart_txbuffer_enable>
    3d44:	03 c0       	rjmp	.+6      	; 0x3d4c <__vector_123+0x1e4>
	else uart_txbuffer_disable(port);
    3d46:	c7 01       	movw	r24, r14
    3d48:	0e 94 64 19 	call	0x32c8	; 0x32c8 <uart_txbuffer_disable>
#ifndef UART_DEBUG
	uint8_t idx = port_map(port);
	
	//if (idx==0){uart_enqueue(&uctrl, datain);} //xxx
	
	uart_buffer[idx][uart_head[idx]] = datain;
    3d4c:	d8 01       	movw	r26, r16
    3d4e:	8d 91       	ld	r24, X+
    3d50:	9c 91       	ld	r25, X
    3d52:	11 97       	sbiw	r26, 0x01	; 1
    3d54:	82 53       	subi	r24, 0x32	; 50
    3d56:	95 4c       	sbci	r25, 0xC5	; 197
    3d58:	fc 01       	movw	r30, r24
    3d5a:	d0 82       	st	Z, r13
	uart_head[idx]++;
    3d5c:	8d 91       	ld	r24, X+
    3d5e:	9c 91       	ld	r25, X
    3d60:	11 97       	sbiw	r26, 0x01	; 1
    3d62:	01 96       	adiw	r24, 0x01	; 1
    3d64:	8d 93       	st	X+, r24
    3d66:	9c 93       	st	X, r25
    3d68:	11 97       	sbiw	r26, 0x01	; 1
	if (uart_head[idx] >= MAX_BUFFER_LEN){
    3d6a:	8d 91       	ld	r24, X+
    3d6c:	9c 91       	ld	r25, X
    3d6e:	11 97       	sbiw	r26, 0x01	; 1
    3d70:	f4 e0       	ldi	r31, 0x04	; 4
    3d72:	80 30       	cpi	r24, 0x00	; 0
    3d74:	9f 07       	cpc	r25, r31
    3d76:	18 f0       	brcs	.+6      	; 0x3d7e <__vector_123+0x216>
		uart_head[idx] = 0;
    3d78:	1d 92       	st	X+, r1
    3d7a:	1c 92       	st	X, r1
    3d7c:	11 97       	sbiw	r26, 0x01	; 1
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    3d7e:	d7 01       	movw	r26, r14
    3d80:	11 96       	adiw	r26, 0x01	; 1
    3d82:	8c 91       	ld	r24, X
    3d84:	11 97       	sbiw	r26, 0x01	; 1
    3d86:	85 fd       	sbrc	r24, 5
    3d88:	18 c0       	rjmp	.+48     	; 0x3dba <__vector_123+0x252>
    3d8a:	33 c0       	rjmp	.+102    	; 0x3df2 <__vector_123+0x28a>
}

inline uint8_t uart_dequeue(USART_t* port){
	uint8_t idx = port_map(port);
	uint16_t oldtail;
	oldtail = uart_tail[idx];
    3d8c:	e8 81       	ld	r30, Y
    3d8e:	f9 81       	ldd	r31, Y+1	; 0x01
	uart_tail[idx]++;
    3d90:	88 81       	ld	r24, Y
    3d92:	99 81       	ldd	r25, Y+1	; 0x01
    3d94:	01 96       	adiw	r24, 0x01	; 1
    3d96:	88 83       	st	Y, r24
    3d98:	99 83       	std	Y+1, r25	; 0x01
	if (uart_tail[idx] >= MAX_BUFFER_LEN){
    3d9a:	88 81       	ld	r24, Y
    3d9c:	99 81       	ldd	r25, Y+1	; 0x01
    3d9e:	b4 e0       	ldi	r27, 0x04	; 4
    3da0:	80 30       	cpi	r24, 0x00	; 0
    3da2:	9b 07       	cpc	r25, r27
    3da4:	10 f0       	brcs	.+4      	; 0x3daa <__vector_123+0x242>
		uart_tail[idx] = 0;
    3da6:	18 82       	st	Y, r1
    3da8:	19 82       	std	Y+1, r1	; 0x01
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    3daa:	e2 53       	subi	r30, 0x32	; 50
    3dac:	f5 4c       	sbci	r31, 0xC5	; 197
    3dae:	80 81       	ld	r24, Z
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
    3db0:	f7 01       	movw	r30, r14
    3db2:	80 83       	st	Z, r24
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    3db4:	81 81       	ldd	r24, Z+1	; 0x01
    3db6:	85 ff       	sbrs	r24, 5
    3db8:	1c c0       	rjmp	.+56     	; 0x3df2 <__vector_123+0x28a>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    3dba:	d8 01       	movw	r26, r16
    3dbc:	8d 91       	ld	r24, X+
    3dbe:	9c 91       	ld	r25, X
    3dc0:	11 97       	sbiw	r26, 0x01	; 1
    3dc2:	28 81       	ld	r18, Y
    3dc4:	39 81       	ldd	r19, Y+1	; 0x01
    3dc6:	82 17       	cp	r24, r18
    3dc8:	93 07       	cpc	r25, r19
    3dca:	40 f0       	brcs	.+16     	; 0x3ddc <__vector_123+0x274>
		return (uart_head[idx] - uart_tail[idx]);
    3dcc:	8d 91       	ld	r24, X+
    3dce:	9c 91       	ld	r25, X
    3dd0:	11 97       	sbiw	r26, 0x01	; 1
    3dd2:	28 81       	ld	r18, Y
    3dd4:	39 81       	ldd	r19, Y+1	; 0x01
    3dd6:	82 1b       	sub	r24, r18
    3dd8:	93 0b       	sbc	r25, r19
    3dda:	09 c0       	rjmp	.+18     	; 0x3dee <__vector_123+0x286>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    3ddc:	f8 01       	movw	r30, r16
    3dde:	80 81       	ld	r24, Z
    3de0:	91 81       	ldd	r25, Z+1	; 0x01
    3de2:	28 81       	ld	r18, Y
    3de4:	39 81       	ldd	r19, Y+1	; 0x01
    3de6:	80 50       	subi	r24, 0x00	; 0
    3de8:	9c 4f       	sbci	r25, 0xFC	; 252
    3dea:	82 1b       	sub	r24, r18
    3dec:	93 0b       	sbc	r25, r19
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    3dee:	00 97       	sbiw	r24, 0x00	; 0
    3df0:	69 f6       	brne	.-102    	; 0x3d8c <__vector_123+0x224>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    3df2:	d8 01       	movw	r26, r16
    3df4:	8d 91       	ld	r24, X+
    3df6:	9c 91       	ld	r25, X
    3df8:	11 97       	sbiw	r26, 0x01	; 1
    3dfa:	28 81       	ld	r18, Y
    3dfc:	39 81       	ldd	r19, Y+1	; 0x01
    3dfe:	82 17       	cp	r24, r18
    3e00:	93 07       	cpc	r25, r19
    3e02:	40 f0       	brcs	.+16     	; 0x3e14 <__vector_123+0x2ac>
		return (uart_head[idx] - uart_tail[idx]);
    3e04:	8d 91       	ld	r24, X+
    3e06:	9c 91       	ld	r25, X
    3e08:	11 97       	sbiw	r26, 0x01	; 1
    3e0a:	28 81       	ld	r18, Y
    3e0c:	39 81       	ldd	r19, Y+1	; 0x01
    3e0e:	82 1b       	sub	r24, r18
    3e10:	93 0b       	sbc	r25, r19
    3e12:	09 c0       	rjmp	.+18     	; 0x3e26 <__vector_123+0x2be>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    3e14:	f8 01       	movw	r30, r16
    3e16:	80 81       	ld	r24, Z
    3e18:	91 81       	ldd	r25, Z+1	; 0x01
    3e1a:	28 81       	ld	r18, Y
    3e1c:	39 81       	ldd	r19, Y+1	; 0x01
    3e1e:	80 50       	subi	r24, 0x00	; 0
    3e20:	9c 4f       	sbci	r25, 0xFC	; 252
    3e22:	82 1b       	sub	r24, r18
    3e24:	93 0b       	sbc	r25, r19
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
	}
	//disable the tx outgoing hardware buffer ready interrupt if we have nothing more to put in it.
	if(uart_count(port)>0) uart_txbuffer_enable(port);
    3e26:	00 97       	sbiw	r24, 0x00	; 0
    3e28:	21 f0       	breq	.+8      	; 0x3e32 <__vector_123+0x2ca>
    3e2a:	c7 01       	movw	r24, r14
    3e2c:	0e 94 5f 19 	call	0x32be	; 0x32be <uart_txbuffer_enable>
    3e30:	03 c0       	rjmp	.+6      	; 0x3e38 <__vector_123+0x2d0>
	else uart_txbuffer_disable(port);
    3e32:	c7 01       	movw	r24, r14
    3e34:	0e 94 64 19 	call	0x32c8	; 0x32c8 <uart_txbuffer_disable>
			default:
				//Payload bytes -- send to LCD
				if (toSend == 0x0D) {lcd_flow_control = LCD_BUSY;}
				uart_enqueue(&udata, '`'); //xxx - echo to data port
				uart_enqueue(&udata, toSend); //xxx - echo to data port
				port->DATA = toSend;
    3e38:	d3 01       	movw	r26, r6
    3e3a:	dc 92       	st	X, r13
}

void inline uart_transmit_lcd(USART_t* port){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0) && (lcd_flow_control == LCD_READY)){
    3e3c:	f3 01       	movw	r30, r6
    3e3e:	81 81       	ldd	r24, Z+1	; 0x01
    3e40:	85 ff       	sbrs	r24, 5
    3e42:	24 c0       	rjmp	.+72     	; 0x3e8c <__vector_123+0x324>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    3e44:	d4 01       	movw	r26, r8
    3e46:	8d 91       	ld	r24, X+
    3e48:	9c 91       	ld	r25, X
    3e4a:	11 97       	sbiw	r26, 0x01	; 1
    3e4c:	f5 01       	movw	r30, r10
    3e4e:	20 81       	ld	r18, Z
    3e50:	31 81       	ldd	r19, Z+1	; 0x01
    3e52:	82 17       	cp	r24, r18
    3e54:	93 07       	cpc	r25, r19
    3e56:	40 f0       	brcs	.+16     	; 0x3e68 <__vector_123+0x300>
		return (uart_head[idx] - uart_tail[idx]);
    3e58:	8d 91       	ld	r24, X+
    3e5a:	9c 91       	ld	r25, X
    3e5c:	11 97       	sbiw	r26, 0x01	; 1
    3e5e:	20 81       	ld	r18, Z
    3e60:	31 81       	ldd	r19, Z+1	; 0x01
    3e62:	82 1b       	sub	r24, r18
    3e64:	93 0b       	sbc	r25, r19
    3e66:	0b c0       	rjmp	.+22     	; 0x3e7e <__vector_123+0x316>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    3e68:	d4 01       	movw	r26, r8
    3e6a:	8d 91       	ld	r24, X+
    3e6c:	9c 91       	ld	r25, X
    3e6e:	11 97       	sbiw	r26, 0x01	; 1
    3e70:	f5 01       	movw	r30, r10
    3e72:	20 81       	ld	r18, Z
    3e74:	31 81       	ldd	r19, Z+1	; 0x01
    3e76:	80 50       	subi	r24, 0x00	; 0
    3e78:	9c 4f       	sbci	r25, 0xFC	; 252
    3e7a:	82 1b       	sub	r24, r18
    3e7c:	93 0b       	sbc	r25, r19
}

void inline uart_transmit_lcd(USART_t* port){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0) && (lcd_flow_control == LCD_READY)){
    3e7e:	00 97       	sbiw	r24, 0x00	; 0
    3e80:	29 f0       	breq	.+10     	; 0x3e8c <__vector_123+0x324>
    3e82:	80 91 b0 26 	lds	r24, 0x26B0
    3e86:	82 35       	cpi	r24, 0x52	; 82
    3e88:	09 f4       	brne	.+2      	; 0x3e8c <__vector_123+0x324>
    3e8a:	c3 ce       	rjmp	.-634    	; 0x3c12 <__vector_123+0xaa>
				uart_enqueue(&udata, toSend); //xxx - echo to data port
				port->DATA = toSend;
				break;
		}				
	}
	uart_txbuffer_disable(port); //implemented this way to prevent periodic stalls that happen when uart_txbuffer isn't disabled quickly enough
    3e8c:	80 eb       	ldi	r24, 0xB0	; 176
    3e8e:	9b e0       	ldi	r25, 0x0B	; 11
    3e90:	0e 94 64 19 	call	0x32c8	; 0x32c8 <uart_txbuffer_disable>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    3e94:	20 91 c8 32 	lds	r18, 0x32C8
    3e98:	30 91 c9 32 	lds	r19, 0x32C9
    3e9c:	80 91 d4 3e 	lds	r24, 0x3ED4
    3ea0:	90 91 d5 3e 	lds	r25, 0x3ED5
    3ea4:	28 17       	cp	r18, r24
    3ea6:	39 07       	cpc	r19, r25
    3ea8:	58 f0       	brcs	.+22     	; 0x3ec0 <__vector_123+0x358>
		return (uart_head[idx] - uart_tail[idx]);
    3eaa:	80 91 c8 32 	lds	r24, 0x32C8
    3eae:	90 91 c9 32 	lds	r25, 0x32C9
    3eb2:	20 91 d4 3e 	lds	r18, 0x3ED4
    3eb6:	30 91 d5 3e 	lds	r19, 0x3ED5
    3eba:	82 1b       	sub	r24, r18
    3ebc:	93 0b       	sbc	r25, r19
    3ebe:	0c c0       	rjmp	.+24     	; 0x3ed8 <__vector_123+0x370>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    3ec0:	80 91 c8 32 	lds	r24, 0x32C8
    3ec4:	90 91 c9 32 	lds	r25, 0x32C9
    3ec8:	20 91 d4 3e 	lds	r18, 0x3ED4
    3ecc:	30 91 d5 3e 	lds	r19, 0x3ED5
    3ed0:	80 50       	subi	r24, 0x00	; 0
    3ed2:	9c 4f       	sbci	r25, 0xFC	; 252
    3ed4:	82 1b       	sub	r24, r18
    3ed6:	93 0b       	sbc	r25, r19
				port->DATA = toSend;
				break;
		}				
	}
	uart_txbuffer_disable(port); //implemented this way to prevent periodic stalls that happen when uart_txbuffer isn't disabled quickly enough
	if ((uart_count(port)>0) && (lcd_flow_control == LCD_READY)){ //...something is waiting to go out
    3ed8:	00 97       	sbiw	r24, 0x00	; 0
    3eda:	41 f0       	breq	.+16     	; 0x3eec <__vector_123+0x384>
    3edc:	80 91 b0 26 	lds	r24, 0x26B0
    3ee0:	82 35       	cpi	r24, 0x52	; 82
    3ee2:	21 f4       	brne	.+8      	; 0x3eec <__vector_123+0x384>
		uart_txbuffer_enable(port);	
    3ee4:	80 eb       	ldi	r24, 0xB0	; 176
    3ee6:	9b e0       	ldi	r25, 0x0B	; 11
    3ee8:	0e 94 5f 19 	call	0x32be	; 0x32be <uart_txbuffer_enable>
//Must correspond to definitions in uart.h
ISR(USARTC0_DRE_vect) {uart_transmit(&uctrl);}//TX Interrupt
ISR(USARTC0_RXC_vect) {uart_receive(&uctrl);} //RX Interrupt
ISR(USARTC1_DRE_vect) {uart_transmit(&udata);}//TX Interrupt
ISR(USARTC1_RXC_vect) {uart_receive(&udata);} //RX Interrupt
ISR(USARTF1_DRE_vect) {uart_transmit_lcd(&ulcd);}//TX Interrupt
    3eec:	ff 91       	pop	r31
    3eee:	ef 91       	pop	r30
    3ef0:	df 91       	pop	r29
    3ef2:	cf 91       	pop	r28
    3ef4:	bf 91       	pop	r27
    3ef6:	af 91       	pop	r26
    3ef8:	9f 91       	pop	r25
    3efa:	8f 91       	pop	r24
    3efc:	7f 91       	pop	r23
    3efe:	6f 91       	pop	r22
    3f00:	5f 91       	pop	r21
    3f02:	4f 91       	pop	r20
    3f04:	3f 91       	pop	r19
    3f06:	2f 91       	pop	r18
    3f08:	1f 91       	pop	r17
    3f0a:	0f 91       	pop	r16
    3f0c:	ff 90       	pop	r15
    3f0e:	ef 90       	pop	r14
    3f10:	df 90       	pop	r13
    3f12:	cf 90       	pop	r12
    3f14:	bf 90       	pop	r11
    3f16:	af 90       	pop	r10
    3f18:	9f 90       	pop	r9
    3f1a:	8f 90       	pop	r8
    3f1c:	7f 90       	pop	r7
    3f1e:	6f 90       	pop	r6
    3f20:	5f 90       	pop	r5
    3f22:	4f 90       	pop	r4
    3f24:	3f 90       	pop	r3
    3f26:	0f 90       	pop	r0
    3f28:	0b be       	out	0x3b, r0	; 59
    3f2a:	0f 90       	pop	r0
    3f2c:	0a be       	out	0x3a, r0	; 58
    3f2e:	0f 90       	pop	r0
    3f30:	09 be       	out	0x39, r0	; 57
    3f32:	0f 90       	pop	r0
    3f34:	08 be       	out	0x38, r0	; 56
    3f36:	0f 90       	pop	r0
    3f38:	0f be       	out	0x3f, r0	; 63
    3f3a:	0f 90       	pop	r0
    3f3c:	1f 90       	pop	r1
    3f3e:	18 95       	reti

00003f40 <__vector_122>:
ISR(USARTF1_RXC_vect) {uart_receive_lcd(&ulcd);} //RX Interrupt
    3f40:	1f 92       	push	r1
    3f42:	0f 92       	push	r0
    3f44:	0f b6       	in	r0, 0x3f	; 63
    3f46:	0f 92       	push	r0
    3f48:	08 b6       	in	r0, 0x38	; 56
    3f4a:	0f 92       	push	r0
    3f4c:	09 b6       	in	r0, 0x39	; 57
    3f4e:	0f 92       	push	r0
    3f50:	0a b6       	in	r0, 0x3a	; 58
    3f52:	0f 92       	push	r0
    3f54:	0b b6       	in	r0, 0x3b	; 59
    3f56:	0f 92       	push	r0
    3f58:	11 24       	eor	r1, r1
    3f5a:	4f 92       	push	r4
    3f5c:	5f 92       	push	r5
    3f5e:	6f 92       	push	r6
    3f60:	7f 92       	push	r7
    3f62:	8f 92       	push	r8
    3f64:	9f 92       	push	r9
    3f66:	af 92       	push	r10
    3f68:	bf 92       	push	r11
    3f6a:	cf 92       	push	r12
    3f6c:	df 92       	push	r13
    3f6e:	ef 92       	push	r14
    3f70:	ff 92       	push	r15
    3f72:	0f 93       	push	r16
    3f74:	1f 93       	push	r17
    3f76:	2f 93       	push	r18
    3f78:	3f 93       	push	r19
    3f7a:	4f 93       	push	r20
    3f7c:	5f 93       	push	r21
    3f7e:	6f 93       	push	r22
    3f80:	7f 93       	push	r23
    3f82:	8f 93       	push	r24
    3f84:	9f 93       	push	r25
    3f86:	af 93       	push	r26
    3f88:	bf 93       	push	r27
    3f8a:	cf 93       	push	r28
    3f8c:	df 93       	push	r29
    3f8e:	ef 93       	push	r30
    3f90:	ff 93       	push	r31
}

void inline uart_receive_lcd(USART_t* port){
	uint8_t incomingByte;
	//keep receiving until data register is empty or incoming queue is full
	while (((port->STATUS & _BV(7)) == B8(10000000)) && (uart_icount(port) < MAX_IBUFFER_LEN)){
    3f92:	0f 2e       	mov	r0, r31
    3f94:	f0 eb       	ldi	r31, 0xB0	; 176
    3f96:	8f 2e       	mov	r8, r31
    3f98:	fb e0       	ldi	r31, 0x0B	; 11
    3f9a:	9f 2e       	mov	r9, r31
    3f9c:	f0 2d       	mov	r31, r0
	uart_itail[idx] = 0;
}

inline uint16_t uart_icount(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_ihead[idx] >= uart_itail[idx]){	
    3f9e:	0f 2e       	mov	r0, r31
    3fa0:	fe ec       	ldi	r31, 0xCE	; 206
    3fa2:	af 2e       	mov	r10, r31
    3fa4:	fe e3       	ldi	r31, 0x3E	; 62
    3fa6:	bf 2e       	mov	r11, r31
    3fa8:	f0 2d       	mov	r31, r0
    3faa:	0f 2e       	mov	r0, r31
    3fac:	f2 ec       	ldi	r31, 0xC2	; 194
    3fae:	6f 2e       	mov	r6, r31
    3fb0:	f6 e2       	ldi	r31, 0x26	; 38
    3fb2:	7f 2e       	mov	r7, r31
    3fb4:	f0 2d       	mov	r31, r0
#ifndef UART_DEBUG
	uint8_t idx = port_map(port);
	
	//if (idx==0){uart_enqueue(&uctrl, datain);} //xxx
	
	uart_buffer[idx][uart_head[idx]] = datain;
    3fb6:	0c ec       	ldi	r16, 0xCC	; 204
    3fb8:	12 e3       	ldi	r17, 0x32	; 50
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    3fba:	0f 2e       	mov	r0, r31
    3fbc:	f0 eb       	ldi	r31, 0xB0	; 176
    3fbe:	ef 2e       	mov	r14, r31
    3fc0:	f8 e0       	ldi	r31, 0x08	; 8
    3fc2:	ff 2e       	mov	r15, r31
    3fc4:	f0 2d       	mov	r31, r0
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    3fc6:	c8 ed       	ldi	r28, 0xD8	; 216
    3fc8:	de e3       	ldi	r29, 0x3E	; 62
						lcd_flow_control = LCD_DONE_MACRO;
					}
					break;
				default:
				case LCD_COMMAND:
					lcd_flow_control = LCD_DONE_COMMAND;
    3fca:	0f 2e       	mov	r0, r31
    3fcc:	ff e4       	ldi	r31, 0x4F	; 79
    3fce:	cf 2e       	mov	r12, r31
    3fd0:	f0 2d       	mov	r31, r0
	}
}

inline void uart_ienqueue(USART_t* port, uint8_t datain){
	uint8_t idx = port_map(port);
	uart_ibuffer[idx][uart_ihead[idx]] = datain;
    3fd2:	0f 2e       	mov	r0, r31
    3fd4:	f8 ec       	ldi	r31, 0xC8	; 200
    3fd6:	4f 2e       	mov	r4, r31
    3fd8:	f6 e2       	ldi	r31, 0x26	; 38
    3fda:	5f 2e       	mov	r5, r31
    3fdc:	f0 2d       	mov	r31, r0
    3fde:	99 c0       	rjmp	.+306    	; 0x4112 <__stack+0x113>

void inline uart_receive_lcd(USART_t* port){
	uint8_t incomingByte;
	//keep receiving until data register is empty or incoming queue is full
	while (((port->STATUS & _BV(7)) == B8(10000000)) && (uart_icount(port) < MAX_IBUFFER_LEN)){
		incomingByte = port->DATA;
    3fe0:	f4 01       	movw	r30, r8
    3fe2:	d0 80       	ld	r13, Z
#ifndef UART_DEBUG
	uint8_t idx = port_map(port);
	
	//if (idx==0){uart_enqueue(&uctrl, datain);} //xxx
	
	uart_buffer[idx][uart_head[idx]] = datain;
    3fe4:	f8 01       	movw	r30, r16
    3fe6:	80 81       	ld	r24, Z
    3fe8:	91 81       	ldd	r25, Z+1	; 0x01
    3fea:	82 53       	subi	r24, 0x32	; 50
    3fec:	95 4c       	sbci	r25, 0xC5	; 197
    3fee:	fc 01       	movw	r30, r24
    3ff0:	d0 82       	st	Z, r13
	uart_head[idx]++;
    3ff2:	f8 01       	movw	r30, r16
    3ff4:	80 81       	ld	r24, Z
    3ff6:	91 81       	ldd	r25, Z+1	; 0x01
    3ff8:	01 96       	adiw	r24, 0x01	; 1
    3ffa:	80 83       	st	Z, r24
    3ffc:	91 83       	std	Z+1, r25	; 0x01
	if (uart_head[idx] >= MAX_BUFFER_LEN){
    3ffe:	80 81       	ld	r24, Z
    4000:	91 81       	ldd	r25, Z+1	; 0x01
    4002:	f4 e0       	ldi	r31, 0x04	; 4
    4004:	80 30       	cpi	r24, 0x00	; 0
    4006:	9f 07       	cpc	r25, r31
    4008:	18 f0       	brcs	.+6      	; 0x4010 <__stack+0x11>
		uart_head[idx] = 0;
    400a:	f8 01       	movw	r30, r16
    400c:	10 82       	st	Z, r1
    400e:	11 82       	std	Z+1, r1	; 0x01
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    4010:	f7 01       	movw	r30, r14
    4012:	81 81       	ldd	r24, Z+1	; 0x01
    4014:	85 fd       	sbrc	r24, 5
    4016:	18 c0       	rjmp	.+48     	; 0x4048 <__stack+0x49>
    4018:	31 c0       	rjmp	.+98     	; 0x407c <__stack+0x7d>
}

inline uint8_t uart_dequeue(USART_t* port){
	uint8_t idx = port_map(port);
	uint16_t oldtail;
	oldtail = uart_tail[idx];
    401a:	e8 81       	ld	r30, Y
    401c:	f9 81       	ldd	r31, Y+1	; 0x01
	uart_tail[idx]++;
    401e:	88 81       	ld	r24, Y
    4020:	99 81       	ldd	r25, Y+1	; 0x01
    4022:	01 96       	adiw	r24, 0x01	; 1
    4024:	88 83       	st	Y, r24
    4026:	99 83       	std	Y+1, r25	; 0x01
	if (uart_tail[idx] >= MAX_BUFFER_LEN){
    4028:	88 81       	ld	r24, Y
    402a:	99 81       	ldd	r25, Y+1	; 0x01
    402c:	24 e0       	ldi	r18, 0x04	; 4
    402e:	80 30       	cpi	r24, 0x00	; 0
    4030:	92 07       	cpc	r25, r18
    4032:	10 f0       	brcs	.+4      	; 0x4038 <__stack+0x39>
		uart_tail[idx] = 0;
    4034:	18 82       	st	Y, r1
    4036:	19 82       	std	Y+1, r1	; 0x01
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    4038:	e2 53       	subi	r30, 0x32	; 50
    403a:	f5 4c       	sbci	r31, 0xC5	; 197
    403c:	80 81       	ld	r24, Z
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
    403e:	f7 01       	movw	r30, r14
    4040:	80 83       	st	Z, r24
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    4042:	81 81       	ldd	r24, Z+1	; 0x01
    4044:	85 ff       	sbrs	r24, 5
    4046:	1a c0       	rjmp	.+52     	; 0x407c <__stack+0x7d>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    4048:	f8 01       	movw	r30, r16
    404a:	80 81       	ld	r24, Z
    404c:	91 81       	ldd	r25, Z+1	; 0x01
    404e:	28 81       	ld	r18, Y
    4050:	39 81       	ldd	r19, Y+1	; 0x01
    4052:	82 17       	cp	r24, r18
    4054:	93 07       	cpc	r25, r19
    4056:	38 f0       	brcs	.+14     	; 0x4066 <__stack+0x67>
		return (uart_head[idx] - uart_tail[idx]);
    4058:	80 81       	ld	r24, Z
    405a:	91 81       	ldd	r25, Z+1	; 0x01
    405c:	28 81       	ld	r18, Y
    405e:	39 81       	ldd	r19, Y+1	; 0x01
    4060:	82 1b       	sub	r24, r18
    4062:	93 0b       	sbc	r25, r19
    4064:	09 c0       	rjmp	.+18     	; 0x4078 <__stack+0x79>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    4066:	f8 01       	movw	r30, r16
    4068:	80 81       	ld	r24, Z
    406a:	91 81       	ldd	r25, Z+1	; 0x01
    406c:	28 81       	ld	r18, Y
    406e:	39 81       	ldd	r19, Y+1	; 0x01
    4070:	80 50       	subi	r24, 0x00	; 0
    4072:	9c 4f       	sbci	r25, 0xFC	; 252
    4074:	82 1b       	sub	r24, r18
    4076:	93 0b       	sbc	r25, r19
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    4078:	00 97       	sbiw	r24, 0x00	; 0
    407a:	79 f6       	brne	.-98     	; 0x401a <__stack+0x1b>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    407c:	f8 01       	movw	r30, r16
    407e:	80 81       	ld	r24, Z
    4080:	91 81       	ldd	r25, Z+1	; 0x01
    4082:	28 81       	ld	r18, Y
    4084:	39 81       	ldd	r19, Y+1	; 0x01
    4086:	82 17       	cp	r24, r18
    4088:	93 07       	cpc	r25, r19
    408a:	38 f0       	brcs	.+14     	; 0x409a <__stack+0x9b>
		return (uart_head[idx] - uart_tail[idx]);
    408c:	80 81       	ld	r24, Z
    408e:	91 81       	ldd	r25, Z+1	; 0x01
    4090:	28 81       	ld	r18, Y
    4092:	39 81       	ldd	r19, Y+1	; 0x01
    4094:	82 1b       	sub	r24, r18
    4096:	93 0b       	sbc	r25, r19
    4098:	09 c0       	rjmp	.+18     	; 0x40ac <__stack+0xad>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    409a:	f8 01       	movw	r30, r16
    409c:	80 81       	ld	r24, Z
    409e:	91 81       	ldd	r25, Z+1	; 0x01
    40a0:	28 81       	ld	r18, Y
    40a2:	39 81       	ldd	r19, Y+1	; 0x01
    40a4:	80 50       	subi	r24, 0x00	; 0
    40a6:	9c 4f       	sbci	r25, 0xFC	; 252
    40a8:	82 1b       	sub	r24, r18
    40aa:	93 0b       	sbc	r25, r19
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
	}
	//disable the tx outgoing hardware buffer ready interrupt if we have nothing more to put in it.
	if(uart_count(port)>0) uart_txbuffer_enable(port);
    40ac:	00 97       	sbiw	r24, 0x00	; 0
    40ae:	21 f0       	breq	.+8      	; 0x40b8 <__stack+0xb9>
    40b0:	c7 01       	movw	r24, r14
    40b2:	0e 94 5f 19 	call	0x32be	; 0x32be <uart_txbuffer_enable>
    40b6:	03 c0       	rjmp	.+6      	; 0x40be <__stack+0xbf>
	else uart_txbuffer_disable(port);
    40b8:	c7 01       	movw	r24, r14
    40ba:	0e 94 64 19 	call	0x32c8	; 0x32c8 <uart_txbuffer_disable>
	uint8_t incomingByte;
	//keep receiving until data register is empty or incoming queue is full
	while (((port->STATUS & _BV(7)) == B8(10000000)) && (uart_icount(port) < MAX_IBUFFER_LEN)){
		incomingByte = port->DATA;
		uart_enqueue(&udata, incomingByte); //xxx - echo to data port
		if (incomingByte == 0x0D){
    40be:	fd e0       	ldi	r31, 0x0D	; 13
    40c0:	df 16       	cp	r13, r31
    40c2:	71 f4       	brne	.+28     	; 0x40e0 <__stack+0xe1>
			switch(lcd_flow_type){				
    40c4:	80 91 ae 26 	lds	r24, 0x26AE
    40c8:	8e 3f       	cpi	r24, 0xFE	; 254
    40ca:	41 f4       	brne	.+16     	; 0x40dc <__stack+0xdd>
				case LCD_MACRO:					
					if (lcd_end_macro()){ //look for '~ macro terminator sequence
    40cc:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <lcd_end_macro>
    40d0:	88 23       	and	r24, r24
    40d2:	31 f0       	breq	.+12     	; 0x40e0 <__stack+0xe1>
						lcd_flow_control = LCD_DONE_MACRO;
    40d4:	80 e5       	ldi	r24, 0x50	; 80
    40d6:	80 93 b0 26 	sts	0x26B0, r24
    40da:	02 c0       	rjmp	.+4      	; 0x40e0 <__stack+0xe1>
					}
					break;
				default:
				case LCD_COMMAND:
					lcd_flow_control = LCD_DONE_COMMAND;
    40dc:	c0 92 b0 26 	sts	0x26B0, r12
					break;
			}					
		}
		lcd_set_touch(incomingByte); //write to touch-command listener
    40e0:	8d 2d       	mov	r24, r13
    40e2:	0e 94 a5 0d 	call	0x1b4a	; 0x1b4a <lcd_set_touch>
	}
}

inline void uart_ienqueue(USART_t* port, uint8_t datain){
	uint8_t idx = port_map(port);
	uart_ibuffer[idx][uart_ihead[idx]] = datain;
    40e6:	f5 01       	movw	r30, r10
    40e8:	80 81       	ld	r24, Z
    40ea:	91 81       	ldd	r25, Z+1	; 0x01
    40ec:	84 0d       	add	r24, r4
    40ee:	95 1d       	adc	r25, r5
    40f0:	fc 01       	movw	r30, r24
    40f2:	d0 82       	st	Z, r13
	uart_ihead[idx]++;
    40f4:	f5 01       	movw	r30, r10
    40f6:	80 81       	ld	r24, Z
    40f8:	91 81       	ldd	r25, Z+1	; 0x01
    40fa:	01 96       	adiw	r24, 0x01	; 1
    40fc:	80 83       	st	Z, r24
    40fe:	91 83       	std	Z+1, r25	; 0x01
	if (uart_ihead[idx] >= MAX_IBUFFER_LEN){
    4100:	80 81       	ld	r24, Z
    4102:	91 81       	ldd	r25, Z+1	; 0x01
    4104:	f4 e0       	ldi	r31, 0x04	; 4
    4106:	80 30       	cpi	r24, 0x00	; 0
    4108:	9f 07       	cpc	r25, r31
    410a:	18 f0       	brcs	.+6      	; 0x4112 <__stack+0x113>
		uart_ihead[idx] = 0;
    410c:	f5 01       	movw	r30, r10
    410e:	10 82       	st	Z, r1
    4110:	11 82       	std	Z+1, r1	; 0x01
}

void inline uart_receive_lcd(USART_t* port){
	uint8_t incomingByte;
	//keep receiving until data register is empty or incoming queue is full
	while (((port->STATUS & _BV(7)) == B8(10000000)) && (uart_icount(port) < MAX_IBUFFER_LEN)){
    4112:	f4 01       	movw	r30, r8
    4114:	81 81       	ldd	r24, Z+1	; 0x01
    4116:	88 23       	and	r24, r24
    4118:	0c f5       	brge	.+66     	; 0x415c <__stack+0x15d>
	uart_itail[idx] = 0;
}

inline uint16_t uart_icount(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_ihead[idx] >= uart_itail[idx]){	
    411a:	f5 01       	movw	r30, r10
    411c:	80 81       	ld	r24, Z
    411e:	91 81       	ldd	r25, Z+1	; 0x01
    4120:	f3 01       	movw	r30, r6
    4122:	20 81       	ld	r18, Z
    4124:	31 81       	ldd	r19, Z+1	; 0x01
    4126:	82 17       	cp	r24, r18
    4128:	93 07       	cpc	r25, r19
    412a:	48 f0       	brcs	.+18     	; 0x413e <__stack+0x13f>
		return (uart_ihead[idx] - uart_itail[idx]);
    412c:	f5 01       	movw	r30, r10
    412e:	80 81       	ld	r24, Z
    4130:	91 81       	ldd	r25, Z+1	; 0x01
    4132:	f3 01       	movw	r30, r6
    4134:	20 81       	ld	r18, Z
    4136:	31 81       	ldd	r19, Z+1	; 0x01
    4138:	82 1b       	sub	r24, r18
    413a:	93 0b       	sbc	r25, r19
    413c:	0a c0       	rjmp	.+20     	; 0x4152 <__stack+0x153>
	}
	else {
		return ((MAX_IBUFFER_LEN-uart_itail[idx])+uart_ihead[idx]);
    413e:	f5 01       	movw	r30, r10
    4140:	80 81       	ld	r24, Z
    4142:	91 81       	ldd	r25, Z+1	; 0x01
    4144:	f3 01       	movw	r30, r6
    4146:	20 81       	ld	r18, Z
    4148:	31 81       	ldd	r19, Z+1	; 0x01
    414a:	80 50       	subi	r24, 0x00	; 0
    414c:	9c 4f       	sbci	r25, 0xFC	; 252
    414e:	82 1b       	sub	r24, r18
    4150:	93 0b       	sbc	r25, r19
}

void inline uart_receive_lcd(USART_t* port){
	uint8_t incomingByte;
	//keep receiving until data register is empty or incoming queue is full
	while (((port->STATUS & _BV(7)) == B8(10000000)) && (uart_icount(port) < MAX_IBUFFER_LEN)){
    4152:	f4 e0       	ldi	r31, 0x04	; 4
    4154:	80 30       	cpi	r24, 0x00	; 0
    4156:	9f 07       	cpc	r25, r31
    4158:	08 f4       	brcc	.+2      	; 0x415c <__stack+0x15d>
    415a:	42 cf       	rjmp	.-380    	; 0x3fe0 <__vector_122+0xa0>
ISR(USARTC0_DRE_vect) {uart_transmit(&uctrl);}//TX Interrupt
ISR(USARTC0_RXC_vect) {uart_receive(&uctrl);} //RX Interrupt
ISR(USARTC1_DRE_vect) {uart_transmit(&udata);}//TX Interrupt
ISR(USARTC1_RXC_vect) {uart_receive(&udata);} //RX Interrupt
ISR(USARTF1_DRE_vect) {uart_transmit_lcd(&ulcd);}//TX Interrupt
ISR(USARTF1_RXC_vect) {uart_receive_lcd(&ulcd);} //RX Interrupt
    415c:	ff 91       	pop	r31
    415e:	ef 91       	pop	r30
    4160:	df 91       	pop	r29
    4162:	cf 91       	pop	r28
    4164:	bf 91       	pop	r27
    4166:	af 91       	pop	r26
    4168:	9f 91       	pop	r25
    416a:	8f 91       	pop	r24
    416c:	7f 91       	pop	r23
    416e:	6f 91       	pop	r22
    4170:	5f 91       	pop	r21
    4172:	4f 91       	pop	r20
    4174:	3f 91       	pop	r19
    4176:	2f 91       	pop	r18
    4178:	1f 91       	pop	r17
    417a:	0f 91       	pop	r16
    417c:	ff 90       	pop	r15
    417e:	ef 90       	pop	r14
    4180:	df 90       	pop	r13
    4182:	cf 90       	pop	r12
    4184:	bf 90       	pop	r11
    4186:	af 90       	pop	r10
    4188:	9f 90       	pop	r9
    418a:	8f 90       	pop	r8
    418c:	7f 90       	pop	r7
    418e:	6f 90       	pop	r6
    4190:	5f 90       	pop	r5
    4192:	4f 90       	pop	r4
    4194:	0f 90       	pop	r0
    4196:	0b be       	out	0x3b, r0	; 59
    4198:	0f 90       	pop	r0
    419a:	0a be       	out	0x3a, r0	; 58
    419c:	0f 90       	pop	r0
    419e:	09 be       	out	0x39, r0	; 57
    41a0:	0f 90       	pop	r0
    41a2:	08 be       	out	0x38, r0	; 56
    41a4:	0f 90       	pop	r0
    41a6:	0f be       	out	0x3f, r0	; 63
    41a8:	0f 90       	pop	r0
    41aa:	1f 90       	pop	r1
    41ac:	18 95       	reti

000041ae <uart_receive>:

//==================================
//= RECEPTION ENGINE (ISR BASED)
//==================================

void inline uart_receive(USART_t* port){
    41ae:	cf 92       	push	r12
    41b0:	df 92       	push	r13
    41b2:	ef 92       	push	r14
    41b4:	ff 92       	push	r15
    41b6:	0f 93       	push	r16
    41b8:	1f 93       	push	r17
    41ba:	cf 93       	push	r28
    41bc:	df 93       	push	r29
    41be:	dc 01       	movw	r26, r24
	uart_itail[idx] = 0;
}

inline uint16_t uart_icount(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_ihead[idx] >= uart_itail[idx]){	
    41c0:	0f 2e       	mov	r0, r31
    41c2:	fe ec       	ldi	r31, 0xCE	; 206
    41c4:	cf 2e       	mov	r12, r31
    41c6:	fe e3       	ldi	r31, 0x3E	; 62
    41c8:	df 2e       	mov	r13, r31
    41ca:	f0 2d       	mov	r31, r0
    41cc:	02 ec       	ldi	r16, 0xC2	; 194
    41ce:	16 e2       	ldi	r17, 0x26	; 38
	}
}

inline void uart_ienqueue(USART_t* port, uint8_t datain){
	uint8_t idx = port_map(port);
	uart_ibuffer[idx][uart_ihead[idx]] = datain;
    41d0:	0f 2e       	mov	r0, r31
    41d2:	f8 ec       	ldi	r31, 0xC8	; 200
    41d4:	ef 2e       	mov	r14, r31
    41d6:	f6 e2       	ldi	r31, 0x26	; 38
    41d8:	ff 2e       	mov	r15, r31
    41da:	f0 2d       	mov	r31, r0
//= RECEPTION ENGINE (ISR BASED)
//==================================

void inline uart_receive(USART_t* port){
	//keep receiving until data register is empty or incoming queue is full
	while (((port->STATUS & _BV(7)) == B8(10000000)) && (uart_icount(port) < MAX_IBUFFER_LEN)){		
    41dc:	3a c0       	rjmp	.+116    	; 0x4252 <uart_receive+0xa4>
		uart_ienqueue(port, port->DATA);
    41de:	4c 91       	ld	r20, X
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    41e0:	2b e0       	ldi	r18, 0x0B	; 11
    41e2:	a0 3b       	cpi	r26, 0xB0	; 176
    41e4:	b2 07       	cpc	r27, r18
    41e6:	51 f0       	breq	.+20     	; 0x41fc <uart_receive+0x4e>
	if (port == &uctrl) {return 1;}
    41e8:	38 e0       	ldi	r19, 0x08	; 8
    41ea:	a0 3a       	cpi	r26, 0xA0	; 160
    41ec:	b3 07       	cpc	r27, r19
    41ee:	41 f0       	breq	.+16     	; 0x4200 <uart_receive+0x52>
	if (port == &udata) {return 2;}
    41f0:	88 e0       	ldi	r24, 0x08	; 8
    41f2:	a0 3b       	cpi	r26, 0xB0	; 176
    41f4:	b8 07       	cpc	r27, r24
    41f6:	31 f4       	brne	.+12     	; 0x4204 <uart_receive+0x56>
    41f8:	62 e0       	ldi	r22, 0x02	; 2
    41fa:	05 c0       	rjmp	.+10     	; 0x4206 <uart_receive+0x58>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    41fc:	60 e0       	ldi	r22, 0x00	; 0
    41fe:	03 c0       	rjmp	.+6      	; 0x4206 <uart_receive+0x58>
	if (port == &uctrl) {return 1;}
    4200:	61 e0       	ldi	r22, 0x01	; 1
    4202:	01 c0       	rjmp	.+2      	; 0x4206 <uart_receive+0x58>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    4204:	60 e0       	ldi	r22, 0x00	; 0
	}
}

inline void uart_ienqueue(USART_t* port, uint8_t datain){
	uint8_t idx = port_map(port);
	uart_ibuffer[idx][uart_ihead[idx]] = datain;
    4206:	70 e0       	ldi	r23, 0x00	; 0
    4208:	cb 01       	movw	r24, r22
    420a:	88 0f       	add	r24, r24
    420c:	99 1f       	adc	r25, r25
    420e:	f6 01       	movw	r30, r12
    4210:	e8 0f       	add	r30, r24
    4212:	f9 1f       	adc	r31, r25
    4214:	20 81       	ld	r18, Z
    4216:	31 81       	ldd	r19, Z+1	; 0x01
    4218:	cb 01       	movw	r24, r22
    421a:	98 2f       	mov	r25, r24
    421c:	88 27       	eor	r24, r24
    421e:	99 0f       	add	r25, r25
    4220:	99 0f       	add	r25, r25
    4222:	82 0f       	add	r24, r18
    4224:	93 1f       	adc	r25, r19
    4226:	8e 0d       	add	r24, r14
    4228:	9f 1d       	adc	r25, r15
    422a:	ec 01       	movw	r28, r24
    422c:	48 83       	st	Y, r20
	uart_ihead[idx]++;
    422e:	80 81       	ld	r24, Z
    4230:	91 81       	ldd	r25, Z+1	; 0x01
    4232:	01 96       	adiw	r24, 0x01	; 1
    4234:	80 83       	st	Z, r24
    4236:	91 83       	std	Z+1, r25	; 0x01
	if (uart_ihead[idx] >= MAX_IBUFFER_LEN){
    4238:	80 81       	ld	r24, Z
    423a:	91 81       	ldd	r25, Z+1	; 0x01
    423c:	d4 e0       	ldi	r29, 0x04	; 4
    423e:	80 30       	cpi	r24, 0x00	; 0
    4240:	9d 07       	cpc	r25, r29
    4242:	38 f0       	brcs	.+14     	; 0x4252 <uart_receive+0xa4>
		uart_ihead[idx] = 0;
    4244:	fb 01       	movw	r30, r22
    4246:	ee 0f       	add	r30, r30
    4248:	ff 1f       	adc	r31, r31
    424a:	ec 0d       	add	r30, r12
    424c:	fd 1d       	adc	r31, r13
    424e:	10 82       	st	Z, r1
    4250:	11 82       	std	Z+1, r1	; 0x01
//= RECEPTION ENGINE (ISR BASED)
//==================================

void inline uart_receive(USART_t* port){
	//keep receiving until data register is empty or incoming queue is full
	while (((port->STATUS & _BV(7)) == B8(10000000)) && (uart_icount(port) < MAX_IBUFFER_LEN)){		
    4252:	11 96       	adiw	r26, 0x01	; 1
    4254:	8c 91       	ld	r24, X
    4256:	11 97       	sbiw	r26, 0x01	; 1
    4258:	88 23       	and	r24, r24
    425a:	0c f0       	brlt	.+2      	; 0x425e <uart_receive+0xb0>
    425c:	4c c0       	rjmp	.+152    	; 0x42f6 <uart_receive+0x148>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    425e:	2b e0       	ldi	r18, 0x0B	; 11
    4260:	a0 3b       	cpi	r26, 0xB0	; 176
    4262:	b2 07       	cpc	r27, r18
    4264:	51 f0       	breq	.+20     	; 0x427a <uart_receive+0xcc>
	if (port == &uctrl) {return 1;}
    4266:	38 e0       	ldi	r19, 0x08	; 8
    4268:	a0 3a       	cpi	r26, 0xA0	; 160
    426a:	b3 07       	cpc	r27, r19
    426c:	41 f0       	breq	.+16     	; 0x427e <uart_receive+0xd0>
	if (port == &udata) {return 2;}
    426e:	88 e0       	ldi	r24, 0x08	; 8
    4270:	a0 3b       	cpi	r26, 0xB0	; 176
    4272:	b8 07       	cpc	r27, r24
    4274:	31 f4       	brne	.+12     	; 0x4282 <uart_receive+0xd4>
    4276:	22 e0       	ldi	r18, 0x02	; 2
    4278:	05 c0       	rjmp	.+10     	; 0x4284 <uart_receive+0xd6>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    427a:	20 e0       	ldi	r18, 0x00	; 0
    427c:	03 c0       	rjmp	.+6      	; 0x4284 <uart_receive+0xd6>
	if (port == &uctrl) {return 1;}
    427e:	21 e0       	ldi	r18, 0x01	; 1
    4280:	01 c0       	rjmp	.+2      	; 0x4284 <uart_receive+0xd6>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    4282:	20 e0       	ldi	r18, 0x00	; 0
	uart_itail[idx] = 0;
}

inline uint16_t uart_icount(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_ihead[idx] >= uart_itail[idx]){	
    4284:	30 e0       	ldi	r19, 0x00	; 0
    4286:	c9 01       	movw	r24, r18
    4288:	88 0f       	add	r24, r24
    428a:	99 1f       	adc	r25, r25
    428c:	f6 01       	movw	r30, r12
    428e:	e8 0f       	add	r30, r24
    4290:	f9 1f       	adc	r31, r25
    4292:	40 81       	ld	r20, Z
    4294:	51 81       	ldd	r21, Z+1	; 0x01
    4296:	f8 01       	movw	r30, r16
    4298:	e8 0f       	add	r30, r24
    429a:	f9 1f       	adc	r31, r25
    429c:	80 81       	ld	r24, Z
    429e:	91 81       	ldd	r25, Z+1	; 0x01
    42a0:	48 17       	cp	r20, r24
    42a2:	59 07       	cpc	r21, r25
    42a4:	88 f0       	brcs	.+34     	; 0x42c8 <uart_receive+0x11a>
		return (uart_ihead[idx] - uart_itail[idx]);
    42a6:	22 0f       	add	r18, r18
    42a8:	33 1f       	adc	r19, r19
    42aa:	f6 01       	movw	r30, r12
    42ac:	e2 0f       	add	r30, r18
    42ae:	f3 1f       	adc	r31, r19
    42b0:	40 81       	ld	r20, Z
    42b2:	51 81       	ldd	r21, Z+1	; 0x01
    42b4:	f8 01       	movw	r30, r16
    42b6:	e2 0f       	add	r30, r18
    42b8:	f3 1f       	adc	r31, r19
    42ba:	80 81       	ld	r24, Z
    42bc:	91 81       	ldd	r25, Z+1	; 0x01
    42be:	ea 01       	movw	r28, r20
    42c0:	c8 1b       	sub	r28, r24
    42c2:	d9 0b       	sbc	r29, r25
    42c4:	ce 01       	movw	r24, r28
    42c6:	12 c0       	rjmp	.+36     	; 0x42ec <uart_receive+0x13e>
	}
	else {
		return ((MAX_IBUFFER_LEN-uart_itail[idx])+uart_ihead[idx]);
    42c8:	c9 01       	movw	r24, r18
    42ca:	88 0f       	add	r24, r24
    42cc:	99 1f       	adc	r25, r25
    42ce:	f6 01       	movw	r30, r12
    42d0:	e8 0f       	add	r30, r24
    42d2:	f9 1f       	adc	r31, r25
    42d4:	40 81       	ld	r20, Z
    42d6:	51 81       	ldd	r21, Z+1	; 0x01
    42d8:	f8 01       	movw	r30, r16
    42da:	e8 0f       	add	r30, r24
    42dc:	f9 1f       	adc	r31, r25
    42de:	20 81       	ld	r18, Z
    42e0:	31 81       	ldd	r19, Z+1	; 0x01
    42e2:	ca 01       	movw	r24, r20
    42e4:	80 50       	subi	r24, 0x00	; 0
    42e6:	9c 4f       	sbci	r25, 0xFC	; 252
    42e8:	82 1b       	sub	r24, r18
    42ea:	93 0b       	sbc	r25, r19
//= RECEPTION ENGINE (ISR BASED)
//==================================

void inline uart_receive(USART_t* port){
	//keep receiving until data register is empty or incoming queue is full
	while (((port->STATUS & _BV(7)) == B8(10000000)) && (uart_icount(port) < MAX_IBUFFER_LEN)){		
    42ec:	d4 e0       	ldi	r29, 0x04	; 4
    42ee:	80 30       	cpi	r24, 0x00	; 0
    42f0:	9d 07       	cpc	r25, r29
    42f2:	08 f4       	brcc	.+2      	; 0x42f6 <uart_receive+0x148>
    42f4:	74 cf       	rjmp	.-280    	; 0x41de <uart_receive+0x30>
		uart_ienqueue(port, port->DATA);
	}	
}
    42f6:	df 91       	pop	r29
    42f8:	cf 91       	pop	r28
    42fa:	1f 91       	pop	r17
    42fc:	0f 91       	pop	r16
    42fe:	ff 90       	pop	r15
    4300:	ef 90       	pop	r14
    4302:	df 90       	pop	r13
    4304:	cf 90       	pop	r12
    4306:	08 95       	ret

00004308 <uart_receive_lcd>:

void inline uart_receive_lcd(USART_t* port){
    4308:	3f 92       	push	r3
    430a:	4f 92       	push	r4
    430c:	5f 92       	push	r5
    430e:	6f 92       	push	r6
    4310:	7f 92       	push	r7
    4312:	8f 92       	push	r8
    4314:	9f 92       	push	r9
    4316:	af 92       	push	r10
    4318:	bf 92       	push	r11
    431a:	cf 92       	push	r12
    431c:	df 92       	push	r13
    431e:	ef 92       	push	r14
    4320:	ff 92       	push	r15
    4322:	0f 93       	push	r16
    4324:	1f 93       	push	r17
    4326:	cf 93       	push	r28
    4328:	df 93       	push	r29
    432a:	5c 01       	movw	r10, r24
	uart_itail[idx] = 0;
}

inline uint16_t uart_icount(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_ihead[idx] >= uart_itail[idx]){	
    432c:	0f 2e       	mov	r0, r31
    432e:	fe ec       	ldi	r31, 0xCE	; 206
    4330:	8f 2e       	mov	r8, r31
    4332:	fe e3       	ldi	r31, 0x3E	; 62
    4334:	9f 2e       	mov	r9, r31
    4336:	f0 2d       	mov	r31, r0
    4338:	0f 2e       	mov	r0, r31
    433a:	f2 ec       	ldi	r31, 0xC2	; 194
    433c:	6f 2e       	mov	r6, r31
    433e:	f6 e2       	ldi	r31, 0x26	; 38
    4340:	7f 2e       	mov	r7, r31
    4342:	f0 2d       	mov	r31, r0
#ifndef UART_DEBUG
	uint8_t idx = port_map(port);
	
	//if (idx==0){uart_enqueue(&uctrl, datain);} //xxx
	
	uart_buffer[idx][uart_head[idx]] = datain;
    4344:	0c ec       	ldi	r16, 0xCC	; 204
    4346:	12 e3       	ldi	r17, 0x32	; 50
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    4348:	0f 2e       	mov	r0, r31
    434a:	f0 eb       	ldi	r31, 0xB0	; 176
    434c:	ef 2e       	mov	r14, r31
    434e:	f8 e0       	ldi	r31, 0x08	; 8
    4350:	ff 2e       	mov	r15, r31
    4352:	f0 2d       	mov	r31, r0
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    4354:	c8 ed       	ldi	r28, 0xD8	; 216
    4356:	de e3       	ldi	r29, 0x3E	; 62
						lcd_flow_control = LCD_DONE_MACRO;
					}
					break;
				default:
				case LCD_COMMAND:
					lcd_flow_control = LCD_DONE_COMMAND;
    4358:	0f 2e       	mov	r0, r31
    435a:	ff e4       	ldi	r31, 0x4F	; 79
    435c:	cf 2e       	mov	r12, r31
    435e:	f0 2d       	mov	r31, r0
		uart_enqueue(&udata, incomingByte); //xxx - echo to data port
		if (incomingByte == 0x0D){
			switch(lcd_flow_type){				
				case LCD_MACRO:					
					if (lcd_end_macro()){ //look for '~ macro terminator sequence
						lcd_flow_control = LCD_DONE_MACRO;
    4360:	0f 2e       	mov	r0, r31
    4362:	f0 e5       	ldi	r31, 0x50	; 80
    4364:	3f 2e       	mov	r3, r31
    4366:	f0 2d       	mov	r31, r0
	}
}

inline void uart_ienqueue(USART_t* port, uint8_t datain){
	uint8_t idx = port_map(port);
	uart_ibuffer[idx][uart_ihead[idx]] = datain;
    4368:	0f 2e       	mov	r0, r31
    436a:	f8 ec       	ldi	r31, 0xC8	; 200
    436c:	4f 2e       	mov	r4, r31
    436e:	f6 e2       	ldi	r31, 0x26	; 38
    4370:	5f 2e       	mov	r5, r31
    4372:	f0 2d       	mov	r31, r0
}

void inline uart_receive_lcd(USART_t* port){
	uint8_t incomingByte;
	//keep receiving until data register is empty or incoming queue is full
	while (((port->STATUS & _BV(7)) == B8(10000000)) && (uart_icount(port) < MAX_IBUFFER_LEN)){
    4374:	b7 c0       	rjmp	.+366    	; 0x44e4 <uart_receive_lcd+0x1dc>
		incomingByte = port->DATA;
    4376:	d5 01       	movw	r26, r10
    4378:	dc 90       	ld	r13, X
#ifndef UART_DEBUG
	uint8_t idx = port_map(port);
	
	//if (idx==0){uart_enqueue(&uctrl, datain);} //xxx
	
	uart_buffer[idx][uart_head[idx]] = datain;
    437a:	f8 01       	movw	r30, r16
    437c:	80 81       	ld	r24, Z
    437e:	91 81       	ldd	r25, Z+1	; 0x01
    4380:	82 53       	subi	r24, 0x32	; 50
    4382:	95 4c       	sbci	r25, 0xC5	; 197
    4384:	dc 01       	movw	r26, r24
    4386:	dc 92       	st	X, r13
	uart_head[idx]++;
    4388:	80 81       	ld	r24, Z
    438a:	91 81       	ldd	r25, Z+1	; 0x01
    438c:	01 96       	adiw	r24, 0x01	; 1
    438e:	80 83       	st	Z, r24
    4390:	91 83       	std	Z+1, r25	; 0x01
	if (uart_head[idx] >= MAX_BUFFER_LEN){
    4392:	80 81       	ld	r24, Z
    4394:	91 81       	ldd	r25, Z+1	; 0x01
    4396:	b4 e0       	ldi	r27, 0x04	; 4
    4398:	80 30       	cpi	r24, 0x00	; 0
    439a:	9b 07       	cpc	r25, r27
    439c:	10 f0       	brcs	.+4      	; 0x43a2 <uart_receive_lcd+0x9a>
		uart_head[idx] = 0;
    439e:	10 82       	st	Z, r1
    43a0:	11 82       	std	Z+1, r1	; 0x01
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    43a2:	f7 01       	movw	r30, r14
    43a4:	81 81       	ldd	r24, Z+1	; 0x01
    43a6:	85 fd       	sbrc	r24, 5
    43a8:	1a c0       	rjmp	.+52     	; 0x43de <uart_receive_lcd+0xd6>
    43aa:	32 c0       	rjmp	.+100    	; 0x4410 <uart_receive_lcd+0x108>
}

inline uint8_t uart_dequeue(USART_t* port){
	uint8_t idx = port_map(port);
	uint16_t oldtail;
	oldtail = uart_tail[idx];
    43ac:	e8 81       	ld	r30, Y
    43ae:	f9 81       	ldd	r31, Y+1	; 0x01
	uart_tail[idx]++;
    43b0:	88 81       	ld	r24, Y
    43b2:	99 81       	ldd	r25, Y+1	; 0x01
    43b4:	01 96       	adiw	r24, 0x01	; 1
    43b6:	88 83       	st	Y, r24
    43b8:	99 83       	std	Y+1, r25	; 0x01
	if (uart_tail[idx] >= MAX_BUFFER_LEN){
    43ba:	88 81       	ld	r24, Y
    43bc:	99 81       	ldd	r25, Y+1	; 0x01
    43be:	24 e0       	ldi	r18, 0x04	; 4
    43c0:	80 30       	cpi	r24, 0x00	; 0
    43c2:	92 07       	cpc	r25, r18
    43c4:	10 f0       	brcs	.+4      	; 0x43ca <uart_receive_lcd+0xc2>
		uart_tail[idx] = 0;
    43c6:	18 82       	st	Y, r1
    43c8:	19 82       	std	Y+1, r1	; 0x01
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    43ca:	e2 53       	subi	r30, 0x32	; 50
    43cc:	f5 4c       	sbci	r31, 0xC5	; 197
    43ce:	80 81       	ld	r24, Z
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
    43d0:	d7 01       	movw	r26, r14
    43d2:	8c 93       	st	X, r24
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    43d4:	11 96       	adiw	r26, 0x01	; 1
    43d6:	8c 91       	ld	r24, X
    43d8:	11 97       	sbiw	r26, 0x01	; 1
    43da:	85 ff       	sbrs	r24, 5
    43dc:	19 c0       	rjmp	.+50     	; 0x4410 <uart_receive_lcd+0x108>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    43de:	f8 01       	movw	r30, r16
    43e0:	80 81       	ld	r24, Z
    43e2:	91 81       	ldd	r25, Z+1	; 0x01
    43e4:	28 81       	ld	r18, Y
    43e6:	39 81       	ldd	r19, Y+1	; 0x01
    43e8:	82 17       	cp	r24, r18
    43ea:	93 07       	cpc	r25, r19
    43ec:	38 f0       	brcs	.+14     	; 0x43fc <uart_receive_lcd+0xf4>
		return (uart_head[idx] - uart_tail[idx]);
    43ee:	80 81       	ld	r24, Z
    43f0:	91 81       	ldd	r25, Z+1	; 0x01
    43f2:	28 81       	ld	r18, Y
    43f4:	39 81       	ldd	r19, Y+1	; 0x01
    43f6:	82 1b       	sub	r24, r18
    43f8:	93 0b       	sbc	r25, r19
    43fa:	08 c0       	rjmp	.+16     	; 0x440c <uart_receive_lcd+0x104>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    43fc:	80 81       	ld	r24, Z
    43fe:	91 81       	ldd	r25, Z+1	; 0x01
    4400:	28 81       	ld	r18, Y
    4402:	39 81       	ldd	r19, Y+1	; 0x01
    4404:	80 50       	subi	r24, 0x00	; 0
    4406:	9c 4f       	sbci	r25, 0xFC	; 252
    4408:	82 1b       	sub	r24, r18
    440a:	93 0b       	sbc	r25, r19
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    440c:	00 97       	sbiw	r24, 0x00	; 0
    440e:	71 f6       	brne	.-100    	; 0x43ac <uart_receive_lcd+0xa4>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    4410:	f8 01       	movw	r30, r16
    4412:	80 81       	ld	r24, Z
    4414:	91 81       	ldd	r25, Z+1	; 0x01
    4416:	28 81       	ld	r18, Y
    4418:	39 81       	ldd	r19, Y+1	; 0x01
    441a:	82 17       	cp	r24, r18
    441c:	93 07       	cpc	r25, r19
    441e:	38 f0       	brcs	.+14     	; 0x442e <uart_receive_lcd+0x126>
		return (uart_head[idx] - uart_tail[idx]);
    4420:	80 81       	ld	r24, Z
    4422:	91 81       	ldd	r25, Z+1	; 0x01
    4424:	28 81       	ld	r18, Y
    4426:	39 81       	ldd	r19, Y+1	; 0x01
    4428:	82 1b       	sub	r24, r18
    442a:	93 0b       	sbc	r25, r19
    442c:	08 c0       	rjmp	.+16     	; 0x443e <uart_receive_lcd+0x136>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    442e:	80 81       	ld	r24, Z
    4430:	91 81       	ldd	r25, Z+1	; 0x01
    4432:	28 81       	ld	r18, Y
    4434:	39 81       	ldd	r19, Y+1	; 0x01
    4436:	80 50       	subi	r24, 0x00	; 0
    4438:	9c 4f       	sbci	r25, 0xFC	; 252
    443a:	82 1b       	sub	r24, r18
    443c:	93 0b       	sbc	r25, r19
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
	}
	//disable the tx outgoing hardware buffer ready interrupt if we have nothing more to put in it.
	if(uart_count(port)>0) uart_txbuffer_enable(port);
    443e:	00 97       	sbiw	r24, 0x00	; 0
    4440:	21 f0       	breq	.+8      	; 0x444a <uart_receive_lcd+0x142>
    4442:	c7 01       	movw	r24, r14
    4444:	0e 94 5f 19 	call	0x32be	; 0x32be <uart_txbuffer_enable>
    4448:	03 c0       	rjmp	.+6      	; 0x4450 <uart_receive_lcd+0x148>
	else uart_txbuffer_disable(port);
    444a:	c7 01       	movw	r24, r14
    444c:	0e 94 64 19 	call	0x32c8	; 0x32c8 <uart_txbuffer_disable>
	uint8_t incomingByte;
	//keep receiving until data register is empty or incoming queue is full
	while (((port->STATUS & _BV(7)) == B8(10000000)) && (uart_icount(port) < MAX_IBUFFER_LEN)){
		incomingByte = port->DATA;
		uart_enqueue(&udata, incomingByte); //xxx - echo to data port
		if (incomingByte == 0x0D){
    4450:	bd e0       	ldi	r27, 0x0D	; 13
    4452:	db 16       	cp	r13, r27
    4454:	69 f4       	brne	.+26     	; 0x4470 <uart_receive_lcd+0x168>
			switch(lcd_flow_type){				
    4456:	80 91 ae 26 	lds	r24, 0x26AE
    445a:	8e 3f       	cpi	r24, 0xFE	; 254
    445c:	39 f4       	brne	.+14     	; 0x446c <uart_receive_lcd+0x164>
				case LCD_MACRO:					
					if (lcd_end_macro()){ //look for '~ macro terminator sequence
    445e:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <lcd_end_macro>
    4462:	88 23       	and	r24, r24
    4464:	29 f0       	breq	.+10     	; 0x4470 <uart_receive_lcd+0x168>
						lcd_flow_control = LCD_DONE_MACRO;
    4466:	30 92 b0 26 	sts	0x26B0, r3
    446a:	02 c0       	rjmp	.+4      	; 0x4470 <uart_receive_lcd+0x168>
					}
					break;
				default:
				case LCD_COMMAND:
					lcd_flow_control = LCD_DONE_COMMAND;
    446c:	c0 92 b0 26 	sts	0x26B0, r12
					break;
			}					
		}
		lcd_set_touch(incomingByte); //write to touch-command listener
    4470:	8d 2d       	mov	r24, r13
    4472:	0e 94 a5 0d 	call	0x1b4a	; 0x1b4a <lcd_set_touch>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    4476:	e0 eb       	ldi	r30, 0xB0	; 176
    4478:	ae 16       	cp	r10, r30
    447a:	eb e0       	ldi	r30, 0x0B	; 11
    447c:	be 06       	cpc	r11, r30
    447e:	61 f0       	breq	.+24     	; 0x4498 <uart_receive_lcd+0x190>
	if (port == &uctrl) {return 1;}
    4480:	f0 ea       	ldi	r31, 0xA0	; 160
    4482:	af 16       	cp	r10, r31
    4484:	f8 e0       	ldi	r31, 0x08	; 8
    4486:	bf 06       	cpc	r11, r31
    4488:	49 f0       	breq	.+18     	; 0x449c <uart_receive_lcd+0x194>
	if (port == &udata) {return 2;}
    448a:	20 eb       	ldi	r18, 0xB0	; 176
    448c:	a2 16       	cp	r10, r18
    448e:	28 e0       	ldi	r18, 0x08	; 8
    4490:	b2 06       	cpc	r11, r18
    4492:	31 f4       	brne	.+12     	; 0x44a0 <uart_receive_lcd+0x198>
    4494:	42 e0       	ldi	r20, 0x02	; 2
    4496:	05 c0       	rjmp	.+10     	; 0x44a2 <uart_receive_lcd+0x19a>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    4498:	40 e0       	ldi	r20, 0x00	; 0
    449a:	03 c0       	rjmp	.+6      	; 0x44a2 <uart_receive_lcd+0x19a>
	if (port == &uctrl) {return 1;}
    449c:	41 e0       	ldi	r20, 0x01	; 1
    449e:	01 c0       	rjmp	.+2      	; 0x44a2 <uart_receive_lcd+0x19a>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    44a0:	40 e0       	ldi	r20, 0x00	; 0
	}
}

inline void uart_ienqueue(USART_t* port, uint8_t datain){
	uint8_t idx = port_map(port);
	uart_ibuffer[idx][uart_ihead[idx]] = datain;
    44a2:	50 e0       	ldi	r21, 0x00	; 0
    44a4:	ca 01       	movw	r24, r20
    44a6:	88 0f       	add	r24, r24
    44a8:	99 1f       	adc	r25, r25
    44aa:	f4 01       	movw	r30, r8
    44ac:	e8 0f       	add	r30, r24
    44ae:	f9 1f       	adc	r31, r25
    44b0:	20 81       	ld	r18, Z
    44b2:	31 81       	ldd	r19, Z+1	; 0x01
    44b4:	ca 01       	movw	r24, r20
    44b6:	98 2f       	mov	r25, r24
    44b8:	88 27       	eor	r24, r24
    44ba:	99 0f       	add	r25, r25
    44bc:	99 0f       	add	r25, r25
    44be:	82 0f       	add	r24, r18
    44c0:	93 1f       	adc	r25, r19
    44c2:	84 0d       	add	r24, r4
    44c4:	95 1d       	adc	r25, r5
    44c6:	dc 01       	movw	r26, r24
    44c8:	dc 92       	st	X, r13
	uart_ihead[idx]++;
    44ca:	80 81       	ld	r24, Z
    44cc:	91 81       	ldd	r25, Z+1	; 0x01
    44ce:	01 96       	adiw	r24, 0x01	; 1
    44d0:	80 83       	st	Z, r24
    44d2:	91 83       	std	Z+1, r25	; 0x01
	if (uart_ihead[idx] >= MAX_IBUFFER_LEN){
    44d4:	80 81       	ld	r24, Z
    44d6:	91 81       	ldd	r25, Z+1	; 0x01
    44d8:	b4 e0       	ldi	r27, 0x04	; 4
    44da:	80 30       	cpi	r24, 0x00	; 0
    44dc:	9b 07       	cpc	r25, r27
    44de:	10 f0       	brcs	.+4      	; 0x44e4 <uart_receive_lcd+0x1dc>
		uart_ihead[idx] = 0;
    44e0:	10 82       	st	Z, r1
    44e2:	11 82       	std	Z+1, r1	; 0x01
}

void inline uart_receive_lcd(USART_t* port){
	uint8_t incomingByte;
	//keep receiving until data register is empty or incoming queue is full
	while (((port->STATUS & _BV(7)) == B8(10000000)) && (uart_icount(port) < MAX_IBUFFER_LEN)){
    44e4:	d5 01       	movw	r26, r10
    44e6:	11 96       	adiw	r26, 0x01	; 1
    44e8:	8c 91       	ld	r24, X
    44ea:	11 97       	sbiw	r26, 0x01	; 1
    44ec:	88 23       	and	r24, r24
    44ee:	0c f0       	brlt	.+2      	; 0x44f2 <uart_receive_lcd+0x1ea>
    44f0:	4d c0       	rjmp	.+154    	; 0x458c <uart_receive_lcd+0x284>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    44f2:	b0 eb       	ldi	r27, 0xB0	; 176
    44f4:	ab 16       	cp	r10, r27
    44f6:	bb e0       	ldi	r27, 0x0B	; 11
    44f8:	bb 06       	cpc	r11, r27
    44fa:	61 f0       	breq	.+24     	; 0x4514 <uart_receive_lcd+0x20c>
	if (port == &uctrl) {return 1;}
    44fc:	e0 ea       	ldi	r30, 0xA0	; 160
    44fe:	ae 16       	cp	r10, r30
    4500:	e8 e0       	ldi	r30, 0x08	; 8
    4502:	be 06       	cpc	r11, r30
    4504:	49 f0       	breq	.+18     	; 0x4518 <uart_receive_lcd+0x210>
	if (port == &udata) {return 2;}
    4506:	f0 eb       	ldi	r31, 0xB0	; 176
    4508:	af 16       	cp	r10, r31
    450a:	f8 e0       	ldi	r31, 0x08	; 8
    450c:	bf 06       	cpc	r11, r31
    450e:	31 f4       	brne	.+12     	; 0x451c <uart_receive_lcd+0x214>
    4510:	22 e0       	ldi	r18, 0x02	; 2
    4512:	05 c0       	rjmp	.+10     	; 0x451e <uart_receive_lcd+0x216>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    4514:	20 e0       	ldi	r18, 0x00	; 0
    4516:	03 c0       	rjmp	.+6      	; 0x451e <uart_receive_lcd+0x216>
	if (port == &uctrl) {return 1;}
    4518:	21 e0       	ldi	r18, 0x01	; 1
    451a:	01 c0       	rjmp	.+2      	; 0x451e <uart_receive_lcd+0x216>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    451c:	20 e0       	ldi	r18, 0x00	; 0
	uart_itail[idx] = 0;
}

inline uint16_t uart_icount(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_ihead[idx] >= uart_itail[idx]){	
    451e:	30 e0       	ldi	r19, 0x00	; 0
    4520:	c9 01       	movw	r24, r18
    4522:	88 0f       	add	r24, r24
    4524:	99 1f       	adc	r25, r25
    4526:	f4 01       	movw	r30, r8
    4528:	e8 0f       	add	r30, r24
    452a:	f9 1f       	adc	r31, r25
    452c:	40 81       	ld	r20, Z
    452e:	51 81       	ldd	r21, Z+1	; 0x01
    4530:	f3 01       	movw	r30, r6
    4532:	e8 0f       	add	r30, r24
    4534:	f9 1f       	adc	r31, r25
    4536:	80 81       	ld	r24, Z
    4538:	91 81       	ldd	r25, Z+1	; 0x01
    453a:	48 17       	cp	r20, r24
    453c:	59 07       	cpc	r21, r25
    453e:	88 f0       	brcs	.+34     	; 0x4562 <uart_receive_lcd+0x25a>
		return (uart_ihead[idx] - uart_itail[idx]);
    4540:	22 0f       	add	r18, r18
    4542:	33 1f       	adc	r19, r19
    4544:	f4 01       	movw	r30, r8
    4546:	e2 0f       	add	r30, r18
    4548:	f3 1f       	adc	r31, r19
    454a:	40 81       	ld	r20, Z
    454c:	51 81       	ldd	r21, Z+1	; 0x01
    454e:	f3 01       	movw	r30, r6
    4550:	e2 0f       	add	r30, r18
    4552:	f3 1f       	adc	r31, r19
    4554:	80 81       	ld	r24, Z
    4556:	91 81       	ldd	r25, Z+1	; 0x01
    4558:	9a 01       	movw	r18, r20
    455a:	28 1b       	sub	r18, r24
    455c:	39 0b       	sbc	r19, r25
    455e:	c9 01       	movw	r24, r18
    4560:	10 c0       	rjmp	.+32     	; 0x4582 <uart_receive_lcd+0x27a>
	}
	else {
		return ((MAX_IBUFFER_LEN-uart_itail[idx])+uart_ihead[idx]);
    4562:	22 0f       	add	r18, r18
    4564:	33 1f       	adc	r19, r19
    4566:	f4 01       	movw	r30, r8
    4568:	e2 0f       	add	r30, r18
    456a:	f3 1f       	adc	r31, r19
    456c:	80 81       	ld	r24, Z
    456e:	91 81       	ldd	r25, Z+1	; 0x01
    4570:	f3 01       	movw	r30, r6
    4572:	e2 0f       	add	r30, r18
    4574:	f3 1f       	adc	r31, r19
    4576:	20 81       	ld	r18, Z
    4578:	31 81       	ldd	r19, Z+1	; 0x01
    457a:	80 50       	subi	r24, 0x00	; 0
    457c:	9c 4f       	sbci	r25, 0xFC	; 252
    457e:	82 1b       	sub	r24, r18
    4580:	93 0b       	sbc	r25, r19
}

void inline uart_receive_lcd(USART_t* port){
	uint8_t incomingByte;
	//keep receiving until data register is empty or incoming queue is full
	while (((port->STATUS & _BV(7)) == B8(10000000)) && (uart_icount(port) < MAX_IBUFFER_LEN)){
    4582:	34 e0       	ldi	r19, 0x04	; 4
    4584:	80 30       	cpi	r24, 0x00	; 0
    4586:	93 07       	cpc	r25, r19
    4588:	08 f4       	brcc	.+2      	; 0x458c <uart_receive_lcd+0x284>
    458a:	f5 ce       	rjmp	.-534    	; 0x4376 <uart_receive_lcd+0x6e>
			}					
		}
		lcd_set_touch(incomingByte); //write to touch-command listener
		uart_ienqueue(port, incomingByte);
	}
}
    458c:	df 91       	pop	r29
    458e:	cf 91       	pop	r28
    4590:	1f 91       	pop	r17
    4592:	0f 91       	pop	r16
    4594:	ff 90       	pop	r15
    4596:	ef 90       	pop	r14
    4598:	df 90       	pop	r13
    459a:	cf 90       	pop	r12
    459c:	bf 90       	pop	r11
    459e:	af 90       	pop	r10
    45a0:	9f 90       	pop	r9
    45a2:	8f 90       	pop	r8
    45a4:	7f 90       	pop	r7
    45a6:	6f 90       	pop	r6
    45a8:	5f 90       	pop	r5
    45aa:	4f 90       	pop	r4
    45ac:	3f 90       	pop	r3
    45ae:	08 95       	ret

000045b0 <init_uart_obuffer>:
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    45b0:	2b e0       	ldi	r18, 0x0B	; 11
    45b2:	80 3b       	cpi	r24, 0xB0	; 176
    45b4:	92 07       	cpc	r25, r18
    45b6:	51 f0       	breq	.+20     	; 0x45cc <init_uart_obuffer+0x1c>
	if (port == &uctrl) {return 1;}
    45b8:	e8 e0       	ldi	r30, 0x08	; 8
    45ba:	80 3a       	cpi	r24, 0xA0	; 160
    45bc:	9e 07       	cpc	r25, r30
    45be:	41 f0       	breq	.+16     	; 0x45d0 <init_uart_obuffer+0x20>
	if (port == &udata) {return 2;}
    45c0:	f8 e0       	ldi	r31, 0x08	; 8
    45c2:	80 3b       	cpi	r24, 0xB0	; 176
    45c4:	9f 07       	cpc	r25, r31
    45c6:	31 f4       	brne	.+12     	; 0x45d4 <init_uart_obuffer+0x24>
    45c8:	82 e0       	ldi	r24, 0x02	; 2
    45ca:	05 c0       	rjmp	.+10     	; 0x45d6 <init_uart_obuffer+0x26>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    45cc:	80 e0       	ldi	r24, 0x00	; 0
    45ce:	03 c0       	rjmp	.+6      	; 0x45d6 <init_uart_obuffer+0x26>
	if (port == &uctrl) {return 1;}
    45d0:	81 e0       	ldi	r24, 0x01	; 1
    45d2:	01 c0       	rjmp	.+2      	; 0x45d6 <init_uart_obuffer+0x26>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    45d4:	80 e0       	ldi	r24, 0x00	; 0
	No protection is provided for buffer overflow! Be careful! */
//***************************************************

void init_uart_obuffer(USART_t* port){
	uint8_t idx = port_map(port);
	uart_head[idx] = 0;
    45d6:	90 e0       	ldi	r25, 0x00	; 0
    45d8:	88 0f       	add	r24, r24
    45da:	99 1f       	adc	r25, r25
    45dc:	fc 01       	movw	r30, r24
    45de:	e8 53       	subi	r30, 0x38	; 56
    45e0:	fd 4c       	sbci	r31, 0xCD	; 205
    45e2:	10 82       	st	Z, r1
    45e4:	11 82       	std	Z+1, r1	; 0x01
	uart_tail[idx] = 0;
    45e6:	8c 52       	subi	r24, 0x2C	; 44
    45e8:	91 4c       	sbci	r25, 0xC1	; 193
    45ea:	fc 01       	movw	r30, r24
    45ec:	10 82       	st	Z, r1
    45ee:	11 82       	std	Z+1, r1	; 0x01
}
    45f0:	08 95       	ret

000045f2 <uart_count>:
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    45f2:	2b e0       	ldi	r18, 0x0B	; 11
    45f4:	80 3b       	cpi	r24, 0xB0	; 176
    45f6:	92 07       	cpc	r25, r18
    45f8:	51 f0       	breq	.+20     	; 0x460e <uart_count+0x1c>
	if (port == &uctrl) {return 1;}
    45fa:	e8 e0       	ldi	r30, 0x08	; 8
    45fc:	80 3a       	cpi	r24, 0xA0	; 160
    45fe:	9e 07       	cpc	r25, r30
    4600:	41 f0       	breq	.+16     	; 0x4612 <uart_count+0x20>
	if (port == &udata) {return 2;}
    4602:	f8 e0       	ldi	r31, 0x08	; 8
    4604:	80 3b       	cpi	r24, 0xB0	; 176
    4606:	9f 07       	cpc	r25, r31
    4608:	31 f4       	brne	.+12     	; 0x4616 <uart_count+0x24>
    460a:	82 e0       	ldi	r24, 0x02	; 2
    460c:	05 c0       	rjmp	.+10     	; 0x4618 <uart_count+0x26>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    460e:	80 e0       	ldi	r24, 0x00	; 0
    4610:	03 c0       	rjmp	.+6      	; 0x4618 <uart_count+0x26>
	if (port == &uctrl) {return 1;}
    4612:	81 e0       	ldi	r24, 0x01	; 1
    4614:	01 c0       	rjmp	.+2      	; 0x4618 <uart_count+0x26>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    4616:	80 e0       	ldi	r24, 0x00	; 0
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    4618:	90 e0       	ldi	r25, 0x00	; 0
    461a:	9c 01       	movw	r18, r24
    461c:	22 0f       	add	r18, r18
    461e:	33 1f       	adc	r19, r19
    4620:	f9 01       	movw	r30, r18
    4622:	e8 53       	subi	r30, 0x38	; 56
    4624:	fd 4c       	sbci	r31, 0xCD	; 205
    4626:	40 81       	ld	r20, Z
    4628:	51 81       	ldd	r21, Z+1	; 0x01
    462a:	2c 52       	subi	r18, 0x2C	; 44
    462c:	31 4c       	sbci	r19, 0xC1	; 193
    462e:	f9 01       	movw	r30, r18
    4630:	20 81       	ld	r18, Z
    4632:	31 81       	ldd	r19, Z+1	; 0x01
    4634:	42 17       	cp	r20, r18
    4636:	53 07       	cpc	r21, r19
    4638:	80 f0       	brcs	.+32     	; 0x465a <uart_count+0x68>
		return (uart_head[idx] - uart_tail[idx]);
    463a:	9c 01       	movw	r18, r24
    463c:	22 0f       	add	r18, r18
    463e:	33 1f       	adc	r19, r19
    4640:	f9 01       	movw	r30, r18
    4642:	e8 53       	subi	r30, 0x38	; 56
    4644:	fd 4c       	sbci	r31, 0xCD	; 205
    4646:	80 81       	ld	r24, Z
    4648:	91 81       	ldd	r25, Z+1	; 0x01
    464a:	2c 52       	subi	r18, 0x2C	; 44
    464c:	31 4c       	sbci	r19, 0xC1	; 193
    464e:	f9 01       	movw	r30, r18
    4650:	20 81       	ld	r18, Z
    4652:	31 81       	ldd	r19, Z+1	; 0x01
    4654:	82 1b       	sub	r24, r18
    4656:	93 0b       	sbc	r25, r19
    4658:	08 95       	ret
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    465a:	9c 01       	movw	r18, r24
    465c:	22 0f       	add	r18, r18
    465e:	33 1f       	adc	r19, r19
    4660:	f9 01       	movw	r30, r18
    4662:	e8 53       	subi	r30, 0x38	; 56
    4664:	fd 4c       	sbci	r31, 0xCD	; 205
    4666:	40 81       	ld	r20, Z
    4668:	51 81       	ldd	r21, Z+1	; 0x01
    466a:	2c 52       	subi	r18, 0x2C	; 44
    466c:	31 4c       	sbci	r19, 0xC1	; 193
    466e:	f9 01       	movw	r30, r18
    4670:	20 81       	ld	r18, Z
    4672:	31 81       	ldd	r19, Z+1	; 0x01
    4674:	ca 01       	movw	r24, r20
    4676:	80 50       	subi	r24, 0x00	; 0
    4678:	9c 4f       	sbci	r25, 0xFC	; 252
    467a:	82 1b       	sub	r24, r18
    467c:	93 0b       	sbc	r25, r19
	}
}
    467e:	08 95       	ret

00004680 <uart_enqueue_string>:

///Enqueue a string into the outgoing serial queue. Adds CR terminator to string.
inline void uart_enqueue_string(USART_t* port, char* string_in){
    4680:	2f 92       	push	r2
    4682:	3f 92       	push	r3
    4684:	4f 92       	push	r4
    4686:	5f 92       	push	r5
    4688:	6f 92       	push	r6
    468a:	7f 92       	push	r7
    468c:	8f 92       	push	r8
    468e:	9f 92       	push	r9
    4690:	af 92       	push	r10
    4692:	bf 92       	push	r11
    4694:	cf 92       	push	r12
    4696:	df 92       	push	r13
    4698:	ef 92       	push	r14
    469a:	ff 92       	push	r15
    469c:	0f 93       	push	r16
    469e:	1f 93       	push	r17
    46a0:	cf 93       	push	r28
    46a2:	df 93       	push	r29
    46a4:	00 d0       	rcall	.+0      	; 0x46a6 <uart_enqueue_string+0x26>
    46a6:	0f 92       	push	r0
    46a8:	cd b7       	in	r28, 0x3d	; 61
    46aa:	de b7       	in	r29, 0x3e	; 62
    46ac:	7c 01       	movw	r14, r24
	uint16_t length = (uint16_t)strlen(string_in);
    46ae:	26 2f       	mov	r18, r22
    46b0:	37 2f       	mov	r19, r23
    46b2:	d9 01       	movw	r26, r18
    46b4:	0d 90       	ld	r0, X+
    46b6:	00 20       	and	r0, r0
    46b8:	e9 f7       	brne	.-6      	; 0x46b4 <uart_enqueue_string+0x34>
    46ba:	11 97       	sbiw	r26, 0x01	; 1
    46bc:	cd 01       	movw	r24, r26
    46be:	82 1b       	sub	r24, r18
    46c0:	93 0b       	sbc	r25, r19
    46c2:	8b 83       	std	Y+3, r24	; 0x03
    46c4:	9c 83       	std	Y+4, r25	; 0x04
	for (uint16_t i=0; i<length; i++) {uart_enqueue(port, (uint8_t)string_in[i]);}
    46c6:	00 97       	sbiw	r24, 0x00	; 0
    46c8:	09 f4       	brne	.+2      	; 0x46cc <uart_enqueue_string+0x4c>
    46ca:	4b c3       	rjmp	.+1686   	; 0x4d62 <uart_enqueue_string+0x6e2>
    46cc:	69 83       	std	Y+1, r22	; 0x01
    46ce:	7a 83       	std	Y+2, r23	; 0x02
    46d0:	22 24       	eor	r2, r2
    46d2:	33 24       	eor	r3, r3
#ifndef UART_DEBUG
	uint8_t idx = port_map(port);
	
	//if (idx==0){uart_enqueue(&uctrl, datain);} //xxx
	
	uart_buffer[idx][uart_head[idx]] = datain;
    46d4:	0f 2e       	mov	r0, r31
    46d6:	f8 ec       	ldi	r31, 0xC8	; 200
    46d8:	6f 2e       	mov	r6, r31
    46da:	f2 e3       	ldi	r31, 0x32	; 50
    46dc:	7f 2e       	mov	r7, r31
    46de:	f0 2d       	mov	r31, r0
    46e0:	0f 2e       	mov	r0, r31
    46e2:	fe ec       	ldi	r31, 0xCE	; 206
    46e4:	4f 2e       	mov	r4, r31
    46e6:	f2 e3       	ldi	r31, 0x32	; 50
    46e8:	5f 2e       	mov	r5, r31
    46ea:	f0 2d       	mov	r31, r0
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    46ec:	0f 2e       	mov	r0, r31
    46ee:	f4 ed       	ldi	r31, 0xD4	; 212
    46f0:	8f 2e       	mov	r8, r31
    46f2:	fe e3       	ldi	r31, 0x3E	; 62
    46f4:	9f 2e       	mov	r9, r31
    46f6:	f0 2d       	mov	r31, r0
#ifndef UART_DEBUG
	uint8_t idx = port_map(port);
	
	//if (idx==0){uart_enqueue(&uctrl, datain);} //xxx
	
	uart_buffer[idx][uart_head[idx]] = datain;
    46f8:	0f 2e       	mov	r0, r31
    46fa:	fc ec       	ldi	r31, 0xCC	; 204
    46fc:	cf 2e       	mov	r12, r31
    46fe:	f2 e3       	ldi	r31, 0x32	; 50
    4700:	df 2e       	mov	r13, r31
    4702:	f0 2d       	mov	r31, r0
}

///Enqueue a string into the outgoing serial queue. Adds CR terminator to string.
inline void uart_enqueue_string(USART_t* port, char* string_in){
	uint16_t length = (uint16_t)strlen(string_in);
	for (uint16_t i=0; i<length; i++) {uart_enqueue(port, (uint8_t)string_in[i]);}
    4704:	a9 81       	ldd	r26, Y+1	; 0x01
    4706:	ba 81       	ldd	r27, Y+2	; 0x02
    4708:	5d 91       	ld	r21, X+
    470a:	a9 83       	std	Y+1, r26	; 0x01
    470c:	ba 83       	std	Y+2, r27	; 0x02
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    470e:	b0 eb       	ldi	r27, 0xB0	; 176
    4710:	eb 16       	cp	r14, r27
    4712:	bb e0       	ldi	r27, 0x0B	; 11
    4714:	fb 06       	cpc	r15, r27
    4716:	61 f0       	breq	.+24     	; 0x4730 <uart_enqueue_string+0xb0>
	if (port == &uctrl) {return 1;}
    4718:	e0 ea       	ldi	r30, 0xA0	; 160
    471a:	ee 16       	cp	r14, r30
    471c:	e8 e0       	ldi	r30, 0x08	; 8
    471e:	fe 06       	cpc	r15, r30
    4720:	49 f0       	breq	.+18     	; 0x4734 <uart_enqueue_string+0xb4>
	if (port == &udata) {return 2;}
    4722:	f0 eb       	ldi	r31, 0xB0	; 176
    4724:	ef 16       	cp	r14, r31
    4726:	f8 e0       	ldi	r31, 0x08	; 8
    4728:	ff 06       	cpc	r15, r31
    472a:	31 f4       	brne	.+12     	; 0x4738 <uart_enqueue_string+0xb8>
    472c:	42 e0       	ldi	r20, 0x02	; 2
    472e:	05 c0       	rjmp	.+10     	; 0x473a <uart_enqueue_string+0xba>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    4730:	40 e0       	ldi	r20, 0x00	; 0
    4732:	03 c0       	rjmp	.+6      	; 0x473a <uart_enqueue_string+0xba>
	if (port == &uctrl) {return 1;}
    4734:	41 e0       	ldi	r20, 0x01	; 1
    4736:	01 c0       	rjmp	.+2      	; 0x473a <uart_enqueue_string+0xba>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    4738:	40 e0       	ldi	r20, 0x00	; 0
#ifndef UART_DEBUG
	uint8_t idx = port_map(port);
	
	//if (idx==0){uart_enqueue(&uctrl, datain);} //xxx
	
	uart_buffer[idx][uart_head[idx]] = datain;
    473a:	64 2f       	mov	r22, r20
    473c:	70 e0       	ldi	r23, 0x00	; 0
    473e:	cb 01       	movw	r24, r22
    4740:	88 0f       	add	r24, r24
    4742:	99 1f       	adc	r25, r25
    4744:	f3 01       	movw	r30, r6
    4746:	e8 0f       	add	r30, r24
    4748:	f9 1f       	adc	r31, r25
    474a:	20 81       	ld	r18, Z
    474c:	31 81       	ldd	r19, Z+1	; 0x01
    474e:	cb 01       	movw	r24, r22
    4750:	98 2f       	mov	r25, r24
    4752:	88 27       	eor	r24, r24
    4754:	99 0f       	add	r25, r25
    4756:	99 0f       	add	r25, r25
    4758:	82 0f       	add	r24, r18
    475a:	93 1f       	adc	r25, r19
    475c:	84 0d       	add	r24, r4
    475e:	95 1d       	adc	r25, r5
    4760:	dc 01       	movw	r26, r24
    4762:	5c 93       	st	X, r21
	uart_head[idx]++;
    4764:	80 81       	ld	r24, Z
    4766:	91 81       	ldd	r25, Z+1	; 0x01
    4768:	01 96       	adiw	r24, 0x01	; 1
    476a:	80 83       	st	Z, r24
    476c:	91 83       	std	Z+1, r25	; 0x01
	if (uart_head[idx] >= MAX_BUFFER_LEN){
    476e:	80 81       	ld	r24, Z
    4770:	91 81       	ldd	r25, Z+1	; 0x01
    4772:	b4 e0       	ldi	r27, 0x04	; 4
    4774:	80 30       	cpi	r24, 0x00	; 0
    4776:	9b 07       	cpc	r25, r27
    4778:	10 f0       	brcs	.+4      	; 0x477e <uart_enqueue_string+0xfe>
		uart_head[idx] = 0;
    477a:	10 82       	st	Z, r1
    477c:	11 82       	std	Z+1, r1	; 0x01
	}
	if (idx == 0){uart_transmit_lcd(port);} //start the transmission process.
    477e:	44 23       	and	r20, r20
    4780:	09 f4       	brne	.+2      	; 0x4784 <uart_enqueue_string+0x104>
    4782:	5e c1       	rjmp	.+700    	; 0x4a40 <uart_enqueue_string+0x3c0>
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    4784:	d7 01       	movw	r26, r14
    4786:	11 96       	adiw	r26, 0x01	; 1
    4788:	8c 91       	ld	r24, X
    478a:	11 97       	sbiw	r26, 0x01	; 1
    478c:	85 fd       	sbrc	r24, 5
    478e:	44 c2       	rjmp	.+1160   	; 0x4c18 <uart_enqueue_string+0x598>
    4790:	8e c2       	rjmp	.+1308   	; 0x4cae <uart_enqueue_string+0x62e>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    4792:	b0 eb       	ldi	r27, 0xB0	; 176
    4794:	eb 16       	cp	r14, r27
    4796:	bb e0       	ldi	r27, 0x0B	; 11
    4798:	fb 06       	cpc	r15, r27
    479a:	61 f0       	breq	.+24     	; 0x47b4 <uart_enqueue_string+0x134>
	if (port == &uctrl) {return 1;}
    479c:	e0 ea       	ldi	r30, 0xA0	; 160
    479e:	ee 16       	cp	r14, r30
    47a0:	e8 e0       	ldi	r30, 0x08	; 8
    47a2:	fe 06       	cpc	r15, r30
    47a4:	49 f0       	breq	.+18     	; 0x47b8 <uart_enqueue_string+0x138>
	if (port == &udata) {return 2;}
    47a6:	f0 eb       	ldi	r31, 0xB0	; 176
    47a8:	ef 16       	cp	r14, r31
    47aa:	f8 e0       	ldi	r31, 0x08	; 8
    47ac:	ff 06       	cpc	r15, r31
    47ae:	31 f4       	brne	.+12     	; 0x47bc <uart_enqueue_string+0x13c>
    47b0:	22 e0       	ldi	r18, 0x02	; 2
    47b2:	05 c0       	rjmp	.+10     	; 0x47be <uart_enqueue_string+0x13e>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    47b4:	20 e0       	ldi	r18, 0x00	; 0
    47b6:	03 c0       	rjmp	.+6      	; 0x47be <uart_enqueue_string+0x13e>
	if (port == &uctrl) {return 1;}
    47b8:	21 e0       	ldi	r18, 0x01	; 1
    47ba:	01 c0       	rjmp	.+2      	; 0x47be <uart_enqueue_string+0x13e>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    47bc:	20 e0       	ldi	r18, 0x00	; 0
}

inline uint8_t uart_dequeue(USART_t* port){
	uint8_t idx = port_map(port);
	uint16_t oldtail;
	oldtail = uart_tail[idx];
    47be:	30 e0       	ldi	r19, 0x00	; 0
    47c0:	c9 01       	movw	r24, r18
    47c2:	88 0f       	add	r24, r24
    47c4:	99 1f       	adc	r25, r25
    47c6:	f4 01       	movw	r30, r8
    47c8:	e8 0f       	add	r30, r24
    47ca:	f9 1f       	adc	r31, r25
    47cc:	40 81       	ld	r20, Z
    47ce:	51 81       	ldd	r21, Z+1	; 0x01
	uart_tail[idx]++;
    47d0:	80 81       	ld	r24, Z
    47d2:	91 81       	ldd	r25, Z+1	; 0x01
    47d4:	01 96       	adiw	r24, 0x01	; 1
    47d6:	80 83       	st	Z, r24
    47d8:	91 83       	std	Z+1, r25	; 0x01
	if (uart_tail[idx] >= MAX_BUFFER_LEN){
    47da:	80 81       	ld	r24, Z
    47dc:	91 81       	ldd	r25, Z+1	; 0x01
    47de:	64 e0       	ldi	r22, 0x04	; 4
    47e0:	80 30       	cpi	r24, 0x00	; 0
    47e2:	96 07       	cpc	r25, r22
    47e4:	10 f0       	brcs	.+4      	; 0x47ea <uart_enqueue_string+0x16a>
		uart_tail[idx] = 0;
    47e6:	10 82       	st	Z, r1
    47e8:	11 82       	std	Z+1, r1	; 0x01
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    47ea:	c9 01       	movw	r24, r18
    47ec:	98 2f       	mov	r25, r24
    47ee:	88 27       	eor	r24, r24
    47f0:	99 0f       	add	r25, r25
    47f2:	99 0f       	add	r25, r25
    47f4:	84 0f       	add	r24, r20
    47f6:	95 1f       	adc	r25, r21
    47f8:	84 0d       	add	r24, r4
    47fa:	95 1d       	adc	r25, r5
    47fc:	fc 01       	movw	r30, r24
    47fe:	b0 80       	ld	r11, Z
void inline uart_transmit_lcd(USART_t* port){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0) && (lcd_flow_control == LCD_READY)){
		toSend = uart_dequeue(port);
		switch(toSend){
    4800:	fa ef       	ldi	r31, 0xFA	; 250
    4802:	bf 16       	cp	r11, r31
    4804:	19 f0       	breq	.+6      	; 0x480c <uart_enqueue_string+0x18c>
    4806:	2e ef       	ldi	r18, 0xFE	; 254
    4808:	b2 16       	cp	r11, r18
    480a:	19 f4       	brne	.+6      	; 0x4812 <uart_enqueue_string+0x192>
			case LCD_COMMAND:
			case LCD_MACRO:
				//Header byte just describes payload -- do not send to LCD
				lcd_flow_type = toSend;
    480c:	b0 92 ae 26 	sts	0x26AE, r11
    4810:	1d c1       	rjmp	.+570    	; 0x4a4c <uart_enqueue_string+0x3cc>
				break;
			default:
				//Payload bytes -- send to LCD
				if (toSend == 0x0D) {lcd_flow_control = LCD_BUSY;}
    4812:	3d e0       	ldi	r19, 0x0D	; 13
    4814:	b3 16       	cp	r11, r19
    4816:	19 f4       	brne	.+6      	; 0x481e <uart_enqueue_string+0x19e>
    4818:	6e e4       	ldi	r22, 0x4E	; 78
    481a:	60 93 b0 26 	sts	0x26B0, r22
#ifndef UART_DEBUG
	uint8_t idx = port_map(port);
	
	//if (idx==0){uart_enqueue(&uctrl, datain);} //xxx
	
	uart_buffer[idx][uart_head[idx]] = datain;
    481e:	d6 01       	movw	r26, r12
    4820:	8d 91       	ld	r24, X+
    4822:	9c 91       	ld	r25, X
    4824:	11 97       	sbiw	r26, 0x01	; 1
    4826:	82 53       	subi	r24, 0x32	; 50
    4828:	95 4c       	sbci	r25, 0xC5	; 197
    482a:	fc 01       	movw	r30, r24
    482c:	a0 82       	st	Z, r10
	uart_head[idx]++;
    482e:	8d 91       	ld	r24, X+
    4830:	9c 91       	ld	r25, X
    4832:	11 97       	sbiw	r26, 0x01	; 1
    4834:	01 96       	adiw	r24, 0x01	; 1
    4836:	8d 93       	st	X+, r24
    4838:	9c 93       	st	X, r25
    483a:	11 97       	sbiw	r26, 0x01	; 1
	if (uart_head[idx] >= MAX_BUFFER_LEN){
    483c:	8d 91       	ld	r24, X+
    483e:	9c 91       	ld	r25, X
    4840:	11 97       	sbiw	r26, 0x01	; 1
    4842:	f4 e0       	ldi	r31, 0x04	; 4
    4844:	80 30       	cpi	r24, 0x00	; 0
    4846:	9f 07       	cpc	r25, r31
    4848:	18 f0       	brcs	.+6      	; 0x4850 <uart_enqueue_string+0x1d0>
		uart_head[idx] = 0;
    484a:	1d 92       	st	X+, r1
    484c:	1c 92       	st	X, r1
    484e:	11 97       	sbiw	r26, 0x01	; 1
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    4850:	d8 01       	movw	r26, r16
    4852:	11 96       	adiw	r26, 0x01	; 1
    4854:	8c 91       	ld	r24, X
    4856:	11 97       	sbiw	r26, 0x01	; 1
    4858:	85 fd       	sbrc	r24, 5
    485a:	1f c0       	rjmp	.+62     	; 0x489a <uart_enqueue_string+0x21a>
    485c:	3f c0       	rjmp	.+126    	; 0x48dc <uart_enqueue_string+0x25c>
}

inline uint8_t uart_dequeue(USART_t* port){
	uint8_t idx = port_map(port);
	uint16_t oldtail;
	oldtail = uart_tail[idx];
    485e:	a8 ed       	ldi	r26, 0xD8	; 216
    4860:	be e3       	ldi	r27, 0x3E	; 62
    4862:	ed 91       	ld	r30, X+
    4864:	fc 91       	ld	r31, X
    4866:	11 97       	sbiw	r26, 0x01	; 1
	uart_tail[idx]++;
    4868:	8d 91       	ld	r24, X+
    486a:	9c 91       	ld	r25, X
    486c:	11 97       	sbiw	r26, 0x01	; 1
    486e:	01 96       	adiw	r24, 0x01	; 1
    4870:	8d 93       	st	X+, r24
    4872:	9c 93       	st	X, r25
    4874:	11 97       	sbiw	r26, 0x01	; 1
	if (uart_tail[idx] >= MAX_BUFFER_LEN){
    4876:	8d 91       	ld	r24, X+
    4878:	9c 91       	ld	r25, X
    487a:	11 97       	sbiw	r26, 0x01	; 1
    487c:	b4 e0       	ldi	r27, 0x04	; 4
    487e:	80 30       	cpi	r24, 0x00	; 0
    4880:	9b 07       	cpc	r25, r27
    4882:	18 f0       	brcs	.+6      	; 0x488a <uart_enqueue_string+0x20a>
		uart_tail[idx] = 0;
    4884:	1d 92       	st	X+, r1
    4886:	1c 92       	st	X, r1
    4888:	11 97       	sbiw	r26, 0x01	; 1
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    488a:	e2 53       	subi	r30, 0x32	; 50
    488c:	f5 4c       	sbci	r31, 0xC5	; 197
    488e:	80 81       	ld	r24, Z
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
    4890:	f8 01       	movw	r30, r16
    4892:	80 83       	st	Z, r24
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    4894:	81 81       	ldd	r24, Z+1	; 0x01
    4896:	85 ff       	sbrs	r24, 5
    4898:	21 c0       	rjmp	.+66     	; 0x48dc <uart_enqueue_string+0x25c>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    489a:	d6 01       	movw	r26, r12
    489c:	8d 91       	ld	r24, X+
    489e:	9c 91       	ld	r25, X
    48a0:	11 97       	sbiw	r26, 0x01	; 1
    48a2:	e8 ed       	ldi	r30, 0xD8	; 216
    48a4:	fe e3       	ldi	r31, 0x3E	; 62
    48a6:	20 81       	ld	r18, Z
    48a8:	31 81       	ldd	r19, Z+1	; 0x01
    48aa:	82 17       	cp	r24, r18
    48ac:	93 07       	cpc	r25, r19
    48ae:	40 f0       	brcs	.+16     	; 0x48c0 <uart_enqueue_string+0x240>
		return (uart_head[idx] - uart_tail[idx]);
    48b0:	8d 91       	ld	r24, X+
    48b2:	9c 91       	ld	r25, X
    48b4:	11 97       	sbiw	r26, 0x01	; 1
    48b6:	20 81       	ld	r18, Z
    48b8:	31 81       	ldd	r19, Z+1	; 0x01
    48ba:	82 1b       	sub	r24, r18
    48bc:	93 0b       	sbc	r25, r19
    48be:	0c c0       	rjmp	.+24     	; 0x48d8 <uart_enqueue_string+0x258>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    48c0:	d6 01       	movw	r26, r12
    48c2:	8d 91       	ld	r24, X+
    48c4:	9c 91       	ld	r25, X
    48c6:	11 97       	sbiw	r26, 0x01	; 1
    48c8:	e8 ed       	ldi	r30, 0xD8	; 216
    48ca:	fe e3       	ldi	r31, 0x3E	; 62
    48cc:	20 81       	ld	r18, Z
    48ce:	31 81       	ldd	r19, Z+1	; 0x01
    48d0:	80 50       	subi	r24, 0x00	; 0
    48d2:	9c 4f       	sbci	r25, 0xFC	; 252
    48d4:	82 1b       	sub	r24, r18
    48d6:	93 0b       	sbc	r25, r19
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    48d8:	00 97       	sbiw	r24, 0x00	; 0
    48da:	09 f6       	brne	.-126    	; 0x485e <uart_enqueue_string+0x1de>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    48dc:	d6 01       	movw	r26, r12
    48de:	8d 91       	ld	r24, X+
    48e0:	9c 91       	ld	r25, X
    48e2:	11 97       	sbiw	r26, 0x01	; 1
    48e4:	e8 ed       	ldi	r30, 0xD8	; 216
    48e6:	fe e3       	ldi	r31, 0x3E	; 62
    48e8:	20 81       	ld	r18, Z
    48ea:	31 81       	ldd	r19, Z+1	; 0x01
    48ec:	82 17       	cp	r24, r18
    48ee:	93 07       	cpc	r25, r19
    48f0:	40 f0       	brcs	.+16     	; 0x4902 <uart_enqueue_string+0x282>
		return (uart_head[idx] - uart_tail[idx]);
    48f2:	8d 91       	ld	r24, X+
    48f4:	9c 91       	ld	r25, X
    48f6:	11 97       	sbiw	r26, 0x01	; 1
    48f8:	20 81       	ld	r18, Z
    48fa:	31 81       	ldd	r19, Z+1	; 0x01
    48fc:	82 1b       	sub	r24, r18
    48fe:	93 0b       	sbc	r25, r19
    4900:	0c c0       	rjmp	.+24     	; 0x491a <uart_enqueue_string+0x29a>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    4902:	d6 01       	movw	r26, r12
    4904:	8d 91       	ld	r24, X+
    4906:	9c 91       	ld	r25, X
    4908:	11 97       	sbiw	r26, 0x01	; 1
    490a:	e8 ed       	ldi	r30, 0xD8	; 216
    490c:	fe e3       	ldi	r31, 0x3E	; 62
    490e:	20 81       	ld	r18, Z
    4910:	31 81       	ldd	r19, Z+1	; 0x01
    4912:	80 50       	subi	r24, 0x00	; 0
    4914:	9c 4f       	sbci	r25, 0xFC	; 252
    4916:	82 1b       	sub	r24, r18
    4918:	93 0b       	sbc	r25, r19
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
	}
	//disable the tx outgoing hardware buffer ready interrupt if we have nothing more to put in it.
	if(uart_count(port)>0) uart_txbuffer_enable(port);
    491a:	00 97       	sbiw	r24, 0x00	; 0
    491c:	21 f0       	breq	.+8      	; 0x4926 <uart_enqueue_string+0x2a6>
    491e:	c8 01       	movw	r24, r16
    4920:	0e 94 5f 19 	call	0x32be	; 0x32be <uart_txbuffer_enable>
    4924:	03 c0       	rjmp	.+6      	; 0x492c <uart_enqueue_string+0x2ac>
	else uart_txbuffer_disable(port);
    4926:	c8 01       	movw	r24, r16
    4928:	0e 94 64 19 	call	0x32c8	; 0x32c8 <uart_txbuffer_disable>
#ifndef UART_DEBUG
	uint8_t idx = port_map(port);
	
	//if (idx==0){uart_enqueue(&uctrl, datain);} //xxx
	
	uart_buffer[idx][uart_head[idx]] = datain;
    492c:	d6 01       	movw	r26, r12
    492e:	8d 91       	ld	r24, X+
    4930:	9c 91       	ld	r25, X
    4932:	11 97       	sbiw	r26, 0x01	; 1
    4934:	82 53       	subi	r24, 0x32	; 50
    4936:	95 4c       	sbci	r25, 0xC5	; 197
    4938:	fc 01       	movw	r30, r24
    493a:	b0 82       	st	Z, r11
	uart_head[idx]++;
    493c:	8d 91       	ld	r24, X+
    493e:	9c 91       	ld	r25, X
    4940:	11 97       	sbiw	r26, 0x01	; 1
    4942:	01 96       	adiw	r24, 0x01	; 1
    4944:	8d 93       	st	X+, r24
    4946:	9c 93       	st	X, r25
    4948:	11 97       	sbiw	r26, 0x01	; 1
	if (uart_head[idx] >= MAX_BUFFER_LEN){
    494a:	8d 91       	ld	r24, X+
    494c:	9c 91       	ld	r25, X
    494e:	11 97       	sbiw	r26, 0x01	; 1
    4950:	f4 e0       	ldi	r31, 0x04	; 4
    4952:	80 30       	cpi	r24, 0x00	; 0
    4954:	9f 07       	cpc	r25, r31
    4956:	18 f0       	brcs	.+6      	; 0x495e <uart_enqueue_string+0x2de>
		uart_head[idx] = 0;
    4958:	1d 92       	st	X+, r1
    495a:	1c 92       	st	X, r1
    495c:	11 97       	sbiw	r26, 0x01	; 1
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    495e:	d8 01       	movw	r26, r16
    4960:	11 96       	adiw	r26, 0x01	; 1
    4962:	8c 91       	ld	r24, X
    4964:	11 97       	sbiw	r26, 0x01	; 1
    4966:	85 fd       	sbrc	r24, 5
    4968:	1f c0       	rjmp	.+62     	; 0x49a8 <uart_enqueue_string+0x328>
    496a:	3f c0       	rjmp	.+126    	; 0x49ea <uart_enqueue_string+0x36a>
}

inline uint8_t uart_dequeue(USART_t* port){
	uint8_t idx = port_map(port);
	uint16_t oldtail;
	oldtail = uart_tail[idx];
    496c:	a8 ed       	ldi	r26, 0xD8	; 216
    496e:	be e3       	ldi	r27, 0x3E	; 62
    4970:	ed 91       	ld	r30, X+
    4972:	fc 91       	ld	r31, X
    4974:	11 97       	sbiw	r26, 0x01	; 1
	uart_tail[idx]++;
    4976:	8d 91       	ld	r24, X+
    4978:	9c 91       	ld	r25, X
    497a:	11 97       	sbiw	r26, 0x01	; 1
    497c:	01 96       	adiw	r24, 0x01	; 1
    497e:	8d 93       	st	X+, r24
    4980:	9c 93       	st	X, r25
    4982:	11 97       	sbiw	r26, 0x01	; 1
	if (uart_tail[idx] >= MAX_BUFFER_LEN){
    4984:	8d 91       	ld	r24, X+
    4986:	9c 91       	ld	r25, X
    4988:	11 97       	sbiw	r26, 0x01	; 1
    498a:	b4 e0       	ldi	r27, 0x04	; 4
    498c:	80 30       	cpi	r24, 0x00	; 0
    498e:	9b 07       	cpc	r25, r27
    4990:	18 f0       	brcs	.+6      	; 0x4998 <uart_enqueue_string+0x318>
		uart_tail[idx] = 0;
    4992:	1d 92       	st	X+, r1
    4994:	1c 92       	st	X, r1
    4996:	11 97       	sbiw	r26, 0x01	; 1
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    4998:	e2 53       	subi	r30, 0x32	; 50
    499a:	f5 4c       	sbci	r31, 0xC5	; 197
    499c:	80 81       	ld	r24, Z
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
    499e:	f8 01       	movw	r30, r16
    49a0:	80 83       	st	Z, r24
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    49a2:	81 81       	ldd	r24, Z+1	; 0x01
    49a4:	85 ff       	sbrs	r24, 5
    49a6:	21 c0       	rjmp	.+66     	; 0x49ea <uart_enqueue_string+0x36a>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    49a8:	d6 01       	movw	r26, r12
    49aa:	8d 91       	ld	r24, X+
    49ac:	9c 91       	ld	r25, X
    49ae:	11 97       	sbiw	r26, 0x01	; 1
    49b0:	e8 ed       	ldi	r30, 0xD8	; 216
    49b2:	fe e3       	ldi	r31, 0x3E	; 62
    49b4:	20 81       	ld	r18, Z
    49b6:	31 81       	ldd	r19, Z+1	; 0x01
    49b8:	82 17       	cp	r24, r18
    49ba:	93 07       	cpc	r25, r19
    49bc:	40 f0       	brcs	.+16     	; 0x49ce <uart_enqueue_string+0x34e>
		return (uart_head[idx] - uart_tail[idx]);
    49be:	8d 91       	ld	r24, X+
    49c0:	9c 91       	ld	r25, X
    49c2:	11 97       	sbiw	r26, 0x01	; 1
    49c4:	20 81       	ld	r18, Z
    49c6:	31 81       	ldd	r19, Z+1	; 0x01
    49c8:	82 1b       	sub	r24, r18
    49ca:	93 0b       	sbc	r25, r19
    49cc:	0c c0       	rjmp	.+24     	; 0x49e6 <uart_enqueue_string+0x366>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    49ce:	d6 01       	movw	r26, r12
    49d0:	8d 91       	ld	r24, X+
    49d2:	9c 91       	ld	r25, X
    49d4:	11 97       	sbiw	r26, 0x01	; 1
    49d6:	e8 ed       	ldi	r30, 0xD8	; 216
    49d8:	fe e3       	ldi	r31, 0x3E	; 62
    49da:	20 81       	ld	r18, Z
    49dc:	31 81       	ldd	r19, Z+1	; 0x01
    49de:	80 50       	subi	r24, 0x00	; 0
    49e0:	9c 4f       	sbci	r25, 0xFC	; 252
    49e2:	82 1b       	sub	r24, r18
    49e4:	93 0b       	sbc	r25, r19
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    49e6:	00 97       	sbiw	r24, 0x00	; 0
    49e8:	09 f6       	brne	.-126    	; 0x496c <uart_enqueue_string+0x2ec>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    49ea:	d6 01       	movw	r26, r12
    49ec:	8d 91       	ld	r24, X+
    49ee:	9c 91       	ld	r25, X
    49f0:	11 97       	sbiw	r26, 0x01	; 1
    49f2:	e8 ed       	ldi	r30, 0xD8	; 216
    49f4:	fe e3       	ldi	r31, 0x3E	; 62
    49f6:	20 81       	ld	r18, Z
    49f8:	31 81       	ldd	r19, Z+1	; 0x01
    49fa:	82 17       	cp	r24, r18
    49fc:	93 07       	cpc	r25, r19
    49fe:	40 f0       	brcs	.+16     	; 0x4a10 <uart_enqueue_string+0x390>
		return (uart_head[idx] - uart_tail[idx]);
    4a00:	8d 91       	ld	r24, X+
    4a02:	9c 91       	ld	r25, X
    4a04:	11 97       	sbiw	r26, 0x01	; 1
    4a06:	20 81       	ld	r18, Z
    4a08:	31 81       	ldd	r19, Z+1	; 0x01
    4a0a:	82 1b       	sub	r24, r18
    4a0c:	93 0b       	sbc	r25, r19
    4a0e:	0c c0       	rjmp	.+24     	; 0x4a28 <uart_enqueue_string+0x3a8>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    4a10:	d6 01       	movw	r26, r12
    4a12:	8d 91       	ld	r24, X+
    4a14:	9c 91       	ld	r25, X
    4a16:	11 97       	sbiw	r26, 0x01	; 1
    4a18:	e8 ed       	ldi	r30, 0xD8	; 216
    4a1a:	fe e3       	ldi	r31, 0x3E	; 62
    4a1c:	20 81       	ld	r18, Z
    4a1e:	31 81       	ldd	r19, Z+1	; 0x01
    4a20:	80 50       	subi	r24, 0x00	; 0
    4a22:	9c 4f       	sbci	r25, 0xFC	; 252
    4a24:	82 1b       	sub	r24, r18
    4a26:	93 0b       	sbc	r25, r19
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
	}
	//disable the tx outgoing hardware buffer ready interrupt if we have nothing more to put in it.
	if(uart_count(port)>0) uart_txbuffer_enable(port);
    4a28:	00 97       	sbiw	r24, 0x00	; 0
    4a2a:	21 f0       	breq	.+8      	; 0x4a34 <uart_enqueue_string+0x3b4>
    4a2c:	c8 01       	movw	r24, r16
    4a2e:	0e 94 5f 19 	call	0x32be	; 0x32be <uart_txbuffer_enable>
    4a32:	03 c0       	rjmp	.+6      	; 0x4a3a <uart_enqueue_string+0x3ba>
	else uart_txbuffer_disable(port);
    4a34:	c8 01       	movw	r24, r16
    4a36:	0e 94 64 19 	call	0x32c8	; 0x32c8 <uart_txbuffer_disable>
			default:
				//Payload bytes -- send to LCD
				if (toSend == 0x0D) {lcd_flow_control = LCD_BUSY;}
				uart_enqueue(&udata, '`'); //xxx - echo to data port
				uart_enqueue(&udata, toSend); //xxx - echo to data port
				port->DATA = toSend;
    4a3a:	d7 01       	movw	r26, r14
    4a3c:	bc 92       	st	X, r11
    4a3e:	06 c0       	rjmp	.+12     	; 0x4a4c <uart_enqueue_string+0x3cc>
#ifndef UART_DEBUG
	uint8_t idx = port_map(port);
	
	//if (idx==0){uart_enqueue(&uctrl, datain);} //xxx
	
	uart_buffer[idx][uart_head[idx]] = datain;
    4a40:	0f 2e       	mov	r0, r31
    4a42:	f0 e6       	ldi	r31, 0x60	; 96
    4a44:	af 2e       	mov	r10, r31
    4a46:	f0 2d       	mov	r31, r0
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    4a48:	00 eb       	ldi	r16, 0xB0	; 176
    4a4a:	18 e0       	ldi	r17, 0x08	; 8
}

void inline uart_transmit_lcd(USART_t* port){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0) && (lcd_flow_control == LCD_READY)){
    4a4c:	f7 01       	movw	r30, r14
    4a4e:	81 81       	ldd	r24, Z+1	; 0x01
    4a50:	85 ff       	sbrs	r24, 5
    4a52:	4f c0       	rjmp	.+158    	; 0x4af2 <uart_enqueue_string+0x472>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    4a54:	f0 eb       	ldi	r31, 0xB0	; 176
    4a56:	ef 16       	cp	r14, r31
    4a58:	fb e0       	ldi	r31, 0x0B	; 11
    4a5a:	ff 06       	cpc	r15, r31
    4a5c:	61 f0       	breq	.+24     	; 0x4a76 <uart_enqueue_string+0x3f6>
	if (port == &uctrl) {return 1;}
    4a5e:	20 ea       	ldi	r18, 0xA0	; 160
    4a60:	e2 16       	cp	r14, r18
    4a62:	28 e0       	ldi	r18, 0x08	; 8
    4a64:	f2 06       	cpc	r15, r18
    4a66:	49 f0       	breq	.+18     	; 0x4a7a <uart_enqueue_string+0x3fa>
	if (port == &udata) {return 2;}
    4a68:	30 eb       	ldi	r19, 0xB0	; 176
    4a6a:	e3 16       	cp	r14, r19
    4a6c:	38 e0       	ldi	r19, 0x08	; 8
    4a6e:	f3 06       	cpc	r15, r19
    4a70:	31 f4       	brne	.+12     	; 0x4a7e <uart_enqueue_string+0x3fe>
    4a72:	22 e0       	ldi	r18, 0x02	; 2
    4a74:	05 c0       	rjmp	.+10     	; 0x4a80 <uart_enqueue_string+0x400>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    4a76:	20 e0       	ldi	r18, 0x00	; 0
    4a78:	03 c0       	rjmp	.+6      	; 0x4a80 <uart_enqueue_string+0x400>
	if (port == &uctrl) {return 1;}
    4a7a:	21 e0       	ldi	r18, 0x01	; 1
    4a7c:	01 c0       	rjmp	.+2      	; 0x4a80 <uart_enqueue_string+0x400>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    4a7e:	20 e0       	ldi	r18, 0x00	; 0
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    4a80:	30 e0       	ldi	r19, 0x00	; 0
    4a82:	c9 01       	movw	r24, r18
    4a84:	88 0f       	add	r24, r24
    4a86:	99 1f       	adc	r25, r25
    4a88:	f3 01       	movw	r30, r6
    4a8a:	e8 0f       	add	r30, r24
    4a8c:	f9 1f       	adc	r31, r25
    4a8e:	40 81       	ld	r20, Z
    4a90:	51 81       	ldd	r21, Z+1	; 0x01
    4a92:	f4 01       	movw	r30, r8
    4a94:	e8 0f       	add	r30, r24
    4a96:	f9 1f       	adc	r31, r25
    4a98:	80 81       	ld	r24, Z
    4a9a:	91 81       	ldd	r25, Z+1	; 0x01
    4a9c:	48 17       	cp	r20, r24
    4a9e:	59 07       	cpc	r21, r25
    4aa0:	88 f0       	brcs	.+34     	; 0x4ac4 <uart_enqueue_string+0x444>
		return (uart_head[idx] - uart_tail[idx]);
    4aa2:	22 0f       	add	r18, r18
    4aa4:	33 1f       	adc	r19, r19
    4aa6:	f3 01       	movw	r30, r6
    4aa8:	e2 0f       	add	r30, r18
    4aaa:	f3 1f       	adc	r31, r19
    4aac:	40 81       	ld	r20, Z
    4aae:	51 81       	ldd	r21, Z+1	; 0x01
    4ab0:	f4 01       	movw	r30, r8
    4ab2:	e2 0f       	add	r30, r18
    4ab4:	f3 1f       	adc	r31, r19
    4ab6:	80 81       	ld	r24, Z
    4ab8:	91 81       	ldd	r25, Z+1	; 0x01
    4aba:	da 01       	movw	r26, r20
    4abc:	a8 1b       	sub	r26, r24
    4abe:	b9 0b       	sbc	r27, r25
    4ac0:	cd 01       	movw	r24, r26
    4ac2:	10 c0       	rjmp	.+32     	; 0x4ae4 <uart_enqueue_string+0x464>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    4ac4:	22 0f       	add	r18, r18
    4ac6:	33 1f       	adc	r19, r19
    4ac8:	f3 01       	movw	r30, r6
    4aca:	e2 0f       	add	r30, r18
    4acc:	f3 1f       	adc	r31, r19
    4ace:	80 81       	ld	r24, Z
    4ad0:	91 81       	ldd	r25, Z+1	; 0x01
    4ad2:	f4 01       	movw	r30, r8
    4ad4:	e2 0f       	add	r30, r18
    4ad6:	f3 1f       	adc	r31, r19
    4ad8:	20 81       	ld	r18, Z
    4ada:	31 81       	ldd	r19, Z+1	; 0x01
    4adc:	80 50       	subi	r24, 0x00	; 0
    4ade:	9c 4f       	sbci	r25, 0xFC	; 252
    4ae0:	82 1b       	sub	r24, r18
    4ae2:	93 0b       	sbc	r25, r19
}

void inline uart_transmit_lcd(USART_t* port){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0) && (lcd_flow_control == LCD_READY)){
    4ae4:	00 97       	sbiw	r24, 0x00	; 0
    4ae6:	29 f0       	breq	.+10     	; 0x4af2 <uart_enqueue_string+0x472>
    4ae8:	80 91 b0 26 	lds	r24, 0x26B0
    4aec:	82 35       	cpi	r24, 0x52	; 82
    4aee:	09 f4       	brne	.+2      	; 0x4af2 <uart_enqueue_string+0x472>
    4af0:	50 ce       	rjmp	.-864    	; 0x4792 <uart_enqueue_string+0x112>
				uart_enqueue(&udata, toSend); //xxx - echo to data port
				port->DATA = toSend;
				break;
		}				
	}
	uart_txbuffer_disable(port); //implemented this way to prevent periodic stalls that happen when uart_txbuffer isn't disabled quickly enough
    4af2:	c7 01       	movw	r24, r14
    4af4:	0e 94 64 19 	call	0x32c8	; 0x32c8 <uart_txbuffer_disable>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    4af8:	b0 eb       	ldi	r27, 0xB0	; 176
    4afa:	eb 16       	cp	r14, r27
    4afc:	bb e0       	ldi	r27, 0x0B	; 11
    4afe:	fb 06       	cpc	r15, r27
    4b00:	61 f0       	breq	.+24     	; 0x4b1a <uart_enqueue_string+0x49a>
	if (port == &uctrl) {return 1;}
    4b02:	e0 ea       	ldi	r30, 0xA0	; 160
    4b04:	ee 16       	cp	r14, r30
    4b06:	e8 e0       	ldi	r30, 0x08	; 8
    4b08:	fe 06       	cpc	r15, r30
    4b0a:	49 f0       	breq	.+18     	; 0x4b1e <uart_enqueue_string+0x49e>
	if (port == &udata) {return 2;}
    4b0c:	f0 eb       	ldi	r31, 0xB0	; 176
    4b0e:	ef 16       	cp	r14, r31
    4b10:	f8 e0       	ldi	r31, 0x08	; 8
    4b12:	ff 06       	cpc	r15, r31
    4b14:	31 f4       	brne	.+12     	; 0x4b22 <uart_enqueue_string+0x4a2>
    4b16:	22 e0       	ldi	r18, 0x02	; 2
    4b18:	05 c0       	rjmp	.+10     	; 0x4b24 <uart_enqueue_string+0x4a4>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    4b1a:	20 e0       	ldi	r18, 0x00	; 0
    4b1c:	03 c0       	rjmp	.+6      	; 0x4b24 <uart_enqueue_string+0x4a4>
	if (port == &uctrl) {return 1;}
    4b1e:	21 e0       	ldi	r18, 0x01	; 1
    4b20:	01 c0       	rjmp	.+2      	; 0x4b24 <uart_enqueue_string+0x4a4>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    4b22:	20 e0       	ldi	r18, 0x00	; 0
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    4b24:	30 e0       	ldi	r19, 0x00	; 0
    4b26:	c9 01       	movw	r24, r18
    4b28:	88 0f       	add	r24, r24
    4b2a:	99 1f       	adc	r25, r25
    4b2c:	f3 01       	movw	r30, r6
    4b2e:	e8 0f       	add	r30, r24
    4b30:	f9 1f       	adc	r31, r25
    4b32:	40 81       	ld	r20, Z
    4b34:	51 81       	ldd	r21, Z+1	; 0x01
    4b36:	f4 01       	movw	r30, r8
    4b38:	e8 0f       	add	r30, r24
    4b3a:	f9 1f       	adc	r31, r25
    4b3c:	80 81       	ld	r24, Z
    4b3e:	91 81       	ldd	r25, Z+1	; 0x01
    4b40:	48 17       	cp	r20, r24
    4b42:	59 07       	cpc	r21, r25
    4b44:	88 f0       	brcs	.+34     	; 0x4b68 <uart_enqueue_string+0x4e8>
		return (uart_head[idx] - uart_tail[idx]);
    4b46:	22 0f       	add	r18, r18
    4b48:	33 1f       	adc	r19, r19
    4b4a:	f3 01       	movw	r30, r6
    4b4c:	e2 0f       	add	r30, r18
    4b4e:	f3 1f       	adc	r31, r19
    4b50:	40 81       	ld	r20, Z
    4b52:	51 81       	ldd	r21, Z+1	; 0x01
    4b54:	f4 01       	movw	r30, r8
    4b56:	e2 0f       	add	r30, r18
    4b58:	f3 1f       	adc	r31, r19
    4b5a:	80 81       	ld	r24, Z
    4b5c:	91 81       	ldd	r25, Z+1	; 0x01
    4b5e:	9a 01       	movw	r18, r20
    4b60:	28 1b       	sub	r18, r24
    4b62:	39 0b       	sbc	r19, r25
    4b64:	c9 01       	movw	r24, r18
    4b66:	10 c0       	rjmp	.+32     	; 0x4b88 <uart_enqueue_string+0x508>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    4b68:	22 0f       	add	r18, r18
    4b6a:	33 1f       	adc	r19, r19
    4b6c:	f3 01       	movw	r30, r6
    4b6e:	e2 0f       	add	r30, r18
    4b70:	f3 1f       	adc	r31, r19
    4b72:	80 81       	ld	r24, Z
    4b74:	91 81       	ldd	r25, Z+1	; 0x01
    4b76:	f4 01       	movw	r30, r8
    4b78:	e2 0f       	add	r30, r18
    4b7a:	f3 1f       	adc	r31, r19
    4b7c:	20 81       	ld	r18, Z
    4b7e:	31 81       	ldd	r19, Z+1	; 0x01
    4b80:	80 50       	subi	r24, 0x00	; 0
    4b82:	9c 4f       	sbci	r25, 0xFC	; 252
    4b84:	82 1b       	sub	r24, r18
    4b86:	93 0b       	sbc	r25, r19
				port->DATA = toSend;
				break;
		}				
	}
	uart_txbuffer_disable(port); //implemented this way to prevent periodic stalls that happen when uart_txbuffer isn't disabled quickly enough
	if ((uart_count(port)>0) && (lcd_flow_control == LCD_READY)){ //...something is waiting to go out
    4b88:	00 97       	sbiw	r24, 0x00	; 0
    4b8a:	09 f4       	brne	.+2      	; 0x4b8e <uart_enqueue_string+0x50e>
    4b8c:	e1 c0       	rjmp	.+450    	; 0x4d50 <uart_enqueue_string+0x6d0>
    4b8e:	80 91 b0 26 	lds	r24, 0x26B0
    4b92:	82 35       	cpi	r24, 0x52	; 82
    4b94:	09 f0       	breq	.+2      	; 0x4b98 <uart_enqueue_string+0x518>
    4b96:	dc c0       	rjmp	.+440    	; 0x4d50 <uart_enqueue_string+0x6d0>
		uart_txbuffer_enable(port);	
    4b98:	c7 01       	movw	r24, r14
    4b9a:	0e 94 5f 19 	call	0x32be	; 0x32be <uart_txbuffer_enable>
    4b9e:	d8 c0       	rjmp	.+432    	; 0x4d50 <uart_enqueue_string+0x6d0>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    4ba0:	30 eb       	ldi	r19, 0xB0	; 176
    4ba2:	e3 16       	cp	r14, r19
    4ba4:	3b e0       	ldi	r19, 0x0B	; 11
    4ba6:	f3 06       	cpc	r15, r19
    4ba8:	61 f0       	breq	.+24     	; 0x4bc2 <uart_enqueue_string+0x542>
	if (port == &uctrl) {return 1;}
    4baa:	60 ea       	ldi	r22, 0xA0	; 160
    4bac:	e6 16       	cp	r14, r22
    4bae:	68 e0       	ldi	r22, 0x08	; 8
    4bb0:	f6 06       	cpc	r15, r22
    4bb2:	49 f0       	breq	.+18     	; 0x4bc6 <uart_enqueue_string+0x546>
	if (port == &udata) {return 2;}
    4bb4:	80 eb       	ldi	r24, 0xB0	; 176
    4bb6:	e8 16       	cp	r14, r24
    4bb8:	88 e0       	ldi	r24, 0x08	; 8
    4bba:	f8 06       	cpc	r15, r24
    4bbc:	31 f4       	brne	.+12     	; 0x4bca <uart_enqueue_string+0x54a>
    4bbe:	22 e0       	ldi	r18, 0x02	; 2
    4bc0:	05 c0       	rjmp	.+10     	; 0x4bcc <uart_enqueue_string+0x54c>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    4bc2:	20 e0       	ldi	r18, 0x00	; 0
    4bc4:	03 c0       	rjmp	.+6      	; 0x4bcc <uart_enqueue_string+0x54c>
	if (port == &uctrl) {return 1;}
    4bc6:	21 e0       	ldi	r18, 0x01	; 1
    4bc8:	01 c0       	rjmp	.+2      	; 0x4bcc <uart_enqueue_string+0x54c>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    4bca:	20 e0       	ldi	r18, 0x00	; 0
}

inline uint8_t uart_dequeue(USART_t* port){
	uint8_t idx = port_map(port);
	uint16_t oldtail;
	oldtail = uart_tail[idx];
    4bcc:	30 e0       	ldi	r19, 0x00	; 0
    4bce:	c9 01       	movw	r24, r18
    4bd0:	88 0f       	add	r24, r24
    4bd2:	99 1f       	adc	r25, r25
    4bd4:	f4 01       	movw	r30, r8
    4bd6:	e8 0f       	add	r30, r24
    4bd8:	f9 1f       	adc	r31, r25
    4bda:	40 81       	ld	r20, Z
    4bdc:	51 81       	ldd	r21, Z+1	; 0x01
	uart_tail[idx]++;
    4bde:	80 81       	ld	r24, Z
    4be0:	91 81       	ldd	r25, Z+1	; 0x01
    4be2:	01 96       	adiw	r24, 0x01	; 1
    4be4:	80 83       	st	Z, r24
    4be6:	91 83       	std	Z+1, r25	; 0x01
	if (uart_tail[idx] >= MAX_BUFFER_LEN){
    4be8:	80 81       	ld	r24, Z
    4bea:	91 81       	ldd	r25, Z+1	; 0x01
    4bec:	a4 e0       	ldi	r26, 0x04	; 4
    4bee:	80 30       	cpi	r24, 0x00	; 0
    4bf0:	9a 07       	cpc	r25, r26
    4bf2:	10 f0       	brcs	.+4      	; 0x4bf8 <uart_enqueue_string+0x578>
		uart_tail[idx] = 0;
    4bf4:	10 82       	st	Z, r1
    4bf6:	11 82       	std	Z+1, r1	; 0x01
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    4bf8:	c9 01       	movw	r24, r18
    4bfa:	98 2f       	mov	r25, r24
    4bfc:	88 27       	eor	r24, r24
    4bfe:	99 0f       	add	r25, r25
    4c00:	99 0f       	add	r25, r25
    4c02:	84 0f       	add	r24, r20
    4c04:	95 1f       	adc	r25, r21
    4c06:	84 0d       	add	r24, r4
    4c08:	95 1d       	adc	r25, r5
    4c0a:	dc 01       	movw	r26, r24
    4c0c:	8c 91       	ld	r24, X
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
    4c0e:	f7 01       	movw	r30, r14
    4c10:	80 83       	st	Z, r24
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    4c12:	81 81       	ldd	r24, Z+1	; 0x01
    4c14:	85 ff       	sbrs	r24, 5
    4c16:	4b c0       	rjmp	.+150    	; 0x4cae <uart_enqueue_string+0x62e>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    4c18:	f0 eb       	ldi	r31, 0xB0	; 176
    4c1a:	ef 16       	cp	r14, r31
    4c1c:	fb e0       	ldi	r31, 0x0B	; 11
    4c1e:	ff 06       	cpc	r15, r31
    4c20:	61 f0       	breq	.+24     	; 0x4c3a <uart_enqueue_string+0x5ba>
	if (port == &uctrl) {return 1;}
    4c22:	20 ea       	ldi	r18, 0xA0	; 160
    4c24:	e2 16       	cp	r14, r18
    4c26:	28 e0       	ldi	r18, 0x08	; 8
    4c28:	f2 06       	cpc	r15, r18
    4c2a:	49 f0       	breq	.+18     	; 0x4c3e <uart_enqueue_string+0x5be>
	if (port == &udata) {return 2;}
    4c2c:	30 eb       	ldi	r19, 0xB0	; 176
    4c2e:	e3 16       	cp	r14, r19
    4c30:	38 e0       	ldi	r19, 0x08	; 8
    4c32:	f3 06       	cpc	r15, r19
    4c34:	31 f4       	brne	.+12     	; 0x4c42 <uart_enqueue_string+0x5c2>
    4c36:	22 e0       	ldi	r18, 0x02	; 2
    4c38:	05 c0       	rjmp	.+10     	; 0x4c44 <uart_enqueue_string+0x5c4>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    4c3a:	20 e0       	ldi	r18, 0x00	; 0
    4c3c:	03 c0       	rjmp	.+6      	; 0x4c44 <uart_enqueue_string+0x5c4>
	if (port == &uctrl) {return 1;}
    4c3e:	21 e0       	ldi	r18, 0x01	; 1
    4c40:	01 c0       	rjmp	.+2      	; 0x4c44 <uart_enqueue_string+0x5c4>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    4c42:	20 e0       	ldi	r18, 0x00	; 0
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    4c44:	30 e0       	ldi	r19, 0x00	; 0
    4c46:	c9 01       	movw	r24, r18
    4c48:	88 0f       	add	r24, r24
    4c4a:	99 1f       	adc	r25, r25
    4c4c:	f3 01       	movw	r30, r6
    4c4e:	e8 0f       	add	r30, r24
    4c50:	f9 1f       	adc	r31, r25
    4c52:	40 81       	ld	r20, Z
    4c54:	51 81       	ldd	r21, Z+1	; 0x01
    4c56:	f4 01       	movw	r30, r8
    4c58:	e8 0f       	add	r30, r24
    4c5a:	f9 1f       	adc	r31, r25
    4c5c:	80 81       	ld	r24, Z
    4c5e:	91 81       	ldd	r25, Z+1	; 0x01
    4c60:	48 17       	cp	r20, r24
    4c62:	59 07       	cpc	r21, r25
    4c64:	88 f0       	brcs	.+34     	; 0x4c88 <uart_enqueue_string+0x608>
		return (uart_head[idx] - uart_tail[idx]);
    4c66:	22 0f       	add	r18, r18
    4c68:	33 1f       	adc	r19, r19
    4c6a:	f3 01       	movw	r30, r6
    4c6c:	e2 0f       	add	r30, r18
    4c6e:	f3 1f       	adc	r31, r19
    4c70:	40 81       	ld	r20, Z
    4c72:	51 81       	ldd	r21, Z+1	; 0x01
    4c74:	f4 01       	movw	r30, r8
    4c76:	e2 0f       	add	r30, r18
    4c78:	f3 1f       	adc	r31, r19
    4c7a:	80 81       	ld	r24, Z
    4c7c:	91 81       	ldd	r25, Z+1	; 0x01
    4c7e:	da 01       	movw	r26, r20
    4c80:	a8 1b       	sub	r26, r24
    4c82:	b9 0b       	sbc	r27, r25
    4c84:	cd 01       	movw	r24, r26
    4c86:	10 c0       	rjmp	.+32     	; 0x4ca8 <uart_enqueue_string+0x628>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    4c88:	22 0f       	add	r18, r18
    4c8a:	33 1f       	adc	r19, r19
    4c8c:	f3 01       	movw	r30, r6
    4c8e:	e2 0f       	add	r30, r18
    4c90:	f3 1f       	adc	r31, r19
    4c92:	80 81       	ld	r24, Z
    4c94:	91 81       	ldd	r25, Z+1	; 0x01
    4c96:	f4 01       	movw	r30, r8
    4c98:	e2 0f       	add	r30, r18
    4c9a:	f3 1f       	adc	r31, r19
    4c9c:	20 81       	ld	r18, Z
    4c9e:	31 81       	ldd	r19, Z+1	; 0x01
    4ca0:	80 50       	subi	r24, 0x00	; 0
    4ca2:	9c 4f       	sbci	r25, 0xFC	; 252
    4ca4:	82 1b       	sub	r24, r18
    4ca6:	93 0b       	sbc	r25, r19
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    4ca8:	00 97       	sbiw	r24, 0x00	; 0
    4caa:	09 f0       	breq	.+2      	; 0x4cae <uart_enqueue_string+0x62e>
    4cac:	79 cf       	rjmp	.-270    	; 0x4ba0 <uart_enqueue_string+0x520>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    4cae:	b0 eb       	ldi	r27, 0xB0	; 176
    4cb0:	eb 16       	cp	r14, r27
    4cb2:	bb e0       	ldi	r27, 0x0B	; 11
    4cb4:	fb 06       	cpc	r15, r27
    4cb6:	61 f0       	breq	.+24     	; 0x4cd0 <uart_enqueue_string+0x650>
	if (port == &uctrl) {return 1;}
    4cb8:	e0 ea       	ldi	r30, 0xA0	; 160
    4cba:	ee 16       	cp	r14, r30
    4cbc:	e8 e0       	ldi	r30, 0x08	; 8
    4cbe:	fe 06       	cpc	r15, r30
    4cc0:	49 f0       	breq	.+18     	; 0x4cd4 <uart_enqueue_string+0x654>
	if (port == &udata) {return 2;}
    4cc2:	f0 eb       	ldi	r31, 0xB0	; 176
    4cc4:	ef 16       	cp	r14, r31
    4cc6:	f8 e0       	ldi	r31, 0x08	; 8
    4cc8:	ff 06       	cpc	r15, r31
    4cca:	31 f4       	brne	.+12     	; 0x4cd8 <uart_enqueue_string+0x658>
    4ccc:	22 e0       	ldi	r18, 0x02	; 2
    4cce:	05 c0       	rjmp	.+10     	; 0x4cda <uart_enqueue_string+0x65a>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    4cd0:	20 e0       	ldi	r18, 0x00	; 0
    4cd2:	03 c0       	rjmp	.+6      	; 0x4cda <uart_enqueue_string+0x65a>
	if (port == &uctrl) {return 1;}
    4cd4:	21 e0       	ldi	r18, 0x01	; 1
    4cd6:	01 c0       	rjmp	.+2      	; 0x4cda <uart_enqueue_string+0x65a>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    4cd8:	20 e0       	ldi	r18, 0x00	; 0
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    4cda:	30 e0       	ldi	r19, 0x00	; 0
    4cdc:	c9 01       	movw	r24, r18
    4cde:	88 0f       	add	r24, r24
    4ce0:	99 1f       	adc	r25, r25
    4ce2:	f3 01       	movw	r30, r6
    4ce4:	e8 0f       	add	r30, r24
    4ce6:	f9 1f       	adc	r31, r25
    4ce8:	40 81       	ld	r20, Z
    4cea:	51 81       	ldd	r21, Z+1	; 0x01
    4cec:	f4 01       	movw	r30, r8
    4cee:	e8 0f       	add	r30, r24
    4cf0:	f9 1f       	adc	r31, r25
    4cf2:	80 81       	ld	r24, Z
    4cf4:	91 81       	ldd	r25, Z+1	; 0x01
    4cf6:	48 17       	cp	r20, r24
    4cf8:	59 07       	cpc	r21, r25
    4cfa:	88 f0       	brcs	.+34     	; 0x4d1e <uart_enqueue_string+0x69e>
		return (uart_head[idx] - uart_tail[idx]);
    4cfc:	22 0f       	add	r18, r18
    4cfe:	33 1f       	adc	r19, r19
    4d00:	f3 01       	movw	r30, r6
    4d02:	e2 0f       	add	r30, r18
    4d04:	f3 1f       	adc	r31, r19
    4d06:	40 81       	ld	r20, Z
    4d08:	51 81       	ldd	r21, Z+1	; 0x01
    4d0a:	f4 01       	movw	r30, r8
    4d0c:	e2 0f       	add	r30, r18
    4d0e:	f3 1f       	adc	r31, r19
    4d10:	80 81       	ld	r24, Z
    4d12:	91 81       	ldd	r25, Z+1	; 0x01
    4d14:	9a 01       	movw	r18, r20
    4d16:	28 1b       	sub	r18, r24
    4d18:	39 0b       	sbc	r19, r25
    4d1a:	c9 01       	movw	r24, r18
    4d1c:	10 c0       	rjmp	.+32     	; 0x4d3e <uart_enqueue_string+0x6be>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    4d1e:	22 0f       	add	r18, r18
    4d20:	33 1f       	adc	r19, r19
    4d22:	f3 01       	movw	r30, r6
    4d24:	e2 0f       	add	r30, r18
    4d26:	f3 1f       	adc	r31, r19
    4d28:	80 81       	ld	r24, Z
    4d2a:	91 81       	ldd	r25, Z+1	; 0x01
    4d2c:	f4 01       	movw	r30, r8
    4d2e:	e2 0f       	add	r30, r18
    4d30:	f3 1f       	adc	r31, r19
    4d32:	20 81       	ld	r18, Z
    4d34:	31 81       	ldd	r19, Z+1	; 0x01
    4d36:	80 50       	subi	r24, 0x00	; 0
    4d38:	9c 4f       	sbci	r25, 0xFC	; 252
    4d3a:	82 1b       	sub	r24, r18
    4d3c:	93 0b       	sbc	r25, r19
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
	}
	//disable the tx outgoing hardware buffer ready interrupt if we have nothing more to put in it.
	if(uart_count(port)>0) uart_txbuffer_enable(port);
    4d3e:	00 97       	sbiw	r24, 0x00	; 0
    4d40:	21 f0       	breq	.+8      	; 0x4d4a <uart_enqueue_string+0x6ca>
    4d42:	c7 01       	movw	r24, r14
    4d44:	0e 94 5f 19 	call	0x32be	; 0x32be <uart_txbuffer_enable>
    4d48:	03 c0       	rjmp	.+6      	; 0x4d50 <uart_enqueue_string+0x6d0>
	else uart_txbuffer_disable(port);
    4d4a:	c7 01       	movw	r24, r14
    4d4c:	0e 94 64 19 	call	0x32c8	; 0x32c8 <uart_txbuffer_disable>
}

///Enqueue a string into the outgoing serial queue. Adds CR terminator to string.
inline void uart_enqueue_string(USART_t* port, char* string_in){
	uint16_t length = (uint16_t)strlen(string_in);
	for (uint16_t i=0; i<length; i++) {uart_enqueue(port, (uint8_t)string_in[i]);}
    4d50:	08 94       	sec
    4d52:	21 1c       	adc	r2, r1
    4d54:	31 1c       	adc	r3, r1
    4d56:	8b 81       	ldd	r24, Y+3	; 0x03
    4d58:	9c 81       	ldd	r25, Y+4	; 0x04
    4d5a:	28 16       	cp	r2, r24
    4d5c:	39 06       	cpc	r3, r25
    4d5e:	09 f0       	breq	.+2      	; 0x4d62 <uart_enqueue_string+0x6e2>
    4d60:	d1 cc       	rjmp	.-1630   	; 0x4704 <uart_enqueue_string+0x84>
}
    4d62:	24 96       	adiw	r28, 0x04	; 4
    4d64:	cd bf       	out	0x3d, r28	; 61
    4d66:	de bf       	out	0x3e, r29	; 62
    4d68:	df 91       	pop	r29
    4d6a:	cf 91       	pop	r28
    4d6c:	1f 91       	pop	r17
    4d6e:	0f 91       	pop	r16
    4d70:	ff 90       	pop	r15
    4d72:	ef 90       	pop	r14
    4d74:	df 90       	pop	r13
    4d76:	cf 90       	pop	r12
    4d78:	bf 90       	pop	r11
    4d7a:	af 90       	pop	r10
    4d7c:	9f 90       	pop	r9
    4d7e:	8f 90       	pop	r8
    4d80:	7f 90       	pop	r7
    4d82:	6f 90       	pop	r6
    4d84:	5f 90       	pop	r5
    4d86:	4f 90       	pop	r4
    4d88:	3f 90       	pop	r3
    4d8a:	2f 90       	pop	r2
    4d8c:	08 95       	ret

00004d8e <uart_enqueue>:

///Enqueue date into the outgoing serial queue. This data is sent via USB to the PC's first virtual Comm Port associated with the EEICM. 
/**This is the queue used to send data back to the command and control GUI. The #define UART_DEBUG can be used to disable normal serial activity through this queue
	The blue LED is used in this routine to signal buffer overflow, which, due to the real-time scheduled nature of the EEICM firmware architecture, should not happen.
	This function is inactive when in UART DEBUG mode. Calls to this function have no effect during this period.*/
inline void uart_enqueue(USART_t* port, uint8_t datain){
    4d8e:	3f 92       	push	r3
    4d90:	4f 92       	push	r4
    4d92:	5f 92       	push	r5
    4d94:	6f 92       	push	r6
    4d96:	7f 92       	push	r7
    4d98:	8f 92       	push	r8
    4d9a:	9f 92       	push	r9
    4d9c:	af 92       	push	r10
    4d9e:	bf 92       	push	r11
    4da0:	cf 92       	push	r12
    4da2:	df 92       	push	r13
    4da4:	ef 92       	push	r14
    4da6:	ff 92       	push	r15
    4da8:	0f 93       	push	r16
    4daa:	1f 93       	push	r17
    4dac:	cf 93       	push	r28
    4dae:	df 93       	push	r29
    4db0:	6c 01       	movw	r12, r24
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    4db2:	2b e0       	ldi	r18, 0x0B	; 11
    4db4:	80 3b       	cpi	r24, 0xB0	; 176
    4db6:	92 07       	cpc	r25, r18
    4db8:	59 f0       	breq	.+22     	; 0x4dd0 <uart_enqueue+0x42>
	if (port == &uctrl) {return 1;}
    4dba:	38 e0       	ldi	r19, 0x08	; 8
    4dbc:	80 3a       	cpi	r24, 0xA0	; 160
    4dbe:	93 07       	cpc	r25, r19
    4dc0:	49 f0       	breq	.+18     	; 0x4dd4 <uart_enqueue+0x46>
	if (port == &udata) {return 2;}
    4dc2:	80 eb       	ldi	r24, 0xB0	; 176
    4dc4:	c8 16       	cp	r12, r24
    4dc6:	88 e0       	ldi	r24, 0x08	; 8
    4dc8:	d8 06       	cpc	r13, r24
    4dca:	31 f4       	brne	.+12     	; 0x4dd8 <uart_enqueue+0x4a>
    4dcc:	42 e0       	ldi	r20, 0x02	; 2
    4dce:	05 c0       	rjmp	.+10     	; 0x4dda <uart_enqueue+0x4c>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    4dd0:	40 e0       	ldi	r20, 0x00	; 0
    4dd2:	03 c0       	rjmp	.+6      	; 0x4dda <uart_enqueue+0x4c>
	if (port == &uctrl) {return 1;}
    4dd4:	41 e0       	ldi	r20, 0x01	; 1
    4dd6:	01 c0       	rjmp	.+2      	; 0x4dda <uart_enqueue+0x4c>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    4dd8:	40 e0       	ldi	r20, 0x00	; 0
#ifndef UART_DEBUG
	uint8_t idx = port_map(port);
	
	//if (idx==0){uart_enqueue(&uctrl, datain);} //xxx
	
	uart_buffer[idx][uart_head[idx]] = datain;
    4dda:	c4 2f       	mov	r28, r20
    4ddc:	d0 e0       	ldi	r29, 0x00	; 0
    4dde:	fe 01       	movw	r30, r28
    4de0:	ee 0f       	add	r30, r30
    4de2:	ff 1f       	adc	r31, r31
    4de4:	e8 53       	subi	r30, 0x38	; 56
    4de6:	fd 4c       	sbci	r31, 0xCD	; 205
    4de8:	20 81       	ld	r18, Z
    4dea:	31 81       	ldd	r19, Z+1	; 0x01
    4dec:	ce 01       	movw	r24, r28
    4dee:	98 2f       	mov	r25, r24
    4df0:	88 27       	eor	r24, r24
    4df2:	99 0f       	add	r25, r25
    4df4:	99 0f       	add	r25, r25
    4df6:	82 0f       	add	r24, r18
    4df8:	93 1f       	adc	r25, r19
    4dfa:	dc 01       	movw	r26, r24
    4dfc:	a2 53       	subi	r26, 0x32	; 50
    4dfe:	bd 4c       	sbci	r27, 0xCD	; 205
    4e00:	6c 93       	st	X, r22
	uart_head[idx]++;
    4e02:	80 81       	ld	r24, Z
    4e04:	91 81       	ldd	r25, Z+1	; 0x01
    4e06:	01 96       	adiw	r24, 0x01	; 1
    4e08:	80 83       	st	Z, r24
    4e0a:	91 83       	std	Z+1, r25	; 0x01
	if (uart_head[idx] >= MAX_BUFFER_LEN){
    4e0c:	80 81       	ld	r24, Z
    4e0e:	91 81       	ldd	r25, Z+1	; 0x01
    4e10:	e4 e0       	ldi	r30, 0x04	; 4
    4e12:	80 30       	cpi	r24, 0x00	; 0
    4e14:	9e 07       	cpc	r25, r30
    4e16:	30 f0       	brcs	.+12     	; 0x4e24 <uart_enqueue+0x96>
		uart_head[idx] = 0;
    4e18:	cc 0f       	add	r28, r28
    4e1a:	dd 1f       	adc	r29, r29
    4e1c:	c8 53       	subi	r28, 0x38	; 56
    4e1e:	dd 4c       	sbci	r29, 0xCD	; 205
    4e20:	18 82       	st	Y, r1
    4e22:	19 82       	std	Y+1, r1	; 0x01
	}
	if (idx == 0){uart_transmit_lcd(port);} //start the transmission process.
    4e24:	44 23       	and	r20, r20
    4e26:	09 f4       	brne	.+2      	; 0x4e2a <uart_enqueue+0x9c>
    4e28:	27 c1       	rjmp	.+590    	; 0x5078 <uart_enqueue+0x2ea>
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    4e2a:	f6 01       	movw	r30, r12
    4e2c:	81 81       	ldd	r24, Z+1	; 0x01
    4e2e:	85 fd       	sbrc	r24, 5
    4e30:	33 c2       	rjmp	.+1126   	; 0x5298 <uart_enqueue+0x50a>
    4e32:	85 c2       	rjmp	.+1290   	; 0x533e <uart_enqueue+0x5b0>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    4e34:	f0 eb       	ldi	r31, 0xB0	; 176
    4e36:	cf 16       	cp	r12, r31
    4e38:	fb e0       	ldi	r31, 0x0B	; 11
    4e3a:	df 06       	cpc	r13, r31
    4e3c:	61 f0       	breq	.+24     	; 0x4e56 <uart_enqueue+0xc8>
	if (port == &uctrl) {return 1;}
    4e3e:	20 ea       	ldi	r18, 0xA0	; 160
    4e40:	c2 16       	cp	r12, r18
    4e42:	28 e0       	ldi	r18, 0x08	; 8
    4e44:	d2 06       	cpc	r13, r18
    4e46:	49 f0       	breq	.+18     	; 0x4e5a <uart_enqueue+0xcc>
	if (port == &udata) {return 2;}
    4e48:	30 eb       	ldi	r19, 0xB0	; 176
    4e4a:	c3 16       	cp	r12, r19
    4e4c:	38 e0       	ldi	r19, 0x08	; 8
    4e4e:	d3 06       	cpc	r13, r19
    4e50:	31 f4       	brne	.+12     	; 0x4e5e <uart_enqueue+0xd0>
    4e52:	22 e0       	ldi	r18, 0x02	; 2
    4e54:	05 c0       	rjmp	.+10     	; 0x4e60 <uart_enqueue+0xd2>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    4e56:	20 e0       	ldi	r18, 0x00	; 0
    4e58:	03 c0       	rjmp	.+6      	; 0x4e60 <uart_enqueue+0xd2>
	if (port == &uctrl) {return 1;}
    4e5a:	21 e0       	ldi	r18, 0x01	; 1
    4e5c:	01 c0       	rjmp	.+2      	; 0x4e60 <uart_enqueue+0xd2>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    4e5e:	20 e0       	ldi	r18, 0x00	; 0
}

inline uint8_t uart_dequeue(USART_t* port){
	uint8_t idx = port_map(port);
	uint16_t oldtail;
	oldtail = uart_tail[idx];
    4e60:	30 e0       	ldi	r19, 0x00	; 0
    4e62:	c9 01       	movw	r24, r18
    4e64:	88 0f       	add	r24, r24
    4e66:	99 1f       	adc	r25, r25
    4e68:	f4 01       	movw	r30, r8
    4e6a:	e8 0f       	add	r30, r24
    4e6c:	f9 1f       	adc	r31, r25
    4e6e:	40 81       	ld	r20, Z
    4e70:	51 81       	ldd	r21, Z+1	; 0x01
	uart_tail[idx]++;
    4e72:	80 81       	ld	r24, Z
    4e74:	91 81       	ldd	r25, Z+1	; 0x01
    4e76:	01 96       	adiw	r24, 0x01	; 1
    4e78:	80 83       	st	Z, r24
    4e7a:	91 83       	std	Z+1, r25	; 0x01
	if (uart_tail[idx] >= MAX_BUFFER_LEN){
    4e7c:	80 81       	ld	r24, Z
    4e7e:	91 81       	ldd	r25, Z+1	; 0x01
    4e80:	64 e0       	ldi	r22, 0x04	; 4
    4e82:	80 30       	cpi	r24, 0x00	; 0
    4e84:	96 07       	cpc	r25, r22
    4e86:	10 f0       	brcs	.+4      	; 0x4e8c <uart_enqueue+0xfe>
		uart_tail[idx] = 0;
    4e88:	10 82       	st	Z, r1
    4e8a:	11 82       	std	Z+1, r1	; 0x01
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    4e8c:	c9 01       	movw	r24, r18
    4e8e:	98 2f       	mov	r25, r24
    4e90:	88 27       	eor	r24, r24
    4e92:	99 0f       	add	r25, r25
    4e94:	99 0f       	add	r25, r25
    4e96:	84 0f       	add	r24, r20
    4e98:	95 1f       	adc	r25, r21
    4e9a:	84 0d       	add	r24, r4
    4e9c:	95 1d       	adc	r25, r5
    4e9e:	fc 01       	movw	r30, r24
    4ea0:	b0 80       	ld	r11, Z
void inline uart_transmit_lcd(USART_t* port){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0) && (lcd_flow_control == LCD_READY)){
		toSend = uart_dequeue(port);
		switch(toSend){
    4ea2:	fa ef       	ldi	r31, 0xFA	; 250
    4ea4:	bf 16       	cp	r11, r31
    4ea6:	19 f0       	breq	.+6      	; 0x4eae <uart_enqueue+0x120>
    4ea8:	2e ef       	ldi	r18, 0xFE	; 254
    4eaa:	b2 16       	cp	r11, r18
    4eac:	19 f4       	brne	.+6      	; 0x4eb4 <uart_enqueue+0x126>
			case LCD_COMMAND:
			case LCD_MACRO:
				//Header byte just describes payload -- do not send to LCD
				lcd_flow_type = toSend;
    4eae:	b0 92 ae 26 	sts	0x26AE, r11
    4eb2:	06 c1       	rjmp	.+524    	; 0x50c0 <uart_enqueue+0x332>
				break;
			default:
				//Payload bytes -- send to LCD
				if (toSend == 0x0D) {lcd_flow_control = LCD_BUSY;}
    4eb4:	3d e0       	ldi	r19, 0x0D	; 13
    4eb6:	b3 16       	cp	r11, r19
    4eb8:	11 f4       	brne	.+4      	; 0x4ebe <uart_enqueue+0x130>
    4eba:	30 92 b0 26 	sts	0x26B0, r3
#ifndef UART_DEBUG
	uint8_t idx = port_map(port);
	
	//if (idx==0){uart_enqueue(&uctrl, datain);} //xxx
	
	uart_buffer[idx][uart_head[idx]] = datain;
    4ebe:	f8 01       	movw	r30, r16
    4ec0:	80 81       	ld	r24, Z
    4ec2:	91 81       	ldd	r25, Z+1	; 0x01
    4ec4:	82 53       	subi	r24, 0x32	; 50
    4ec6:	95 4c       	sbci	r25, 0xC5	; 197
    4ec8:	fc 01       	movw	r30, r24
    4eca:	a0 82       	st	Z, r10
	uart_head[idx]++;
    4ecc:	f8 01       	movw	r30, r16
    4ece:	80 81       	ld	r24, Z
    4ed0:	91 81       	ldd	r25, Z+1	; 0x01
    4ed2:	01 96       	adiw	r24, 0x01	; 1
    4ed4:	80 83       	st	Z, r24
    4ed6:	91 83       	std	Z+1, r25	; 0x01
	if (uart_head[idx] >= MAX_BUFFER_LEN){
    4ed8:	80 81       	ld	r24, Z
    4eda:	91 81       	ldd	r25, Z+1	; 0x01
    4edc:	f4 e0       	ldi	r31, 0x04	; 4
    4ede:	80 30       	cpi	r24, 0x00	; 0
    4ee0:	9f 07       	cpc	r25, r31
    4ee2:	18 f0       	brcs	.+6      	; 0x4eea <uart_enqueue+0x15c>
		uart_head[idx] = 0;
    4ee4:	f8 01       	movw	r30, r16
    4ee6:	10 82       	st	Z, r1
    4ee8:	11 82       	std	Z+1, r1	; 0x01
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    4eea:	f7 01       	movw	r30, r14
    4eec:	81 81       	ldd	r24, Z+1	; 0x01
    4eee:	85 fd       	sbrc	r24, 5
    4ef0:	18 c0       	rjmp	.+48     	; 0x4f22 <uart_enqueue+0x194>
    4ef2:	31 c0       	rjmp	.+98     	; 0x4f56 <uart_enqueue+0x1c8>
}

inline uint8_t uart_dequeue(USART_t* port){
	uint8_t idx = port_map(port);
	uint16_t oldtail;
	oldtail = uart_tail[idx];
    4ef4:	e8 81       	ld	r30, Y
    4ef6:	f9 81       	ldd	r31, Y+1	; 0x01
	uart_tail[idx]++;
    4ef8:	88 81       	ld	r24, Y
    4efa:	99 81       	ldd	r25, Y+1	; 0x01
    4efc:	01 96       	adiw	r24, 0x01	; 1
    4efe:	88 83       	st	Y, r24
    4f00:	99 83       	std	Y+1, r25	; 0x01
	if (uart_tail[idx] >= MAX_BUFFER_LEN){
    4f02:	88 81       	ld	r24, Y
    4f04:	99 81       	ldd	r25, Y+1	; 0x01
    4f06:	24 e0       	ldi	r18, 0x04	; 4
    4f08:	80 30       	cpi	r24, 0x00	; 0
    4f0a:	92 07       	cpc	r25, r18
    4f0c:	10 f0       	brcs	.+4      	; 0x4f12 <uart_enqueue+0x184>
		uart_tail[idx] = 0;
    4f0e:	18 82       	st	Y, r1
    4f10:	19 82       	std	Y+1, r1	; 0x01
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    4f12:	e2 53       	subi	r30, 0x32	; 50
    4f14:	f5 4c       	sbci	r31, 0xC5	; 197
    4f16:	80 81       	ld	r24, Z
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
    4f18:	f7 01       	movw	r30, r14
    4f1a:	80 83       	st	Z, r24
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    4f1c:	81 81       	ldd	r24, Z+1	; 0x01
    4f1e:	85 ff       	sbrs	r24, 5
    4f20:	1a c0       	rjmp	.+52     	; 0x4f56 <uart_enqueue+0x1c8>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    4f22:	f8 01       	movw	r30, r16
    4f24:	80 81       	ld	r24, Z
    4f26:	91 81       	ldd	r25, Z+1	; 0x01
    4f28:	28 81       	ld	r18, Y
    4f2a:	39 81       	ldd	r19, Y+1	; 0x01
    4f2c:	82 17       	cp	r24, r18
    4f2e:	93 07       	cpc	r25, r19
    4f30:	38 f0       	brcs	.+14     	; 0x4f40 <uart_enqueue+0x1b2>
		return (uart_head[idx] - uart_tail[idx]);
    4f32:	80 81       	ld	r24, Z
    4f34:	91 81       	ldd	r25, Z+1	; 0x01
    4f36:	28 81       	ld	r18, Y
    4f38:	39 81       	ldd	r19, Y+1	; 0x01
    4f3a:	82 1b       	sub	r24, r18
    4f3c:	93 0b       	sbc	r25, r19
    4f3e:	09 c0       	rjmp	.+18     	; 0x4f52 <uart_enqueue+0x1c4>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    4f40:	f8 01       	movw	r30, r16
    4f42:	80 81       	ld	r24, Z
    4f44:	91 81       	ldd	r25, Z+1	; 0x01
    4f46:	28 81       	ld	r18, Y
    4f48:	39 81       	ldd	r19, Y+1	; 0x01
    4f4a:	80 50       	subi	r24, 0x00	; 0
    4f4c:	9c 4f       	sbci	r25, 0xFC	; 252
    4f4e:	82 1b       	sub	r24, r18
    4f50:	93 0b       	sbc	r25, r19
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    4f52:	00 97       	sbiw	r24, 0x00	; 0
    4f54:	79 f6       	brne	.-98     	; 0x4ef4 <uart_enqueue+0x166>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    4f56:	f8 01       	movw	r30, r16
    4f58:	80 81       	ld	r24, Z
    4f5a:	91 81       	ldd	r25, Z+1	; 0x01
    4f5c:	28 81       	ld	r18, Y
    4f5e:	39 81       	ldd	r19, Y+1	; 0x01
    4f60:	82 17       	cp	r24, r18
    4f62:	93 07       	cpc	r25, r19
    4f64:	38 f0       	brcs	.+14     	; 0x4f74 <uart_enqueue+0x1e6>
		return (uart_head[idx] - uart_tail[idx]);
    4f66:	80 81       	ld	r24, Z
    4f68:	91 81       	ldd	r25, Z+1	; 0x01
    4f6a:	28 81       	ld	r18, Y
    4f6c:	39 81       	ldd	r19, Y+1	; 0x01
    4f6e:	82 1b       	sub	r24, r18
    4f70:	93 0b       	sbc	r25, r19
    4f72:	09 c0       	rjmp	.+18     	; 0x4f86 <uart_enqueue+0x1f8>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    4f74:	f8 01       	movw	r30, r16
    4f76:	80 81       	ld	r24, Z
    4f78:	91 81       	ldd	r25, Z+1	; 0x01
    4f7a:	28 81       	ld	r18, Y
    4f7c:	39 81       	ldd	r19, Y+1	; 0x01
    4f7e:	80 50       	subi	r24, 0x00	; 0
    4f80:	9c 4f       	sbci	r25, 0xFC	; 252
    4f82:	82 1b       	sub	r24, r18
    4f84:	93 0b       	sbc	r25, r19
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
	}
	//disable the tx outgoing hardware buffer ready interrupt if we have nothing more to put in it.
	if(uart_count(port)>0) uart_txbuffer_enable(port);
    4f86:	00 97       	sbiw	r24, 0x00	; 0
    4f88:	21 f0       	breq	.+8      	; 0x4f92 <uart_enqueue+0x204>
    4f8a:	c7 01       	movw	r24, r14
    4f8c:	0e 94 5f 19 	call	0x32be	; 0x32be <uart_txbuffer_enable>
    4f90:	03 c0       	rjmp	.+6      	; 0x4f98 <uart_enqueue+0x20a>
	else uart_txbuffer_disable(port);
    4f92:	c7 01       	movw	r24, r14
    4f94:	0e 94 64 19 	call	0x32c8	; 0x32c8 <uart_txbuffer_disable>
#ifndef UART_DEBUG
	uint8_t idx = port_map(port);
	
	//if (idx==0){uart_enqueue(&uctrl, datain);} //xxx
	
	uart_buffer[idx][uart_head[idx]] = datain;
    4f98:	f8 01       	movw	r30, r16
    4f9a:	80 81       	ld	r24, Z
    4f9c:	91 81       	ldd	r25, Z+1	; 0x01
    4f9e:	82 53       	subi	r24, 0x32	; 50
    4fa0:	95 4c       	sbci	r25, 0xC5	; 197
    4fa2:	fc 01       	movw	r30, r24
    4fa4:	b0 82       	st	Z, r11
	uart_head[idx]++;
    4fa6:	f8 01       	movw	r30, r16
    4fa8:	80 81       	ld	r24, Z
    4faa:	91 81       	ldd	r25, Z+1	; 0x01
    4fac:	01 96       	adiw	r24, 0x01	; 1
    4fae:	80 83       	st	Z, r24
    4fb0:	91 83       	std	Z+1, r25	; 0x01
	if (uart_head[idx] >= MAX_BUFFER_LEN){
    4fb2:	80 81       	ld	r24, Z
    4fb4:	91 81       	ldd	r25, Z+1	; 0x01
    4fb6:	f4 e0       	ldi	r31, 0x04	; 4
    4fb8:	80 30       	cpi	r24, 0x00	; 0
    4fba:	9f 07       	cpc	r25, r31
    4fbc:	18 f0       	brcs	.+6      	; 0x4fc4 <uart_enqueue+0x236>
		uart_head[idx] = 0;
    4fbe:	f8 01       	movw	r30, r16
    4fc0:	10 82       	st	Z, r1
    4fc2:	11 82       	std	Z+1, r1	; 0x01
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    4fc4:	f7 01       	movw	r30, r14
    4fc6:	81 81       	ldd	r24, Z+1	; 0x01
    4fc8:	85 fd       	sbrc	r24, 5
    4fca:	18 c0       	rjmp	.+48     	; 0x4ffc <uart_enqueue+0x26e>
    4fcc:	31 c0       	rjmp	.+98     	; 0x5030 <uart_enqueue+0x2a2>
}

inline uint8_t uart_dequeue(USART_t* port){
	uint8_t idx = port_map(port);
	uint16_t oldtail;
	oldtail = uart_tail[idx];
    4fce:	e8 81       	ld	r30, Y
    4fd0:	f9 81       	ldd	r31, Y+1	; 0x01
	uart_tail[idx]++;
    4fd2:	88 81       	ld	r24, Y
    4fd4:	99 81       	ldd	r25, Y+1	; 0x01
    4fd6:	01 96       	adiw	r24, 0x01	; 1
    4fd8:	88 83       	st	Y, r24
    4fda:	99 83       	std	Y+1, r25	; 0x01
	if (uart_tail[idx] >= MAX_BUFFER_LEN){
    4fdc:	88 81       	ld	r24, Y
    4fde:	99 81       	ldd	r25, Y+1	; 0x01
    4fe0:	24 e0       	ldi	r18, 0x04	; 4
    4fe2:	80 30       	cpi	r24, 0x00	; 0
    4fe4:	92 07       	cpc	r25, r18
    4fe6:	10 f0       	brcs	.+4      	; 0x4fec <uart_enqueue+0x25e>
		uart_tail[idx] = 0;
    4fe8:	18 82       	st	Y, r1
    4fea:	19 82       	std	Y+1, r1	; 0x01
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    4fec:	e2 53       	subi	r30, 0x32	; 50
    4fee:	f5 4c       	sbci	r31, 0xC5	; 197
    4ff0:	80 81       	ld	r24, Z
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
    4ff2:	f7 01       	movw	r30, r14
    4ff4:	80 83       	st	Z, r24
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    4ff6:	81 81       	ldd	r24, Z+1	; 0x01
    4ff8:	85 ff       	sbrs	r24, 5
    4ffa:	1a c0       	rjmp	.+52     	; 0x5030 <uart_enqueue+0x2a2>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    4ffc:	f8 01       	movw	r30, r16
    4ffe:	80 81       	ld	r24, Z
    5000:	91 81       	ldd	r25, Z+1	; 0x01
    5002:	28 81       	ld	r18, Y
    5004:	39 81       	ldd	r19, Y+1	; 0x01
    5006:	82 17       	cp	r24, r18
    5008:	93 07       	cpc	r25, r19
    500a:	38 f0       	brcs	.+14     	; 0x501a <uart_enqueue+0x28c>
		return (uart_head[idx] - uart_tail[idx]);
    500c:	80 81       	ld	r24, Z
    500e:	91 81       	ldd	r25, Z+1	; 0x01
    5010:	28 81       	ld	r18, Y
    5012:	39 81       	ldd	r19, Y+1	; 0x01
    5014:	82 1b       	sub	r24, r18
    5016:	93 0b       	sbc	r25, r19
    5018:	09 c0       	rjmp	.+18     	; 0x502c <uart_enqueue+0x29e>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    501a:	f8 01       	movw	r30, r16
    501c:	80 81       	ld	r24, Z
    501e:	91 81       	ldd	r25, Z+1	; 0x01
    5020:	28 81       	ld	r18, Y
    5022:	39 81       	ldd	r19, Y+1	; 0x01
    5024:	80 50       	subi	r24, 0x00	; 0
    5026:	9c 4f       	sbci	r25, 0xFC	; 252
    5028:	82 1b       	sub	r24, r18
    502a:	93 0b       	sbc	r25, r19
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    502c:	00 97       	sbiw	r24, 0x00	; 0
    502e:	79 f6       	brne	.-98     	; 0x4fce <uart_enqueue+0x240>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    5030:	f8 01       	movw	r30, r16
    5032:	80 81       	ld	r24, Z
    5034:	91 81       	ldd	r25, Z+1	; 0x01
    5036:	28 81       	ld	r18, Y
    5038:	39 81       	ldd	r19, Y+1	; 0x01
    503a:	82 17       	cp	r24, r18
    503c:	93 07       	cpc	r25, r19
    503e:	38 f0       	brcs	.+14     	; 0x504e <uart_enqueue+0x2c0>
		return (uart_head[idx] - uart_tail[idx]);
    5040:	80 81       	ld	r24, Z
    5042:	91 81       	ldd	r25, Z+1	; 0x01
    5044:	28 81       	ld	r18, Y
    5046:	39 81       	ldd	r19, Y+1	; 0x01
    5048:	82 1b       	sub	r24, r18
    504a:	93 0b       	sbc	r25, r19
    504c:	09 c0       	rjmp	.+18     	; 0x5060 <uart_enqueue+0x2d2>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    504e:	f8 01       	movw	r30, r16
    5050:	80 81       	ld	r24, Z
    5052:	91 81       	ldd	r25, Z+1	; 0x01
    5054:	28 81       	ld	r18, Y
    5056:	39 81       	ldd	r19, Y+1	; 0x01
    5058:	80 50       	subi	r24, 0x00	; 0
    505a:	9c 4f       	sbci	r25, 0xFC	; 252
    505c:	82 1b       	sub	r24, r18
    505e:	93 0b       	sbc	r25, r19
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
	}
	//disable the tx outgoing hardware buffer ready interrupt if we have nothing more to put in it.
	if(uart_count(port)>0) uart_txbuffer_enable(port);
    5060:	00 97       	sbiw	r24, 0x00	; 0
    5062:	21 f0       	breq	.+8      	; 0x506c <uart_enqueue+0x2de>
    5064:	c7 01       	movw	r24, r14
    5066:	0e 94 5f 19 	call	0x32be	; 0x32be <uart_txbuffer_enable>
    506a:	03 c0       	rjmp	.+6      	; 0x5072 <uart_enqueue+0x2e4>
	else uart_txbuffer_disable(port);
    506c:	c7 01       	movw	r24, r14
    506e:	0e 94 64 19 	call	0x32c8	; 0x32c8 <uart_txbuffer_disable>
			default:
				//Payload bytes -- send to LCD
				if (toSend == 0x0D) {lcd_flow_control = LCD_BUSY;}
				uart_enqueue(&udata, '`'); //xxx - echo to data port
				uart_enqueue(&udata, toSend); //xxx - echo to data port
				port->DATA = toSend;
    5072:	f6 01       	movw	r30, r12
    5074:	b0 82       	st	Z, r11
    5076:	24 c0       	rjmp	.+72     	; 0x50c0 <uart_enqueue+0x332>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    5078:	0f 2e       	mov	r0, r31
    507a:	f8 ec       	ldi	r31, 0xC8	; 200
    507c:	6f 2e       	mov	r6, r31
    507e:	f2 e3       	ldi	r31, 0x32	; 50
    5080:	7f 2e       	mov	r7, r31
    5082:	f0 2d       	mov	r31, r0
    5084:	0f 2e       	mov	r0, r31
    5086:	f4 ed       	ldi	r31, 0xD4	; 212
    5088:	8f 2e       	mov	r8, r31
    508a:	fe e3       	ldi	r31, 0x3E	; 62
    508c:	9f 2e       	mov	r9, r31
    508e:	f0 2d       	mov	r31, r0
		uart_tail[idx] = 0;
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    5090:	0f 2e       	mov	r0, r31
    5092:	fe ec       	ldi	r31, 0xCE	; 206
    5094:	4f 2e       	mov	r4, r31
    5096:	f2 e3       	ldi	r31, 0x32	; 50
    5098:	5f 2e       	mov	r5, r31
    509a:	f0 2d       	mov	r31, r0
#ifndef UART_DEBUG
	uint8_t idx = port_map(port);
	
	//if (idx==0){uart_enqueue(&uctrl, datain);} //xxx
	
	uart_buffer[idx][uart_head[idx]] = datain;
    509c:	0c ec       	ldi	r16, 0xCC	; 204
    509e:	12 e3       	ldi	r17, 0x32	; 50
    50a0:	0f 2e       	mov	r0, r31
    50a2:	f0 e6       	ldi	r31, 0x60	; 96
    50a4:	af 2e       	mov	r10, r31
    50a6:	f0 2d       	mov	r31, r0
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    50a8:	0f 2e       	mov	r0, r31
    50aa:	f0 eb       	ldi	r31, 0xB0	; 176
    50ac:	ef 2e       	mov	r14, r31
    50ae:	f8 e0       	ldi	r31, 0x08	; 8
    50b0:	ff 2e       	mov	r15, r31
    50b2:	f0 2d       	mov	r31, r0
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    50b4:	c8 ed       	ldi	r28, 0xD8	; 216
    50b6:	de e3       	ldi	r29, 0x3E	; 62
				//Header byte just describes payload -- do not send to LCD
				lcd_flow_type = toSend;
				break;
			default:
				//Payload bytes -- send to LCD
				if (toSend == 0x0D) {lcd_flow_control = LCD_BUSY;}
    50b8:	0f 2e       	mov	r0, r31
    50ba:	fe e4       	ldi	r31, 0x4E	; 78
    50bc:	3f 2e       	mov	r3, r31
    50be:	f0 2d       	mov	r31, r0
}

void inline uart_transmit_lcd(USART_t* port){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0) && (lcd_flow_control == LCD_READY)){
    50c0:	f6 01       	movw	r30, r12
    50c2:	81 81       	ldd	r24, Z+1	; 0x01
    50c4:	85 ff       	sbrs	r24, 5
    50c6:	4f c0       	rjmp	.+158    	; 0x5166 <uart_enqueue+0x3d8>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    50c8:	f0 eb       	ldi	r31, 0xB0	; 176
    50ca:	cf 16       	cp	r12, r31
    50cc:	fb e0       	ldi	r31, 0x0B	; 11
    50ce:	df 06       	cpc	r13, r31
    50d0:	61 f0       	breq	.+24     	; 0x50ea <uart_enqueue+0x35c>
	if (port == &uctrl) {return 1;}
    50d2:	20 ea       	ldi	r18, 0xA0	; 160
    50d4:	c2 16       	cp	r12, r18
    50d6:	28 e0       	ldi	r18, 0x08	; 8
    50d8:	d2 06       	cpc	r13, r18
    50da:	49 f0       	breq	.+18     	; 0x50ee <uart_enqueue+0x360>
	if (port == &udata) {return 2;}
    50dc:	30 eb       	ldi	r19, 0xB0	; 176
    50de:	c3 16       	cp	r12, r19
    50e0:	38 e0       	ldi	r19, 0x08	; 8
    50e2:	d3 06       	cpc	r13, r19
    50e4:	31 f4       	brne	.+12     	; 0x50f2 <uart_enqueue+0x364>
    50e6:	22 e0       	ldi	r18, 0x02	; 2
    50e8:	05 c0       	rjmp	.+10     	; 0x50f4 <uart_enqueue+0x366>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    50ea:	20 e0       	ldi	r18, 0x00	; 0
    50ec:	03 c0       	rjmp	.+6      	; 0x50f4 <uart_enqueue+0x366>
	if (port == &uctrl) {return 1;}
    50ee:	21 e0       	ldi	r18, 0x01	; 1
    50f0:	01 c0       	rjmp	.+2      	; 0x50f4 <uart_enqueue+0x366>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    50f2:	20 e0       	ldi	r18, 0x00	; 0
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    50f4:	30 e0       	ldi	r19, 0x00	; 0
    50f6:	c9 01       	movw	r24, r18
    50f8:	88 0f       	add	r24, r24
    50fa:	99 1f       	adc	r25, r25
    50fc:	f3 01       	movw	r30, r6
    50fe:	e8 0f       	add	r30, r24
    5100:	f9 1f       	adc	r31, r25
    5102:	40 81       	ld	r20, Z
    5104:	51 81       	ldd	r21, Z+1	; 0x01
    5106:	f4 01       	movw	r30, r8
    5108:	e8 0f       	add	r30, r24
    510a:	f9 1f       	adc	r31, r25
    510c:	80 81       	ld	r24, Z
    510e:	91 81       	ldd	r25, Z+1	; 0x01
    5110:	48 17       	cp	r20, r24
    5112:	59 07       	cpc	r21, r25
    5114:	88 f0       	brcs	.+34     	; 0x5138 <uart_enqueue+0x3aa>
		return (uart_head[idx] - uart_tail[idx]);
    5116:	22 0f       	add	r18, r18
    5118:	33 1f       	adc	r19, r19
    511a:	f3 01       	movw	r30, r6
    511c:	e2 0f       	add	r30, r18
    511e:	f3 1f       	adc	r31, r19
    5120:	40 81       	ld	r20, Z
    5122:	51 81       	ldd	r21, Z+1	; 0x01
    5124:	f4 01       	movw	r30, r8
    5126:	e2 0f       	add	r30, r18
    5128:	f3 1f       	adc	r31, r19
    512a:	80 81       	ld	r24, Z
    512c:	91 81       	ldd	r25, Z+1	; 0x01
    512e:	fa 01       	movw	r30, r20
    5130:	e8 1b       	sub	r30, r24
    5132:	f9 0b       	sbc	r31, r25
    5134:	cf 01       	movw	r24, r30
    5136:	10 c0       	rjmp	.+32     	; 0x5158 <uart_enqueue+0x3ca>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    5138:	22 0f       	add	r18, r18
    513a:	33 1f       	adc	r19, r19
    513c:	f3 01       	movw	r30, r6
    513e:	e2 0f       	add	r30, r18
    5140:	f3 1f       	adc	r31, r19
    5142:	80 81       	ld	r24, Z
    5144:	91 81       	ldd	r25, Z+1	; 0x01
    5146:	f4 01       	movw	r30, r8
    5148:	e2 0f       	add	r30, r18
    514a:	f3 1f       	adc	r31, r19
    514c:	20 81       	ld	r18, Z
    514e:	31 81       	ldd	r19, Z+1	; 0x01
    5150:	80 50       	subi	r24, 0x00	; 0
    5152:	9c 4f       	sbci	r25, 0xFC	; 252
    5154:	82 1b       	sub	r24, r18
    5156:	93 0b       	sbc	r25, r19
}

void inline uart_transmit_lcd(USART_t* port){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0) && (lcd_flow_control == LCD_READY)){
    5158:	00 97       	sbiw	r24, 0x00	; 0
    515a:	29 f0       	breq	.+10     	; 0x5166 <uart_enqueue+0x3d8>
    515c:	80 91 b0 26 	lds	r24, 0x26B0
    5160:	82 35       	cpi	r24, 0x52	; 82
    5162:	09 f4       	brne	.+2      	; 0x5166 <uart_enqueue+0x3d8>
    5164:	67 ce       	rjmp	.-818    	; 0x4e34 <uart_enqueue+0xa6>
				uart_enqueue(&udata, toSend); //xxx - echo to data port
				port->DATA = toSend;
				break;
		}				
	}
	uart_txbuffer_disable(port); //implemented this way to prevent periodic stalls that happen when uart_txbuffer isn't disabled quickly enough
    5166:	c6 01       	movw	r24, r12
    5168:	0e 94 64 19 	call	0x32c8	; 0x32c8 <uart_txbuffer_disable>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    516c:	f0 eb       	ldi	r31, 0xB0	; 176
    516e:	cf 16       	cp	r12, r31
    5170:	fb e0       	ldi	r31, 0x0B	; 11
    5172:	df 06       	cpc	r13, r31
    5174:	61 f0       	breq	.+24     	; 0x518e <uart_enqueue+0x400>
	if (port == &uctrl) {return 1;}
    5176:	20 ea       	ldi	r18, 0xA0	; 160
    5178:	c2 16       	cp	r12, r18
    517a:	28 e0       	ldi	r18, 0x08	; 8
    517c:	d2 06       	cpc	r13, r18
    517e:	49 f0       	breq	.+18     	; 0x5192 <uart_enqueue+0x404>
	if (port == &udata) {return 2;}
    5180:	30 eb       	ldi	r19, 0xB0	; 176
    5182:	c3 16       	cp	r12, r19
    5184:	38 e0       	ldi	r19, 0x08	; 8
    5186:	d3 06       	cpc	r13, r19
    5188:	31 f4       	brne	.+12     	; 0x5196 <uart_enqueue+0x408>
    518a:	22 e0       	ldi	r18, 0x02	; 2
    518c:	05 c0       	rjmp	.+10     	; 0x5198 <uart_enqueue+0x40a>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    518e:	20 e0       	ldi	r18, 0x00	; 0
    5190:	03 c0       	rjmp	.+6      	; 0x5198 <uart_enqueue+0x40a>
	if (port == &uctrl) {return 1;}
    5192:	21 e0       	ldi	r18, 0x01	; 1
    5194:	01 c0       	rjmp	.+2      	; 0x5198 <uart_enqueue+0x40a>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    5196:	20 e0       	ldi	r18, 0x00	; 0
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    5198:	30 e0       	ldi	r19, 0x00	; 0
    519a:	c9 01       	movw	r24, r18
    519c:	88 0f       	add	r24, r24
    519e:	99 1f       	adc	r25, r25
    51a0:	fc 01       	movw	r30, r24
    51a2:	e8 53       	subi	r30, 0x38	; 56
    51a4:	fd 4c       	sbci	r31, 0xCD	; 205
    51a6:	40 81       	ld	r20, Z
    51a8:	51 81       	ldd	r21, Z+1	; 0x01
    51aa:	8c 52       	subi	r24, 0x2C	; 44
    51ac:	91 4c       	sbci	r25, 0xC1	; 193
    51ae:	fc 01       	movw	r30, r24
    51b0:	80 81       	ld	r24, Z
    51b2:	91 81       	ldd	r25, Z+1	; 0x01
    51b4:	48 17       	cp	r20, r24
    51b6:	59 07       	cpc	r21, r25
    51b8:	78 f0       	brcs	.+30     	; 0x51d8 <uart_enqueue+0x44a>
		return (uart_head[idx] - uart_tail[idx]);
    51ba:	22 0f       	add	r18, r18
    51bc:	33 1f       	adc	r19, r19
    51be:	f9 01       	movw	r30, r18
    51c0:	e8 53       	subi	r30, 0x38	; 56
    51c2:	fd 4c       	sbci	r31, 0xCD	; 205
    51c4:	40 81       	ld	r20, Z
    51c6:	51 81       	ldd	r21, Z+1	; 0x01
    51c8:	2c 52       	subi	r18, 0x2C	; 44
    51ca:	31 4c       	sbci	r19, 0xC1	; 193
    51cc:	f9 01       	movw	r30, r18
    51ce:	80 81       	ld	r24, Z
    51d0:	91 81       	ldd	r25, Z+1	; 0x01
    51d2:	48 1b       	sub	r20, r24
    51d4:	59 0b       	sbc	r21, r25
    51d6:	10 c0       	rjmp	.+32     	; 0x51f8 <uart_enqueue+0x46a>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    51d8:	22 0f       	add	r18, r18
    51da:	33 1f       	adc	r19, r19
    51dc:	f9 01       	movw	r30, r18
    51de:	e8 53       	subi	r30, 0x38	; 56
    51e0:	fd 4c       	sbci	r31, 0xCD	; 205
    51e2:	40 81       	ld	r20, Z
    51e4:	51 81       	ldd	r21, Z+1	; 0x01
    51e6:	2c 52       	subi	r18, 0x2C	; 44
    51e8:	31 4c       	sbci	r19, 0xC1	; 193
    51ea:	f9 01       	movw	r30, r18
    51ec:	80 81       	ld	r24, Z
    51ee:	91 81       	ldd	r25, Z+1	; 0x01
    51f0:	40 50       	subi	r20, 0x00	; 0
    51f2:	5c 4f       	sbci	r21, 0xFC	; 252
    51f4:	48 1b       	sub	r20, r24
    51f6:	59 0b       	sbc	r21, r25
				port->DATA = toSend;
				break;
		}				
	}
	uart_txbuffer_disable(port); //implemented this way to prevent periodic stalls that happen when uart_txbuffer isn't disabled quickly enough
	if ((uart_count(port)>0) && (lcd_flow_control == LCD_READY)){ //...something is waiting to go out
    51f8:	41 15       	cp	r20, r1
    51fa:	51 05       	cpc	r21, r1
    51fc:	09 f4       	brne	.+2      	; 0x5200 <uart_enqueue+0x472>
    51fe:	ef c0       	rjmp	.+478    	; 0x53de <uart_enqueue+0x650>
    5200:	80 91 b0 26 	lds	r24, 0x26B0
    5204:	82 35       	cpi	r24, 0x52	; 82
    5206:	09 f0       	breq	.+2      	; 0x520a <uart_enqueue+0x47c>
    5208:	ea c0       	rjmp	.+468    	; 0x53de <uart_enqueue+0x650>
		uart_txbuffer_enable(port);	
    520a:	c6 01       	movw	r24, r12
    520c:	0e 94 5f 19 	call	0x32be	; 0x32be <uart_txbuffer_enable>
    5210:	e6 c0       	rjmp	.+460    	; 0x53de <uart_enqueue+0x650>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    5212:	f0 eb       	ldi	r31, 0xB0	; 176
    5214:	cf 16       	cp	r12, r31
    5216:	fb e0       	ldi	r31, 0x0B	; 11
    5218:	df 06       	cpc	r13, r31
    521a:	61 f0       	breq	.+24     	; 0x5234 <uart_enqueue+0x4a6>
	if (port == &uctrl) {return 1;}
    521c:	20 ea       	ldi	r18, 0xA0	; 160
    521e:	c2 16       	cp	r12, r18
    5220:	28 e0       	ldi	r18, 0x08	; 8
    5222:	d2 06       	cpc	r13, r18
    5224:	49 f0       	breq	.+18     	; 0x5238 <uart_enqueue+0x4aa>
	if (port == &udata) {return 2;}
    5226:	30 eb       	ldi	r19, 0xB0	; 176
    5228:	c3 16       	cp	r12, r19
    522a:	38 e0       	ldi	r19, 0x08	; 8
    522c:	d3 06       	cpc	r13, r19
    522e:	31 f4       	brne	.+12     	; 0x523c <uart_enqueue+0x4ae>
    5230:	22 e0       	ldi	r18, 0x02	; 2
    5232:	05 c0       	rjmp	.+10     	; 0x523e <uart_enqueue+0x4b0>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    5234:	20 e0       	ldi	r18, 0x00	; 0
    5236:	03 c0       	rjmp	.+6      	; 0x523e <uart_enqueue+0x4b0>
	if (port == &uctrl) {return 1;}
    5238:	21 e0       	ldi	r18, 0x01	; 1
    523a:	01 c0       	rjmp	.+2      	; 0x523e <uart_enqueue+0x4b0>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    523c:	20 e0       	ldi	r18, 0x00	; 0
}

inline uint8_t uart_dequeue(USART_t* port){
	uint8_t idx = port_map(port);
	uint16_t oldtail;
	oldtail = uart_tail[idx];
    523e:	30 e0       	ldi	r19, 0x00	; 0
    5240:	c9 01       	movw	r24, r18
    5242:	88 0f       	add	r24, r24
    5244:	99 1f       	adc	r25, r25
    5246:	fb 01       	movw	r30, r22
    5248:	e8 0f       	add	r30, r24
    524a:	f9 1f       	adc	r31, r25
    524c:	40 81       	ld	r20, Z
    524e:	51 81       	ldd	r21, Z+1	; 0x01
	uart_tail[idx]++;
    5250:	80 81       	ld	r24, Z
    5252:	91 81       	ldd	r25, Z+1	; 0x01
    5254:	01 96       	adiw	r24, 0x01	; 1
    5256:	80 83       	st	Z, r24
    5258:	91 83       	std	Z+1, r25	; 0x01
	if (uart_tail[idx] >= MAX_BUFFER_LEN){
    525a:	80 81       	ld	r24, Z
    525c:	91 81       	ldd	r25, Z+1	; 0x01
    525e:	e4 e0       	ldi	r30, 0x04	; 4
    5260:	80 30       	cpi	r24, 0x00	; 0
    5262:	9e 07       	cpc	r25, r30
    5264:	40 f0       	brcs	.+16     	; 0x5276 <uart_enqueue+0x4e8>
		uart_tail[idx] = 0;
    5266:	c9 01       	movw	r24, r18
    5268:	88 0f       	add	r24, r24
    526a:	99 1f       	adc	r25, r25
    526c:	86 0f       	add	r24, r22
    526e:	97 1f       	adc	r25, r23
    5270:	fc 01       	movw	r30, r24
    5272:	10 82       	st	Z, r1
    5274:	11 82       	std	Z+1, r1	; 0x01
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    5276:	c9 01       	movw	r24, r18
    5278:	98 2f       	mov	r25, r24
    527a:	88 27       	eor	r24, r24
    527c:	99 0f       	add	r25, r25
    527e:	99 0f       	add	r25, r25
    5280:	84 0f       	add	r24, r20
    5282:	95 1f       	adc	r25, r21
    5284:	fe 01       	movw	r30, r28
    5286:	e8 0f       	add	r30, r24
    5288:	f9 1f       	adc	r31, r25
    528a:	80 81       	ld	r24, Z
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
    528c:	f6 01       	movw	r30, r12
    528e:	80 83       	st	Z, r24
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    5290:	81 81       	ldd	r24, Z+1	; 0x01
    5292:	85 fd       	sbrc	r24, 5
    5294:	07 c0       	rjmp	.+14     	; 0x52a4 <uart_enqueue+0x516>
    5296:	53 c0       	rjmp	.+166    	; 0x533e <uart_enqueue+0x5b0>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    5298:	a8 ec       	ldi	r26, 0xC8	; 200
    529a:	b2 e3       	ldi	r27, 0x32	; 50
    529c:	64 ed       	ldi	r22, 0xD4	; 212
    529e:	7e e3       	ldi	r23, 0x3E	; 62
		uart_tail[idx] = 0;
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    52a0:	ce ec       	ldi	r28, 0xCE	; 206
    52a2:	d2 e3       	ldi	r29, 0x32	; 50
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    52a4:	f0 eb       	ldi	r31, 0xB0	; 176
    52a6:	cf 16       	cp	r12, r31
    52a8:	fb e0       	ldi	r31, 0x0B	; 11
    52aa:	df 06       	cpc	r13, r31
    52ac:	61 f0       	breq	.+24     	; 0x52c6 <uart_enqueue+0x538>
	if (port == &uctrl) {return 1;}
    52ae:	20 ea       	ldi	r18, 0xA0	; 160
    52b0:	c2 16       	cp	r12, r18
    52b2:	28 e0       	ldi	r18, 0x08	; 8
    52b4:	d2 06       	cpc	r13, r18
    52b6:	49 f0       	breq	.+18     	; 0x52ca <uart_enqueue+0x53c>
	if (port == &udata) {return 2;}
    52b8:	30 eb       	ldi	r19, 0xB0	; 176
    52ba:	c3 16       	cp	r12, r19
    52bc:	38 e0       	ldi	r19, 0x08	; 8
    52be:	d3 06       	cpc	r13, r19
    52c0:	31 f4       	brne	.+12     	; 0x52ce <uart_enqueue+0x540>
    52c2:	22 e0       	ldi	r18, 0x02	; 2
    52c4:	05 c0       	rjmp	.+10     	; 0x52d0 <uart_enqueue+0x542>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    52c6:	20 e0       	ldi	r18, 0x00	; 0
    52c8:	03 c0       	rjmp	.+6      	; 0x52d0 <uart_enqueue+0x542>
	if (port == &uctrl) {return 1;}
    52ca:	21 e0       	ldi	r18, 0x01	; 1
    52cc:	01 c0       	rjmp	.+2      	; 0x52d0 <uart_enqueue+0x542>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    52ce:	20 e0       	ldi	r18, 0x00	; 0
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    52d0:	30 e0       	ldi	r19, 0x00	; 0
    52d2:	c9 01       	movw	r24, r18
    52d4:	88 0f       	add	r24, r24
    52d6:	99 1f       	adc	r25, r25
    52d8:	fd 01       	movw	r30, r26
    52da:	e8 0f       	add	r30, r24
    52dc:	f9 1f       	adc	r31, r25
    52de:	40 81       	ld	r20, Z
    52e0:	51 81       	ldd	r21, Z+1	; 0x01
    52e2:	fb 01       	movw	r30, r22
    52e4:	e8 0f       	add	r30, r24
    52e6:	f9 1f       	adc	r31, r25
    52e8:	80 81       	ld	r24, Z
    52ea:	91 81       	ldd	r25, Z+1	; 0x01
    52ec:	48 17       	cp	r20, r24
    52ee:	59 07       	cpc	r21, r25
    52f0:	88 f0       	brcs	.+34     	; 0x5314 <uart_enqueue+0x586>
		return (uart_head[idx] - uart_tail[idx]);
    52f2:	22 0f       	add	r18, r18
    52f4:	33 1f       	adc	r19, r19
    52f6:	fd 01       	movw	r30, r26
    52f8:	e2 0f       	add	r30, r18
    52fa:	f3 1f       	adc	r31, r19
    52fc:	40 81       	ld	r20, Z
    52fe:	51 81       	ldd	r21, Z+1	; 0x01
    5300:	fb 01       	movw	r30, r22
    5302:	e2 0f       	add	r30, r18
    5304:	f3 1f       	adc	r31, r19
    5306:	80 81       	ld	r24, Z
    5308:	91 81       	ldd	r25, Z+1	; 0x01
    530a:	fa 01       	movw	r30, r20
    530c:	e8 1b       	sub	r30, r24
    530e:	f9 0b       	sbc	r31, r25
    5310:	cf 01       	movw	r24, r30
    5312:	12 c0       	rjmp	.+36     	; 0x5338 <uart_enqueue+0x5aa>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    5314:	c9 01       	movw	r24, r18
    5316:	88 0f       	add	r24, r24
    5318:	99 1f       	adc	r25, r25
    531a:	fd 01       	movw	r30, r26
    531c:	e8 0f       	add	r30, r24
    531e:	f9 1f       	adc	r31, r25
    5320:	40 81       	ld	r20, Z
    5322:	51 81       	ldd	r21, Z+1	; 0x01
    5324:	fb 01       	movw	r30, r22
    5326:	e8 0f       	add	r30, r24
    5328:	f9 1f       	adc	r31, r25
    532a:	20 81       	ld	r18, Z
    532c:	31 81       	ldd	r19, Z+1	; 0x01
    532e:	ca 01       	movw	r24, r20
    5330:	80 50       	subi	r24, 0x00	; 0
    5332:	9c 4f       	sbci	r25, 0xFC	; 252
    5334:	82 1b       	sub	r24, r18
    5336:	93 0b       	sbc	r25, r19
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    5338:	00 97       	sbiw	r24, 0x00	; 0
    533a:	09 f0       	breq	.+2      	; 0x533e <uart_enqueue+0x5b0>
    533c:	6a cf       	rjmp	.-300    	; 0x5212 <uart_enqueue+0x484>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    533e:	f0 eb       	ldi	r31, 0xB0	; 176
    5340:	cf 16       	cp	r12, r31
    5342:	fb e0       	ldi	r31, 0x0B	; 11
    5344:	df 06       	cpc	r13, r31
    5346:	61 f0       	breq	.+24     	; 0x5360 <uart_enqueue+0x5d2>
	if (port == &uctrl) {return 1;}
    5348:	20 ea       	ldi	r18, 0xA0	; 160
    534a:	c2 16       	cp	r12, r18
    534c:	28 e0       	ldi	r18, 0x08	; 8
    534e:	d2 06       	cpc	r13, r18
    5350:	49 f0       	breq	.+18     	; 0x5364 <uart_enqueue+0x5d6>
	if (port == &udata) {return 2;}
    5352:	30 eb       	ldi	r19, 0xB0	; 176
    5354:	c3 16       	cp	r12, r19
    5356:	38 e0       	ldi	r19, 0x08	; 8
    5358:	d3 06       	cpc	r13, r19
    535a:	31 f4       	brne	.+12     	; 0x5368 <uart_enqueue+0x5da>
    535c:	22 e0       	ldi	r18, 0x02	; 2
    535e:	05 c0       	rjmp	.+10     	; 0x536a <uart_enqueue+0x5dc>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    5360:	20 e0       	ldi	r18, 0x00	; 0
    5362:	03 c0       	rjmp	.+6      	; 0x536a <uart_enqueue+0x5dc>
	if (port == &uctrl) {return 1;}
    5364:	21 e0       	ldi	r18, 0x01	; 1
    5366:	01 c0       	rjmp	.+2      	; 0x536a <uart_enqueue+0x5dc>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    5368:	20 e0       	ldi	r18, 0x00	; 0
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    536a:	30 e0       	ldi	r19, 0x00	; 0
    536c:	c9 01       	movw	r24, r18
    536e:	88 0f       	add	r24, r24
    5370:	99 1f       	adc	r25, r25
    5372:	fc 01       	movw	r30, r24
    5374:	e8 53       	subi	r30, 0x38	; 56
    5376:	fd 4c       	sbci	r31, 0xCD	; 205
    5378:	40 81       	ld	r20, Z
    537a:	51 81       	ldd	r21, Z+1	; 0x01
    537c:	8c 52       	subi	r24, 0x2C	; 44
    537e:	91 4c       	sbci	r25, 0xC1	; 193
    5380:	fc 01       	movw	r30, r24
    5382:	80 81       	ld	r24, Z
    5384:	91 81       	ldd	r25, Z+1	; 0x01
    5386:	48 17       	cp	r20, r24
    5388:	59 07       	cpc	r21, r25
    538a:	78 f0       	brcs	.+30     	; 0x53aa <uart_enqueue+0x61c>
		return (uart_head[idx] - uart_tail[idx]);
    538c:	22 0f       	add	r18, r18
    538e:	33 1f       	adc	r19, r19
    5390:	f9 01       	movw	r30, r18
    5392:	e8 53       	subi	r30, 0x38	; 56
    5394:	fd 4c       	sbci	r31, 0xCD	; 205
    5396:	40 81       	ld	r20, Z
    5398:	51 81       	ldd	r21, Z+1	; 0x01
    539a:	2c 52       	subi	r18, 0x2C	; 44
    539c:	31 4c       	sbci	r19, 0xC1	; 193
    539e:	f9 01       	movw	r30, r18
    53a0:	80 81       	ld	r24, Z
    53a2:	91 81       	ldd	r25, Z+1	; 0x01
    53a4:	48 1b       	sub	r20, r24
    53a6:	59 0b       	sbc	r21, r25
    53a8:	10 c0       	rjmp	.+32     	; 0x53ca <uart_enqueue+0x63c>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    53aa:	22 0f       	add	r18, r18
    53ac:	33 1f       	adc	r19, r19
    53ae:	f9 01       	movw	r30, r18
    53b0:	e8 53       	subi	r30, 0x38	; 56
    53b2:	fd 4c       	sbci	r31, 0xCD	; 205
    53b4:	40 81       	ld	r20, Z
    53b6:	51 81       	ldd	r21, Z+1	; 0x01
    53b8:	2c 52       	subi	r18, 0x2C	; 44
    53ba:	31 4c       	sbci	r19, 0xC1	; 193
    53bc:	f9 01       	movw	r30, r18
    53be:	80 81       	ld	r24, Z
    53c0:	91 81       	ldd	r25, Z+1	; 0x01
    53c2:	40 50       	subi	r20, 0x00	; 0
    53c4:	5c 4f       	sbci	r21, 0xFC	; 252
    53c6:	48 1b       	sub	r20, r24
    53c8:	59 0b       	sbc	r21, r25
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
	}
	//disable the tx outgoing hardware buffer ready interrupt if we have nothing more to put in it.
	if(uart_count(port)>0) uart_txbuffer_enable(port);
    53ca:	41 15       	cp	r20, r1
    53cc:	51 05       	cpc	r21, r1
    53ce:	21 f0       	breq	.+8      	; 0x53d8 <uart_enqueue+0x64a>
    53d0:	c6 01       	movw	r24, r12
    53d2:	0e 94 5f 19 	call	0x32be	; 0x32be <uart_txbuffer_enable>
    53d6:	03 c0       	rjmp	.+6      	; 0x53de <uart_enqueue+0x650>
	else uart_txbuffer_disable(port);
    53d8:	c6 01       	movw	r24, r12
    53da:	0e 94 64 19 	call	0x32c8	; 0x32c8 <uart_txbuffer_disable>
	}
	if (idx == 0){uart_transmit_lcd(port);} //start the transmission process.
	else {uart_transmit(port);} //start the transmission process.}	
	
#endif
}
    53de:	df 91       	pop	r29
    53e0:	cf 91       	pop	r28
    53e2:	1f 91       	pop	r17
    53e4:	0f 91       	pop	r16
    53e6:	ff 90       	pop	r15
    53e8:	ef 90       	pop	r14
    53ea:	df 90       	pop	r13
    53ec:	cf 90       	pop	r12
    53ee:	bf 90       	pop	r11
    53f0:	af 90       	pop	r10
    53f2:	9f 90       	pop	r9
    53f4:	8f 90       	pop	r8
    53f6:	7f 90       	pop	r7
    53f8:	6f 90       	pop	r6
    53fa:	5f 90       	pop	r5
    53fc:	4f 90       	pop	r4
    53fe:	3f 90       	pop	r3
    5400:	08 95       	ret

00005402 <uart_dequeue>:
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    5402:	2b e0       	ldi	r18, 0x0B	; 11
    5404:	80 3b       	cpi	r24, 0xB0	; 176
    5406:	92 07       	cpc	r25, r18
    5408:	51 f0       	breq	.+20     	; 0x541e <uart_dequeue+0x1c>
	if (port == &uctrl) {return 1;}
    540a:	68 e0       	ldi	r22, 0x08	; 8
    540c:	80 3a       	cpi	r24, 0xA0	; 160
    540e:	96 07       	cpc	r25, r22
    5410:	41 f0       	breq	.+16     	; 0x5422 <uart_dequeue+0x20>
	if (port == &udata) {return 2;}
    5412:	28 e0       	ldi	r18, 0x08	; 8
    5414:	80 3b       	cpi	r24, 0xB0	; 176
    5416:	92 07       	cpc	r25, r18
    5418:	31 f4       	brne	.+12     	; 0x5426 <uart_dequeue+0x24>
    541a:	22 e0       	ldi	r18, 0x02	; 2
    541c:	05 c0       	rjmp	.+10     	; 0x5428 <uart_dequeue+0x26>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    541e:	20 e0       	ldi	r18, 0x00	; 0
    5420:	03 c0       	rjmp	.+6      	; 0x5428 <uart_dequeue+0x26>
	if (port == &uctrl) {return 1;}
    5422:	21 e0       	ldi	r18, 0x01	; 1
    5424:	01 c0       	rjmp	.+2      	; 0x5428 <uart_dequeue+0x26>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    5426:	20 e0       	ldi	r18, 0x00	; 0
}

inline uint8_t uart_dequeue(USART_t* port){
	uint8_t idx = port_map(port);
	uint16_t oldtail;
	oldtail = uart_tail[idx];
    5428:	30 e0       	ldi	r19, 0x00	; 0
    542a:	f9 01       	movw	r30, r18
    542c:	ee 0f       	add	r30, r30
    542e:	ff 1f       	adc	r31, r31
    5430:	ec 52       	subi	r30, 0x2C	; 44
    5432:	f1 4c       	sbci	r31, 0xC1	; 193
    5434:	40 81       	ld	r20, Z
    5436:	51 81       	ldd	r21, Z+1	; 0x01
	uart_tail[idx]++;
    5438:	80 81       	ld	r24, Z
    543a:	91 81       	ldd	r25, Z+1	; 0x01
    543c:	01 96       	adiw	r24, 0x01	; 1
    543e:	80 83       	st	Z, r24
    5440:	91 83       	std	Z+1, r25	; 0x01
	if (uart_tail[idx] >= MAX_BUFFER_LEN){
    5442:	80 81       	ld	r24, Z
    5444:	91 81       	ldd	r25, Z+1	; 0x01
    5446:	64 e0       	ldi	r22, 0x04	; 4
    5448:	80 30       	cpi	r24, 0x00	; 0
    544a:	96 07       	cpc	r25, r22
    544c:	38 f0       	brcs	.+14     	; 0x545c <uart_dequeue+0x5a>
		uart_tail[idx] = 0;
    544e:	f9 01       	movw	r30, r18
    5450:	ee 0f       	add	r30, r30
    5452:	ff 1f       	adc	r31, r31
    5454:	ec 52       	subi	r30, 0x2C	; 44
    5456:	f1 4c       	sbci	r31, 0xC1	; 193
    5458:	10 82       	st	Z, r1
    545a:	11 82       	std	Z+1, r1	; 0x01
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    545c:	f9 01       	movw	r30, r18
    545e:	fe 2f       	mov	r31, r30
    5460:	ee 27       	eor	r30, r30
    5462:	ff 0f       	add	r31, r31
    5464:	ff 0f       	add	r31, r31
    5466:	4e 0f       	add	r20, r30
    5468:	5f 1f       	adc	r21, r31
    546a:	fa 01       	movw	r30, r20
    546c:	e2 53       	subi	r30, 0x32	; 50
    546e:	fd 4c       	sbci	r31, 0xCD	; 205
    5470:	80 81       	ld	r24, Z
}
    5472:	08 95       	ret

00005474 <init_uart_ibuffer>:
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    5474:	2b e0       	ldi	r18, 0x0B	; 11
    5476:	80 3b       	cpi	r24, 0xB0	; 176
    5478:	92 07       	cpc	r25, r18
    547a:	51 f0       	breq	.+20     	; 0x5490 <init_uart_ibuffer+0x1c>
	if (port == &uctrl) {return 1;}
    547c:	e8 e0       	ldi	r30, 0x08	; 8
    547e:	80 3a       	cpi	r24, 0xA0	; 160
    5480:	9e 07       	cpc	r25, r30
    5482:	41 f0       	breq	.+16     	; 0x5494 <init_uart_ibuffer+0x20>
	if (port == &udata) {return 2;}
    5484:	f8 e0       	ldi	r31, 0x08	; 8
    5486:	80 3b       	cpi	r24, 0xB0	; 176
    5488:	9f 07       	cpc	r25, r31
    548a:	31 f4       	brne	.+12     	; 0x5498 <init_uart_ibuffer+0x24>
    548c:	82 e0       	ldi	r24, 0x02	; 2
    548e:	05 c0       	rjmp	.+10     	; 0x549a <init_uart_ibuffer+0x26>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    5490:	80 e0       	ldi	r24, 0x00	; 0
    5492:	03 c0       	rjmp	.+6      	; 0x549a <init_uart_ibuffer+0x26>
	if (port == &uctrl) {return 1;}
    5494:	81 e0       	ldi	r24, 0x01	; 1
    5496:	01 c0       	rjmp	.+2      	; 0x549a <init_uart_ibuffer+0x26>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    5498:	80 e0       	ldi	r24, 0x00	; 0
	No protection is provided for buffer overflow! Be careful! */
//***************************************************

void init_uart_ibuffer(USART_t* port){
	uint8_t idx = port_map(port);
	uart_ihead[idx] = 0;
    549a:	90 e0       	ldi	r25, 0x00	; 0
    549c:	88 0f       	add	r24, r24
    549e:	99 1f       	adc	r25, r25
    54a0:	fc 01       	movw	r30, r24
    54a2:	e2 53       	subi	r30, 0x32	; 50
    54a4:	f1 4c       	sbci	r31, 0xC1	; 193
    54a6:	10 82       	st	Z, r1
    54a8:	11 82       	std	Z+1, r1	; 0x01
	uart_itail[idx] = 0;
    54aa:	8e 53       	subi	r24, 0x3E	; 62
    54ac:	99 4d       	sbci	r25, 0xD9	; 217
    54ae:	fc 01       	movw	r30, r24
    54b0:	10 82       	st	Z, r1
    54b2:	11 82       	std	Z+1, r1	; 0x01
}
    54b4:	08 95       	ret

000054b6 <init_uart_buffer>:
//** [PORT AGNOSTIC CODE]
//************************************************************************
//************************************************************************

//MAKE SURE TO INIT UART FIRST
void init_uart_buffer(USART_t* port){
    54b6:	cf 93       	push	r28
    54b8:	df 93       	push	r29
    54ba:	ec 01       	movw	r28, r24
	//Setup data buffers
		init_uart_obuffer(port);
    54bc:	0e 94 d8 22 	call	0x45b0	; 0x45b0 <init_uart_obuffer>
		init_uart_ibuffer(port);
    54c0:	ce 01       	movw	r24, r28
    54c2:	0e 94 3a 2a 	call	0x5474	; 0x5474 <init_uart_ibuffer>
	//Enable Receive and Transmit interrupts
		uart_rxbuffer_enable(port);
    54c6:	ce 01       	movw	r24, r28
    54c8:	0e 94 55 19 	call	0x32aa	; 0x32aa <uart_rxbuffer_enable>
		uart_txbuffer_enable(port);
    54cc:	ce 01       	movw	r24, r28
    54ce:	0e 94 5f 19 	call	0x32be	; 0x32be <uart_txbuffer_enable>
}
    54d2:	df 91       	pop	r29
    54d4:	cf 91       	pop	r28
    54d6:	08 95       	ret

000054d8 <init_uart_buffers>:
ISR(USARTF1_DRE_vect) {uart_transmit_lcd(&ulcd);}//TX Interrupt
ISR(USARTF1_RXC_vect) {uart_receive_lcd(&ulcd);} //RX Interrupt
	
//MAKE SURE TO INIT UART FIRST
void init_uart_buffers(){
	init_uart_buffer(&uctrl);
    54d8:	80 ea       	ldi	r24, 0xA0	; 160
    54da:	98 e0       	ldi	r25, 0x08	; 8
    54dc:	0e 94 5b 2a 	call	0x54b6	; 0x54b6 <init_uart_buffer>
	init_uart_buffer(&udata);
    54e0:	80 eb       	ldi	r24, 0xB0	; 176
    54e2:	98 e0       	ldi	r25, 0x08	; 8
    54e4:	0e 94 5b 2a 	call	0x54b6	; 0x54b6 <init_uart_buffer>
	init_uart_buffer(&ulcd);
    54e8:	80 eb       	ldi	r24, 0xB0	; 176
    54ea:	9b e0       	ldi	r25, 0x0B	; 11
    54ec:	0e 94 5b 2a 	call	0x54b6	; 0x54b6 <init_uart_buffer>
}	
    54f0:	08 95       	ret

000054f2 <uart_icount>:
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    54f2:	2b e0       	ldi	r18, 0x0B	; 11
    54f4:	80 3b       	cpi	r24, 0xB0	; 176
    54f6:	92 07       	cpc	r25, r18
    54f8:	51 f0       	breq	.+20     	; 0x550e <uart_icount+0x1c>
	if (port == &uctrl) {return 1;}
    54fa:	e8 e0       	ldi	r30, 0x08	; 8
    54fc:	80 3a       	cpi	r24, 0xA0	; 160
    54fe:	9e 07       	cpc	r25, r30
    5500:	41 f0       	breq	.+16     	; 0x5512 <uart_icount+0x20>
	if (port == &udata) {return 2;}
    5502:	f8 e0       	ldi	r31, 0x08	; 8
    5504:	80 3b       	cpi	r24, 0xB0	; 176
    5506:	9f 07       	cpc	r25, r31
    5508:	31 f4       	brne	.+12     	; 0x5516 <uart_icount+0x24>
    550a:	82 e0       	ldi	r24, 0x02	; 2
    550c:	05 c0       	rjmp	.+10     	; 0x5518 <uart_icount+0x26>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    550e:	80 e0       	ldi	r24, 0x00	; 0
    5510:	03 c0       	rjmp	.+6      	; 0x5518 <uart_icount+0x26>
	if (port == &uctrl) {return 1;}
    5512:	81 e0       	ldi	r24, 0x01	; 1
    5514:	01 c0       	rjmp	.+2      	; 0x5518 <uart_icount+0x26>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    5516:	80 e0       	ldi	r24, 0x00	; 0
	uart_itail[idx] = 0;
}

inline uint16_t uart_icount(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_ihead[idx] >= uart_itail[idx]){	
    5518:	90 e0       	ldi	r25, 0x00	; 0
    551a:	9c 01       	movw	r18, r24
    551c:	22 0f       	add	r18, r18
    551e:	33 1f       	adc	r19, r19
    5520:	f9 01       	movw	r30, r18
    5522:	e2 53       	subi	r30, 0x32	; 50
    5524:	f1 4c       	sbci	r31, 0xC1	; 193
    5526:	40 81       	ld	r20, Z
    5528:	51 81       	ldd	r21, Z+1	; 0x01
    552a:	2e 53       	subi	r18, 0x3E	; 62
    552c:	39 4d       	sbci	r19, 0xD9	; 217
    552e:	f9 01       	movw	r30, r18
    5530:	20 81       	ld	r18, Z
    5532:	31 81       	ldd	r19, Z+1	; 0x01
    5534:	42 17       	cp	r20, r18
    5536:	53 07       	cpc	r21, r19
    5538:	80 f0       	brcs	.+32     	; 0x555a <uart_icount+0x68>
		return (uart_ihead[idx] - uart_itail[idx]);
    553a:	9c 01       	movw	r18, r24
    553c:	22 0f       	add	r18, r18
    553e:	33 1f       	adc	r19, r19
    5540:	f9 01       	movw	r30, r18
    5542:	e2 53       	subi	r30, 0x32	; 50
    5544:	f1 4c       	sbci	r31, 0xC1	; 193
    5546:	80 81       	ld	r24, Z
    5548:	91 81       	ldd	r25, Z+1	; 0x01
    554a:	2e 53       	subi	r18, 0x3E	; 62
    554c:	39 4d       	sbci	r19, 0xD9	; 217
    554e:	f9 01       	movw	r30, r18
    5550:	20 81       	ld	r18, Z
    5552:	31 81       	ldd	r19, Z+1	; 0x01
    5554:	82 1b       	sub	r24, r18
    5556:	93 0b       	sbc	r25, r19
    5558:	08 95       	ret
	}
	else {
		return ((MAX_IBUFFER_LEN-uart_itail[idx])+uart_ihead[idx]);
    555a:	9c 01       	movw	r18, r24
    555c:	22 0f       	add	r18, r18
    555e:	33 1f       	adc	r19, r19
    5560:	f9 01       	movw	r30, r18
    5562:	e2 53       	subi	r30, 0x32	; 50
    5564:	f1 4c       	sbci	r31, 0xC1	; 193
    5566:	40 81       	ld	r20, Z
    5568:	51 81       	ldd	r21, Z+1	; 0x01
    556a:	2e 53       	subi	r18, 0x3E	; 62
    556c:	39 4d       	sbci	r19, 0xD9	; 217
    556e:	f9 01       	movw	r30, r18
    5570:	20 81       	ld	r18, Z
    5572:	31 81       	ldd	r19, Z+1	; 0x01
    5574:	ca 01       	movw	r24, r20
    5576:	80 50       	subi	r24, 0x00	; 0
    5578:	9c 4f       	sbci	r25, 0xFC	; 252
    557a:	82 1b       	sub	r24, r18
    557c:	93 0b       	sbc	r25, r19
	}
}
    557e:	08 95       	ret

00005580 <uart_ienqueue>:
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    5580:	2b e0       	ldi	r18, 0x0B	; 11
    5582:	80 3b       	cpi	r24, 0xB0	; 176
    5584:	92 07       	cpc	r25, r18
    5586:	51 f0       	breq	.+20     	; 0x559c <uart_ienqueue+0x1c>
	if (port == &uctrl) {return 1;}
    5588:	28 e0       	ldi	r18, 0x08	; 8
    558a:	80 3a       	cpi	r24, 0xA0	; 160
    558c:	92 07       	cpc	r25, r18
    558e:	41 f0       	breq	.+16     	; 0x55a0 <uart_ienqueue+0x20>
	if (port == &udata) {return 2;}
    5590:	28 e0       	ldi	r18, 0x08	; 8
    5592:	80 3b       	cpi	r24, 0xB0	; 176
    5594:	92 07       	cpc	r25, r18
    5596:	31 f4       	brne	.+12     	; 0x55a4 <uart_ienqueue+0x24>
    5598:	42 e0       	ldi	r20, 0x02	; 2
    559a:	05 c0       	rjmp	.+10     	; 0x55a6 <uart_ienqueue+0x26>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    559c:	40 e0       	ldi	r20, 0x00	; 0
    559e:	03 c0       	rjmp	.+6      	; 0x55a6 <uart_ienqueue+0x26>
	if (port == &uctrl) {return 1;}
    55a0:	41 e0       	ldi	r20, 0x01	; 1
    55a2:	01 c0       	rjmp	.+2      	; 0x55a6 <uart_ienqueue+0x26>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    55a4:	40 e0       	ldi	r20, 0x00	; 0
	}
}

inline void uart_ienqueue(USART_t* port, uint8_t datain){
	uint8_t idx = port_map(port);
	uart_ibuffer[idx][uart_ihead[idx]] = datain;
    55a6:	50 e0       	ldi	r21, 0x00	; 0
    55a8:	fa 01       	movw	r30, r20
    55aa:	ee 0f       	add	r30, r30
    55ac:	ff 1f       	adc	r31, r31
    55ae:	e2 53       	subi	r30, 0x32	; 50
    55b0:	f1 4c       	sbci	r31, 0xC1	; 193
    55b2:	80 81       	ld	r24, Z
    55b4:	91 81       	ldd	r25, Z+1	; 0x01
    55b6:	9a 01       	movw	r18, r20
    55b8:	32 2f       	mov	r19, r18
    55ba:	22 27       	eor	r18, r18
    55bc:	33 0f       	add	r19, r19
    55be:	33 0f       	add	r19, r19
    55c0:	82 0f       	add	r24, r18
    55c2:	93 1f       	adc	r25, r19
    55c4:	dc 01       	movw	r26, r24
    55c6:	a8 53       	subi	r26, 0x38	; 56
    55c8:	b9 4d       	sbci	r27, 0xD9	; 217
    55ca:	6c 93       	st	X, r22
	uart_ihead[idx]++;
    55cc:	80 81       	ld	r24, Z
    55ce:	91 81       	ldd	r25, Z+1	; 0x01
    55d0:	01 96       	adiw	r24, 0x01	; 1
    55d2:	80 83       	st	Z, r24
    55d4:	91 83       	std	Z+1, r25	; 0x01
	if (uart_ihead[idx] >= MAX_IBUFFER_LEN){
    55d6:	80 81       	ld	r24, Z
    55d8:	91 81       	ldd	r25, Z+1	; 0x01
    55da:	24 e0       	ldi	r18, 0x04	; 4
    55dc:	80 30       	cpi	r24, 0x00	; 0
    55de:	92 07       	cpc	r25, r18
    55e0:	38 f0       	brcs	.+14     	; 0x55f0 <uart_ienqueue+0x70>
		uart_ihead[idx] = 0;
    55e2:	fa 01       	movw	r30, r20
    55e4:	ee 0f       	add	r30, r30
    55e6:	ff 1f       	adc	r31, r31
    55e8:	e2 53       	subi	r30, 0x32	; 50
    55ea:	f1 4c       	sbci	r31, 0xC1	; 193
    55ec:	10 82       	st	Z, r1
    55ee:	11 82       	std	Z+1, r1	; 0x01
    55f0:	08 95       	ret

000055f2 <uart_idequeue>:
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    55f2:	2b e0       	ldi	r18, 0x0B	; 11
    55f4:	80 3b       	cpi	r24, 0xB0	; 176
    55f6:	92 07       	cpc	r25, r18
    55f8:	51 f0       	breq	.+20     	; 0x560e <uart_idequeue+0x1c>
	if (port == &uctrl) {return 1;}
    55fa:	68 e0       	ldi	r22, 0x08	; 8
    55fc:	80 3a       	cpi	r24, 0xA0	; 160
    55fe:	96 07       	cpc	r25, r22
    5600:	41 f0       	breq	.+16     	; 0x5612 <uart_idequeue+0x20>
	if (port == &udata) {return 2;}
    5602:	28 e0       	ldi	r18, 0x08	; 8
    5604:	80 3b       	cpi	r24, 0xB0	; 176
    5606:	92 07       	cpc	r25, r18
    5608:	31 f4       	brne	.+12     	; 0x5616 <uart_idequeue+0x24>
    560a:	22 e0       	ldi	r18, 0x02	; 2
    560c:	05 c0       	rjmp	.+10     	; 0x5618 <uart_idequeue+0x26>
volatile uint8_t uart_ibuffer[NUM_PORTS_TO_BUFFER][MAX_IBUFFER_LEN];
volatile uint16_t uart_ihead[NUM_PORTS_TO_BUFFER];
volatile uint16_t uart_itail[NUM_PORTS_TO_BUFFER];

inline uint8_t port_map(USART_t* port){
	if (port == &ulcd)  {return 0;}
    560e:	20 e0       	ldi	r18, 0x00	; 0
    5610:	03 c0       	rjmp	.+6      	; 0x5618 <uart_idequeue+0x26>
	if (port == &uctrl) {return 1;}
    5612:	21 e0       	ldi	r18, 0x01	; 1
    5614:	01 c0       	rjmp	.+2      	; 0x5618 <uart_idequeue+0x26>
	if (port == &udata) {return 2;}
	return 0; //should never reach here!
    5616:	20 e0       	ldi	r18, 0x00	; 0

//internal implementation of peek and dequeue
inline uint8_t _uart_idequeue(USART_t* port, uint8_t peek){
	uint8_t idx = port_map(port);
	uint16_t oldtail;
	oldtail = uart_itail[idx];
    5618:	30 e0       	ldi	r19, 0x00	; 0
    561a:	f9 01       	movw	r30, r18
    561c:	ee 0f       	add	r30, r30
    561e:	ff 1f       	adc	r31, r31
    5620:	ee 53       	subi	r30, 0x3E	; 62
    5622:	f9 4d       	sbci	r31, 0xD9	; 217
    5624:	40 81       	ld	r20, Z
    5626:	51 81       	ldd	r21, Z+1	; 0x01
	uart_itail[idx]++;
    5628:	80 81       	ld	r24, Z
    562a:	91 81       	ldd	r25, Z+1	; 0x01
    562c:	01 96       	adiw	r24, 0x01	; 1
    562e:	80 83       	st	Z, r24
    5630:	91 83       	std	Z+1, r25	; 0x01
	if (uart_itail[idx] >= MAX_IBUFFER_LEN){
    5632:	80 81       	ld	r24, Z
    5634:	91 81       	ldd	r25, Z+1	; 0x01
    5636:	64 e0       	ldi	r22, 0x04	; 4
    5638:	80 30       	cpi	r24, 0x00	; 0
    563a:	96 07       	cpc	r25, r22
    563c:	38 f0       	brcs	.+14     	; 0x564c <uart_idequeue+0x5a>
		uart_itail[idx] = 0;
    563e:	f9 01       	movw	r30, r18
    5640:	ee 0f       	add	r30, r30
    5642:	ff 1f       	adc	r31, r31
    5644:	ee 53       	subi	r30, 0x3E	; 62
    5646:	f9 4d       	sbci	r31, 0xD9	; 217
    5648:	10 82       	st	Z, r1
    564a:	11 82       	std	Z+1, r1	; 0x01
	}
	if (peek){uart_itail[idx] = oldtail;}
	return uart_ibuffer[idx][oldtail];
    564c:	f9 01       	movw	r30, r18
    564e:	fe 2f       	mov	r31, r30
    5650:	ee 27       	eor	r30, r30
    5652:	ff 0f       	add	r31, r31
    5654:	ff 0f       	add	r31, r31
    5656:	4e 0f       	add	r20, r30
    5658:	5f 1f       	adc	r21, r31
    565a:	fa 01       	movw	r30, r20
    565c:	e8 53       	subi	r30, 0x38	; 56
    565e:	f9 4d       	sbci	r31, 0xD9	; 217
    5660:	80 81       	ld	r24, Z
}

inline uint8_t uart_idequeue(USART_t* port){
	return _uart_idequeue(port, false);
}
    5662:	08 95       	ret

00005664 <service_uart_buffer>:

inline void service_uart_buffer(){
    5664:	3f 92       	push	r3
    5666:	4f 92       	push	r4
    5668:	5f 92       	push	r5
    566a:	6f 92       	push	r6
    566c:	7f 92       	push	r7
    566e:	8f 92       	push	r8
    5670:	9f 92       	push	r9
    5672:	af 92       	push	r10
    5674:	bf 92       	push	r11
    5676:	cf 92       	push	r12
    5678:	df 92       	push	r13
    567a:	ef 92       	push	r14
    567c:	ff 92       	push	r15
    567e:	0f 93       	push	r16
    5680:	1f 93       	push	r17
    5682:	cf 93       	push	r28
    5684:	df 93       	push	r29
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    5686:	20 91 c8 32 	lds	r18, 0x32C8
    568a:	30 91 c9 32 	lds	r19, 0x32C9
    568e:	80 91 d4 3e 	lds	r24, 0x3ED4
    5692:	90 91 d5 3e 	lds	r25, 0x3ED5
    5696:	28 17       	cp	r18, r24
    5698:	39 07       	cpc	r19, r25
    569a:	58 f0       	brcs	.+22     	; 0x56b2 <service_uart_buffer+0x4e>
		return (uart_head[idx] - uart_tail[idx]);
    569c:	80 91 c8 32 	lds	r24, 0x32C8
    56a0:	90 91 c9 32 	lds	r25, 0x32C9
    56a4:	20 91 d4 3e 	lds	r18, 0x3ED4
    56a8:	30 91 d5 3e 	lds	r19, 0x3ED5
    56ac:	82 1b       	sub	r24, r18
    56ae:	93 0b       	sbc	r25, r19
    56b0:	0c c0       	rjmp	.+24     	; 0x56ca <service_uart_buffer+0x66>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    56b2:	80 91 c8 32 	lds	r24, 0x32C8
    56b6:	90 91 c9 32 	lds	r25, 0x32C9
    56ba:	20 91 d4 3e 	lds	r18, 0x3ED4
    56be:	30 91 d5 3e 	lds	r19, 0x3ED5
    56c2:	80 50       	subi	r24, 0x00	; 0
    56c4:	9c 4f       	sbci	r25, 0xFC	; 252
    56c6:	82 1b       	sub	r24, r18
    56c8:	93 0b       	sbc	r25, r19
	return _uart_idequeue(port, false);
}

inline void service_uart_buffer(){
	//Resume transmission attempt if outgoing data still pending -- we do this so we can don't block the CPU for too long waiting for flow-control
	if (uart_count(&ulcd)>0){uart_transmit_lcd(&ulcd);}
    56ca:	00 97       	sbiw	r24, 0x00	; 0
    56cc:	09 f4       	brne	.+2      	; 0x56d0 <service_uart_buffer+0x6c>
    56ce:	99 c1       	rjmp	.+818    	; 0x5a02 <service_uart_buffer+0x39e>
    56d0:	16 c1       	rjmp	.+556    	; 0x58fe <service_uart_buffer+0x29a>
}

inline uint8_t uart_dequeue(USART_t* port){
	uint8_t idx = port_map(port);
	uint16_t oldtail;
	oldtail = uart_tail[idx];
    56d2:	d5 01       	movw	r26, r10
    56d4:	ed 91       	ld	r30, X+
    56d6:	fc 91       	ld	r31, X
    56d8:	11 97       	sbiw	r26, 0x01	; 1
	uart_tail[idx]++;
    56da:	8d 91       	ld	r24, X+
    56dc:	9c 91       	ld	r25, X
    56de:	11 97       	sbiw	r26, 0x01	; 1
    56e0:	01 96       	adiw	r24, 0x01	; 1
    56e2:	8d 93       	st	X+, r24
    56e4:	9c 93       	st	X, r25
    56e6:	11 97       	sbiw	r26, 0x01	; 1
	if (uart_tail[idx] >= MAX_BUFFER_LEN){
    56e8:	8d 91       	ld	r24, X+
    56ea:	9c 91       	ld	r25, X
    56ec:	11 97       	sbiw	r26, 0x01	; 1
    56ee:	b4 e0       	ldi	r27, 0x04	; 4
    56f0:	80 30       	cpi	r24, 0x00	; 0
    56f2:	9b 07       	cpc	r25, r27
    56f4:	20 f0       	brcs	.+8      	; 0x56fe <service_uart_buffer+0x9a>
		uart_tail[idx] = 0;
    56f6:	d5 01       	movw	r26, r10
    56f8:	1d 92       	st	X+, r1
    56fa:	1c 92       	st	X, r1
    56fc:	11 97       	sbiw	r26, 0x01	; 1
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    56fe:	e4 0d       	add	r30, r4
    5700:	f5 1d       	adc	r31, r5
    5702:	d0 80       	ld	r13, Z
void inline uart_transmit_lcd(USART_t* port){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0) && (lcd_flow_control == LCD_READY)){
		toSend = uart_dequeue(port);
		switch(toSend){
    5704:	ba ef       	ldi	r27, 0xFA	; 250
    5706:	db 16       	cp	r13, r27
    5708:	19 f0       	breq	.+6      	; 0x5710 <service_uart_buffer+0xac>
    570a:	ee ef       	ldi	r30, 0xFE	; 254
    570c:	de 16       	cp	r13, r30
    570e:	19 f4       	brne	.+6      	; 0x5716 <service_uart_buffer+0xb2>
			case LCD_COMMAND:
			case LCD_MACRO:
				//Header byte just describes payload -- do not send to LCD
				lcd_flow_type = toSend;
    5710:	d0 92 ae 26 	sts	0x26AE, r13
    5714:	1e c1       	rjmp	.+572    	; 0x5952 <service_uart_buffer+0x2ee>
				break;
			default:
				//Payload bytes -- send to LCD
				if (toSend == 0x0D) {lcd_flow_control = LCD_BUSY;}
    5716:	fd e0       	ldi	r31, 0x0D	; 13
    5718:	df 16       	cp	r13, r31
    571a:	11 f4       	brne	.+4      	; 0x5720 <service_uart_buffer+0xbc>
    571c:	30 92 b0 26 	sts	0x26B0, r3
#ifndef UART_DEBUG
	uint8_t idx = port_map(port);
	
	//if (idx==0){uart_enqueue(&uctrl, datain);} //xxx
	
	uart_buffer[idx][uart_head[idx]] = datain;
    5720:	d8 01       	movw	r26, r16
    5722:	8d 91       	ld	r24, X+
    5724:	9c 91       	ld	r25, X
    5726:	11 97       	sbiw	r26, 0x01	; 1
    5728:	82 53       	subi	r24, 0x32	; 50
    572a:	95 4c       	sbci	r25, 0xC5	; 197
    572c:	fc 01       	movw	r30, r24
    572e:	c0 82       	st	Z, r12
	uart_head[idx]++;
    5730:	8d 91       	ld	r24, X+
    5732:	9c 91       	ld	r25, X
    5734:	11 97       	sbiw	r26, 0x01	; 1
    5736:	01 96       	adiw	r24, 0x01	; 1
    5738:	8d 93       	st	X+, r24
    573a:	9c 93       	st	X, r25
    573c:	11 97       	sbiw	r26, 0x01	; 1
	if (uart_head[idx] >= MAX_BUFFER_LEN){
    573e:	8d 91       	ld	r24, X+
    5740:	9c 91       	ld	r25, X
    5742:	11 97       	sbiw	r26, 0x01	; 1
    5744:	f4 e0       	ldi	r31, 0x04	; 4
    5746:	80 30       	cpi	r24, 0x00	; 0
    5748:	9f 07       	cpc	r25, r31
    574a:	18 f0       	brcs	.+6      	; 0x5752 <service_uart_buffer+0xee>
		uart_head[idx] = 0;
    574c:	1d 92       	st	X+, r1
    574e:	1c 92       	st	X, r1
    5750:	11 97       	sbiw	r26, 0x01	; 1
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    5752:	d7 01       	movw	r26, r14
    5754:	11 96       	adiw	r26, 0x01	; 1
    5756:	8c 91       	ld	r24, X
    5758:	11 97       	sbiw	r26, 0x01	; 1
    575a:	85 fd       	sbrc	r24, 5
    575c:	18 c0       	rjmp	.+48     	; 0x578e <service_uart_buffer+0x12a>
    575e:	33 c0       	rjmp	.+102    	; 0x57c6 <service_uart_buffer+0x162>
}

inline uint8_t uart_dequeue(USART_t* port){
	uint8_t idx = port_map(port);
	uint16_t oldtail;
	oldtail = uart_tail[idx];
    5760:	e8 81       	ld	r30, Y
    5762:	f9 81       	ldd	r31, Y+1	; 0x01
	uart_tail[idx]++;
    5764:	88 81       	ld	r24, Y
    5766:	99 81       	ldd	r25, Y+1	; 0x01
    5768:	01 96       	adiw	r24, 0x01	; 1
    576a:	88 83       	st	Y, r24
    576c:	99 83       	std	Y+1, r25	; 0x01
	if (uart_tail[idx] >= MAX_BUFFER_LEN){
    576e:	88 81       	ld	r24, Y
    5770:	99 81       	ldd	r25, Y+1	; 0x01
    5772:	b4 e0       	ldi	r27, 0x04	; 4
    5774:	80 30       	cpi	r24, 0x00	; 0
    5776:	9b 07       	cpc	r25, r27
    5778:	10 f0       	brcs	.+4      	; 0x577e <service_uart_buffer+0x11a>
		uart_tail[idx] = 0;
    577a:	18 82       	st	Y, r1
    577c:	19 82       	std	Y+1, r1	; 0x01
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    577e:	e2 53       	subi	r30, 0x32	; 50
    5780:	f5 4c       	sbci	r31, 0xC5	; 197
    5782:	80 81       	ld	r24, Z
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
    5784:	f7 01       	movw	r30, r14
    5786:	80 83       	st	Z, r24
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    5788:	81 81       	ldd	r24, Z+1	; 0x01
    578a:	85 ff       	sbrs	r24, 5
    578c:	1c c0       	rjmp	.+56     	; 0x57c6 <service_uart_buffer+0x162>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    578e:	d8 01       	movw	r26, r16
    5790:	8d 91       	ld	r24, X+
    5792:	9c 91       	ld	r25, X
    5794:	11 97       	sbiw	r26, 0x01	; 1
    5796:	28 81       	ld	r18, Y
    5798:	39 81       	ldd	r19, Y+1	; 0x01
    579a:	82 17       	cp	r24, r18
    579c:	93 07       	cpc	r25, r19
    579e:	40 f0       	brcs	.+16     	; 0x57b0 <service_uart_buffer+0x14c>
		return (uart_head[idx] - uart_tail[idx]);
    57a0:	8d 91       	ld	r24, X+
    57a2:	9c 91       	ld	r25, X
    57a4:	11 97       	sbiw	r26, 0x01	; 1
    57a6:	28 81       	ld	r18, Y
    57a8:	39 81       	ldd	r19, Y+1	; 0x01
    57aa:	82 1b       	sub	r24, r18
    57ac:	93 0b       	sbc	r25, r19
    57ae:	09 c0       	rjmp	.+18     	; 0x57c2 <service_uart_buffer+0x15e>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    57b0:	f8 01       	movw	r30, r16
    57b2:	80 81       	ld	r24, Z
    57b4:	91 81       	ldd	r25, Z+1	; 0x01
    57b6:	28 81       	ld	r18, Y
    57b8:	39 81       	ldd	r19, Y+1	; 0x01
    57ba:	80 50       	subi	r24, 0x00	; 0
    57bc:	9c 4f       	sbci	r25, 0xFC	; 252
    57be:	82 1b       	sub	r24, r18
    57c0:	93 0b       	sbc	r25, r19
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    57c2:	00 97       	sbiw	r24, 0x00	; 0
    57c4:	69 f6       	brne	.-102    	; 0x5760 <service_uart_buffer+0xfc>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    57c6:	d8 01       	movw	r26, r16
    57c8:	8d 91       	ld	r24, X+
    57ca:	9c 91       	ld	r25, X
    57cc:	11 97       	sbiw	r26, 0x01	; 1
    57ce:	28 81       	ld	r18, Y
    57d0:	39 81       	ldd	r19, Y+1	; 0x01
    57d2:	82 17       	cp	r24, r18
    57d4:	93 07       	cpc	r25, r19
    57d6:	40 f0       	brcs	.+16     	; 0x57e8 <service_uart_buffer+0x184>
		return (uart_head[idx] - uart_tail[idx]);
    57d8:	8d 91       	ld	r24, X+
    57da:	9c 91       	ld	r25, X
    57dc:	11 97       	sbiw	r26, 0x01	; 1
    57de:	28 81       	ld	r18, Y
    57e0:	39 81       	ldd	r19, Y+1	; 0x01
    57e2:	82 1b       	sub	r24, r18
    57e4:	93 0b       	sbc	r25, r19
    57e6:	09 c0       	rjmp	.+18     	; 0x57fa <service_uart_buffer+0x196>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    57e8:	f8 01       	movw	r30, r16
    57ea:	80 81       	ld	r24, Z
    57ec:	91 81       	ldd	r25, Z+1	; 0x01
    57ee:	28 81       	ld	r18, Y
    57f0:	39 81       	ldd	r19, Y+1	; 0x01
    57f2:	80 50       	subi	r24, 0x00	; 0
    57f4:	9c 4f       	sbci	r25, 0xFC	; 252
    57f6:	82 1b       	sub	r24, r18
    57f8:	93 0b       	sbc	r25, r19
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
	}
	//disable the tx outgoing hardware buffer ready interrupt if we have nothing more to put in it.
	if(uart_count(port)>0) uart_txbuffer_enable(port);
    57fa:	00 97       	sbiw	r24, 0x00	; 0
    57fc:	21 f0       	breq	.+8      	; 0x5806 <service_uart_buffer+0x1a2>
    57fe:	c7 01       	movw	r24, r14
    5800:	0e 94 5f 19 	call	0x32be	; 0x32be <uart_txbuffer_enable>
    5804:	03 c0       	rjmp	.+6      	; 0x580c <service_uart_buffer+0x1a8>
	else uart_txbuffer_disable(port);
    5806:	c7 01       	movw	r24, r14
    5808:	0e 94 64 19 	call	0x32c8	; 0x32c8 <uart_txbuffer_disable>
#ifndef UART_DEBUG
	uint8_t idx = port_map(port);
	
	//if (idx==0){uart_enqueue(&uctrl, datain);} //xxx
	
	uart_buffer[idx][uart_head[idx]] = datain;
    580c:	d8 01       	movw	r26, r16
    580e:	8d 91       	ld	r24, X+
    5810:	9c 91       	ld	r25, X
    5812:	11 97       	sbiw	r26, 0x01	; 1
    5814:	82 53       	subi	r24, 0x32	; 50
    5816:	95 4c       	sbci	r25, 0xC5	; 197
    5818:	fc 01       	movw	r30, r24
    581a:	d0 82       	st	Z, r13
	uart_head[idx]++;
    581c:	8d 91       	ld	r24, X+
    581e:	9c 91       	ld	r25, X
    5820:	11 97       	sbiw	r26, 0x01	; 1
    5822:	01 96       	adiw	r24, 0x01	; 1
    5824:	8d 93       	st	X+, r24
    5826:	9c 93       	st	X, r25
    5828:	11 97       	sbiw	r26, 0x01	; 1
	if (uart_head[idx] >= MAX_BUFFER_LEN){
    582a:	8d 91       	ld	r24, X+
    582c:	9c 91       	ld	r25, X
    582e:	11 97       	sbiw	r26, 0x01	; 1
    5830:	f4 e0       	ldi	r31, 0x04	; 4
    5832:	80 30       	cpi	r24, 0x00	; 0
    5834:	9f 07       	cpc	r25, r31
    5836:	18 f0       	brcs	.+6      	; 0x583e <service_uart_buffer+0x1da>
		uart_head[idx] = 0;
    5838:	1d 92       	st	X+, r1
    583a:	1c 92       	st	X, r1
    583c:	11 97       	sbiw	r26, 0x01	; 1
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    583e:	d7 01       	movw	r26, r14
    5840:	11 96       	adiw	r26, 0x01	; 1
    5842:	8c 91       	ld	r24, X
    5844:	11 97       	sbiw	r26, 0x01	; 1
    5846:	85 fd       	sbrc	r24, 5
    5848:	18 c0       	rjmp	.+48     	; 0x587a <service_uart_buffer+0x216>
    584a:	33 c0       	rjmp	.+102    	; 0x58b2 <service_uart_buffer+0x24e>
}

inline uint8_t uart_dequeue(USART_t* port){
	uint8_t idx = port_map(port);
	uint16_t oldtail;
	oldtail = uart_tail[idx];
    584c:	e8 81       	ld	r30, Y
    584e:	f9 81       	ldd	r31, Y+1	; 0x01
	uart_tail[idx]++;
    5850:	88 81       	ld	r24, Y
    5852:	99 81       	ldd	r25, Y+1	; 0x01
    5854:	01 96       	adiw	r24, 0x01	; 1
    5856:	88 83       	st	Y, r24
    5858:	99 83       	std	Y+1, r25	; 0x01
	if (uart_tail[idx] >= MAX_BUFFER_LEN){
    585a:	88 81       	ld	r24, Y
    585c:	99 81       	ldd	r25, Y+1	; 0x01
    585e:	b4 e0       	ldi	r27, 0x04	; 4
    5860:	80 30       	cpi	r24, 0x00	; 0
    5862:	9b 07       	cpc	r25, r27
    5864:	10 f0       	brcs	.+4      	; 0x586a <service_uart_buffer+0x206>
		uart_tail[idx] = 0;
    5866:	18 82       	st	Y, r1
    5868:	19 82       	std	Y+1, r1	; 0x01
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    586a:	e2 53       	subi	r30, 0x32	; 50
    586c:	f5 4c       	sbci	r31, 0xC5	; 197
    586e:	80 81       	ld	r24, Z
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
    5870:	f7 01       	movw	r30, r14
    5872:	80 83       	st	Z, r24
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    5874:	81 81       	ldd	r24, Z+1	; 0x01
    5876:	85 ff       	sbrs	r24, 5
    5878:	1c c0       	rjmp	.+56     	; 0x58b2 <service_uart_buffer+0x24e>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    587a:	d8 01       	movw	r26, r16
    587c:	8d 91       	ld	r24, X+
    587e:	9c 91       	ld	r25, X
    5880:	11 97       	sbiw	r26, 0x01	; 1
    5882:	28 81       	ld	r18, Y
    5884:	39 81       	ldd	r19, Y+1	; 0x01
    5886:	82 17       	cp	r24, r18
    5888:	93 07       	cpc	r25, r19
    588a:	40 f0       	brcs	.+16     	; 0x589c <service_uart_buffer+0x238>
		return (uart_head[idx] - uart_tail[idx]);
    588c:	8d 91       	ld	r24, X+
    588e:	9c 91       	ld	r25, X
    5890:	11 97       	sbiw	r26, 0x01	; 1
    5892:	28 81       	ld	r18, Y
    5894:	39 81       	ldd	r19, Y+1	; 0x01
    5896:	82 1b       	sub	r24, r18
    5898:	93 0b       	sbc	r25, r19
    589a:	09 c0       	rjmp	.+18     	; 0x58ae <service_uart_buffer+0x24a>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    589c:	f8 01       	movw	r30, r16
    589e:	80 81       	ld	r24, Z
    58a0:	91 81       	ldd	r25, Z+1	; 0x01
    58a2:	28 81       	ld	r18, Y
    58a4:	39 81       	ldd	r19, Y+1	; 0x01
    58a6:	80 50       	subi	r24, 0x00	; 0
    58a8:	9c 4f       	sbci	r25, 0xFC	; 252
    58aa:	82 1b       	sub	r24, r18
    58ac:	93 0b       	sbc	r25, r19
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    58ae:	00 97       	sbiw	r24, 0x00	; 0
    58b0:	69 f6       	brne	.-102    	; 0x584c <service_uart_buffer+0x1e8>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    58b2:	d8 01       	movw	r26, r16
    58b4:	8d 91       	ld	r24, X+
    58b6:	9c 91       	ld	r25, X
    58b8:	11 97       	sbiw	r26, 0x01	; 1
    58ba:	28 81       	ld	r18, Y
    58bc:	39 81       	ldd	r19, Y+1	; 0x01
    58be:	82 17       	cp	r24, r18
    58c0:	93 07       	cpc	r25, r19
    58c2:	40 f0       	brcs	.+16     	; 0x58d4 <service_uart_buffer+0x270>
		return (uart_head[idx] - uart_tail[idx]);
    58c4:	8d 91       	ld	r24, X+
    58c6:	9c 91       	ld	r25, X
    58c8:	11 97       	sbiw	r26, 0x01	; 1
    58ca:	28 81       	ld	r18, Y
    58cc:	39 81       	ldd	r19, Y+1	; 0x01
    58ce:	82 1b       	sub	r24, r18
    58d0:	93 0b       	sbc	r25, r19
    58d2:	09 c0       	rjmp	.+18     	; 0x58e6 <service_uart_buffer+0x282>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    58d4:	f8 01       	movw	r30, r16
    58d6:	80 81       	ld	r24, Z
    58d8:	91 81       	ldd	r25, Z+1	; 0x01
    58da:	28 81       	ld	r18, Y
    58dc:	39 81       	ldd	r19, Y+1	; 0x01
    58de:	80 50       	subi	r24, 0x00	; 0
    58e0:	9c 4f       	sbci	r25, 0xFC	; 252
    58e2:	82 1b       	sub	r24, r18
    58e4:	93 0b       	sbc	r25, r19
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
		port->DATA = uart_dequeue(port);
	}
	//disable the tx outgoing hardware buffer ready interrupt if we have nothing more to put in it.
	if(uart_count(port)>0) uart_txbuffer_enable(port);
    58e6:	00 97       	sbiw	r24, 0x00	; 0
    58e8:	21 f0       	breq	.+8      	; 0x58f2 <service_uart_buffer+0x28e>
    58ea:	c7 01       	movw	r24, r14
    58ec:	0e 94 5f 19 	call	0x32be	; 0x32be <uart_txbuffer_enable>
    58f0:	03 c0       	rjmp	.+6      	; 0x58f8 <service_uart_buffer+0x294>
	else uart_txbuffer_disable(port);
    58f2:	c7 01       	movw	r24, r14
    58f4:	0e 94 64 19 	call	0x32c8	; 0x32c8 <uart_txbuffer_disable>
			default:
				//Payload bytes -- send to LCD
				if (toSend == 0x0D) {lcd_flow_control = LCD_BUSY;}
				uart_enqueue(&udata, '`'); //xxx - echo to data port
				uart_enqueue(&udata, toSend); //xxx - echo to data port
				port->DATA = toSend;
    58f8:	d3 01       	movw	r26, r6
    58fa:	dc 92       	st	X, r13
    58fc:	2a c0       	rjmp	.+84     	; 0x5952 <service_uart_buffer+0x2ee>
}

void inline uart_transmit_lcd(USART_t* port){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0) && (lcd_flow_control == LCD_READY)){
    58fe:	0f 2e       	mov	r0, r31
    5900:	f0 eb       	ldi	r31, 0xB0	; 176
    5902:	6f 2e       	mov	r6, r31
    5904:	fb e0       	ldi	r31, 0x0B	; 11
    5906:	7f 2e       	mov	r7, r31
    5908:	f0 2d       	mov	r31, r0
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    590a:	0f 2e       	mov	r0, r31
    590c:	f8 ec       	ldi	r31, 0xC8	; 200
    590e:	8f 2e       	mov	r8, r31
    5910:	f2 e3       	ldi	r31, 0x32	; 50
    5912:	9f 2e       	mov	r9, r31
    5914:	f0 2d       	mov	r31, r0
    5916:	0f 2e       	mov	r0, r31
    5918:	f4 ed       	ldi	r31, 0xD4	; 212
    591a:	af 2e       	mov	r10, r31
    591c:	fe e3       	ldi	r31, 0x3E	; 62
    591e:	bf 2e       	mov	r11, r31
    5920:	f0 2d       	mov	r31, r0
		uart_tail[idx] = 0;
	}
	
	//if (idx==0){uart_enqueue(&udata, uart_buffer[idx][oldtail]);} //xxx
	
	return uart_buffer[idx][oldtail];
    5922:	0f 2e       	mov	r0, r31
    5924:	fe ec       	ldi	r31, 0xCE	; 206
    5926:	4f 2e       	mov	r4, r31
    5928:	f2 e3       	ldi	r31, 0x32	; 50
    592a:	5f 2e       	mov	r5, r31
    592c:	f0 2d       	mov	r31, r0
#ifndef UART_DEBUG
	uint8_t idx = port_map(port);
	
	//if (idx==0){uart_enqueue(&uctrl, datain);} //xxx
	
	uart_buffer[idx][uart_head[idx]] = datain;
    592e:	0c ec       	ldi	r16, 0xCC	; 204
    5930:	12 e3       	ldi	r17, 0x32	; 50
    5932:	0f 2e       	mov	r0, r31
    5934:	f0 e6       	ldi	r31, 0x60	; 96
    5936:	cf 2e       	mov	r12, r31
    5938:	f0 2d       	mov	r31, r0
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(USART_t* port){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0)){
    593a:	0f 2e       	mov	r0, r31
    593c:	f0 eb       	ldi	r31, 0xB0	; 176
    593e:	ef 2e       	mov	r14, r31
    5940:	f8 e0       	ldi	r31, 0x08	; 8
    5942:	ff 2e       	mov	r15, r31
    5944:	f0 2d       	mov	r31, r0
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    5946:	c8 ed       	ldi	r28, 0xD8	; 216
    5948:	de e3       	ldi	r29, 0x3E	; 62
				//Header byte just describes payload -- do not send to LCD
				lcd_flow_type = toSend;
				break;
			default:
				//Payload bytes -- send to LCD
				if (toSend == 0x0D) {lcd_flow_control = LCD_BUSY;}
    594a:	0f 2e       	mov	r0, r31
    594c:	fe e4       	ldi	r31, 0x4E	; 78
    594e:	3f 2e       	mov	r3, r31
    5950:	f0 2d       	mov	r31, r0
}

void inline uart_transmit_lcd(USART_t* port){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0) && (lcd_flow_control == LCD_READY)){
    5952:	f3 01       	movw	r30, r6
    5954:	81 81       	ldd	r24, Z+1	; 0x01
    5956:	85 ff       	sbrs	r24, 5
    5958:	24 c0       	rjmp	.+72     	; 0x59a2 <service_uart_buffer+0x33e>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    595a:	d4 01       	movw	r26, r8
    595c:	8d 91       	ld	r24, X+
    595e:	9c 91       	ld	r25, X
    5960:	11 97       	sbiw	r26, 0x01	; 1
    5962:	f5 01       	movw	r30, r10
    5964:	20 81       	ld	r18, Z
    5966:	31 81       	ldd	r19, Z+1	; 0x01
    5968:	82 17       	cp	r24, r18
    596a:	93 07       	cpc	r25, r19
    596c:	40 f0       	brcs	.+16     	; 0x597e <service_uart_buffer+0x31a>
		return (uart_head[idx] - uart_tail[idx]);
    596e:	8d 91       	ld	r24, X+
    5970:	9c 91       	ld	r25, X
    5972:	11 97       	sbiw	r26, 0x01	; 1
    5974:	20 81       	ld	r18, Z
    5976:	31 81       	ldd	r19, Z+1	; 0x01
    5978:	82 1b       	sub	r24, r18
    597a:	93 0b       	sbc	r25, r19
    597c:	0b c0       	rjmp	.+22     	; 0x5994 <service_uart_buffer+0x330>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    597e:	d4 01       	movw	r26, r8
    5980:	8d 91       	ld	r24, X+
    5982:	9c 91       	ld	r25, X
    5984:	11 97       	sbiw	r26, 0x01	; 1
    5986:	f5 01       	movw	r30, r10
    5988:	20 81       	ld	r18, Z
    598a:	31 81       	ldd	r19, Z+1	; 0x01
    598c:	80 50       	subi	r24, 0x00	; 0
    598e:	9c 4f       	sbci	r25, 0xFC	; 252
    5990:	82 1b       	sub	r24, r18
    5992:	93 0b       	sbc	r25, r19
}

void inline uart_transmit_lcd(USART_t* port){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count(port) > 0) && (lcd_flow_control == LCD_READY)){
    5994:	00 97       	sbiw	r24, 0x00	; 0
    5996:	29 f0       	breq	.+10     	; 0x59a2 <service_uart_buffer+0x33e>
    5998:	80 91 b0 26 	lds	r24, 0x26B0
    599c:	82 35       	cpi	r24, 0x52	; 82
    599e:	09 f4       	brne	.+2      	; 0x59a2 <service_uart_buffer+0x33e>
    59a0:	98 ce       	rjmp	.-720    	; 0x56d2 <service_uart_buffer+0x6e>
				uart_enqueue(&udata, toSend); //xxx - echo to data port
				port->DATA = toSend;
				break;
		}				
	}
	uart_txbuffer_disable(port); //implemented this way to prevent periodic stalls that happen when uart_txbuffer isn't disabled quickly enough
    59a2:	80 eb       	ldi	r24, 0xB0	; 176
    59a4:	9b e0       	ldi	r25, 0x0B	; 11
    59a6:	0e 94 64 19 	call	0x32c8	; 0x32c8 <uart_txbuffer_disable>
	uart_tail[idx] = 0;
}

inline uint16_t uart_count(USART_t* port){
	uint8_t idx = port_map(port);
	if (uart_head[idx] >= uart_tail[idx]){	
    59aa:	20 91 c8 32 	lds	r18, 0x32C8
    59ae:	30 91 c9 32 	lds	r19, 0x32C9
    59b2:	80 91 d4 3e 	lds	r24, 0x3ED4
    59b6:	90 91 d5 3e 	lds	r25, 0x3ED5
    59ba:	28 17       	cp	r18, r24
    59bc:	39 07       	cpc	r19, r25
    59be:	58 f0       	brcs	.+22     	; 0x59d6 <service_uart_buffer+0x372>
		return (uart_head[idx] - uart_tail[idx]);
    59c0:	80 91 c8 32 	lds	r24, 0x32C8
    59c4:	90 91 c9 32 	lds	r25, 0x32C9
    59c8:	20 91 d4 3e 	lds	r18, 0x3ED4
    59cc:	30 91 d5 3e 	lds	r19, 0x3ED5
    59d0:	82 1b       	sub	r24, r18
    59d2:	93 0b       	sbc	r25, r19
    59d4:	0c c0       	rjmp	.+24     	; 0x59ee <service_uart_buffer+0x38a>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail[idx])+uart_head[idx]);
    59d6:	80 91 c8 32 	lds	r24, 0x32C8
    59da:	90 91 c9 32 	lds	r25, 0x32C9
    59de:	20 91 d4 3e 	lds	r18, 0x3ED4
    59e2:	30 91 d5 3e 	lds	r19, 0x3ED5
    59e6:	80 50       	subi	r24, 0x00	; 0
    59e8:	9c 4f       	sbci	r25, 0xFC	; 252
    59ea:	82 1b       	sub	r24, r18
    59ec:	93 0b       	sbc	r25, r19
				port->DATA = toSend;
				break;
		}				
	}
	uart_txbuffer_disable(port); //implemented this way to prevent periodic stalls that happen when uart_txbuffer isn't disabled quickly enough
	if ((uart_count(port)>0) && (lcd_flow_control == LCD_READY)){ //...something is waiting to go out
    59ee:	00 97       	sbiw	r24, 0x00	; 0
    59f0:	41 f0       	breq	.+16     	; 0x5a02 <service_uart_buffer+0x39e>
    59f2:	80 91 b0 26 	lds	r24, 0x26B0
    59f6:	82 35       	cpi	r24, 0x52	; 82
    59f8:	21 f4       	brne	.+8      	; 0x5a02 <service_uart_buffer+0x39e>
		uart_txbuffer_enable(port);	
    59fa:	80 eb       	ldi	r24, 0xB0	; 176
    59fc:	9b e0       	ldi	r25, 0x0B	; 11
    59fe:	0e 94 5f 19 	call	0x32be	; 0x32be <uart_txbuffer_enable>
}

inline void service_uart_buffer(){
	//Resume transmission attempt if outgoing data still pending -- we do this so we can don't block the CPU for too long waiting for flow-control
	if (uart_count(&ulcd)>0){uart_transmit_lcd(&ulcd);}
}
    5a02:	df 91       	pop	r29
    5a04:	cf 91       	pop	r28
    5a06:	1f 91       	pop	r17
    5a08:	0f 91       	pop	r16
    5a0a:	ff 90       	pop	r15
    5a0c:	ef 90       	pop	r14
    5a0e:	df 90       	pop	r13
    5a10:	cf 90       	pop	r12
    5a12:	bf 90       	pop	r11
    5a14:	af 90       	pop	r10
    5a16:	9f 90       	pop	r9
    5a18:	8f 90       	pop	r8
    5a1a:	7f 90       	pop	r7
    5a1c:	6f 90       	pop	r6
    5a1e:	5f 90       	pop	r5
    5a20:	4f 90       	pop	r4
    5a22:	3f 90       	pop	r3
    5a24:	08 95       	ret

00005a26 <led_on>:
void inline led_on(uint8_t which){led_dim(which, 0xff);}

void inline led_off(uint8_t which){led_dim(which, 0x00);}

void inline led_dim(uint8_t which, uint8_t brightness){
	switch(which){
    5a26:	81 30       	cpi	r24, 0x01	; 1
    5a28:	61 f0       	breq	.+24     	; 0x5a42 <led_on+0x1c>
    5a2a:	81 30       	cpi	r24, 0x01	; 1
    5a2c:	18 f0       	brcs	.+6      	; 0x5a34 <led_on+0xe>
    5a2e:	82 30       	cpi	r24, 0x02	; 2
    5a30:	a9 f4       	brne	.+42     	; 0x5a5c <led_on+0x36>
    5a32:	0e c0       	rjmp	.+28     	; 0x5a50 <led_on+0x2a>
	case LED_0:
		TCF0.CCABUF = (uint16_t)brightness;		
    5a34:	8f ef       	ldi	r24, 0xFF	; 255
    5a36:	90 e0       	ldi	r25, 0x00	; 0
    5a38:	e0 e0       	ldi	r30, 0x00	; 0
    5a3a:	fb e0       	ldi	r31, 0x0B	; 11
    5a3c:	80 af       	sts	0x70, r24
    5a3e:	91 af       	sts	0x71, r25
    5a40:	08 95       	ret
		break;
	case LED_1:
		TCF0.CCBBUF = (uint16_t)brightness;		
    5a42:	8f ef       	ldi	r24, 0xFF	; 255
    5a44:	90 e0       	ldi	r25, 0x00	; 0
    5a46:	e0 e0       	ldi	r30, 0x00	; 0
    5a48:	fb e0       	ldi	r31, 0x0B	; 11
    5a4a:	82 af       	sts	0x72, r24
    5a4c:	93 af       	sts	0x73, r25
    5a4e:	08 95       	ret
		break;
	case LED_3:
		TCF0.CCDBUF = (uint16_t)brightness;
    5a50:	8f ef       	ldi	r24, 0xFF	; 255
    5a52:	90 e0       	ldi	r25, 0x00	; 0
    5a54:	80 93 3e 0b 	sts	0x0B3E, r24
    5a58:	90 93 3f 0b 	sts	0x0B3F, r25
    5a5c:	08 95       	ret

00005a5e <led_off>:
void inline led_on(uint8_t which){led_dim(which, 0xff);}

void inline led_off(uint8_t which){led_dim(which, 0x00);}

void inline led_dim(uint8_t which, uint8_t brightness){
	switch(which){
    5a5e:	81 30       	cpi	r24, 0x01	; 1
    5a60:	51 f0       	breq	.+20     	; 0x5a76 <led_off+0x18>
    5a62:	81 30       	cpi	r24, 0x01	; 1
    5a64:	18 f0       	brcs	.+6      	; 0x5a6c <led_off+0xe>
    5a66:	82 30       	cpi	r24, 0x02	; 2
    5a68:	79 f4       	brne	.+30     	; 0x5a88 <led_off+0x2a>
    5a6a:	0a c0       	rjmp	.+20     	; 0x5a80 <led_off+0x22>
	case LED_0:
		TCF0.CCABUF = (uint16_t)brightness;		
    5a6c:	e0 e0       	ldi	r30, 0x00	; 0
    5a6e:	fb e0       	ldi	r31, 0x0B	; 11
    5a70:	10 ae       	sts	0xb0, r17
    5a72:	11 ae       	sts	0xb1, r17
    5a74:	08 95       	ret
		break;
	case LED_1:
		TCF0.CCBBUF = (uint16_t)brightness;		
    5a76:	e0 e0       	ldi	r30, 0x00	; 0
    5a78:	fb e0       	ldi	r31, 0x0B	; 11
    5a7a:	12 ae       	sts	0xb2, r17
    5a7c:	13 ae       	sts	0xb3, r17
    5a7e:	08 95       	ret
		break;
	case LED_3:
		TCF0.CCDBUF = (uint16_t)brightness;
    5a80:	10 92 3e 0b 	sts	0x0B3E, r1
    5a84:	10 92 3f 0b 	sts	0x0B3F, r1
    5a88:	08 95       	ret

00005a8a <led_dim>:
void inline led_on(uint8_t which){led_dim(which, 0xff);}

void inline led_off(uint8_t which){led_dim(which, 0x00);}

void inline led_dim(uint8_t which, uint8_t brightness){
	switch(which){
    5a8a:	81 30       	cpi	r24, 0x01	; 1
    5a8c:	59 f0       	breq	.+22     	; 0x5aa4 <led_dim+0x1a>
    5a8e:	81 30       	cpi	r24, 0x01	; 1
    5a90:	18 f0       	brcs	.+6      	; 0x5a98 <led_dim+0xe>
    5a92:	82 30       	cpi	r24, 0x02	; 2
    5a94:	91 f4       	brne	.+36     	; 0x5aba <led_dim+0x30>
    5a96:	0c c0       	rjmp	.+24     	; 0x5ab0 <led_dim+0x26>
	case LED_0:
		TCF0.CCABUF = (uint16_t)brightness;		
    5a98:	70 e0       	ldi	r23, 0x00	; 0
    5a9a:	e0 e0       	ldi	r30, 0x00	; 0
    5a9c:	fb e0       	ldi	r31, 0x0B	; 11
    5a9e:	60 af       	sts	0x70, r22
    5aa0:	71 af       	sts	0x71, r23
		break;
    5aa2:	08 95       	ret
	case LED_1:
		TCF0.CCBBUF = (uint16_t)brightness;		
    5aa4:	70 e0       	ldi	r23, 0x00	; 0
    5aa6:	e0 e0       	ldi	r30, 0x00	; 0
    5aa8:	fb e0       	ldi	r31, 0x0B	; 11
    5aaa:	62 af       	sts	0x72, r22
    5aac:	73 af       	sts	0x73, r23
		break;
    5aae:	08 95       	ret
	case LED_3:
		TCF0.CCDBUF = (uint16_t)brightness;
    5ab0:	70 e0       	ldi	r23, 0x00	; 0
    5ab2:	60 93 3e 0b 	sts	0x0B3E, r22
    5ab6:	70 93 3f 0b 	sts	0x0B3F, r23
    5aba:	08 95       	ret

00005abc <led_toggle>:
		break;
	}
}

void inline led_toggle(uint8_t which){
	switch(which){
    5abc:	81 30       	cpi	r24, 0x01	; 1
    5abe:	59 f0       	breq	.+22     	; 0x5ad6 <led_toggle+0x1a>
    5ac0:	81 30       	cpi	r24, 0x01	; 1
    5ac2:	18 f0       	brcs	.+6      	; 0x5aca <led_toggle+0xe>
    5ac4:	82 30       	cpi	r24, 0x02	; 2
    5ac6:	91 f4       	brne	.+36     	; 0x5aec <led_toggle+0x30>
    5ac8:	0c c0       	rjmp	.+24     	; 0x5ae2 <led_toggle+0x26>
	case LED_0:
		TCF0.CCAL = ~TCF0.CCAL;		
    5aca:	e0 e0       	ldi	r30, 0x00	; 0
    5acc:	fb e0       	ldi	r31, 0x0B	; 11
    5ace:	80 a5       	lds	r24, 0x60
    5ad0:	80 95       	com	r24
    5ad2:	80 a7       	lds	r24, 0x70
		break;
    5ad4:	08 95       	ret
	case LED_1:
		TCF0.CCBL = ~TCF0.CCBL;		
    5ad6:	e0 e0       	ldi	r30, 0x00	; 0
    5ad8:	fb e0       	ldi	r31, 0x0B	; 11
    5ada:	82 a5       	lds	r24, 0x62
    5adc:	80 95       	com	r24
    5ade:	82 a7       	lds	r24, 0x72
		break;
    5ae0:	08 95       	ret
	case LED_3:
		TCF0.CCDL = ~TCF0.CCDL;
    5ae2:	e0 e0       	ldi	r30, 0x00	; 0
    5ae4:	fb e0       	ldi	r31, 0x0B	; 11
    5ae6:	86 a5       	lds	r24, 0x66
    5ae8:	80 95       	com	r24
    5aea:	86 a7       	lds	r24, 0x76
    5aec:	08 95       	ret

00005aee <audio_volume>:
uint8_t _audio_volume;
uint8_t _audio_counter;
uint8_t _audio_state = AUDIO_IDLE;

void audio_volume(uint8_t volume){
	TCF0.CCCBUF = (uint16_t)volume;	
    5aee:	90 e0       	ldi	r25, 0x00	; 0
    5af0:	e0 e0       	ldi	r30, 0x00	; 0
    5af2:	fb e0       	ldi	r31, 0x0B	; 11
    5af4:	84 af       	sts	0x74, r24
    5af6:	95 af       	sts	0x75, r25
}
    5af8:	08 95       	ret

00005afa <init_ui>:
#include "utilities.h"
#include "ui.h"

//Handles all internal UI hardware (2 LEDs + Audio Beeper)

void init_ui(){
    5afa:	cf 93       	push	r28
    5afc:	df 93       	push	r29
	//LED's are located at PF0 (Lower) and PF1 (Upper)
	PORTF.DIRSET = B8(00001111); //pins 0,1,2,3 to output	
    5afe:	e0 ea       	ldi	r30, 0xA0	; 160
    5b00:	f6 e0       	ldi	r31, 0x06	; 6
    5b02:	8f e0       	ldi	r24, 0x0F	; 15
    5b04:	81 83       	std	Z+1, r24	; 0x01
	PORTF.PIN0CTRL = B8(01000000); //Invert the pin (needed to achieve correct PWM output polarity)
    5b06:	80 e4       	ldi	r24, 0x40	; 64
    5b08:	80 8b       	std	Z+16, r24	; 0x10
	PORTF.PIN1CTRL = B8(01000000); //Invert the pin (needed to achieve correct PWM output polarity)
    5b0a:	81 8b       	std	Z+17, r24	; 0x11
	PORTF.PIN3CTRL = B8(01000000); //Invert the pin (needed to achieve correct PWM output polarity)
    5b0c:	83 8b       	std	Z+19, r24	; 0x13
	TCF0.CTRLA = 0x07; //enable; div1024
    5b0e:	c0 e0       	ldi	r28, 0x00	; 0
    5b10:	db e0       	ldi	r29, 0x0B	; 11
    5b12:	87 e0       	ldi	r24, 0x07	; 7
    5b14:	88 83       	st	Y, r24
	TCF0.CTRLB = B8(11110011); //All output channels enabled (A through D); Single-slope PWM
    5b16:	83 ef       	ldi	r24, 0xF3	; 243
    5b18:	89 83       	std	Y+1, r24	; 0x01
	TCF0.PER = 0x00FF; //Set the top of the counter to basically force 8 bit operation; we do this for speed when calling dimming functions in the future
    5b1a:	8f ef       	ldi	r24, 0xFF	; 255
    5b1c:	90 e0       	ldi	r25, 0x00	; 0
    5b1e:	8e a3       	lds	r24, 0x5e
    5b20:	9f a3       	lds	r25, 0x5f
	audio_volume(0x00);
    5b22:	80 e0       	ldi	r24, 0x00	; 0
    5b24:	0e 94 77 2d 	call	0x5aee	; 0x5aee <audio_volume>
void inline led_off(uint8_t which){led_dim(which, 0x00);}

void inline led_dim(uint8_t which, uint8_t brightness){
	switch(which){
	case LED_0:
		TCF0.CCABUF = (uint16_t)brightness;		
    5b28:	18 ae       	sts	0xb8, r17
    5b2a:	19 ae       	sts	0xb9, r17
		break;
	case LED_1:
		TCF0.CCBBUF = (uint16_t)brightness;		
    5b2c:	1a ae       	sts	0xba, r17
    5b2e:	1b ae       	sts	0xbb, r17
		break;
	case LED_3:
		TCF0.CCDBUF = (uint16_t)brightness;
    5b30:	10 92 3e 0b 	sts	0x0B3E, r1
    5b34:	10 92 3f 0b 	sts	0x0B3F, r1
	TCF0.PER = 0x00FF; //Set the top of the counter to basically force 8 bit operation; we do this for speed when calling dimming functions in the future
	audio_volume(0x00);
	led_off(LED_0);
	led_off(LED_1);
	led_off(LED_3);			
}
    5b38:	df 91       	pop	r29
    5b3a:	cf 91       	pop	r28
    5b3c:	08 95       	ret

00005b3e <_audio_beep>:
	TCF0.CCCBUF = (uint16_t)volume;	
}

//Internal function to actually start making noise
void _audio_beep(){
	_audio_num_beeps--;
    5b3e:	80 91 db 3e 	lds	r24, 0x3EDB
    5b42:	81 50       	subi	r24, 0x01	; 1
    5b44:	80 93 db 3e 	sts	0x3EDB, r24
	_audio_state = AUDIO_BEEPING;
    5b48:	85 e2       	ldi	r24, 0x25	; 37
    5b4a:	80 93 17 22 	sts	0x2217, r24
	_audio_counter = AUDIO_BEEP_LENGTH;
    5b4e:	85 e0       	ldi	r24, 0x05	; 5
    5b50:	80 93 dc 3e 	sts	0x3EDC, r24
	audio_volume(_audio_volume); //actually start making noise
    5b54:	80 91 da 3e 	lds	r24, 0x3EDA
    5b58:	0e 94 77 2d 	call	0x5aee	; 0x5aee <audio_volume>
}	
    5b5c:	08 95       	ret

00005b5e <audio_beep>:

//[INTERFACE] This is the function to call from outside to make beepy noises
void audio_beep(uint8_t num_beeps, uint16_t volume){
	if (num_beeps < 1) return; //ignore request if no beeps requested
    5b5e:	88 23       	and	r24, r24
    5b60:	49 f0       	breq	.+18     	; 0x5b74 <audio_beep+0x16>
	_audio_num_beeps = num_beeps;
    5b62:	80 93 db 3e 	sts	0x3EDB, r24
	if (volume == 0) return; //ignore request if volume level would be inaudible anyway
    5b66:	61 15       	cp	r22, r1
    5b68:	71 05       	cpc	r23, r1
    5b6a:	21 f0       	breq	.+8      	; 0x5b74 <audio_beep+0x16>
	_audio_volume = volume;
    5b6c:	60 93 da 3e 	sts	0x3EDA, r22
	_audio_beep();
    5b70:	0e 94 9f 2d 	call	0x5b3e	; 0x5b3e <_audio_beep>
    5b74:	08 95       	ret

00005b76 <service_audio>:
}

//2ms Service Loop -- Call once every 2ms
void service_audio(){
	switch(_audio_state){
    5b76:	80 91 17 22 	lds	r24, 0x2217
    5b7a:	85 32       	cpi	r24, 0x25	; 37
    5b7c:	19 f0       	breq	.+6      	; 0x5b84 <service_audio+0xe>
    5b7e:	86 32       	cpi	r24, 0x26	; 38
    5b80:	19 f5       	brne	.+70     	; 0x5bc8 <service_audio+0x52>
    5b82:	18 c0       	rjmp	.+48     	; 0x5bb4 <service_audio+0x3e>
		case AUDIO_BEEPING:
			_audio_counter--;
    5b84:	80 91 dc 3e 	lds	r24, 0x3EDC
    5b88:	81 50       	subi	r24, 0x01	; 1
    5b8a:	80 93 dc 3e 	sts	0x3EDC, r24
			if (_audio_counter <= 0) {
    5b8e:	88 23       	and	r24, r24
    5b90:	f1 f4       	brne	.+60     	; 0x5bce <service_audio+0x58>
				//End of this beep!
				audio_volume(0x00); //silence!
    5b92:	0e 94 77 2d 	call	0x5aee	; 0x5aee <audio_volume>
				if (_audio_num_beeps == 0) {
    5b96:	80 91 db 3e 	lds	r24, 0x3EDB
    5b9a:	88 23       	and	r24, r24
    5b9c:	21 f4       	brne	.+8      	; 0x5ba6 <service_audio+0x30>
					//End of this beep sequence -- ALL DONE! =)					
					_audio_state = AUDIO_IDLE;
    5b9e:	84 e2       	ldi	r24, 0x24	; 36
    5ba0:	80 93 17 22 	sts	0x2217, r24
    5ba4:	08 95       	ret
				}
				else {
					//start quiet period between beeps
					_audio_state = AUDIO_BETWEEN;
    5ba6:	86 e2       	ldi	r24, 0x26	; 38
    5ba8:	80 93 17 22 	sts	0x2217, r24
					_audio_counter = AUDIO_GAP_LENGTH;
    5bac:	82 e3       	ldi	r24, 0x32	; 50
    5bae:	80 93 dc 3e 	sts	0x3EDC, r24
    5bb2:	08 95       	ret
				}
			}
			break;
		case AUDIO_BETWEEN:
			_audio_counter--;
    5bb4:	80 91 dc 3e 	lds	r24, 0x3EDC
    5bb8:	81 50       	subi	r24, 0x01	; 1
    5bba:	80 93 dc 3e 	sts	0x3EDC, r24
			if (_audio_counter <= 0) {
    5bbe:	88 23       	and	r24, r24
    5bc0:	31 f4       	brne	.+12     	; 0x5bce <service_audio+0x58>
				//End of gap
				_audio_beep();
    5bc2:	0e 94 9f 2d 	call	0x5b3e	; 0x5b3e <_audio_beep>
    5bc6:	08 95       	ret
			}
			break;
		case AUDIO_IDLE:
		default:
			audio_volume(0x00); //Silence!
    5bc8:	80 e0       	ldi	r24, 0x00	; 0
    5bca:	0e 94 77 2d 	call	0x5aee	; 0x5aee <audio_volume>
    5bce:	08 95       	ret

00005bd0 <__cmpsf2>:
    5bd0:	d9 d0       	rcall	.+434    	; 0x5d84 <__fp_cmp>
    5bd2:	08 f4       	brcc	.+2      	; 0x5bd6 <__cmpsf2+0x6>
    5bd4:	81 e0       	ldi	r24, 0x01	; 1
    5bd6:	08 95       	ret

00005bd8 <__divsf3>:
    5bd8:	0c d0       	rcall	.+24     	; 0x5bf2 <__divsf3x>
    5bda:	0f c1       	rjmp	.+542    	; 0x5dfa <__fp_round>
    5bdc:	07 d1       	rcall	.+526    	; 0x5dec <__fp_pscB>
    5bde:	40 f0       	brcs	.+16     	; 0x5bf0 <__divsf3+0x18>
    5be0:	fe d0       	rcall	.+508    	; 0x5dde <__fp_pscA>
    5be2:	30 f0       	brcs	.+12     	; 0x5bf0 <__divsf3+0x18>
    5be4:	21 f4       	brne	.+8      	; 0x5bee <__divsf3+0x16>
    5be6:	5f 3f       	cpi	r21, 0xFF	; 255
    5be8:	19 f0       	breq	.+6      	; 0x5bf0 <__divsf3+0x18>
    5bea:	f0 c0       	rjmp	.+480    	; 0x5dcc <__fp_inf>
    5bec:	51 11       	cpse	r21, r1
    5bee:	39 c1       	rjmp	.+626    	; 0x5e62 <__fp_szero>
    5bf0:	f3 c0       	rjmp	.+486    	; 0x5dd8 <__fp_nan>

00005bf2 <__divsf3x>:
    5bf2:	14 d1       	rcall	.+552    	; 0x5e1c <__fp_split3>
    5bf4:	98 f3       	brcs	.-26     	; 0x5bdc <__divsf3+0x4>

00005bf6 <__divsf3_pse>:
    5bf6:	99 23       	and	r25, r25
    5bf8:	c9 f3       	breq	.-14     	; 0x5bec <__divsf3+0x14>
    5bfa:	55 23       	and	r21, r21
    5bfc:	b1 f3       	breq	.-20     	; 0x5bea <__divsf3+0x12>
    5bfe:	95 1b       	sub	r25, r21
    5c00:	55 0b       	sbc	r21, r21
    5c02:	bb 27       	eor	r27, r27
    5c04:	aa 27       	eor	r26, r26
    5c06:	62 17       	cp	r22, r18
    5c08:	73 07       	cpc	r23, r19
    5c0a:	84 07       	cpc	r24, r20
    5c0c:	38 f0       	brcs	.+14     	; 0x5c1c <__divsf3_pse+0x26>
    5c0e:	9f 5f       	subi	r25, 0xFF	; 255
    5c10:	5f 4f       	sbci	r21, 0xFF	; 255
    5c12:	22 0f       	add	r18, r18
    5c14:	33 1f       	adc	r19, r19
    5c16:	44 1f       	adc	r20, r20
    5c18:	aa 1f       	adc	r26, r26
    5c1a:	a9 f3       	breq	.-22     	; 0x5c06 <__divsf3_pse+0x10>
    5c1c:	33 d0       	rcall	.+102    	; 0x5c84 <__divsf3_pse+0x8e>
    5c1e:	0e 2e       	mov	r0, r30
    5c20:	3a f0       	brmi	.+14     	; 0x5c30 <__divsf3_pse+0x3a>
    5c22:	e0 e8       	ldi	r30, 0x80	; 128
    5c24:	30 d0       	rcall	.+96     	; 0x5c86 <__divsf3_pse+0x90>
    5c26:	91 50       	subi	r25, 0x01	; 1
    5c28:	50 40       	sbci	r21, 0x00	; 0
    5c2a:	e6 95       	lsr	r30
    5c2c:	00 1c       	adc	r0, r0
    5c2e:	ca f7       	brpl	.-14     	; 0x5c22 <__divsf3_pse+0x2c>
    5c30:	29 d0       	rcall	.+82     	; 0x5c84 <__divsf3_pse+0x8e>
    5c32:	fe 2f       	mov	r31, r30
    5c34:	27 d0       	rcall	.+78     	; 0x5c84 <__divsf3_pse+0x8e>
    5c36:	66 0f       	add	r22, r22
    5c38:	77 1f       	adc	r23, r23
    5c3a:	88 1f       	adc	r24, r24
    5c3c:	bb 1f       	adc	r27, r27
    5c3e:	26 17       	cp	r18, r22
    5c40:	37 07       	cpc	r19, r23
    5c42:	48 07       	cpc	r20, r24
    5c44:	ab 07       	cpc	r26, r27
    5c46:	b0 e8       	ldi	r27, 0x80	; 128
    5c48:	09 f0       	breq	.+2      	; 0x5c4c <__divsf3_pse+0x56>
    5c4a:	bb 0b       	sbc	r27, r27
    5c4c:	80 2d       	mov	r24, r0
    5c4e:	bf 01       	movw	r22, r30
    5c50:	ff 27       	eor	r31, r31
    5c52:	93 58       	subi	r25, 0x83	; 131
    5c54:	5f 4f       	sbci	r21, 0xFF	; 255
    5c56:	2a f0       	brmi	.+10     	; 0x5c62 <__divsf3_pse+0x6c>
    5c58:	9e 3f       	cpi	r25, 0xFE	; 254
    5c5a:	51 05       	cpc	r21, r1
    5c5c:	68 f0       	brcs	.+26     	; 0x5c78 <__divsf3_pse+0x82>
    5c5e:	b6 c0       	rjmp	.+364    	; 0x5dcc <__fp_inf>
    5c60:	00 c1       	rjmp	.+512    	; 0x5e62 <__fp_szero>
    5c62:	5f 3f       	cpi	r21, 0xFF	; 255
    5c64:	ec f3       	brlt	.-6      	; 0x5c60 <__divsf3_pse+0x6a>
    5c66:	98 3e       	cpi	r25, 0xE8	; 232
    5c68:	dc f3       	brlt	.-10     	; 0x5c60 <__divsf3_pse+0x6a>
    5c6a:	86 95       	lsr	r24
    5c6c:	77 95       	ror	r23
    5c6e:	67 95       	ror	r22
    5c70:	b7 95       	ror	r27
    5c72:	f7 95       	ror	r31
    5c74:	9f 5f       	subi	r25, 0xFF	; 255
    5c76:	c9 f7       	brne	.-14     	; 0x5c6a <__divsf3_pse+0x74>
    5c78:	88 0f       	add	r24, r24
    5c7a:	91 1d       	adc	r25, r1
    5c7c:	96 95       	lsr	r25
    5c7e:	87 95       	ror	r24
    5c80:	97 f9       	bld	r25, 7
    5c82:	08 95       	ret
    5c84:	e1 e0       	ldi	r30, 0x01	; 1
    5c86:	66 0f       	add	r22, r22
    5c88:	77 1f       	adc	r23, r23
    5c8a:	88 1f       	adc	r24, r24
    5c8c:	bb 1f       	adc	r27, r27
    5c8e:	62 17       	cp	r22, r18
    5c90:	73 07       	cpc	r23, r19
    5c92:	84 07       	cpc	r24, r20
    5c94:	ba 07       	cpc	r27, r26
    5c96:	20 f0       	brcs	.+8      	; 0x5ca0 <__divsf3_pse+0xaa>
    5c98:	62 1b       	sub	r22, r18
    5c9a:	73 0b       	sbc	r23, r19
    5c9c:	84 0b       	sbc	r24, r20
    5c9e:	ba 0b       	sbc	r27, r26
    5ca0:	ee 1f       	adc	r30, r30
    5ca2:	88 f7       	brcc	.-30     	; 0x5c86 <__divsf3_pse+0x90>
    5ca4:	e0 95       	com	r30
    5ca6:	08 95       	ret

00005ca8 <__fixsfsi>:
    5ca8:	04 d0       	rcall	.+8      	; 0x5cb2 <__fixunssfsi>
    5caa:	68 94       	set
    5cac:	b1 11       	cpse	r27, r1
    5cae:	d9 c0       	rjmp	.+434    	; 0x5e62 <__fp_szero>
    5cb0:	08 95       	ret

00005cb2 <__fixunssfsi>:
    5cb2:	bc d0       	rcall	.+376    	; 0x5e2c <__fp_splitA>
    5cb4:	88 f0       	brcs	.+34     	; 0x5cd8 <__fixunssfsi+0x26>
    5cb6:	9f 57       	subi	r25, 0x7F	; 127
    5cb8:	90 f0       	brcs	.+36     	; 0x5cde <__fixunssfsi+0x2c>
    5cba:	b9 2f       	mov	r27, r25
    5cbc:	99 27       	eor	r25, r25
    5cbe:	b7 51       	subi	r27, 0x17	; 23
    5cc0:	a0 f0       	brcs	.+40     	; 0x5cea <__fixunssfsi+0x38>
    5cc2:	d1 f0       	breq	.+52     	; 0x5cf8 <__fixunssfsi+0x46>
    5cc4:	66 0f       	add	r22, r22
    5cc6:	77 1f       	adc	r23, r23
    5cc8:	88 1f       	adc	r24, r24
    5cca:	99 1f       	adc	r25, r25
    5ccc:	1a f0       	brmi	.+6      	; 0x5cd4 <__fixunssfsi+0x22>
    5cce:	ba 95       	dec	r27
    5cd0:	c9 f7       	brne	.-14     	; 0x5cc4 <__fixunssfsi+0x12>
    5cd2:	12 c0       	rjmp	.+36     	; 0x5cf8 <__fixunssfsi+0x46>
    5cd4:	b1 30       	cpi	r27, 0x01	; 1
    5cd6:	81 f0       	breq	.+32     	; 0x5cf8 <__fixunssfsi+0x46>
    5cd8:	c3 d0       	rcall	.+390    	; 0x5e60 <__fp_zero>
    5cda:	b1 e0       	ldi	r27, 0x01	; 1
    5cdc:	08 95       	ret
    5cde:	c0 c0       	rjmp	.+384    	; 0x5e60 <__fp_zero>
    5ce0:	67 2f       	mov	r22, r23
    5ce2:	78 2f       	mov	r23, r24
    5ce4:	88 27       	eor	r24, r24
    5ce6:	b8 5f       	subi	r27, 0xF8	; 248
    5ce8:	39 f0       	breq	.+14     	; 0x5cf8 <__fixunssfsi+0x46>
    5cea:	b9 3f       	cpi	r27, 0xF9	; 249
    5cec:	cc f3       	brlt	.-14     	; 0x5ce0 <__fixunssfsi+0x2e>
    5cee:	86 95       	lsr	r24
    5cf0:	77 95       	ror	r23
    5cf2:	67 95       	ror	r22
    5cf4:	b3 95       	inc	r27
    5cf6:	d9 f7       	brne	.-10     	; 0x5cee <__fixunssfsi+0x3c>
    5cf8:	3e f4       	brtc	.+14     	; 0x5d08 <__fixunssfsi+0x56>
    5cfa:	90 95       	com	r25
    5cfc:	80 95       	com	r24
    5cfe:	70 95       	com	r23
    5d00:	61 95       	neg	r22
    5d02:	7f 4f       	sbci	r23, 0xFF	; 255
    5d04:	8f 4f       	sbci	r24, 0xFF	; 255
    5d06:	9f 4f       	sbci	r25, 0xFF	; 255
    5d08:	08 95       	ret

00005d0a <__floatunsisf>:
    5d0a:	e8 94       	clt
    5d0c:	09 c0       	rjmp	.+18     	; 0x5d20 <__floatsisf+0x12>

00005d0e <__floatsisf>:
    5d0e:	97 fb       	bst	r25, 7
    5d10:	3e f4       	brtc	.+14     	; 0x5d20 <__floatsisf+0x12>
    5d12:	90 95       	com	r25
    5d14:	80 95       	com	r24
    5d16:	70 95       	com	r23
    5d18:	61 95       	neg	r22
    5d1a:	7f 4f       	sbci	r23, 0xFF	; 255
    5d1c:	8f 4f       	sbci	r24, 0xFF	; 255
    5d1e:	9f 4f       	sbci	r25, 0xFF	; 255
    5d20:	99 23       	and	r25, r25
    5d22:	a9 f0       	breq	.+42     	; 0x5d4e <__floatsisf+0x40>
    5d24:	f9 2f       	mov	r31, r25
    5d26:	96 e9       	ldi	r25, 0x96	; 150
    5d28:	bb 27       	eor	r27, r27
    5d2a:	93 95       	inc	r25
    5d2c:	f6 95       	lsr	r31
    5d2e:	87 95       	ror	r24
    5d30:	77 95       	ror	r23
    5d32:	67 95       	ror	r22
    5d34:	b7 95       	ror	r27
    5d36:	f1 11       	cpse	r31, r1
    5d38:	f8 cf       	rjmp	.-16     	; 0x5d2a <__floatsisf+0x1c>
    5d3a:	fa f4       	brpl	.+62     	; 0x5d7a <__floatsisf+0x6c>
    5d3c:	bb 0f       	add	r27, r27
    5d3e:	11 f4       	brne	.+4      	; 0x5d44 <__floatsisf+0x36>
    5d40:	60 ff       	sbrs	r22, 0
    5d42:	1b c0       	rjmp	.+54     	; 0x5d7a <__floatsisf+0x6c>
    5d44:	6f 5f       	subi	r22, 0xFF	; 255
    5d46:	7f 4f       	sbci	r23, 0xFF	; 255
    5d48:	8f 4f       	sbci	r24, 0xFF	; 255
    5d4a:	9f 4f       	sbci	r25, 0xFF	; 255
    5d4c:	16 c0       	rjmp	.+44     	; 0x5d7a <__floatsisf+0x6c>
    5d4e:	88 23       	and	r24, r24
    5d50:	11 f0       	breq	.+4      	; 0x5d56 <__floatsisf+0x48>
    5d52:	96 e9       	ldi	r25, 0x96	; 150
    5d54:	11 c0       	rjmp	.+34     	; 0x5d78 <__floatsisf+0x6a>
    5d56:	77 23       	and	r23, r23
    5d58:	21 f0       	breq	.+8      	; 0x5d62 <__floatsisf+0x54>
    5d5a:	9e e8       	ldi	r25, 0x8E	; 142
    5d5c:	87 2f       	mov	r24, r23
    5d5e:	76 2f       	mov	r23, r22
    5d60:	05 c0       	rjmp	.+10     	; 0x5d6c <__floatsisf+0x5e>
    5d62:	66 23       	and	r22, r22
    5d64:	71 f0       	breq	.+28     	; 0x5d82 <__floatsisf+0x74>
    5d66:	96 e8       	ldi	r25, 0x86	; 134
    5d68:	86 2f       	mov	r24, r22
    5d6a:	70 e0       	ldi	r23, 0x00	; 0
    5d6c:	60 e0       	ldi	r22, 0x00	; 0
    5d6e:	2a f0       	brmi	.+10     	; 0x5d7a <__floatsisf+0x6c>
    5d70:	9a 95       	dec	r25
    5d72:	66 0f       	add	r22, r22
    5d74:	77 1f       	adc	r23, r23
    5d76:	88 1f       	adc	r24, r24
    5d78:	da f7       	brpl	.-10     	; 0x5d70 <__floatsisf+0x62>
    5d7a:	88 0f       	add	r24, r24
    5d7c:	96 95       	lsr	r25
    5d7e:	87 95       	ror	r24
    5d80:	97 f9       	bld	r25, 7
    5d82:	08 95       	ret

00005d84 <__fp_cmp>:
    5d84:	99 0f       	add	r25, r25
    5d86:	00 08       	sbc	r0, r0
    5d88:	55 0f       	add	r21, r21
    5d8a:	aa 0b       	sbc	r26, r26
    5d8c:	e0 e8       	ldi	r30, 0x80	; 128
    5d8e:	fe ef       	ldi	r31, 0xFE	; 254
    5d90:	16 16       	cp	r1, r22
    5d92:	17 06       	cpc	r1, r23
    5d94:	e8 07       	cpc	r30, r24
    5d96:	f9 07       	cpc	r31, r25
    5d98:	c0 f0       	brcs	.+48     	; 0x5dca <__fp_cmp+0x46>
    5d9a:	12 16       	cp	r1, r18
    5d9c:	13 06       	cpc	r1, r19
    5d9e:	e4 07       	cpc	r30, r20
    5da0:	f5 07       	cpc	r31, r21
    5da2:	98 f0       	brcs	.+38     	; 0x5dca <__fp_cmp+0x46>
    5da4:	62 1b       	sub	r22, r18
    5da6:	73 0b       	sbc	r23, r19
    5da8:	84 0b       	sbc	r24, r20
    5daa:	95 0b       	sbc	r25, r21
    5dac:	39 f4       	brne	.+14     	; 0x5dbc <__fp_cmp+0x38>
    5dae:	0a 26       	eor	r0, r26
    5db0:	61 f0       	breq	.+24     	; 0x5dca <__fp_cmp+0x46>
    5db2:	23 2b       	or	r18, r19
    5db4:	24 2b       	or	r18, r20
    5db6:	25 2b       	or	r18, r21
    5db8:	21 f4       	brne	.+8      	; 0x5dc2 <__fp_cmp+0x3e>
    5dba:	08 95       	ret
    5dbc:	0a 26       	eor	r0, r26
    5dbe:	09 f4       	brne	.+2      	; 0x5dc2 <__fp_cmp+0x3e>
    5dc0:	a1 40       	sbci	r26, 0x01	; 1
    5dc2:	a6 95       	lsr	r26
    5dc4:	8f ef       	ldi	r24, 0xFF	; 255
    5dc6:	81 1d       	adc	r24, r1
    5dc8:	81 1d       	adc	r24, r1
    5dca:	08 95       	ret

00005dcc <__fp_inf>:
    5dcc:	97 f9       	bld	r25, 7
    5dce:	9f 67       	ori	r25, 0x7F	; 127
    5dd0:	80 e8       	ldi	r24, 0x80	; 128
    5dd2:	70 e0       	ldi	r23, 0x00	; 0
    5dd4:	60 e0       	ldi	r22, 0x00	; 0
    5dd6:	08 95       	ret

00005dd8 <__fp_nan>:
    5dd8:	9f ef       	ldi	r25, 0xFF	; 255
    5dda:	80 ec       	ldi	r24, 0xC0	; 192
    5ddc:	08 95       	ret

00005dde <__fp_pscA>:
    5dde:	00 24       	eor	r0, r0
    5de0:	0a 94       	dec	r0
    5de2:	16 16       	cp	r1, r22
    5de4:	17 06       	cpc	r1, r23
    5de6:	18 06       	cpc	r1, r24
    5de8:	09 06       	cpc	r0, r25
    5dea:	08 95       	ret

00005dec <__fp_pscB>:
    5dec:	00 24       	eor	r0, r0
    5dee:	0a 94       	dec	r0
    5df0:	12 16       	cp	r1, r18
    5df2:	13 06       	cpc	r1, r19
    5df4:	14 06       	cpc	r1, r20
    5df6:	05 06       	cpc	r0, r21
    5df8:	08 95       	ret

00005dfa <__fp_round>:
    5dfa:	09 2e       	mov	r0, r25
    5dfc:	03 94       	inc	r0
    5dfe:	00 0c       	add	r0, r0
    5e00:	11 f4       	brne	.+4      	; 0x5e06 <__fp_round+0xc>
    5e02:	88 23       	and	r24, r24
    5e04:	52 f0       	brmi	.+20     	; 0x5e1a <__fp_round+0x20>
    5e06:	bb 0f       	add	r27, r27
    5e08:	40 f4       	brcc	.+16     	; 0x5e1a <__fp_round+0x20>
    5e0a:	bf 2b       	or	r27, r31
    5e0c:	11 f4       	brne	.+4      	; 0x5e12 <__fp_round+0x18>
    5e0e:	60 ff       	sbrs	r22, 0
    5e10:	04 c0       	rjmp	.+8      	; 0x5e1a <__fp_round+0x20>
    5e12:	6f 5f       	subi	r22, 0xFF	; 255
    5e14:	7f 4f       	sbci	r23, 0xFF	; 255
    5e16:	8f 4f       	sbci	r24, 0xFF	; 255
    5e18:	9f 4f       	sbci	r25, 0xFF	; 255
    5e1a:	08 95       	ret

00005e1c <__fp_split3>:
    5e1c:	57 fd       	sbrc	r21, 7
    5e1e:	90 58       	subi	r25, 0x80	; 128
    5e20:	44 0f       	add	r20, r20
    5e22:	55 1f       	adc	r21, r21
    5e24:	59 f0       	breq	.+22     	; 0x5e3c <__fp_splitA+0x10>
    5e26:	5f 3f       	cpi	r21, 0xFF	; 255
    5e28:	71 f0       	breq	.+28     	; 0x5e46 <__fp_splitA+0x1a>
    5e2a:	47 95       	ror	r20

00005e2c <__fp_splitA>:
    5e2c:	88 0f       	add	r24, r24
    5e2e:	97 fb       	bst	r25, 7
    5e30:	99 1f       	adc	r25, r25
    5e32:	61 f0       	breq	.+24     	; 0x5e4c <__fp_splitA+0x20>
    5e34:	9f 3f       	cpi	r25, 0xFF	; 255
    5e36:	79 f0       	breq	.+30     	; 0x5e56 <__fp_splitA+0x2a>
    5e38:	87 95       	ror	r24
    5e3a:	08 95       	ret
    5e3c:	12 16       	cp	r1, r18
    5e3e:	13 06       	cpc	r1, r19
    5e40:	14 06       	cpc	r1, r20
    5e42:	55 1f       	adc	r21, r21
    5e44:	f2 cf       	rjmp	.-28     	; 0x5e2a <__fp_split3+0xe>
    5e46:	46 95       	lsr	r20
    5e48:	f1 df       	rcall	.-30     	; 0x5e2c <__fp_splitA>
    5e4a:	08 c0       	rjmp	.+16     	; 0x5e5c <__fp_splitA+0x30>
    5e4c:	16 16       	cp	r1, r22
    5e4e:	17 06       	cpc	r1, r23
    5e50:	18 06       	cpc	r1, r24
    5e52:	99 1f       	adc	r25, r25
    5e54:	f1 cf       	rjmp	.-30     	; 0x5e38 <__fp_splitA+0xc>
    5e56:	86 95       	lsr	r24
    5e58:	71 05       	cpc	r23, r1
    5e5a:	61 05       	cpc	r22, r1
    5e5c:	08 94       	sec
    5e5e:	08 95       	ret

00005e60 <__fp_zero>:
    5e60:	e8 94       	clt

00005e62 <__fp_szero>:
    5e62:	bb 27       	eor	r27, r27
    5e64:	66 27       	eor	r22, r22
    5e66:	77 27       	eor	r23, r23
    5e68:	cb 01       	movw	r24, r22
    5e6a:	97 f9       	bld	r25, 7
    5e6c:	08 95       	ret

00005e6e <__mulsf3>:
    5e6e:	0b d0       	rcall	.+22     	; 0x5e86 <__mulsf3x>
    5e70:	c4 cf       	rjmp	.-120    	; 0x5dfa <__fp_round>
    5e72:	b5 df       	rcall	.-150    	; 0x5dde <__fp_pscA>
    5e74:	28 f0       	brcs	.+10     	; 0x5e80 <__mulsf3+0x12>
    5e76:	ba df       	rcall	.-140    	; 0x5dec <__fp_pscB>
    5e78:	18 f0       	brcs	.+6      	; 0x5e80 <__mulsf3+0x12>
    5e7a:	95 23       	and	r25, r21
    5e7c:	09 f0       	breq	.+2      	; 0x5e80 <__mulsf3+0x12>
    5e7e:	a6 cf       	rjmp	.-180    	; 0x5dcc <__fp_inf>
    5e80:	ab cf       	rjmp	.-170    	; 0x5dd8 <__fp_nan>
    5e82:	11 24       	eor	r1, r1
    5e84:	ee cf       	rjmp	.-36     	; 0x5e62 <__fp_szero>

00005e86 <__mulsf3x>:
    5e86:	ca df       	rcall	.-108    	; 0x5e1c <__fp_split3>
    5e88:	a0 f3       	brcs	.-24     	; 0x5e72 <__mulsf3+0x4>

00005e8a <__mulsf3_pse>:
    5e8a:	95 9f       	mul	r25, r21
    5e8c:	d1 f3       	breq	.-12     	; 0x5e82 <__mulsf3+0x14>
    5e8e:	95 0f       	add	r25, r21
    5e90:	50 e0       	ldi	r21, 0x00	; 0
    5e92:	55 1f       	adc	r21, r21
    5e94:	62 9f       	mul	r22, r18
    5e96:	f0 01       	movw	r30, r0
    5e98:	72 9f       	mul	r23, r18
    5e9a:	bb 27       	eor	r27, r27
    5e9c:	f0 0d       	add	r31, r0
    5e9e:	b1 1d       	adc	r27, r1
    5ea0:	63 9f       	mul	r22, r19
    5ea2:	aa 27       	eor	r26, r26
    5ea4:	f0 0d       	add	r31, r0
    5ea6:	b1 1d       	adc	r27, r1
    5ea8:	aa 1f       	adc	r26, r26
    5eaa:	64 9f       	mul	r22, r20
    5eac:	66 27       	eor	r22, r22
    5eae:	b0 0d       	add	r27, r0
    5eb0:	a1 1d       	adc	r26, r1
    5eb2:	66 1f       	adc	r22, r22
    5eb4:	82 9f       	mul	r24, r18
    5eb6:	22 27       	eor	r18, r18
    5eb8:	b0 0d       	add	r27, r0
    5eba:	a1 1d       	adc	r26, r1
    5ebc:	62 1f       	adc	r22, r18
    5ebe:	73 9f       	mul	r23, r19
    5ec0:	b0 0d       	add	r27, r0
    5ec2:	a1 1d       	adc	r26, r1
    5ec4:	62 1f       	adc	r22, r18
    5ec6:	83 9f       	mul	r24, r19
    5ec8:	a0 0d       	add	r26, r0
    5eca:	61 1d       	adc	r22, r1
    5ecc:	22 1f       	adc	r18, r18
    5ece:	74 9f       	mul	r23, r20
    5ed0:	33 27       	eor	r19, r19
    5ed2:	a0 0d       	add	r26, r0
    5ed4:	61 1d       	adc	r22, r1
    5ed6:	23 1f       	adc	r18, r19
    5ed8:	84 9f       	mul	r24, r20
    5eda:	60 0d       	add	r22, r0
    5edc:	21 1d       	adc	r18, r1
    5ede:	82 2f       	mov	r24, r18
    5ee0:	76 2f       	mov	r23, r22
    5ee2:	6a 2f       	mov	r22, r26
    5ee4:	11 24       	eor	r1, r1
    5ee6:	9f 57       	subi	r25, 0x7F	; 127
    5ee8:	50 40       	sbci	r21, 0x00	; 0
    5eea:	8a f0       	brmi	.+34     	; 0x5f0e <__mulsf3_pse+0x84>
    5eec:	e1 f0       	breq	.+56     	; 0x5f26 <__mulsf3_pse+0x9c>
    5eee:	88 23       	and	r24, r24
    5ef0:	4a f0       	brmi	.+18     	; 0x5f04 <__mulsf3_pse+0x7a>
    5ef2:	ee 0f       	add	r30, r30
    5ef4:	ff 1f       	adc	r31, r31
    5ef6:	bb 1f       	adc	r27, r27
    5ef8:	66 1f       	adc	r22, r22
    5efa:	77 1f       	adc	r23, r23
    5efc:	88 1f       	adc	r24, r24
    5efe:	91 50       	subi	r25, 0x01	; 1
    5f00:	50 40       	sbci	r21, 0x00	; 0
    5f02:	a9 f7       	brne	.-22     	; 0x5eee <__mulsf3_pse+0x64>
    5f04:	9e 3f       	cpi	r25, 0xFE	; 254
    5f06:	51 05       	cpc	r21, r1
    5f08:	70 f0       	brcs	.+28     	; 0x5f26 <__mulsf3_pse+0x9c>
    5f0a:	60 cf       	rjmp	.-320    	; 0x5dcc <__fp_inf>
    5f0c:	aa cf       	rjmp	.-172    	; 0x5e62 <__fp_szero>
    5f0e:	5f 3f       	cpi	r21, 0xFF	; 255
    5f10:	ec f3       	brlt	.-6      	; 0x5f0c <__mulsf3_pse+0x82>
    5f12:	98 3e       	cpi	r25, 0xE8	; 232
    5f14:	dc f3       	brlt	.-10     	; 0x5f0c <__mulsf3_pse+0x82>
    5f16:	86 95       	lsr	r24
    5f18:	77 95       	ror	r23
    5f1a:	67 95       	ror	r22
    5f1c:	b7 95       	ror	r27
    5f1e:	f7 95       	ror	r31
    5f20:	e7 95       	ror	r30
    5f22:	9f 5f       	subi	r25, 0xFF	; 255
    5f24:	c1 f7       	brne	.-16     	; 0x5f16 <__mulsf3_pse+0x8c>
    5f26:	fe 2b       	or	r31, r30
    5f28:	88 0f       	add	r24, r24
    5f2a:	91 1d       	adc	r25, r1
    5f2c:	96 95       	lsr	r25
    5f2e:	87 95       	ror	r24
    5f30:	97 f9       	bld	r25, 7
    5f32:	08 95       	ret

00005f34 <utoa>:
    5f34:	fb 01       	movw	r30, r22
    5f36:	9f 01       	movw	r18, r30
    5f38:	42 30       	cpi	r20, 0x02	; 2
    5f3a:	74 f0       	brlt	.+28     	; 0x5f58 <utoa+0x24>
    5f3c:	45 32       	cpi	r20, 0x25	; 37
    5f3e:	64 f4       	brge	.+24     	; 0x5f58 <utoa+0x24>
    5f40:	64 2f       	mov	r22, r20
    5f42:	77 27       	eor	r23, r23
    5f44:	0e 94 12 30 	call	0x6024	; 0x6024 <__udivmodhi4>
    5f48:	80 5d       	subi	r24, 0xD0	; 208
    5f4a:	8a 33       	cpi	r24, 0x3A	; 58
    5f4c:	0c f0       	brlt	.+2      	; 0x5f50 <utoa+0x1c>
    5f4e:	89 5d       	subi	r24, 0xD9	; 217
    5f50:	81 93       	st	Z+, r24
    5f52:	cb 01       	movw	r24, r22
    5f54:	00 97       	sbiw	r24, 0x00	; 0
    5f56:	a1 f7       	brne	.-24     	; 0x5f40 <utoa+0xc>
    5f58:	10 82       	st	Z, r1
    5f5a:	c9 01       	movw	r24, r18
    5f5c:	0c 94 02 30 	jmp	0x6004	; 0x6004 <strrev>

00005f60 <__eerd_block_x128a1>:
    5f60:	e0 ec       	ldi	r30, 0xC0	; 192
    5f62:	f1 e0       	ldi	r31, 0x01	; 1
    5f64:	a7 85       	ldd	r26, Z+15	; 0x0f
    5f66:	a7 fd       	sbrc	r26, 7
    5f68:	fd cf       	rjmp	.-6      	; 0x5f64 <__eerd_block_x128a1+0x4>
    5f6a:	a4 85       	ldd	r26, Z+12	; 0x0c
    5f6c:	a8 60       	ori	r26, 0x08	; 8
    5f6e:	a4 87       	std	Z+12, r26	; 0x0c
    5f70:	60 50       	subi	r22, 0x00	; 0
    5f72:	70 4f       	sbci	r23, 0xF0	; 240
    5f74:	0c 94 f9 2f 	jmp	0x5ff2	; 0x5ff2 <memcpy>

00005f78 <__eerd_byte_x128a1>:
    5f78:	03 d0       	rcall	.+6      	; 0x5f80 <eeprom_mapen>
    5f7a:	80 81       	ld	r24, Z
    5f7c:	99 27       	eor	r25, r25
    5f7e:	08 95       	ret

00005f80 <eeprom_mapen>:
    5f80:	e0 ec       	ldi	r30, 0xC0	; 192
    5f82:	f1 e0       	ldi	r31, 0x01	; 1
    5f84:	37 85       	ldd	r19, Z+15	; 0x0f
    5f86:	37 fd       	sbrc	r19, 7
    5f88:	fd cf       	rjmp	.-6      	; 0x5f84 <eeprom_mapen+0x4>
    5f8a:	34 85       	ldd	r19, Z+12	; 0x0c
    5f8c:	38 60       	ori	r19, 0x08	; 8
    5f8e:	34 87       	std	Z+12, r19	; 0x0c
    5f90:	fc 01       	movw	r30, r24
    5f92:	e0 50       	subi	r30, 0x00	; 0
    5f94:	f0 4f       	sbci	r31, 0xF0	; 240
    5f96:	08 95       	ret

00005f98 <__eewr_block_x128a1>:
    5f98:	dc 01       	movw	r26, r24
    5f9a:	cb 01       	movw	r24, r22
    5f9c:	03 c0       	rjmp	.+6      	; 0x5fa4 <__eewr_block_x128a1+0xc>
    5f9e:	2d 91       	ld	r18, X+
    5fa0:	0e 94 d7 2f 	call	0x5fae	; 0x5fae <__eewr_r18_x128a1>
    5fa4:	41 50       	subi	r20, 0x01	; 1
    5fa6:	50 40       	sbci	r21, 0x00	; 0
    5fa8:	d0 f7       	brcc	.-12     	; 0x5f9e <__eewr_block_x128a1+0x6>
    5faa:	08 95       	ret

00005fac <__eewr_byte_x128a1>:
    5fac:	26 2f       	mov	r18, r22

00005fae <__eewr_r18_x128a1>:
    5fae:	e0 ec       	ldi	r30, 0xC0	; 192
    5fb0:	f1 e0       	ldi	r31, 0x01	; 1
    5fb2:	37 85       	ldd	r19, Z+15	; 0x0f
    5fb4:	37 fd       	sbrc	r19, 7
    5fb6:	fd cf       	rjmp	.-6      	; 0x5fb2 <__eewr_r18_x128a1+0x4>
    5fb8:	34 85       	ldd	r19, Z+12	; 0x0c
    5fba:	37 7f       	andi	r19, 0xF7	; 247
    5fbc:	34 87       	std	Z+12, r19	; 0x0c
    5fbe:	37 85       	ldd	r19, Z+15	; 0x0f
    5fc0:	31 ff       	sbrs	r19, 1
    5fc2:	09 c0       	rjmp	.+18     	; 0x5fd6 <__eewr_r18_x128a1+0x28>
    5fc4:	36 e3       	ldi	r19, 0x36	; 54
    5fc6:	32 87       	std	Z+10, r19	; 0x0a
    5fc8:	38 ed       	ldi	r19, 0xD8	; 216
    5fca:	34 bf       	out	0x34, r19	; 52
    5fcc:	31 e0       	ldi	r19, 0x01	; 1
    5fce:	33 87       	std	Z+11, r19	; 0x0b
    5fd0:	37 85       	ldd	r19, Z+15	; 0x0f
    5fd2:	37 fd       	sbrc	r19, 7
    5fd4:	fd cf       	rjmp	.-6      	; 0x5fd0 <__eewr_r18_x128a1+0x22>
    5fd6:	33 e3       	ldi	r19, 0x33	; 51
    5fd8:	32 87       	std	Z+10, r19	; 0x0a
    5fda:	80 83       	st	Z, r24
    5fdc:	91 83       	std	Z+1, r25	; 0x01
    5fde:	12 82       	std	Z+2, r1	; 0x02
    5fe0:	24 83       	std	Z+4, r18	; 0x04
    5fe2:	25 e3       	ldi	r18, 0x35	; 53
    5fe4:	22 87       	std	Z+10, r18	; 0x0a
    5fe6:	28 ed       	ldi	r18, 0xD8	; 216
    5fe8:	31 e0       	ldi	r19, 0x01	; 1
    5fea:	24 bf       	out	0x34, r18	; 52
    5fec:	33 87       	std	Z+11, r19	; 0x0b
    5fee:	01 96       	adiw	r24, 0x01	; 1
    5ff0:	08 95       	ret

00005ff2 <memcpy>:
    5ff2:	fb 01       	movw	r30, r22
    5ff4:	dc 01       	movw	r26, r24
    5ff6:	02 c0       	rjmp	.+4      	; 0x5ffc <memcpy+0xa>
    5ff8:	01 90       	ld	r0, Z+
    5ffa:	0d 92       	st	X+, r0
    5ffc:	41 50       	subi	r20, 0x01	; 1
    5ffe:	50 40       	sbci	r21, 0x00	; 0
    6000:	d8 f7       	brcc	.-10     	; 0x5ff8 <memcpy+0x6>
    6002:	08 95       	ret

00006004 <strrev>:
    6004:	dc 01       	movw	r26, r24
    6006:	fc 01       	movw	r30, r24
    6008:	67 2f       	mov	r22, r23
    600a:	71 91       	ld	r23, Z+
    600c:	77 23       	and	r23, r23
    600e:	e1 f7       	brne	.-8      	; 0x6008 <strrev+0x4>
    6010:	32 97       	sbiw	r30, 0x02	; 2
    6012:	04 c0       	rjmp	.+8      	; 0x601c <strrev+0x18>
    6014:	7c 91       	ld	r23, X
    6016:	6d 93       	st	X+, r22
    6018:	70 83       	st	Z, r23
    601a:	62 91       	ld	r22, -Z
    601c:	ae 17       	cp	r26, r30
    601e:	bf 07       	cpc	r27, r31
    6020:	c8 f3       	brcs	.-14     	; 0x6014 <strrev+0x10>
    6022:	08 95       	ret

00006024 <__udivmodhi4>:
    6024:	aa 1b       	sub	r26, r26
    6026:	bb 1b       	sub	r27, r27
    6028:	51 e1       	ldi	r21, 0x11	; 17
    602a:	07 c0       	rjmp	.+14     	; 0x603a <__udivmodhi4_ep>

0000602c <__udivmodhi4_loop>:
    602c:	aa 1f       	adc	r26, r26
    602e:	bb 1f       	adc	r27, r27
    6030:	a6 17       	cp	r26, r22
    6032:	b7 07       	cpc	r27, r23
    6034:	10 f0       	brcs	.+4      	; 0x603a <__udivmodhi4_ep>
    6036:	a6 1b       	sub	r26, r22
    6038:	b7 0b       	sbc	r27, r23

0000603a <__udivmodhi4_ep>:
    603a:	88 1f       	adc	r24, r24
    603c:	99 1f       	adc	r25, r25
    603e:	5a 95       	dec	r21
    6040:	a9 f7       	brne	.-22     	; 0x602c <__udivmodhi4_loop>
    6042:	80 95       	com	r24
    6044:	90 95       	com	r25
    6046:	bc 01       	movw	r22, r24
    6048:	cd 01       	movw	r24, r26
    604a:	08 95       	ret

0000604c <_exit>:
    604c:	f8 94       	cli

0000604e <__stop_program>:
    604e:	ff cf       	rjmp	.-2      	; 0x604e <__stop_program>
